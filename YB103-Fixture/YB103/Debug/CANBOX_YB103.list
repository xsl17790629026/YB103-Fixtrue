
CANBOX_YB103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010fac  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000207c  080111a0  080111a0  000121a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801321c  0801321c  0001956c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801321c  0801321c  0001421c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013224  08013224  0001956c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013224  08013224  00014224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013228  08013228  00014228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000456c  20000000  0801322c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050f0  2000456c  08017798  0001956c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000965c  08017798  0001965c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001956c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007bc8  00000000  00000000  00019595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000179b  00000000  00000000  0002115d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  000228f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000175c  00000000  00000000  00024248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000fedd  00000000  00000000  000259a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00004204  00000000  00000000  00035881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00039a85  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005724  00000000  00000000  00039ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000004a  00000000  00000000  0003f1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000456c 	.word	0x2000456c
 800020c:	00000000 	.word	0x00000000
 8000210:	08011184 	.word	0x08011184

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20004570 	.word	0x20004570
 800022c:	08011184 	.word	0x08011184

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	@ 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9c2 	b.w	8000fe4 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff0b 	bl	8000a9c <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <__aeabi_d2ulz+0x34>)
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fc81 	bl	80005b8 <__aeabi_dmul>
 8000cb6:	f7ff ff57 	bl	8000b68 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc02 	bl	80004c4 <__aeabi_ui2d>
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc4:	f7ff fc78 	bl	80005b8 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff faba 	bl	8000248 <__aeabi_dsub>
 8000cd4:	f7ff ff48 	bl	8000b68 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9d08      	ldr	r5, [sp, #32]
 8000cea:	468e      	mov	lr, r1
 8000cec:	4604      	mov	r4, r0
 8000cee:	4688      	mov	r8, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14a      	bne.n	8000d8a <__udivmoddi4+0xa6>
 8000cf4:	428a      	cmp	r2, r1
 8000cf6:	4617      	mov	r7, r2
 8000cf8:	d962      	bls.n	8000dc0 <__udivmoddi4+0xdc>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	b14e      	cbz	r6, 8000d14 <__udivmoddi4+0x30>
 8000d00:	f1c6 0320 	rsb	r3, r6, #32
 8000d04:	fa01 f806 	lsl.w	r8, r1, r6
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	40b7      	lsls	r7, r6
 8000d0e:	ea43 0808 	orr.w	r8, r3, r8
 8000d12:	40b4      	lsls	r4, r6
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d1c:	fa1f fc87 	uxth.w	ip, r7
 8000d20:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d24:	fb01 f20c 	mul.w	r2, r1, ip
 8000d28:	0c23      	lsrs	r3, r4, #16
 8000d2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x62>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d38:	f080 80eb 	bcs.w	8000f12 <__udivmoddi4+0x22e>
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	f240 80e8 	bls.w	8000f12 <__udivmoddi4+0x22e>
 8000d42:	3902      	subs	r1, #2
 8000d44:	443b      	add	r3, r7
 8000d46:	1a9a      	subs	r2, r3, r2
 8000d48:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d4c:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d50:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d54:	b2a3      	uxth	r3, r4
 8000d56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d5a:	459c      	cmp	ip, r3
 8000d5c:	d909      	bls.n	8000d72 <__udivmoddi4+0x8e>
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d64:	f080 80d7 	bcs.w	8000f16 <__udivmoddi4+0x232>
 8000d68:	459c      	cmp	ip, r3
 8000d6a:	f240 80d4 	bls.w	8000f16 <__udivmoddi4+0x232>
 8000d6e:	443b      	add	r3, r7
 8000d70:	3802      	subs	r0, #2
 8000d72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d76:	2100      	movs	r1, #0
 8000d78:	eba3 030c 	sub.w	r3, r3, ip
 8000d7c:	b11d      	cbz	r5, 8000d86 <__udivmoddi4+0xa2>
 8000d7e:	2200      	movs	r2, #0
 8000d80:	40f3      	lsrs	r3, r6
 8000d82:	e9c5 3200 	strd	r3, r2, [r5]
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d905      	bls.n	8000d9a <__udivmoddi4+0xb6>
 8000d8e:	b10d      	cbz	r5, 8000d94 <__udivmoddi4+0xb0>
 8000d90:	e9c5 0100 	strd	r0, r1, [r5]
 8000d94:	2100      	movs	r1, #0
 8000d96:	4608      	mov	r0, r1
 8000d98:	e7f5      	b.n	8000d86 <__udivmoddi4+0xa2>
 8000d9a:	fab3 f183 	clz	r1, r3
 8000d9e:	2900      	cmp	r1, #0
 8000da0:	d146      	bne.n	8000e30 <__udivmoddi4+0x14c>
 8000da2:	4573      	cmp	r3, lr
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xc8>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 8108 	bhi.w	8000fbc <__udivmoddi4+0x2d8>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb6e 0203 	sbc.w	r2, lr, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	4690      	mov	r8, r2
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0e5      	beq.n	8000d86 <__udivmoddi4+0xa2>
 8000dba:	e9c5 4800 	strd	r4, r8, [r5]
 8000dbe:	e7e2      	b.n	8000d86 <__udivmoddi4+0xa2>
 8000dc0:	2a00      	cmp	r2, #0
 8000dc2:	f000 8091 	beq.w	8000ee8 <__udivmoddi4+0x204>
 8000dc6:	fab2 f682 	clz	r6, r2
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	f040 80a5 	bne.w	8000f1a <__udivmoddi4+0x236>
 8000dd0:	1a8a      	subs	r2, r1, r2
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	0c03      	lsrs	r3, r0, #16
 8000dd6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dda:	b280      	uxth	r0, r0
 8000ddc:	b2bc      	uxth	r4, r7
 8000dde:	fbb2 fcfe 	udiv	ip, r2, lr
 8000de2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dea:	fb04 f20c 	mul.w	r2, r4, ip
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x11e>
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000df8:	d202      	bcs.n	8000e00 <__udivmoddi4+0x11c>
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	f200 80e3 	bhi.w	8000fc6 <__udivmoddi4+0x2e2>
 8000e00:	46c4      	mov	ip, r8
 8000e02:	1a9b      	subs	r3, r3, r2
 8000e04:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e08:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e0c:	fb02 f404 	mul.w	r4, r2, r4
 8000e10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e14:	429c      	cmp	r4, r3
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0x144>
 8000e18:	18fb      	adds	r3, r7, r3
 8000e1a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0x142>
 8000e20:	429c      	cmp	r4, r3
 8000e22:	f200 80cd 	bhi.w	8000fc0 <__udivmoddi4+0x2dc>
 8000e26:	4602      	mov	r2, r0
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e2e:	e7a5      	b.n	8000d7c <__udivmoddi4+0x98>
 8000e30:	f1c1 0620 	rsb	r6, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 f706 	lsr.w	r7, r2, r6
 8000e3a:	431f      	orrs	r7, r3
 8000e3c:	fa2e fa06 	lsr.w	sl, lr, r6
 8000e40:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e44:	fbba f8f9 	udiv	r8, sl, r9
 8000e48:	fa0e fe01 	lsl.w	lr, lr, r1
 8000e4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000e50:	fb09 aa18 	mls	sl, r9, r8, sl
 8000e54:	fa1f fc87 	uxth.w	ip, r7
 8000e58:	ea43 030e 	orr.w	r3, r3, lr
 8000e5c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000e60:	fb08 f00c 	mul.w	r0, r8, ip
 8000e64:	0c1c      	lsrs	r4, r3, #16
 8000e66:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000e6a:	42a0      	cmp	r0, r4
 8000e6c:	fa02 f201 	lsl.w	r2, r2, r1
 8000e70:	d90a      	bls.n	8000e88 <__udivmoddi4+0x1a4>
 8000e72:	193c      	adds	r4, r7, r4
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e78:	f080 809e 	bcs.w	8000fb8 <__udivmoddi4+0x2d4>
 8000e7c:	42a0      	cmp	r0, r4
 8000e7e:	f240 809b 	bls.w	8000fb8 <__udivmoddi4+0x2d4>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	443c      	add	r4, r7
 8000e88:	1a24      	subs	r4, r4, r0
 8000e8a:	b298      	uxth	r0, r3
 8000e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e90:	fb09 4413 	mls	r4, r9, r3, r4
 8000e94:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e98:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000e9c:	45a4      	cmp	ip, r4
 8000e9e:	d909      	bls.n	8000eb4 <__udivmoddi4+0x1d0>
 8000ea0:	193c      	adds	r4, r7, r4
 8000ea2:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea6:	f080 8085 	bcs.w	8000fb4 <__udivmoddi4+0x2d0>
 8000eaa:	45a4      	cmp	ip, r4
 8000eac:	f240 8082 	bls.w	8000fb4 <__udivmoddi4+0x2d0>
 8000eb0:	3b02      	subs	r3, #2
 8000eb2:	443c      	add	r4, r7
 8000eb4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000eb8:	eba4 040c 	sub.w	r4, r4, ip
 8000ebc:	fba0 8c02 	umull	r8, ip, r0, r2
 8000ec0:	4564      	cmp	r4, ip
 8000ec2:	4643      	mov	r3, r8
 8000ec4:	46e1      	mov	r9, ip
 8000ec6:	d364      	bcc.n	8000f92 <__udivmoddi4+0x2ae>
 8000ec8:	d061      	beq.n	8000f8e <__udivmoddi4+0x2aa>
 8000eca:	b15d      	cbz	r5, 8000ee4 <__udivmoddi4+0x200>
 8000ecc:	ebbe 0203 	subs.w	r2, lr, r3
 8000ed0:	eb64 0409 	sbc.w	r4, r4, r9
 8000ed4:	fa04 f606 	lsl.w	r6, r4, r6
 8000ed8:	fa22 f301 	lsr.w	r3, r2, r1
 8000edc:	431e      	orrs	r6, r3
 8000ede:	40cc      	lsrs	r4, r1
 8000ee0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	e74e      	b.n	8000d86 <__udivmoddi4+0xa2>
 8000ee8:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eec:	0c01      	lsrs	r1, r0, #16
 8000eee:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ef2:	b280      	uxth	r0, r0
 8000ef4:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ef8:	463b      	mov	r3, r7
 8000efa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000efe:	4638      	mov	r0, r7
 8000f00:	463c      	mov	r4, r7
 8000f02:	46b8      	mov	r8, r7
 8000f04:	46be      	mov	lr, r7
 8000f06:	2620      	movs	r6, #32
 8000f08:	eba2 0208 	sub.w	r2, r2, r8
 8000f0c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f10:	e765      	b.n	8000dde <__udivmoddi4+0xfa>
 8000f12:	4601      	mov	r1, r0
 8000f14:	e717      	b.n	8000d46 <__udivmoddi4+0x62>
 8000f16:	4610      	mov	r0, r2
 8000f18:	e72b      	b.n	8000d72 <__udivmoddi4+0x8e>
 8000f1a:	f1c6 0120 	rsb	r1, r6, #32
 8000f1e:	fa2e fc01 	lsr.w	ip, lr, r1
 8000f22:	40b7      	lsls	r7, r6
 8000f24:	fa0e fe06 	lsl.w	lr, lr, r6
 8000f28:	fa20 f101 	lsr.w	r1, r0, r1
 8000f2c:	ea41 010e 	orr.w	r1, r1, lr
 8000f30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f34:	fbbc f8fe 	udiv	r8, ip, lr
 8000f38:	b2bc      	uxth	r4, r7
 8000f3a:	fb0e cc18 	mls	ip, lr, r8, ip
 8000f3e:	fb08 f904 	mul.w	r9, r8, r4
 8000f42:	0c0a      	lsrs	r2, r1, #16
 8000f44:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000f48:	40b0      	lsls	r0, r6
 8000f4a:	4591      	cmp	r9, r2
 8000f4c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	d93e      	bls.n	8000fd2 <__udivmoddi4+0x2ee>
 8000f54:	18ba      	adds	r2, r7, r2
 8000f56:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f5a:	d201      	bcs.n	8000f60 <__udivmoddi4+0x27c>
 8000f5c:	4591      	cmp	r9, r2
 8000f5e:	d81f      	bhi.n	8000fa0 <__udivmoddi4+0x2bc>
 8000f60:	eba2 0209 	sub.w	r2, r2, r9
 8000f64:	fbb2 f9fe 	udiv	r9, r2, lr
 8000f68:	fb09 f804 	mul.w	r8, r9, r4
 8000f6c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000f70:	b28a      	uxth	r2, r1
 8000f72:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000f76:	4542      	cmp	r2, r8
 8000f78:	d229      	bcs.n	8000fce <__udivmoddi4+0x2ea>
 8000f7a:	18ba      	adds	r2, r7, r2
 8000f7c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f80:	d2c2      	bcs.n	8000f08 <__udivmoddi4+0x224>
 8000f82:	4542      	cmp	r2, r8
 8000f84:	d2c0      	bcs.n	8000f08 <__udivmoddi4+0x224>
 8000f86:	f1a9 0102 	sub.w	r1, r9, #2
 8000f8a:	443a      	add	r2, r7
 8000f8c:	e7bc      	b.n	8000f08 <__udivmoddi4+0x224>
 8000f8e:	45c6      	cmp	lr, r8
 8000f90:	d29b      	bcs.n	8000eca <__udivmoddi4+0x1e6>
 8000f92:	ebb8 0302 	subs.w	r3, r8, r2
 8000f96:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	46e1      	mov	r9, ip
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e6>
 8000fa0:	eba7 0909 	sub.w	r9, r7, r9
 8000fa4:	444a      	add	r2, r9
 8000fa6:	fbb2 f9fe 	udiv	r9, r2, lr
 8000faa:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fae:	fb09 f804 	mul.w	r8, r9, r4
 8000fb2:	e7db      	b.n	8000f6c <__udivmoddi4+0x288>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	e77d      	b.n	8000eb4 <__udivmoddi4+0x1d0>
 8000fb8:	46d0      	mov	r8, sl
 8000fba:	e765      	b.n	8000e88 <__udivmoddi4+0x1a4>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e6fa      	b.n	8000db6 <__udivmoddi4+0xd2>
 8000fc0:	443b      	add	r3, r7
 8000fc2:	3a02      	subs	r2, #2
 8000fc4:	e730      	b.n	8000e28 <__udivmoddi4+0x144>
 8000fc6:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fca:	443b      	add	r3, r7
 8000fcc:	e719      	b.n	8000e02 <__udivmoddi4+0x11e>
 8000fce:	4649      	mov	r1, r9
 8000fd0:	e79a      	b.n	8000f08 <__udivmoddi4+0x224>
 8000fd2:	eba2 0209 	sub.w	r2, r2, r9
 8000fd6:	fbb2 f9fe 	udiv	r9, r2, lr
 8000fda:	46c4      	mov	ip, r8
 8000fdc:	fb09 f804 	mul.w	r8, r9, r4
 8000fe0:	e7c4      	b.n	8000f6c <__udivmoddi4+0x288>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <Adc_SetCoverChl>:
* Input 		 : None
* Output		 : None
* Return		 : None
******************************************************/
static void Adc_SetCoverChl(uint8_t LcChl)
{
 8000fe8:	b510      	push	{r4, lr}
 8000fea:	b084      	sub	sp, #16
	
	ADC_ChannelConfTypeDef AdcChlConfig;
	AdcChlConfig.Channel = LcChl;
 8000fec:	9001      	str	r0, [sp, #4]
	AdcChlConfig.Rank = ADC_REGULAR_RANK_1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	9302      	str	r3, [sp, #8]
	AdcChlConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	9303      	str	r3, [sp, #12]
	HAL_ADC_ConfigChannel(&hadc1,&AdcChlConfig);
 8000ff6:	4c05      	ldr	r4, [pc, #20]	@ (800100c <Adc_SetCoverChl+0x24>)
 8000ff8:	a901      	add	r1, sp, #4
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f007 fd82 	bl	8008b04 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001000:	4620      	mov	r0, r4
 8001002:	f007 fe63 	bl	8008ccc <HAL_ADC_Start>
}
 8001006:	b004      	add	sp, #16
 8001008:	bd10      	pop	{r4, pc}
 800100a:	bf00      	nop
 800100c:	200065b0 	.word	0x200065b0

08001010 <ADC_SamplingProcess>:
* Output		 : None
* Return		 : None
******************************************************/

void ADC_SamplingProcess(void)
{
 8001010:	b530      	push	{r4, r5, lr}
 8001012:	b085      	sub	sp, #20
	uint8_t LcChlNum[CHANNEL_NUM] = {ADC_CHANNEL_15,ADC_CHANNEL_14,ADC_CHANNEL_8};
 8001014:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <ADC_SamplingProcess+0x68>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f8ad 300c 	strh.w	r3, [sp, #12]
 800101c:	0c1b      	lsrs	r3, r3, #16
 800101e:	f88d 300e 	strb.w	r3, [sp, #14]

	uint32_t LcAdcData[CHANNEL_NUM] = {0u};
 8001022:	2300      	movs	r3, #0
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	9302      	str	r3, [sp, #8]
	
	if(GcChlNumIdx >= (CHANNEL_NUM - 1u))
 800102a:	4b14      	ldr	r3, [pc, #80]	@ (800107c <ADC_SamplingProcess+0x6c>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d91e      	bls.n	8001070 <ADC_SamplingProcess+0x60>
	{
		GcChlNumIdx = 0x00u;
 8001032:	4b12      	ldr	r3, [pc, #72]	@ (800107c <ADC_SamplingProcess+0x6c>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
	}
	else
	{
	    GcChlNumIdx++;
	}
	Adc_SetCoverChl(LcChlNum[GcChlNumIdx]);
 8001038:	4c10      	ldr	r4, [pc, #64]	@ (800107c <ADC_SamplingProcess+0x6c>)
 800103a:	7823      	ldrb	r3, [r4, #0]
 800103c:	3310      	adds	r3, #16
 800103e:	446b      	add	r3, sp
 8001040:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 8001044:	f7ff ffd0 	bl	8000fe8 <Adc_SetCoverChl>
	LcAdcData[GcChlNumIdx] = HAL_ADC_GetValue(&hadc1);
 8001048:	7825      	ldrb	r5, [r4, #0]
 800104a:	480d      	ldr	r0, [pc, #52]	@ (8001080 <ADC_SamplingProcess+0x70>)
 800104c:	f007 fd56 	bl	8008afc <HAL_ADC_GetValue>
 8001050:	ab04      	add	r3, sp, #16
 8001052:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001056:	f845 0c10 	str.w	r0, [r5, #-16]
	Adc_DebouncingInfo[GcChlNumIdx].ResValue = LcAdcData[GcChlNumIdx];
 800105a:	7822      	ldrb	r2, [r4, #0]
 800105c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001060:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8001064:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <ADC_SamplingProcess+0x74>)
 8001066:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800106a:	60d9      	str	r1, [r3, #12]
}
 800106c:	b005      	add	sp, #20
 800106e:	bd30      	pop	{r4, r5, pc}
	    GcChlNumIdx++;
 8001070:	3301      	adds	r3, #1
 8001072:	4a02      	ldr	r2, [pc, #8]	@ (800107c <ADC_SamplingProcess+0x6c>)
 8001074:	7013      	strb	r3, [r2, #0]
 8001076:	e7df      	b.n	8001038 <ADC_SamplingProcess+0x28>
 8001078:	08011264 	.word	0x08011264
 800107c:	200045b8 	.word	0x200045b8
 8001080:	200065b0 	.word	0x200065b0
 8001084:	20004588 	.word	0x20004588

08001088 <ADC_GetResValue>:
* Output		 : None
* Return		 : None
******************************************************/
uint32_t ADC_GetResValue(uint8_t Lu8Chl)
{
	return Adc_DebouncingInfo[Lu8Chl].ResValue;
 8001088:	4b02      	ldr	r3, [pc, #8]	@ (8001094 <ADC_GetResValue+0xc>)
 800108a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800108e:	68d8      	ldr	r0, [r3, #12]
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20004588 	.word	0x20004588

08001098 <Svc_CanCommUpInf_TxConfigTableInit>:
extern const CanTransmitConfig_t *ilTxTable;
extern uint8_t iBytesOfTxHandles;
extern CanMsgTxStateBuffer_Struct * CanMsgTxStateBufferPtr;
static uint8_t Svc_CanCommUpInf_TxConfigTableInit(CanTransmitConfig_t *p_TxTable)
{
   if(p_TxTable != NULL)
 8001098:	b118      	cbz	r0, 80010a2 <Svc_CanCommUpInf_TxConfigTableInit+0xa>
   {
      ilTxTable = p_TxTable;
 800109a:	4a03      	ldr	r2, [pc, #12]	@ (80010a8 <Svc_CanCommUpInf_TxConfigTableInit+0x10>)
 800109c:	6010      	str	r0, [r2, #0]
      return TRUE;
 800109e:	2001      	movs	r0, #1
 80010a0:	4770      	bx	lr
   }
   else
   {
      return FALSE;
 80010a2:	2000      	movs	r0, #0
   }
}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	200094f4 	.word	0x200094f4

080010ac <Svc_CanCommUpInf_TxConfigTableLenInit>:

static uint8_t Svc_CanCommUpInf_TxConfigTableLenInit(uint8_t TxTableLen)
{
   if(TxTableLen != 0)
 80010ac:	4603      	mov	r3, r0
 80010ae:	b110      	cbz	r0, 80010b6 <Svc_CanCommUpInf_TxConfigTableLenInit+0xa>
   {
      iBytesOfTxHandles = TxTableLen;
 80010b0:	4a02      	ldr	r2, [pc, #8]	@ (80010bc <Svc_CanCommUpInf_TxConfigTableLenInit+0x10>)
 80010b2:	7010      	strb	r0, [r2, #0]
      return TRUE;
 80010b4:	2301      	movs	r3, #1
   }
   else
   {
      return FALSE;
   }
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	200094f3 	.word	0x200094f3

080010c0 <Service_CanComm_CanMsgTxStateBufferInit>:

static uint8_t Service_CanComm_CanMsgTxStateBufferInit(CanMsgTxStateBuffer_Struct * p_StateBuffer)
{
   if(p_StateBuffer != NULL)
 80010c0:	b118      	cbz	r0, 80010ca <Service_CanComm_CanMsgTxStateBufferInit+0xa>
   {
      CanMsgTxStateBufferPtr = p_StateBuffer;
 80010c2:	4a03      	ldr	r2, [pc, #12]	@ (80010d0 <Service_CanComm_CanMsgTxStateBufferInit+0x10>)
 80010c4:	6010      	str	r0, [r2, #0]
      return TRUE;
 80010c6:	2001      	movs	r0, #1
 80010c8:	4770      	bx	lr
   }
   else
   {
      return FALSE;
 80010ca:	2000      	movs	r0, #0
   }
}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	200094f8 	.word	0x200094f8

080010d4 <Can_SendSts_Control>:

void Can_SendSts_Control(uint8_t CanSendSts)
{
 80010d4:	b508      	push	{r3, lr}
    if(E_CANSEND_OPEN == CanSendSts)
 80010d6:	b970      	cbnz	r0, 80010f6 <Can_SendSts_Control+0x22>
    {
        // Set_CanEventType_Cycle();
        HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2140      	movs	r1, #64	@ 0x40
 80010dc:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 80010e0:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 80010e4:	f008 ff89 	bl	8009ffa <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010ee:	4809      	ldr	r0, [pc, #36]	@ (8001114 <Can_SendSts_Control+0x40>)
 80010f0:	f008 ff83 	bl	8009ffa <HAL_GPIO_WritePin>
        // Set_CanCycleType_Event();
        HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_RESET);
        delay_us(100);
        HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_RESET);
    }
}
 80010f4:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2140      	movs	r1, #64	@ 0x40
 80010fa:	4807      	ldr	r0, [pc, #28]	@ (8001118 <Can_SendSts_Control+0x44>)
 80010fc:	f008 ff7d 	bl	8009ffa <HAL_GPIO_WritePin>
        delay_us(100);
 8001100:	2064      	movs	r0, #100	@ 0x64
 8001102:	f001 fd8f 	bl	8002c24 <delay_us>
        HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800110c:	4801      	ldr	r0, [pc, #4]	@ (8001114 <Can_SendSts_Control+0x40>)
 800110e:	f008 ff74 	bl	8009ffa <HAL_GPIO_WritePin>
}
 8001112:	e7ef      	b.n	80010f4 <Can_SendSts_Control+0x20>
 8001114:	40010c00 	.word	0x40010c00
 8001118:	40011000 	.word	0x40011000

0800111c <App_Init>:

void App_Init(void)
{
 800111c:	b508      	push	{r3, lr}
    Svc_CanCommUpInf_TxConfigTableInit(CanTransmitConfig_Table);
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <App_Init+0x18>)
 8001120:	f7ff ffba 	bl	8001098 <Svc_CanCommUpInf_TxConfigTableInit>
    Svc_CanCommUpInf_TxConfigTableLenInit(CanTxMsgIndex_Max);
 8001124:	201f      	movs	r0, #31
 8001126:	f7ff ffc1 	bl	80010ac <Svc_CanCommUpInf_TxConfigTableLenInit>
    Service_CanComm_CanMsgTxStateBufferInit(&CanMsgTxStateBuffer[0]);
 800112a:	4803      	ldr	r0, [pc, #12]	@ (8001138 <App_Init+0x1c>)
 800112c:	f7ff ffc8 	bl	80010c0 <Service_CanComm_CanMsgTxStateBufferInit>
}
 8001130:	bd08      	pop	{r3, pc}
 8001132:	bf00      	nop
 8001134:	08012a80 	.word	0x08012a80
 8001138:	200045bc 	.word	0x200045bc

0800113c <CanGetMsgSignal>:

void CanGetMsgSignal(void)
{
 800113c:	b510      	push	{r4, lr}
	if(now_page == 0){
 800113e:	4bf7      	ldr	r3, [pc, #988]	@ (800151c <CanGetMsgSignal+0x3e0>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	f041 805c 	bne.w	8002200 <CanGetMsgSignal+0x10c4>
		//ACU_1
		CanTx_SigSet_0x350_ACU_CrashOutputSts(GetACU_1Value(ACU_CrashOutputSts));
 8001148:	2000      	movs	r0, #0
 800114a:	f005 f93d 	bl	80063c8 <GetACU_1Value>
 800114e:	4cf4      	ldr	r4, [pc, #976]	@ (8001520 <CanGetMsgSignal+0x3e4>)
 8001150:	7020      	strb	r0, [r4, #0]

		//ESP_2
	    CanTx_SigSet_0x211_ESP_LongitAccel(GetESP_2Value(ESP_LongitAccel));
 8001152:	2000      	movs	r0, #0
 8001154:	f005 f94a 	bl	80063ec <GetESP_2Value>
 8001158:	7260      	strb	r0, [r4, #9]
 800115a:	2000      	movs	r0, #0
 800115c:	f005 f946 	bl	80063ec <GetESP_2Value>
 8001160:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001164:	7220      	strb	r0, [r4, #8]
	    CanTx_SigSet_0x211_ESP_LateralAccel(GetESP_2Value(ESP_LateralAccel));
 8001166:	2001      	movs	r0, #1
 8001168:	f005 f940 	bl	80063ec <GetESP_2Value>
 800116c:	72e0      	strb	r0, [r4, #11]
 800116e:	2001      	movs	r0, #1
 8001170:	f005 f93c 	bl	80063ec <GetESP_2Value>
 8001174:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001178:	72a0      	strb	r0, [r4, #10]
	    CanTx_SigSet_0x211_ESP_YawRate(GetESP_2Value(ESP_YawRate));
 800117a:	2002      	movs	r0, #2
 800117c:	f005 f936 	bl	80063ec <GetESP_2Value>
 8001180:	7360      	strb	r0, [r4, #13]
 8001182:	2002      	movs	r0, #2
 8001184:	f005 f932 	bl	80063ec <GetESP_2Value>
 8001188:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800118c:	7320      	strb	r0, [r4, #12]
	    CanTx_SigSet_0x211_ESP_YawRateSensorValid(GetESP_2Value(ESP_YawRateSensorValid));
 800118e:	2003      	movs	r0, #3
 8001190:	f005 f92c 	bl	80063ec <GetESP_2Value>
 8001194:	7ba3      	ldrb	r3, [r4, #14]
 8001196:	f360 1386 	bfi	r3, r0, #6, #1
 800119a:	73a3      	strb	r3, [r4, #14]
	    CanTx_SigSet_0x211_ESP_LateralSensorValid(GetESP_2Value(ESP_LateralSensorValid));
 800119c:	2004      	movs	r0, #4
 800119e:	f005 f925 	bl	80063ec <GetESP_2Value>
 80011a2:	7ba3      	ldrb	r3, [r4, #14]
 80011a4:	f360 1345 	bfi	r3, r0, #5, #1
 80011a8:	73a3      	strb	r3, [r4, #14]
	    CanTx_SigSet_0x211_ESP_LongitSensorValid(GetESP_2Value(ESP_LongitSensorValid));
 80011aa:	2005      	movs	r0, #5
 80011ac:	f005 f91e 	bl	80063ec <GetESP_2Value>
 80011b0:	7ba3      	ldrb	r3, [r4, #14]
 80011b2:	f360 1304 	bfi	r3, r0, #4, #1
 80011b6:	73a3      	strb	r3, [r4, #14]

	    //ABS_1
	    CanTx_SigSet_0x200_ABS_FLWheelSpeed(GetABS_1Value(ABS_FLWheelSpeed));
 80011b8:	2000      	movs	r0, #0
 80011ba:	f005 f931 	bl	8006420 <GetABS_1Value>
 80011be:	7c63      	ldrb	r3, [r4, #17]
 80011c0:	f360 03c7 	bfi	r3, r0, #3, #5
 80011c4:	7463      	strb	r3, [r4, #17]
 80011c6:	2000      	movs	r0, #0
 80011c8:	f005 f92a 	bl	8006420 <GetABS_1Value>
 80011cc:	f3c0 1047 	ubfx	r0, r0, #5, #8
 80011d0:	7420      	strb	r0, [r4, #16]
	    CanTx_SigSet_0x200_ABS_FLWheelSpeedValid(GetABS_1Value(ABS_FLWheelSpeedValid));
 80011d2:	2001      	movs	r0, #1
 80011d4:	f005 f924 	bl	8006420 <GetABS_1Value>
 80011d8:	7c63      	ldrb	r3, [r4, #17]
 80011da:	f360 0382 	bfi	r3, r0, #2, #1
 80011de:	7463      	strb	r3, [r4, #17]
	    CanTx_SigSet_0x200_ABS_FRWheelSpeed(GetABS_1Value(ABS_FRWheelSpeed));
 80011e0:	2002      	movs	r0, #2
 80011e2:	f005 f91d 	bl	8006420 <GetABS_1Value>
 80011e6:	7d23      	ldrb	r3, [r4, #20]
 80011e8:	f360 03c7 	bfi	r3, r0, #3, #5
 80011ec:	7523      	strb	r3, [r4, #20]
 80011ee:	2002      	movs	r0, #2
 80011f0:	f005 f916 	bl	8006420 <GetABS_1Value>
 80011f4:	f3c0 1047 	ubfx	r0, r0, #5, #8
 80011f8:	74e0      	strb	r0, [r4, #19]
	    CanTx_SigSet_0x200_ABS_FRWheelSpeedValid(GetABS_1Value(ABS_FRWheelSpeedValid));
 80011fa:	2003      	movs	r0, #3
 80011fc:	f005 f910 	bl	8006420 <GetABS_1Value>
 8001200:	7d23      	ldrb	r3, [r4, #20]
 8001202:	f360 0382 	bfi	r3, r0, #2, #1
 8001206:	7523      	strb	r3, [r4, #20]

	    //ABS_2
	    CanTx_SigSet_0x201_ABS_RLWheelSpeed(GetABS_2Value(ABS_RLWheelSpeed));
 8001208:	2000      	movs	r0, #0
 800120a:	f005 f92d 	bl	8006468 <GetABS_2Value>
 800120e:	7e63      	ldrb	r3, [r4, #25]
 8001210:	f360 03c7 	bfi	r3, r0, #3, #5
 8001214:	7663      	strb	r3, [r4, #25]
 8001216:	2000      	movs	r0, #0
 8001218:	f005 f926 	bl	8006468 <GetABS_2Value>
 800121c:	f3c0 1047 	ubfx	r0, r0, #5, #8
 8001220:	7620      	strb	r0, [r4, #24]
	    CanTx_SigSet_0x201_ABS_RLWheelSpeedValid(GetABS_2Value(ABS_RLWheelSpeedValid));
 8001222:	2001      	movs	r0, #1
 8001224:	f005 f920 	bl	8006468 <GetABS_2Value>
 8001228:	7e63      	ldrb	r3, [r4, #25]
 800122a:	f360 0382 	bfi	r3, r0, #2, #1
 800122e:	7663      	strb	r3, [r4, #25]
	    CanTx_SigSet_0x201_ABS_RRWheelSpeed(GetABS_2Value(ABS_RRWheelSpeed));
 8001230:	2002      	movs	r0, #2
 8001232:	f005 f919 	bl	8006468 <GetABS_2Value>
 8001236:	7f23      	ldrb	r3, [r4, #28]
 8001238:	f360 03c7 	bfi	r3, r0, #3, #5
 800123c:	7723      	strb	r3, [r4, #28]
 800123e:	2002      	movs	r0, #2
 8001240:	f005 f912 	bl	8006468 <GetABS_2Value>
 8001244:	f3c0 1047 	ubfx	r0, r0, #5, #8
 8001248:	76e0      	strb	r0, [r4, #27]
	    CanTx_SigSet_0x201_ABS_RRWheelSpeedValid(GetABS_2Value(ABS_RRWheelSpeedValid));
 800124a:	2003      	movs	r0, #3
 800124c:	f005 f90c 	bl	8006468 <GetABS_2Value>
 8001250:	7f23      	ldrb	r3, [r4, #28]
 8001252:	f360 0382 	bfi	r3, r0, #2, #1
 8001256:	7723      	strb	r3, [r4, #28]

		//TPMS_1
		CanTx_SigSet_0x365_TPMS_TireID(GetTPMS_1Value(TPMS_TireID));
 8001258:	2000      	movs	r0, #0
 800125a:	f005 fabb 	bl	80067d4 <GetTPMS_1Value>
 800125e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001262:	f360 0383 	bfi	r3, r0, #2, #2
 8001266:	f884 3020 	strb.w	r3, [r4, #32]
		CanTx_SigSet_0x365_TPMS_TirePressure(GetTPMS_1Value(TPMS_TirePressure));
 800126a:	2001      	movs	r0, #1
 800126c:	f005 fab2 	bl	80067d4 <GetTPMS_1Value>
 8001270:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
		CanTx_SigSet_0x365_TPMS_TirePressureStatus(GetTPMS_1Value(TPMS_TirePressureStatus));
 8001274:	2002      	movs	r0, #2
 8001276:	f005 faad 	bl	80067d4 <GetTPMS_1Value>
 800127a:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 800127e:	f360 1305 	bfi	r3, r0, #4, #2
 8001282:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
		CanTx_SigSet_0x365_TPMS_SensorLost(GetTPMS_1Value(TPMS_SensorLost));
 8001286:	2003      	movs	r0, #3
 8001288:	f005 faa4 	bl	80067d4 <GetTPMS_1Value>
 800128c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001290:	f360 1304 	bfi	r3, r0, #4, #1
 8001294:	f884 3020 	strb.w	r3, [r4, #32]
		CanTx_SigSet_0x365_TPMS_LearningStatus(GetTPMS_1Value(TPMS_LearningStatus));
 8001298:	2004      	movs	r0, #4
 800129a:	f005 fa9b 	bl	80067d4 <GetTPMS_1Value>
 800129e:	f894 3020 	ldrb.w	r3, [r4, #32]
 80012a2:	f360 1387 	bfi	r3, r0, #6, #2
 80012a6:	f884 3020 	strb.w	r3, [r4, #32]
		CanTx_SigSet_0x365_TPMS_TireTemperatureSts(GetTPMS_1Value(TPMS_TireTemperatureSts));
 80012aa:	2005      	movs	r0, #5
 80012ac:	f005 fa92 	bl	80067d4 <GetTPMS_1Value>
 80012b0:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 80012b4:	f360 1386 	bfi	r3, r0, #6, #1
 80012b8:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
		CanTx_SigSet_0x365_TPMS_TireTemperature(GetTPMS_1Value(TPMS_TireTemperature));
 80012bc:	2006      	movs	r0, #6
 80012be:	f005 fa89 	bl	80067d4 <GetTPMS_1Value>
 80012c2:	f884 0023 	strb.w	r0, [r4, #35]	@ 0x23

		//BCM_1
		CanTx_SigSet_0x360_BCM_1_ReverseLightSts(GetBCM_1Value(BCM_ReverseLightSts));
 80012c6:	2000      	movs	r0, #0
 80012c8:	f005 f8f0 	bl	80064ac <GetBCM_1Value>
 80012cc:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 80012d0:	f360 1387 	bfi	r3, r0, #6, #2
 80012d4:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
		CanTx_SigSet_0x360_BCM_1_BrakeLightSts(GetBCM_1Value(BCM_BrakeLightSts));
 80012d8:	2001      	movs	r0, #1
 80012da:	f005 f8e7 	bl	80064ac <GetBCM_1Value>
 80012de:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 80012e2:	f360 1305 	bfi	r3, r0, #4, #2
 80012e6:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
		CanTx_SigSet_0x360_BCM_1_BackMirrorFolderSts(GetBCM_1Value(BCM_BackMirrorFolderSts));
 80012ea:	2002      	movs	r0, #2
 80012ec:	f005 f8de 	bl	80064ac <GetBCM_1Value>
 80012f0:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80012f4:	f360 13c7 	bfi	r3, r0, #7, #1
 80012f8:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e

		//BCM_3
		CanTx_SigSet_0x311_BCM_ConsoleBtn1TriggerSts(GetBCM_3Value(BCM_ConsoleBtn1TriggerSts));
 80012fc:	2000      	movs	r0, #0
 80012fe:	f005 f8df 	bl	80064c0 <GetBCM_3Value>
 8001302:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
 8001306:	f360 1386 	bfi	r3, r0, #6, #1
 800130a:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31

		//BCM_4
	    CanTx_SigSet_0x362_BCM_AssistIlluminationSetSts(GetBCM_4Value(BCM_AssistIlluminationSetSts));
 800130e:	200c      	movs	r0, #12
 8001310:	f005 f8ec 	bl	80064ec <GetBCM_4Value>
 8001314:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8001318:	f360 13c7 	bfi	r3, r0, #7, #1
 800131c:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
	    CanTx_SigSet_0x362_BCM_WindowRemoteAutoDownSetSts(GetBCM_4Value(BCM_WindowRemoteAutoDownSetSts));
 8001320:	200d      	movs	r0, #13
 8001322:	f005 f8e3 	bl	80064ec <GetBCM_4Value>
 8001326:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800132a:	f360 1386 	bfi	r3, r0, #6, #1
 800132e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
	    CanTx_SigSet_0x362_BCM_LeaveHomeTimeSetSts(GetBCM_4Value(BCM_LeaveHomeTimeSetSts));
 8001332:	2007      	movs	r0, #7
 8001334:	f005 f8da 	bl	80064ec <GetBCM_4Value>
 8001338:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800133c:	f360 03c5 	bfi	r3, r0, #3, #3
 8001340:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
	    CanTx_SigSet_0x362_BCM_FollowMeHomeTimeSetSts(GetBCM_4Value(BCM_FollowMeHomeTimeSetSts));
 8001344:	2006      	movs	r0, #6
 8001346:	f005 f8d1 	bl	80064ec <GetBCM_4Value>
 800134a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800134e:	f360 0302 	bfi	r3, r0, #0, #3
 8001352:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
	    CanTx_SigSet_0x362_BCM_exRearMirrorAutoFoldSetSts(GetBCM_4Value(BCM_exRearMirrorAutoFoldSetSts));
 8001356:	2002      	movs	r0, #2
 8001358:	f005 f8c8 	bl	80064ec <GetBCM_4Value>
 800135c:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8001360:	f360 1386 	bfi	r3, r0, #6, #1
 8001364:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
	    CanTx_SigSet_0x362_BCM_SpeedLockSetSts(GetBCM_4Value(BCM_SpeedLockSetSts));
 8001368:	2000      	movs	r0, #0
 800136a:	f005 f8bf 	bl	80064ec <GetBCM_4Value>
 800136e:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8001372:	f360 03c5 	bfi	r3, r0, #3, #3
 8001376:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
	    CanTx_SigSet_0x362_BCM_InteriorLightTimeSetSts(GetBCM_4Value(BCM_InteriorLightTimeSetSts));
 800137a:	2008      	movs	r0, #8
 800137c:	f005 f8b6 	bl	80064ec <GetBCM_4Value>
 8001380:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8001384:	f360 0302 	bfi	r3, r0, #0, #3
 8001388:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
	    CanTx_SigSet_0x362_BCM_AutoWshWipSetSts(GetBCM_4Value(BCM_AutoWshWipSetSts));
 800138c:	200b      	movs	r0, #11
 800138e:	f005 f8ad 	bl	80064ec <GetBCM_4Value>
 8001392:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 8001396:	f360 1387 	bfi	r3, r0, #6, #2
 800139a:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
	    CanTx_SigSet_0x362_BCM_SearchCarWarnModSetSts(GetBCM_4Value(BCM_SearchCarWarnModSetSts));
 800139e:	2005      	movs	r0, #5
 80013a0:	f005 f8a4 	bl	80064ec <GetBCM_4Value>
 80013a4:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 80013a8:	f360 1305 	bfi	r3, r0, #4, #2
 80013ac:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
	    CanTx_SigSet_0x362_BCM_WindowAutoUPbyLockSetSts(GetBCM_4Value(BCM_WindowAutoUPbyLockSetSts));
 80013b0:	2003      	movs	r0, #3
 80013b2:	f005 f89b 	bl	80064ec <GetBCM_4Value>
 80013b6:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 80013ba:	f360 03c3 	bfi	r3, r0, #3, #1
 80013be:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
	    CanTx_SigSet_0x362_BCM_HornAlertVolumeSetSts(GetBCM_4Value(BCM_HornAlertVolumeSetSts));
 80013c2:	200e      	movs	r0, #14
 80013c4:	f005 f892 	bl	80064ec <GetBCM_4Value>
 80013c8:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 80013cc:	f360 0302 	bfi	r3, r0, #0, #3
 80013d0:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
	    CanTx_SigSet_0x362_BCM_AmbientLightLvl(GetBCM_4Value(BCM_AmbientLightLvl));
 80013d4:	200a      	movs	r0, #10
 80013d6:	f005 f889 	bl	80064ec <GetBCM_4Value>
 80013da:	f894 303b 	ldrb.w	r3, [r4, #59]	@ 0x3b
 80013de:	f360 1307 	bfi	r3, r0, #4, #4
 80013e2:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
	    CanTx_SigSet_0x362_BCM_AmbientLightSwtSts(GetBCM_4Value(BCM_AmbientLightSwtSts));
 80013e6:	2009      	movs	r0, #9
 80013e8:	f005 f880 	bl	80064ec <GetBCM_4Value>
 80013ec:	f894 303b 	ldrb.w	r3, [r4, #59]	@ 0x3b
 80013f0:	f360 03c3 	bfi	r3, r0, #3, #1
 80013f4:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
	    CanTx_SigSet_0x362_BCM_ClsWinSpdSetSts(GetBCM_4Value(BCM_ClsWinSpdSetSts));
 80013f8:	2004      	movs	r0, #4
 80013fa:	f005 f877 	bl	80064ec <GetBCM_4Value>
 80013fe:	f894 303b 	ldrb.w	r3, [r4, #59]	@ 0x3b
 8001402:	f360 0342 	bfi	r3, r0, #1, #2
 8001406:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
	    CanTx_SigSet_0x362_BCM_FlaoutUnlockSetSts(GetBCM_4Value(BCM_FlaoutUnlockSetSts));
 800140a:	2001      	movs	r0, #1
 800140c:	f005 f86e 	bl	80064ec <GetBCM_4Value>
 8001410:	f894 303b 	ldrb.w	r3, [r4, #59]	@ 0x3b
 8001414:	f360 0300 	bfi	r3, r0, #0, #1
 8001418:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
	    CanTx_SigSet_0x362_BCM_SteeringwheelheatingSts(GetBCM_4Value(BCM_SteeringwheelheatingSts));
 800141c:	200f      	movs	r0, #15
 800141e:	f005 f865 	bl	80064ec <GetBCM_4Value>
 8001422:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001426:	f360 03c3 	bfi	r3, r0, #3, #1
 800142a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
	    CanTx_SigSet_0x362_BCM_NozzleheatingSts(GetBCM_4Value(BCM_NozzleheatingSts));
 800142e:	2010      	movs	r0, #16
 8001430:	f005 f85c 	bl	80064ec <GetBCM_4Value>
 8001434:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001438:	f360 0382 	bfi	r3, r0, #2, #1
 800143c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
	    CanTx_SigSet_0x362_BCM_FrontwindshieldheatingSts(GetBCM_4Value(BCM_FrontwindshieldheatingSts));
 8001440:	2011      	movs	r0, #17
 8001442:	f005 f853 	bl	80064ec <GetBCM_4Value>
 8001446:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800144a:	f360 0341 	bfi	r3, r0, #1, #1
 800144e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
	    CanTx_SigSet_0x362_BCM_AAL_ONOFFSts(GetBCM_4Value(BCM_AAL_ONOFFSts));
 8001452:	2012      	movs	r0, #18
 8001454:	f005 f84a 	bl	80064ec <GetBCM_4Value>
 8001458:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800145c:	f360 13c7 	bfi	r3, r0, #7, #1
 8001460:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
	    CanTx_SigSet_0x362_BCM_AAL_PitchAngle(GetBCM_4Value(BCM_AAL_PitchAngle));
 8001464:	2013      	movs	r0, #19
 8001466:	f005 f841 	bl	80064ec <GetBCM_4Value>
 800146a:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
	    CanTx_SigSet_0x362_BCM_AAL_YawAngle(GetBCM_4Value(BCM_AAL_YawAngle));
 800146e:	2014      	movs	r0, #20
 8001470:	f005 f83c 	bl	80064ec <GetBCM_4Value>
 8001474:	f884 003f 	strb.w	r0, [r4, #63]	@ 0x3f

	    //BCM5
	    CanTx_SigSet_0x312_BCM_SRF_PosStatus(GetBCM_5Value(BCM_SRF_PosStatus));
 8001478:	2000      	movs	r0, #0
 800147a:	f005 f851 	bl	8006520 <GetBCM_5Value>
 800147e:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8001482:	f360 1307 	bfi	r3, r0, #4, #4
 8001486:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42

	    //PEPS_3
	    CanTx_SigSet_0x269_PEPS_3_RemoteControlSt(GetPEPS_3Value(PEPS_RemoteControlSt));
 800148a:	2000      	movs	r0, #0
 800148c:	f005 f97a 	bl	8006784 <GetPEPS_3Value>
 8001490:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8001494:	f360 0300 	bfi	r3, r0, #0, #1
 8001498:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
	    CanTx_SigSet_0x269_PEPS_3_RollingCounter(GetPEPS_3Value(PEPS_3_RollingCounter));
 800149c:	2001      	movs	r0, #1
 800149e:	f005 f971 	bl	8006784 <GetPEPS_3Value>
 80014a2:	f894 3056 	ldrb.w	r3, [r4, #86]	@ 0x56
 80014a6:	f360 0303 	bfi	r3, r0, #0, #4
 80014aa:	f884 3056 	strb.w	r3, [r4, #86]	@ 0x56
	    CanTx_SigSet_0x269_PEPS_3_Checksum(GetPEPS_3Value(PEPS_3_Checksum));
 80014ae:	2002      	movs	r0, #2
 80014b0:	f005 f968 	bl	8006784 <GetPEPS_3Value>
 80014b4:	f884 0057 	strb.w	r0, [r4, #87]	@ 0x57

		//TBOX_1
		CanTx_SigSet_0x598_TBOX_DateTimeSecond(GetTBOX_1Value(TBOX_DateTimeSecond));
 80014b8:	2000      	movs	r0, #0
 80014ba:	f005 f96d 	bl	8006798 <GetTBOX_1Value>
 80014be:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 80014c2:	f360 0305 	bfi	r3, r0, #0, #6
 80014c6:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
		CanTx_SigSet_0x598_TBOX_DateTimeMinute(GetTBOX_1Value(TBOX_DateTimeMinute));
 80014ca:	2001      	movs	r0, #1
 80014cc:	f005 f964 	bl	8006798 <GetTBOX_1Value>
 80014d0:	f894 3059 	ldrb.w	r3, [r4, #89]	@ 0x59
 80014d4:	f360 0305 	bfi	r3, r0, #0, #6
 80014d8:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
		CanTx_SigSet_0x598_TBOX_DateTimeHour(GetTBOX_1Value(TBOX_DateTimeHour));
 80014dc:	2002      	movs	r0, #2
 80014de:	f005 f95b 	bl	8006798 <GetTBOX_1Value>
 80014e2:	f894 305a 	ldrb.w	r3, [r4, #90]	@ 0x5a
 80014e6:	f360 0304 	bfi	r3, r0, #0, #5
 80014ea:	f884 305a 	strb.w	r3, [r4, #90]	@ 0x5a
		CanTx_SigSet_0x598_TBOX_DateTimeDay(GetTBOX_1Value(TBOX_DateTimeDay));
 80014ee:	2003      	movs	r0, #3
 80014f0:	f005 f952 	bl	8006798 <GetTBOX_1Value>
 80014f4:	f894 305b 	ldrb.w	r3, [r4, #91]	@ 0x5b
 80014f8:	f360 0304 	bfi	r3, r0, #0, #5
 80014fc:	f884 305b 	strb.w	r3, [r4, #91]	@ 0x5b
		CanTx_SigSet_0x598_TBOX_DateTimeMonth(GetTBOX_1Value(TBOX_DateTimeMonth));
 8001500:	2004      	movs	r0, #4
 8001502:	f005 f949 	bl	8006798 <GetTBOX_1Value>
 8001506:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 800150a:	f360 0303 	bfi	r3, r0, #0, #4
 800150e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
		CanTx_SigSet_0x598_TBOX_DateTimeYear(GetTBOX_1Value(TBOX_DateTimeYear));
 8001512:	2005      	movs	r0, #5
 8001514:	f005 f940 	bl	8006798 <GetTBOX_1Value>
 8001518:	e004      	b.n	8001524 <CanGetMsgSignal+0x3e8>
 800151a:	bf00      	nop
 800151c:	200047eb 	.word	0x200047eb
 8001520:	200046d4 	.word	0x200046d4
 8001524:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8001528:	f360 0306 	bfi	r3, r0, #0, #7
 800152c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d

		//TBOX_2
		CanTx_SigSet_0x599_TBOX_CommSignalVail(GetTBOX_2Value(TBOX_CommSignalVail));
 8001530:	2000      	movs	r0, #0
 8001532:	f005 f93b 	bl	80067ac <GetTBOX_2Value>
 8001536:	f884 0060 	strb.w	r0, [r4, #96]	@ 0x60
		CanTx_SigSet_0x599_TBOX_EcallStatus(GetTBOX_2Value(TBOX_EcallStatus));
 800153a:	2001      	movs	r0, #1
 800153c:	f005 f936 	bl	80067ac <GetTBOX_2Value>
 8001540:	f894 3067 	ldrb.w	r3, [r4, #103]	@ 0x67
 8001544:	f360 0382 	bfi	r3, r0, #2, #1
 8001548:	f884 3067 	strb.w	r3, [r4, #103]	@ 0x67

		//TBOX_4
		CanTx_SigSet_0x317_TBOX_AudioMuteRequest(GetTBOX_4Value(TBOX_AudioMuteRequest));
 800154c:	2000      	movs	r0, #0
 800154e:	f005 f937 	bl	80067c0 <GetTBOX_4Value>
 8001552:	f894 3068 	ldrb.w	r3, [r4, #104]	@ 0x68
 8001556:	f360 0300 	bfi	r3, r0, #0, #1
 800155a:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68

	    //FCM_3
		CanTx_SigSet_0x302_FCM_AEBONOFFSts(GetFCM_3Value(FCM_AEBONOFFSts));
 800155e:	2000      	movs	r0, #0
 8001560:	f004 ffe8 	bl	8006534 <GetFCM_3Value>
 8001564:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8001568:	f360 0301 	bfi	r3, r0, #0, #2
 800156c:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
		CanTx_SigSet_0x302_FCM_AEBMode(GetFCM_3Value(FCM_AEBMode));
 8001570:	2001      	movs	r0, #1
 8001572:	f004 ffdf 	bl	8006534 <GetFCM_3Value>
 8001576:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800157a:	f360 0384 	bfi	r3, r0, #2, #3
 800157e:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
		CanTx_SigSet_0x302_FCM_FCWONOFFSts(GetFCM_3Value(FCM_FCWONOFFSts));
 8001582:	2002      	movs	r0, #2
 8001584:	f004 ffd6 	bl	8006534 <GetFCM_3Value>
 8001588:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800158c:	f360 1346 	bfi	r3, r0, #5, #2
 8001590:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
		CanTx_SigSet_0x302_FCM_FCWMode(GetFCM_3Value(FCM_FCWMode));
 8001594:	2003      	movs	r0, #3
 8001596:	f004 ffcd 	bl	8006534 <GetFCM_3Value>
 800159a:	f894 3071 	ldrb.w	r3, [r4, #113]	@ 0x71
 800159e:	f360 0302 	bfi	r3, r0, #0, #3
 80015a2:	f884 3071 	strb.w	r3, [r4, #113]	@ 0x71
		CanTx_SigSet_0x302_FCM_FCWSnvtySts(GetFCM_3Value(FCM_FCWSnvtySts));
 80015a6:	2004      	movs	r0, #4
 80015a8:	f004 ffc4 	bl	8006534 <GetFCM_3Value>
 80015ac:	f894 3071 	ldrb.w	r3, [r4, #113]	@ 0x71
 80015b0:	f360 03c4 	bfi	r3, r0, #3, #2
 80015b4:	f884 3071 	strb.w	r3, [r4, #113]	@ 0x71
		CanTx_SigSet_0x302_FCM_FCWpreWarning(GetFCM_3Value(FCM_FCWpreWarning));
 80015b8:	2005      	movs	r0, #5
 80015ba:	f004 ffbb 	bl	8006534 <GetFCM_3Value>
 80015be:	f894 3071 	ldrb.w	r3, [r4, #113]	@ 0x71
 80015c2:	f360 1386 	bfi	r3, r0, #6, #1
 80015c6:	f884 3071 	strb.w	r3, [r4, #113]	@ 0x71
		CanTx_SigSet_0x302_FCM_DistanceWarning(GetFCM_3Value(FCM_DistanceWarning));
 80015ca:	2006      	movs	r0, #6
 80015cc:	f004 ffb2 	bl	8006534 <GetFCM_3Value>
 80015d0:	f894 3071 	ldrb.w	r3, [r4, #113]	@ 0x71
 80015d4:	f360 1345 	bfi	r3, r0, #5, #1
 80015d8:	f884 3071 	strb.w	r3, [r4, #113]	@ 0x71
		CanTx_SigSet_0x302_FCM_ACCMode(GetFCM_3Value(FCM_ACCMode));
 80015dc:	2007      	movs	r0, #7
 80015de:	f004 ffa9 	bl	8006534 <GetFCM_3Value>
 80015e2:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80015e6:	f360 1306 	bfi	r3, r0, #4, #3
 80015ea:	f884 3072 	strb.w	r3, [r4, #114]	@ 0x72
		CanTx_SigSet_0x302_FCM_DVMode(GetFCM_3Value(FCM_DVMode));
 80015ee:	2008      	movs	r0, #8
 80015f0:	f004 ffa0 	bl	8006534 <GetFCM_3Value>
 80015f4:	f894 3075 	ldrb.w	r3, [r4, #117]	@ 0x75
 80015f8:	f360 0383 	bfi	r3, r0, #2, #2
 80015fc:	f884 3075 	strb.w	r3, [r4, #117]	@ 0x75
		CanTx_SigSet_0x302_FCM_CameraTextInfo(GetFCM_3Value(FCM_CameraTextInfo));
 8001600:	2009      	movs	r0, #9
 8001602:	f004 ff97 	bl	8006534 <GetFCM_3Value>
 8001606:	f894 3075 	ldrb.w	r3, [r4, #117]	@ 0x75
 800160a:	f360 0301 	bfi	r3, r0, #0, #2
 800160e:	f884 3075 	strb.w	r3, [r4, #117]	@ 0x75

		//FCM_4
		CanTx_SigSet_0x303_FCM_LDWONOFFSts(GetFCM_4Value(FCM_LDWONOFFSts));
 8001612:	2000      	movs	r0, #0
 8001614:	f004 ff98 	bl	8006548 <GetFCM_4Value>
 8001618:	f894 3078 	ldrb.w	r3, [r4, #120]	@ 0x78
 800161c:	f360 0301 	bfi	r3, r0, #0, #2
 8001620:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
		CanTx_SigSet_0x303_FCM_LDWSysSts(GetFCM_4Value(FCM_LDWSysSts));
 8001624:	2001      	movs	r0, #1
 8001626:	f004 ff8f 	bl	8006548 <GetFCM_4Value>
 800162a:	f894 3078 	ldrb.w	r3, [r4, #120]	@ 0x78
 800162e:	f360 0384 	bfi	r3, r0, #2, #3
 8001632:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
		CanTx_SigSet_0x303_FCM_LDWWarnModSts(GetFCM_4Value(FCM_LDWWarnModSts));
 8001636:	2002      	movs	r0, #2
 8001638:	f004 ff86 	bl	8006548 <GetFCM_4Value>
 800163c:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8001640:	f360 0383 	bfi	r3, r0, #2, #2
 8001644:	f884 3079 	strb.w	r3, [r4, #121]	@ 0x79
		CanTx_SigSet_0x303_FCM_TSRONOFFSts(GetFCM_4Value(FCM_TSRONOFFSts));
 8001648:	2003      	movs	r0, #3
 800164a:	f004 ff7d 	bl	8006548 <GetFCM_4Value>
 800164e:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 8001652:	f360 0382 	bfi	r3, r0, #2, #1
 8001656:	f884 307a 	strb.w	r3, [r4, #122]	@ 0x7a
		CanTx_SigSet_0x303_FCM_TSRState(GetFCM_4Value(FCM_TSRState));
 800165a:	2004      	movs	r0, #4
 800165c:	f004 ff74 	bl	8006548 <GetFCM_4Value>
 8001660:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 8001664:	f360 1347 	bfi	r3, r0, #5, #3
 8001668:	f884 307a 	strb.w	r3, [r4, #122]	@ 0x7a
		CanTx_SigSet_0x303_FCM_TSROverSpeedAcousticONOFFSts(GetFCM_4Value(FCM_TSROverSpeedAcousticONOFFSts));
 800166c:	2005      	movs	r0, #5
 800166e:	f004 ff6b 	bl	8006548 <GetFCM_4Value>
 8001672:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 8001676:	f360 1304 	bfi	r3, r0, #4, #1
 800167a:	f884 307a 	strb.w	r3, [r4, #122]	@ 0x7a
		CanTx_SigSet_0x303_FCM_IHBCONOFFSts(GetFCM_4Value(FCM_IHBCONOFFSts));
 800167e:	2006      	movs	r0, #6
 8001680:	f004 ff62 	bl	8006548 <GetFCM_4Value>
 8001684:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
 8001688:	f360 03c4 	bfi	r3, r0, #3, #2
 800168c:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
		CanTx_SigSet_0x303_FCM_IHBCStatus(GetFCM_4Value(FCM_IHBCStatus));
 8001690:	2007      	movs	r0, #7
 8001692:	f004 ff59 	bl	8006548 <GetFCM_4Value>
 8001696:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
 800169a:	f360 1347 	bfi	r3, r0, #5, #3
 800169e:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c

		//FCM_5
		CanTx_SigSet_0x304_FCM_EgoLeLineID(GetFCM_5Value(FCM_EgoLeLineID));
 80016a2:	2000      	movs	r0, #0
 80016a4:	f004 ff5a 	bl	800655c <GetFCM_5Value>
 80016a8:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 80016ac:	f360 13c7 	bfi	r3, r0, #7, #1
 80016b0:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
		CanTx_SigSet_0x304_FCM_EgoLeLineColor(GetFCM_5Value(FCM_EgoLeLineColor));
 80016b4:	2001      	movs	r0, #1
 80016b6:	f004 ff51 	bl	800655c <GetFCM_5Value>
 80016ba:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 80016be:	f360 1346 	bfi	r3, r0, #5, #2
 80016c2:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
		CanTx_SigSet_0x304_FCM_EgoLeLineTyp(GetFCM_5Value(FCM_EgoLeLineTyp));
 80016c6:	2002      	movs	r0, #2
 80016c8:	f004 ff48 	bl	800655c <GetFCM_5Value>
 80016cc:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 80016d0:	f360 03c4 	bfi	r3, r0, #3, #2
 80016d4:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
		CanTx_SigSet_0x304_FCM_EgoLeLineHozlDst(GetFCM_5Value(FCM_EgoLeLineHozlDst));
 80016d8:	2003      	movs	r0, #3
 80016da:	f004 ff3f 	bl	800655c <GetFCM_5Value>
 80016de:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 80016e2:	f360 0387 	bfi	r3, r0, #2, #6
 80016e6:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
 80016ea:	2003      	movs	r0, #3
 80016ec:	f004 ff36 	bl	800655c <GetFCM_5Value>
 80016f0:	f3c0 1082 	ubfx	r0, r0, #6, #3
 80016f4:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 80016f8:	f360 0302 	bfi	r3, r0, #0, #3
 80016fc:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
		CanTx_SigSet_0x304_FCM_EgoLeLineCrvt(GetFCM_5Value(FCM_EgoLeLineCrvt));
 8001700:	2004      	movs	r0, #4
 8001702:	f004 ff2b 	bl	800655c <GetFCM_5Value>
 8001706:	f884 0082 	strb.w	r0, [r4, #130]	@ 0x82
 800170a:	2004      	movs	r0, #4
 800170c:	f004 ff26 	bl	800655c <GetFCM_5Value>
 8001710:	f3c0 2001 	ubfx	r0, r0, #8, #2
 8001714:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 8001718:	f360 0301 	bfi	r3, r0, #0, #2
 800171c:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
		CanTx_SigSet_0x304_FCM_EgoRiLineID(GetFCM_5Value(FCM_EgoRiLineID));
 8001720:	2005      	movs	r0, #5
 8001722:	f004 ff1b 	bl	800655c <GetFCM_5Value>
 8001726:	f894 3083 	ldrb.w	r3, [r4, #131]	@ 0x83
 800172a:	f360 13c7 	bfi	r3, r0, #7, #1
 800172e:	f884 3083 	strb.w	r3, [r4, #131]	@ 0x83
		CanTx_SigSet_0x304_FCM_EgoRiLineColor(GetFCM_5Value(FCM_EgoRiLineColor));
 8001732:	2006      	movs	r0, #6
 8001734:	f004 ff12 	bl	800655c <GetFCM_5Value>
 8001738:	f894 3083 	ldrb.w	r3, [r4, #131]	@ 0x83
 800173c:	f360 1346 	bfi	r3, r0, #5, #2
 8001740:	f884 3083 	strb.w	r3, [r4, #131]	@ 0x83
		CanTx_SigSet_0x304_FCM_EgoRiLineTyp(GetFCM_5Value(FCM_EgoRiLineTyp));
 8001744:	2007      	movs	r0, #7
 8001746:	f004 ff09 	bl	800655c <GetFCM_5Value>
 800174a:	f894 3083 	ldrb.w	r3, [r4, #131]	@ 0x83
 800174e:	f360 03c4 	bfi	r3, r0, #3, #2
 8001752:	f884 3083 	strb.w	r3, [r4, #131]	@ 0x83
		CanTx_SigSet_0x304_FCM_EgoRiLineHozlDst(GetFCM_5Value(FCM_EgoRiLineHozlDst));
 8001756:	2008      	movs	r0, #8
 8001758:	f004 ff00 	bl	800655c <GetFCM_5Value>
 800175c:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 8001760:	f360 0387 	bfi	r3, r0, #2, #6
 8001764:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 8001768:	2008      	movs	r0, #8
 800176a:	f004 fef7 	bl	800655c <GetFCM_5Value>
 800176e:	f3c0 1082 	ubfx	r0, r0, #6, #3
 8001772:	f894 3083 	ldrb.w	r3, [r4, #131]	@ 0x83
 8001776:	f360 0302 	bfi	r3, r0, #0, #3
 800177a:	f884 3083 	strb.w	r3, [r4, #131]	@ 0x83
		CanTx_SigSet_0x304_FCM_EgoRiLineCrvt(GetFCM_5Value(FCM_EgoRiLineCrvt));
 800177e:	2009      	movs	r0, #9
 8001780:	f004 feec 	bl	800655c <GetFCM_5Value>
 8001784:	f884 0085 	strb.w	r0, [r4, #133]	@ 0x85
 8001788:	2009      	movs	r0, #9
 800178a:	f004 fee7 	bl	800655c <GetFCM_5Value>
 800178e:	f3c0 2001 	ubfx	r0, r0, #8, #2
 8001792:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 8001796:	f360 0301 	bfi	r3, r0, #0, #2
 800179a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84

		//FCM_6
		CanTx_SigSet_0x305_FCM_NeborLeLineID(GetFCM_6Value(FCM_NeborLeLineID));
 800179e:	2000      	movs	r0, #0
 80017a0:	f004 fefa 	bl	8006598 <GetFCM_6Value>
 80017a4:	f894 3088 	ldrb.w	r3, [r4, #136]	@ 0x88
 80017a8:	f360 13c7 	bfi	r3, r0, #7, #1
 80017ac:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
		CanTx_SigSet_0x305_FCM_NeborLeLineColor(GetFCM_6Value(FCM_NeborLeLineColor));
 80017b0:	2001      	movs	r0, #1
 80017b2:	f004 fef1 	bl	8006598 <GetFCM_6Value>
 80017b6:	f894 3088 	ldrb.w	r3, [r4, #136]	@ 0x88
 80017ba:	f360 1346 	bfi	r3, r0, #5, #2
 80017be:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
		CanTx_SigSet_0x305_FCM_NeborLeLineTyp(GetFCM_6Value(FCM_NeborLeLineTyp));
 80017c2:	2002      	movs	r0, #2
 80017c4:	f004 fee8 	bl	8006598 <GetFCM_6Value>
 80017c8:	f894 3088 	ldrb.w	r3, [r4, #136]	@ 0x88
 80017cc:	f360 03c4 	bfi	r3, r0, #3, #2
 80017d0:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
		CanTx_SigSet_0x305_FCM_NeborLeLineHozlDst(GetFCM_6Value(FCM_NeborLeLineHozlDst));
 80017d4:	2003      	movs	r0, #3
 80017d6:	f004 fedf 	bl	8006598 <GetFCM_6Value>
 80017da:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 80017de:	f360 0387 	bfi	r3, r0, #2, #6
 80017e2:	f884 3089 	strb.w	r3, [r4, #137]	@ 0x89
 80017e6:	2003      	movs	r0, #3
 80017e8:	f004 fed6 	bl	8006598 <GetFCM_6Value>
 80017ec:	f3c0 1082 	ubfx	r0, r0, #6, #3
 80017f0:	f894 3088 	ldrb.w	r3, [r4, #136]	@ 0x88
 80017f4:	f360 0302 	bfi	r3, r0, #0, #3
 80017f8:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
		CanTx_SigSet_0x305_FCM_NeborLeLineCrvt(GetFCM_6Value(FCM_NeborLeLineCrvt));
 80017fc:	2004      	movs	r0, #4
 80017fe:	f004 fecb 	bl	8006598 <GetFCM_6Value>
 8001802:	f884 008a 	strb.w	r0, [r4, #138]	@ 0x8a
 8001806:	2004      	movs	r0, #4
 8001808:	f004 fec6 	bl	8006598 <GetFCM_6Value>
 800180c:	f3c0 2001 	ubfx	r0, r0, #8, #2
 8001810:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 8001814:	f360 0301 	bfi	r3, r0, #0, #2
 8001818:	f884 3089 	strb.w	r3, [r4, #137]	@ 0x89
		CanTx_SigSet_0x305_FCM_NeborRiLineID(GetFCM_6Value(FCM_NeborRiLineID));
 800181c:	2005      	movs	r0, #5
 800181e:	f004 febb 	bl	8006598 <GetFCM_6Value>
 8001822:	f894 308b 	ldrb.w	r3, [r4, #139]	@ 0x8b
 8001826:	f360 13c7 	bfi	r3, r0, #7, #1
 800182a:	f884 308b 	strb.w	r3, [r4, #139]	@ 0x8b
		CanTx_SigSet_0x305_FCM_NeborRiLineColor(GetFCM_6Value(FCM_NeborRiLineColor));
 800182e:	2006      	movs	r0, #6
 8001830:	f004 feb2 	bl	8006598 <GetFCM_6Value>
 8001834:	f894 308b 	ldrb.w	r3, [r4, #139]	@ 0x8b
 8001838:	f360 1346 	bfi	r3, r0, #5, #2
 800183c:	f884 308b 	strb.w	r3, [r4, #139]	@ 0x8b
		CanTx_SigSet_0x305_FCM_NeborRiLineTyp(GetFCM_6Value(FCM_NeborRiLineTyp));
 8001840:	2007      	movs	r0, #7
 8001842:	f004 fea9 	bl	8006598 <GetFCM_6Value>
 8001846:	f894 308b 	ldrb.w	r3, [r4, #139]	@ 0x8b
 800184a:	f360 03c4 	bfi	r3, r0, #3, #2
 800184e:	f884 308b 	strb.w	r3, [r4, #139]	@ 0x8b
		CanTx_SigSet_0x305_FCM_NeborRiLineHozlDst(GetFCM_6Value(FCM_NeborRiLineHozlDst));
 8001852:	2008      	movs	r0, #8
 8001854:	f004 fea0 	bl	8006598 <GetFCM_6Value>
 8001858:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 800185c:	f360 0387 	bfi	r3, r0, #2, #6
 8001860:	f884 308c 	strb.w	r3, [r4, #140]	@ 0x8c
 8001864:	2008      	movs	r0, #8
 8001866:	f004 fe97 	bl	8006598 <GetFCM_6Value>
 800186a:	f3c0 1082 	ubfx	r0, r0, #6, #3
 800186e:	f894 308b 	ldrb.w	r3, [r4, #139]	@ 0x8b
 8001872:	f360 0302 	bfi	r3, r0, #0, #3
 8001876:	f884 308b 	strb.w	r3, [r4, #139]	@ 0x8b
		CanTx_SigSet_0x305_FCM_NeborRiLineCrvt(GetFCM_6Value(FCM_NeborRiLineCrvt));
 800187a:	2009      	movs	r0, #9
 800187c:	f004 fe8c 	bl	8006598 <GetFCM_6Value>
 8001880:	f884 008d 	strb.w	r0, [r4, #141]	@ 0x8d
 8001884:	2009      	movs	r0, #9
 8001886:	f004 fe87 	bl	8006598 <GetFCM_6Value>
 800188a:	f3c0 2001 	ubfx	r0, r0, #8, #2
 800188e:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 8001892:	f360 0301 	bfi	r3, r0, #0, #2
 8001896:	f884 308c 	strb.w	r3, [r4, #140]	@ 0x8c

		//FCM_7
	    CanTx_SigSet_0x306_FCM_ACCObjID(GetFCM_7Value(FCM_ACCObjID));
 800189a:	2000      	movs	r0, #0
 800189c:	f004 fe9a 	bl	80065d4 <GetFCM_7Value>
 80018a0:	f894 3090 	ldrb.w	r3, [r4, #144]	@ 0x90
 80018a4:	f360 13c7 	bfi	r3, r0, #7, #1
 80018a8:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
	    CanTx_SigSet_0x306_FCM_ACCObjTyp(GetFCM_7Value(FCM_ACCObjTyp));
 80018ac:	2001      	movs	r0, #1
 80018ae:	f004 fe91 	bl	80065d4 <GetFCM_7Value>
 80018b2:	f894 3090 	ldrb.w	r3, [r4, #144]	@ 0x90
 80018b6:	f360 1306 	bfi	r3, r0, #4, #3
 80018ba:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
	    CanTx_SigSet_0x306_FCM_ACC_TargetVehicleSubType(GetFCM_7Value(FCM_ACC_TargetVehicleSubType));
 80018be:	2002      	movs	r0, #2
 80018c0:	f004 fe88 	bl	80065d4 <GetFCM_7Value>
 80018c4:	f894 3090 	ldrb.w	r3, [r4, #144]	@ 0x90
 80018c8:	f360 0343 	bfi	r3, r0, #1, #3
 80018cc:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
	    CanTx_SigSet_0x306_FCM_dxTarObjcolor(GetFCM_7Value(FCM_dxTarObjcolor));
 80018d0:	2003      	movs	r0, #3
 80018d2:	f004 fe7f 	bl	80065d4 <GetFCM_7Value>
 80018d6:	f894 3091 	ldrb.w	r3, [r4, #145]	@ 0x91
 80018da:	f360 1347 	bfi	r3, r0, #5, #3
 80018de:	f884 3091 	strb.w	r3, [r4, #145]	@ 0x91
	    CanTx_SigSet_0x306_FCM_ACCObjLgtDstX(GetFCM_7Value(FCM_ACCObjLgtDstX));
 80018e2:	2004      	movs	r0, #4
 80018e4:	f004 fe76 	bl	80065d4 <GetFCM_7Value>
 80018e8:	f894 3092 	ldrb.w	r3, [r4, #146]	@ 0x92
 80018ec:	f360 1347 	bfi	r3, r0, #5, #3
 80018f0:	f884 3092 	strb.w	r3, [r4, #146]	@ 0x92
 80018f4:	2004      	movs	r0, #4
 80018f6:	f004 fe6d 	bl	80065d4 <GetFCM_7Value>
 80018fa:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80018fe:	f894 3091 	ldrb.w	r3, [r4, #145]	@ 0x91
 8001902:	f360 0304 	bfi	r3, r0, #0, #5
 8001906:	f884 3091 	strb.w	r3, [r4, #145]	@ 0x91
	    CanTx_SigSet_0x306_FCM_ACCObjHozDstY(GetFCM_7Value(FCM_ACCObjHozDstY));
 800190a:	2005      	movs	r0, #5
 800190c:	f004 fe62 	bl	80065d4 <GetFCM_7Value>
 8001910:	f894 3093 	ldrb.w	r3, [r4, #147]	@ 0x93
 8001914:	f360 03c7 	bfi	r3, r0, #3, #5
 8001918:	f884 3093 	strb.w	r3, [r4, #147]	@ 0x93
 800191c:	2005      	movs	r0, #5
 800191e:	f004 fe59 	bl	80065d4 <GetFCM_7Value>
 8001922:	f3c0 1044 	ubfx	r0, r0, #5, #5
 8001926:	f894 3092 	ldrb.w	r3, [r4, #146]	@ 0x92
 800192a:	f360 0304 	bfi	r3, r0, #0, #5
 800192e:	f884 3092 	strb.w	r3, [r4, #146]	@ 0x92
	    CanTx_SigSet_0x306_FCM_FrntFarObjID(GetFCM_7Value(FCM_FrntFarObjID));
 8001932:	2006      	movs	r0, #6
 8001934:	f004 fe4e 	bl	80065d4 <GetFCM_7Value>
 8001938:	f894 3093 	ldrb.w	r3, [r4, #147]	@ 0x93
 800193c:	f360 0382 	bfi	r3, r0, #2, #1
 8001940:	f884 3093 	strb.w	r3, [r4, #147]	@ 0x93
	    CanTx_SigSet_0x306_FCM_FrntFarObjTyp(GetFCM_7Value(FCM_FrntFarObjTyp));
 8001944:	2007      	movs	r0, #7
 8001946:	f004 fe45 	bl	80065d4 <GetFCM_7Value>
 800194a:	f894 3094 	ldrb.w	r3, [r4, #148]	@ 0x94
 800194e:	f360 1387 	bfi	r3, r0, #6, #2
 8001952:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
 8001956:	2007      	movs	r0, #7
 8001958:	f004 fe3c 	bl	80065d4 <GetFCM_7Value>
 800195c:	f3c0 0081 	ubfx	r0, r0, #2, #2
 8001960:	f894 3093 	ldrb.w	r3, [r4, #147]	@ 0x93
 8001964:	f360 0301 	bfi	r3, r0, #0, #2
 8001968:	f884 3093 	strb.w	r3, [r4, #147]	@ 0x93
	    CanTx_SigSet_0x306_FCM_FrntFarObjLgtDstX(GetFCM_7Value(FCM_FrntFarObjLgtDstX));
 800196c:	2008      	movs	r0, #8
 800196e:	f004 fe31 	bl	80065d4 <GetFCM_7Value>
 8001972:	f894 3095 	ldrb.w	r3, [r4, #149]	@ 0x95
 8001976:	f360 1387 	bfi	r3, r0, #6, #2
 800197a:	f884 3095 	strb.w	r3, [r4, #149]	@ 0x95
 800197e:	2008      	movs	r0, #8
 8001980:	f004 fe28 	bl	80065d4 <GetFCM_7Value>
 8001984:	f3c0 0085 	ubfx	r0, r0, #2, #6
 8001988:	f894 3094 	ldrb.w	r3, [r4, #148]	@ 0x94
 800198c:	f360 0305 	bfi	r3, r0, #0, #6
 8001990:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
	    CanTx_SigSet_0x306_FCM_FrntFarObjHozDstY(GetFCM_7Value(FCM_FrntFarObjHozDstY));
 8001994:	2009      	movs	r0, #9
 8001996:	f004 fe1d 	bl	80065d4 <GetFCM_7Value>
 800199a:	f894 3096 	ldrb.w	r3, [r4, #150]	@ 0x96
 800199e:	f360 1307 	bfi	r3, r0, #4, #4
 80019a2:	f884 3096 	strb.w	r3, [r4, #150]	@ 0x96
 80019a6:	2009      	movs	r0, #9
 80019a8:	f004 fe14 	bl	80065d4 <GetFCM_7Value>
 80019ac:	f3c0 1005 	ubfx	r0, r0, #4, #6
 80019b0:	f894 3095 	ldrb.w	r3, [r4, #149]	@ 0x95
 80019b4:	f360 0305 	bfi	r3, r0, #0, #6
 80019b8:	f884 3095 	strb.w	r3, [r4, #149]	@ 0x95

	    //FCM_8
	    CanTx_SigSet_0x307_FCM_RiObjID(GetFCM_8Value(FCM_RiObjID));
 80019bc:	2000      	movs	r0, #0
 80019be:	f004 fe1d 	bl	80065fc <GetFCM_8Value>
 80019c2:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 80019c6:	f360 13c7 	bfi	r3, r0, #7, #1
 80019ca:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
	    CanTx_SigSet_0x307_FCM_LeObjID(GetFCM_8Value(FCM_LeObjID));
 80019ce:	2001      	movs	r0, #1
 80019d0:	f004 fe14 	bl	80065fc <GetFCM_8Value>
 80019d4:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 80019d8:	f360 1386 	bfi	r3, r0, #6, #1
 80019dc:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
	    CanTx_SigSet_0x307_FCM_LeObjTyp(GetFCM_8Value(FCM_LeObjTyp));
 80019e0:	2002      	movs	r0, #2
 80019e2:	f004 fe0b 	bl	80065fc <GetFCM_8Value>
 80019e6:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 80019ea:	f360 03c5 	bfi	r3, r0, #3, #3
 80019ee:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
	    CanTx_SigSet_0x307_FCM_ACC_LeftTargetVehicleSubType(GetFCM_8Value(FCM_ACC_LeftTargetVehicleSubType));
 80019f2:	2003      	movs	r0, #3
 80019f4:	f004 fe02 	bl	80065fc <GetFCM_8Value>
 80019f8:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 80019fc:	f360 0302 	bfi	r3, r0, #0, #3
 8001a00:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
	    CanTx_SigSet_0x307_FCM_LeObjLgtDstX(GetFCM_8Value(FCM_LeObjLgtDstX));
 8001a04:	2004      	movs	r0, #4
 8001a06:	f004 fdf9 	bl	80065fc <GetFCM_8Value>
 8001a0a:	f884 0099 	strb.w	r0, [r4, #153]	@ 0x99
	    CanTx_SigSet_0x307_FCM_LeObjHozDstY(GetFCM_8Value(FCM_LeObjHozDstY));
 8001a0e:	2005      	movs	r0, #5
 8001a10:	f004 fdf4 	bl	80065fc <GetFCM_8Value>
 8001a14:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
 8001a18:	f360 1387 	bfi	r3, r0, #6, #2
 8001a1c:	f884 309b 	strb.w	r3, [r4, #155]	@ 0x9b
 8001a20:	2005      	movs	r0, #5
 8001a22:	f004 fdeb 	bl	80065fc <GetFCM_8Value>
 8001a26:	f3c0 0087 	ubfx	r0, r0, #2, #8
 8001a2a:	f884 009a 	strb.w	r0, [r4, #154]	@ 0x9a
	    CanTx_SigSet_0x307_FCM_RiObjTyp(GetFCM_8Value(FCM_RiObjTyp));
 8001a2e:	2006      	movs	r0, #6
 8001a30:	f004 fde4 	bl	80065fc <GetFCM_8Value>
 8001a34:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
 8001a38:	f360 03c5 	bfi	r3, r0, #3, #3
 8001a3c:	f884 309b 	strb.w	r3, [r4, #155]	@ 0x9b
	    CanTx_SigSet_0x307_FCM_ACC_RightTargetVehicleSubTyp(GetFCM_8Value(FCM_ACC_RightTargetVehicleSubTyp));
 8001a40:	2007      	movs	r0, #7
 8001a42:	f004 fddb 	bl	80065fc <GetFCM_8Value>
 8001a46:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
 8001a4a:	f360 0302 	bfi	r3, r0, #0, #3
 8001a4e:	f884 309b 	strb.w	r3, [r4, #155]	@ 0x9b
	    CanTx_SigSet_0x307_FCM_RiObjLgtDstX(GetFCM_8Value(FCM_RiObjLgtDstX));
 8001a52:	2008      	movs	r0, #8
 8001a54:	f004 fdd2 	bl	80065fc <GetFCM_8Value>
 8001a58:	f884 009c 	strb.w	r0, [r4, #156]	@ 0x9c
	    CanTx_SigSet_0x307_FCM_RiObjHozDstY(GetFCM_8Value(FCM_RiObjHozDstY));
 8001a5c:	2009      	movs	r0, #9
 8001a5e:	f004 fdcd 	bl	80065fc <GetFCM_8Value>
 8001a62:	f894 309e 	ldrb.w	r3, [r4, #158]	@ 0x9e
 8001a66:	f360 1387 	bfi	r3, r0, #6, #2
 8001a6a:	f884 309e 	strb.w	r3, [r4, #158]	@ 0x9e
 8001a6e:	2009      	movs	r0, #9
 8001a70:	f004 fdc4 	bl	80065fc <GetFCM_8Value>
 8001a74:	f3c0 0087 	ubfx	r0, r0, #2, #8
 8001a78:	f884 009d 	strb.w	r0, [r4, #157]	@ 0x9d

		//GW_PC_1
		CanTx_SigSet_0x150_TCU_1_GearShiftPosition(GetGW_PC_1Value(TCU_1_GearShiftPosition));
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f004 fe19 	bl	80066b4 <GetGW_PC_1Value>
 8001a82:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 8001a86:	f360 1307 	bfi	r3, r0, #4, #4
 8001a8a:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
		CanTx_SigSet_0x150_EMS_3_SS_SetSts(GetGW_PC_1Value(EMS_3_SS_SetSts));
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f004 fe10 	bl	80066b4 <GetGW_PC_1Value>
 8001a94:	f894 30a2 	ldrb.w	r3, [r4, #162]	@ 0xa2
 8001a98:	f360 13c7 	bfi	r3, r0, #7, #1
 8001a9c:	f884 30a2 	strb.w	r3, [r4, #162]	@ 0xa2
		CanTx_SigSet_0x150_TCU_3_Drivemode(GetGW_PC_1Value(TCU_3_Drivemode));
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	f004 fe07 	bl	80066b4 <GetGW_PC_1Value>
 8001aa6:	f894 30a3 	ldrb.w	r3, [r4, #163]	@ 0xa3
 8001aaa:	f360 0305 	bfi	r3, r0, #0, #6
 8001aae:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
	    CanTx_SigSet_0x150_TCU_1_GearShiftPositionValid(GetGW_PC_1Value(TCU_1_GearShiftPositionValid));
 8001ab2:	2005      	movs	r0, #5
 8001ab4:	f004 fdfe 	bl	80066b4 <GetGW_PC_1Value>
 8001ab8:	f894 30a4 	ldrb.w	r3, [r4, #164]	@ 0xa4
 8001abc:	f360 0300 	bfi	r3, r0, #0, #1
 8001ac0:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
	    CanTx_SigSet_0x150_EMS_2_EngineSpeedValid(GetGW_PC_1Value(EMS_2_EngineSpeedValid));
 8001ac4:	2004      	movs	r0, #4
 8001ac6:	f004 fdf5 	bl	80066b4 <GetGW_PC_1Value>
 8001aca:	f894 30a2 	ldrb.w	r3, [r4, #162]	@ 0xa2
 8001ace:	f360 0300 	bfi	r3, r0, #0, #1
 8001ad2:	f884 30a2 	strb.w	r3, [r4, #162]	@ 0xa2
	    CanTx_SigSet_0x150_EMS_2_EngineSpeed(GetGW_PC_1Value(EMS_2_EngineSpeed));
 8001ad6:	2003      	movs	r0, #3
 8001ad8:	f004 fdec 	bl	80066b4 <GetGW_PC_1Value>
 8001adc:	f884 00a1 	strb.w	r0, [r4, #161]	@ 0xa1
 8001ae0:	2003      	movs	r0, #3
 8001ae2:	f004 fde7 	bl	80066b4 <GetGW_PC_1Value>
 8001ae6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001aea:	f884 00a0 	strb.w	r0, [r4, #160]	@ 0xa0
	    CanTx_SigSet_0x150_TCU_3_Timeout_Flag(GetGW_PC_1Value(TCU_3_Timeout_Flag));
 8001aee:	2009      	movs	r0, #9
 8001af0:	f004 fde0 	bl	80066b4 <GetGW_PC_1Value>
 8001af4:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 8001af8:	f360 03c3 	bfi	r3, r0, #3, #1
 8001afc:	f884 30a7 	strb.w	r3, [r4, #167]	@ 0xa7
	    CanTx_SigSet_0x150_TCU_1_Timeout_Flag(GetGW_PC_1Value(TCU_1_Timeout_Flag));
 8001b00:	2008      	movs	r0, #8
 8001b02:	f004 fdd7 	bl	80066b4 <GetGW_PC_1Value>
 8001b06:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 8001b0a:	f360 0382 	bfi	r3, r0, #2, #1
 8001b0e:	f884 30a7 	strb.w	r3, [r4, #167]	@ 0xa7
	    CanTx_SigSet_0x150_EMS_3_EngineStatus(GetGW_PC_1Value(EMS_3_EngineStatus));
 8001b12:	2006      	movs	r0, #6
 8001b14:	f004 fdce 	bl	80066b4 <GetGW_PC_1Value>
 8001b18:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 8001b1c:	f360 1305 	bfi	r3, r0, #4, #2
 8001b20:	f884 30a7 	strb.w	r3, [r4, #167]	@ 0xa7
	    CanTx_SigSet_0x150_EMS_3_Timeout_Flag(GetGW_PC_1Value(EMS_3_Timeout_Flag));
 8001b24:	2007      	movs	r0, #7
 8001b26:	f004 fdc5 	bl	80066b4 <GetGW_PC_1Value>
 8001b2a:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 8001b2e:	f360 0341 	bfi	r3, r0, #1, #1
 8001b32:	f884 30a7 	strb.w	r3, [r4, #167]	@ 0xa7

		//GW_PC_6
		CanTx_SigSet_0x155_TCU_3_Timeout_Flag1(GetGW_PC_6Value(TCU_3_Timeout_Flag1));
 8001b36:	2001      	movs	r0, #1
 8001b38:	f004 fdde 	bl	80066f8 <GetGW_PC_6Value>
 8001b3c:	f894 30af 	ldrb.w	r3, [r4, #175]	@ 0xaf
 8001b40:	f360 0382 	bfi	r3, r0, #2, #1
 8001b44:	f884 30af 	strb.w	r3, [r4, #175]	@ 0xaf
		CanTx_SigSet_0x155_TCU_3_DrivemodeOprationNotice(GetGW_PC_6Value(TCU_3_DrivemodeOprationNotice));
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f004 fdd5 	bl	80066f8 <GetGW_PC_6Value>
 8001b4e:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8001b52:	f360 0303 	bfi	r3, r0, #0, #4
 8001b56:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad

		//GW_PC_2
		CanTx_SigSet_0x250_SAS_1_SteeringAngle(GetGW_PC_2Value(SAS_1_SteeringAngle));
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f004 fdd8 	bl	8006710 <GetGW_PC_2Value>
 8001b60:	f884 00b6 	strb.w	r0, [r4, #182]	@ 0xb6
 8001b64:	2001      	movs	r0, #1
 8001b66:	f004 fdd3 	bl	8006710 <GetGW_PC_2Value>
 8001b6a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001b6e:	f884 00b5 	strb.w	r0, [r4, #181]	@ 0xb5
		CanTx_SigSet_0x250_ABS_3_VehicleSpeed(GetGW_PC_2Value(ABS_3_VehicleSpeed));
 8001b72:	2000      	movs	r0, #0
 8001b74:	f004 fdcc 	bl	8006710 <GetGW_PC_2Value>
 8001b78:	f884 00b3 	strb.w	r0, [r4, #179]	@ 0xb3
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f004 fdc7 	bl	8006710 <GetGW_PC_2Value>
 8001b82:	f3c0 2004 	ubfx	r0, r0, #8, #5
 8001b86:	f894 30b2 	ldrb.w	r3, [r4, #178]	@ 0xb2
 8001b8a:	f360 0304 	bfi	r3, r0, #0, #5
 8001b8e:	f884 30b2 	strb.w	r3, [r4, #178]	@ 0xb2
		CanTx_SigSet_0x250_SAS_1_SteeringAngleValid(GetGW_PC_2Value(SAS_1_SteeringAngleValid));
 8001b92:	2005      	movs	r0, #5
 8001b94:	f004 fdbc 	bl	8006710 <GetGW_PC_2Value>
 8001b98:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 8001b9c:	f360 0382 	bfi	r3, r0, #2, #1
 8001ba0:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
		CanTx_SigSet_0x250_ABS_3_AbsActive(GetGW_PC_2Value(ABS_3_AbsActive));
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	f004 fdb3 	bl	8006710 <GetGW_PC_2Value>
 8001baa:	f894 30b1 	ldrb.w	r3, [r4, #177]	@ 0xb1
 8001bae:	f360 13c7 	bfi	r3, r0, #7, #1
 8001bb2:	f884 30b1 	strb.w	r3, [r4, #177]	@ 0xb1
		CanTx_SigSet_0x250_ESP_1_ESPActive(GetGW_PC_2Value(ESP_1_ESPActive));
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	f004 fdaa 	bl	8006710 <GetGW_PC_2Value>
 8001bbc:	f894 30b0 	ldrb.w	r3, [r4, #176]	@ 0xb0
 8001bc0:	f360 0341 	bfi	r3, r0, #1, #1
 8001bc4:	f884 30b0 	strb.w	r3, [r4, #176]	@ 0xb0
		CanTx_SigSet_0x250_ABS_3_VehicleSpeedValid(GetGW_PC_2Value(ABS_3_VehicleSpeedValid));
 8001bc8:	2004      	movs	r0, #4
 8001bca:	f004 fda1 	bl	8006710 <GetGW_PC_2Value>
 8001bce:	f894 30b2 	ldrb.w	r3, [r4, #178]	@ 0xb2
 8001bd2:	f360 1386 	bfi	r3, r0, #6, #1
 8001bd6:	f884 30b2 	strb.w	r3, [r4, #178]	@ 0xb2
		CanTx_SigSet_0x250_SAS_1_Timeout_Flag(GetGW_PC_2Value(SAS_1_Timeout_Flag));
 8001bda:	2008      	movs	r0, #8
 8001bdc:	f004 fd98 	bl	8006710 <GetGW_PC_2Value>
 8001be0:	f894 30b7 	ldrb.w	r3, [r4, #183]	@ 0xb7
 8001be4:	f360 03c3 	bfi	r3, r0, #3, #1
 8001be8:	f884 30b7 	strb.w	r3, [r4, #183]	@ 0xb7
		CanTx_SigSet_0x250_ABS_3_Timeout_Flag(GetGW_PC_2Value(ABS_3_Timeout_Flag));
 8001bec:	2007      	movs	r0, #7
 8001bee:	f004 fd8f 	bl	8006710 <GetGW_PC_2Value>
 8001bf2:	f894 30b7 	ldrb.w	r3, [r4, #183]	@ 0xb7
 8001bf6:	f360 0382 	bfi	r3, r0, #2, #1
 8001bfa:	f884 30b7 	strb.w	r3, [r4, #183]	@ 0xb7
		CanTx_SigSet_0x250_ESP_1_Timeout_Flag(GetGW_PC_2Value(ESP_1_Timeout_Flag));
 8001bfe:	2006      	movs	r0, #6
 8001c00:	f004 fd86 	bl	8006710 <GetGW_PC_2Value>
 8001c04:	f894 30b7 	ldrb.w	r3, [r4, #183]	@ 0xb7
 8001c08:	f360 0300 	bfi	r3, r0, #0, #1
 8001c0c:	f884 30b7 	strb.w	r3, [r4, #183]	@ 0xb7

		//GW_PC_7
		CanTx_SigSet_0x255_AWD_1_Lamp4WDLock(GetGW_PC_7Value(AWD_1_Lamp4WDLock));
 8001c10:	2000      	movs	r0, #0
 8001c12:	f004 fda3 	bl	800675c <GetGW_PC_7Value>
 8001c16:	f894 30b9 	ldrb.w	r3, [r4, #185]	@ 0xb9
 8001c1a:	f360 1305 	bfi	r3, r0, #4, #2
 8001c1e:	f884 30b9 	strb.w	r3, [r4, #185]	@ 0xb9
		CanTx_SigSet_0x255_AWD_1_Lamp4WDLow(GetGW_PC_7Value(AWD_1_Lamp4WDLow));
 8001c22:	2001      	movs	r0, #1
 8001c24:	f004 fd9a 	bl	800675c <GetGW_PC_7Value>
 8001c28:	f894 30b9 	ldrb.w	r3, [r4, #185]	@ 0xb9
 8001c2c:	f360 1387 	bfi	r3, r0, #6, #2
 8001c30:	f884 30b9 	strb.w	r3, [r4, #185]	@ 0xb9
		CanTx_SigSet_0x255_AWD_1_Lamp2WD(GetGW_PC_7Value(AWD_1_Lamp2WD));
 8001c34:	2002      	movs	r0, #2
 8001c36:	f004 fd91 	bl	800675c <GetGW_PC_7Value>
 8001c3a:	f894 30b9 	ldrb.w	r3, [r4, #185]	@ 0xb9
 8001c3e:	f360 0383 	bfi	r3, r0, #2, #2
 8001c42:	f884 30b9 	strb.w	r3, [r4, #185]	@ 0xb9
		CanTx_SigSet_0x255_EDL_1_FrontDiffLockYellowLamp(GetGW_PC_7Value(EDL_1_FrontDiffLockYellowLamp));
 8001c46:	2004      	movs	r0, #4
 8001c48:	f004 fd88 	bl	800675c <GetGW_PC_7Value>
 8001c4c:	f894 30ba 	ldrb.w	r3, [r4, #186]	@ 0xba
 8001c50:	f360 1387 	bfi	r3, r0, #6, #2
 8001c54:	f884 30ba 	strb.w	r3, [r4, #186]	@ 0xba
		CanTx_SigSet_0x255_EDL_1_FrontDiffLockGreenLamp(GetGW_PC_7Value(EDL_1_FrontDiffLockGreenLamp));
 8001c58:	2003      	movs	r0, #3
 8001c5a:	f004 fd7f 	bl	800675c <GetGW_PC_7Value>
 8001c5e:	f894 30ba 	ldrb.w	r3, [r4, #186]	@ 0xba
 8001c62:	f360 1305 	bfi	r3, r0, #4, #2
 8001c66:	f884 30ba 	strb.w	r3, [r4, #186]	@ 0xba
		CanTx_SigSet_0x255_EDL_1_RearDiffLockYellowLamp(GetGW_PC_7Value(EDL_1_RearDiffLockYellowLamp));
 8001c6a:	2006      	movs	r0, #6
 8001c6c:	f004 fd76 	bl	800675c <GetGW_PC_7Value>
 8001c70:	f894 30bb 	ldrb.w	r3, [r4, #187]	@ 0xbb
 8001c74:	f360 0383 	bfi	r3, r0, #2, #2
 8001c78:	f884 30bb 	strb.w	r3, [r4, #187]	@ 0xbb
		CanTx_SigSet_0x255_EDL_1_RearDiffLockGreenLamp(GetGW_PC_7Value(EDL_1_RearDiffLockGreenLamp));
 8001c7c:	2005      	movs	r0, #5
 8001c7e:	f004 fd6d 	bl	800675c <GetGW_PC_7Value>
 8001c82:	f894 30bb 	ldrb.w	r3, [r4, #187]	@ 0xbb
 8001c86:	f360 0301 	bfi	r3, r0, #0, #2
 8001c8a:	f884 30bb 	strb.w	r3, [r4, #187]	@ 0xbb
		CanTx_SigSet_0x255_EDL_1_Timeout_Flag(GetGW_PC_7Value(EDL_1_Timeout_Flag));
 8001c8e:	2008      	movs	r0, #8
 8001c90:	f004 fd64 	bl	800675c <GetGW_PC_7Value>
 8001c94:	f894 30bf 	ldrb.w	r3, [r4, #191]	@ 0xbf
 8001c98:	f360 0341 	bfi	r3, r0, #1, #1
 8001c9c:	f884 30bf 	strb.w	r3, [r4, #191]	@ 0xbf
		CanTx_SigSet_0x255_AWD_1_Timeout_Flag(GetGW_PC_7Value(AWD_1_Timeout_Flag));
 8001ca0:	2007      	movs	r0, #7
 8001ca2:	f004 fd5b 	bl	800675c <GetGW_PC_7Value>
 8001ca6:	f894 30bf 	ldrb.w	r3, [r4, #191]	@ 0xbf
 8001caa:	f360 0300 	bfi	r3, r0, #0, #1
 8001cae:	f884 30bf 	strb.w	r3, [r4, #191]	@ 0xbf

		//GW_PC_4
		CanTx_SigSet_0x3A0_Swaybar_1_FrontSwaybarYellowLamp(GetGW_PC_4Value(Swaybar_1_FrontSwaybarYellowLamp));
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f004 fd5c 	bl	8006770 <GetGW_PC_4Value>
 8001cb8:	f894 30c0 	ldrb.w	r3, [r4, #192]	@ 0xc0
 8001cbc:	f360 1305 	bfi	r3, r0, #4, #2
 8001cc0:	f884 30c0 	strb.w	r3, [r4, #192]	@ 0xc0
		CanTx_SigSet_0x3A0_Swaybar_1_FrontSwaybarGreenLamp(GetGW_PC_4Value(Swaybar_1_FrontSwaybarGreenLamp));
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f004 fd53 	bl	8006770 <GetGW_PC_4Value>
 8001cca:	f894 30c0 	ldrb.w	r3, [r4, #192]	@ 0xc0
 8001cce:	f360 0383 	bfi	r3, r0, #2, #2
 8001cd2:	f884 30c0 	strb.w	r3, [r4, #192]	@ 0xc0
		CanTx_SigSet_0x3A0_Swaybar_1_Timeout_Flag(GetGW_PC_4Value(Swaybar_1_Timeout_Flag));
 8001cd6:	2002      	movs	r0, #2
 8001cd8:	f004 fd4a 	bl	8006770 <GetGW_PC_4Value>
 8001cdc:	f894 30c7 	ldrb.w	r3, [r4, #199]	@ 0xc7
 8001ce0:	f360 0341 	bfi	r3, r0, #1, #1
 8001ce4:	f884 30c7 	strb.w	r3, [r4, #199]	@ 0xc7

		//GW_BD_9
		CanTx_SigSet_0x3A7_BCM_1_FrontLeftDoorSts(GetGW_BD_9Value(BCM_1_FrontLeftDoorSts));
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f004 fcc9 	bl	8006680 <GetGW_BD_9Value>
 8001cee:	f894 30ca 	ldrb.w	r3, [r4, #202]	@ 0xca
 8001cf2:	f360 1345 	bfi	r3, r0, #5, #1
 8001cf6:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
		CanTx_SigSet_0x3A7_BCM_1_FrontRightDoorSts(GetGW_BD_9Value(BCM_1_FrontRightDoorSts));
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f004 fcc0 	bl	8006680 <GetGW_BD_9Value>
 8001d00:	f894 30ca 	ldrb.w	r3, [r4, #202]	@ 0xca
 8001d04:	f360 1386 	bfi	r3, r0, #6, #1
 8001d08:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
		CanTx_SigSet_0x3A7_BCM_1_RearLeftDoorSts(GetGW_BD_9Value(BCM_1_RearLeftDoorSts));
 8001d0c:	2002      	movs	r0, #2
 8001d0e:	f004 fcb7 	bl	8006680 <GetGW_BD_9Value>
 8001d12:	f894 30ca 	ldrb.w	r3, [r4, #202]	@ 0xca
 8001d16:	f360 13c7 	bfi	r3, r0, #7, #1
 8001d1a:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
		CanTx_SigSet_0x3A7_BCM_1_RearRightDoorSts(GetGW_BD_9Value(BCM_1_RearRightDoorSts));
 8001d1e:	2003      	movs	r0, #3
 8001d20:	f004 fcae 	bl	8006680 <GetGW_BD_9Value>
 8001d24:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 8001d28:	f360 0300 	bfi	r3, r0, #0, #1
 8001d2c:	f884 30cb 	strb.w	r3, [r4, #203]	@ 0xcb
		CanTx_SigSet_0x3A7_BCM_1_TailGateOpenSts(GetGW_BD_9Value(BCM_1_TailGateOpenSts));
 8001d30:	2004      	movs	r0, #4
 8001d32:	f004 fca5 	bl	8006680 <GetGW_BD_9Value>
 8001d36:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 8001d3a:	f360 0341 	bfi	r3, r0, #1, #1
 8001d3e:	f884 30cb 	strb.w	r3, [r4, #203]	@ 0xcb
		CanTx_SigSet_0x3A7_BCM_1_HoodSts(GetGW_BD_9Value(BCM_1_HoodSts));
 8001d42:	2005      	movs	r0, #5
 8001d44:	f004 fc9c 	bl	8006680 <GetGW_BD_9Value>
 8001d48:	f894 30cc 	ldrb.w	r3, [r4, #204]	@ 0xcc
 8001d4c:	f360 0300 	bfi	r3, r0, #0, #1
 8001d50:	f884 30cc 	strb.w	r3, [r4, #204]	@ 0xcc
		CanTx_SigSet_0x3A7_TCM_1_LeftTurnLightSWSts(GetGW_BD_9Value(TCM_1_LeftTurnLightSWSts));
 8001d54:	2006      	movs	r0, #6
 8001d56:	f004 fc93 	bl	8006680 <GetGW_BD_9Value>
 8001d5a:	f894 30cf 	ldrb.w	r3, [r4, #207]	@ 0xcf
 8001d5e:	f360 1386 	bfi	r3, r0, #6, #1
 8001d62:	f884 30cf 	strb.w	r3, [r4, #207]	@ 0xcf
		CanTx_SigSet_0x3A7_TCM_1_RightTurnLightSWSts(GetGW_BD_9Value(TCM_1_RightTurnLightSWSts));
 8001d66:	2007      	movs	r0, #7
 8001d68:	f004 fc8a 	bl	8006680 <GetGW_BD_9Value>
 8001d6c:	f894 30cf 	ldrb.w	r3, [r4, #207]	@ 0xcf
 8001d70:	f360 1304 	bfi	r3, r0, #4, #1
 8001d74:	f884 30cf 	strb.w	r3, [r4, #207]	@ 0xcf
		CanTx_SigSet_0x3A7_BCM_1_PositionLightSts(GetGW_BD_9Value(BCM_1_PositionLightSts));
 8001d78:	2008      	movs	r0, #8
 8001d7a:	f004 fc81 	bl	8006680 <GetGW_BD_9Value>
 8001d7e:	f894 30c9 	ldrb.w	r3, [r4, #201]	@ 0xc9
 8001d82:	f360 0383 	bfi	r3, r0, #2, #2
 8001d86:	f884 30c9 	strb.w	r3, [r4, #201]	@ 0xc9
		CanTx_SigSet_0x3A7_BCM_1_ACRearFrostSts(GetGW_BD_9Value(BCM_1_ACRearFrostSts));
 8001d8a:	2009      	movs	r0, #9
 8001d8c:	f004 fc78 	bl	8006680 <GetGW_BD_9Value>
 8001d90:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 8001d94:	f360 1386 	bfi	r3, r0, #6, #1
 8001d98:	f884 30cb 	strb.w	r3, [r4, #203]	@ 0xcb
		CanTx_SigSet_0x3A7_BCM_1_LeftTurnLightSts(GetGW_BD_9Value(BCM_1_LeftTurnLightSts));
 8001d9c:	200d      	movs	r0, #13
 8001d9e:	f004 fc6f 	bl	8006680 <GetGW_BD_9Value>
 8001da2:	f894 30c8 	ldrb.w	r3, [r4, #200]	@ 0xc8
 8001da6:	f360 1387 	bfi	r3, r0, #6, #2
 8001daa:	f884 30c8 	strb.w	r3, [r4, #200]	@ 0xc8
		CanTx_SigSet_0x3A7_BCM_1_HighBeamSts(GetGW_BD_9Value(BCM_1_HighBeamSts));
 8001dae:	200c      	movs	r0, #12
 8001db0:	f004 fc66 	bl	8006680 <GetGW_BD_9Value>
 8001db4:	f894 30c8 	ldrb.w	r3, [r4, #200]	@ 0xc8
 8001db8:	f360 1305 	bfi	r3, r0, #4, #2
 8001dbc:	f884 30c8 	strb.w	r3, [r4, #200]	@ 0xc8
		CanTx_SigSet_0x3A7_BCM_1_LowBeamSts(GetGW_BD_9Value(BCM_1_LowBeamSts));
 8001dc0:	200b      	movs	r0, #11
 8001dc2:	f004 fc5d 	bl	8006680 <GetGW_BD_9Value>
 8001dc6:	f894 30c8 	ldrb.w	r3, [r4, #200]	@ 0xc8
 8001dca:	f360 0383 	bfi	r3, r0, #2, #2
 8001dce:	f884 30c8 	strb.w	r3, [r4, #200]	@ 0xc8
		CanTx_SigSet_0x3A7_BCM_1_PowerMode(GetGW_BD_9Value(BCM_1_PowerMode));
 8001dd2:	200a      	movs	r0, #10
 8001dd4:	f004 fc54 	bl	8006680 <GetGW_BD_9Value>
 8001dd8:	f894 30c8 	ldrb.w	r3, [r4, #200]	@ 0xc8
 8001ddc:	f360 0301 	bfi	r3, r0, #0, #2
 8001de0:	f884 30c8 	strb.w	r3, [r4, #200]	@ 0xc8
		CanTx_SigSet_0x3A7_BCM_1_RearFogLightSts(GetGW_BD_9Value(BCM_1_RearFogLightSts));
 8001de4:	2010      	movs	r0, #16
 8001de6:	f004 fc4b 	bl	8006680 <GetGW_BD_9Value>
 8001dea:	f894 30c9 	ldrb.w	r3, [r4, #201]	@ 0xc9
 8001dee:	f360 1387 	bfi	r3, r0, #6, #2
 8001df2:	f884 30c9 	strb.w	r3, [r4, #201]	@ 0xc9
		CanTx_SigSet_0x3A7_BCM_1_EmergencyLightSts(GetGW_BD_9Value(BCM_1_EmergencyLightSts));
 8001df6:	200f      	movs	r0, #15
 8001df8:	f004 fc42 	bl	8006680 <GetGW_BD_9Value>
 8001dfc:	f894 30c9 	ldrb.w	r3, [r4, #201]	@ 0xc9
 8001e00:	f360 1305 	bfi	r3, r0, #4, #2
 8001e04:	f884 30c9 	strb.w	r3, [r4, #201]	@ 0xc9
		CanTx_SigSet_0x3A7_BCM_1_RightTurnLightSts(GetGW_BD_9Value(BCM_1_RightTurnLightSts));
 8001e08:	200e      	movs	r0, #14
 8001e0a:	f004 fc39 	bl	8006680 <GetGW_BD_9Value>
 8001e0e:	f894 30c9 	ldrb.w	r3, [r4, #201]	@ 0xc9
 8001e12:	f360 0301 	bfi	r3, r0, #0, #2
 8001e16:	f884 30c9 	strb.w	r3, [r4, #201]	@ 0xc9
		CanTx_SigSet_0x3A7_BCM_1_DaytimeRunningLightSts(GetGW_BD_9Value(BCM_1_DaytimeRunningLightSts));
 8001e1a:	2012      	movs	r0, #18
 8001e1c:	f004 fc30 	bl	8006680 <GetGW_BD_9Value>
 8001e20:	f894 30ca 	ldrb.w	r3, [r4, #202]	@ 0xca
 8001e24:	f360 0383 	bfi	r3, r0, #2, #2
 8001e28:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
		CanTx_SigSet_0x3A7_BCM_1_FrontFogLightSts(GetGW_BD_9Value(BCM_1_FrontFogLightSts));
 8001e2c:	2011      	movs	r0, #17
 8001e2e:	f004 fc27 	bl	8006680 <GetGW_BD_9Value>
 8001e32:	f894 30ca 	ldrb.w	r3, [r4, #202]	@ 0xca
 8001e36:	f360 0301 	bfi	r3, r0, #0, #2
 8001e3a:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
		CanTx_SigSet_0x3A7_BCM_1_ReverseGearInfo(GetGW_BD_9Value(BCM_1_ReverseGearInfo));
 8001e3e:	2013      	movs	r0, #19
 8001e40:	f004 fc1e 	bl	8006680 <GetGW_BD_9Value>
 8001e44:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 8001e48:	f360 13c7 	bfi	r3, r0, #7, #1
 8001e4c:	f884 30cb 	strb.w	r3, [r4, #203]	@ 0xcb
		CanTx_SigSet_0x3A7_BCM_1_BackMirrorFolderSts(GetGW_BD_9Value(BCM_1_BackMirrorFolderSts));
 8001e50:	2014      	movs	r0, #20
 8001e52:	f004 fc15 	bl	8006680 <GetGW_BD_9Value>
 8001e56:	f894 30cc 	ldrb.w	r3, [r4, #204]	@ 0xcc
 8001e5a:	f360 0382 	bfi	r3, r0, #2, #1
 8001e5e:	f884 30cc 	strb.w	r3, [r4, #204]	@ 0xcc
		CanTx_SigSet_0x3A7_TCM_1_LeftTurnLightSWStsValid(GetGW_BD_9Value(TCM_1_LeftTurnLightSWStsValid));
 8001e62:	2015      	movs	r0, #21
 8001e64:	f004 fc0c 	bl	8006680 <GetGW_BD_9Value>
 8001e68:	f894 30cf 	ldrb.w	r3, [r4, #207]	@ 0xcf
 8001e6c:	f360 1345 	bfi	r3, r0, #5, #1
 8001e70:	f884 30cf 	strb.w	r3, [r4, #207]	@ 0xcf
		CanTx_SigSet_0x3A7_TCM_1_RightTurnLightSWStsValid(GetGW_BD_9Value(TCM_1_RightTurnLightSWStsValid));
 8001e74:	2016      	movs	r0, #22
 8001e76:	f004 fc03 	bl	8006680 <GetGW_BD_9Value>
 8001e7a:	f894 30cf 	ldrb.w	r3, [r4, #207]	@ 0xcf
 8001e7e:	f360 03c3 	bfi	r3, r0, #3, #1
 8001e82:	f884 30cf 	strb.w	r3, [r4, #207]	@ 0xcf
		CanTx_SigSet_0x3A7_TCM_1_Timeout_Flag(GetGW_BD_9Value(TCM_1_Timeout_Flag));
 8001e86:	2018      	movs	r0, #24
 8001e88:	f004 fbfa 	bl	8006680 <GetGW_BD_9Value>
 8001e8c:	f894 30cf 	ldrb.w	r3, [r4, #207]	@ 0xcf
 8001e90:	f360 0341 	bfi	r3, r0, #1, #1
 8001e94:	f884 30cf 	strb.w	r3, [r4, #207]	@ 0xcf
	    CanTx_SigSet_0x3A7_BCM_1_Timeout_Flag(GetGW_BD_9Value(BCM_1_Timeout_Flag));
 8001e98:	2017      	movs	r0, #23
 8001e9a:	f004 fbf1 	bl	8006680 <GetGW_BD_9Value>
 8001e9e:	f894 30cf 	ldrb.w	r3, [r4, #207]	@ 0xcf
 8001ea2:	f360 0300 	bfi	r3, r0, #0, #1
 8001ea6:	f884 30cf 	strb.w	r3, [r4, #207]	@ 0xcf

		//GW_BD_14
		CanTx_SigSet_0x3AC_AC_1_ButtonTriggerStatus(GetGW_BD_14Value(AC_1_ButtonTriggerStatus));
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f004 fbba 	bl	8006624 <GetGW_BD_14Value>
 8001eb0:	f894 30d2 	ldrb.w	r3, [r4, #210]	@ 0xd2
 8001eb4:	f360 1386 	bfi	r3, r0, #6, #1
 8001eb8:	f884 30d2 	strb.w	r3, [r4, #210]	@ 0xd2
		CanTx_SigSet_0x3AC_AC_1_ACSystemSts(GetGW_BD_14Value(AC_1_ACSystemSts));
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f004 fbb1 	bl	8006624 <GetGW_BD_14Value>
 8001ec2:	f894 30d1 	ldrb.w	r3, [r4, #209]	@ 0xd1
 8001ec6:	f360 1386 	bfi	r3, r0, #6, #1
 8001eca:	f884 30d1 	strb.w	r3, [r4, #209]	@ 0xd1
		CanTx_SigSet_0x3AC_AC_2_DriverSetTemperature(GetGW_BD_14Value(AC_2_DriverSetTemperature));
 8001ece:	2002      	movs	r0, #2
 8001ed0:	f004 fba8 	bl	8006624 <GetGW_BD_14Value>
 8001ed4:	f894 30d3 	ldrb.w	r3, [r4, #211]	@ 0xd3
 8001ed8:	f360 0305 	bfi	r3, r0, #0, #6
 8001edc:	f884 30d3 	strb.w	r3, [r4, #211]	@ 0xd3
		CanTx_SigSet_0x3AC_AC_2_PngSetTemperature(GetGW_BD_14Value(AC_2_PngSetTemperature));
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f004 fb9f 	bl	8006624 <GetGW_BD_14Value>
 8001ee6:	f894 30d3 	ldrb.w	r3, [r4, #211]	@ 0xd3
 8001eea:	f360 1387 	bfi	r3, r0, #6, #2
 8001eee:	f884 30d3 	strb.w	r3, [r4, #211]	@ 0xd3
 8001ef2:	2003      	movs	r0, #3
 8001ef4:	f004 fb96 	bl	8006624 <GetGW_BD_14Value>
 8001ef8:	f3c0 0083 	ubfx	r0, r0, #2, #4
 8001efc:	f894 30d2 	ldrb.w	r3, [r4, #210]	@ 0xd2
 8001f00:	f360 0303 	bfi	r3, r0, #0, #4
 8001f04:	f884 30d2 	strb.w	r3, [r4, #210]	@ 0xd2
		CanTx_SigSet_0x3AC_AC_1_BlowerSpeedLevel(GetGW_BD_14Value(AC_1_BlowerSpeedLevel));
 8001f08:	2004      	movs	r0, #4
 8001f0a:	f004 fb8b 	bl	8006624 <GetGW_BD_14Value>
 8001f0e:	f894 30d1 	ldrb.w	r3, [r4, #209]	@ 0xd1
 8001f12:	f360 0302 	bfi	r3, r0, #0, #3
 8001f16:	f884 30d1 	strb.w	r3, [r4, #209]	@ 0xd1
		CanTx_SigSet_0x3AC_AC_1_AirDistributeMode(GetGW_BD_14Value(AC_1_AirDistributeMode));
 8001f1a:	2005      	movs	r0, #5
 8001f1c:	f004 fb82 	bl	8006624 <GetGW_BD_14Value>
 8001f20:	f894 30d0 	ldrb.w	r3, [r4, #208]	@ 0xd0
 8001f24:	f360 1306 	bfi	r3, r0, #4, #3
 8001f28:	f884 30d0 	strb.w	r3, [r4, #208]	@ 0xd0
		CanTx_SigSet_0x3AC_AC_1_AirCirculationMode(GetGW_BD_14Value(AC_1_AirCirculationMode));
 8001f2c:	2006      	movs	r0, #6
 8001f2e:	f004 fb79 	bl	8006624 <GetGW_BD_14Value>
 8001f32:	f894 30d0 	ldrb.w	r3, [r4, #208]	@ 0xd0
 8001f36:	f360 13c7 	bfi	r3, r0, #7, #1
 8001f3a:	f884 30d0 	strb.w	r3, [r4, #208]	@ 0xd0
		CanTx_SigSet_0x3AC_AC_1_ACButtonSts(GetGW_BD_14Value(AC_1_ACButtonSts));
 8001f3e:	2007      	movs	r0, #7
 8001f40:	f004 fb70 	bl	8006624 <GetGW_BD_14Value>
 8001f44:	f894 30d1 	ldrb.w	r3, [r4, #209]	@ 0xd1
 8001f48:	f360 03c3 	bfi	r3, r0, #3, #1
 8001f4c:	f884 30d1 	strb.w	r3, [r4, #209]	@ 0xd1
		CanTx_SigSet_0x3AC_AC_1_FrontDefrostButtonSts(GetGW_BD_14Value(AC_1_FrontDefrostButtonSts));
 8001f50:	2008      	movs	r0, #8
 8001f52:	f004 fb67 	bl	8006624 <GetGW_BD_14Value>
 8001f56:	f894 30d1 	ldrb.w	r3, [r4, #209]	@ 0xd1
 8001f5a:	f360 1304 	bfi	r3, r0, #4, #1
 8001f5e:	f884 30d1 	strb.w	r3, [r4, #209]	@ 0xd1
		CanTx_SigSet_0x3AC_AC_2_DualButtonSts(GetGW_BD_14Value(AC_2_DualButtonSts));
 8001f62:	2009      	movs	r0, #9
 8001f64:	f004 fb5e 	bl	8006624 <GetGW_BD_14Value>
 8001f68:	f894 30d5 	ldrb.w	r3, [r4, #213]	@ 0xd5
 8001f6c:	f360 1304 	bfi	r3, r0, #4, #1
 8001f70:	f884 30d5 	strb.w	r3, [r4, #213]	@ 0xd5
		CanTx_SigSet_0x3AC_AC_2_AUTOButtonSts(GetGW_BD_14Value(AC_2_AUTOButtonSts));
 8001f74:	200a      	movs	r0, #10
 8001f76:	f004 fb55 	bl	8006624 <GetGW_BD_14Value>
 8001f7a:	f894 30d5 	ldrb.w	r3, [r4, #213]	@ 0xd5
 8001f7e:	f360 0382 	bfi	r3, r0, #2, #1
 8001f82:	f884 30d5 	strb.w	r3, [r4, #213]	@ 0xd5
		CanTx_SigSet_0x3AC_AC_2_OutsideTemperature(GetGW_BD_14Value(AC_2_OutsideTemperature));
 8001f86:	200b      	movs	r0, #11
 8001f88:	f004 fb4c 	bl	8006624 <GetGW_BD_14Value>
 8001f8c:	f884 00d4 	strb.w	r0, [r4, #212]	@ 0xd4
		CanTx_SigSet_0x3AC_AC_1_ACSelfCleanModeSts(GetGW_BD_14Value(AC_1_ACSelfCleanModeSts));
 8001f90:	200c      	movs	r0, #12
 8001f92:	f004 fb47 	bl	8006624 <GetGW_BD_14Value>
 8001f96:	f894 30d5 	ldrb.w	r3, [r4, #213]	@ 0xd5
 8001f9a:	f360 1345 	bfi	r3, r0, #5, #1
 8001f9e:	f884 30d5 	strb.w	r3, [r4, #213]	@ 0xd5
		CanTx_SigSet_0x3AC_AC_1_TemperatureLevel(GetGW_BD_14Value(AC_1_TemperatureLevel));
 8001fa2:	200d      	movs	r0, #13
 8001fa4:	f004 fb3e 	bl	8006624 <GetGW_BD_14Value>
 8001fa8:	f894 30d0 	ldrb.w	r3, [r4, #208]	@ 0xd0
 8001fac:	f360 0303 	bfi	r3, r0, #0, #4
 8001fb0:	f884 30d0 	strb.w	r3, [r4, #208]	@ 0xd0
		CanTx_SigSet_0x3AC_AC_1_RearDefrostButtonSts(GetGW_BD_14Value(AC_1_RearDefrostButtonSts));
 8001fb4:	200e      	movs	r0, #14
 8001fb6:	f004 fb35 	bl	8006624 <GetGW_BD_14Value>
 8001fba:	f894 30d1 	ldrb.w	r3, [r4, #209]	@ 0xd1
 8001fbe:	f360 1345 	bfi	r3, r0, #5, #1
 8001fc2:	f884 30d1 	strb.w	r3, [r4, #209]	@ 0xd1
		CanTx_SigSet_0x3AC_AC_1_PTCButtonSts(GetGW_BD_14Value(AC_1_PTCButtonSts));
 8001fc6:	200f      	movs	r0, #15
 8001fc8:	f004 fb2c 	bl	8006624 <GetGW_BD_14Value>
 8001fcc:	f894 30d1 	ldrb.w	r3, [r4, #209]	@ 0xd1
 8001fd0:	f360 13c7 	bfi	r3, r0, #7, #1
 8001fd4:	f884 30d1 	strb.w	r3, [r4, #209]	@ 0xd1
		CanTx_SigSet_0x3AC_AC_1_BlowerSpeedLevelRear(GetGW_BD_14Value(AC_1_BlowerSpeedLevelRear));
 8001fd8:	2010      	movs	r0, #16
 8001fda:	f004 fb23 	bl	8006624 <GetGW_BD_14Value>
 8001fde:	f894 30d2 	ldrb.w	r3, [r4, #210]	@ 0xd2
 8001fe2:	f360 1305 	bfi	r3, r0, #4, #2
 8001fe6:	f884 30d2 	strb.w	r3, [r4, #210]	@ 0xd2
		CanTx_SigSet_0x3AC_AC_1_RearModeSts(GetGW_BD_14Value(AC_1_RearModeSts));
 8001fea:	2011      	movs	r0, #17
 8001fec:	f004 fb1a 	bl	8006624 <GetGW_BD_14Value>
 8001ff0:	f894 30d2 	ldrb.w	r3, [r4, #210]	@ 0xd2
 8001ff4:	f360 13c7 	bfi	r3, r0, #7, #1
 8001ff8:	f884 30d2 	strb.w	r3, [r4, #210]	@ 0xd2
		CanTx_SigSet_0x3AC_AC_2_OutsideTemperatureValid(GetGW_BD_14Value(AC_2_OutsideTemperatureValid));
 8001ffc:	2012      	movs	r0, #18
 8001ffe:	f004 fb11 	bl	8006624 <GetGW_BD_14Value>
 8002002:	f894 30d5 	ldrb.w	r3, [r4, #213]	@ 0xd5
 8002006:	f360 0300 	bfi	r3, r0, #0, #1
 800200a:	f884 30d5 	strb.w	r3, [r4, #213]	@ 0xd5
		CanTx_SigSet_0x3AC_AC_2_DualMode(GetGW_BD_14Value(AC_2_DualMode));
 800200e:	2013      	movs	r0, #19
 8002010:	f004 fb08 	bl	8006624 <GetGW_BD_14Value>
 8002014:	f894 30d5 	ldrb.w	r3, [r4, #213]	@ 0xd5
 8002018:	f360 0341 	bfi	r3, r0, #1, #1
 800201c:	f884 30d5 	strb.w	r3, [r4, #213]	@ 0xd5
		CanTx_SigSet_0x3AC_AC_2_AUTOPassengerButtonSts(GetGW_BD_14Value(AC_2_AUTOPassengerButtonSts));
 8002020:	2014      	movs	r0, #20
 8002022:	f004 faff 	bl	8006624 <GetGW_BD_14Value>
 8002026:	f894 30d5 	ldrb.w	r3, [r4, #213]	@ 0xd5
 800202a:	f360 03c3 	bfi	r3, r0, #3, #1
 800202e:	f884 30d5 	strb.w	r3, [r4, #213]	@ 0xd5
		CanTx_SigSet_0x3AC_AC_2_Timeout_Flag(GetGW_BD_14Value(AC_2_Timeout_Flag));
 8002032:	2016      	movs	r0, #22
 8002034:	f004 faf6 	bl	8006624 <GetGW_BD_14Value>
 8002038:	f894 30d7 	ldrb.w	r3, [r4, #215]	@ 0xd7
 800203c:	f360 0341 	bfi	r3, r0, #1, #1
 8002040:	f884 30d7 	strb.w	r3, [r4, #215]	@ 0xd7
		CanTx_SigSet_0x3AC_AC_1_Timeout_Flag(GetGW_BD_14Value(AC_1_Timeout_Flag));
 8002044:	2015      	movs	r0, #21
 8002046:	f004 faed 	bl	8006624 <GetGW_BD_14Value>
 800204a:	f894 30d7 	ldrb.w	r3, [r4, #215]	@ 0xd7
 800204e:	f360 0300 	bfi	r3, r0, #0, #1
 8002052:	f884 30d7 	strb.w	r3, [r4, #215]	@ 0xd7

		//GW_BD_24
		CanTx_SigSet_0x3C7_BCM_2_WindowRunningStatusRR(GetGW_BD_24Value(BCM_2_WindowRunningStatusRR));
 8002056:	2000      	movs	r0, #0
 8002058:	f004 faf6 	bl	8006648 <GetGW_BD_24Value>
 800205c:	f894 30d8 	ldrb.w	r3, [r4, #216]	@ 0xd8
 8002060:	f360 1387 	bfi	r3, r0, #6, #2
 8002064:	f884 30d8 	strb.w	r3, [r4, #216]	@ 0xd8
		CanTx_SigSet_0x3C7_BCM_2_WindowRunningStatusRL(GetGW_BD_24Value(BCM_2_WindowRunningStatusRL));
 8002068:	2001      	movs	r0, #1
 800206a:	f004 faed 	bl	8006648 <GetGW_BD_24Value>
 800206e:	f894 30d8 	ldrb.w	r3, [r4, #216]	@ 0xd8
 8002072:	f360 1305 	bfi	r3, r0, #4, #2
 8002076:	f884 30d8 	strb.w	r3, [r4, #216]	@ 0xd8
		CanTx_SigSet_0x3C7_BCM_2_WindowRunningStatusFR(GetGW_BD_24Value(BCM_2_WindowRunningStatusFR));
 800207a:	2002      	movs	r0, #2
 800207c:	f004 fae4 	bl	8006648 <GetGW_BD_24Value>
 8002080:	f894 30d8 	ldrb.w	r3, [r4, #216]	@ 0xd8
 8002084:	f360 0383 	bfi	r3, r0, #2, #2
 8002088:	f884 30d8 	strb.w	r3, [r4, #216]	@ 0xd8
		CanTx_SigSet_0x3C7_BCM_2_WindowRunningStatusFL(GetGW_BD_24Value(BCM_2_WindowRunningStatusFL));
 800208c:	2003      	movs	r0, #3
 800208e:	f004 fadb 	bl	8006648 <GetGW_BD_24Value>
 8002092:	f894 30d8 	ldrb.w	r3, [r4, #216]	@ 0xd8
 8002096:	f360 0301 	bfi	r3, r0, #0, #2
 800209a:	f884 30d8 	strb.w	r3, [r4, #216]	@ 0xd8
		CanTx_SigSet_0x3C7_BCM_2_WindowPosFL(GetGW_BD_24Value(BCM_2_WindowPosFL));
 800209e:	2004      	movs	r0, #4
 80020a0:	f004 fad2 	bl	8006648 <GetGW_BD_24Value>
 80020a4:	f894 30d9 	ldrb.w	r3, [r4, #217]	@ 0xd9
 80020a8:	f360 0306 	bfi	r3, r0, #0, #7
 80020ac:	f884 30d9 	strb.w	r3, [r4, #217]	@ 0xd9
		CanTx_SigSet_0x3C7_BCM_2_WindowPosFR(GetGW_BD_24Value(BCM_2_WindowPosFR));
 80020b0:	2005      	movs	r0, #5
 80020b2:	f004 fac9 	bl	8006648 <GetGW_BD_24Value>
 80020b6:	f894 30da 	ldrb.w	r3, [r4, #218]	@ 0xda
 80020ba:	f360 0306 	bfi	r3, r0, #0, #7
 80020be:	f884 30da 	strb.w	r3, [r4, #218]	@ 0xda
		CanTx_SigSet_0x3C7_BCM_2_WindowPosRL(GetGW_BD_24Value(BCM_2_WindowPosRL));
 80020c2:	2006      	movs	r0, #6
 80020c4:	f004 fac0 	bl	8006648 <GetGW_BD_24Value>
 80020c8:	f894 30db 	ldrb.w	r3, [r4, #219]	@ 0xdb
 80020cc:	f360 0306 	bfi	r3, r0, #0, #7
 80020d0:	f884 30db 	strb.w	r3, [r4, #219]	@ 0xdb
		CanTx_SigSet_0x3C7_BCM_2_WindowPosRR(GetGW_BD_24Value(BCM_2_WindowPosRR));
 80020d4:	2007      	movs	r0, #7
 80020d6:	f004 fab7 	bl	8006648 <GetGW_BD_24Value>
 80020da:	f894 30dc 	ldrb.w	r3, [r4, #220]	@ 0xdc
 80020de:	f360 0306 	bfi	r3, r0, #0, #7
 80020e2:	f884 30dc 	strb.w	r3, [r4, #220]	@ 0xdc
		CanTx_SigSet_0x3C7_BCM_2_Timeout_Flag(GetGW_BD_24Value(BCM_2_Timeout_Flag));
 80020e6:	2008      	movs	r0, #8
 80020e8:	f004 faae 	bl	8006648 <GetGW_BD_24Value>
 80020ec:	f894 30df 	ldrb.w	r3, [r4, #223]	@ 0xdf
 80020f0:	f360 0300 	bfi	r3, r0, #0, #1
 80020f4:	f884 30df 	strb.w	r3, [r4, #223]	@ 0xdf

		//GW_BD_29
		CanTx_SigSet_0x3CC_SCU_1_FLSeatHeatLvlSts(GetGW_BD_29Value(SCU_1_FLSeatHeatLvlSts));
 80020f8:	2000      	movs	r0, #0
 80020fa:	f004 fab7 	bl	800666c <GetGW_BD_29Value>
 80020fe:	f894 30e0 	ldrb.w	r3, [r4, #224]	@ 0xe0
 8002102:	f360 0303 	bfi	r3, r0, #0, #4
 8002106:	f884 30e0 	strb.w	r3, [r4, #224]	@ 0xe0
		CanTx_SigSet_0x3CC_SCU_1_FRSeatHeatLvlSts(GetGW_BD_29Value(SCU_1_FRSeatHeatLvlSts));
 800210a:	2001      	movs	r0, #1
 800210c:	f004 faae 	bl	800666c <GetGW_BD_29Value>
 8002110:	f894 30e0 	ldrb.w	r3, [r4, #224]	@ 0xe0
 8002114:	f360 1307 	bfi	r3, r0, #4, #4
 8002118:	f884 30e0 	strb.w	r3, [r4, #224]	@ 0xe0
		CanTx_SigSet_0x3CC_SCU_1_FLSeatMassgLvlSts(GetGW_BD_29Value(SCU_1_FLSeatMassgLvlSts));
 800211c:	2002      	movs	r0, #2
 800211e:	f004 faa5 	bl	800666c <GetGW_BD_29Value>
 8002122:	f894 30e1 	ldrb.w	r3, [r4, #225]	@ 0xe1
 8002126:	f360 0302 	bfi	r3, r0, #0, #3
 800212a:	f884 30e1 	strb.w	r3, [r4, #225]	@ 0xe1
		CanTx_SigSet_0x3CC_SCU_1_FLSeatMassgModSts(GetGW_BD_29Value(SCU_1_FLSeatMassgModSts));
 800212e:	2003      	movs	r0, #3
 8002130:	f004 fa9c 	bl	800666c <GetGW_BD_29Value>
 8002134:	f894 30e1 	ldrb.w	r3, [r4, #225]	@ 0xe1
 8002138:	f360 1307 	bfi	r3, r0, #4, #4
 800213c:	f884 30e1 	strb.w	r3, [r4, #225]	@ 0xe1
		CanTx_SigSet_0x3CC_WCM_1_WirelessChargeSwtSts(GetGW_BD_29Value(WCM_1_WirelessChargeSwtSts));
 8002140:	2004      	movs	r0, #4
 8002142:	f004 fa93 	bl	800666c <GetGW_BD_29Value>
 8002146:	f894 30e3 	ldrb.w	r3, [r4, #227]	@ 0xe3
 800214a:	f360 1387 	bfi	r3, r0, #6, #2
 800214e:	f884 30e3 	strb.w	r3, [r4, #227]	@ 0xe3
		CanTx_SigSet_0x3CC_WCM_1_ChargingSts(GetGW_BD_29Value(WCM_1_ChargingSts));
 8002152:	2005      	movs	r0, #5
 8002154:	f004 fa8a 	bl	800666c <GetGW_BD_29Value>
 8002158:	f894 30e3 	ldrb.w	r3, [r4, #227]	@ 0xe3
 800215c:	f360 0301 	bfi	r3, r0, #0, #2
 8002160:	f884 30e3 	strb.w	r3, [r4, #227]	@ 0xe3
		CanTx_SigSet_0x3CC_WCM_1_FailureSts(GetGW_BD_29Value(WCM_1_FailureSts));
 8002164:	2006      	movs	r0, #6
 8002166:	f004 fa81 	bl	800666c <GetGW_BD_29Value>
 800216a:	f894 30e3 	ldrb.w	r3, [r4, #227]	@ 0xe3
 800216e:	f360 03c5 	bfi	r3, r0, #3, #3
 8002172:	f884 30e3 	strb.w	r3, [r4, #227]	@ 0xe3
		CanTx_SigSet_0x3CC_EPM_1_EPMModSts(GetGW_BD_29Value(EPM_1_EPMModSts));
 8002176:	2007      	movs	r0, #7
 8002178:	f004 fa78 	bl	800666c <GetGW_BD_29Value>
 800217c:	f894 30e4 	ldrb.w	r3, [r4, #228]	@ 0xe4
 8002180:	f360 0342 	bfi	r3, r0, #1, #2
 8002184:	f884 30e4 	strb.w	r3, [r4, #228]	@ 0xe4
		CanTx_SigSet_0x3CC_SCU_1_FaultsStatus(GetGW_BD_29Value(SCU_1_FaultsStatus));
 8002188:	2008      	movs	r0, #8
 800218a:	f004 fa6f 	bl	800666c <GetGW_BD_29Value>
 800218e:	f884 00e2 	strb.w	r0, [r4, #226]	@ 0xe2
		CanTx_SigSet_0x3CC_SCU_1_FLSeatVentLvlSts(GetGW_BD_29Value(SCU_1_FLSeatVentLvlSts));
 8002192:	2009      	movs	r0, #9
 8002194:	f004 fa6a 	bl	800666c <GetGW_BD_29Value>
 8002198:	f894 30e4 	ldrb.w	r3, [r4, #228]	@ 0xe4
 800219c:	f360 1307 	bfi	r3, r0, #4, #4
 80021a0:	f884 30e4 	strb.w	r3, [r4, #228]	@ 0xe4
		CanTx_SigSet_0x3CC_WCM_1_PhoneReminder(GetGW_BD_29Value(WCM_1_PhoneReminder));
 80021a4:	200a      	movs	r0, #10
 80021a6:	f004 fa61 	bl	800666c <GetGW_BD_29Value>
 80021aa:	f894 30e4 	ldrb.w	r3, [r4, #228]	@ 0xe4
 80021ae:	f360 0300 	bfi	r3, r0, #0, #1
 80021b2:	f884 30e4 	strb.w	r3, [r4, #228]	@ 0xe4
		CanTx_SigSet_0x3CC_SCU_1_FRSeatVentLvlSts(GetGW_BD_29Value(SCU_1_FRSeatVentLvlSts));
 80021b6:	200b      	movs	r0, #11
 80021b8:	f004 fa58 	bl	800666c <GetGW_BD_29Value>
 80021bc:	f894 30e5 	ldrb.w	r3, [r4, #229]	@ 0xe5
 80021c0:	f360 1307 	bfi	r3, r0, #4, #4
 80021c4:	f884 30e5 	strb.w	r3, [r4, #229]	@ 0xe5
		CanTx_SigSet_0x3CC_EPM_1_Timeout_Flag(GetGW_BD_29Value(EPM_1_Timeout_Flag));
 80021c8:	200c      	movs	r0, #12
 80021ca:	f004 fa4f 	bl	800666c <GetGW_BD_29Value>
 80021ce:	f894 30e7 	ldrb.w	r3, [r4, #231]	@ 0xe7
 80021d2:	f360 0382 	bfi	r3, r0, #2, #1
 80021d6:	f884 30e7 	strb.w	r3, [r4, #231]	@ 0xe7
		CanTx_SigSet_0x3CC_WCM_1_Timeout_Flag(GetGW_BD_29Value(WCM_1_Timeout_Flag));
 80021da:	200d      	movs	r0, #13
 80021dc:	f004 fa46 	bl	800666c <GetGW_BD_29Value>
 80021e0:	f894 30e7 	ldrb.w	r3, [r4, #231]	@ 0xe7
 80021e4:	f360 0341 	bfi	r3, r0, #1, #1
 80021e8:	f884 30e7 	strb.w	r3, [r4, #231]	@ 0xe7
		CanTx_SigSet_0x3CC_SCU_1_Timeout_Flag(GetGW_BD_29Value(SCU_1_Timeout_Flag));
 80021ec:	200e      	movs	r0, #14
 80021ee:	f004 fa3d 	bl	800666c <GetGW_BD_29Value>
 80021f2:	f894 30e7 	ldrb.w	r3, [r4, #231]	@ 0xe7
 80021f6:	f360 0300 	bfi	r3, r0, #0, #1
 80021fa:	f884 30e7 	strb.w	r3, [r4, #231]	@ 0xe7
	    //F14



	}
}
 80021fe:	bd10      	pop	{r4, pc}
		CanTx_SigSet_0x250_ABS_3_VehicleSpeed(GetF1Value(F1_ABS_3_VehicleSpeed));
 8002200:	2000      	movs	r0, #0
 8002202:	f004 fafd 	bl	8006800 <GetF1Value>
 8002206:	4cfd      	ldr	r4, [pc, #1012]	@ (80025fc <CanGetMsgSignal+0x14c0>)
 8002208:	f884 00b3 	strb.w	r0, [r4, #179]	@ 0xb3
 800220c:	2000      	movs	r0, #0
 800220e:	f004 faf7 	bl	8006800 <GetF1Value>
 8002212:	f3c0 2004 	ubfx	r0, r0, #8, #5
 8002216:	f894 30b2 	ldrb.w	r3, [r4, #178]	@ 0xb2
 800221a:	f360 0304 	bfi	r3, r0, #0, #5
 800221e:	f884 30b2 	strb.w	r3, [r4, #178]	@ 0xb2
		CanTx_SigSet_0x250_ABS_3_VehicleSpeedValid(GetF1Value(F1_ABS_3_VehicleSpeedValid));
 8002222:	2001      	movs	r0, #1
 8002224:	f004 faec 	bl	8006800 <GetF1Value>
 8002228:	f894 30b2 	ldrb.w	r3, [r4, #178]	@ 0xb2
 800222c:	f360 1386 	bfi	r3, r0, #6, #1
 8002230:	f884 30b2 	strb.w	r3, [r4, #178]	@ 0xb2
		CanTx_SigSet_0x250_ABS_3_Timeout_Flag(GetF1Value(F1_ABS_3_Timeout_Flag));
 8002234:	2002      	movs	r0, #2
 8002236:	f004 fae3 	bl	8006800 <GetF1Value>
 800223a:	f894 30b7 	ldrb.w	r3, [r4, #183]	@ 0xb7
 800223e:	f360 0382 	bfi	r3, r0, #2, #1
 8002242:	f884 30b7 	strb.w	r3, [r4, #183]	@ 0xb7
		CanTx_SigSet_0x150_EMS_2_EngineSpeed(GetF2Value(F2_EMS_2_EngineSpeed));
 8002246:	2000      	movs	r0, #0
 8002248:	f004 faf8 	bl	800683c <GetF2Value>
 800224c:	f884 00a1 	strb.w	r0, [r4, #161]	@ 0xa1
 8002250:	2000      	movs	r0, #0
 8002252:	f004 faf3 	bl	800683c <GetF2Value>
 8002256:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800225a:	f884 00a0 	strb.w	r0, [r4, #160]	@ 0xa0
		CanTx_SigSet_0x150_EMS_2_EngineSpeedValid(GetF2Value(F2_EMS_2_EngineSpeedValid));
 800225e:	2001      	movs	r0, #1
 8002260:	f004 faec 	bl	800683c <GetF2Value>
 8002264:	f894 30a2 	ldrb.w	r3, [r4, #162]	@ 0xa2
 8002268:	f360 0300 	bfi	r3, r0, #0, #1
 800226c:	f884 30a2 	strb.w	r3, [r4, #162]	@ 0xa2
		CanTx_SigSet_0x150_EMS_2_Timeout_Flag(GetF2Value(EMS_2_Timeout_Flag));
 8002270:	2002      	movs	r0, #2
 8002272:	f004 fae3 	bl	800683c <GetF2Value>
 8002276:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 800227a:	f360 0300 	bfi	r3, r0, #0, #1
 800227e:	f884 30a7 	strb.w	r3, [r4, #167]	@ 0xa7
		CanTx_SigSet_0x155_EMS_4_EngineCoolantTemp(GetF4Value(EMS_4_EngineCoolantTemp));
 8002282:	2000      	movs	r0, #0
 8002284:	f004 faee 	bl	8006864 <GetF4Value>
 8002288:	f884 00a8 	strb.w	r0, [r4, #168]	@ 0xa8
		CanTx_SigSet_0x155_EMS_4_EngineCoolantTempValid(GetF4Value(EMS_4_EngineCoolantTempValid));
 800228c:	2001      	movs	r0, #1
 800228e:	f004 fae9 	bl	8006864 <GetF4Value>
 8002292:	f894 30aa 	ldrb.w	r3, [r4, #170]	@ 0xaa
 8002296:	f360 1386 	bfi	r3, r0, #6, #1
 800229a:	f884 30aa 	strb.w	r3, [r4, #170]	@ 0xaa
		CanTx_SigSet_0x155_EMS_4_Timeout_Flag(GetF4Value(EMS_4_Timeout_Flag));
 800229e:	2002      	movs	r0, #2
 80022a0:	f004 fae0 	bl	8006864 <GetF4Value>
 80022a4:	f894 30af 	ldrb.w	r3, [r4, #175]	@ 0xaf
 80022a8:	f360 0300 	bfi	r3, r0, #0, #1
 80022ac:	f884 30af 	strb.w	r3, [r4, #175]	@ 0xaf
		CanTx_SigSet_0x155_EMS_4_FuelConsumption(GetF6Value(EMS_4_FuelConsumption));
 80022b0:	2006      	movs	r0, #6
 80022b2:	f004 fae7 	bl	8006884 <GetF6Value>
 80022b6:	f884 00a9 	strb.w	r0, [r4, #169]	@ 0xa9
		CanTx_SigSet_0x365_TPMS_SystemStatus(GetF8Value(TPMS_SystemStatus));
 80022ba:	2000      	movs	r0, #0
 80022bc:	f004 faf4 	bl	80068a8 <GetF8Value>
 80022c0:	f894 3020 	ldrb.w	r3, [r4, #32]
 80022c4:	f360 0301 	bfi	r3, r0, #0, #2
 80022c8:	f884 3020 	strb.w	r3, [r4, #32]
		CanTx_SigSet_0x365_TPMS_TireID(GetF8Value(F8_TPMS_TireID));
 80022cc:	2001      	movs	r0, #1
 80022ce:	f004 faeb 	bl	80068a8 <GetF8Value>
 80022d2:	f894 3020 	ldrb.w	r3, [r4, #32]
 80022d6:	f360 0383 	bfi	r3, r0, #2, #2
 80022da:	f884 3020 	strb.w	r3, [r4, #32]
	    CanTx_SigSet_0x365_TPMS_SensorLost(GetF8Value(F8_TPMS_SensorLost));
 80022de:	2002      	movs	r0, #2
 80022e0:	f004 fae2 	bl	80068a8 <GetF8Value>
 80022e4:	f894 3020 	ldrb.w	r3, [r4, #32]
 80022e8:	f360 1304 	bfi	r3, r0, #4, #1
 80022ec:	f884 3020 	strb.w	r3, [r4, #32]
	    CanTx_SigSet_0x365_TPMS_TireLeakage(GetF8Value(F8_TPMS_TireLeakage));
 80022f0:	2003      	movs	r0, #3
 80022f2:	f004 fad9 	bl	80068a8 <GetF8Value>
 80022f6:	f894 3020 	ldrb.w	r3, [r4, #32]
 80022fa:	f360 1345 	bfi	r3, r0, #5, #1
 80022fe:	f884 3020 	strb.w	r3, [r4, #32]
		CanTx_SigSet_0x365_TPMS_LearningStatus(GetF8Value(F8_TPMS_LearningStatus));
 8002302:	2004      	movs	r0, #4
 8002304:	f004 fad0 	bl	80068a8 <GetF8Value>
 8002308:	f894 3020 	ldrb.w	r3, [r4, #32]
 800230c:	f360 1387 	bfi	r3, r0, #6, #2
 8002310:	f884 3020 	strb.w	r3, [r4, #32]
		CanTx_SigSet_0x365_TPMS_TirePressureStatus(GetF8Value(F8_TPMS_TirePressureStatus));
 8002314:	2005      	movs	r0, #5
 8002316:	f004 fac7 	bl	80068a8 <GetF8Value>
 800231a:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 800231e:	f360 1305 	bfi	r3, r0, #4, #2
 8002322:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
		CanTx_SigSet_0x365_TPMS_TirePressure(GetF8Value(F8_TPMS_TirePressure));
 8002326:	2006      	movs	r0, #6
 8002328:	f004 fabe 	bl	80068a8 <GetF8Value>
 800232c:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
		CanTx_SigSet_0x3A7_BCM_1_FrontLeftDoorSts(GetF9Value(F9_BCM_1_FrontLeftDoorSts));
 8002330:	2000      	movs	r0, #0
 8002332:	f004 facb 	bl	80068cc <GetF9Value>
 8002336:	f894 30ca 	ldrb.w	r3, [r4, #202]	@ 0xca
 800233a:	f360 1345 	bfi	r3, r0, #5, #1
 800233e:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
		CanTx_SigSet_0x3A7_BCM_1_FrontRightDoorSts(GetF9Value(F9_BCM_1_FrontRightDoorSts));
 8002342:	2001      	movs	r0, #1
 8002344:	f004 fac2 	bl	80068cc <GetF9Value>
 8002348:	f894 30ca 	ldrb.w	r3, [r4, #202]	@ 0xca
 800234c:	f360 1386 	bfi	r3, r0, #6, #1
 8002350:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
	    CanTx_SigSet_0x3A7_BCM_1_RearLeftDoorSts(GetF9Value(F9_BCM_1_RearLeftDoorSts));
 8002354:	2002      	movs	r0, #2
 8002356:	f004 fab9 	bl	80068cc <GetF9Value>
 800235a:	f894 30ca 	ldrb.w	r3, [r4, #202]	@ 0xca
 800235e:	f360 13c7 	bfi	r3, r0, #7, #1
 8002362:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
		CanTx_SigSet_0x3A7_BCM_1_RearRightDoorSts(GetF9Value(F9_BCM_1_RearRightDoorSts));
 8002366:	2003      	movs	r0, #3
 8002368:	f004 fab0 	bl	80068cc <GetF9Value>
 800236c:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 8002370:	f360 0300 	bfi	r3, r0, #0, #1
 8002374:	f884 30cb 	strb.w	r3, [r4, #203]	@ 0xcb
		CanTx_SigSet_0x3A7_BCM_1_TailGateOpenSts(GetF9Value(F9_BCM_1_TailGateOpenSts));
 8002378:	2004      	movs	r0, #4
 800237a:	f004 faa7 	bl	80068cc <GetF9Value>
 800237e:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 8002382:	f360 0341 	bfi	r3, r0, #1, #1
 8002386:	f884 30cb 	strb.w	r3, [r4, #203]	@ 0xcb
	    CanTx_SigSet_0x3A7_BCM_1_HoodSts(GetF9Value(F9_BCM_1_HoodSts));
 800238a:	2005      	movs	r0, #5
 800238c:	f004 fa9e 	bl	80068cc <GetF9Value>
 8002390:	f894 30cc 	ldrb.w	r3, [r4, #204]	@ 0xcc
 8002394:	f360 0300 	bfi	r3, r0, #0, #1
 8002398:	f884 30cc 	strb.w	r3, [r4, #204]	@ 0xcc
	    CanTx_SigSet_0x3A7_BCM_1_Timeout_Flag(GetF9Value(F9_BCM_1_Timeout_Flag));
 800239c:	2006      	movs	r0, #6
 800239e:	f004 fa95 	bl	80068cc <GetF9Value>
 80023a2:	f894 30cf 	ldrb.w	r3, [r4, #207]	@ 0xcf
 80023a6:	f360 0300 	bfi	r3, r0, #0, #1
 80023aa:	f884 30cf 	strb.w	r3, [r4, #207]	@ 0xcf
	    CanTx_SigSet_0x155_TCU_3_TargetGearValid(GetF10Value(TCU_3_TargetGearValid));
 80023ae:	2001      	movs	r0, #1
 80023b0:	f004 fa96 	bl	80068e0 <GetF10Value>
 80023b4:	f894 30ab 	ldrb.w	r3, [r4, #171]	@ 0xab
 80023b8:	f360 1386 	bfi	r3, r0, #6, #1
 80023bc:	f884 30ab 	strb.w	r3, [r4, #171]	@ 0xab
		CanTx_SigSet_0x155_TCU_3_TargetGear(GetF10Value(TCU_3_TargetGear));
 80023c0:	2000      	movs	r0, #0
 80023c2:	f004 fa8d 	bl	80068e0 <GetF10Value>
 80023c6:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80023ca:	f360 1307 	bfi	r3, r0, #4, #4
 80023ce:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
		CanTx_SigSet_0x150_TCU_1_GearShiftPositionValid(GetF10Value(F10_TCU_1_GearShiftPositionValid));
 80023d2:	2003      	movs	r0, #3
 80023d4:	f004 fa84 	bl	80068e0 <GetF10Value>
 80023d8:	f894 30a4 	ldrb.w	r3, [r4, #164]	@ 0xa4
 80023dc:	f360 0300 	bfi	r3, r0, #0, #1
 80023e0:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
		CanTx_SigSet_0x150_TCU_1_GearShiftPosition(GetF10Value(F10_TCU_1_GearShiftPosition));
 80023e4:	2002      	movs	r0, #2
 80023e6:	f004 fa7b 	bl	80068e0 <GetF10Value>
 80023ea:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 80023ee:	f360 1307 	bfi	r3, r0, #4, #4
 80023f2:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
		CanTx_SigSet_0x155_TCU_3_Timeout_Flag1(GetF10Value(F10_TCU_3_Timeout_Flag1));
 80023f6:	2005      	movs	r0, #5
 80023f8:	f004 fa72 	bl	80068e0 <GetF10Value>
 80023fc:	f894 30af 	ldrb.w	r3, [r4, #175]	@ 0xaf
 8002400:	f360 0382 	bfi	r3, r0, #2, #1
 8002404:	f884 30af 	strb.w	r3, [r4, #175]	@ 0xaf
		CanTx_SigSet_0x150_TCU_1_Timeout_Flag(GetF10Value(F10_TCU_1_Timeout_Flag));
 8002408:	2004      	movs	r0, #4
 800240a:	f004 fa69 	bl	80068e0 <GetF10Value>
 800240e:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 8002412:	f360 0382 	bfi	r3, r0, #2, #1
 8002416:	f884 30a7 	strb.w	r3, [r4, #167]	@ 0xa7
		CanTx_SigSet_0x255_EDL_1_RearDiffLockGreenLamp(GetF11Value(F11_EDL_1_RearDiffLockGreenLamp));
 800241a:	2000      	movs	r0, #0
 800241c:	f004 fa6a 	bl	80068f4 <GetF11Value>
 8002420:	f894 30bb 	ldrb.w	r3, [r4, #187]	@ 0xbb
 8002424:	f360 0301 	bfi	r3, r0, #0, #2
 8002428:	f884 30bb 	strb.w	r3, [r4, #187]	@ 0xbb
		CanTx_SigSet_0x255_EDL_1_RearDiffLockYellowLamp(GetF11Value(F11_EDL_1_RearDiffLockYellowLamp));
 800242c:	2001      	movs	r0, #1
 800242e:	f004 fa61 	bl	80068f4 <GetF11Value>
 8002432:	f894 30bb 	ldrb.w	r3, [r4, #187]	@ 0xbb
 8002436:	f360 0383 	bfi	r3, r0, #2, #2
 800243a:	f884 30bb 	strb.w	r3, [r4, #187]	@ 0xbb
		CanTx_SigSet_0x255_EDL_1_FrontDiffLockGreenLamp(GetF11Value(F11_EDL_1_FrontDiffLockGreenLamp));
 800243e:	2002      	movs	r0, #2
 8002440:	f004 fa58 	bl	80068f4 <GetF11Value>
 8002444:	f894 30ba 	ldrb.w	r3, [r4, #186]	@ 0xba
 8002448:	f360 1305 	bfi	r3, r0, #4, #2
 800244c:	f884 30ba 	strb.w	r3, [r4, #186]	@ 0xba
		CanTx_SigSet_0x255_EDL_1_FrontDiffLockYellowLamp(GetF11Value(F11_EDL_1_FrontDiffLockYellowLamp));
 8002450:	2003      	movs	r0, #3
 8002452:	f004 fa4f 	bl	80068f4 <GetF11Value>
 8002456:	f894 30ba 	ldrb.w	r3, [r4, #186]	@ 0xba
 800245a:	f360 1387 	bfi	r3, r0, #6, #2
 800245e:	f884 30ba 	strb.w	r3, [r4, #186]	@ 0xba
		CanTx_SigSet_0x255_EDL_1_Timeout_Flag(GetF11Value(F11_EDL_1_Timeout_Flag));
 8002462:	2004      	movs	r0, #4
 8002464:	f004 fa46 	bl	80068f4 <GetF11Value>
 8002468:	f894 30bf 	ldrb.w	r3, [r4, #191]	@ 0xbf
 800246c:	f360 0341 	bfi	r3, r0, #1, #1
 8002470:	f884 30bf 	strb.w	r3, [r4, #191]	@ 0xbf
		CanTx_SigSet_0x3AC_AC_2_OutsideTemperatureValid(GetF12Value(F12_AC_2_OutsideTemperatureValid));
 8002474:	2000      	movs	r0, #0
 8002476:	f004 fa47 	bl	8006908 <GetF12Value>
 800247a:	f894 30d5 	ldrb.w	r3, [r4, #213]	@ 0xd5
 800247e:	f360 0300 	bfi	r3, r0, #0, #1
 8002482:	f884 30d5 	strb.w	r3, [r4, #213]	@ 0xd5
		CanTx_SigSet_0x3AC_AC_2_OutsideTemperature(GetF12Value(F12_AC_2_OutsideTemperature));
 8002486:	2001      	movs	r0, #1
 8002488:	f004 fa3e 	bl	8006908 <GetF12Value>
 800248c:	f884 00d4 	strb.w	r0, [r4, #212]	@ 0xd4
		CanTx_SigSet_0x3AC_AC_2_Timeout_Flag(GetF12Value(F12_AC_2_Timeout_Flag));
 8002490:	2002      	movs	r0, #2
 8002492:	f004 fa39 	bl	8006908 <GetF12Value>
 8002496:	f894 30d7 	ldrb.w	r3, [r4, #215]	@ 0xd7
 800249a:	f360 0341 	bfi	r3, r0, #1, #1
 800249e:	f884 30d7 	strb.w	r3, [r4, #215]	@ 0xd7
	    CanTx_SigSet_0x304_FCM_EgoLeLineID(GetF13Value(F13_FCM_EgoLeLineID));
 80024a2:	2000      	movs	r0, #0
 80024a4:	f004 fa3a 	bl	800691c <GetF13Value>
 80024a8:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 80024ac:	f360 13c7 	bfi	r3, r0, #7, #1
 80024b0:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
	    CanTx_SigSet_0x304_FCM_EgoLeLineColor(GetF13Value(F13_FCM_EgoLeLineColor));
 80024b4:	2001      	movs	r0, #1
 80024b6:	f004 fa31 	bl	800691c <GetF13Value>
 80024ba:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 80024be:	f360 1346 	bfi	r3, r0, #5, #2
 80024c2:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
	    CanTx_SigSet_0x304_FCM_EgoLeLineTyp(GetF13Value(F13_FCM_EgoLeLineTyp));
 80024c6:	2002      	movs	r0, #2
 80024c8:	f004 fa28 	bl	800691c <GetF13Value>
 80024cc:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 80024d0:	f360 03c4 	bfi	r3, r0, #3, #2
 80024d4:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
	    CanTx_SigSet_0x304_FCM_EgoLeLineHozlDst(GetF13Value(F13_FCM_EgoLeLineHozlDst));
 80024d8:	2003      	movs	r0, #3
 80024da:	f004 fa1f 	bl	800691c <GetF13Value>
 80024de:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 80024e2:	f360 0387 	bfi	r3, r0, #2, #6
 80024e6:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
 80024ea:	2003      	movs	r0, #3
 80024ec:	f004 fa16 	bl	800691c <GetF13Value>
 80024f0:	f3c0 1082 	ubfx	r0, r0, #6, #3
 80024f4:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 80024f8:	f360 0302 	bfi	r3, r0, #0, #3
 80024fc:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
	    CanTx_SigSet_0x304_FCM_EgoLeLineCrvt(GetF13Value(F13_FCM_EgoLeLineCrvt));
 8002500:	2004      	movs	r0, #4
 8002502:	f004 fa0b 	bl	800691c <GetF13Value>
 8002506:	f884 0082 	strb.w	r0, [r4, #130]	@ 0x82
 800250a:	2004      	movs	r0, #4
 800250c:	f004 fa06 	bl	800691c <GetF13Value>
 8002510:	f3c0 2001 	ubfx	r0, r0, #8, #2
 8002514:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 8002518:	f360 0301 	bfi	r3, r0, #0, #2
 800251c:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
	    CanTx_SigSet_0x304_FCM_EgoRiLineID(GetF13Value(F13_FCM_EgoRiLineID));
 8002520:	2005      	movs	r0, #5
 8002522:	f004 f9fb 	bl	800691c <GetF13Value>
 8002526:	f894 3083 	ldrb.w	r3, [r4, #131]	@ 0x83
 800252a:	f360 13c7 	bfi	r3, r0, #7, #1
 800252e:	f884 3083 	strb.w	r3, [r4, #131]	@ 0x83
	    CanTx_SigSet_0x304_FCM_EgoRiLineColor(GetF13Value(F13_FCM_EgoRiLineColor));
 8002532:	2006      	movs	r0, #6
 8002534:	f004 f9f2 	bl	800691c <GetF13Value>
 8002538:	f894 3083 	ldrb.w	r3, [r4, #131]	@ 0x83
 800253c:	f360 1346 	bfi	r3, r0, #5, #2
 8002540:	f884 3083 	strb.w	r3, [r4, #131]	@ 0x83
	    CanTx_SigSet_0x304_FCM_EgoRiLineTyp(GetF13Value(F13_FCM_EgoRiLineTyp));
 8002544:	2007      	movs	r0, #7
 8002546:	f004 f9e9 	bl	800691c <GetF13Value>
 800254a:	f894 3083 	ldrb.w	r3, [r4, #131]	@ 0x83
 800254e:	f360 03c4 	bfi	r3, r0, #3, #2
 8002552:	f884 3083 	strb.w	r3, [r4, #131]	@ 0x83
	    CanTx_SigSet_0x304_FCM_EgoRiLineHozlDst(GetF13Value(F13_FCM_EgoRiLineHozlDst));
 8002556:	2008      	movs	r0, #8
 8002558:	f004 f9e0 	bl	800691c <GetF13Value>
 800255c:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 8002560:	f360 0387 	bfi	r3, r0, #2, #6
 8002564:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 8002568:	2008      	movs	r0, #8
 800256a:	f004 f9d7 	bl	800691c <GetF13Value>
 800256e:	f3c0 1082 	ubfx	r0, r0, #6, #3
 8002572:	f894 3083 	ldrb.w	r3, [r4, #131]	@ 0x83
 8002576:	f360 0302 	bfi	r3, r0, #0, #3
 800257a:	f884 3083 	strb.w	r3, [r4, #131]	@ 0x83
	    CanTx_SigSet_0x304_FCM_EgoRiLineCrvt(GetF13Value(F13_FCM_EgoRiLineCrvt));
 800257e:	2009      	movs	r0, #9
 8002580:	f004 f9cc 	bl	800691c <GetF13Value>
 8002584:	f884 0085 	strb.w	r0, [r4, #133]	@ 0x85
 8002588:	2009      	movs	r0, #9
 800258a:	f004 f9c7 	bl	800691c <GetF13Value>
 800258e:	f3c0 2001 	ubfx	r0, r0, #8, #2
 8002592:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 8002596:	f360 0301 	bfi	r3, r0, #0, #2
 800259a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
	    CanTx_SigSet_0x304_FCM_5_RollingCounter(GetF13Value(FCM_5_RollingCounter));
 800259e:	200a      	movs	r0, #10
 80025a0:	f004 f9bc 	bl	800691c <GetF13Value>
 80025a4:	f894 3086 	ldrb.w	r3, [r4, #134]	@ 0x86
 80025a8:	f360 0303 	bfi	r3, r0, #0, #4
 80025ac:	f884 3086 	strb.w	r3, [r4, #134]	@ 0x86
	    CanTx_SigSet_0x304_FCM_5_Checksum(GetF13Value(FCM_5_Checksum));
 80025b0:	200b      	movs	r0, #11
 80025b2:	f004 f9b3 	bl	800691c <GetF13Value>
 80025b6:	f884 0087 	strb.w	r0, [r4, #135]	@ 0x87
	    CanTx_SigSet_0x305_FCM_NeborLeLineID(GetF13Value(F13_FCM_NeborLeLineID));
 80025ba:	200c      	movs	r0, #12
 80025bc:	f004 f9ae 	bl	800691c <GetF13Value>
 80025c0:	f894 3088 	ldrb.w	r3, [r4, #136]	@ 0x88
 80025c4:	f360 13c7 	bfi	r3, r0, #7, #1
 80025c8:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
	    CanTx_SigSet_0x305_FCM_NeborLeLineColor(GetF13Value(F13_FCM_NeborLeLineColor));
 80025cc:	200d      	movs	r0, #13
 80025ce:	f004 f9a5 	bl	800691c <GetF13Value>
 80025d2:	f894 3088 	ldrb.w	r3, [r4, #136]	@ 0x88
 80025d6:	f360 1346 	bfi	r3, r0, #5, #2
 80025da:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
	    CanTx_SigSet_0x305_FCM_NeborLeLineTyp(GetF13Value(F13_FCM_NeborLeLineTyp));
 80025de:	200e      	movs	r0, #14
 80025e0:	f004 f99c 	bl	800691c <GetF13Value>
 80025e4:	f894 3088 	ldrb.w	r3, [r4, #136]	@ 0x88
 80025e8:	f360 03c4 	bfi	r3, r0, #3, #2
 80025ec:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
	    CanTx_SigSet_0x305_FCM_NeborLeLineHozlDst(GetF13Value(F13_FCM_NeborLeLineHozlDst));
 80025f0:	200f      	movs	r0, #15
 80025f2:	f004 f993 	bl	800691c <GetF13Value>
 80025f6:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 80025fa:	e001      	b.n	8002600 <CanGetMsgSignal+0x14c4>
 80025fc:	200046d4 	.word	0x200046d4
 8002600:	f360 0387 	bfi	r3, r0, #2, #6
 8002604:	f884 3089 	strb.w	r3, [r4, #137]	@ 0x89
 8002608:	200f      	movs	r0, #15
 800260a:	f004 f987 	bl	800691c <GetF13Value>
 800260e:	f3c0 1082 	ubfx	r0, r0, #6, #3
 8002612:	f894 3088 	ldrb.w	r3, [r4, #136]	@ 0x88
 8002616:	f360 0302 	bfi	r3, r0, #0, #3
 800261a:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
	    CanTx_SigSet_0x305_FCM_NeborLeLineCrvt(GetF13Value(F13_FCM_NeborLeLineCrvt));
 800261e:	2010      	movs	r0, #16
 8002620:	f004 f97c 	bl	800691c <GetF13Value>
 8002624:	f884 008a 	strb.w	r0, [r4, #138]	@ 0x8a
 8002628:	2010      	movs	r0, #16
 800262a:	f004 f977 	bl	800691c <GetF13Value>
 800262e:	f3c0 2001 	ubfx	r0, r0, #8, #2
 8002632:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 8002636:	f360 0301 	bfi	r3, r0, #0, #2
 800263a:	f884 3089 	strb.w	r3, [r4, #137]	@ 0x89
	    CanTx_SigSet_0x305_FCM_NeborRiLineID(GetF13Value(F13_FCM_NeborRiLineID));
 800263e:	2011      	movs	r0, #17
 8002640:	f004 f96c 	bl	800691c <GetF13Value>
 8002644:	f894 308b 	ldrb.w	r3, [r4, #139]	@ 0x8b
 8002648:	f360 13c7 	bfi	r3, r0, #7, #1
 800264c:	f884 308b 	strb.w	r3, [r4, #139]	@ 0x8b
	    CanTx_SigSet_0x305_FCM_NeborRiLineColor(GetF13Value(F13_FCM_NeborRiLineColor));
 8002650:	2012      	movs	r0, #18
 8002652:	f004 f963 	bl	800691c <GetF13Value>
 8002656:	f894 308b 	ldrb.w	r3, [r4, #139]	@ 0x8b
 800265a:	f360 1346 	bfi	r3, r0, #5, #2
 800265e:	f884 308b 	strb.w	r3, [r4, #139]	@ 0x8b
	    CanTx_SigSet_0x305_FCM_NeborRiLineTyp(GetF13Value(F13_FCM_NeborRiLineTyp));
 8002662:	2013      	movs	r0, #19
 8002664:	f004 f95a 	bl	800691c <GetF13Value>
 8002668:	f894 308b 	ldrb.w	r3, [r4, #139]	@ 0x8b
 800266c:	f360 03c4 	bfi	r3, r0, #3, #2
 8002670:	f884 308b 	strb.w	r3, [r4, #139]	@ 0x8b
	    CanTx_SigSet_0x305_FCM_NeborRiLineHozlDst(GetF13Value(F13_FCM_NeborRiLineHozlDst));
 8002674:	2014      	movs	r0, #20
 8002676:	f004 f951 	bl	800691c <GetF13Value>
 800267a:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 800267e:	f360 0387 	bfi	r3, r0, #2, #6
 8002682:	f884 308c 	strb.w	r3, [r4, #140]	@ 0x8c
 8002686:	2014      	movs	r0, #20
 8002688:	f004 f948 	bl	800691c <GetF13Value>
 800268c:	f3c0 1082 	ubfx	r0, r0, #6, #3
 8002690:	f894 308b 	ldrb.w	r3, [r4, #139]	@ 0x8b
 8002694:	f360 0302 	bfi	r3, r0, #0, #3
 8002698:	f884 308b 	strb.w	r3, [r4, #139]	@ 0x8b
	    CanTx_SigSet_0x305_FCM_NeborRiLineCrvt(GetF13Value(F13_FCM_NeborRiLineCrvt));
 800269c:	2015      	movs	r0, #21
 800269e:	f004 f93d 	bl	800691c <GetF13Value>
 80026a2:	f884 008d 	strb.w	r0, [r4, #141]	@ 0x8d
 80026a6:	2015      	movs	r0, #21
 80026a8:	f004 f938 	bl	800691c <GetF13Value>
 80026ac:	f3c0 2001 	ubfx	r0, r0, #8, #2
 80026b0:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 80026b4:	f360 0301 	bfi	r3, r0, #0, #2
 80026b8:	f884 308c 	strb.w	r3, [r4, #140]	@ 0x8c
	    CanTx_SigSet_0x305_FCM_6_RollingCounter(GetF13Value(FCM_6_RollingCounter));
 80026bc:	2016      	movs	r0, #22
 80026be:	f004 f92d 	bl	800691c <GetF13Value>
 80026c2:	f894 308e 	ldrb.w	r3, [r4, #142]	@ 0x8e
 80026c6:	f360 0303 	bfi	r3, r0, #0, #4
 80026ca:	f884 308e 	strb.w	r3, [r4, #142]	@ 0x8e
	    CanTx_SigSet_0x305_FCM_6_Checksum(GetF13Value(FCM_6_Checksum));
 80026ce:	2017      	movs	r0, #23
 80026d0:	f004 f924 	bl	800691c <GetF13Value>
 80026d4:	f884 008f 	strb.w	r0, [r4, #143]	@ 0x8f
	    CanTx_SigSet_0x306_FCM_ACCObjID(GetF13Value(F13_FCM_ACCObjID));
 80026d8:	2018      	movs	r0, #24
 80026da:	f004 f91f 	bl	800691c <GetF13Value>
 80026de:	f894 3090 	ldrb.w	r3, [r4, #144]	@ 0x90
 80026e2:	f360 13c7 	bfi	r3, r0, #7, #1
 80026e6:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
	    CanTx_SigSet_0x306_FCM_ACCObjTyp(GetF13Value(F13_FCM_ACCObjTyp));
 80026ea:	2019      	movs	r0, #25
 80026ec:	f004 f916 	bl	800691c <GetF13Value>
 80026f0:	f894 3090 	ldrb.w	r3, [r4, #144]	@ 0x90
 80026f4:	f360 1306 	bfi	r3, r0, #4, #3
 80026f8:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
	    CanTx_SigSet_0x306_FCM_ACC_TargetVehicleSubType(GetF13Value(F13_FCM_ACC_TargetVehicleSubType));
 80026fc:	201a      	movs	r0, #26
 80026fe:	f004 f90d 	bl	800691c <GetF13Value>
 8002702:	f894 3090 	ldrb.w	r3, [r4, #144]	@ 0x90
 8002706:	f360 0343 	bfi	r3, r0, #1, #3
 800270a:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
	    CanTx_SigSet_0x306_FCM_dxTarObjcolor(GetF13Value(F13_FCM_dxTarObjcolor));
 800270e:	201b      	movs	r0, #27
 8002710:	f004 f904 	bl	800691c <GetF13Value>
 8002714:	f894 3091 	ldrb.w	r3, [r4, #145]	@ 0x91
 8002718:	f360 1347 	bfi	r3, r0, #5, #3
 800271c:	f884 3091 	strb.w	r3, [r4, #145]	@ 0x91
	    CanTx_SigSet_0x306_FCM_ACCObjLgtDstX(GetF13Value(F13_FCM_ACCObjLgtDstX));
 8002720:	201c      	movs	r0, #28
 8002722:	f004 f8fb 	bl	800691c <GetF13Value>
 8002726:	f894 3092 	ldrb.w	r3, [r4, #146]	@ 0x92
 800272a:	f360 1347 	bfi	r3, r0, #5, #3
 800272e:	f884 3092 	strb.w	r3, [r4, #146]	@ 0x92
 8002732:	201c      	movs	r0, #28
 8002734:	f004 f8f2 	bl	800691c <GetF13Value>
 8002738:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 800273c:	f894 3091 	ldrb.w	r3, [r4, #145]	@ 0x91
 8002740:	f360 0304 	bfi	r3, r0, #0, #5
 8002744:	f884 3091 	strb.w	r3, [r4, #145]	@ 0x91
	    CanTx_SigSet_0x306_FCM_ACCObjHozDstY(GetF13Value(F13_FCM_ACCObjHozDstY));
 8002748:	201d      	movs	r0, #29
 800274a:	f004 f8e7 	bl	800691c <GetF13Value>
 800274e:	f894 3093 	ldrb.w	r3, [r4, #147]	@ 0x93
 8002752:	f360 03c7 	bfi	r3, r0, #3, #5
 8002756:	f884 3093 	strb.w	r3, [r4, #147]	@ 0x93
 800275a:	201d      	movs	r0, #29
 800275c:	f004 f8de 	bl	800691c <GetF13Value>
 8002760:	f3c0 1044 	ubfx	r0, r0, #5, #5
 8002764:	f894 3092 	ldrb.w	r3, [r4, #146]	@ 0x92
 8002768:	f360 0304 	bfi	r3, r0, #0, #5
 800276c:	f884 3092 	strb.w	r3, [r4, #146]	@ 0x92
	    CanTx_SigSet_0x306_FCM_FrntFarObjID(GetF13Value(F13_FCM_FrntFarObjID));
 8002770:	201e      	movs	r0, #30
 8002772:	f004 f8d3 	bl	800691c <GetF13Value>
 8002776:	f894 3093 	ldrb.w	r3, [r4, #147]	@ 0x93
 800277a:	f360 0382 	bfi	r3, r0, #2, #1
 800277e:	f884 3093 	strb.w	r3, [r4, #147]	@ 0x93
	    CanTx_SigSet_0x306_FCM_FrntFarObjTyp(GetF13Value(F13_FCM_FrntFarObjTyp));
 8002782:	201f      	movs	r0, #31
 8002784:	f004 f8ca 	bl	800691c <GetF13Value>
 8002788:	f894 3094 	ldrb.w	r3, [r4, #148]	@ 0x94
 800278c:	f360 1387 	bfi	r3, r0, #6, #2
 8002790:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
 8002794:	201f      	movs	r0, #31
 8002796:	f004 f8c1 	bl	800691c <GetF13Value>
 800279a:	f3c0 0081 	ubfx	r0, r0, #2, #2
 800279e:	f894 3093 	ldrb.w	r3, [r4, #147]	@ 0x93
 80027a2:	f360 0301 	bfi	r3, r0, #0, #2
 80027a6:	f884 3093 	strb.w	r3, [r4, #147]	@ 0x93
	    CanTx_SigSet_0x306_FCM_FrntFarObjLgtDstX(GetF13Value(F13_FCM_FrntFarObjLgtDstX));
 80027aa:	2020      	movs	r0, #32
 80027ac:	f004 f8b6 	bl	800691c <GetF13Value>
 80027b0:	f894 3095 	ldrb.w	r3, [r4, #149]	@ 0x95
 80027b4:	f360 1387 	bfi	r3, r0, #6, #2
 80027b8:	f884 3095 	strb.w	r3, [r4, #149]	@ 0x95
 80027bc:	2020      	movs	r0, #32
 80027be:	f004 f8ad 	bl	800691c <GetF13Value>
 80027c2:	f3c0 0085 	ubfx	r0, r0, #2, #6
 80027c6:	f894 3094 	ldrb.w	r3, [r4, #148]	@ 0x94
 80027ca:	f360 0305 	bfi	r3, r0, #0, #6
 80027ce:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
	    CanTx_SigSet_0x306_FCM_FrntFarObjHozDstY(GetF13Value(F13_FCM_FrntFarObjHozDstY));
 80027d2:	2021      	movs	r0, #33	@ 0x21
 80027d4:	f004 f8a2 	bl	800691c <GetF13Value>
 80027d8:	f894 3096 	ldrb.w	r3, [r4, #150]	@ 0x96
 80027dc:	f360 1307 	bfi	r3, r0, #4, #4
 80027e0:	f884 3096 	strb.w	r3, [r4, #150]	@ 0x96
 80027e4:	2021      	movs	r0, #33	@ 0x21
 80027e6:	f004 f899 	bl	800691c <GetF13Value>
 80027ea:	f3c0 1005 	ubfx	r0, r0, #4, #6
 80027ee:	f894 3095 	ldrb.w	r3, [r4, #149]	@ 0x95
 80027f2:	f360 0305 	bfi	r3, r0, #0, #6
 80027f6:	f884 3095 	strb.w	r3, [r4, #149]	@ 0x95
	    CanTx_SigSet_0x306_FCM_7_RollingCounter(GetF13Value(FCM_7_RollingCounter));
 80027fa:	2022      	movs	r0, #34	@ 0x22
 80027fc:	f004 f88e 	bl	800691c <GetF13Value>
 8002800:	f894 3096 	ldrb.w	r3, [r4, #150]	@ 0x96
 8002804:	f360 0303 	bfi	r3, r0, #0, #4
 8002808:	f884 3096 	strb.w	r3, [r4, #150]	@ 0x96
	    CanTx_SigSet_0x306_FCM_7_Checksum(GetF13Value(FCM_7_Checksum));
 800280c:	2023      	movs	r0, #35	@ 0x23
 800280e:	f004 f885 	bl	800691c <GetF13Value>
 8002812:	f884 0097 	strb.w	r0, [r4, #151]	@ 0x97
	    CanTx_SigSet_0x307_FCM_RiObjID(GetF13Value(F13_FCM_RiObjID));
 8002816:	2024      	movs	r0, #36	@ 0x24
 8002818:	f004 f880 	bl	800691c <GetF13Value>
 800281c:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8002820:	f360 13c7 	bfi	r3, r0, #7, #1
 8002824:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
	    CanTx_SigSet_0x307_FCM_LeObjID(GetF13Value(F13_FCM_LeObjID));
 8002828:	2025      	movs	r0, #37	@ 0x25
 800282a:	f004 f877 	bl	800691c <GetF13Value>
 800282e:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8002832:	f360 1386 	bfi	r3, r0, #6, #1
 8002836:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
	    CanTx_SigSet_0x307_FCM_LeObjTyp(GetF13Value(F13_FCM_LeObjTyp));
 800283a:	2026      	movs	r0, #38	@ 0x26
 800283c:	f004 f86e 	bl	800691c <GetF13Value>
 8002840:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8002844:	f360 03c5 	bfi	r3, r0, #3, #3
 8002848:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
	    CanTx_SigSet_0x307_FCM_ACC_LeftTargetVehicleSubType(GetF13Value(F13_FCM_ACC_LeftTargetVehicleSubType));
 800284c:	2027      	movs	r0, #39	@ 0x27
 800284e:	f004 f865 	bl	800691c <GetF13Value>
 8002852:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8002856:	f360 0302 	bfi	r3, r0, #0, #3
 800285a:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
	    CanTx_SigSet_0x307_FCM_LeObjLgtDstX(GetF13Value(F13_FCM_LeObjLgtDstX));
 800285e:	2028      	movs	r0, #40	@ 0x28
 8002860:	f004 f85c 	bl	800691c <GetF13Value>
 8002864:	f884 0099 	strb.w	r0, [r4, #153]	@ 0x99
	    CanTx_SigSet_0x307_FCM_LeObjHozDstY(GetF13Value(F13_FCM_LeObjHozDstY));
 8002868:	2029      	movs	r0, #41	@ 0x29
 800286a:	f004 f857 	bl	800691c <GetF13Value>
 800286e:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
 8002872:	f360 1387 	bfi	r3, r0, #6, #2
 8002876:	f884 309b 	strb.w	r3, [r4, #155]	@ 0x9b
 800287a:	2029      	movs	r0, #41	@ 0x29
 800287c:	f004 f84e 	bl	800691c <GetF13Value>
 8002880:	f3c0 0087 	ubfx	r0, r0, #2, #8
 8002884:	f884 009a 	strb.w	r0, [r4, #154]	@ 0x9a
	    CanTx_SigSet_0x307_FCM_RiObjTyp(GetF13Value(F13_FCM_RiObjTyp));
 8002888:	202a      	movs	r0, #42	@ 0x2a
 800288a:	f004 f847 	bl	800691c <GetF13Value>
 800288e:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
 8002892:	f360 03c5 	bfi	r3, r0, #3, #3
 8002896:	f884 309b 	strb.w	r3, [r4, #155]	@ 0x9b
	    CanTx_SigSet_0x307_FCM_ACC_RightTargetVehicleSubTyp(GetF13Value(F13_FCM_ACC_RightTargetVehicleSubTyp));
 800289a:	202b      	movs	r0, #43	@ 0x2b
 800289c:	f004 f83e 	bl	800691c <GetF13Value>
 80028a0:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
 80028a4:	f360 0302 	bfi	r3, r0, #0, #3
 80028a8:	f884 309b 	strb.w	r3, [r4, #155]	@ 0x9b
	    CanTx_SigSet_0x307_FCM_RiObjLgtDstX(GetF13Value(F13_FCM_RiObjLgtDstX));
 80028ac:	202c      	movs	r0, #44	@ 0x2c
 80028ae:	f004 f835 	bl	800691c <GetF13Value>
 80028b2:	f884 009c 	strb.w	r0, [r4, #156]	@ 0x9c
	    CanTx_SigSet_0x307_FCM_RiObjHozDstY(GetF13Value(F13_FCM_RiObjHozDstY));
 80028b6:	202d      	movs	r0, #45	@ 0x2d
 80028b8:	f004 f830 	bl	800691c <GetF13Value>
 80028bc:	f894 309e 	ldrb.w	r3, [r4, #158]	@ 0x9e
 80028c0:	f360 1387 	bfi	r3, r0, #6, #2
 80028c4:	f884 309e 	strb.w	r3, [r4, #158]	@ 0x9e
 80028c8:	202d      	movs	r0, #45	@ 0x2d
 80028ca:	f004 f827 	bl	800691c <GetF13Value>
 80028ce:	f3c0 0087 	ubfx	r0, r0, #2, #8
 80028d2:	f884 009d 	strb.w	r0, [r4, #157]	@ 0x9d
	    CanTx_SigSet_0x307_FCM_8_RollingCounter(GetF13Value(FCM_8_RollingCounter));
 80028d6:	202e      	movs	r0, #46	@ 0x2e
 80028d8:	f004 f820 	bl	800691c <GetF13Value>
 80028dc:	f894 309e 	ldrb.w	r3, [r4, #158]	@ 0x9e
 80028e0:	f360 0303 	bfi	r3, r0, #0, #4
 80028e4:	f884 309e 	strb.w	r3, [r4, #158]	@ 0x9e
	    CanTx_SigSet_0x307_FCM_8_Checksum(GetF13Value(FCM_8_Checksum));
 80028e8:	202f      	movs	r0, #47	@ 0x2f
 80028ea:	f004 f817 	bl	800691c <GetF13Value>
 80028ee:	f884 009f 	strb.w	r0, [r4, #159]	@ 0x9f
}
 80028f2:	e484      	b.n	80021fe <CanGetMsgSignal+0x10c2>

080028f4 <CanTransmitFunction>:

void CanTransmitFunction(void const *pvParameters)
{
 80028f4:	b508      	push	{r3, lr}
	(void)pvParameters;
    printf("CanTransmitFunction\r\n");
 80028f6:	4805      	ldr	r0, [pc, #20]	@ (800290c <CanTransmitFunction+0x18>)
 80028f8:	f00b f808 	bl	800d90c <puts>
	for(;;)
	{
      CanGetMsgSignal();
 80028fc:	f7fe fc1e 	bl	800113c <CanGetMsgSignal>
      CanCcl_TickCntHnadler();
 8002900:	f009 fd22 	bl	800c348 <CanCcl_TickCntHnadler>
		// CanDbc_TxHandler();
		vTaskDelay(pdMS_TO_TICKS(5));
 8002904:	2005      	movs	r0, #5
 8002906:	f009 f945 	bl	800bb94 <vTaskDelay>
 800290a:	e7f7      	b.n	80028fc <CanTransmitFunction+0x8>
 800290c:	08011268 	.word	0x08011268

08002910 <volencode_polling>:
	}

}

void volencode_polling(uint8_t key_number)
{
 8002910:	b538      	push	{r3, r4, r5, lr}
 8002912:	4604      	mov	r4, r0

	int VolADValueFliter;
	static uint8_t count[KEY_MAX] = {0};
	static uint8_t lastcount[KEY_MAX] = {0};

    VolADValueFliter = ADC_GetResValue(stKeyValue[key_number].channel);
 8002914:	4b23      	ldr	r3, [pc, #140]	@ (80029a4 <volencode_polling+0x94>)
 8002916:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800291a:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 800291e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8002922:	f7fe fbb1 	bl	8001088 <ADC_GetResValue>

    if((stKeyValue[key_number].AdcValue < VolADValueFliter + VOL_ADVALUE_ERROR) && (stKeyValue[key_number].AdcValue > VolADValueFliter - VOL_ADVALUE_ERROR))
 8002926:	f100 0263 	add.w	r2, r0, #99	@ 0x63
 800292a:	886b      	ldrh	r3, [r5, #2]
 800292c:	429a      	cmp	r2, r3
 800292e:	db09      	blt.n	8002944 <volencode_polling+0x34>
 8002930:	3863      	subs	r0, #99	@ 0x63
 8002932:	4283      	cmp	r3, r0
 8002934:	db06      	blt.n	8002944 <volencode_polling+0x34>
    {
        stKeyValue[key_number].KeySts = PRESS;
 8002936:	2201      	movs	r2, #1
 8002938:	712a      	strb	r2, [r5, #4]
		count[key_number] += 1;
 800293a:	4a1b      	ldr	r2, [pc, #108]	@ (80029a8 <volencode_polling+0x98>)
 800293c:	5d13      	ldrb	r3, [r2, r4]
 800293e:	3301      	adds	r3, #1
 8002940:	5513      	strb	r3, [r2, r4]
 8002942:	e00b      	b.n	800295c <volencode_polling+0x4c>
    }
    else
    {
        stKeyValue[key_number].KeySts = RELEASE;
 8002944:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8002948:	4b16      	ldr	r3, [pc, #88]	@ (80029a4 <volencode_polling+0x94>)
 800294a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800294e:	2200      	movs	r2, #0
 8002950:	711a      	strb	r2, [r3, #4]
		lastcount[key_number] = count[key_number];
 8002952:	4b15      	ldr	r3, [pc, #84]	@ (80029a8 <volencode_polling+0x98>)
 8002954:	5d18      	ldrb	r0, [r3, r4]
 8002956:	4915      	ldr	r1, [pc, #84]	@ (80029ac <volencode_polling+0x9c>)
 8002958:	5508      	strb	r0, [r1, r4]
		count[key_number] = 0;
 800295a:	551a      	strb	r2, [r3, r4]
    }

	if((lastcount[key_number] >= 2) && (lastcount[key_number] < 100))
 800295c:	4b13      	ldr	r3, [pc, #76]	@ (80029ac <volencode_polling+0x9c>)
 800295e:	5d1b      	ldrb	r3, [r3, r4]
 8002960:	3b02      	subs	r3, #2
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b61      	cmp	r3, #97	@ 0x61
 8002966:	d80a      	bhi.n	800297e <volencode_polling+0x6e>
	{
		stKeyValue[key_number].KeySts = SHORT_PRESS;
 8002968:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800296c:	4b0d      	ldr	r3, [pc, #52]	@ (80029a4 <volencode_polling+0x94>)
 800296e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002972:	2202      	movs	r2, #2
 8002974:	711a      	strb	r2, [r3, #4]
		lastcount[key_number] = 0;
 8002976:	4b0d      	ldr	r3, [pc, #52]	@ (80029ac <volencode_polling+0x9c>)
 8002978:	2200      	movs	r2, #0
 800297a:	551a      	strb	r2, [r3, r4]
	else
	{
		lastcount[key_number] = 0;
	}

}
 800297c:	bd38      	pop	{r3, r4, r5, pc}
	else if(count[key_number] >= 100)
 800297e:	4b0a      	ldr	r3, [pc, #40]	@ (80029a8 <volencode_polling+0x98>)
 8002980:	5d1b      	ldrb	r3, [r3, r4]
 8002982:	2b63      	cmp	r3, #99	@ 0x63
 8002984:	d90a      	bls.n	800299c <volencode_polling+0x8c>
		stKeyValue[key_number].KeySts = LONG_PRESS;
 8002986:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800298a:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <volencode_polling+0x94>)
 800298c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002990:	2203      	movs	r2, #3
 8002992:	711a      	strb	r2, [r3, #4]
		lastcount[key_number] = 0;
 8002994:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <volencode_polling+0x9c>)
 8002996:	2200      	movs	r2, #0
 8002998:	551a      	strb	r2, [r3, r4]
 800299a:	e7ef      	b.n	800297c <volencode_polling+0x6c>
		lastcount[key_number] = 0;
 800299c:	4b03      	ldr	r3, [pc, #12]	@ (80029ac <volencode_polling+0x9c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	551a      	strb	r2, [r3, r4]
}
 80029a2:	e7eb      	b.n	800297c <volencode_polling+0x6c>
 80029a4:	20000000 	.word	0x20000000
 80029a8:	200047d8 	.word	0x200047d8
 80029ac:	200047cc 	.word	0x200047cc

080029b0 <ShortPress>:

void ShortPress(uint8_t key)
{
 80029b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b2:	4604      	mov	r4, r0
	uint8_t MENU_MAX;
	uint8_t max_item;
	uint16_t max_value;
	if(now_page == 0){
 80029b4:	4b88      	ldr	r3, [pc, #544]	@ (8002bd8 <ShortPress+0x228>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	b9eb      	cbnz	r3, 80029f6 <ShortPress+0x46>
		key_menu_cnt = GetPage0MenuIndex();
 80029ba:	f000 fb4b 	bl	8003054 <GetPage0MenuIndex>
 80029be:	4e87      	ldr	r6, [pc, #540]	@ (8002bdc <ShortPress+0x22c>)
 80029c0:	7030      	strb	r0, [r6, #0]
		MENU_MAX = Page0_MENU_MAX;
		max_item = GetPage0ItemMAXItem(key_menu_cnt);
 80029c2:	f002 ff09 	bl	80057d8 <GetPage0ItemMAXItem>
 80029c6:	b2c5      	uxtb	r5, r0
	    max_value = GetPage0ItemMAXValue(key_menu_cnt, key_item_cnt);
 80029c8:	4f85      	ldr	r7, [pc, #532]	@ (8002be0 <ShortPress+0x230>)
 80029ca:	7839      	ldrb	r1, [r7, #0]
 80029cc:	7830      	ldrb	r0, [r6, #0]
 80029ce:	f002 ff69 	bl	80058a4 <GetPage0ItemMAXValue>
 80029d2:	b286      	uxth	r6, r0
	    key_item_cnt  = GetPage0ItemIndex();
 80029d4:	f000 fb4a 	bl	800306c <GetPage0ItemIndex>
 80029d8:	7038      	strb	r0, [r7, #0]
		MENU_MAX = Page0_MENU_MAX;
 80029da:	231c      	movs	r3, #28
	    key_item_cnt  = GetPage1ItemIndex();
	}

	static uint8_t last_key_value_cnt = 0;

	switch(key)
 80029dc:	2c08      	cmp	r4, #8
 80029de:	d87d      	bhi.n	8002adc <ShortPress+0x12c>
 80029e0:	e8df f014 	tbh	[pc, r4, lsl #1]
 80029e4:	003c001b 	.word	0x003c001b
 80029e8:	0074005c 	.word	0x0074005c
 80029ec:	009e007d 	.word	0x009e007d
 80029f0:	00ce00bf 	.word	0x00ce00bf
 80029f4:	00e4      	.short	0x00e4
		key_menu_cnt = GetPage1MenuIndex();
 80029f6:	f000 fb33 	bl	8003060 <GetPage1MenuIndex>
 80029fa:	4e78      	ldr	r6, [pc, #480]	@ (8002bdc <ShortPress+0x22c>)
 80029fc:	7030      	strb	r0, [r6, #0]
		max_item = GetPage1ItemMAXItem(key_menu_cnt);
 80029fe:	f002 ff31 	bl	8005864 <GetPage1ItemMAXItem>
 8002a02:	b2c5      	uxtb	r5, r0
	    max_value = GetPage1ItemMAXValue(key_menu_cnt, key_item_cnt);
 8002a04:	4f76      	ldr	r7, [pc, #472]	@ (8002be0 <ShortPress+0x230>)
 8002a06:	7839      	ldrb	r1, [r7, #0]
 8002a08:	7830      	ldrb	r0, [r6, #0]
 8002a0a:	f003 f807 	bl	8005a1c <GetPage1ItemMAXValue>
 8002a0e:	b286      	uxth	r6, r0
	    key_item_cnt  = GetPage1ItemIndex();
 8002a10:	f000 fb32 	bl	8003078 <GetPage1ItemIndex>
 8002a14:	7038      	strb	r0, [r7, #0]
		MENU_MAX = Page1_MENU_MAX;
 8002a16:	231e      	movs	r3, #30
 8002a18:	e7e0      	b.n	80029dc <ShortPress+0x2c>
	{
		case PREVIOUS:
			if(key_menu_cnt == 0)
 8002a1a:	4a70      	ldr	r2, [pc, #448]	@ (8002bdc <ShortPress+0x22c>)
 8002a1c:	7812      	ldrb	r2, [r2, #0]
 8002a1e:	b982      	cbnz	r2, 8002a42 <ShortPress+0x92>
			{
				key_menu_cnt = MENU_MAX-1;
 8002a20:	3b01      	subs	r3, #1
 8002a22:	4a6e      	ldr	r2, [pc, #440]	@ (8002bdc <ShortPress+0x22c>)
 8002a24:	7013      	strb	r3, [r2, #0]
			}
			else
			{
				key_menu_cnt--;
			}
      		key_item_cnt = 0;
 8002a26:	4b6e      	ldr	r3, [pc, #440]	@ (8002be0 <ShortPress+0x230>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
      		if(now_page == 0){
 8002a2c:	4b6a      	ldr	r3, [pc, #424]	@ (8002bd8 <ShortPress+0x228>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	b95b      	cbnz	r3, 8002a4a <ShortPress+0x9a>
    			key_value_cnt  = GetPage0ItemValue(key_menu_cnt, key_item_cnt, 0);
 8002a32:	4611      	mov	r1, r2
 8002a34:	4b69      	ldr	r3, [pc, #420]	@ (8002bdc <ShortPress+0x22c>)
 8002a36:	7818      	ldrb	r0, [r3, #0]
 8002a38:	f002 fcf0 	bl	800541c <GetPage0ItemValue>
 8002a3c:	4b69      	ldr	r3, [pc, #420]	@ (8002be4 <ShortPress+0x234>)
 8002a3e:	8018      	strh	r0, [r3, #0]
 8002a40:	e04c      	b.n	8002adc <ShortPress+0x12c>
				key_menu_cnt--;
 8002a42:	3a01      	subs	r2, #1
 8002a44:	4b65      	ldr	r3, [pc, #404]	@ (8002bdc <ShortPress+0x22c>)
 8002a46:	701a      	strb	r2, [r3, #0]
 8002a48:	e7ed      	b.n	8002a26 <ShortPress+0x76>
      		}
      		else{
      			key_value_cnt  = GetPage1ItemValue(key_menu_cnt, key_item_cnt, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4b63      	ldr	r3, [pc, #396]	@ (8002bdc <ShortPress+0x22c>)
 8002a50:	7818      	ldrb	r0, [r3, #0]
 8002a52:	f002 fe29 	bl	80056a8 <GetPage1ItemValue>
 8002a56:	4b63      	ldr	r3, [pc, #396]	@ (8002be4 <ShortPress+0x234>)
 8002a58:	8018      	strh	r0, [r3, #0]
 8002a5a:	e03f      	b.n	8002adc <ShortPress+0x12c>
      		}
			break;
		case NEXT_PAGE:
			key_menu_cnt++;
 8002a5c:	495f      	ldr	r1, [pc, #380]	@ (8002bdc <ShortPress+0x22c>)
 8002a5e:	780a      	ldrb	r2, [r1, #0]
 8002a60:	3201      	adds	r2, #1
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	700a      	strb	r2, [r1, #0]
			if(key_menu_cnt >= MENU_MAX)
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d301      	bcc.n	8002a6e <ShortPress+0xbe>
			{
				key_menu_cnt = 0;
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	700a      	strb	r2, [r1, #0]
			}
			key_item_cnt = 0;
 8002a6e:	4b5c      	ldr	r3, [pc, #368]	@ (8002be0 <ShortPress+0x230>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
      		if(now_page == 0){
 8002a74:	4b58      	ldr	r3, [pc, #352]	@ (8002bd8 <ShortPress+0x228>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	b93b      	cbnz	r3, 8002a8a <ShortPress+0xda>
    			key_value_cnt  = GetPage0ItemValue(key_menu_cnt, key_item_cnt, 0);
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4b57      	ldr	r3, [pc, #348]	@ (8002bdc <ShortPress+0x22c>)
 8002a7e:	7818      	ldrb	r0, [r3, #0]
 8002a80:	f002 fccc 	bl	800541c <GetPage0ItemValue>
 8002a84:	4b57      	ldr	r3, [pc, #348]	@ (8002be4 <ShortPress+0x234>)
 8002a86:	8018      	strh	r0, [r3, #0]
 8002a88:	e028      	b.n	8002adc <ShortPress+0x12c>
      		}
      		else{
      			key_value_cnt  = GetPage1ItemValue(key_menu_cnt, key_item_cnt, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4b53      	ldr	r3, [pc, #332]	@ (8002bdc <ShortPress+0x22c>)
 8002a90:	7818      	ldrb	r0, [r3, #0]
 8002a92:	f002 fe09 	bl	80056a8 <GetPage1ItemValue>
 8002a96:	4b53      	ldr	r3, [pc, #332]	@ (8002be4 <ShortPress+0x234>)
 8002a98:	8018      	strh	r0, [r3, #0]
 8002a9a:	e01f      	b.n	8002adc <ShortPress+0x12c>
      		}
			break;
		case REVERSE:
			key_menu_cnt = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	4a4f      	ldr	r2, [pc, #316]	@ (8002bdc <ShortPress+0x22c>)
 8002aa0:	7013      	strb	r3, [r2, #0]
			key_item_cnt = 0;
 8002aa2:	4a4f      	ldr	r2, [pc, #316]	@ (8002be0 <ShortPress+0x230>)
 8002aa4:	7013      	strb	r3, [r2, #0]
      		if(now_page == 0){
 8002aa6:	4b4c      	ldr	r3, [pc, #304]	@ (8002bd8 <ShortPress+0x228>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	b93b      	cbnz	r3, 8002abc <ShortPress+0x10c>
    			key_value_cnt  = GetPage0ItemValue(key_menu_cnt, key_item_cnt, 0);
 8002aac:	2200      	movs	r2, #0
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	f002 fcb3 	bl	800541c <GetPage0ItemValue>
 8002ab6:	4b4b      	ldr	r3, [pc, #300]	@ (8002be4 <ShortPress+0x234>)
 8002ab8:	8018      	strh	r0, [r3, #0]
 8002aba:	e00f      	b.n	8002adc <ShortPress+0x12c>
      		}
      		else{
      			key_value_cnt  = GetPage1ItemValue(key_menu_cnt, key_item_cnt, 0);
 8002abc:	2200      	movs	r2, #0
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	f002 fdf1 	bl	80056a8 <GetPage1ItemValue>
 8002ac6:	4b47      	ldr	r3, [pc, #284]	@ (8002be4 <ShortPress+0x234>)
 8002ac8:	8018      	strh	r0, [r3, #0]
 8002aca:	e007      	b.n	8002adc <ShortPress+0x12c>
      		}
			break;
		case CANCEL:
			Can_Send_Sts = !Can_Send_Sts;
 8002acc:	4b46      	ldr	r3, [pc, #280]	@ (8002be8 <ShortPress+0x238>)
 8002ace:	7818      	ldrb	r0, [r3, #0]
 8002ad0:	fab0 f080 	clz	r0, r0
 8002ad4:	0940      	lsrs	r0, r0, #5
 8002ad6:	7018      	strb	r0, [r3, #0]
			Can_SendSts_Control(Can_Send_Sts);
 8002ad8:	f7fe fafc 	bl	80010d4 <Can_SendSts_Control>
            }
			break;
		default:
			break;
	}
}
 8002adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(key_item_cnt == 0U)
 8002ade:	4b40      	ldr	r3, [pc, #256]	@ (8002be0 <ShortPress+0x230>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	b97b      	cbnz	r3, 8002b04 <ShortPress+0x154>
				key_item_cnt = max_item - 1;
 8002ae4:	3d01      	subs	r5, #1
 8002ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8002be0 <ShortPress+0x230>)
 8002ae8:	701d      	strb	r5, [r3, #0]
      		if(now_page == 0){
 8002aea:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd8 <ShortPress+0x228>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	b96b      	cbnz	r3, 8002b0c <ShortPress+0x15c>
    			key_value_cnt  = GetPage0ItemValue(key_menu_cnt, key_item_cnt, 0);
 8002af0:	2200      	movs	r2, #0
 8002af2:	4b3b      	ldr	r3, [pc, #236]	@ (8002be0 <ShortPress+0x230>)
 8002af4:	7819      	ldrb	r1, [r3, #0]
 8002af6:	4b39      	ldr	r3, [pc, #228]	@ (8002bdc <ShortPress+0x22c>)
 8002af8:	7818      	ldrb	r0, [r3, #0]
 8002afa:	f002 fc8f 	bl	800541c <GetPage0ItemValue>
 8002afe:	4b39      	ldr	r3, [pc, #228]	@ (8002be4 <ShortPress+0x234>)
 8002b00:	8018      	strh	r0, [r3, #0]
 8002b02:	e7eb      	b.n	8002adc <ShortPress+0x12c>
				key_item_cnt--;
 8002b04:	3b01      	subs	r3, #1
 8002b06:	4a36      	ldr	r2, [pc, #216]	@ (8002be0 <ShortPress+0x230>)
 8002b08:	7013      	strb	r3, [r2, #0]
 8002b0a:	e7ee      	b.n	8002aea <ShortPress+0x13a>
      			key_value_cnt  = GetPage1ItemValue(key_menu_cnt, key_item_cnt, 0);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	4b34      	ldr	r3, [pc, #208]	@ (8002be0 <ShortPress+0x230>)
 8002b10:	7819      	ldrb	r1, [r3, #0]
 8002b12:	4b32      	ldr	r3, [pc, #200]	@ (8002bdc <ShortPress+0x22c>)
 8002b14:	7818      	ldrb	r0, [r3, #0]
 8002b16:	f002 fdc7 	bl	80056a8 <GetPage1ItemValue>
 8002b1a:	4b32      	ldr	r3, [pc, #200]	@ (8002be4 <ShortPress+0x234>)
 8002b1c:	8018      	strh	r0, [r3, #0]
 8002b1e:	e7dd      	b.n	8002adc <ShortPress+0x12c>
			key_item_cnt++;
 8002b20:	4a2f      	ldr	r2, [pc, #188]	@ (8002be0 <ShortPress+0x230>)
 8002b22:	7813      	ldrb	r3, [r2, #0]
 8002b24:	3301      	adds	r3, #1
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	7013      	strb	r3, [r2, #0]
			if(key_item_cnt >=max_item)
 8002b2a:	42ab      	cmp	r3, r5
 8002b2c:	d302      	bcc.n	8002b34 <ShortPress+0x184>
				key_item_cnt = 0;
 8002b2e:	4613      	mov	r3, r2
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
      		if(now_page == 0){
 8002b34:	4b28      	ldr	r3, [pc, #160]	@ (8002bd8 <ShortPress+0x228>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b94b      	cbnz	r3, 8002b4e <ShortPress+0x19e>
    			key_value_cnt  = GetPage0ItemValue(key_menu_cnt, key_item_cnt, 0);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	4b28      	ldr	r3, [pc, #160]	@ (8002be0 <ShortPress+0x230>)
 8002b3e:	7819      	ldrb	r1, [r3, #0]
 8002b40:	4b26      	ldr	r3, [pc, #152]	@ (8002bdc <ShortPress+0x22c>)
 8002b42:	7818      	ldrb	r0, [r3, #0]
 8002b44:	f002 fc6a 	bl	800541c <GetPage0ItemValue>
 8002b48:	4b26      	ldr	r3, [pc, #152]	@ (8002be4 <ShortPress+0x234>)
 8002b4a:	8018      	strh	r0, [r3, #0]
 8002b4c:	e7c6      	b.n	8002adc <ShortPress+0x12c>
      			key_value_cnt  = GetPage1ItemValue(key_menu_cnt, key_item_cnt, 0);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	4b23      	ldr	r3, [pc, #140]	@ (8002be0 <ShortPress+0x230>)
 8002b52:	7819      	ldrb	r1, [r3, #0]
 8002b54:	4b21      	ldr	r3, [pc, #132]	@ (8002bdc <ShortPress+0x22c>)
 8002b56:	7818      	ldrb	r0, [r3, #0]
 8002b58:	f002 fda6 	bl	80056a8 <GetPage1ItemValue>
 8002b5c:	4b21      	ldr	r3, [pc, #132]	@ (8002be4 <ShortPress+0x234>)
 8002b5e:	8018      	strh	r0, [r3, #0]
 8002b60:	e7bc      	b.n	8002adc <ShortPress+0x12c>
			now_page = (now_page == 1) ? 0 : 1;
 8002b62:	4a1d      	ldr	r2, [pc, #116]	@ (8002bd8 <ShortPress+0x228>)
 8002b64:	7813      	ldrb	r3, [r2, #0]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	bf18      	it	ne
 8002b6a:	2301      	movne	r3, #1
 8002b6c:	7013      	strb	r3, [r2, #0]
			key_menu_cnt = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	4a1a      	ldr	r2, [pc, #104]	@ (8002bdc <ShortPress+0x22c>)
 8002b72:	7013      	strb	r3, [r2, #0]
			key_item_cnt = 0;
 8002b74:	4a1a      	ldr	r2, [pc, #104]	@ (8002be0 <ShortPress+0x230>)
 8002b76:	7013      	strb	r3, [r2, #0]
			switch_flag = 1;
 8002b78:	4b1c      	ldr	r3, [pc, #112]	@ (8002bec <ShortPress+0x23c>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
			break;
 8002b7e:	e7ad      	b.n	8002adc <ShortPress+0x12c>
			if(key_value_cnt <= 0U)
 8002b80:	4b18      	ldr	r3, [pc, #96]	@ (8002be4 <ShortPress+0x234>)
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	b11b      	cbz	r3, 8002b8e <ShortPress+0x1de>
				key_value_cnt--;
 8002b86:	3b01      	subs	r3, #1
 8002b88:	4a16      	ldr	r2, [pc, #88]	@ (8002be4 <ShortPress+0x234>)
 8002b8a:	8013      	strh	r3, [r2, #0]
 8002b8c:	e7a6      	b.n	8002adc <ShortPress+0x12c>
                if (ItemValueLimit(key_menu_cnt, key_item_cnt))
 8002b8e:	4b14      	ldr	r3, [pc, #80]	@ (8002be0 <ShortPress+0x230>)
 8002b90:	7819      	ldrb	r1, [r3, #0]
 8002b92:	4b12      	ldr	r3, [pc, #72]	@ (8002bdc <ShortPress+0x22c>)
 8002b94:	7818      	ldrb	r0, [r3, #0]
 8002b96:	f003 fc15 	bl	80063c4 <ItemValueLimit>
 8002b9a:	b118      	cbz	r0, 8002ba4 <ShortPress+0x1f4>
                    key_value_cnt = 0;
 8002b9c:	4b11      	ldr	r3, [pc, #68]	@ (8002be4 <ShortPress+0x234>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	801a      	strh	r2, [r3, #0]
 8002ba2:	e79b      	b.n	8002adc <ShortPress+0x12c>
                    key_value_cnt = max_value-1;
 8002ba4:	3e01      	subs	r6, #1
 8002ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8002be4 <ShortPress+0x234>)
 8002ba8:	801e      	strh	r6, [r3, #0]
 8002baa:	e797      	b.n	8002adc <ShortPress+0x12c>
			key_value_cnt++;
 8002bac:	4a0d      	ldr	r2, [pc, #52]	@ (8002be4 <ShortPress+0x234>)
 8002bae:	8813      	ldrh	r3, [r2, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	8013      	strh	r3, [r2, #0]
            if (key_value_cnt >= max_value)
 8002bb6:	42b3      	cmp	r3, r6
 8002bb8:	d390      	bcc.n	8002adc <ShortPress+0x12c>
                if (ItemValueLimit(key_menu_cnt, key_item_cnt)) 
 8002bba:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <ShortPress+0x230>)
 8002bbc:	7819      	ldrb	r1, [r3, #0]
 8002bbe:	4b07      	ldr	r3, [pc, #28]	@ (8002bdc <ShortPress+0x22c>)
 8002bc0:	7818      	ldrb	r0, [r3, #0]
 8002bc2:	f003 fbff 	bl	80063c4 <ItemValueLimit>
 8002bc6:	b118      	cbz	r0, 8002bd0 <ShortPress+0x220>
                    key_value_cnt = max_value -1;
 8002bc8:	3e01      	subs	r6, #1
 8002bca:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <ShortPress+0x234>)
 8002bcc:	801e      	strh	r6, [r3, #0]
 8002bce:	e785      	b.n	8002adc <ShortPress+0x12c>
                    key_value_cnt = 0;
 8002bd0:	4b04      	ldr	r3, [pc, #16]	@ (8002be4 <ShortPress+0x234>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	801a      	strh	r2, [r3, #0]
}
 8002bd6:	e781      	b.n	8002adc <ShortPress+0x12c>
 8002bd8:	200047eb 	.word	0x200047eb
 8002bdc:	200047e5 	.word	0x200047e5
 8002be0:	200047e4 	.word	0x200047e4
 8002be4:	200047e2 	.word	0x200047e2
 8002be8:	200047e1 	.word	0x200047e1
 8002bec:	200047ea 	.word	0x200047ea

08002bf0 <Key_CheckProcess>:
{
 8002bf0:	b510      	push	{r4, lr}
	for(i=0; i<KEY_MAX; i++)
 8002bf2:	2400      	movs	r4, #0
 8002bf4:	e001      	b.n	8002bfa <Key_CheckProcess+0xa>
 8002bf6:	3401      	adds	r4, #1
 8002bf8:	b2e4      	uxtb	r4, r4
 8002bfa:	2c08      	cmp	r4, #8
 8002bfc:	d80e      	bhi.n	8002c1c <Key_CheckProcess+0x2c>
		volencode_polling(i);
 8002bfe:	4620      	mov	r0, r4
 8002c00:	f7ff fe86 	bl	8002910 <volencode_polling>
		switch(stKeyValue[i].KeySts)
 8002c04:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8002c08:	005a      	lsls	r2, r3, #1
 8002c0a:	4b05      	ldr	r3, [pc, #20]	@ (8002c20 <Key_CheckProcess+0x30>)
 8002c0c:	4413      	add	r3, r2
 8002c0e:	791b      	ldrb	r3, [r3, #4]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d1f0      	bne.n	8002bf6 <Key_CheckProcess+0x6>
				ShortPress(i);
 8002c14:	4620      	mov	r0, r4
 8002c16:	f7ff fecb 	bl	80029b0 <ShortPress>
				break;
 8002c1a:	e7ec      	b.n	8002bf6 <Key_CheckProcess+0x6>
}
 8002c1c:	bd10      	pop	{r4, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000000 	.word	0x20000000

08002c24 <delay_us>:

void delay_us(uint16_t nus)
{
	uint16_t i,j = 0u;

	for(i = 0u; i< nus; i++)
 8002c24:	2200      	movs	r2, #0
 8002c26:	e006      	b.n	8002c36 <delay_us+0x12>
	{
		for(j = 0u; j < 20u; j++)
		{
			__NOP();
 8002c28:	bf00      	nop
		for(j = 0u; j < 20u; j++)
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b13      	cmp	r3, #19
 8002c30:	d9fa      	bls.n	8002c28 <delay_us+0x4>
	for(i = 0u; i< nus; i++)
 8002c32:	3201      	adds	r2, #1
 8002c34:	b292      	uxth	r2, r2
 8002c36:	4282      	cmp	r2, r0
 8002c38:	d201      	bcs.n	8002c3e <delay_us+0x1a>
		for(j = 0u; j < 20u; j++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e7f7      	b.n	8002c2e <delay_us+0xa>
		}
	}
}
 8002c3e:	4770      	bx	lr

08002c40 <delay>:

void delay(uint16_t nms)
{
 8002c40:	b538      	push	{r3, r4, r5, lr}
 8002c42:	4605      	mov	r5, r0
	uint16_t i = 0u;
	for(i =0u; i < nms; i++)
 8002c44:	2400      	movs	r4, #0
 8002c46:	e004      	b.n	8002c52 <delay+0x12>
	{
	delay_us(100);
 8002c48:	2064      	movs	r0, #100	@ 0x64
 8002c4a:	f7ff ffeb 	bl	8002c24 <delay_us>
	for(i =0u; i < nms; i++)
 8002c4e:	3401      	adds	r4, #1
 8002c50:	b2a4      	uxth	r4, r4
 8002c52:	42ac      	cmp	r4, r5
 8002c54:	d3f8      	bcc.n	8002c48 <delay+0x8>
	}
}
 8002c56:	bd38      	pop	{r3, r4, r5, pc}

08002c58 <lcd_hw_Init>:
	}
}
#endif
        
void lcd_hw_Init(void)
{
 8002c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5a:	b087      	sub	sp, #28
    GPIO_InitTypeDef  GPIO_Initure;

    __HAL_RCC_GPIOA_CLK_ENABLE();   
 8002c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd0 <lcd_hw_Init+0x78>)
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	f042 0204 	orr.w	r2, r2, #4
 8002c64:	619a      	str	r2, [r3, #24]
 8002c66:	699a      	ldr	r2, [r3, #24]
 8002c68:	f002 0204 	and.w	r2, r2, #4
 8002c6c:	9200      	str	r2, [sp, #0]
 8002c6e:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	f042 0210 	orr.w	r2, r2, #16
 8002c76:	619a      	str	r2, [r3, #24]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	9b01      	ldr	r3, [sp, #4]
	
    GPIO_Initure.Pin=GPIO_PIN_7;	
 8002c82:	2780      	movs	r7, #128	@ 0x80
 8002c84:	9702      	str	r7, [sp, #8]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;	
 8002c86:	2401      	movs	r4, #1
 8002c88:	9403      	str	r4, [sp, #12]
    GPIO_Initure.Pull=GPIO_PULLUP;        	
 8002c8a:	9404      	str	r4, [sp, #16]
    GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;
 8002c8c:	2603      	movs	r6, #3
 8002c8e:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA,&GPIO_Initure);   	
 8002c90:	4d10      	ldr	r5, [pc, #64]	@ (8002cd4 <lcd_hw_Init+0x7c>)
 8002c92:	a902      	add	r1, sp, #8
 8002c94:	4628      	mov	r0, r5
 8002c96:	f007 f89b 	bl	8009dd0 <HAL_GPIO_Init>
	 
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);
 8002c9a:	4622      	mov	r2, r4
 8002c9c:	4639      	mov	r1, r7
 8002c9e:	4628      	mov	r0, r5
 8002ca0:	f007 f9ab 	bl	8009ffa <HAL_GPIO_WritePin>
    HAL_GPIO_Init(GPIOC,&GPIO_Initure);   	
	 
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14,GPIO_PIN_SET);	
*******************************************************/	

    GPIO_Initure.Pin=GPIO_PIN_5|GPIO_PIN_6;
 8002ca4:	2360      	movs	r3, #96	@ 0x60
 8002ca6:	9302      	str	r3, [sp, #8]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;	
 8002ca8:	9403      	str	r4, [sp, #12]
    GPIO_Initure.Pull=GPIO_PULLUP;        	
 8002caa:	9404      	str	r4, [sp, #16]
    GPIO_Initure.Speed=GPIO_SPEED_HIGH;   	
 8002cac:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA,&GPIO_Initure); 
 8002cae:	a902      	add	r1, sp, #8
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	f007 f88d 	bl	8009dd0 <HAL_GPIO_Init>
  
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); 
 8002cb6:	4622      	mov	r2, r4
 8002cb8:	2120      	movs	r1, #32
 8002cba:	4628      	mov	r0, r5
 8002cbc:	f007 f99d 	bl	8009ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); 	
 8002cc0:	4622      	mov	r2, r4
 8002cc2:	2140      	movs	r1, #64	@ 0x40
 8002cc4:	4628      	mov	r0, r5
 8002cc6:	f007 f998 	bl	8009ffa <HAL_GPIO_WritePin>
	
}
 8002cca:	b007      	add	sp, #28
 8002ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40010800 	.word	0x40010800

08002cd8 <sendbyte>:

***********************************************************************/
void sendbyte(uint8_t zdata)
{
	unsigned int i;
	for(i=0; i<8; i++)
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e00b      	b.n	8002cf4 <sendbyte+0x1c>
		{
			SID = 1;
		}
		else 
		{
			SID = 0;
 8002cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8002d10 <sendbyte+0x38>)
 8002cde:	2100      	movs	r1, #0
 8002ce0:	f8c2 1198 	str.w	r1, [r2, #408]	@ 0x198
		}
		SCLK = 0;
 8002ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8002d10 <sendbyte+0x38>)
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	f8c2 1194 	str.w	r1, [r2, #404]	@ 0x194
		SCLK = 1;
 8002cec:	2101      	movs	r1, #1
 8002cee:	f8c2 1194 	str.w	r1, [r2, #404]	@ 0x194
	for(i=0; i<8; i++)
 8002cf2:	440b      	add	r3, r1
 8002cf4:	2b07      	cmp	r3, #7
 8002cf6:	d809      	bhi.n	8002d0c <sendbyte+0x34>
		if((zdata << i) & 0x80)
 8002cf8:	fa00 f203 	lsl.w	r2, r0, r3
 8002cfc:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8002d00:	d0ec      	beq.n	8002cdc <sendbyte+0x4>
			SID = 1;
 8002d02:	4a03      	ldr	r2, [pc, #12]	@ (8002d10 <sendbyte+0x38>)
 8002d04:	2101      	movs	r1, #1
 8002d06:	f8c2 1198 	str.w	r1, [r2, #408]	@ 0x198
 8002d0a:	e7eb      	b.n	8002ce4 <sendbyte+0xc>
	}
}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	42210000 	.word	0x42210000

08002d14 <write_com>:
{
 8002d14:	b510      	push	{r4, lr}
 8002d16:	4604      	mov	r4, r0
	CS = 1;
 8002d18:	4b09      	ldr	r3, [pc, #36]	@ (8002d40 <write_com+0x2c>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
	sendbyte(0xf8);
 8002d20:	20f8      	movs	r0, #248	@ 0xf8
 8002d22:	f7ff ffd9 	bl	8002cd8 <sendbyte>
	sendbyte(cmdcode & 0xf0);
 8002d26:	f004 00f0 	and.w	r0, r4, #240	@ 0xf0
 8002d2a:	f7ff ffd5 	bl	8002cd8 <sendbyte>
	sendbyte((cmdcode << 4) & 0xf0);
 8002d2e:	0120      	lsls	r0, r4, #4
 8002d30:	f000 00f0 	and.w	r0, r0, #240	@ 0xf0
 8002d34:	f7ff ffd0 	bl	8002cd8 <sendbyte>
	delay(2);
 8002d38:	2002      	movs	r0, #2
 8002d3a:	f7ff ff81 	bl	8002c40 <delay>
}
 8002d3e:	bd10      	pop	{r4, pc}
 8002d40:	42210000 	.word	0x42210000

08002d44 <write_data>:
{
 8002d44:	b510      	push	{r4, lr}
 8002d46:	4604      	mov	r4, r0
	CS = 1;
 8002d48:	4b09      	ldr	r3, [pc, #36]	@ (8002d70 <write_data+0x2c>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
	sendbyte(0xfa);
 8002d50:	20fa      	movs	r0, #250	@ 0xfa
 8002d52:	f7ff ffc1 	bl	8002cd8 <sendbyte>
	sendbyte(Dispdata & 0xf0);
 8002d56:	f004 00f0 	and.w	r0, r4, #240	@ 0xf0
 8002d5a:	f7ff ffbd 	bl	8002cd8 <sendbyte>
	sendbyte((Dispdata << 4) & 0xf0);
 8002d5e:	0120      	lsls	r0, r4, #4
 8002d60:	f000 00f0 	and.w	r0, r0, #240	@ 0xf0
 8002d64:	f7ff ffb8 	bl	8002cd8 <sendbyte>
	delay(2);
 8002d68:	2002      	movs	r0, #2
 8002d6a:	f7ff ff69 	bl	8002c40 <delay>
}
 8002d6e:	bd10      	pop	{r4, pc}
 8002d70:	42210000 	.word	0x42210000

08002d74 <hzkdis>:
/********************************************************************

***********************************************************************/

void hzkdis(char *s)
{
 8002d74:	b510      	push	{r4, lr}
 8002d76:	4604      	mov	r4, r0
	while(*s > 0)
 8002d78:	e005      	b.n	8002d86 <hzkdis+0x12>
    { 
		write_data(*s);
 8002d7a:	f7ff ffe3 	bl	8002d44 <write_data>
		s++;
 8002d7e:	3401      	adds	r4, #1
		delay_us(50);
 8002d80:	2032      	movs	r0, #50	@ 0x32
 8002d82:	f7ff ff4f 	bl	8002c24 <delay_us>
	while(*s > 0)
 8002d86:	7820      	ldrb	r0, [r4, #0]
 8002d88:	2800      	cmp	r0, #0
 8002d8a:	d1f6      	bne.n	8002d7a <hzkdis+0x6>
    }
}
 8002d8c:	bd10      	pop	{r4, pc}
	...

08002d90 <LCD_ShowNumWithTwoDecimals>:

void LCD_ShowNumWithTwoDecimals(int32_t num)
{
 8002d90:	b570      	push	{r4, r5, r6, lr}
 8002d92:	b084      	sub	sp, #16
    uint8_t integerPart[5] = {0}; // 存储整数部分各位，最多 5 位（考虑符号等情况，可根据实际调整）
 8002d94:	2300      	movs	r3, #0
 8002d96:	9302      	str	r3, [sp, #8]
 8002d98:	f88d 300c 	strb.w	r3, [sp, #12]
    uint8_t decimalPart[2] = {0}; // 存储小数点后两位
 8002d9c:	f8ad 3004 	strh.w	r3, [sp, #4]
    int32_t absNum = abs(num);
 8002da0:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8002da4:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    int i = 0, j = 0;
    int isNegative = num < 0 ? 1 : 0;
 8002da8:	0fc0      	lsrs	r0, r0, #31

    // 拆分出小数点后两位
    decimalPart[0] = (absNum / 10) % 10;
 8002daa:	492c      	ldr	r1, [pc, #176]	@ (8002e5c <LCD_ShowNumWithTwoDecimals+0xcc>)
 8002dac:	fb81 2503 	smull	r2, r5, r1, r3
 8002db0:	17da      	asrs	r2, r3, #31
 8002db2:	ebc2 05a5 	rsb	r5, r2, r5, asr #2
 8002db6:	fb81 4105 	smull	r4, r1, r1, r5
 8002dba:	17ee      	asrs	r6, r5, #31
 8002dbc:	ebc6 06a1 	rsb	r6, r6, r1, asr #2
 8002dc0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8002dc4:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8002dc8:	b2f6      	uxtb	r6, r6
 8002dca:	f88d 6004 	strb.w	r6, [sp, #4]
    decimalPart[1] = absNum % 10;
 8002dce:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002dd2:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
 8002dd6:	b2ed      	uxtb	r5, r5
 8002dd8:	f88d 5005 	strb.w	r5, [sp, #5]
    // 得到去掉小数部分后的整数（即原数放大 100 倍后的整数部分再除以 100）
    int32_t integerNum = absNum / 100;
 8002ddc:	4920      	ldr	r1, [pc, #128]	@ (8002e60 <LCD_ShowNumWithTwoDecimals+0xd0>)
 8002dde:	fb81 1303 	smull	r1, r3, r1, r3

    // 处理整数部分，拆分成各个数字位存到数组
    if (integerNum == 0) {
 8002de2:	ebd2 1263 	rsbs	r2, r2, r3, asr #5
 8002de6:	d015      	beq.n	8002e14 <LCD_ShowNumWithTwoDecimals+0x84>
    int i = 0, j = 0;
 8002de8:	2400      	movs	r4, #0
        integerPart[i++] = 0;
    } else {
        while (integerNum > 0) {
 8002dea:	2a00      	cmp	r2, #0
 8002dec:	dd13      	ble.n	8002e16 <LCD_ShowNumWithTwoDecimals+0x86>
            integerPart[i++] = integerNum % 10;
 8002dee:	491b      	ldr	r1, [pc, #108]	@ (8002e5c <LCD_ShowNumWithTwoDecimals+0xcc>)
 8002df0:	fb81 3102 	smull	r3, r1, r1, r2
 8002df4:	17d3      	asrs	r3, r2, #31
 8002df6:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e00:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8002e04:	f104 0210 	add.w	r2, r4, #16
 8002e08:	446a      	add	r2, sp
 8002e0a:	f802 3c08 	strb.w	r3, [r2, #-8]
            integerNum /= 10;
 8002e0e:	460a      	mov	r2, r1
            integerPart[i++] = integerNum % 10;
 8002e10:	3401      	adds	r4, #1
 8002e12:	e7ea      	b.n	8002dea <LCD_ShowNumWithTwoDecimals+0x5a>
        integerPart[i++] = 0;
 8002e14:	2401      	movs	r4, #1
        }
    }

    // 显示负号
    if (isNegative) {
 8002e16:	b908      	cbnz	r0, 8002e1c <LCD_ShowNumWithTwoDecimals+0x8c>
        write_data('-');
    }

    // 倒序显示整数部分数字
    for (j = i - 1; j >= 0; j--) {
 8002e18:	3c01      	subs	r4, #1
 8002e1a:	e00d      	b.n	8002e38 <LCD_ShowNumWithTwoDecimals+0xa8>
        write_data('-');
 8002e1c:	202d      	movs	r0, #45	@ 0x2d
 8002e1e:	f7ff ff91 	bl	8002d44 <write_data>
 8002e22:	e7f9      	b.n	8002e18 <LCD_ShowNumWithTwoDecimals+0x88>
        write_data(integerPart[j] + 0x30);
 8002e24:	f104 0310 	add.w	r3, r4, #16
 8002e28:	446b      	add	r3, sp
 8002e2a:	f813 0c08 	ldrb.w	r0, [r3, #-8]
 8002e2e:	3030      	adds	r0, #48	@ 0x30
 8002e30:	b2c0      	uxtb	r0, r0
 8002e32:	f7ff ff87 	bl	8002d44 <write_data>
    for (j = i - 1; j >= 0; j--) {
 8002e36:	3c01      	subs	r4, #1
 8002e38:	2c00      	cmp	r4, #0
 8002e3a:	daf3      	bge.n	8002e24 <LCD_ShowNumWithTwoDecimals+0x94>
    }

    // 显示小数点
    write_data('.');
 8002e3c:	202e      	movs	r0, #46	@ 0x2e
 8002e3e:	f7ff ff81 	bl	8002d44 <write_data>

    // 显示小数点后两位
    write_data(decimalPart[0] + 0x30);
 8002e42:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 8002e46:	b2c0      	uxtb	r0, r0
 8002e48:	f7ff ff7c 	bl	8002d44 <write_data>
    write_data(decimalPart[1] + 0x30);
 8002e4c:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8002e50:	b2c0      	uxtb	r0, r0
 8002e52:	f7ff ff77 	bl	8002d44 <write_data>
}
 8002e56:	b004      	add	sp, #16
 8002e58:	bd70      	pop	{r4, r5, r6, pc}
 8002e5a:	bf00      	nop
 8002e5c:	66666667 	.word	0x66666667
 8002e60:	51eb851f 	.word	0x51eb851f

08002e64 <LCD_ShowNumdecimal>:

void LCD_ShowNumdecimal(int16_t num, uint8_t is_half)
{
 8002e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e68:	4688      	mov	r8, r1
    if(num >= 65535)
    {
        num = 65535;
    }

    if (num < 0)
 8002e6a:	1e05      	subs	r5, r0, #0
 8002e6c:	db5c      	blt.n	8002f28 <LCD_ShowNumdecimal+0xc4>
        write_data('-');
        num = abs(num);
    }

    // 计算整数部分
    i = num / 10000;
 8002e6e:	4e36      	ldr	r6, [pc, #216]	@ (8002f48 <LCD_ShowNumdecimal+0xe4>)
 8002e70:	fb86 3605 	smull	r3, r6, r6, r5
 8002e74:	17ea      	asrs	r2, r5, #31
 8002e76:	ebc2 3626 	rsb	r6, r2, r6, asr #12
 8002e7a:	b2f6      	uxtb	r6, r6
    j = (num - 10000 * i) / 1000;
 8002e7c:	4b33      	ldr	r3, [pc, #204]	@ (8002f4c <LCD_ShowNumdecimal+0xe8>)
 8002e7e:	fb03 5306 	mla	r3, r3, r6, r5
 8002e82:	4933      	ldr	r1, [pc, #204]	@ (8002f50 <LCD_ShowNumdecimal+0xec>)
 8002e84:	fb81 0103 	smull	r0, r1, r1, r3
 8002e88:	17df      	asrs	r7, r3, #31
 8002e8a:	ebc7 17a1 	rsb	r7, r7, r1, asr #6
 8002e8e:	b2ff      	uxtb	r7, r7
    k = (num - 10000 * i - 1000 * j) / 100;
 8002e90:	4930      	ldr	r1, [pc, #192]	@ (8002f54 <LCD_ShowNumdecimal+0xf0>)
 8002e92:	fb01 3307 	mla	r3, r1, r7, r3
 8002e96:	4930      	ldr	r1, [pc, #192]	@ (8002f58 <LCD_ShowNumdecimal+0xf4>)
 8002e98:	fb81 0103 	smull	r0, r1, r1, r3
 8002e9c:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8002ea0:	ebc9 1961 	rsb	r9, r9, r1, asr #5
 8002ea4:	fa5f f989 	uxtb.w	r9, r9
    l = (num - 10000 * i - 1000 * j - 100 * k) / 10;
 8002ea8:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 8002eac:	fb01 3309 	mla	r3, r1, r9, r3
 8002eb0:	492a      	ldr	r1, [pc, #168]	@ (8002f5c <LCD_ShowNumdecimal+0xf8>)
 8002eb2:	fb81 4003 	smull	r4, r0, r1, r3
 8002eb6:	17db      	asrs	r3, r3, #31
 8002eb8:	ebc3 04a0 	rsb	r4, r3, r0, asr #2
 8002ebc:	b2e4      	uxtb	r4, r4
    n = num % 10;
 8002ebe:	fb81 3105 	smull	r3, r1, r1, r5
 8002ec2:	ebc2 03a1 	rsb	r3, r2, r1, asr #2
 8002ec6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002eca:	eba5 0543 	sub.w	r5, r5, r3, lsl #1
 8002ece:	b2ed      	uxtb	r5, r5

    // 显示整数部分
    if(i != 0)
 8002ed0:	bb96      	cbnz	r6, 8002f38 <LCD_ShowNumdecimal+0xd4>
    {
        write_data(i + 0x30);
    }
    if((i != 0) || (j != 0))
 8002ed2:	b127      	cbz	r7, 8002ede <LCD_ShowNumdecimal+0x7a>
    {
        write_data(j + 0x30);
 8002ed4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002ed8:	b2c0      	uxtb	r0, r0
 8002eda:	f7ff ff33 	bl	8002d44 <write_data>
    }
    if((i != 0) || (j != 0) || (k != 0))
 8002ede:	b91e      	cbnz	r6, 8002ee8 <LCD_ShowNumdecimal+0x84>
 8002ee0:	b917      	cbnz	r7, 8002ee8 <LCD_ShowNumdecimal+0x84>
 8002ee2:	f1b9 0f00 	cmp.w	r9, #0
 8002ee6:	d004      	beq.n	8002ef2 <LCD_ShowNumdecimal+0x8e>
    {
        write_data(k + 0x30);
 8002ee8:	f109 0030 	add.w	r0, r9, #48	@ 0x30
 8002eec:	b2c0      	uxtb	r0, r0
 8002eee:	f7ff ff29 	bl	8002d44 <write_data>
    }
    if((i != 0) || (j != 0) || (k != 0) || (l != 0))
 8002ef2:	b926      	cbnz	r6, 8002efe <LCD_ShowNumdecimal+0x9a>
 8002ef4:	b91f      	cbnz	r7, 8002efe <LCD_ShowNumdecimal+0x9a>
 8002ef6:	f1b9 0f00 	cmp.w	r9, #0
 8002efa:	d100      	bne.n	8002efe <LCD_ShowNumdecimal+0x9a>
 8002efc:	b124      	cbz	r4, 8002f08 <LCD_ShowNumdecimal+0xa4>
    {
        write_data(l + 0x30);
 8002efe:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8002f02:	b2c0      	uxtb	r0, r0
 8002f04:	f7ff ff1e 	bl	8002d44 <write_data>
    }
    write_data(n + 0x30);
 8002f08:	3530      	adds	r5, #48	@ 0x30
 8002f0a:	b2e8      	uxtb	r0, r5
 8002f0c:	f7ff ff1a 	bl	8002d44 <write_data>

	// 显示小数点
	write_data('.');
 8002f10:	202e      	movs	r0, #46	@ 0x2e
 8002f12:	f7ff ff17 	bl	8002d44 <write_data>
	if(is_half == 1){
 8002f16:	f1b8 0f01 	cmp.w	r8, #1
 8002f1a:	d013      	beq.n	8002f44 <LCD_ShowNumdecimal+0xe0>
		// 计算小数部分
		decimal_part = 5;
	}
	else{
		// 计算小数部分
		decimal_part = 0;
 8002f1c:	2000      	movs	r0, #0
	}
	write_data(decimal_part + 0x30);
 8002f1e:	3030      	adds	r0, #48	@ 0x30
 8002f20:	f7ff ff10 	bl	8002d44 <write_data>
}
 8002f24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        write_data('-');
 8002f28:	202d      	movs	r0, #45	@ 0x2d
 8002f2a:	f7ff ff0b 	bl	8002d44 <write_data>
        num = abs(num);
 8002f2e:	2d00      	cmp	r5, #0
 8002f30:	bfb8      	it	lt
 8002f32:	426d      	neglt	r5, r5
 8002f34:	b22d      	sxth	r5, r5
 8002f36:	e79a      	b.n	8002e6e <LCD_ShowNumdecimal+0xa>
        write_data(i + 0x30);
 8002f38:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 8002f3c:	b2c0      	uxtb	r0, r0
 8002f3e:	f7ff ff01 	bl	8002d44 <write_data>
 8002f42:	e7c7      	b.n	8002ed4 <LCD_ShowNumdecimal+0x70>
		decimal_part = 5;
 8002f44:	2005      	movs	r0, #5
 8002f46:	e7ea      	b.n	8002f1e <LCD_ShowNumdecimal+0xba>
 8002f48:	68db8bad 	.word	0x68db8bad
 8002f4c:	ffffd8f0 	.word	0xffffd8f0
 8002f50:	10624dd3 	.word	0x10624dd3
 8002f54:	fffffc18 	.word	0xfffffc18
 8002f58:	51eb851f 	.word	0x51eb851f
 8002f5c:	66666667 	.word	0x66666667

08002f60 <LCD_ShowNum>:

void LCD_ShowNum(int16_t num)
{
 8002f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t i,j,k,l,n;
    if(num >= 65535)
    {
        num = 65535;
    }
    if (num < 0)
 8002f64:	1e05      	subs	r5, r0, #0
 8002f66:	db52      	blt.n	800300e <LCD_ShowNum+0xae>
    {
        write_data('-');
        num =abs(num);
    }

    i= num/10000;
 8002f68:	4e30      	ldr	r6, [pc, #192]	@ (800302c <LCD_ShowNum+0xcc>)
 8002f6a:	fb86 3605 	smull	r3, r6, r6, r5
 8002f6e:	17ea      	asrs	r2, r5, #31
 8002f70:	ebc2 3626 	rsb	r6, r2, r6, asr #12
 8002f74:	b2f6      	uxtb	r6, r6
    j= (num-10000*i)/1000;
 8002f76:	4b2e      	ldr	r3, [pc, #184]	@ (8003030 <LCD_ShowNum+0xd0>)
 8002f78:	fb03 5306 	mla	r3, r3, r6, r5
 8002f7c:	492d      	ldr	r1, [pc, #180]	@ (8003034 <LCD_ShowNum+0xd4>)
 8002f7e:	fb81 0103 	smull	r0, r1, r1, r3
 8002f82:	17df      	asrs	r7, r3, #31
 8002f84:	ebc7 17a1 	rsb	r7, r7, r1, asr #6
 8002f88:	b2ff      	uxtb	r7, r7
    k= (num-10000*i-1000*j)/100;
 8002f8a:	492b      	ldr	r1, [pc, #172]	@ (8003038 <LCD_ShowNum+0xd8>)
 8002f8c:	fb01 3307 	mla	r3, r1, r7, r3
 8002f90:	492a      	ldr	r1, [pc, #168]	@ (800303c <LCD_ShowNum+0xdc>)
 8002f92:	fb81 0103 	smull	r0, r1, r1, r3
 8002f96:	ea4f 78e3 	mov.w	r8, r3, asr #31
 8002f9a:	ebc8 1861 	rsb	r8, r8, r1, asr #5
 8002f9e:	fa5f f888 	uxtb.w	r8, r8
    l= (num-10000*i-1000*j-100*k)/10;
 8002fa2:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 8002fa6:	fb01 3308 	mla	r3, r1, r8, r3
 8002faa:	4925      	ldr	r1, [pc, #148]	@ (8003040 <LCD_ShowNum+0xe0>)
 8002fac:	fb81 4003 	smull	r4, r0, r1, r3
 8002fb0:	17db      	asrs	r3, r3, #31
 8002fb2:	ebc3 04a0 	rsb	r4, r3, r0, asr #2
 8002fb6:	b2e4      	uxtb	r4, r4
    n= num%10;
 8002fb8:	fb81 3105 	smull	r3, r1, r1, r5
 8002fbc:	ebc2 03a1 	rsb	r3, r2, r1, asr #2
 8002fc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002fc4:	eba5 0543 	sub.w	r5, r5, r3, lsl #1
 8002fc8:	b2ed      	uxtb	r5, r5

    if(i!=0)
 8002fca:	bb46      	cbnz	r6, 800301e <LCD_ShowNum+0xbe>
    {
        write_data(i+0x30);
    }
    if((i!=0)||(j!=0))
 8002fcc:	b127      	cbz	r7, 8002fd8 <LCD_ShowNum+0x78>
    {
        write_data(j+0x30);
 8002fce:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002fd2:	b2c0      	uxtb	r0, r0
 8002fd4:	f7ff feb6 	bl	8002d44 <write_data>
    }
    if((i!=0)||(j!=0)||(k!=0))
 8002fd8:	b91e      	cbnz	r6, 8002fe2 <LCD_ShowNum+0x82>
 8002fda:	b917      	cbnz	r7, 8002fe2 <LCD_ShowNum+0x82>
 8002fdc:	f1b8 0f00 	cmp.w	r8, #0
 8002fe0:	d004      	beq.n	8002fec <LCD_ShowNum+0x8c>
    {
        write_data(k+0x30);
 8002fe2:	f108 0030 	add.w	r0, r8, #48	@ 0x30
 8002fe6:	b2c0      	uxtb	r0, r0
 8002fe8:	f7ff feac 	bl	8002d44 <write_data>
    }
    if((i!=0)||(j!=0)||(k!=0)||(l!=0))
 8002fec:	b926      	cbnz	r6, 8002ff8 <LCD_ShowNum+0x98>
 8002fee:	b91f      	cbnz	r7, 8002ff8 <LCD_ShowNum+0x98>
 8002ff0:	f1b8 0f00 	cmp.w	r8, #0
 8002ff4:	d100      	bne.n	8002ff8 <LCD_ShowNum+0x98>
 8002ff6:	b124      	cbz	r4, 8003002 <LCD_ShowNum+0xa2>
    {
        write_data(l+0x30);
 8002ff8:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8002ffc:	b2c0      	uxtb	r0, r0
 8002ffe:	f7ff fea1 	bl	8002d44 <write_data>
    }
    write_data(n+0x30);
 8003002:	3530      	adds	r5, #48	@ 0x30
 8003004:	b2e8      	uxtb	r0, r5
 8003006:	f7ff fe9d 	bl	8002d44 <write_data>
}
 800300a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        write_data('-');
 800300e:	202d      	movs	r0, #45	@ 0x2d
 8003010:	f7ff fe98 	bl	8002d44 <write_data>
        num =abs(num);
 8003014:	2d00      	cmp	r5, #0
 8003016:	bfb8      	it	lt
 8003018:	426d      	neglt	r5, r5
 800301a:	b22d      	sxth	r5, r5
 800301c:	e7a4      	b.n	8002f68 <LCD_ShowNum+0x8>
        write_data(i+0x30);
 800301e:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 8003022:	b2c0      	uxtb	r0, r0
 8003024:	f7ff fe8e 	bl	8002d44 <write_data>
 8003028:	e7d1      	b.n	8002fce <LCD_ShowNum+0x6e>
 800302a:	bf00      	nop
 800302c:	68db8bad 	.word	0x68db8bad
 8003030:	ffffd8f0 	.word	0xffffd8f0
 8003034:	10624dd3 	.word	0x10624dd3
 8003038:	fffffc18 	.word	0xfffffc18
 800303c:	51eb851f 	.word	0x51eb851f
 8003040:	66666667 	.word	0x66666667

08003044 <Cls_screen>:
{
    write_data(Asci2[num]);
}

void Cls_screen(void)
{
 8003044:	b508      	push	{r3, lr}
	write_com(0x01);
 8003046:	2001      	movs	r0, #1
 8003048:	f7ff fe64 	bl	8002d14 <write_com>
	delay(10);
 800304c:	200a      	movs	r0, #10
 800304e:	f7ff fdf7 	bl	8002c40 <delay>
}
 8003052:	bd08      	pop	{r3, pc}

08003054 <GetPage0MenuIndex>:

/**************************/
Pagedis_Page0 GetPage0MenuIndex()
{
    return g_Page0menu_index;
}
 8003054:	4b01      	ldr	r3, [pc, #4]	@ (800305c <GetPage0MenuIndex+0x8>)
 8003056:	7818      	ldrb	r0, [r3, #0]
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	200047e9 	.word	0x200047e9

08003060 <GetPage1MenuIndex>:

Pagedis_Page1 GetPage1MenuIndex()
{
    return g_Page1menu_index;
}
 8003060:	4b01      	ldr	r3, [pc, #4]	@ (8003068 <GetPage1MenuIndex+0x8>)
 8003062:	7818      	ldrb	r0, [r3, #0]
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	200047e7 	.word	0x200047e7

0800306c <GetPage0ItemIndex>:

uint8_t GetPage0ItemIndex()
{
    return g_Page0item_index;
}
 800306c:	4b01      	ldr	r3, [pc, #4]	@ (8003074 <GetPage0ItemIndex+0x8>)
 800306e:	7818      	ldrb	r0, [r3, #0]
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	200047e8 	.word	0x200047e8

08003078 <GetPage1ItemIndex>:

uint8_t GetPage1ItemIndex()
{
    return g_Page1item_index;
}
 8003078:	4b01      	ldr	r3, [pc, #4]	@ (8003080 <GetPage1ItemIndex+0x8>)
 800307a:	7818      	ldrb	r0, [r3, #0]
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	200047e6 	.word	0x200047e6

08003084 <LCD_Page0menu>:

void LCD_Page0menu(Pagedis_Page0 menu)
{
 8003084:	b538      	push	{r3, r4, r5, lr}
 8003086:	4604      	mov	r4, r0
    Pagedis_Page0 Fi = menu;
    Cls_screen();
 8003088:	f7ff ffdc 	bl	8003044 <Cls_screen>
	write_com(0x03);
 800308c:	2003      	movs	r0, #3
 800308e:	f7ff fe41 	bl	8002d14 <write_com>
	delay(50);    
 8003092:	2032      	movs	r0, #50	@ 0x32
 8003094:	f7ff fdd4 	bl	8002c40 <delay>
  
	write_com(0x80);
 8003098:	2080      	movs	r0, #128	@ 0x80
 800309a:	f7ff fe3b 	bl	8002d14 <write_com>
    Fi = GET_MENU(Fi, Page0_MENU_MAX);
 800309e:	2c1b      	cmp	r4, #27
 80030a0:	d901      	bls.n	80030a6 <LCD_Page0menu+0x22>
 80030a2:	3c1c      	subs	r4, #28
 80030a4:	b2e4      	uxtb	r4, r4
	hzkdis(Page0[Fi++]);
 80030a6:	1c65      	adds	r5, r4, #1
 80030a8:	b2ed      	uxtb	r5, r5
 80030aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003114 <LCD_Page0menu+0x90>)
 80030ac:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80030b0:	f7ff fe60 	bl	8002d74 <hzkdis>

	write_com(0x90);
 80030b4:	2090      	movs	r0, #144	@ 0x90
 80030b6:	f7ff fe2d 	bl	8002d14 <write_com>
    Fi = GET_MENU(Fi, Page0_MENU_MAX);
 80030ba:	2d1b      	cmp	r5, #27
 80030bc:	d901      	bls.n	80030c2 <LCD_Page0menu+0x3e>
 80030be:	3c1b      	subs	r4, #27
 80030c0:	b2e5      	uxtb	r5, r4
	hzkdis(Page0[Fi++]);
 80030c2:	1c6c      	adds	r4, r5, #1
 80030c4:	b2e4      	uxtb	r4, r4
 80030c6:	4b13      	ldr	r3, [pc, #76]	@ (8003114 <LCD_Page0menu+0x90>)
 80030c8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80030cc:	f7ff fe52 	bl	8002d74 <hzkdis>
    
	write_com(0x88);
 80030d0:	2088      	movs	r0, #136	@ 0x88
 80030d2:	f7ff fe1f 	bl	8002d14 <write_com>
    Fi = GET_MENU(Fi, Page0_MENU_MAX);
 80030d6:	2c1b      	cmp	r4, #27
 80030d8:	d901      	bls.n	80030de <LCD_Page0menu+0x5a>
 80030da:	3d1b      	subs	r5, #27
 80030dc:	b2ec      	uxtb	r4, r5
	hzkdis(Page0[Fi++]);
 80030de:	1c65      	adds	r5, r4, #1
 80030e0:	b2ed      	uxtb	r5, r5
 80030e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003114 <LCD_Page0menu+0x90>)
 80030e4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80030e8:	f7ff fe44 	bl	8002d74 <hzkdis>
    
	write_com(0x98);
 80030ec:	2098      	movs	r0, #152	@ 0x98
 80030ee:	f7ff fe11 	bl	8002d14 <write_com>
    Fi = GET_MENU(Fi, Page0_MENU_MAX);
 80030f2:	2d1b      	cmp	r5, #27
 80030f4:	d901      	bls.n	80030fa <LCD_Page0menu+0x76>
 80030f6:	3c1b      	subs	r4, #27
 80030f8:	b2e5      	uxtb	r5, r4
	hzkdis(Page0[Fi]);
 80030fa:	4b06      	ldr	r3, [pc, #24]	@ (8003114 <LCD_Page0menu+0x90>)
 80030fc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003100:	f7ff fe38 	bl	8002d74 <hzkdis>
    
    write_com(0x82);
 8003104:	2082      	movs	r0, #130	@ 0x82
 8003106:	f7ff fe05 	bl	8002d14 <write_com>
    hzkdis("*");
 800310a:	4803      	ldr	r0, [pc, #12]	@ (8003118 <LCD_Page0menu+0x94>)
 800310c:	f7ff fe32 	bl	8002d74 <hzkdis>
}
 8003110:	bd38      	pop	{r3, r4, r5, pc}
 8003112:	bf00      	nop
 8003114:	2000430c 	.word	0x2000430c
 8003118:	08011280 	.word	0x08011280

0800311c <LCD_Page1menu>:

void LCD_Page1menu(Pagedis_Page1 menu)
{
 800311c:	b538      	push	{r3, r4, r5, lr}
 800311e:	4604      	mov	r4, r0
    Pagedis_Page1 Fi = menu;
    Cls_screen();
 8003120:	f7ff ff90 	bl	8003044 <Cls_screen>
	write_com(0x03);
 8003124:	2003      	movs	r0, #3
 8003126:	f7ff fdf5 	bl	8002d14 <write_com>
	delay(50);
 800312a:	2032      	movs	r0, #50	@ 0x32
 800312c:	f7ff fd88 	bl	8002c40 <delay>

	write_com(0x80);
 8003130:	2080      	movs	r0, #128	@ 0x80
 8003132:	f7ff fdef 	bl	8002d14 <write_com>
    Fi = GET_MENU(Fi, Page1_MENU_MAX);
 8003136:	2c1d      	cmp	r4, #29
 8003138:	d901      	bls.n	800313e <LCD_Page1menu+0x22>
 800313a:	3c1e      	subs	r4, #30
 800313c:	b2e4      	uxtb	r4, r4
	hzkdis(Page1[Fi++]);
 800313e:	1c65      	adds	r5, r4, #1
 8003140:	b2ed      	uxtb	r5, r5
 8003142:	4b1a      	ldr	r3, [pc, #104]	@ (80031ac <LCD_Page1menu+0x90>)
 8003144:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003148:	f7ff fe14 	bl	8002d74 <hzkdis>

	write_com(0x90);
 800314c:	2090      	movs	r0, #144	@ 0x90
 800314e:	f7ff fde1 	bl	8002d14 <write_com>
    Fi = GET_MENU(Fi, Page1_MENU_MAX);
 8003152:	2d1d      	cmp	r5, #29
 8003154:	d901      	bls.n	800315a <LCD_Page1menu+0x3e>
 8003156:	3c1d      	subs	r4, #29
 8003158:	b2e5      	uxtb	r5, r4
	hzkdis(Page1[Fi++]);
 800315a:	1c6c      	adds	r4, r5, #1
 800315c:	b2e4      	uxtb	r4, r4
 800315e:	4b13      	ldr	r3, [pc, #76]	@ (80031ac <LCD_Page1menu+0x90>)
 8003160:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003164:	f7ff fe06 	bl	8002d74 <hzkdis>

	write_com(0x88);
 8003168:	2088      	movs	r0, #136	@ 0x88
 800316a:	f7ff fdd3 	bl	8002d14 <write_com>
    Fi = GET_MENU(Fi, Page1_MENU_MAX);
 800316e:	2c1d      	cmp	r4, #29
 8003170:	d901      	bls.n	8003176 <LCD_Page1menu+0x5a>
 8003172:	3d1d      	subs	r5, #29
 8003174:	b2ec      	uxtb	r4, r5
	hzkdis(Page1[Fi++]);
 8003176:	1c65      	adds	r5, r4, #1
 8003178:	b2ed      	uxtb	r5, r5
 800317a:	4b0c      	ldr	r3, [pc, #48]	@ (80031ac <LCD_Page1menu+0x90>)
 800317c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003180:	f7ff fdf8 	bl	8002d74 <hzkdis>

	write_com(0x98);
 8003184:	2098      	movs	r0, #152	@ 0x98
 8003186:	f7ff fdc5 	bl	8002d14 <write_com>
    Fi = GET_MENU(Fi, Page1_MENU_MAX);
 800318a:	2d1d      	cmp	r5, #29
 800318c:	d901      	bls.n	8003192 <LCD_Page1menu+0x76>
 800318e:	3c1d      	subs	r4, #29
 8003190:	b2e5      	uxtb	r5, r4
	hzkdis(Page1[Fi]);
 8003192:	4b06      	ldr	r3, [pc, #24]	@ (80031ac <LCD_Page1menu+0x90>)
 8003194:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003198:	f7ff fdec 	bl	8002d74 <hzkdis>

    write_com(0x82);
 800319c:	2082      	movs	r0, #130	@ 0x82
 800319e:	f7ff fdb9 	bl	8002d14 <write_com>
    hzkdis("*");
 80031a2:	4803      	ldr	r0, [pc, #12]	@ (80031b0 <LCD_Page1menu+0x94>)
 80031a4:	f7ff fde6 	bl	8002d74 <hzkdis>
}
 80031a8:	bd38      	pop	{r3, r4, r5, pc}
 80031aa:	bf00      	nop
 80031ac:	20004294 	.word	0x20004294
 80031b0:	08011280 	.word	0x08011280

080031b4 <LCD_Page0Menu_Display>:
				 
uint8_t LCD_Page0Menu_Display(uint8_t menu, uint8_t item, int16_t value) {
 80031b4:	b570      	push	{r4, r5, r6, lr}
 80031b6:	4604      	mov	r4, r0
 80031b8:	460d      	mov	r5, r1
 80031ba:	4616      	mov	r6, r2
    menu = GET_MENU(menu, Page0_MENU_MAX);
 80031bc:	281b      	cmp	r0, #27
 80031be:	d902      	bls.n	80031c6 <LCD_Page0Menu_Display+0x12>
 80031c0:	f1a0 041c 	sub.w	r4, r0, #28
 80031c4:	b2e4      	uxtb	r4, r4
    LCD_Page0menu(menu);
 80031c6:	4620      	mov	r0, r4
 80031c8:	f7ff ff5c 	bl	8003084 <LCD_Page0menu>
    LCD_Display_Page0[menu](item, value);
 80031cc:	4b03      	ldr	r3, [pc, #12]	@ (80031dc <LCD_Page0Menu_Display+0x28>)
 80031ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80031d2:	4631      	mov	r1, r6
 80031d4:	4628      	mov	r0, r5
 80031d6:	4798      	blx	r3
    return DISPLAY_SUCCESS;
}
 80031d8:	2000      	movs	r0, #0
 80031da:	bd70      	pop	{r4, r5, r6, pc}
 80031dc:	200000b0 	.word	0x200000b0

080031e0 <LCD_Page1Menu_Display>:

uint8_t LCD_Page1Menu_Display(uint8_t menu, uint8_t item, int16_t value) {
 80031e0:	b570      	push	{r4, r5, r6, lr}
 80031e2:	4604      	mov	r4, r0
 80031e4:	460d      	mov	r5, r1
 80031e6:	4616      	mov	r6, r2
    menu = GET_MENU(menu, Page1_MENU_MAX);
 80031e8:	281d      	cmp	r0, #29
 80031ea:	d902      	bls.n	80031f2 <LCD_Page1Menu_Display+0x12>
 80031ec:	f1a0 041e 	sub.w	r4, r0, #30
 80031f0:	b2e4      	uxtb	r4, r4
    LCD_Page1menu(menu);
 80031f2:	4620      	mov	r0, r4
 80031f4:	f7ff ff92 	bl	800311c <LCD_Page1menu>
    LCD_Display_Page1[menu](item, value);
 80031f8:	4b03      	ldr	r3, [pc, #12]	@ (8003208 <LCD_Page1Menu_Display+0x28>)
 80031fa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80031fe:	4631      	mov	r1, r6
 8003200:	4628      	mov	r0, r5
 8003202:	4798      	blx	r3
    return DISPLAY_SUCCESS;
}
 8003204:	2000      	movs	r0, #0
 8003206:	bd70      	pop	{r4, r5, r6, pc}
 8003208:	20000038 	.word	0x20000038

0800320c <LCD_Show_CANSendClose>:

void LCD_Show_CANSendClose(void)
{
 800320c:	b508      	push	{r3, lr}
    Cls_screen();
 800320e:	f7ff ff19 	bl	8003044 <Cls_screen>
    write_com(0x80);
 8003212:	2080      	movs	r0, #128	@ 0x80
 8003214:	f7ff fd7e 	bl	8002d14 <write_com>
    hzkdis("CAN Send OFF!");
 8003218:	4801      	ldr	r0, [pc, #4]	@ (8003220 <LCD_Show_CANSendClose+0x14>)
 800321a:	f7ff fdab 	bl	8002d74 <hzkdis>
}
 800321e:	bd08      	pop	{r3, pc}
 8003220:	08011284 	.word	0x08011284

08003224 <Page_0>:

void Page_0(void)
{
 8003224:	b508      	push	{r3, lr}
	Cls_screen();
 8003226:	f7ff ff0d 	bl	8003044 <Cls_screen>
	write_com(0x03);
 800322a:	2003      	movs	r0, #3
 800322c:	f7ff fd72 	bl	8002d14 <write_com>
	delay(50);
 8003230:	2032      	movs	r0, #50	@ 0x32
 8003232:	f7ff fd05 	bl	8002c40 <delay>
	write_com(0x80);
 8003236:	2080      	movs	r0, #128	@ 0x80
 8003238:	f7ff fd6c 	bl	8002d14 <write_com>
	hzkdis("YB103_CAN_Bench");
 800323c:	4807      	ldr	r0, [pc, #28]	@ (800325c <Page_0+0x38>)
 800323e:	f7ff fd99 	bl	8002d74 <hzkdis>
    write_com(0x90);
	hzkdis("SW_V1.0.5"); //1.0.1   SPS250_CAN,SPS250
	write_com(0x98);
	hzkdis("*:SWC-LIN ");
    #else
    write_com(0x90);
 8003242:	2090      	movs	r0, #144	@ 0x90
 8003244:	f7ff fd66 	bl	8002d14 <write_com>
	hzkdis("SW_V1.0.0"); //1.0.1   SPS250_CAN,SPS250
 8003248:	4805      	ldr	r0, [pc, #20]	@ (8003260 <Page_0+0x3c>)
 800324a:	f7ff fd93 	bl	8002d74 <hzkdis>
	write_com(0x98);
 800324e:	2098      	movs	r0, #152	@ 0x98
 8003250:	f7ff fd60 	bl	8002d14 <write_com>
	hzkdis("*:Normal ");
 8003254:	4803      	ldr	r0, [pc, #12]	@ (8003264 <Page_0+0x40>)
 8003256:	f7ff fd8d 	bl	8002d74 <hzkdis>
    #endif
}
 800325a:	bd08      	pop	{r3, pc}
 800325c:	08011294 	.word	0x08011294
 8003260:	080112a4 	.word	0x080112a4
 8003264:	080112b0 	.word	0x080112b0

08003268 <lcd128_Init>:
{  
 8003268:	b508      	push	{r3, lr}
	lcd_hw_Init();
 800326a:	f7ff fcf5 	bl	8002c58 <lcd_hw_Init>
	delay(2000);
 800326e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003272:	f7ff fce5 	bl	8002c40 <delay>
	write_com(0x30);
 8003276:	2030      	movs	r0, #48	@ 0x30
 8003278:	f7ff fd4c 	bl	8002d14 <write_com>
	delay(50);
 800327c:	2032      	movs	r0, #50	@ 0x32
 800327e:	f7ff fcdf 	bl	8002c40 <delay>
	write_com(0x0c);
 8003282:	200c      	movs	r0, #12
 8003284:	f7ff fd46 	bl	8002d14 <write_com>
	delay(50);
 8003288:	2032      	movs	r0, #50	@ 0x32
 800328a:	f7ff fcd9 	bl	8002c40 <delay>
	write_com(0x0F);
 800328e:	200f      	movs	r0, #15
 8003290:	f7ff fd40 	bl	8002d14 <write_com>
    Page_0();
 8003294:	f7ff ffc6 	bl	8003224 <Page_0>
	delay(10000);
 8003298:	f242 7010 	movw	r0, #10000	@ 0x2710
 800329c:	f7ff fcd0 	bl	8002c40 <delay>
}
 80032a0:	bd08      	pop	{r3, pc}
	...

080032a4 <LCD_ABS_1_item>:
    }
    write_com(0x93);
}

void LCD_ABS_1_item(uint8_t item, int16_t value)
{
 80032a4:	b538      	push	{r3, r4, r5, lr}
 80032a6:	4604      	mov	r4, r0
    item = GET_MENU(item, ABS_1_ITEM_MAX);
 80032a8:	2803      	cmp	r0, #3
 80032aa:	d901      	bls.n	80032b0 <LCD_ABS_1_item+0xc>
 80032ac:	1f04      	subs	r4, r0, #4
 80032ae:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 80032b0:	2083      	movs	r0, #131	@ 0x83
 80032b2:	f7ff fd2f 	bl	8002d14 <write_com>
    hzkdis(ABS_1Item[item]);
 80032b6:	4625      	mov	r5, r4
 80032b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003378 <LCD_ABS_1_item+0xd4>)
 80032ba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80032be:	f7ff fd59 	bl	8002d74 <hzkdis>
    write_com(0x93);
 80032c2:	2093      	movs	r0, #147	@ 0x93
 80032c4:	f7ff fd26 	bl	8002d14 <write_com>
    if (strcmp(ABS_1Value[item][0], "") != 0) {
 80032c8:	01a3      	lsls	r3, r4, #6
 80032ca:	4a2c      	ldr	r2, [pc, #176]	@ (800337c <LCD_ABS_1_item+0xd8>)
 80032cc:	58d3      	ldr	r3, [r2, r3]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	bb73      	cbnz	r3, 8003330 <LCD_ABS_1_item+0x8c>
        hzkdis(ABS_1Value[item][g_ABS_1[item]]);
    } else {
    	if(item == ABS_FLWheelSpeed || item == ABS_FRWheelSpeed){
 80032d2:	b10c      	cbz	r4, 80032d8 <LCD_ABS_1_item+0x34>
 80032d4:	2c02      	cmp	r4, #2
 80032d6:	d135      	bne.n	8003344 <LCD_ABS_1_item+0xa0>
    		LCD_ShowNum(g_ABS_1[item] * 10);
 80032d8:	4b29      	ldr	r3, [pc, #164]	@ (8003380 <LCD_ABS_1_item+0xdc>)
 80032da:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 80032de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032e2:	0040      	lsls	r0, r0, #1
 80032e4:	f7ff fe3c 	bl	8002f60 <LCD_ShowNum>
    	else{
    		LCD_ShowNum(g_ABS_1[item]);
    	}
    }

    item = GET_MENU(item+1, ABS_1_ITEM_MAX);
 80032e8:	2c02      	cmp	r4, #2
 80032ea:	d931      	bls.n	8003350 <LCD_ABS_1_item+0xac>
 80032ec:	3c03      	subs	r4, #3
 80032ee:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80032f0:	208b      	movs	r0, #139	@ 0x8b
 80032f2:	f7ff fd0f 	bl	8002d14 <write_com>
    hzkdis(ABS_1Item[item]);
 80032f6:	4625      	mov	r5, r4
 80032f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003378 <LCD_ABS_1_item+0xd4>)
 80032fa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80032fe:	f7ff fd39 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8003302:	209b      	movs	r0, #155	@ 0x9b
 8003304:	f7ff fd06 	bl	8002d14 <write_com>
    if (strcmp(ABS_1Value[item][0], "") != 0) {
 8003308:	01a3      	lsls	r3, r4, #6
 800330a:	4a1c      	ldr	r2, [pc, #112]	@ (800337c <LCD_ABS_1_item+0xd8>)
 800330c:	58d3      	ldr	r3, [r2, r3]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	bb0b      	cbnz	r3, 8003356 <LCD_ABS_1_item+0xb2>
        hzkdis(ABS_1Value[item][g_ABS_1[item]]);
    } else {
    	if(item == ABS_FLWheelSpeed || item == ABS_FRWheelSpeed){
 8003312:	b10c      	cbz	r4, 8003318 <LCD_ABS_1_item+0x74>
 8003314:	2c02      	cmp	r4, #2
 8003316:	d128      	bne.n	800336a <LCD_ABS_1_item+0xc6>
    		LCD_ShowNum(g_ABS_1[item] * 10);
 8003318:	4b19      	ldr	r3, [pc, #100]	@ (8003380 <LCD_ABS_1_item+0xdc>)
 800331a:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 800331e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003322:	0040      	lsls	r0, r0, #1
 8003324:	f7ff fe1c 	bl	8002f60 <LCD_ShowNum>
    	}
    	else{
    		LCD_ShowNum(g_ABS_1[item]);
    	}
    }
    write_com(0x93);
 8003328:	2093      	movs	r0, #147	@ 0x93
 800332a:	f7ff fcf3 	bl	8002d14 <write_com>
}
 800332e:	bd38      	pop	{r3, r4, r5, pc}
        hzkdis(ABS_1Value[item][g_ABS_1[item]]);
 8003330:	4b13      	ldr	r3, [pc, #76]	@ (8003380 <LCD_ABS_1_item+0xdc>)
 8003332:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003336:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800333a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800333e:	f7ff fd19 	bl	8002d74 <hzkdis>
 8003342:	e7d1      	b.n	80032e8 <LCD_ABS_1_item+0x44>
    		LCD_ShowNum(g_ABS_1[item]);
 8003344:	4b0e      	ldr	r3, [pc, #56]	@ (8003380 <LCD_ABS_1_item+0xdc>)
 8003346:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800334a:	f7ff fe09 	bl	8002f60 <LCD_ShowNum>
 800334e:	e7cb      	b.n	80032e8 <LCD_ABS_1_item+0x44>
    item = GET_MENU(item+1, ABS_1_ITEM_MAX);
 8003350:	3401      	adds	r4, #1
 8003352:	b2e4      	uxtb	r4, r4
 8003354:	e7cc      	b.n	80032f0 <LCD_ABS_1_item+0x4c>
        hzkdis(ABS_1Value[item][g_ABS_1[item]]);
 8003356:	4b0a      	ldr	r3, [pc, #40]	@ (8003380 <LCD_ABS_1_item+0xdc>)
 8003358:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800335c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003360:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003364:	f7ff fd06 	bl	8002d74 <hzkdis>
 8003368:	e7de      	b.n	8003328 <LCD_ABS_1_item+0x84>
    		LCD_ShowNum(g_ABS_1[item]);
 800336a:	4b05      	ldr	r3, [pc, #20]	@ (8003380 <LCD_ABS_1_item+0xdc>)
 800336c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003370:	f7ff fdf6 	bl	8002f60 <LCD_ShowNum>
 8003374:	e7d8      	b.n	8003328 <LCD_ABS_1_item+0x84>
 8003376:	bf00      	nop
 8003378:	20004098 	.word	0x20004098
 800337c:	20003f98 	.word	0x20003f98
 8003380:	20006598 	.word	0x20006598

08003384 <LCD_ABS_2_item>:

void LCD_ABS_2_item(uint8_t item, int16_t value)
{
 8003384:	b538      	push	{r3, r4, r5, lr}
 8003386:	4604      	mov	r4, r0
    item = GET_MENU(item, ABS_2_ITEM_MAX);
 8003388:	2803      	cmp	r0, #3
 800338a:	d901      	bls.n	8003390 <LCD_ABS_2_item+0xc>
 800338c:	1f04      	subs	r4, r0, #4
 800338e:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003390:	2083      	movs	r0, #131	@ 0x83
 8003392:	f7ff fcbf 	bl	8002d14 <write_com>
    hzkdis(ABS_2Item[item]);
 8003396:	4625      	mov	r5, r4
 8003398:	4b2f      	ldr	r3, [pc, #188]	@ (8003458 <LCD_ABS_2_item+0xd4>)
 800339a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800339e:	f7ff fce9 	bl	8002d74 <hzkdis>
    write_com(0x93);
 80033a2:	2093      	movs	r0, #147	@ 0x93
 80033a4:	f7ff fcb6 	bl	8002d14 <write_com>
    if (strcmp(ABS_2Value[item][0], "") != 0) {
 80033a8:	01a3      	lsls	r3, r4, #6
 80033aa:	4a2c      	ldr	r2, [pc, #176]	@ (800345c <LCD_ABS_2_item+0xd8>)
 80033ac:	58d3      	ldr	r3, [r2, r3]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	bb73      	cbnz	r3, 8003410 <LCD_ABS_2_item+0x8c>
        hzkdis(ABS_2Value[item][g_ABS_2[item]]);
    } else {
    	if(item == ABS_RLWheelSpeed || item == ABS_RRWheelSpeed){
 80033b2:	b10c      	cbz	r4, 80033b8 <LCD_ABS_2_item+0x34>
 80033b4:	2c02      	cmp	r4, #2
 80033b6:	d135      	bne.n	8003424 <LCD_ABS_2_item+0xa0>
    		LCD_ShowNum(g_ABS_2[item] * 10);
 80033b8:	4b29      	ldr	r3, [pc, #164]	@ (8003460 <LCD_ABS_2_item+0xdc>)
 80033ba:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 80033be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033c2:	0040      	lsls	r0, r0, #1
 80033c4:	f7ff fdcc 	bl	8002f60 <LCD_ShowNum>
    	else{
    		LCD_ShowNum(g_ABS_2[item]);
    	}
    }

    item = GET_MENU(item+1, ABS_2_ITEM_MAX);
 80033c8:	2c02      	cmp	r4, #2
 80033ca:	d931      	bls.n	8003430 <LCD_ABS_2_item+0xac>
 80033cc:	3c03      	subs	r4, #3
 80033ce:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80033d0:	208b      	movs	r0, #139	@ 0x8b
 80033d2:	f7ff fc9f 	bl	8002d14 <write_com>
    hzkdis(ABS_2Item[item]);
 80033d6:	4625      	mov	r5, r4
 80033d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003458 <LCD_ABS_2_item+0xd4>)
 80033da:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80033de:	f7ff fcc9 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 80033e2:	209b      	movs	r0, #155	@ 0x9b
 80033e4:	f7ff fc96 	bl	8002d14 <write_com>
    if (strcmp(ABS_2Value[item][0], "") != 0) {
 80033e8:	01a3      	lsls	r3, r4, #6
 80033ea:	4a1c      	ldr	r2, [pc, #112]	@ (800345c <LCD_ABS_2_item+0xd8>)
 80033ec:	58d3      	ldr	r3, [r2, r3]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	bb0b      	cbnz	r3, 8003436 <LCD_ABS_2_item+0xb2>
        hzkdis(ABS_2Value[item][g_ABS_2[item]]);
    } else {
    	if(item == ABS_RLWheelSpeed || item == ABS_RRWheelSpeed){
 80033f2:	b10c      	cbz	r4, 80033f8 <LCD_ABS_2_item+0x74>
 80033f4:	2c02      	cmp	r4, #2
 80033f6:	d128      	bne.n	800344a <LCD_ABS_2_item+0xc6>
    		LCD_ShowNum(g_ABS_2[item] * 10);
 80033f8:	4b19      	ldr	r3, [pc, #100]	@ (8003460 <LCD_ABS_2_item+0xdc>)
 80033fa:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 80033fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003402:	0040      	lsls	r0, r0, #1
 8003404:	f7ff fdac 	bl	8002f60 <LCD_ShowNum>
    	}
    	else{
    		LCD_ShowNum(g_ABS_2[item]);
    	}
    }
    write_com(0x93);
 8003408:	2093      	movs	r0, #147	@ 0x93
 800340a:	f7ff fc83 	bl	8002d14 <write_com>
}
 800340e:	bd38      	pop	{r3, r4, r5, pc}
        hzkdis(ABS_2Value[item][g_ABS_2[item]]);
 8003410:	4b13      	ldr	r3, [pc, #76]	@ (8003460 <LCD_ABS_2_item+0xdc>)
 8003412:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003416:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800341a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800341e:	f7ff fca9 	bl	8002d74 <hzkdis>
 8003422:	e7d1      	b.n	80033c8 <LCD_ABS_2_item+0x44>
    		LCD_ShowNum(g_ABS_2[item]);
 8003424:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <LCD_ABS_2_item+0xdc>)
 8003426:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800342a:	f7ff fd99 	bl	8002f60 <LCD_ShowNum>
 800342e:	e7cb      	b.n	80033c8 <LCD_ABS_2_item+0x44>
    item = GET_MENU(item+1, ABS_2_ITEM_MAX);
 8003430:	3401      	adds	r4, #1
 8003432:	b2e4      	uxtb	r4, r4
 8003434:	e7cc      	b.n	80033d0 <LCD_ABS_2_item+0x4c>
        hzkdis(ABS_2Value[item][g_ABS_2[item]]);
 8003436:	4b0a      	ldr	r3, [pc, #40]	@ (8003460 <LCD_ABS_2_item+0xdc>)
 8003438:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800343c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003440:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003444:	f7ff fc96 	bl	8002d74 <hzkdis>
 8003448:	e7de      	b.n	8003408 <LCD_ABS_2_item+0x84>
    		LCD_ShowNum(g_ABS_2[item]);
 800344a:	4b05      	ldr	r3, [pc, #20]	@ (8003460 <LCD_ABS_2_item+0xdc>)
 800344c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003450:	f7ff fd86 	bl	8002f60 <LCD_ShowNum>
 8003454:	e7d8      	b.n	8003408 <LCD_ABS_2_item+0x84>
 8003456:	bf00      	nop
 8003458:	20003f80 	.word	0x20003f80
 800345c:	20003e80 	.word	0x20003e80
 8003460:	20006590 	.word	0x20006590

08003464 <LCD_BCM_1_item>:
    }
    write_com(0x93);
}

void LCD_BCM_1_item(uint8_t item, int16_t value)
{
 8003464:	b510      	push	{r4, lr}
 8003466:	4604      	mov	r4, r0
    item = GET_MENU(item, BCM_1_ITEM_MAX);
 8003468:	2802      	cmp	r0, #2
 800346a:	d901      	bls.n	8003470 <LCD_BCM_1_item+0xc>
 800346c:	1ec4      	subs	r4, r0, #3
 800346e:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003470:	2083      	movs	r0, #131	@ 0x83
 8003472:	f7ff fc4f 	bl	8002d14 <write_com>
    hzkdis(BCM_1Item[item]);
 8003476:	4b23      	ldr	r3, [pc, #140]	@ (8003504 <LCD_BCM_1_item+0xa0>)
 8003478:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800347c:	f7ff fc7a 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8003480:	2093      	movs	r0, #147	@ 0x93
 8003482:	f7ff fc47 	bl	8002d14 <write_com>
    if (strcmp(BCM_1Value[item][0], "") != 0) {
 8003486:	01a3      	lsls	r3, r4, #6
 8003488:	4a1f      	ldr	r2, [pc, #124]	@ (8003508 <LCD_BCM_1_item+0xa4>)
 800348a:	58d3      	ldr	r3, [r2, r3]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	b34b      	cbz	r3, 80034e4 <LCD_BCM_1_item+0x80>
        hzkdis(BCM_1Value[item][g_BCM_1[item]]);
 8003490:	4b1e      	ldr	r3, [pc, #120]	@ (800350c <LCD_BCM_1_item+0xa8>)
 8003492:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003496:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800349a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800349e:	f7ff fc69 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_BCM_1[item]);
    }

    item = GET_MENU(item+1, BCM_1_ITEM_MAX);
 80034a2:	2c01      	cmp	r4, #1
 80034a4:	d924      	bls.n	80034f0 <LCD_BCM_1_item+0x8c>
 80034a6:	3c02      	subs	r4, #2
 80034a8:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80034aa:	208b      	movs	r0, #139	@ 0x8b
 80034ac:	f7ff fc32 	bl	8002d14 <write_com>
    hzkdis(BCM_1Item[item]);
 80034b0:	4b14      	ldr	r3, [pc, #80]	@ (8003504 <LCD_BCM_1_item+0xa0>)
 80034b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80034b6:	f7ff fc5d 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 80034ba:	209b      	movs	r0, #155	@ 0x9b
 80034bc:	f7ff fc2a 	bl	8002d14 <write_com>
    if (strcmp(BCM_1Value[item][0], "") != 0) {
 80034c0:	01a3      	lsls	r3, r4, #6
 80034c2:	4a11      	ldr	r2, [pc, #68]	@ (8003508 <LCD_BCM_1_item+0xa4>)
 80034c4:	58d3      	ldr	r3, [r2, r3]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	b1ab      	cbz	r3, 80034f6 <LCD_BCM_1_item+0x92>
        hzkdis(BCM_1Value[item][g_BCM_1[item]]);
 80034ca:	4b10      	ldr	r3, [pc, #64]	@ (800350c <LCD_BCM_1_item+0xa8>)
 80034cc:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80034d0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80034d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80034d8:	f7ff fc4c 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_BCM_1[item]);
    }
    write_com(0x93);
 80034dc:	2093      	movs	r0, #147	@ 0x93
 80034de:	f7ff fc19 	bl	8002d14 <write_com>
}
 80034e2:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_BCM_1[item]);
 80034e4:	4b09      	ldr	r3, [pc, #36]	@ (800350c <LCD_BCM_1_item+0xa8>)
 80034e6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80034ea:	f7ff fd39 	bl	8002f60 <LCD_ShowNum>
 80034ee:	e7d8      	b.n	80034a2 <LCD_BCM_1_item+0x3e>
    item = GET_MENU(item+1, BCM_1_ITEM_MAX);
 80034f0:	3401      	adds	r4, #1
 80034f2:	b2e4      	uxtb	r4, r4
 80034f4:	e7d9      	b.n	80034aa <LCD_BCM_1_item+0x46>
        LCD_ShowNum(g_BCM_1[item]);
 80034f6:	4b05      	ldr	r3, [pc, #20]	@ (800350c <LCD_BCM_1_item+0xa8>)
 80034f8:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80034fc:	f7ff fd30 	bl	8002f60 <LCD_ShowNum>
 8003500:	e7ec      	b.n	80034dc <LCD_BCM_1_item+0x78>
 8003502:	bf00      	nop
 8003504:	20003c80 	.word	0x20003c80
 8003508:	20003bc0 	.word	0x20003bc0
 800350c:	20006578 	.word	0x20006578

08003510 <LCD_BCM_3_item>:

void LCD_BCM_3_item(uint8_t item, int16_t value)
{
 8003510:	b538      	push	{r3, r4, r5, lr}
    item = GET_MENU(item, BCM_3_ITEM_MAX);
 8003512:	4604      	mov	r4, r0
 8003514:	b108      	cbz	r0, 800351a <LCD_BCM_3_item+0xa>
 8003516:	1e44      	subs	r4, r0, #1
 8003518:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 800351a:	2083      	movs	r0, #131	@ 0x83
 800351c:	f7ff fbfa 	bl	8002d14 <write_com>
    hzkdis(BCM_3Item[item]);
 8003520:	4625      	mov	r5, r4
 8003522:	4b1f      	ldr	r3, [pc, #124]	@ (80035a0 <LCD_BCM_3_item+0x90>)
 8003524:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003528:	f7ff fc24 	bl	8002d74 <hzkdis>
    write_com(0x93);
 800352c:	2093      	movs	r0, #147	@ 0x93
 800352e:	f7ff fbf1 	bl	8002d14 <write_com>
    if (strcmp(BCM_3Value[item][0], "") != 0) {
 8003532:	01a3      	lsls	r3, r4, #6
 8003534:	4a1b      	ldr	r2, [pc, #108]	@ (80035a4 <LCD_BCM_3_item+0x94>)
 8003536:	58d3      	ldr	r3, [r2, r3]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	b32b      	cbz	r3, 8003588 <LCD_BCM_3_item+0x78>
        hzkdis(BCM_3Value[item][g_BCM_3[item]]);
 800353c:	4b1a      	ldr	r3, [pc, #104]	@ (80035a8 <LCD_BCM_3_item+0x98>)
 800353e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003542:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003546:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800354a:	f7ff fc13 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_BCM_3[item]);
    }

    item = GET_MENU(item+1, BCM_3_ITEM_MAX);
    write_com(0x8b);
 800354e:	208b      	movs	r0, #139	@ 0x8b
 8003550:	f7ff fbe0 	bl	8002d14 <write_com>
    hzkdis(BCM_3Item[item]);
 8003554:	4b12      	ldr	r3, [pc, #72]	@ (80035a0 <LCD_BCM_3_item+0x90>)
 8003556:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800355a:	f7ff fc0b 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 800355e:	209b      	movs	r0, #155	@ 0x9b
 8003560:	f7ff fbd8 	bl	8002d14 <write_com>
    if (strcmp(BCM_3Value[item][0], "") != 0) {
 8003564:	01ab      	lsls	r3, r5, #6
 8003566:	4a0f      	ldr	r2, [pc, #60]	@ (80035a4 <LCD_BCM_3_item+0x94>)
 8003568:	58d3      	ldr	r3, [r2, r3]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	b193      	cbz	r3, 8003594 <LCD_BCM_3_item+0x84>
        hzkdis(BCM_3Value[item][g_BCM_3[item]]);
 800356e:	4b0e      	ldr	r3, [pc, #56]	@ (80035a8 <LCD_BCM_3_item+0x98>)
 8003570:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8003574:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 8003578:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800357c:	f7ff fbfa 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_BCM_3[item]);
    }
    write_com(0x93);
 8003580:	2093      	movs	r0, #147	@ 0x93
 8003582:	f7ff fbc7 	bl	8002d14 <write_com>
}
 8003586:	bd38      	pop	{r3, r4, r5, pc}
        LCD_ShowNum(g_BCM_3[item]);
 8003588:	4b07      	ldr	r3, [pc, #28]	@ (80035a8 <LCD_BCM_3_item+0x98>)
 800358a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800358e:	f7ff fce7 	bl	8002f60 <LCD_ShowNum>
 8003592:	e7dc      	b.n	800354e <LCD_BCM_3_item+0x3e>
        LCD_ShowNum(g_BCM_3[item]);
 8003594:	4b04      	ldr	r3, [pc, #16]	@ (80035a8 <LCD_BCM_3_item+0x98>)
 8003596:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 800359a:	f7ff fce1 	bl	8002f60 <LCD_ShowNum>
 800359e:	e7ef      	b.n	8003580 <LCD_BCM_3_item+0x70>
 80035a0:	20003bb4 	.word	0x20003bb4
 80035a4:	20003b74 	.word	0x20003b74
 80035a8:	20006574 	.word	0x20006574

080035ac <LCD_PEPS_3_item>:
}



void LCD_PEPS_3_item(uint8_t item, int16_t value)
{
 80035ac:	b510      	push	{r4, lr}
 80035ae:	4604      	mov	r4, r0
    item = GET_MENU(item, PEPS_3_ITEM_MAX);
 80035b0:	2802      	cmp	r0, #2
 80035b2:	d901      	bls.n	80035b8 <LCD_PEPS_3_item+0xc>
 80035b4:	1ec4      	subs	r4, r0, #3
 80035b6:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 80035b8:	2083      	movs	r0, #131	@ 0x83
 80035ba:	f7ff fbab 	bl	8002d14 <write_com>
    hzkdis(PEPS_3Item[item]);
 80035be:	4b23      	ldr	r3, [pc, #140]	@ (800364c <LCD_PEPS_3_item+0xa0>)
 80035c0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80035c4:	f7ff fbd6 	bl	8002d74 <hzkdis>
    write_com(0x93);
 80035c8:	2093      	movs	r0, #147	@ 0x93
 80035ca:	f7ff fba3 	bl	8002d14 <write_com>
    if (strcmp(PEPS_3Value[item][0], "") != 0) {
 80035ce:	01a3      	lsls	r3, r4, #6
 80035d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003650 <LCD_PEPS_3_item+0xa4>)
 80035d2:	58d3      	ldr	r3, [r2, r3]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b34b      	cbz	r3, 800362c <LCD_PEPS_3_item+0x80>
        hzkdis(PEPS_3Value[item][g_PEPS_3[item]]);
 80035d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003654 <LCD_PEPS_3_item+0xa8>)
 80035da:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80035de:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80035e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80035e6:	f7ff fbc5 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_PEPS_3[item]);
    }

    item = GET_MENU(item+1, PEPS_3_ITEM_MAX);
 80035ea:	2c01      	cmp	r4, #1
 80035ec:	d924      	bls.n	8003638 <LCD_PEPS_3_item+0x8c>
 80035ee:	3c02      	subs	r4, #2
 80035f0:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80035f2:	208b      	movs	r0, #139	@ 0x8b
 80035f4:	f7ff fb8e 	bl	8002d14 <write_com>
    hzkdis(PEPS_3Item[item]);
 80035f8:	4b14      	ldr	r3, [pc, #80]	@ (800364c <LCD_PEPS_3_item+0xa0>)
 80035fa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80035fe:	f7ff fbb9 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8003602:	209b      	movs	r0, #155	@ 0x9b
 8003604:	f7ff fb86 	bl	8002d14 <write_com>
    if (strcmp(PEPS_3Value[item][0], "") != 0) {
 8003608:	01a3      	lsls	r3, r4, #6
 800360a:	4a11      	ldr	r2, [pc, #68]	@ (8003650 <LCD_PEPS_3_item+0xa4>)
 800360c:	58d3      	ldr	r3, [r2, r3]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	b1ab      	cbz	r3, 800363e <LCD_PEPS_3_item+0x92>
        hzkdis(PEPS_3Value[item][g_PEPS_3[item]]);
 8003612:	4b10      	ldr	r3, [pc, #64]	@ (8003654 <LCD_PEPS_3_item+0xa8>)
 8003614:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003618:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800361c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003620:	f7ff fba8 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_PEPS_3[item]);
    }
    write_com(0x93);
 8003624:	2093      	movs	r0, #147	@ 0x93
 8003626:	f7ff fb75 	bl	8002d14 <write_com>
}
 800362a:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_PEPS_3[item]);
 800362c:	4b09      	ldr	r3, [pc, #36]	@ (8003654 <LCD_PEPS_3_item+0xa8>)
 800362e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003632:	f7ff fc95 	bl	8002f60 <LCD_ShowNum>
 8003636:	e7d8      	b.n	80035ea <LCD_PEPS_3_item+0x3e>
    item = GET_MENU(item+1, PEPS_3_ITEM_MAX);
 8003638:	3401      	adds	r4, #1
 800363a:	b2e4      	uxtb	r4, r4
 800363c:	e7d9      	b.n	80035f2 <LCD_PEPS_3_item+0x46>
        LCD_ShowNum(g_PEPS_3[item]);
 800363e:	4b05      	ldr	r3, [pc, #20]	@ (8003654 <LCD_PEPS_3_item+0xa8>)
 8003640:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003644:	f7ff fc8c 	bl	8002f60 <LCD_ShowNum>
 8003648:	e7ec      	b.n	8003624 <LCD_PEPS_3_item+0x78>
 800364a:	bf00      	nop
 800364c:	20003530 	.word	0x20003530
 8003650:	20003470 	.word	0x20003470
 8003654:	20006568 	.word	0x20006568

08003658 <LCD_TBOX_2_item>:
    }
    write_com(0x93);
}

void LCD_TBOX_2_item(uint8_t item, int16_t value)
{
 8003658:	b510      	push	{r4, lr}
 800365a:	4604      	mov	r4, r0
    item = GET_MENU(item, TBOX_2_ITEM_MAX);
 800365c:	2801      	cmp	r0, #1
 800365e:	d901      	bls.n	8003664 <LCD_TBOX_2_item+0xc>
 8003660:	1e84      	subs	r4, r0, #2
 8003662:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003664:	2083      	movs	r0, #131	@ 0x83
 8003666:	f7ff fb55 	bl	8002d14 <write_com>
    hzkdis(TBOX_2Item[item]);
 800366a:	4b22      	ldr	r3, [pc, #136]	@ (80036f4 <LCD_TBOX_2_item+0x9c>)
 800366c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003670:	f7ff fb80 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8003674:	2093      	movs	r0, #147	@ 0x93
 8003676:	f7ff fb4d 	bl	8002d14 <write_com>
    if (strcmp(TBOX_2Value[item][0], "") != 0) {
 800367a:	01a3      	lsls	r3, r4, #6
 800367c:	4a1e      	ldr	r2, [pc, #120]	@ (80036f8 <LCD_TBOX_2_item+0xa0>)
 800367e:	58d3      	ldr	r3, [r2, r3]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	b343      	cbz	r3, 80036d6 <LCD_TBOX_2_item+0x7e>
        hzkdis(TBOX_2Value[item][g_TBOX_2[item]]);
 8003684:	4b1d      	ldr	r3, [pc, #116]	@ (80036fc <LCD_TBOX_2_item+0xa4>)
 8003686:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800368a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800368e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003692:	f7ff fb6f 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_TBOX_2[item]);
    }

    item = GET_MENU(item+1, TBOX_2_ITEM_MAX);
 8003696:	b324      	cbz	r4, 80036e2 <LCD_TBOX_2_item+0x8a>
 8003698:	3c01      	subs	r4, #1
 800369a:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800369c:	208b      	movs	r0, #139	@ 0x8b
 800369e:	f7ff fb39 	bl	8002d14 <write_com>
    hzkdis(TBOX_2Item[item]);
 80036a2:	4b14      	ldr	r3, [pc, #80]	@ (80036f4 <LCD_TBOX_2_item+0x9c>)
 80036a4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80036a8:	f7ff fb64 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 80036ac:	209b      	movs	r0, #155	@ 0x9b
 80036ae:	f7ff fb31 	bl	8002d14 <write_com>
    if (strcmp(TBOX_2Value[item][0], "") != 0) {
 80036b2:	01a3      	lsls	r3, r4, #6
 80036b4:	4a10      	ldr	r2, [pc, #64]	@ (80036f8 <LCD_TBOX_2_item+0xa0>)
 80036b6:	58d3      	ldr	r3, [r2, r3]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	b1ab      	cbz	r3, 80036e8 <LCD_TBOX_2_item+0x90>
        hzkdis(TBOX_2Value[item][g_TBOX_2[item]]);
 80036bc:	4b0f      	ldr	r3, [pc, #60]	@ (80036fc <LCD_TBOX_2_item+0xa4>)
 80036be:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80036c2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80036c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80036ca:	f7ff fb53 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_TBOX_2[item]);
    }
    write_com(0x93);
 80036ce:	2093      	movs	r0, #147	@ 0x93
 80036d0:	f7ff fb20 	bl	8002d14 <write_com>
}
 80036d4:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_TBOX_2[item]);
 80036d6:	4b09      	ldr	r3, [pc, #36]	@ (80036fc <LCD_TBOX_2_item+0xa4>)
 80036d8:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80036dc:	f7ff fc40 	bl	8002f60 <LCD_ShowNum>
 80036e0:	e7d9      	b.n	8003696 <LCD_TBOX_2_item+0x3e>
    item = GET_MENU(item+1, TBOX_2_ITEM_MAX);
 80036e2:	3401      	adds	r4, #1
 80036e4:	b2e4      	uxtb	r4, r4
 80036e6:	e7d9      	b.n	800369c <LCD_TBOX_2_item+0x44>
        LCD_ShowNum(g_TBOX_2[item]);
 80036e8:	4b04      	ldr	r3, [pc, #16]	@ (80036fc <LCD_TBOX_2_item+0xa4>)
 80036ea:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80036ee:	f7ff fc37 	bl	8002f60 <LCD_ShowNum>
 80036f2:	e7ec      	b.n	80036ce <LCD_TBOX_2_item+0x76>
 80036f4:	200032bc 	.word	0x200032bc
 80036f8:	2000323c 	.word	0x2000323c
 80036fc:	20006558 	.word	0x20006558

08003700 <LCD_TBOX_4_item>:

void LCD_TBOX_4_item(uint8_t item, int16_t value)
{
 8003700:	b538      	push	{r3, r4, r5, lr}
    item = GET_MENU(item, TBOX_4_ITEM_MAX);
 8003702:	4604      	mov	r4, r0
 8003704:	b108      	cbz	r0, 800370a <LCD_TBOX_4_item+0xa>
 8003706:	1e44      	subs	r4, r0, #1
 8003708:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 800370a:	2083      	movs	r0, #131	@ 0x83
 800370c:	f7ff fb02 	bl	8002d14 <write_com>
    hzkdis(TBOX_4Item[item]);
 8003710:	4625      	mov	r5, r4
 8003712:	4b1f      	ldr	r3, [pc, #124]	@ (8003790 <LCD_TBOX_4_item+0x90>)
 8003714:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003718:	f7ff fb2c 	bl	8002d74 <hzkdis>
    write_com(0x93);
 800371c:	2093      	movs	r0, #147	@ 0x93
 800371e:	f7ff faf9 	bl	8002d14 <write_com>
    if (strcmp(TBOX_4Value[item][0], "") != 0) {
 8003722:	01a3      	lsls	r3, r4, #6
 8003724:	4a1b      	ldr	r2, [pc, #108]	@ (8003794 <LCD_TBOX_4_item+0x94>)
 8003726:	58d3      	ldr	r3, [r2, r3]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	b32b      	cbz	r3, 8003778 <LCD_TBOX_4_item+0x78>
        hzkdis(TBOX_4Value[item][g_TBOX_4[item]]);
 800372c:	4b1a      	ldr	r3, [pc, #104]	@ (8003798 <LCD_TBOX_4_item+0x98>)
 800372e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003732:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003736:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800373a:	f7ff fb1b 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_TBOX_4[item]);
    }

    item = GET_MENU(item+1, TBOX_4_ITEM_MAX);
    write_com(0x8b);
 800373e:	208b      	movs	r0, #139	@ 0x8b
 8003740:	f7ff fae8 	bl	8002d14 <write_com>
    hzkdis(TBOX_4Item[item]);
 8003744:	4b12      	ldr	r3, [pc, #72]	@ (8003790 <LCD_TBOX_4_item+0x90>)
 8003746:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800374a:	f7ff fb13 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 800374e:	209b      	movs	r0, #155	@ 0x9b
 8003750:	f7ff fae0 	bl	8002d14 <write_com>
    if (strcmp(TBOX_4Value[item][0], "") != 0) {
 8003754:	01ab      	lsls	r3, r5, #6
 8003756:	4a0f      	ldr	r2, [pc, #60]	@ (8003794 <LCD_TBOX_4_item+0x94>)
 8003758:	58d3      	ldr	r3, [r2, r3]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	b193      	cbz	r3, 8003784 <LCD_TBOX_4_item+0x84>
        hzkdis(TBOX_4Value[item][g_TBOX_4[item]]);
 800375e:	4b0e      	ldr	r3, [pc, #56]	@ (8003798 <LCD_TBOX_4_item+0x98>)
 8003760:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8003764:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 8003768:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800376c:	f7ff fb02 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_TBOX_4[item]);
    }
    write_com(0x93);
 8003770:	2093      	movs	r0, #147	@ 0x93
 8003772:	f7ff facf 	bl	8002d14 <write_com>
}
 8003776:	bd38      	pop	{r3, r4, r5, pc}
        LCD_ShowNum(g_TBOX_4[item]);
 8003778:	4b07      	ldr	r3, [pc, #28]	@ (8003798 <LCD_TBOX_4_item+0x98>)
 800377a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800377e:	f7ff fbef 	bl	8002f60 <LCD_ShowNum>
 8003782:	e7dc      	b.n	800373e <LCD_TBOX_4_item+0x3e>
        LCD_ShowNum(g_TBOX_4[item]);
 8003784:	4b04      	ldr	r3, [pc, #16]	@ (8003798 <LCD_TBOX_4_item+0x98>)
 8003786:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 800378a:	f7ff fbe9 	bl	8002f60 <LCD_ShowNum>
 800378e:	e7ef      	b.n	8003770 <LCD_TBOX_4_item+0x70>
 8003790:	20003234 	.word	0x20003234
 8003794:	200031f4 	.word	0x200031f4
 8003798:	20006554 	.word	0x20006554

0800379c <LCD_GW_PC_7_item>:
    }
    write_com(0x93);
}

void LCD_GW_PC_7_item(uint8_t item, int16_t value)
{
 800379c:	b510      	push	{r4, lr}
 800379e:	4604      	mov	r4, r0
    item = GET_MENU(item, GW_PC_7_ITEM_MAX);
 80037a0:	2808      	cmp	r0, #8
 80037a2:	d902      	bls.n	80037aa <LCD_GW_PC_7_item+0xe>
 80037a4:	f1a0 0409 	sub.w	r4, r0, #9
 80037a8:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 80037aa:	2083      	movs	r0, #131	@ 0x83
 80037ac:	f7ff fab2 	bl	8002d14 <write_com>
    hzkdis(GW_PC_7Item[item]);
 80037b0:	4b22      	ldr	r3, [pc, #136]	@ (800383c <LCD_GW_PC_7_item+0xa0>)
 80037b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80037b6:	f7ff fadd 	bl	8002d74 <hzkdis>
    write_com(0x93);
 80037ba:	2093      	movs	r0, #147	@ 0x93
 80037bc:	f7ff faaa 	bl	8002d14 <write_com>
    if (strcmp(GW_PC_7Value[item][0], "") != 0) {
 80037c0:	01a3      	lsls	r3, r4, #6
 80037c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003840 <LCD_GW_PC_7_item+0xa4>)
 80037c4:	58d3      	ldr	r3, [r2, r3]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	b34b      	cbz	r3, 800381e <LCD_GW_PC_7_item+0x82>
        hzkdis(GW_PC_7Value[item][g_GW_PC_7[item]]);
 80037ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003844 <LCD_GW_PC_7_item+0xa8>)
 80037cc:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80037d0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80037d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80037d8:	f7ff facc 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_PC_7[item]);
    }

    item = GET_MENU(item+1, GW_PC_7_ITEM_MAX);
 80037dc:	2c07      	cmp	r4, #7
 80037de:	d924      	bls.n	800382a <LCD_GW_PC_7_item+0x8e>
 80037e0:	3c08      	subs	r4, #8
 80037e2:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80037e4:	208b      	movs	r0, #139	@ 0x8b
 80037e6:	f7ff fa95 	bl	8002d14 <write_com>
    hzkdis(GW_PC_7Item[item]);
 80037ea:	4b14      	ldr	r3, [pc, #80]	@ (800383c <LCD_GW_PC_7_item+0xa0>)
 80037ec:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80037f0:	f7ff fac0 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 80037f4:	209b      	movs	r0, #155	@ 0x9b
 80037f6:	f7ff fa8d 	bl	8002d14 <write_com>
    if (strcmp(GW_PC_7Value[item][0], "") != 0) {
 80037fa:	01a3      	lsls	r3, r4, #6
 80037fc:	4a10      	ldr	r2, [pc, #64]	@ (8003840 <LCD_GW_PC_7_item+0xa4>)
 80037fe:	58d3      	ldr	r3, [r2, r3]
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	b1ab      	cbz	r3, 8003830 <LCD_GW_PC_7_item+0x94>
        hzkdis(GW_PC_7Value[item][g_GW_PC_7[item]]);
 8003804:	4b0f      	ldr	r3, [pc, #60]	@ (8003844 <LCD_GW_PC_7_item+0xa8>)
 8003806:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800380a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800380e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003812:	f7ff faaf 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_PC_7[item]);
    }
    write_com(0x93);
 8003816:	2093      	movs	r0, #147	@ 0x93
 8003818:	f7ff fa7c 	bl	8002d14 <write_com>
}
 800381c:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_GW_PC_7[item]);
 800381e:	4b09      	ldr	r3, [pc, #36]	@ (8003844 <LCD_GW_PC_7_item+0xa8>)
 8003820:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003824:	f7ff fb9c 	bl	8002f60 <LCD_ShowNum>
 8003828:	e7d8      	b.n	80037dc <LCD_GW_PC_7_item+0x40>
    item = GET_MENU(item+1, GW_PC_7_ITEM_MAX);
 800382a:	3401      	adds	r4, #1
 800382c:	b2e4      	uxtb	r4, r4
 800382e:	e7d9      	b.n	80037e4 <LCD_GW_PC_7_item+0x48>
        LCD_ShowNum(g_GW_PC_7[item]);
 8003830:	4b04      	ldr	r3, [pc, #16]	@ (8003844 <LCD_GW_PC_7_item+0xa8>)
 8003832:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003836:	f7ff fb93 	bl	8002f60 <LCD_ShowNum>
 800383a:	e7ec      	b.n	8003816 <LCD_GW_PC_7_item+0x7a>
 800383c:	20001b18 	.word	0x20001b18
 8003840:	200018d8 	.word	0x200018d8
 8003844:	200064d8 	.word	0x200064d8

08003848 <LCD_GW_PC_4_item>:

void LCD_GW_PC_4_item(uint8_t item, int16_t value)
{
 8003848:	b510      	push	{r4, lr}
 800384a:	4604      	mov	r4, r0
    item = GET_MENU(item, GW_PC_4_ITEM_MAX);
 800384c:	2802      	cmp	r0, #2
 800384e:	d901      	bls.n	8003854 <LCD_GW_PC_4_item+0xc>
 8003850:	1ec4      	subs	r4, r0, #3
 8003852:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003854:	2083      	movs	r0, #131	@ 0x83
 8003856:	f7ff fa5d 	bl	8002d14 <write_com>
    hzkdis(GW_PC_4Item[item]);
 800385a:	4b23      	ldr	r3, [pc, #140]	@ (80038e8 <LCD_GW_PC_4_item+0xa0>)
 800385c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003860:	f7ff fa88 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8003864:	2093      	movs	r0, #147	@ 0x93
 8003866:	f7ff fa55 	bl	8002d14 <write_com>
    if (strcmp(GW_PC_4Value[item][0], "") != 0) {
 800386a:	01a3      	lsls	r3, r4, #6
 800386c:	4a1f      	ldr	r2, [pc, #124]	@ (80038ec <LCD_GW_PC_4_item+0xa4>)
 800386e:	58d3      	ldr	r3, [r2, r3]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	b34b      	cbz	r3, 80038c8 <LCD_GW_PC_4_item+0x80>
        hzkdis(GW_PC_4Value[item][g_GW_PC_4[item]]);
 8003874:	4b1e      	ldr	r3, [pc, #120]	@ (80038f0 <LCD_GW_PC_4_item+0xa8>)
 8003876:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800387a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800387e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003882:	f7ff fa77 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_PC_4[item]);
    }

    item = GET_MENU(item+1, GW_PC_4_ITEM_MAX);
 8003886:	2c01      	cmp	r4, #1
 8003888:	d924      	bls.n	80038d4 <LCD_GW_PC_4_item+0x8c>
 800388a:	3c02      	subs	r4, #2
 800388c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800388e:	208b      	movs	r0, #139	@ 0x8b
 8003890:	f7ff fa40 	bl	8002d14 <write_com>
    hzkdis(GW_PC_4Item[item]);
 8003894:	4b14      	ldr	r3, [pc, #80]	@ (80038e8 <LCD_GW_PC_4_item+0xa0>)
 8003896:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800389a:	f7ff fa6b 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 800389e:	209b      	movs	r0, #155	@ 0x9b
 80038a0:	f7ff fa38 	bl	8002d14 <write_com>
    if (strcmp(GW_PC_4Value[item][0], "") != 0) {
 80038a4:	01a3      	lsls	r3, r4, #6
 80038a6:	4a11      	ldr	r2, [pc, #68]	@ (80038ec <LCD_GW_PC_4_item+0xa4>)
 80038a8:	58d3      	ldr	r3, [r2, r3]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	b1ab      	cbz	r3, 80038da <LCD_GW_PC_4_item+0x92>
        hzkdis(GW_PC_4Value[item][g_GW_PC_4[item]]);
 80038ae:	4b10      	ldr	r3, [pc, #64]	@ (80038f0 <LCD_GW_PC_4_item+0xa8>)
 80038b0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80038b4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80038b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80038bc:	f7ff fa5a 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_PC_4[item]);
    }
    write_com(0x93);
 80038c0:	2093      	movs	r0, #147	@ 0x93
 80038c2:	f7ff fa27 	bl	8002d14 <write_com>
}
 80038c6:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_GW_PC_4[item]);
 80038c8:	4b09      	ldr	r3, [pc, #36]	@ (80038f0 <LCD_GW_PC_4_item+0xa8>)
 80038ca:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80038ce:	f7ff fb47 	bl	8002f60 <LCD_ShowNum>
 80038d2:	e7d8      	b.n	8003886 <LCD_GW_PC_4_item+0x3e>
    item = GET_MENU(item+1, GW_PC_4_ITEM_MAX);
 80038d4:	3401      	adds	r4, #1
 80038d6:	b2e4      	uxtb	r4, r4
 80038d8:	e7d9      	b.n	800388e <LCD_GW_PC_4_item+0x46>
        LCD_ShowNum(g_GW_PC_4[item]);
 80038da:	4b05      	ldr	r3, [pc, #20]	@ (80038f0 <LCD_GW_PC_4_item+0xa8>)
 80038dc:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80038e0:	f7ff fb3e 	bl	8002f60 <LCD_ShowNum>
 80038e4:	e7ec      	b.n	80038c0 <LCD_GW_PC_4_item+0x78>
 80038e6:	bf00      	nop
 80038e8:	200018b8 	.word	0x200018b8
 80038ec:	200017f8 	.word	0x200017f8
 80038f0:	200064d0 	.word	0x200064d0

080038f4 <LCD_GW_BD_9_item>:

void LCD_GW_BD_9_item(uint8_t item, int16_t value)
{
 80038f4:	b510      	push	{r4, lr}
 80038f6:	4604      	mov	r4, r0


    item = GET_MENU(item, GW_BD_9_ITEM_MAX);
 80038f8:	2818      	cmp	r0, #24
 80038fa:	d902      	bls.n	8003902 <LCD_GW_BD_9_item+0xe>
 80038fc:	f1a0 0419 	sub.w	r4, r0, #25
 8003900:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003902:	2083      	movs	r0, #131	@ 0x83
 8003904:	f7ff fa06 	bl	8002d14 <write_com>
    hzkdis(GW_BD_9Item[item]);
 8003908:	4b22      	ldr	r3, [pc, #136]	@ (8003994 <LCD_GW_BD_9_item+0xa0>)
 800390a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800390e:	f7ff fa31 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8003912:	2093      	movs	r0, #147	@ 0x93
 8003914:	f7ff f9fe 	bl	8002d14 <write_com>
    if (strcmp(GW_BD_9Value[item][0], "") != 0) {
 8003918:	01a3      	lsls	r3, r4, #6
 800391a:	4a1f      	ldr	r2, [pc, #124]	@ (8003998 <LCD_GW_BD_9_item+0xa4>)
 800391c:	58d3      	ldr	r3, [r2, r3]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	b34b      	cbz	r3, 8003976 <LCD_GW_BD_9_item+0x82>
        hzkdis(GW_BD_9Value[item][g_GW_BD_9[item]]);
 8003922:	4b1e      	ldr	r3, [pc, #120]	@ (800399c <LCD_GW_BD_9_item+0xa8>)
 8003924:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003928:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800392c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003930:	f7ff fa20 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_BD_9[item]);
    }

    item = GET_MENU(item+1, GW_BD_9_ITEM_MAX);
 8003934:	2c17      	cmp	r4, #23
 8003936:	d924      	bls.n	8003982 <LCD_GW_BD_9_item+0x8e>
 8003938:	3c18      	subs	r4, #24
 800393a:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800393c:	208b      	movs	r0, #139	@ 0x8b
 800393e:	f7ff f9e9 	bl	8002d14 <write_com>
    hzkdis(GW_BD_9Item[item]);
 8003942:	4b14      	ldr	r3, [pc, #80]	@ (8003994 <LCD_GW_BD_9_item+0xa0>)
 8003944:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003948:	f7ff fa14 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 800394c:	209b      	movs	r0, #155	@ 0x9b
 800394e:	f7ff f9e1 	bl	8002d14 <write_com>
    if (strcmp(GW_BD_9Value[item][0], "") != 0) {
 8003952:	01a3      	lsls	r3, r4, #6
 8003954:	4a10      	ldr	r2, [pc, #64]	@ (8003998 <LCD_GW_BD_9_item+0xa4>)
 8003956:	58d3      	ldr	r3, [r2, r3]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	b1ab      	cbz	r3, 8003988 <LCD_GW_BD_9_item+0x94>
        hzkdis(GW_BD_9Value[item][g_GW_BD_9[item]]);
 800395c:	4b0f      	ldr	r3, [pc, #60]	@ (800399c <LCD_GW_BD_9_item+0xa8>)
 800395e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003962:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003966:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800396a:	f7ff fa03 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_BD_9[item]);
    }
    write_com(0x93);
 800396e:	2093      	movs	r0, #147	@ 0x93
 8003970:	f7ff f9d0 	bl	8002d14 <write_com>
}
 8003974:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_GW_BD_9[item]);
 8003976:	4b09      	ldr	r3, [pc, #36]	@ (800399c <LCD_GW_BD_9_item+0xa8>)
 8003978:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800397c:	f7ff faf0 	bl	8002f60 <LCD_ShowNum>
 8003980:	e7d8      	b.n	8003934 <LCD_GW_BD_9_item+0x40>
    item = GET_MENU(item+1, GW_BD_9_ITEM_MAX);
 8003982:	3401      	adds	r4, #1
 8003984:	b2e4      	uxtb	r4, r4
 8003986:	e7d9      	b.n	800393c <LCD_GW_BD_9_item+0x48>
        LCD_ShowNum(g_GW_BD_9[item]);
 8003988:	4b04      	ldr	r3, [pc, #16]	@ (800399c <LCD_GW_BD_9_item+0xa8>)
 800398a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800398e:	f7ff fae7 	bl	8002f60 <LCD_ShowNum>
 8003992:	e7ec      	b.n	800396e <LCD_GW_BD_9_item+0x7a>
 8003994:	2000178c 	.word	0x2000178c
 8003998:	2000114c 	.word	0x2000114c
 800399c:	200010e4 	.word	0x200010e4

080039a0 <LCD_GW_BD_24_item>:
    }
    write_com(0x93);
}

void LCD_GW_BD_24_item(uint8_t item, int16_t value)
{
 80039a0:	b538      	push	{r3, r4, r5, lr}
 80039a2:	4604      	mov	r4, r0
    item = GET_MENU(item, GW_BD_24_ITEM_MAX);
 80039a4:	2808      	cmp	r0, #8
 80039a6:	d902      	bls.n	80039ae <LCD_GW_BD_24_item+0xe>
 80039a8:	f1a0 0409 	sub.w	r4, r0, #9
 80039ac:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 80039ae:	2083      	movs	r0, #131	@ 0x83
 80039b0:	f7ff f9b0 	bl	8002d14 <write_com>
    hzkdis(GW_BD_24Item[item]);
 80039b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003a70 <LCD_GW_BD_24_item+0xd0>)
 80039b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80039ba:	f7ff f9db 	bl	8002d74 <hzkdis>
    write_com(0x93);
 80039be:	2093      	movs	r0, #147	@ 0x93
 80039c0:	f7ff f9a8 	bl	8002d14 <write_com>
    if (strcmp(GW_BD_24Value[item][0], "") != 0) {
 80039c4:	01a3      	lsls	r3, r4, #6
 80039c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003a74 <LCD_GW_BD_24_item+0xd4>)
 80039c8:	58d3      	ldr	r3, [r2, r3]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	bb63      	cbnz	r3, 8003a28 <LCD_GW_BD_24_item+0x88>
        hzkdis(GW_BD_24Value[item][g_GW_BD_24[item]]);
    } else {
    	if(item >= 4 && item <= 7){
 80039ce:	1f23      	subs	r3, r4, #4
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d832      	bhi.n	8003a3c <LCD_GW_BD_24_item+0x9c>
    		LCD_ShowNum(g_GW_BD_24[item] * 4);
 80039d6:	4b28      	ldr	r3, [pc, #160]	@ (8003a78 <LCD_GW_BD_24_item+0xd8>)
 80039d8:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80039dc:	0080      	lsls	r0, r0, #2
 80039de:	f7ff fabf 	bl	8002f60 <LCD_ShowNum>
    	else{
    		LCD_ShowNum(g_GW_BD_24[item]);
    	}
    }

    item = GET_MENU(item+1, GW_BD_24_ITEM_MAX);
 80039e2:	2c07      	cmp	r4, #7
 80039e4:	d930      	bls.n	8003a48 <LCD_GW_BD_24_item+0xa8>
 80039e6:	3c08      	subs	r4, #8
 80039e8:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80039ea:	208b      	movs	r0, #139	@ 0x8b
 80039ec:	f7ff f992 	bl	8002d14 <write_com>
    hzkdis(GW_BD_24Item[item]);
 80039f0:	4625      	mov	r5, r4
 80039f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003a70 <LCD_GW_BD_24_item+0xd0>)
 80039f4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80039f8:	f7ff f9bc 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 80039fc:	209b      	movs	r0, #155	@ 0x9b
 80039fe:	f7ff f989 	bl	8002d14 <write_com>
    if (strcmp(GW_BD_24Value[item][0], "") != 0) {
 8003a02:	01a3      	lsls	r3, r4, #6
 8003a04:	4a1b      	ldr	r2, [pc, #108]	@ (8003a74 <LCD_GW_BD_24_item+0xd4>)
 8003a06:	58d3      	ldr	r3, [r2, r3]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	bb03      	cbnz	r3, 8003a4e <LCD_GW_BD_24_item+0xae>
        hzkdis(GW_BD_24Value[item][g_GW_BD_24[item]]);
    } else {
    	if(item >= 4 && item <= 7){
 8003a0c:	3c04      	subs	r4, #4
 8003a0e:	b2e4      	uxtb	r4, r4
 8003a10:	2c03      	cmp	r4, #3
 8003a12:	d826      	bhi.n	8003a62 <LCD_GW_BD_24_item+0xc2>
    		LCD_ShowNum(g_GW_BD_24[item] * 4);
 8003a14:	4b18      	ldr	r3, [pc, #96]	@ (8003a78 <LCD_GW_BD_24_item+0xd8>)
 8003a16:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8003a1a:	0080      	lsls	r0, r0, #2
 8003a1c:	f7ff faa0 	bl	8002f60 <LCD_ShowNum>
    	}
    	else{
    		LCD_ShowNum(g_GW_BD_24[item]);
    	}
    }
    write_com(0x93);
 8003a20:	2093      	movs	r0, #147	@ 0x93
 8003a22:	f7ff f977 	bl	8002d14 <write_com>
}
 8003a26:	bd38      	pop	{r3, r4, r5, pc}
        hzkdis(GW_BD_24Value[item][g_GW_BD_24[item]]);
 8003a28:	4b13      	ldr	r3, [pc, #76]	@ (8003a78 <LCD_GW_BD_24_item+0xd8>)
 8003a2a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003a2e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003a32:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003a36:	f7ff f99d 	bl	8002d74 <hzkdis>
 8003a3a:	e7d2      	b.n	80039e2 <LCD_GW_BD_24_item+0x42>
    		LCD_ShowNum(g_GW_BD_24[item]);
 8003a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a78 <LCD_GW_BD_24_item+0xd8>)
 8003a3e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003a42:	f7ff fa8d 	bl	8002f60 <LCD_ShowNum>
 8003a46:	e7cc      	b.n	80039e2 <LCD_GW_BD_24_item+0x42>
    item = GET_MENU(item+1, GW_BD_24_ITEM_MAX);
 8003a48:	3401      	adds	r4, #1
 8003a4a:	b2e4      	uxtb	r4, r4
 8003a4c:	e7cd      	b.n	80039ea <LCD_GW_BD_24_item+0x4a>
        hzkdis(GW_BD_24Value[item][g_GW_BD_24[item]]);
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a78 <LCD_GW_BD_24_item+0xd8>)
 8003a50:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003a54:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003a58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003a5c:	f7ff f98a 	bl	8002d74 <hzkdis>
 8003a60:	e7de      	b.n	8003a20 <LCD_GW_BD_24_item+0x80>
    		LCD_ShowNum(g_GW_BD_24[item]);
 8003a62:	4b05      	ldr	r3, [pc, #20]	@ (8003a78 <LCD_GW_BD_24_item+0xd8>)
 8003a64:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8003a68:	f7ff fa7a 	bl	8002f60 <LCD_ShowNum>
 8003a6c:	e7d8      	b.n	8003a20 <LCD_GW_BD_24_item+0x80>
 8003a6e:	bf00      	nop
 8003a70:	20000a44 	.word	0x20000a44
 8003a74:	20000804 	.word	0x20000804
 8003a78:	200064bc 	.word	0x200064bc

08003a7c <LCD_F1_item>:
}



void LCD_F1_item(uint8_t item, int16_t value)
{
 8003a7c:	b510      	push	{r4, lr}
 8003a7e:	4604      	mov	r4, r0
	item = GET_MENU(item, F1_ITEM_MAX);
 8003a80:	2802      	cmp	r0, #2
 8003a82:	d901      	bls.n	8003a88 <LCD_F1_item+0xc>
 8003a84:	1ec4      	subs	r4, r0, #3
 8003a86:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003a88:	2083      	movs	r0, #131	@ 0x83
 8003a8a:	f7ff f943 	bl	8002d14 <write_com>
    hzkdis(F1Item[item]);
 8003a8e:	4b23      	ldr	r3, [pc, #140]	@ (8003b1c <LCD_F1_item+0xa0>)
 8003a90:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003a94:	f7ff f96e 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8003a98:	2093      	movs	r0, #147	@ 0x93
 8003a9a:	f7ff f93b 	bl	8002d14 <write_com>
    if (strcmp(F1Value[item][0], "") != 0) {
 8003a9e:	01a3      	lsls	r3, r4, #6
 8003aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8003b20 <LCD_F1_item+0xa4>)
 8003aa2:	58d3      	ldr	r3, [r2, r3]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	b34b      	cbz	r3, 8003afc <LCD_F1_item+0x80>
        hzkdis(F1Value[item][g_F1[item]]);
 8003aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8003b24 <LCD_F1_item+0xa8>)
 8003aaa:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003aae:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003ab2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003ab6:	f7ff f95d 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F1[item]);
    }
	item = GET_MENU(item + 1, F1_ITEM_MAX);
 8003aba:	2c01      	cmp	r4, #1
 8003abc:	d924      	bls.n	8003b08 <LCD_F1_item+0x8c>
 8003abe:	3c02      	subs	r4, #2
 8003ac0:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003ac2:	208b      	movs	r0, #139	@ 0x8b
 8003ac4:	f7ff f926 	bl	8002d14 <write_com>
    hzkdis(F1Item[item]);
 8003ac8:	4b14      	ldr	r3, [pc, #80]	@ (8003b1c <LCD_F1_item+0xa0>)
 8003aca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003ace:	f7ff f951 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8003ad2:	209b      	movs	r0, #155	@ 0x9b
 8003ad4:	f7ff f91e 	bl	8002d14 <write_com>
    if (strcmp(F1Value[item][0], "") != 0) {
 8003ad8:	01a3      	lsls	r3, r4, #6
 8003ada:	4a11      	ldr	r2, [pc, #68]	@ (8003b20 <LCD_F1_item+0xa4>)
 8003adc:	58d3      	ldr	r3, [r2, r3]
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	b1ab      	cbz	r3, 8003b0e <LCD_F1_item+0x92>
        hzkdis(F1Value[item][g_F1[item]]);
 8003ae2:	4b10      	ldr	r3, [pc, #64]	@ (8003b24 <LCD_F1_item+0xa8>)
 8003ae4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003ae8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003aec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003af0:	f7ff f940 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F1[item]);
    }
    write_com(0x93);
 8003af4:	2093      	movs	r0, #147	@ 0x93
 8003af6:	f7ff f90d 	bl	8002d14 <write_com>
}
 8003afa:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F1[item]);
 8003afc:	4b09      	ldr	r3, [pc, #36]	@ (8003b24 <LCD_F1_item+0xa8>)
 8003afe:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003b02:	f7ff fa2d 	bl	8002f60 <LCD_ShowNum>
 8003b06:	e7d8      	b.n	8003aba <LCD_F1_item+0x3e>
	item = GET_MENU(item + 1, F1_ITEM_MAX);
 8003b08:	3401      	adds	r4, #1
 8003b0a:	b2e4      	uxtb	r4, r4
 8003b0c:	e7d9      	b.n	8003ac2 <LCD_F1_item+0x46>
        LCD_ShowNum(g_F1[item]);
 8003b0e:	4b05      	ldr	r3, [pc, #20]	@ (8003b24 <LCD_F1_item+0xa8>)
 8003b10:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003b14:	f7ff fa24 	bl	8002f60 <LCD_ShowNum>
 8003b18:	e7ec      	b.n	8003af4 <LCD_F1_item+0x78>
 8003b1a:	bf00      	nop
 8003b1c:	200003c8 	.word	0x200003c8
 8003b20:	200063dc 	.word	0x200063dc
 8003b24:	200063d4 	.word	0x200063d4

08003b28 <LCD_F2_item>:

void LCD_F2_item(uint8_t item, int16_t value)
{
 8003b28:	b538      	push	{r3, r4, r5, lr}
 8003b2a:	4604      	mov	r4, r0
	item = GET_MENU(item, F2_ITEM_MAX);
 8003b2c:	2802      	cmp	r0, #2
 8003b2e:	d901      	bls.n	8003b34 <LCD_F2_item+0xc>
 8003b30:	1ec4      	subs	r4, r0, #3
 8003b32:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003b34:	2083      	movs	r0, #131	@ 0x83
 8003b36:	f7ff f8ed 	bl	8002d14 <write_com>
    hzkdis(F2Item[item]);
 8003b3a:	4b28      	ldr	r3, [pc, #160]	@ (8003bdc <LCD_F2_item+0xb4>)
 8003b3c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003b40:	f7ff f918 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8003b44:	2093      	movs	r0, #147	@ 0x93
 8003b46:	f7ff f8e5 	bl	8002d14 <write_com>
    if (strcmp(F2Value[item][0], "") != 0) {
 8003b4a:	01a3      	lsls	r3, r4, #6
 8003b4c:	4a24      	ldr	r2, [pc, #144]	@ (8003be0 <LCD_F2_item+0xb8>)
 8003b4e:	58d3      	ldr	r3, [r2, r3]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	bb3b      	cbnz	r3, 8003ba4 <LCD_F2_item+0x7c>
        hzkdis(F2Value[item][g_F2[item]]);
    } else {
        if(item == EMS_2_EngineSpeed){
 8003b54:	2c03      	cmp	r4, #3
 8003b56:	d02f      	beq.n	8003bb8 <LCD_F2_item+0x90>
            LCD_ShowNum(g_F2[item] * 100);
        }
        else{
        	LCD_ShowNum(g_F2[item]);
 8003b58:	4b22      	ldr	r3, [pc, #136]	@ (8003be4 <LCD_F2_item+0xbc>)
 8003b5a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003b5e:	f7ff f9ff 	bl	8002f60 <LCD_ShowNum>
        }
    }
	item = GET_MENU(item + 1, F2_ITEM_MAX);
 8003b62:	2c01      	cmp	r4, #1
 8003b64:	d931      	bls.n	8003bca <LCD_F2_item+0xa2>
 8003b66:	3c02      	subs	r4, #2
 8003b68:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003b6a:	208b      	movs	r0, #139	@ 0x8b
 8003b6c:	f7ff f8d2 	bl	8002d14 <write_com>
    hzkdis(F2Item[item]);
 8003b70:	4b1a      	ldr	r3, [pc, #104]	@ (8003bdc <LCD_F2_item+0xb4>)
 8003b72:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003b76:	f7ff f8fd 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8003b7a:	209b      	movs	r0, #155	@ 0x9b
 8003b7c:	f7ff f8ca 	bl	8002d14 <write_com>
    if (strcmp(F2Value[item][0], "") != 0) {
 8003b80:	01a3      	lsls	r3, r4, #6
 8003b82:	4a17      	ldr	r2, [pc, #92]	@ (8003be0 <LCD_F2_item+0xb8>)
 8003b84:	58d3      	ldr	r3, [r2, r3]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	b313      	cbz	r3, 8003bd0 <LCD_F2_item+0xa8>
        hzkdis(F2Value[item][g_F2[item]]);
 8003b8a:	4b16      	ldr	r3, [pc, #88]	@ (8003be4 <LCD_F2_item+0xbc>)
 8003b8c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003b90:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003b94:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b98:	f7ff f8ec 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F2[item]);
    }
    write_com(0x93);
 8003b9c:	2093      	movs	r0, #147	@ 0x93
 8003b9e:	f7ff f8b9 	bl	8002d14 <write_com>
}
 8003ba2:	bd38      	pop	{r3, r4, r5, pc}
        hzkdis(F2Value[item][g_F2[item]]);
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8003be4 <LCD_F2_item+0xbc>)
 8003ba6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003baa:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003bae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003bb2:	f7ff f8df 	bl	8002d74 <hzkdis>
 8003bb6:	e7d4      	b.n	8003b62 <LCD_F2_item+0x3a>
            LCD_ShowNum(g_F2[item] * 100);
 8003bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003be4 <LCD_F2_item+0xbc>)
 8003bba:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003bbe:	2064      	movs	r0, #100	@ 0x64
 8003bc0:	fb03 f000 	mul.w	r0, r3, r0
 8003bc4:	f7ff f9cc 	bl	8002f60 <LCD_ShowNum>
 8003bc8:	e7cb      	b.n	8003b62 <LCD_F2_item+0x3a>
	item = GET_MENU(item + 1, F2_ITEM_MAX);
 8003bca:	3401      	adds	r4, #1
 8003bcc:	b2e4      	uxtb	r4, r4
 8003bce:	e7cc      	b.n	8003b6a <LCD_F2_item+0x42>
        LCD_ShowNum(g_F2[item]);
 8003bd0:	4b04      	ldr	r3, [pc, #16]	@ (8003be4 <LCD_F2_item+0xbc>)
 8003bd2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003bd6:	f7ff f9c3 	bl	8002f60 <LCD_ShowNum>
 8003bda:	e7df      	b.n	8003b9c <LCD_F2_item+0x74>
 8003bdc:	200003b4 	.word	0x200003b4
 8003be0:	20006314 	.word	0x20006314
 8003be4:	2000630c 	.word	0x2000630c

08003be8 <LCD_F3_item>:

void LCD_F3_item(uint8_t item, int16_t value)
{
 8003be8:	b510      	push	{r4, lr}
 8003bea:	4604      	mov	r4, r0
    item = GET_MENU(item, F3_ITEM_MAX);
 8003bec:	2805      	cmp	r0, #5
 8003bee:	d901      	bls.n	8003bf4 <LCD_F3_item+0xc>
 8003bf0:	1f84      	subs	r4, r0, #6
 8003bf2:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003bf4:	2083      	movs	r0, #131	@ 0x83
 8003bf6:	f7ff f88d 	bl	8002d14 <write_com>
    hzkdis(F3Item[item]);
 8003bfa:	4b23      	ldr	r3, [pc, #140]	@ (8003c88 <LCD_F3_item+0xa0>)
 8003bfc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003c00:	f7ff f8b8 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8003c04:	2093      	movs	r0, #147	@ 0x93
 8003c06:	f7ff f885 	bl	8002d14 <write_com>
    if (strcmp(F3Value[item][0], "") != 0) {
 8003c0a:	01a3      	lsls	r3, r4, #6
 8003c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8003c8c <LCD_F3_item+0xa4>)
 8003c0e:	58d3      	ldr	r3, [r2, r3]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	b34b      	cbz	r3, 8003c68 <LCD_F3_item+0x80>
        hzkdis(F3Value[item][g_F3[item]]);
 8003c14:	4b1e      	ldr	r3, [pc, #120]	@ (8003c90 <LCD_F3_item+0xa8>)
 8003c16:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003c1a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003c1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c22:	f7ff f8a7 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F3[item]);
    }

    item = GET_MENU(item + 1, F3_ITEM_MAX);
 8003c26:	2c04      	cmp	r4, #4
 8003c28:	d924      	bls.n	8003c74 <LCD_F3_item+0x8c>
 8003c2a:	3c05      	subs	r4, #5
 8003c2c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003c2e:	208b      	movs	r0, #139	@ 0x8b
 8003c30:	f7ff f870 	bl	8002d14 <write_com>
    hzkdis(F3Item[item]);
 8003c34:	4b14      	ldr	r3, [pc, #80]	@ (8003c88 <LCD_F3_item+0xa0>)
 8003c36:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003c3a:	f7ff f89b 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8003c3e:	209b      	movs	r0, #155	@ 0x9b
 8003c40:	f7ff f868 	bl	8002d14 <write_com>
    if (strcmp(F3Value[item][0], "") != 0) {
 8003c44:	01a3      	lsls	r3, r4, #6
 8003c46:	4a11      	ldr	r2, [pc, #68]	@ (8003c8c <LCD_F3_item+0xa4>)
 8003c48:	58d3      	ldr	r3, [r2, r3]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	b1ab      	cbz	r3, 8003c7a <LCD_F3_item+0x92>
        hzkdis(F3Value[item][g_F3[item]]);
 8003c4e:	4b10      	ldr	r3, [pc, #64]	@ (8003c90 <LCD_F3_item+0xa8>)
 8003c50:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003c54:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003c58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c5c:	f7ff f88a 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F3[item]);
    }
    write_com(0x93);
 8003c60:	2093      	movs	r0, #147	@ 0x93
 8003c62:	f7ff f857 	bl	8002d14 <write_com>
}
 8003c66:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F3[item]);
 8003c68:	4b09      	ldr	r3, [pc, #36]	@ (8003c90 <LCD_F3_item+0xa8>)
 8003c6a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003c6e:	f7ff f977 	bl	8002f60 <LCD_ShowNum>
 8003c72:	e7d8      	b.n	8003c26 <LCD_F3_item+0x3e>
    item = GET_MENU(item + 1, F3_ITEM_MAX);
 8003c74:	3401      	adds	r4, #1
 8003c76:	b2e4      	uxtb	r4, r4
 8003c78:	e7d9      	b.n	8003c2e <LCD_F3_item+0x46>
        LCD_ShowNum(g_F3[item]);
 8003c7a:	4b05      	ldr	r3, [pc, #20]	@ (8003c90 <LCD_F3_item+0xa8>)
 8003c7c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003c80:	f7ff f96e 	bl	8002f60 <LCD_ShowNum>
 8003c84:	e7ec      	b.n	8003c60 <LCD_F3_item+0x78>
 8003c86:	bf00      	nop
 8003c88:	20000394 	.word	0x20000394
 8003c8c:	2000618c 	.word	0x2000618c
 8003c90:	20006180 	.word	0x20006180

08003c94 <LCD_F4_item>:

void LCD_F4_item(uint8_t item, int16_t value)
{
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	4604      	mov	r4, r0
    item = GET_MENU(item, F4_ITEM_MAX);
 8003c98:	2802      	cmp	r0, #2
 8003c9a:	d901      	bls.n	8003ca0 <LCD_F4_item+0xc>
 8003c9c:	1ec4      	subs	r4, r0, #3
 8003c9e:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003ca0:	2083      	movs	r0, #131	@ 0x83
 8003ca2:	f7ff f837 	bl	8002d14 <write_com>
    hzkdis(F4Item[item]);
 8003ca6:	4b38      	ldr	r3, [pc, #224]	@ (8003d88 <LCD_F4_item+0xf4>)
 8003ca8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003cac:	f7ff f862 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8003cb0:	2093      	movs	r0, #147	@ 0x93
 8003cb2:	f7ff f82f 	bl	8002d14 <write_com>
    if (strcmp(F4Value[item][0], "") != 0) {
 8003cb6:	01a3      	lsls	r3, r4, #6
 8003cb8:	4a34      	ldr	r2, [pc, #208]	@ (8003d8c <LCD_F4_item+0xf8>)
 8003cba:	58d3      	ldr	r3, [r2, r3]
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d13e      	bne.n	8003d40 <LCD_F4_item+0xac>
        hzkdis(F4Value[item][g_F4[item]]);
    } else {
        if(item == EMS_4_EngineCoolantTemp){
 8003cc2:	2c00      	cmp	r4, #0
 8003cc4:	d146      	bne.n	8003d54 <LCD_F4_item+0xc0>
        	int32_t tmp = g_F4[item] * 2 * 0.75 - 48;
 8003cc6:	4b32      	ldr	r3, [pc, #200]	@ (8003d90 <LCD_F4_item+0xfc>)
 8003cc8:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003ccc:	0040      	lsls	r0, r0, #1
 8003cce:	f7fc fc09 	bl	80004e4 <__aeabi_i2d>
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8003d94 <LCD_F4_item+0x100>)
 8003cd6:	f7fc fc6f 	bl	80005b8 <__aeabi_dmul>
 8003cda:	2200      	movs	r2, #0
 8003cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8003d98 <LCD_F4_item+0x104>)
 8003cde:	f7fc fab3 	bl	8000248 <__aeabi_dsub>
 8003ce2:	f7fc ff19 	bl	8000b18 <__aeabi_d2iz>
            LCD_ShowNum(tmp);
 8003ce6:	f7ff f93b 	bl	8002f60 <LCD_ShowNum>
        else{
        	LCD_ShowNum(g_F4[item]);
        }
    }

    item = GET_MENU(item + 1, F4_ITEM_MAX);
 8003cea:	2c01      	cmp	r4, #1
 8003cec:	d938      	bls.n	8003d60 <LCD_F4_item+0xcc>
 8003cee:	3c02      	subs	r4, #2
 8003cf0:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003cf2:	208b      	movs	r0, #139	@ 0x8b
 8003cf4:	f7ff f80e 	bl	8002d14 <write_com>
    hzkdis(F4Item[item]);
 8003cf8:	4b23      	ldr	r3, [pc, #140]	@ (8003d88 <LCD_F4_item+0xf4>)
 8003cfa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003cfe:	f7ff f839 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8003d02:	209b      	movs	r0, #155	@ 0x9b
 8003d04:	f7ff f806 	bl	8002d14 <write_com>
    if (strcmp(F4Value[item][0], "") != 0) {
 8003d08:	01a3      	lsls	r3, r4, #6
 8003d0a:	4a20      	ldr	r2, [pc, #128]	@ (8003d8c <LCD_F4_item+0xf8>)
 8003d0c:	58d3      	ldr	r3, [r2, r3]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	bb4b      	cbnz	r3, 8003d66 <LCD_F4_item+0xd2>
        hzkdis(F4Value[item][g_F4[item]]);
    } else {
        if(item == EMS_4_EngineCoolantTemp){
 8003d12:	bb94      	cbnz	r4, 8003d7a <LCD_F4_item+0xe6>
        	int32_t tmp = g_F4[item] * 2 * 0.75 - 48;
 8003d14:	4b1e      	ldr	r3, [pc, #120]	@ (8003d90 <LCD_F4_item+0xfc>)
 8003d16:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003d1a:	0040      	lsls	r0, r0, #1
 8003d1c:	f7fc fbe2 	bl	80004e4 <__aeabi_i2d>
 8003d20:	2200      	movs	r2, #0
 8003d22:	4b1c      	ldr	r3, [pc, #112]	@ (8003d94 <LCD_F4_item+0x100>)
 8003d24:	f7fc fc48 	bl	80005b8 <__aeabi_dmul>
 8003d28:	2200      	movs	r2, #0
 8003d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003d98 <LCD_F4_item+0x104>)
 8003d2c:	f7fc fa8c 	bl	8000248 <__aeabi_dsub>
 8003d30:	f7fc fef2 	bl	8000b18 <__aeabi_d2iz>
            LCD_ShowNum(tmp);
 8003d34:	f7ff f914 	bl	8002f60 <LCD_ShowNum>
        }
        else{
        	LCD_ShowNum(g_F4[item]);
        }
    }
    write_com(0x93);
 8003d38:	2093      	movs	r0, #147	@ 0x93
 8003d3a:	f7fe ffeb 	bl	8002d14 <write_com>
}
 8003d3e:	bd38      	pop	{r3, r4, r5, pc}
        hzkdis(F4Value[item][g_F4[item]]);
 8003d40:	4b13      	ldr	r3, [pc, #76]	@ (8003d90 <LCD_F4_item+0xfc>)
 8003d42:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003d46:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003d4a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003d4e:	f7ff f811 	bl	8002d74 <hzkdis>
 8003d52:	e7ca      	b.n	8003cea <LCD_F4_item+0x56>
        	LCD_ShowNum(g_F4[item]);
 8003d54:	4b0e      	ldr	r3, [pc, #56]	@ (8003d90 <LCD_F4_item+0xfc>)
 8003d56:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003d5a:	f7ff f901 	bl	8002f60 <LCD_ShowNum>
 8003d5e:	e7c4      	b.n	8003cea <LCD_F4_item+0x56>
    item = GET_MENU(item + 1, F4_ITEM_MAX);
 8003d60:	3401      	adds	r4, #1
 8003d62:	b2e4      	uxtb	r4, r4
 8003d64:	e7c5      	b.n	8003cf2 <LCD_F4_item+0x5e>
        hzkdis(F4Value[item][g_F4[item]]);
 8003d66:	4b0a      	ldr	r3, [pc, #40]	@ (8003d90 <LCD_F4_item+0xfc>)
 8003d68:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003d6c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003d70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003d74:	f7fe fffe 	bl	8002d74 <hzkdis>
 8003d78:	e7de      	b.n	8003d38 <LCD_F4_item+0xa4>
        	LCD_ShowNum(g_F4[item]);
 8003d7a:	4b05      	ldr	r3, [pc, #20]	@ (8003d90 <LCD_F4_item+0xfc>)
 8003d7c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003d80:	f7ff f8ee 	bl	8002f60 <LCD_ShowNum>
 8003d84:	e7d8      	b.n	8003d38 <LCD_F4_item+0xa4>
 8003d86:	bf00      	nop
 8003d88:	2000037c 	.word	0x2000037c
 8003d8c:	200060c0 	.word	0x200060c0
 8003d90:	2000036c 	.word	0x2000036c
 8003d94:	3fe80000 	.word	0x3fe80000
 8003d98:	40480000 	.word	0x40480000

08003d9c <LCD_F5_item>:

void LCD_F5_item(uint8_t item, int16_t value)
{
 8003d9c:	b510      	push	{r4, lr}
 8003d9e:	4604      	mov	r4, r0
    item = GET_MENU(item, F5_ITEM_MAX);
 8003da0:	2802      	cmp	r0, #2
 8003da2:	d901      	bls.n	8003da8 <LCD_F5_item+0xc>
 8003da4:	1ec4      	subs	r4, r0, #3
 8003da6:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003da8:	2083      	movs	r0, #131	@ 0x83
 8003daa:	f7fe ffb3 	bl	8002d14 <write_com>
    hzkdis(F5Item[item]);
 8003dae:	4b23      	ldr	r3, [pc, #140]	@ (8003e3c <LCD_F5_item+0xa0>)
 8003db0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003db4:	f7fe ffde 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8003db8:	2093      	movs	r0, #147	@ 0x93
 8003dba:	f7fe ffab 	bl	8002d14 <write_com>
    if (strcmp(F5Value[item][0], "") != 0) {
 8003dbe:	01a3      	lsls	r3, r4, #6
 8003dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e40 <LCD_F5_item+0xa4>)
 8003dc2:	58d3      	ldr	r3, [r2, r3]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	b34b      	cbz	r3, 8003e1c <LCD_F5_item+0x80>
        hzkdis(F5Value[item][g_F5[item]]);
 8003dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8003e44 <LCD_F5_item+0xa8>)
 8003dca:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003dce:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003dd2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003dd6:	f7fe ffcd 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F5[item]);
    }

    item = GET_MENU(item + 1, F5_ITEM_MAX);
 8003dda:	2c01      	cmp	r4, #1
 8003ddc:	d924      	bls.n	8003e28 <LCD_F5_item+0x8c>
 8003dde:	3c02      	subs	r4, #2
 8003de0:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003de2:	208b      	movs	r0, #139	@ 0x8b
 8003de4:	f7fe ff96 	bl	8002d14 <write_com>
    hzkdis(F5Item[item]);
 8003de8:	4b14      	ldr	r3, [pc, #80]	@ (8003e3c <LCD_F5_item+0xa0>)
 8003dea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003dee:	f7fe ffc1 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8003df2:	209b      	movs	r0, #155	@ 0x9b
 8003df4:	f7fe ff8e 	bl	8002d14 <write_com>
    if (strcmp(F5Value[item][0], "") != 0) {
 8003df8:	01a3      	lsls	r3, r4, #6
 8003dfa:	4a11      	ldr	r2, [pc, #68]	@ (8003e40 <LCD_F5_item+0xa4>)
 8003dfc:	58d3      	ldr	r3, [r2, r3]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	b1ab      	cbz	r3, 8003e2e <LCD_F5_item+0x92>
        hzkdis(F5Value[item][g_F5[item]]);
 8003e02:	4b10      	ldr	r3, [pc, #64]	@ (8003e44 <LCD_F5_item+0xa8>)
 8003e04:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003e08:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003e0c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003e10:	f7fe ffb0 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F5[item]);
    }
    write_com(0x93);
 8003e14:	2093      	movs	r0, #147	@ 0x93
 8003e16:	f7fe ff7d 	bl	8002d14 <write_com>
}
 8003e1a:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F5[item]);
 8003e1c:	4b09      	ldr	r3, [pc, #36]	@ (8003e44 <LCD_F5_item+0xa8>)
 8003e1e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003e22:	f7ff f89d 	bl	8002f60 <LCD_ShowNum>
 8003e26:	e7d8      	b.n	8003dda <LCD_F5_item+0x3e>
    item = GET_MENU(item + 1, F5_ITEM_MAX);
 8003e28:	3401      	adds	r4, #1
 8003e2a:	b2e4      	uxtb	r4, r4
 8003e2c:	e7d9      	b.n	8003de2 <LCD_F5_item+0x46>
        LCD_ShowNum(g_F5[item]);
 8003e2e:	4b05      	ldr	r3, [pc, #20]	@ (8003e44 <LCD_F5_item+0xa8>)
 8003e30:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003e34:	f7ff f894 	bl	8002f60 <LCD_ShowNum>
 8003e38:	e7ec      	b.n	8003e14 <LCD_F5_item+0x78>
 8003e3a:	bf00      	nop
 8003e3c:	20000360 	.word	0x20000360
 8003e40:	20006000 	.word	0x20006000
 8003e44:	20005ff8 	.word	0x20005ff8

08003e48 <LCD_F9_item>:
    }
    write_com(0x93);
}

void LCD_F9_item(uint8_t item, int16_t value)
{
 8003e48:	b510      	push	{r4, lr}
 8003e4a:	4604      	mov	r4, r0
    item = GET_MENU(item, F9_ITEM_MAX);
 8003e4c:	2806      	cmp	r0, #6
 8003e4e:	d901      	bls.n	8003e54 <LCD_F9_item+0xc>
 8003e50:	1fc4      	subs	r4, r0, #7
 8003e52:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003e54:	2083      	movs	r0, #131	@ 0x83
 8003e56:	f7fe ff5d 	bl	8002d14 <write_com>
    hzkdis(F9Item[item]);
 8003e5a:	4b23      	ldr	r3, [pc, #140]	@ (8003ee8 <LCD_F9_item+0xa0>)
 8003e5c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003e60:	f7fe ff88 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8003e64:	2093      	movs	r0, #147	@ 0x93
 8003e66:	f7fe ff55 	bl	8002d14 <write_com>
    if (strcmp(F9Value[item][0], "") != 0) {
 8003e6a:	01a3      	lsls	r3, r4, #6
 8003e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003eec <LCD_F9_item+0xa4>)
 8003e6e:	58d3      	ldr	r3, [r2, r3]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	b34b      	cbz	r3, 8003ec8 <LCD_F9_item+0x80>
        hzkdis(F9Value[item][g_F9[item]]);
 8003e74:	4b1e      	ldr	r3, [pc, #120]	@ (8003ef0 <LCD_F9_item+0xa8>)
 8003e76:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003e7a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003e7e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003e82:	f7fe ff77 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F9[item]);
    }

    item = GET_MENU(item + 1, F9_ITEM_MAX);
 8003e86:	2c05      	cmp	r4, #5
 8003e88:	d924      	bls.n	8003ed4 <LCD_F9_item+0x8c>
 8003e8a:	3c06      	subs	r4, #6
 8003e8c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003e8e:	208b      	movs	r0, #139	@ 0x8b
 8003e90:	f7fe ff40 	bl	8002d14 <write_com>
    hzkdis(F9Item[item]);
 8003e94:	4b14      	ldr	r3, [pc, #80]	@ (8003ee8 <LCD_F9_item+0xa0>)
 8003e96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003e9a:	f7fe ff6b 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8003e9e:	209b      	movs	r0, #155	@ 0x9b
 8003ea0:	f7fe ff38 	bl	8002d14 <write_com>
    if (strcmp(F9Value[item][0], "") != 0) {
 8003ea4:	01a3      	lsls	r3, r4, #6
 8003ea6:	4a11      	ldr	r2, [pc, #68]	@ (8003eec <LCD_F9_item+0xa4>)
 8003ea8:	58d3      	ldr	r3, [r2, r3]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	b1ab      	cbz	r3, 8003eda <LCD_F9_item+0x92>
        hzkdis(F9Value[item][g_F9[item]]);
 8003eae:	4b10      	ldr	r3, [pc, #64]	@ (8003ef0 <LCD_F9_item+0xa8>)
 8003eb0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003eb4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003eb8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003ebc:	f7fe ff5a 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F9[item]);
    }
    write_com(0x93);
 8003ec0:	2093      	movs	r0, #147	@ 0x93
 8003ec2:	f7fe ff27 	bl	8002d14 <write_com>
}
 8003ec6:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F9[item]);
 8003ec8:	4b09      	ldr	r3, [pc, #36]	@ (8003ef0 <LCD_F9_item+0xa8>)
 8003eca:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003ece:	f7ff f847 	bl	8002f60 <LCD_ShowNum>
 8003ed2:	e7d8      	b.n	8003e86 <LCD_F9_item+0x3e>
    item = GET_MENU(item + 1, F9_ITEM_MAX);
 8003ed4:	3401      	adds	r4, #1
 8003ed6:	b2e4      	uxtb	r4, r4
 8003ed8:	e7d9      	b.n	8003e8e <LCD_F9_item+0x46>
        LCD_ShowNum(g_F9[item]);
 8003eda:	4b05      	ldr	r3, [pc, #20]	@ (8003ef0 <LCD_F9_item+0xa8>)
 8003edc:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003ee0:	f7ff f83e 	bl	8002f60 <LCD_ShowNum>
 8003ee4:	e7ec      	b.n	8003ec0 <LCD_F9_item+0x78>
 8003ee6:	bf00      	nop
 8003ee8:	200002b0 	.word	0x200002b0
 8003eec:	20005848 	.word	0x20005848
 8003ef0:	20005838 	.word	0x20005838

08003ef4 <LCD_F10_item>:

void LCD_F10_item(uint8_t item, int16_t value)
{
 8003ef4:	b510      	push	{r4, lr}
 8003ef6:	4604      	mov	r4, r0
    item = GET_MENU(item, F10_ITEM_MAX);
 8003ef8:	2805      	cmp	r0, #5
 8003efa:	d901      	bls.n	8003f00 <LCD_F10_item+0xc>
 8003efc:	1f84      	subs	r4, r0, #6
 8003efe:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003f00:	2083      	movs	r0, #131	@ 0x83
 8003f02:	f7fe ff07 	bl	8002d14 <write_com>
    hzkdis(F10Item[item]);
 8003f06:	4b23      	ldr	r3, [pc, #140]	@ (8003f94 <LCD_F10_item+0xa0>)
 8003f08:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003f0c:	f7fe ff32 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8003f10:	2093      	movs	r0, #147	@ 0x93
 8003f12:	f7fe feff 	bl	8002d14 <write_com>
    if (strcmp(F10Value[item][0], "") != 0) {
 8003f16:	01a3      	lsls	r3, r4, #6
 8003f18:	4a1f      	ldr	r2, [pc, #124]	@ (8003f98 <LCD_F10_item+0xa4>)
 8003f1a:	58d3      	ldr	r3, [r2, r3]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	b34b      	cbz	r3, 8003f74 <LCD_F10_item+0x80>
        hzkdis(F10Value[item][g_F10[item]]);
 8003f20:	4b1e      	ldr	r3, [pc, #120]	@ (8003f9c <LCD_F10_item+0xa8>)
 8003f22:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003f26:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003f2a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003f2e:	f7fe ff21 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F10[item]);
    }

    item = GET_MENU(item + 1, F10_ITEM_MAX);
 8003f32:	2c04      	cmp	r4, #4
 8003f34:	d924      	bls.n	8003f80 <LCD_F10_item+0x8c>
 8003f36:	3c05      	subs	r4, #5
 8003f38:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003f3a:	208b      	movs	r0, #139	@ 0x8b
 8003f3c:	f7fe feea 	bl	8002d14 <write_com>
    hzkdis(F10Item[item]);
 8003f40:	4b14      	ldr	r3, [pc, #80]	@ (8003f94 <LCD_F10_item+0xa0>)
 8003f42:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003f46:	f7fe ff15 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8003f4a:	209b      	movs	r0, #155	@ 0x9b
 8003f4c:	f7fe fee2 	bl	8002d14 <write_com>
    if (strcmp(F10Value[item][0], "") != 0) {
 8003f50:	01a3      	lsls	r3, r4, #6
 8003f52:	4a11      	ldr	r2, [pc, #68]	@ (8003f98 <LCD_F10_item+0xa4>)
 8003f54:	58d3      	ldr	r3, [r2, r3]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	b1ab      	cbz	r3, 8003f86 <LCD_F10_item+0x92>
        hzkdis(F10Value[item][g_F10[item]]);
 8003f5a:	4b10      	ldr	r3, [pc, #64]	@ (8003f9c <LCD_F10_item+0xa8>)
 8003f5c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003f60:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003f64:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003f68:	f7fe ff04 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F10[item]);
    }
    write_com(0x93);
 8003f6c:	2093      	movs	r0, #147	@ 0x93
 8003f6e:	f7fe fed1 	bl	8002d14 <write_com>
}
 8003f72:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F10[item]);
 8003f74:	4b09      	ldr	r3, [pc, #36]	@ (8003f9c <LCD_F10_item+0xa8>)
 8003f76:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003f7a:	f7fe fff1 	bl	8002f60 <LCD_ShowNum>
 8003f7e:	e7d8      	b.n	8003f32 <LCD_F10_item+0x3e>
    item = GET_MENU(item + 1, F10_ITEM_MAX);
 8003f80:	3401      	adds	r4, #1
 8003f82:	b2e4      	uxtb	r4, r4
 8003f84:	e7d9      	b.n	8003f3a <LCD_F10_item+0x46>
        LCD_ShowNum(g_F10[item]);
 8003f86:	4b05      	ldr	r3, [pc, #20]	@ (8003f9c <LCD_F10_item+0xa8>)
 8003f88:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003f8c:	f7fe ffe8 	bl	8002f60 <LCD_ShowNum>
 8003f90:	e7ec      	b.n	8003f6c <LCD_F10_item+0x78>
 8003f92:	bf00      	nop
 8003f94:	20000288 	.word	0x20000288
 8003f98:	200056b8 	.word	0x200056b8
 8003f9c:	200056ac 	.word	0x200056ac

08003fa0 <LCD_F11_item>:

void LCD_F11_item(uint8_t item, int16_t value)
{
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	4604      	mov	r4, r0
    item = GET_MENU(item, F11_ITEM_MAX);
 8003fa4:	2804      	cmp	r0, #4
 8003fa6:	d901      	bls.n	8003fac <LCD_F11_item+0xc>
 8003fa8:	1f44      	subs	r4, r0, #5
 8003faa:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003fac:	2083      	movs	r0, #131	@ 0x83
 8003fae:	f7fe feb1 	bl	8002d14 <write_com>
    hzkdis(F11Item[item]);
 8003fb2:	4b23      	ldr	r3, [pc, #140]	@ (8004040 <LCD_F11_item+0xa0>)
 8003fb4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003fb8:	f7fe fedc 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8003fbc:	2093      	movs	r0, #147	@ 0x93
 8003fbe:	f7fe fea9 	bl	8002d14 <write_com>
    if (strcmp(F11Value[item][0], "") != 0) {
 8003fc2:	01a3      	lsls	r3, r4, #6
 8003fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8004044 <LCD_F11_item+0xa4>)
 8003fc6:	58d3      	ldr	r3, [r2, r3]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	b34b      	cbz	r3, 8004020 <LCD_F11_item+0x80>
        hzkdis(F11Value[item][g_F11[item]]);
 8003fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8004048 <LCD_F11_item+0xa8>)
 8003fce:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003fd2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003fd6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003fda:	f7fe fecb 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F11[item]);
    }

    item = GET_MENU(item + 1, F11_ITEM_MAX);
 8003fde:	2c03      	cmp	r4, #3
 8003fe0:	d924      	bls.n	800402c <LCD_F11_item+0x8c>
 8003fe2:	3c04      	subs	r4, #4
 8003fe4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003fe6:	208b      	movs	r0, #139	@ 0x8b
 8003fe8:	f7fe fe94 	bl	8002d14 <write_com>
    hzkdis(F11Item[item]);
 8003fec:	4b14      	ldr	r3, [pc, #80]	@ (8004040 <LCD_F11_item+0xa0>)
 8003fee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003ff2:	f7fe febf 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8003ff6:	209b      	movs	r0, #155	@ 0x9b
 8003ff8:	f7fe fe8c 	bl	8002d14 <write_com>
    if (strcmp(F11Value[item][0], "") != 0) {
 8003ffc:	01a3      	lsls	r3, r4, #6
 8003ffe:	4a11      	ldr	r2, [pc, #68]	@ (8004044 <LCD_F11_item+0xa4>)
 8004000:	58d3      	ldr	r3, [r2, r3]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	b1ab      	cbz	r3, 8004032 <LCD_F11_item+0x92>
        hzkdis(F11Value[item][g_F11[item]]);
 8004006:	4b10      	ldr	r3, [pc, #64]	@ (8004048 <LCD_F11_item+0xa8>)
 8004008:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800400c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004010:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004014:	f7fe feae 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F11[item]);
    }
    write_com(0x93);
 8004018:	2093      	movs	r0, #147	@ 0x93
 800401a:	f7fe fe7b 	bl	8002d14 <write_com>
}
 800401e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F11[item]);
 8004020:	4b09      	ldr	r3, [pc, #36]	@ (8004048 <LCD_F11_item+0xa8>)
 8004022:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004026:	f7fe ff9b 	bl	8002f60 <LCD_ShowNum>
 800402a:	e7d8      	b.n	8003fde <LCD_F11_item+0x3e>
    item = GET_MENU(item + 1, F11_ITEM_MAX);
 800402c:	3401      	adds	r4, #1
 800402e:	b2e4      	uxtb	r4, r4
 8004030:	e7d9      	b.n	8003fe6 <LCD_F11_item+0x46>
        LCD_ShowNum(g_F11[item]);
 8004032:	4b05      	ldr	r3, [pc, #20]	@ (8004048 <LCD_F11_item+0xa8>)
 8004034:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004038:	f7fe ff92 	bl	8002f60 <LCD_ShowNum>
 800403c:	e7ec      	b.n	8004018 <LCD_F11_item+0x78>
 800403e:	bf00      	nop
 8004040:	20000268 	.word	0x20000268
 8004044:	2000556c 	.word	0x2000556c
 8004048:	20005560 	.word	0x20005560

0800404c <LCD_F13_item>:
    }
    write_com(0x93);
}

void LCD_F13_item(uint8_t item, int16_t value)
{
 800404c:	b510      	push	{r4, lr}
 800404e:	4604      	mov	r4, r0
    item = GET_MENU(item, F13_ITEM_MAX);
 8004050:	282f      	cmp	r0, #47	@ 0x2f
 8004052:	d902      	bls.n	800405a <LCD_F13_item+0xe>
 8004054:	f1a0 0430 	sub.w	r4, r0, #48	@ 0x30
 8004058:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 800405a:	2083      	movs	r0, #131	@ 0x83
 800405c:	f7fe fe5a 	bl	8002d14 <write_com>
    hzkdis(F13Item[item]);
 8004060:	4b22      	ldr	r3, [pc, #136]	@ (80040ec <LCD_F13_item+0xa0>)
 8004062:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004066:	f7fe fe85 	bl	8002d74 <hzkdis>
    write_com(0x93);
 800406a:	2093      	movs	r0, #147	@ 0x93
 800406c:	f7fe fe52 	bl	8002d14 <write_com>
    if (strcmp(F13Value[item][0], "") != 0) {
 8004070:	01a3      	lsls	r3, r4, #6
 8004072:	4a1f      	ldr	r2, [pc, #124]	@ (80040f0 <LCD_F13_item+0xa4>)
 8004074:	58d3      	ldr	r3, [r2, r3]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	b34b      	cbz	r3, 80040ce <LCD_F13_item+0x82>
        hzkdis(F13Value[item][g_F13[item]]);
 800407a:	4b1e      	ldr	r3, [pc, #120]	@ (80040f4 <LCD_F13_item+0xa8>)
 800407c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004080:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004084:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004088:	f7fe fe74 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F13[item]);
    }

    item = GET_MENU(item + 1, F13_ITEM_MAX);
 800408c:	2c2e      	cmp	r4, #46	@ 0x2e
 800408e:	d924      	bls.n	80040da <LCD_F13_item+0x8e>
 8004090:	3c2f      	subs	r4, #47	@ 0x2f
 8004092:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004094:	208b      	movs	r0, #139	@ 0x8b
 8004096:	f7fe fe3d 	bl	8002d14 <write_com>
    hzkdis(F13Item[item]);
 800409a:	4b14      	ldr	r3, [pc, #80]	@ (80040ec <LCD_F13_item+0xa0>)
 800409c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80040a0:	f7fe fe68 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 80040a4:	209b      	movs	r0, #155	@ 0x9b
 80040a6:	f7fe fe35 	bl	8002d14 <write_com>
    if (strcmp(F13Value[item][0], "") != 0) {
 80040aa:	01a3      	lsls	r3, r4, #6
 80040ac:	4a10      	ldr	r2, [pc, #64]	@ (80040f0 <LCD_F13_item+0xa4>)
 80040ae:	58d3      	ldr	r3, [r2, r3]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	b1ab      	cbz	r3, 80040e0 <LCD_F13_item+0x94>
        hzkdis(F13Value[item][g_F13[item]]);
 80040b4:	4b0f      	ldr	r3, [pc, #60]	@ (80040f4 <LCD_F13_item+0xa8>)
 80040b6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80040ba:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80040be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80040c2:	f7fe fe57 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F13[item]);
    }
    write_com(0x93);
 80040c6:	2093      	movs	r0, #147	@ 0x93
 80040c8:	f7fe fe24 	bl	8002d14 <write_com>
}
 80040cc:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F13[item]);
 80040ce:	4b09      	ldr	r3, [pc, #36]	@ (80040f4 <LCD_F13_item+0xa8>)
 80040d0:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80040d4:	f7fe ff44 	bl	8002f60 <LCD_ShowNum>
 80040d8:	e7d8      	b.n	800408c <LCD_F13_item+0x40>
    item = GET_MENU(item + 1, F13_ITEM_MAX);
 80040da:	3401      	adds	r4, #1
 80040dc:	b2e4      	uxtb	r4, r4
 80040de:	e7d9      	b.n	8004094 <LCD_F13_item+0x48>
        LCD_ShowNum(g_F13[item]);
 80040e0:	4b04      	ldr	r3, [pc, #16]	@ (80040f4 <LCD_F13_item+0xa8>)
 80040e2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80040e6:	f7fe ff3b 	bl	8002f60 <LCD_ShowNum>
 80040ea:	e7ec      	b.n	80040c6 <LCD_F13_item+0x7a>
 80040ec:	20000188 	.word	0x20000188
 80040f0:	20004898 	.word	0x20004898
 80040f4:	20004838 	.word	0x20004838

080040f8 <LCD_F14_item>:

void LCD_F14_item(uint8_t item, int16_t value)
{
 80040f8:	b538      	push	{r3, r4, r5, lr}
    item = GET_MENU(item, F14_ITEM_MAX);
 80040fa:	4604      	mov	r4, r0
 80040fc:	b108      	cbz	r0, 8004102 <LCD_F14_item+0xa>
 80040fe:	1e44      	subs	r4, r0, #1
 8004100:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004102:	2083      	movs	r0, #131	@ 0x83
 8004104:	f7fe fe06 	bl	8002d14 <write_com>
    hzkdis(F14Item[item]);
 8004108:	4625      	mov	r5, r4
 800410a:	4b1f      	ldr	r3, [pc, #124]	@ (8004188 <LCD_F14_item+0x90>)
 800410c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004110:	f7fe fe30 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8004114:	2093      	movs	r0, #147	@ 0x93
 8004116:	f7fe fdfd 	bl	8002d14 <write_com>
    if (strcmp(F14Value[item][0], "") != 0) {
 800411a:	01a3      	lsls	r3, r4, #6
 800411c:	4a1b      	ldr	r2, [pc, #108]	@ (800418c <LCD_F14_item+0x94>)
 800411e:	58d3      	ldr	r3, [r2, r3]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	b32b      	cbz	r3, 8004170 <LCD_F14_item+0x78>
        hzkdis(F14Value[item][g_F14[item]]);
 8004124:	4b1a      	ldr	r3, [pc, #104]	@ (8004190 <LCD_F14_item+0x98>)
 8004126:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800412a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800412e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004132:	f7fe fe1f 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F14[item]);
    }

    item = GET_MENU(item + 1, F14_ITEM_MAX);
    write_com(0x8b);
 8004136:	208b      	movs	r0, #139	@ 0x8b
 8004138:	f7fe fdec 	bl	8002d14 <write_com>
    hzkdis(F14Item[item]);
 800413c:	4b12      	ldr	r3, [pc, #72]	@ (8004188 <LCD_F14_item+0x90>)
 800413e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004142:	f7fe fe17 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8004146:	209b      	movs	r0, #155	@ 0x9b
 8004148:	f7fe fde4 	bl	8002d14 <write_com>
    if (strcmp(F14Value[item][0], "") != 0) {
 800414c:	01ab      	lsls	r3, r5, #6
 800414e:	4a0f      	ldr	r2, [pc, #60]	@ (800418c <LCD_F14_item+0x94>)
 8004150:	58d3      	ldr	r3, [r2, r3]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	b193      	cbz	r3, 800417c <LCD_F14_item+0x84>
        hzkdis(F14Value[item][g_F14[item]]);
 8004156:	4b0e      	ldr	r3, [pc, #56]	@ (8004190 <LCD_F14_item+0x98>)
 8004158:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800415c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 8004160:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004164:	f7fe fe06 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F14[item]);
    }
    write_com(0x93);
 8004168:	2093      	movs	r0, #147	@ 0x93
 800416a:	f7fe fdd3 	bl	8002d14 <write_com>
}
 800416e:	bd38      	pop	{r3, r4, r5, pc}
        LCD_ShowNum(g_F14[item]);
 8004170:	4b07      	ldr	r3, [pc, #28]	@ (8004190 <LCD_F14_item+0x98>)
 8004172:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004176:	f7fe fef3 	bl	8002f60 <LCD_ShowNum>
 800417a:	e7dc      	b.n	8004136 <LCD_F14_item+0x3e>
        LCD_ShowNum(g_F14[item]);
 800417c:	4b04      	ldr	r3, [pc, #16]	@ (8004190 <LCD_F14_item+0x98>)
 800417e:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8004182:	f7fe feed 	bl	8002f60 <LCD_ShowNum>
 8004186:	e7ef      	b.n	8004168 <LCD_F14_item+0x70>
 8004188:	20000124 	.word	0x20000124
 800418c:	200047f8 	.word	0x200047f8
 8004190:	200047f4 	.word	0x200047f4

08004194 <LCD_F15_item>:

void LCD_F15_item(uint8_t item, int16_t value)
{
 8004194:	b510      	push	{r4, lr}
 8004196:	4604      	mov	r4, r0
    item = GET_MENU(item, F15_ITEM_MAX);
    write_com(0x83);
 8004198:	2083      	movs	r0, #131	@ 0x83
 800419a:	f7fe fdbb 	bl	8002d14 <write_com>
    hzkdis(F15Item[item]);
 800419e:	4b20      	ldr	r3, [pc, #128]	@ (8004220 <LCD_F15_item+0x8c>)
 80041a0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80041a4:	f7fe fde6 	bl	8002d74 <hzkdis>
    write_com(0x93);
 80041a8:	2093      	movs	r0, #147	@ 0x93
 80041aa:	f7fe fdb3 	bl	8002d14 <write_com>
    if (strcmp(F15Value[item][0], "") != 0) {
 80041ae:	01a3      	lsls	r3, r4, #6
 80041b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004224 <LCD_F15_item+0x90>)
 80041b2:	58d3      	ldr	r3, [r2, r3]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	b33b      	cbz	r3, 8004208 <LCD_F15_item+0x74>
        hzkdis(F15Value[item][g_F15[item]]);
 80041b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004228 <LCD_F15_item+0x94>)
 80041ba:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80041be:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80041c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80041c6:	f7fe fdd5 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F15[item]);
    }

    item = GET_MENU(item + 1, F15_ITEM_MAX);
 80041ca:	3401      	adds	r4, #1
 80041cc:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80041ce:	208b      	movs	r0, #139	@ 0x8b
 80041d0:	f7fe fda0 	bl	8002d14 <write_com>
    hzkdis(F15Item[item]);
 80041d4:	4b12      	ldr	r3, [pc, #72]	@ (8004220 <LCD_F15_item+0x8c>)
 80041d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80041da:	f7fe fdcb 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 80041de:	209b      	movs	r0, #155	@ 0x9b
 80041e0:	f7fe fd98 	bl	8002d14 <write_com>
    if (strcmp(F15Value[item][0], "") != 0) {
 80041e4:	01a3      	lsls	r3, r4, #6
 80041e6:	4a0f      	ldr	r2, [pc, #60]	@ (8004224 <LCD_F15_item+0x90>)
 80041e8:	58d3      	ldr	r3, [r2, r3]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	b193      	cbz	r3, 8004214 <LCD_F15_item+0x80>
        hzkdis(F15Value[item][g_F15[item]]);
 80041ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004228 <LCD_F15_item+0x94>)
 80041f0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80041f4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80041f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80041fc:	f7fe fdba 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F15[item]);
    }
    write_com(0x93);
 8004200:	2093      	movs	r0, #147	@ 0x93
 8004202:	f7fe fd87 	bl	8002d14 <write_com>
}
 8004206:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F15[item]);
 8004208:	4b07      	ldr	r3, [pc, #28]	@ (8004228 <LCD_F15_item+0x94>)
 800420a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800420e:	f7fe fea7 	bl	8002f60 <LCD_ShowNum>
 8004212:	e7da      	b.n	80041ca <LCD_F15_item+0x36>
        LCD_ShowNum(g_F15[item]);
 8004214:	4b04      	ldr	r3, [pc, #16]	@ (8004228 <LCD_F15_item+0x94>)
 8004216:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800421a:	f7fe fea1 	bl	8002f60 <LCD_ShowNum>
 800421e:	e7ef      	b.n	8004200 <LCD_F15_item+0x6c>
 8004220:	200047f4 	.word	0x200047f4
 8004224:	200047f4 	.word	0x200047f4
 8004228:	200047f4 	.word	0x200047f4

0800422c <LCD_F16_item>:

void LCD_F16_item(uint8_t item, int16_t value)
{
 800422c:	b510      	push	{r4, lr}
 800422e:	4604      	mov	r4, r0
    item = GET_MENU(item, F16_ITEM_MAX);
    write_com(0x83);
 8004230:	2083      	movs	r0, #131	@ 0x83
 8004232:	f7fe fd6f 	bl	8002d14 <write_com>
    hzkdis(F16Item[item]);
 8004236:	4b20      	ldr	r3, [pc, #128]	@ (80042b8 <LCD_F16_item+0x8c>)
 8004238:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800423c:	f7fe fd9a 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8004240:	2093      	movs	r0, #147	@ 0x93
 8004242:	f7fe fd67 	bl	8002d14 <write_com>
    if (strcmp(F16Value[item][0], "") != 0) {
 8004246:	01a3      	lsls	r3, r4, #6
 8004248:	4a1c      	ldr	r2, [pc, #112]	@ (80042bc <LCD_F16_item+0x90>)
 800424a:	58d3      	ldr	r3, [r2, r3]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	b33b      	cbz	r3, 80042a0 <LCD_F16_item+0x74>
        hzkdis(F16Value[item][g_F16[item]]);
 8004250:	4b1b      	ldr	r3, [pc, #108]	@ (80042c0 <LCD_F16_item+0x94>)
 8004252:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004256:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800425a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800425e:	f7fe fd89 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F16[item]);
    }

    item = GET_MENU(item + 1, F16_ITEM_MAX);
 8004262:	3401      	adds	r4, #1
 8004264:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004266:	208b      	movs	r0, #139	@ 0x8b
 8004268:	f7fe fd54 	bl	8002d14 <write_com>
    hzkdis(F16Item[item]);
 800426c:	4b12      	ldr	r3, [pc, #72]	@ (80042b8 <LCD_F16_item+0x8c>)
 800426e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004272:	f7fe fd7f 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8004276:	209b      	movs	r0, #155	@ 0x9b
 8004278:	f7fe fd4c 	bl	8002d14 <write_com>
    if (strcmp(F16Value[item][0], "") != 0) {
 800427c:	01a3      	lsls	r3, r4, #6
 800427e:	4a0f      	ldr	r2, [pc, #60]	@ (80042bc <LCD_F16_item+0x90>)
 8004280:	58d3      	ldr	r3, [r2, r3]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	b193      	cbz	r3, 80042ac <LCD_F16_item+0x80>
        hzkdis(F16Value[item][g_F16[item]]);
 8004286:	4b0e      	ldr	r3, [pc, #56]	@ (80042c0 <LCD_F16_item+0x94>)
 8004288:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800428c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004290:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004294:	f7fe fd6e 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F16[item]);
    }
    write_com(0x93);
 8004298:	2093      	movs	r0, #147	@ 0x93
 800429a:	f7fe fd3b 	bl	8002d14 <write_com>
}
 800429e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F16[item]);
 80042a0:	4b07      	ldr	r3, [pc, #28]	@ (80042c0 <LCD_F16_item+0x94>)
 80042a2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80042a6:	f7fe fe5b 	bl	8002f60 <LCD_ShowNum>
 80042aa:	e7da      	b.n	8004262 <LCD_F16_item+0x36>
        LCD_ShowNum(g_F16[item]);
 80042ac:	4b04      	ldr	r3, [pc, #16]	@ (80042c0 <LCD_F16_item+0x94>)
 80042ae:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80042b2:	f7fe fe55 	bl	8002f60 <LCD_ShowNum>
 80042b6:	e7ef      	b.n	8004298 <LCD_F16_item+0x6c>
 80042b8:	200047f4 	.word	0x200047f4
 80042bc:	200047f4 	.word	0x200047f4
 80042c0:	200047f4 	.word	0x200047f4

080042c4 <LCD_F17_item>:

void LCD_F17_item(uint8_t item, int16_t value)
{
 80042c4:	b510      	push	{r4, lr}
 80042c6:	4604      	mov	r4, r0
    item = GET_MENU(item, F17_ITEM_MAX);
    write_com(0x83);
 80042c8:	2083      	movs	r0, #131	@ 0x83
 80042ca:	f7fe fd23 	bl	8002d14 <write_com>
    hzkdis(F17Item[item]);
 80042ce:	4b20      	ldr	r3, [pc, #128]	@ (8004350 <LCD_F17_item+0x8c>)
 80042d0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80042d4:	f7fe fd4e 	bl	8002d74 <hzkdis>
    write_com(0x93);
 80042d8:	2093      	movs	r0, #147	@ 0x93
 80042da:	f7fe fd1b 	bl	8002d14 <write_com>
    if (strcmp(F17Value[item][0], "") != 0) {
 80042de:	01a3      	lsls	r3, r4, #6
 80042e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004354 <LCD_F17_item+0x90>)
 80042e2:	58d3      	ldr	r3, [r2, r3]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	b33b      	cbz	r3, 8004338 <LCD_F17_item+0x74>
        hzkdis(F17Value[item][g_F17[item]]);
 80042e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004358 <LCD_F17_item+0x94>)
 80042ea:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80042ee:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80042f2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80042f6:	f7fe fd3d 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F17[item]);
    }

    item = GET_MENU(item + 1, F17_ITEM_MAX);
 80042fa:	3401      	adds	r4, #1
 80042fc:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80042fe:	208b      	movs	r0, #139	@ 0x8b
 8004300:	f7fe fd08 	bl	8002d14 <write_com>
    hzkdis(F17Item[item]);
 8004304:	4b12      	ldr	r3, [pc, #72]	@ (8004350 <LCD_F17_item+0x8c>)
 8004306:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800430a:	f7fe fd33 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 800430e:	209b      	movs	r0, #155	@ 0x9b
 8004310:	f7fe fd00 	bl	8002d14 <write_com>
    if (strcmp(F17Value[item][0], "") != 0) {
 8004314:	01a3      	lsls	r3, r4, #6
 8004316:	4a0f      	ldr	r2, [pc, #60]	@ (8004354 <LCD_F17_item+0x90>)
 8004318:	58d3      	ldr	r3, [r2, r3]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	b193      	cbz	r3, 8004344 <LCD_F17_item+0x80>
        hzkdis(F17Value[item][g_F17[item]]);
 800431e:	4b0e      	ldr	r3, [pc, #56]	@ (8004358 <LCD_F17_item+0x94>)
 8004320:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004324:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004328:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800432c:	f7fe fd22 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F17[item]);
    }
    write_com(0x93);
 8004330:	2093      	movs	r0, #147	@ 0x93
 8004332:	f7fe fcef 	bl	8002d14 <write_com>
}
 8004336:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F17[item]);
 8004338:	4b07      	ldr	r3, [pc, #28]	@ (8004358 <LCD_F17_item+0x94>)
 800433a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800433e:	f7fe fe0f 	bl	8002f60 <LCD_ShowNum>
 8004342:	e7da      	b.n	80042fa <LCD_F17_item+0x36>
        LCD_ShowNum(g_F17[item]);
 8004344:	4b04      	ldr	r3, [pc, #16]	@ (8004358 <LCD_F17_item+0x94>)
 8004346:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800434a:	f7fe fe09 	bl	8002f60 <LCD_ShowNum>
 800434e:	e7ef      	b.n	8004330 <LCD_F17_item+0x6c>
 8004350:	200047f4 	.word	0x200047f4
 8004354:	200047f4 	.word	0x200047f4
 8004358:	200047f4 	.word	0x200047f4

0800435c <LCD_F18_item>:

void LCD_F18_item(uint8_t item, int16_t value)
{
 800435c:	b510      	push	{r4, lr}
 800435e:	4604      	mov	r4, r0
    item = GET_MENU(item, F18_ITEM_MAX);
    write_com(0x83);
 8004360:	2083      	movs	r0, #131	@ 0x83
 8004362:	f7fe fcd7 	bl	8002d14 <write_com>
    hzkdis(F18Item[item]);
 8004366:	4b20      	ldr	r3, [pc, #128]	@ (80043e8 <LCD_F18_item+0x8c>)
 8004368:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800436c:	f7fe fd02 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8004370:	2093      	movs	r0, #147	@ 0x93
 8004372:	f7fe fccf 	bl	8002d14 <write_com>
    if (strcmp(F18Value[item][0], "") != 0) {
 8004376:	01a3      	lsls	r3, r4, #6
 8004378:	4a1c      	ldr	r2, [pc, #112]	@ (80043ec <LCD_F18_item+0x90>)
 800437a:	58d3      	ldr	r3, [r2, r3]
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	b33b      	cbz	r3, 80043d0 <LCD_F18_item+0x74>
        hzkdis(F18Value[item][g_F18[item]]);
 8004380:	4b1b      	ldr	r3, [pc, #108]	@ (80043f0 <LCD_F18_item+0x94>)
 8004382:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004386:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800438a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800438e:	f7fe fcf1 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F18[item]);
    }

    item = GET_MENU(item + 1, F18_ITEM_MAX);
 8004392:	3401      	adds	r4, #1
 8004394:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004396:	208b      	movs	r0, #139	@ 0x8b
 8004398:	f7fe fcbc 	bl	8002d14 <write_com>
    hzkdis(F18Item[item]);
 800439c:	4b12      	ldr	r3, [pc, #72]	@ (80043e8 <LCD_F18_item+0x8c>)
 800439e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80043a2:	f7fe fce7 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 80043a6:	209b      	movs	r0, #155	@ 0x9b
 80043a8:	f7fe fcb4 	bl	8002d14 <write_com>
    if (strcmp(F18Value[item][0], "") != 0) {
 80043ac:	01a3      	lsls	r3, r4, #6
 80043ae:	4a0f      	ldr	r2, [pc, #60]	@ (80043ec <LCD_F18_item+0x90>)
 80043b0:	58d3      	ldr	r3, [r2, r3]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	b193      	cbz	r3, 80043dc <LCD_F18_item+0x80>
        hzkdis(F18Value[item][g_F18[item]]);
 80043b6:	4b0e      	ldr	r3, [pc, #56]	@ (80043f0 <LCD_F18_item+0x94>)
 80043b8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80043bc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80043c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80043c4:	f7fe fcd6 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F18[item]);
    }
    write_com(0x93);
 80043c8:	2093      	movs	r0, #147	@ 0x93
 80043ca:	f7fe fca3 	bl	8002d14 <write_com>
}
 80043ce:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F18[item]);
 80043d0:	4b07      	ldr	r3, [pc, #28]	@ (80043f0 <LCD_F18_item+0x94>)
 80043d2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80043d6:	f7fe fdc3 	bl	8002f60 <LCD_ShowNum>
 80043da:	e7da      	b.n	8004392 <LCD_F18_item+0x36>
        LCD_ShowNum(g_F18[item]);
 80043dc:	4b04      	ldr	r3, [pc, #16]	@ (80043f0 <LCD_F18_item+0x94>)
 80043de:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80043e2:	f7fe fdbd 	bl	8002f60 <LCD_ShowNum>
 80043e6:	e7ef      	b.n	80043c8 <LCD_F18_item+0x6c>
 80043e8:	200047f4 	.word	0x200047f4
 80043ec:	200047f4 	.word	0x200047f4
 80043f0:	200047f4 	.word	0x200047f4

080043f4 <LCD_F19_item>:

void LCD_F19_item(uint8_t item, int16_t value)
{
 80043f4:	b510      	push	{r4, lr}
 80043f6:	4604      	mov	r4, r0
    item = GET_MENU(item, F19_ITEM_MAX);
    write_com(0x83);
 80043f8:	2083      	movs	r0, #131	@ 0x83
 80043fa:	f7fe fc8b 	bl	8002d14 <write_com>
    hzkdis(F19Item[item]);
 80043fe:	4b20      	ldr	r3, [pc, #128]	@ (8004480 <LCD_F19_item+0x8c>)
 8004400:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004404:	f7fe fcb6 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8004408:	2093      	movs	r0, #147	@ 0x93
 800440a:	f7fe fc83 	bl	8002d14 <write_com>
    if (strcmp(F19Value[item][0], "") != 0) {
 800440e:	01a3      	lsls	r3, r4, #6
 8004410:	4a1c      	ldr	r2, [pc, #112]	@ (8004484 <LCD_F19_item+0x90>)
 8004412:	58d3      	ldr	r3, [r2, r3]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	b33b      	cbz	r3, 8004468 <LCD_F19_item+0x74>
        hzkdis(F19Value[item][g_F19[item]]);
 8004418:	4b1b      	ldr	r3, [pc, #108]	@ (8004488 <LCD_F19_item+0x94>)
 800441a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800441e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004422:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004426:	f7fe fca5 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F19[item]);
    }

    item = GET_MENU(item + 1, F19_ITEM_MAX);
 800442a:	3401      	adds	r4, #1
 800442c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800442e:	208b      	movs	r0, #139	@ 0x8b
 8004430:	f7fe fc70 	bl	8002d14 <write_com>
    hzkdis(F19Item[item]);
 8004434:	4b12      	ldr	r3, [pc, #72]	@ (8004480 <LCD_F19_item+0x8c>)
 8004436:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800443a:	f7fe fc9b 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 800443e:	209b      	movs	r0, #155	@ 0x9b
 8004440:	f7fe fc68 	bl	8002d14 <write_com>
    if (strcmp(F19Value[item][0], "") != 0) {
 8004444:	01a3      	lsls	r3, r4, #6
 8004446:	4a0f      	ldr	r2, [pc, #60]	@ (8004484 <LCD_F19_item+0x90>)
 8004448:	58d3      	ldr	r3, [r2, r3]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	b193      	cbz	r3, 8004474 <LCD_F19_item+0x80>
        hzkdis(F19Value[item][g_F19[item]]);
 800444e:	4b0e      	ldr	r3, [pc, #56]	@ (8004488 <LCD_F19_item+0x94>)
 8004450:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004454:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004458:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800445c:	f7fe fc8a 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F19[item]);
    }
    write_com(0x93);
 8004460:	2093      	movs	r0, #147	@ 0x93
 8004462:	f7fe fc57 	bl	8002d14 <write_com>
}
 8004466:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F19[item]);
 8004468:	4b07      	ldr	r3, [pc, #28]	@ (8004488 <LCD_F19_item+0x94>)
 800446a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800446e:	f7fe fd77 	bl	8002f60 <LCD_ShowNum>
 8004472:	e7da      	b.n	800442a <LCD_F19_item+0x36>
        LCD_ShowNum(g_F19[item]);
 8004474:	4b04      	ldr	r3, [pc, #16]	@ (8004488 <LCD_F19_item+0x94>)
 8004476:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800447a:	f7fe fd71 	bl	8002f60 <LCD_ShowNum>
 800447e:	e7ef      	b.n	8004460 <LCD_F19_item+0x6c>
 8004480:	200047f4 	.word	0x200047f4
 8004484:	200047f4 	.word	0x200047f4
 8004488:	200047f4 	.word	0x200047f4

0800448c <LCD_F20_item>:

void LCD_F20_item(uint8_t item, int16_t value)
{
 800448c:	b510      	push	{r4, lr}
 800448e:	4604      	mov	r4, r0
    item = GET_MENU(item, F20_ITEM_MAX);
    write_com(0x83);
 8004490:	2083      	movs	r0, #131	@ 0x83
 8004492:	f7fe fc3f 	bl	8002d14 <write_com>
    hzkdis(F20Item[item]);
 8004496:	4b20      	ldr	r3, [pc, #128]	@ (8004518 <LCD_F20_item+0x8c>)
 8004498:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800449c:	f7fe fc6a 	bl	8002d74 <hzkdis>
    write_com(0x93);
 80044a0:	2093      	movs	r0, #147	@ 0x93
 80044a2:	f7fe fc37 	bl	8002d14 <write_com>
    if (strcmp(F20Value[item][0], "") != 0) {
 80044a6:	01a3      	lsls	r3, r4, #6
 80044a8:	4a1c      	ldr	r2, [pc, #112]	@ (800451c <LCD_F20_item+0x90>)
 80044aa:	58d3      	ldr	r3, [r2, r3]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	b33b      	cbz	r3, 8004500 <LCD_F20_item+0x74>
        hzkdis(F20Value[item][g_F20[item]]);
 80044b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004520 <LCD_F20_item+0x94>)
 80044b2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80044b6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80044ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80044be:	f7fe fc59 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F20[item]);
    }

    item = GET_MENU(item + 1, F20_ITEM_MAX);
 80044c2:	3401      	adds	r4, #1
 80044c4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80044c6:	208b      	movs	r0, #139	@ 0x8b
 80044c8:	f7fe fc24 	bl	8002d14 <write_com>
    hzkdis(F20Item[item]);
 80044cc:	4b12      	ldr	r3, [pc, #72]	@ (8004518 <LCD_F20_item+0x8c>)
 80044ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80044d2:	f7fe fc4f 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 80044d6:	209b      	movs	r0, #155	@ 0x9b
 80044d8:	f7fe fc1c 	bl	8002d14 <write_com>
    if (strcmp(F20Value[item][0], "") != 0) {
 80044dc:	01a3      	lsls	r3, r4, #6
 80044de:	4a0f      	ldr	r2, [pc, #60]	@ (800451c <LCD_F20_item+0x90>)
 80044e0:	58d3      	ldr	r3, [r2, r3]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	b193      	cbz	r3, 800450c <LCD_F20_item+0x80>
        hzkdis(F20Value[item][g_F20[item]]);
 80044e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004520 <LCD_F20_item+0x94>)
 80044e8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80044ec:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80044f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80044f4:	f7fe fc3e 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F20[item]);
    }
    write_com(0x93);
 80044f8:	2093      	movs	r0, #147	@ 0x93
 80044fa:	f7fe fc0b 	bl	8002d14 <write_com>
}
 80044fe:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F20[item]);
 8004500:	4b07      	ldr	r3, [pc, #28]	@ (8004520 <LCD_F20_item+0x94>)
 8004502:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004506:	f7fe fd2b 	bl	8002f60 <LCD_ShowNum>
 800450a:	e7da      	b.n	80044c2 <LCD_F20_item+0x36>
        LCD_ShowNum(g_F20[item]);
 800450c:	4b04      	ldr	r3, [pc, #16]	@ (8004520 <LCD_F20_item+0x94>)
 800450e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004512:	f7fe fd25 	bl	8002f60 <LCD_ShowNum>
 8004516:	e7ef      	b.n	80044f8 <LCD_F20_item+0x6c>
 8004518:	200047f4 	.word	0x200047f4
 800451c:	200047f4 	.word	0x200047f4
 8004520:	200047f4 	.word	0x200047f4

08004524 <LCD_F21_item>:

void LCD_F21_item(uint8_t item, int16_t value)
{
 8004524:	b510      	push	{r4, lr}
 8004526:	4604      	mov	r4, r0
    item = GET_MENU(item, F21_ITEM_MAX);
    write_com(0x83);
 8004528:	2083      	movs	r0, #131	@ 0x83
 800452a:	f7fe fbf3 	bl	8002d14 <write_com>
    hzkdis(F21Item[item]);
 800452e:	4b20      	ldr	r3, [pc, #128]	@ (80045b0 <LCD_F21_item+0x8c>)
 8004530:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004534:	f7fe fc1e 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8004538:	2093      	movs	r0, #147	@ 0x93
 800453a:	f7fe fbeb 	bl	8002d14 <write_com>
    if (strcmp(F21Value[item][0], "") != 0) {
 800453e:	01a3      	lsls	r3, r4, #6
 8004540:	4a1c      	ldr	r2, [pc, #112]	@ (80045b4 <LCD_F21_item+0x90>)
 8004542:	58d3      	ldr	r3, [r2, r3]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	b33b      	cbz	r3, 8004598 <LCD_F21_item+0x74>
        hzkdis(F21Value[item][g_F21[item]]);
 8004548:	4b1b      	ldr	r3, [pc, #108]	@ (80045b8 <LCD_F21_item+0x94>)
 800454a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800454e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004552:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004556:	f7fe fc0d 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F21[item]);
    }

    item = GET_MENU(item + 1, F21_ITEM_MAX);
 800455a:	3401      	adds	r4, #1
 800455c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800455e:	208b      	movs	r0, #139	@ 0x8b
 8004560:	f7fe fbd8 	bl	8002d14 <write_com>
    hzkdis(F21Item[item]);
 8004564:	4b12      	ldr	r3, [pc, #72]	@ (80045b0 <LCD_F21_item+0x8c>)
 8004566:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800456a:	f7fe fc03 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 800456e:	209b      	movs	r0, #155	@ 0x9b
 8004570:	f7fe fbd0 	bl	8002d14 <write_com>
    if (strcmp(F21Value[item][0], "") != 0) {
 8004574:	01a3      	lsls	r3, r4, #6
 8004576:	4a0f      	ldr	r2, [pc, #60]	@ (80045b4 <LCD_F21_item+0x90>)
 8004578:	58d3      	ldr	r3, [r2, r3]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	b193      	cbz	r3, 80045a4 <LCD_F21_item+0x80>
        hzkdis(F21Value[item][g_F21[item]]);
 800457e:	4b0e      	ldr	r3, [pc, #56]	@ (80045b8 <LCD_F21_item+0x94>)
 8004580:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004584:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004588:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800458c:	f7fe fbf2 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F21[item]);
    }
    write_com(0x93);
 8004590:	2093      	movs	r0, #147	@ 0x93
 8004592:	f7fe fbbf 	bl	8002d14 <write_com>
}
 8004596:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F21[item]);
 8004598:	4b07      	ldr	r3, [pc, #28]	@ (80045b8 <LCD_F21_item+0x94>)
 800459a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800459e:	f7fe fcdf 	bl	8002f60 <LCD_ShowNum>
 80045a2:	e7da      	b.n	800455a <LCD_F21_item+0x36>
        LCD_ShowNum(g_F21[item]);
 80045a4:	4b04      	ldr	r3, [pc, #16]	@ (80045b8 <LCD_F21_item+0x94>)
 80045a6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80045aa:	f7fe fcd9 	bl	8002f60 <LCD_ShowNum>
 80045ae:	e7ef      	b.n	8004590 <LCD_F21_item+0x6c>
 80045b0:	200047f4 	.word	0x200047f4
 80045b4:	200047f4 	.word	0x200047f4
 80045b8:	200047f4 	.word	0x200047f4

080045bc <LCD_F22_item>:

void LCD_F22_item(uint8_t item, int16_t value)
{
 80045bc:	b510      	push	{r4, lr}
 80045be:	4604      	mov	r4, r0
    item = GET_MENU(item, F22_ITEM_MAX);
    write_com(0x83);
 80045c0:	2083      	movs	r0, #131	@ 0x83
 80045c2:	f7fe fba7 	bl	8002d14 <write_com>
    hzkdis(F22Item[item]);
 80045c6:	4b20      	ldr	r3, [pc, #128]	@ (8004648 <LCD_F22_item+0x8c>)
 80045c8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80045cc:	f7fe fbd2 	bl	8002d74 <hzkdis>
    write_com(0x93);
 80045d0:	2093      	movs	r0, #147	@ 0x93
 80045d2:	f7fe fb9f 	bl	8002d14 <write_com>
    if (strcmp(F22Value[item][0], "") != 0) {
 80045d6:	01a3      	lsls	r3, r4, #6
 80045d8:	4a1c      	ldr	r2, [pc, #112]	@ (800464c <LCD_F22_item+0x90>)
 80045da:	58d3      	ldr	r3, [r2, r3]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	b33b      	cbz	r3, 8004630 <LCD_F22_item+0x74>
        hzkdis(F22Value[item][g_F22[item]]);
 80045e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004650 <LCD_F22_item+0x94>)
 80045e2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80045e6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80045ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80045ee:	f7fe fbc1 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F22[item]);
    }

    item = GET_MENU(item + 1, F22_ITEM_MAX);
 80045f2:	3401      	adds	r4, #1
 80045f4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80045f6:	208b      	movs	r0, #139	@ 0x8b
 80045f8:	f7fe fb8c 	bl	8002d14 <write_com>
    hzkdis(F22Item[item]);
 80045fc:	4b12      	ldr	r3, [pc, #72]	@ (8004648 <LCD_F22_item+0x8c>)
 80045fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004602:	f7fe fbb7 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8004606:	209b      	movs	r0, #155	@ 0x9b
 8004608:	f7fe fb84 	bl	8002d14 <write_com>
    if (strcmp(F22Value[item][0], "") != 0) {
 800460c:	01a3      	lsls	r3, r4, #6
 800460e:	4a0f      	ldr	r2, [pc, #60]	@ (800464c <LCD_F22_item+0x90>)
 8004610:	58d3      	ldr	r3, [r2, r3]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	b193      	cbz	r3, 800463c <LCD_F22_item+0x80>
        hzkdis(F22Value[item][g_F22[item]]);
 8004616:	4b0e      	ldr	r3, [pc, #56]	@ (8004650 <LCD_F22_item+0x94>)
 8004618:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800461c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004620:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004624:	f7fe fba6 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F22[item]);
    }
    write_com(0x93);
 8004628:	2093      	movs	r0, #147	@ 0x93
 800462a:	f7fe fb73 	bl	8002d14 <write_com>
}
 800462e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F22[item]);
 8004630:	4b07      	ldr	r3, [pc, #28]	@ (8004650 <LCD_F22_item+0x94>)
 8004632:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004636:	f7fe fc93 	bl	8002f60 <LCD_ShowNum>
 800463a:	e7da      	b.n	80045f2 <LCD_F22_item+0x36>
        LCD_ShowNum(g_F22[item]);
 800463c:	4b04      	ldr	r3, [pc, #16]	@ (8004650 <LCD_F22_item+0x94>)
 800463e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004642:	f7fe fc8d 	bl	8002f60 <LCD_ShowNum>
 8004646:	e7ef      	b.n	8004628 <LCD_F22_item+0x6c>
 8004648:	200047f4 	.word	0x200047f4
 800464c:	200047f4 	.word	0x200047f4
 8004650:	200047f4 	.word	0x200047f4

08004654 <LCD_F23_item>:

void LCD_F23_item(uint8_t item, int16_t value)
{
 8004654:	b510      	push	{r4, lr}
 8004656:	4604      	mov	r4, r0
    item = GET_MENU(item, F23_ITEM_MAX);
    write_com(0x83);
 8004658:	2083      	movs	r0, #131	@ 0x83
 800465a:	f7fe fb5b 	bl	8002d14 <write_com>
    hzkdis(F23Item[item]);
 800465e:	4b20      	ldr	r3, [pc, #128]	@ (80046e0 <LCD_F23_item+0x8c>)
 8004660:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004664:	f7fe fb86 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8004668:	2093      	movs	r0, #147	@ 0x93
 800466a:	f7fe fb53 	bl	8002d14 <write_com>
    if (strcmp(F23Value[item][0], "") != 0) {
 800466e:	01a3      	lsls	r3, r4, #6
 8004670:	4a1c      	ldr	r2, [pc, #112]	@ (80046e4 <LCD_F23_item+0x90>)
 8004672:	58d3      	ldr	r3, [r2, r3]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	b33b      	cbz	r3, 80046c8 <LCD_F23_item+0x74>
        hzkdis(F23Value[item][g_F23[item]]);
 8004678:	4b1b      	ldr	r3, [pc, #108]	@ (80046e8 <LCD_F23_item+0x94>)
 800467a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800467e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004682:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004686:	f7fe fb75 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F23[item]);
    }

    item = GET_MENU(item + 1, F23_ITEM_MAX);
 800468a:	3401      	adds	r4, #1
 800468c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800468e:	208b      	movs	r0, #139	@ 0x8b
 8004690:	f7fe fb40 	bl	8002d14 <write_com>
    hzkdis(F23Item[item]);
 8004694:	4b12      	ldr	r3, [pc, #72]	@ (80046e0 <LCD_F23_item+0x8c>)
 8004696:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800469a:	f7fe fb6b 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 800469e:	209b      	movs	r0, #155	@ 0x9b
 80046a0:	f7fe fb38 	bl	8002d14 <write_com>
    if (strcmp(F23Value[item][0], "") != 0) {
 80046a4:	01a3      	lsls	r3, r4, #6
 80046a6:	4a0f      	ldr	r2, [pc, #60]	@ (80046e4 <LCD_F23_item+0x90>)
 80046a8:	58d3      	ldr	r3, [r2, r3]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	b193      	cbz	r3, 80046d4 <LCD_F23_item+0x80>
        hzkdis(F23Value[item][g_F23[item]]);
 80046ae:	4b0e      	ldr	r3, [pc, #56]	@ (80046e8 <LCD_F23_item+0x94>)
 80046b0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80046b4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80046b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80046bc:	f7fe fb5a 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F23[item]);
    }
    write_com(0x93);
 80046c0:	2093      	movs	r0, #147	@ 0x93
 80046c2:	f7fe fb27 	bl	8002d14 <write_com>
}
 80046c6:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F23[item]);
 80046c8:	4b07      	ldr	r3, [pc, #28]	@ (80046e8 <LCD_F23_item+0x94>)
 80046ca:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80046ce:	f7fe fc47 	bl	8002f60 <LCD_ShowNum>
 80046d2:	e7da      	b.n	800468a <LCD_F23_item+0x36>
        LCD_ShowNum(g_F23[item]);
 80046d4:	4b04      	ldr	r3, [pc, #16]	@ (80046e8 <LCD_F23_item+0x94>)
 80046d6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80046da:	f7fe fc41 	bl	8002f60 <LCD_ShowNum>
 80046de:	e7ef      	b.n	80046c0 <LCD_F23_item+0x6c>
 80046e0:	200047f4 	.word	0x200047f4
 80046e4:	200047f4 	.word	0x200047f4
 80046e8:	200047f4 	.word	0x200047f4

080046ec <LCD_F24_item>:

void LCD_F24_item(uint8_t item, int16_t value)
{
 80046ec:	b510      	push	{r4, lr}
 80046ee:	4604      	mov	r4, r0
    item = GET_MENU(item, F24_ITEM_MAX);
    write_com(0x83);
 80046f0:	2083      	movs	r0, #131	@ 0x83
 80046f2:	f7fe fb0f 	bl	8002d14 <write_com>
    hzkdis(F24Item[item]);
 80046f6:	4b20      	ldr	r3, [pc, #128]	@ (8004778 <LCD_F24_item+0x8c>)
 80046f8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80046fc:	f7fe fb3a 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8004700:	2093      	movs	r0, #147	@ 0x93
 8004702:	f7fe fb07 	bl	8002d14 <write_com>
    if (strcmp(F24Value[item][0], "") != 0) {
 8004706:	01a3      	lsls	r3, r4, #6
 8004708:	4a1c      	ldr	r2, [pc, #112]	@ (800477c <LCD_F24_item+0x90>)
 800470a:	58d3      	ldr	r3, [r2, r3]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	b33b      	cbz	r3, 8004760 <LCD_F24_item+0x74>
        hzkdis(F24Value[item][g_F24[item]]);
 8004710:	4b1b      	ldr	r3, [pc, #108]	@ (8004780 <LCD_F24_item+0x94>)
 8004712:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004716:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800471a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800471e:	f7fe fb29 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F24[item]);
    }

    item = GET_MENU(item + 1, F24_ITEM_MAX);
 8004722:	3401      	adds	r4, #1
 8004724:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004726:	208b      	movs	r0, #139	@ 0x8b
 8004728:	f7fe faf4 	bl	8002d14 <write_com>
    hzkdis(F24Item[item]);
 800472c:	4b12      	ldr	r3, [pc, #72]	@ (8004778 <LCD_F24_item+0x8c>)
 800472e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004732:	f7fe fb1f 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8004736:	209b      	movs	r0, #155	@ 0x9b
 8004738:	f7fe faec 	bl	8002d14 <write_com>
    if (strcmp(F24Value[item][0], "") != 0) {
 800473c:	01a3      	lsls	r3, r4, #6
 800473e:	4a0f      	ldr	r2, [pc, #60]	@ (800477c <LCD_F24_item+0x90>)
 8004740:	58d3      	ldr	r3, [r2, r3]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	b193      	cbz	r3, 800476c <LCD_F24_item+0x80>
        hzkdis(F24Value[item][g_F24[item]]);
 8004746:	4b0e      	ldr	r3, [pc, #56]	@ (8004780 <LCD_F24_item+0x94>)
 8004748:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800474c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004750:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004754:	f7fe fb0e 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F24[item]);
    }
    write_com(0x93);
 8004758:	2093      	movs	r0, #147	@ 0x93
 800475a:	f7fe fadb 	bl	8002d14 <write_com>
}
 800475e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F24[item]);
 8004760:	4b07      	ldr	r3, [pc, #28]	@ (8004780 <LCD_F24_item+0x94>)
 8004762:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004766:	f7fe fbfb 	bl	8002f60 <LCD_ShowNum>
 800476a:	e7da      	b.n	8004722 <LCD_F24_item+0x36>
        LCD_ShowNum(g_F24[item]);
 800476c:	4b04      	ldr	r3, [pc, #16]	@ (8004780 <LCD_F24_item+0x94>)
 800476e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004772:	f7fe fbf5 	bl	8002f60 <LCD_ShowNum>
 8004776:	e7ef      	b.n	8004758 <LCD_F24_item+0x6c>
 8004778:	200047f4 	.word	0x200047f4
 800477c:	200047f4 	.word	0x200047f4
 8004780:	200047f4 	.word	0x200047f4

08004784 <LCD_F25_item>:

void LCD_F25_item(uint8_t item, int16_t value)
{
 8004784:	b510      	push	{r4, lr}
 8004786:	4604      	mov	r4, r0
    item = GET_MENU(item, F25_ITEM_MAX);
    write_com(0x83);
 8004788:	2083      	movs	r0, #131	@ 0x83
 800478a:	f7fe fac3 	bl	8002d14 <write_com>
    hzkdis(F25Item[item]);
 800478e:	4b20      	ldr	r3, [pc, #128]	@ (8004810 <LCD_F25_item+0x8c>)
 8004790:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004794:	f7fe faee 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8004798:	2093      	movs	r0, #147	@ 0x93
 800479a:	f7fe fabb 	bl	8002d14 <write_com>
    if (strcmp(F25Value[item][0], "") != 0) {
 800479e:	01a3      	lsls	r3, r4, #6
 80047a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004814 <LCD_F25_item+0x90>)
 80047a2:	58d3      	ldr	r3, [r2, r3]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	b33b      	cbz	r3, 80047f8 <LCD_F25_item+0x74>
        hzkdis(F25Value[item][g_F25[item]]);
 80047a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004818 <LCD_F25_item+0x94>)
 80047aa:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80047ae:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80047b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80047b6:	f7fe fadd 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F25[item]);
    }

    item = GET_MENU(item + 1, F25_ITEM_MAX);
 80047ba:	3401      	adds	r4, #1
 80047bc:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80047be:	208b      	movs	r0, #139	@ 0x8b
 80047c0:	f7fe faa8 	bl	8002d14 <write_com>
    hzkdis(F25Item[item]);
 80047c4:	4b12      	ldr	r3, [pc, #72]	@ (8004810 <LCD_F25_item+0x8c>)
 80047c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80047ca:	f7fe fad3 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 80047ce:	209b      	movs	r0, #155	@ 0x9b
 80047d0:	f7fe faa0 	bl	8002d14 <write_com>
    if (strcmp(F25Value[item][0], "") != 0) {
 80047d4:	01a3      	lsls	r3, r4, #6
 80047d6:	4a0f      	ldr	r2, [pc, #60]	@ (8004814 <LCD_F25_item+0x90>)
 80047d8:	58d3      	ldr	r3, [r2, r3]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	b193      	cbz	r3, 8004804 <LCD_F25_item+0x80>
        hzkdis(F25Value[item][g_F25[item]]);
 80047de:	4b0e      	ldr	r3, [pc, #56]	@ (8004818 <LCD_F25_item+0x94>)
 80047e0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80047e4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80047e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80047ec:	f7fe fac2 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F25[item]);
    }
    write_com(0x93);
 80047f0:	2093      	movs	r0, #147	@ 0x93
 80047f2:	f7fe fa8f 	bl	8002d14 <write_com>
}
 80047f6:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F25[item]);
 80047f8:	4b07      	ldr	r3, [pc, #28]	@ (8004818 <LCD_F25_item+0x94>)
 80047fa:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80047fe:	f7fe fbaf 	bl	8002f60 <LCD_ShowNum>
 8004802:	e7da      	b.n	80047ba <LCD_F25_item+0x36>
        LCD_ShowNum(g_F25[item]);
 8004804:	4b04      	ldr	r3, [pc, #16]	@ (8004818 <LCD_F25_item+0x94>)
 8004806:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800480a:	f7fe fba9 	bl	8002f60 <LCD_ShowNum>
 800480e:	e7ef      	b.n	80047f0 <LCD_F25_item+0x6c>
 8004810:	200047f4 	.word	0x200047f4
 8004814:	200047f4 	.word	0x200047f4
 8004818:	200047f4 	.word	0x200047f4

0800481c <LCD_F26_item>:

void LCD_F26_item(uint8_t item, int16_t value)
{
 800481c:	b510      	push	{r4, lr}
 800481e:	4604      	mov	r4, r0
    item = GET_MENU(item, F26_ITEM_MAX);
    write_com(0x83);
 8004820:	2083      	movs	r0, #131	@ 0x83
 8004822:	f7fe fa77 	bl	8002d14 <write_com>
    hzkdis(F26Item[item]);
 8004826:	4b20      	ldr	r3, [pc, #128]	@ (80048a8 <LCD_F26_item+0x8c>)
 8004828:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800482c:	f7fe faa2 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8004830:	2093      	movs	r0, #147	@ 0x93
 8004832:	f7fe fa6f 	bl	8002d14 <write_com>
    if (strcmp(F26Value[item][0], "") != 0) {
 8004836:	01a3      	lsls	r3, r4, #6
 8004838:	4a1c      	ldr	r2, [pc, #112]	@ (80048ac <LCD_F26_item+0x90>)
 800483a:	58d3      	ldr	r3, [r2, r3]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	b33b      	cbz	r3, 8004890 <LCD_F26_item+0x74>
        hzkdis(F26Value[item][g_F26[item]]);
 8004840:	4b1b      	ldr	r3, [pc, #108]	@ (80048b0 <LCD_F26_item+0x94>)
 8004842:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004846:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800484a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800484e:	f7fe fa91 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F26[item]);
    }

    item = GET_MENU(item + 1, F26_ITEM_MAX);
 8004852:	3401      	adds	r4, #1
 8004854:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004856:	208b      	movs	r0, #139	@ 0x8b
 8004858:	f7fe fa5c 	bl	8002d14 <write_com>
    hzkdis(F26Item[item]);
 800485c:	4b12      	ldr	r3, [pc, #72]	@ (80048a8 <LCD_F26_item+0x8c>)
 800485e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004862:	f7fe fa87 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8004866:	209b      	movs	r0, #155	@ 0x9b
 8004868:	f7fe fa54 	bl	8002d14 <write_com>
    if (strcmp(F26Value[item][0], "") != 0) {
 800486c:	01a3      	lsls	r3, r4, #6
 800486e:	4a0f      	ldr	r2, [pc, #60]	@ (80048ac <LCD_F26_item+0x90>)
 8004870:	58d3      	ldr	r3, [r2, r3]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	b193      	cbz	r3, 800489c <LCD_F26_item+0x80>
        hzkdis(F26Value[item][g_F26[item]]);
 8004876:	4b0e      	ldr	r3, [pc, #56]	@ (80048b0 <LCD_F26_item+0x94>)
 8004878:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800487c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004880:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004884:	f7fe fa76 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F26[item]);
    }
    write_com(0x93);
 8004888:	2093      	movs	r0, #147	@ 0x93
 800488a:	f7fe fa43 	bl	8002d14 <write_com>
}
 800488e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F26[item]);
 8004890:	4b07      	ldr	r3, [pc, #28]	@ (80048b0 <LCD_F26_item+0x94>)
 8004892:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004896:	f7fe fb63 	bl	8002f60 <LCD_ShowNum>
 800489a:	e7da      	b.n	8004852 <LCD_F26_item+0x36>
        LCD_ShowNum(g_F26[item]);
 800489c:	4b04      	ldr	r3, [pc, #16]	@ (80048b0 <LCD_F26_item+0x94>)
 800489e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80048a2:	f7fe fb5d 	bl	8002f60 <LCD_ShowNum>
 80048a6:	e7ef      	b.n	8004888 <LCD_F26_item+0x6c>
 80048a8:	200047f4 	.word	0x200047f4
 80048ac:	200047f4 	.word	0x200047f4
 80048b0:	200047f4 	.word	0x200047f4

080048b4 <LCD_F27_item>:

void LCD_F27_item(uint8_t item, int16_t value)
{
 80048b4:	b510      	push	{r4, lr}
 80048b6:	4604      	mov	r4, r0
    item = GET_MENU(item, F27_ITEM_MAX);
    write_com(0x83);
 80048b8:	2083      	movs	r0, #131	@ 0x83
 80048ba:	f7fe fa2b 	bl	8002d14 <write_com>
    hzkdis(F27Item[item]);
 80048be:	4b20      	ldr	r3, [pc, #128]	@ (8004940 <LCD_F27_item+0x8c>)
 80048c0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80048c4:	f7fe fa56 	bl	8002d74 <hzkdis>
    write_com(0x93);
 80048c8:	2093      	movs	r0, #147	@ 0x93
 80048ca:	f7fe fa23 	bl	8002d14 <write_com>
    if (strcmp(F27Value[item][0], "") != 0) {
 80048ce:	01a3      	lsls	r3, r4, #6
 80048d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004944 <LCD_F27_item+0x90>)
 80048d2:	58d3      	ldr	r3, [r2, r3]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	b33b      	cbz	r3, 8004928 <LCD_F27_item+0x74>
        hzkdis(F27Value[item][g_F27[item]]);
 80048d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004948 <LCD_F27_item+0x94>)
 80048da:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80048de:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80048e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80048e6:	f7fe fa45 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F27[item]);
    }

    item = GET_MENU(item + 1, F27_ITEM_MAX);
 80048ea:	3401      	adds	r4, #1
 80048ec:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80048ee:	208b      	movs	r0, #139	@ 0x8b
 80048f0:	f7fe fa10 	bl	8002d14 <write_com>
    hzkdis(F27Item[item]);
 80048f4:	4b12      	ldr	r3, [pc, #72]	@ (8004940 <LCD_F27_item+0x8c>)
 80048f6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80048fa:	f7fe fa3b 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 80048fe:	209b      	movs	r0, #155	@ 0x9b
 8004900:	f7fe fa08 	bl	8002d14 <write_com>
    if (strcmp(F27Value[item][0], "") != 0) {
 8004904:	01a3      	lsls	r3, r4, #6
 8004906:	4a0f      	ldr	r2, [pc, #60]	@ (8004944 <LCD_F27_item+0x90>)
 8004908:	58d3      	ldr	r3, [r2, r3]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	b193      	cbz	r3, 8004934 <LCD_F27_item+0x80>
        hzkdis(F27Value[item][g_F27[item]]);
 800490e:	4b0e      	ldr	r3, [pc, #56]	@ (8004948 <LCD_F27_item+0x94>)
 8004910:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004914:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004918:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800491c:	f7fe fa2a 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F27[item]);
    }
    write_com(0x93);
 8004920:	2093      	movs	r0, #147	@ 0x93
 8004922:	f7fe f9f7 	bl	8002d14 <write_com>
}
 8004926:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F27[item]);
 8004928:	4b07      	ldr	r3, [pc, #28]	@ (8004948 <LCD_F27_item+0x94>)
 800492a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800492e:	f7fe fb17 	bl	8002f60 <LCD_ShowNum>
 8004932:	e7da      	b.n	80048ea <LCD_F27_item+0x36>
        LCD_ShowNum(g_F27[item]);
 8004934:	4b04      	ldr	r3, [pc, #16]	@ (8004948 <LCD_F27_item+0x94>)
 8004936:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800493a:	f7fe fb11 	bl	8002f60 <LCD_ShowNum>
 800493e:	e7ef      	b.n	8004920 <LCD_F27_item+0x6c>
 8004940:	200047f4 	.word	0x200047f4
 8004944:	200047f4 	.word	0x200047f4
 8004948:	200047f4 	.word	0x200047f4

0800494c <LCD_F28_item>:

void LCD_F28_item(uint8_t item, int16_t value)
{
 800494c:	b510      	push	{r4, lr}
 800494e:	4604      	mov	r4, r0
    item = GET_MENU(item, F28_ITEM_MAX);
    write_com(0x83);
 8004950:	2083      	movs	r0, #131	@ 0x83
 8004952:	f7fe f9df 	bl	8002d14 <write_com>
    hzkdis(F28Item[item]);
 8004956:	4b20      	ldr	r3, [pc, #128]	@ (80049d8 <LCD_F28_item+0x8c>)
 8004958:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800495c:	f7fe fa0a 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8004960:	2093      	movs	r0, #147	@ 0x93
 8004962:	f7fe f9d7 	bl	8002d14 <write_com>
    if (strcmp(F28Value[item][0], "") != 0) {
 8004966:	01a3      	lsls	r3, r4, #6
 8004968:	4a1c      	ldr	r2, [pc, #112]	@ (80049dc <LCD_F28_item+0x90>)
 800496a:	58d3      	ldr	r3, [r2, r3]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	b33b      	cbz	r3, 80049c0 <LCD_F28_item+0x74>
        hzkdis(F28Value[item][g_F28[item]]);
 8004970:	4b1b      	ldr	r3, [pc, #108]	@ (80049e0 <LCD_F28_item+0x94>)
 8004972:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004976:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800497a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800497e:	f7fe f9f9 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F28[item]);
    }

    item = GET_MENU(item + 1, F28_ITEM_MAX);
 8004982:	3401      	adds	r4, #1
 8004984:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004986:	208b      	movs	r0, #139	@ 0x8b
 8004988:	f7fe f9c4 	bl	8002d14 <write_com>
    hzkdis(F28Item[item]);
 800498c:	4b12      	ldr	r3, [pc, #72]	@ (80049d8 <LCD_F28_item+0x8c>)
 800498e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004992:	f7fe f9ef 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8004996:	209b      	movs	r0, #155	@ 0x9b
 8004998:	f7fe f9bc 	bl	8002d14 <write_com>
    if (strcmp(F28Value[item][0], "") != 0) {
 800499c:	01a3      	lsls	r3, r4, #6
 800499e:	4a0f      	ldr	r2, [pc, #60]	@ (80049dc <LCD_F28_item+0x90>)
 80049a0:	58d3      	ldr	r3, [r2, r3]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	b193      	cbz	r3, 80049cc <LCD_F28_item+0x80>
        hzkdis(F28Value[item][g_F28[item]]);
 80049a6:	4b0e      	ldr	r3, [pc, #56]	@ (80049e0 <LCD_F28_item+0x94>)
 80049a8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80049ac:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80049b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80049b4:	f7fe f9de 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F28[item]);
    }
    write_com(0x93);
 80049b8:	2093      	movs	r0, #147	@ 0x93
 80049ba:	f7fe f9ab 	bl	8002d14 <write_com>
}
 80049be:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F28[item]);
 80049c0:	4b07      	ldr	r3, [pc, #28]	@ (80049e0 <LCD_F28_item+0x94>)
 80049c2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80049c6:	f7fe facb 	bl	8002f60 <LCD_ShowNum>
 80049ca:	e7da      	b.n	8004982 <LCD_F28_item+0x36>
        LCD_ShowNum(g_F28[item]);
 80049cc:	4b04      	ldr	r3, [pc, #16]	@ (80049e0 <LCD_F28_item+0x94>)
 80049ce:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80049d2:	f7fe fac5 	bl	8002f60 <LCD_ShowNum>
 80049d6:	e7ef      	b.n	80049b8 <LCD_F28_item+0x6c>
 80049d8:	200047f4 	.word	0x200047f4
 80049dc:	200047f4 	.word	0x200047f4
 80049e0:	200047f4 	.word	0x200047f4

080049e4 <LCD_F29_item>:

void LCD_F29_item(uint8_t item, int16_t value)
{
 80049e4:	b510      	push	{r4, lr}
 80049e6:	4604      	mov	r4, r0
    item = GET_MENU(item, F29_ITEM_MAX);
    write_com(0x83);
 80049e8:	2083      	movs	r0, #131	@ 0x83
 80049ea:	f7fe f993 	bl	8002d14 <write_com>
    hzkdis(F29Item[item]);
 80049ee:	4b20      	ldr	r3, [pc, #128]	@ (8004a70 <LCD_F29_item+0x8c>)
 80049f0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80049f4:	f7fe f9be 	bl	8002d74 <hzkdis>
    write_com(0x93);
 80049f8:	2093      	movs	r0, #147	@ 0x93
 80049fa:	f7fe f98b 	bl	8002d14 <write_com>
    if (strcmp(F29Value[item][0], "") != 0) {
 80049fe:	01a3      	lsls	r3, r4, #6
 8004a00:	4a1c      	ldr	r2, [pc, #112]	@ (8004a74 <LCD_F29_item+0x90>)
 8004a02:	58d3      	ldr	r3, [r2, r3]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	b33b      	cbz	r3, 8004a58 <LCD_F29_item+0x74>
        hzkdis(F29Value[item][g_F29[item]]);
 8004a08:	4b1b      	ldr	r3, [pc, #108]	@ (8004a78 <LCD_F29_item+0x94>)
 8004a0a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004a0e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004a12:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a16:	f7fe f9ad 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F29[item]);
    }

    item = GET_MENU(item + 1, F29_ITEM_MAX);
 8004a1a:	3401      	adds	r4, #1
 8004a1c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004a1e:	208b      	movs	r0, #139	@ 0x8b
 8004a20:	f7fe f978 	bl	8002d14 <write_com>
    hzkdis(F29Item[item]);
 8004a24:	4b12      	ldr	r3, [pc, #72]	@ (8004a70 <LCD_F29_item+0x8c>)
 8004a26:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004a2a:	f7fe f9a3 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8004a2e:	209b      	movs	r0, #155	@ 0x9b
 8004a30:	f7fe f970 	bl	8002d14 <write_com>
    if (strcmp(F29Value[item][0], "") != 0) {
 8004a34:	01a3      	lsls	r3, r4, #6
 8004a36:	4a0f      	ldr	r2, [pc, #60]	@ (8004a74 <LCD_F29_item+0x90>)
 8004a38:	58d3      	ldr	r3, [r2, r3]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	b193      	cbz	r3, 8004a64 <LCD_F29_item+0x80>
        hzkdis(F29Value[item][g_F29[item]]);
 8004a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a78 <LCD_F29_item+0x94>)
 8004a40:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004a44:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004a48:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a4c:	f7fe f992 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F29[item]);
    }
    write_com(0x93);
 8004a50:	2093      	movs	r0, #147	@ 0x93
 8004a52:	f7fe f95f 	bl	8002d14 <write_com>
}
 8004a56:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F29[item]);
 8004a58:	4b07      	ldr	r3, [pc, #28]	@ (8004a78 <LCD_F29_item+0x94>)
 8004a5a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004a5e:	f7fe fa7f 	bl	8002f60 <LCD_ShowNum>
 8004a62:	e7da      	b.n	8004a1a <LCD_F29_item+0x36>
        LCD_ShowNum(g_F29[item]);
 8004a64:	4b04      	ldr	r3, [pc, #16]	@ (8004a78 <LCD_F29_item+0x94>)
 8004a66:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004a6a:	f7fe fa79 	bl	8002f60 <LCD_ShowNum>
 8004a6e:	e7ef      	b.n	8004a50 <LCD_F29_item+0x6c>
 8004a70:	200047f4 	.word	0x200047f4
 8004a74:	200047f4 	.word	0x200047f4
 8004a78:	200047f4 	.word	0x200047f4

08004a7c <LCD_F30_item>:

void LCD_F30_item(uint8_t item, int16_t value)
{
 8004a7c:	b510      	push	{r4, lr}
 8004a7e:	4604      	mov	r4, r0
    item = GET_MENU(item, F30_ITEM_MAX);
    write_com(0x83);
 8004a80:	2083      	movs	r0, #131	@ 0x83
 8004a82:	f7fe f947 	bl	8002d14 <write_com>
    hzkdis(F30Item[item]);
 8004a86:	4b20      	ldr	r3, [pc, #128]	@ (8004b08 <LCD_F30_item+0x8c>)
 8004a88:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004a8c:	f7fe f972 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8004a90:	2093      	movs	r0, #147	@ 0x93
 8004a92:	f7fe f93f 	bl	8002d14 <write_com>
    if (strcmp(F30Value[item][0], "") != 0) {
 8004a96:	01a3      	lsls	r3, r4, #6
 8004a98:	4a1c      	ldr	r2, [pc, #112]	@ (8004b0c <LCD_F30_item+0x90>)
 8004a9a:	58d3      	ldr	r3, [r2, r3]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	b33b      	cbz	r3, 8004af0 <LCD_F30_item+0x74>
        hzkdis(F30Value[item][g_F30[item]]);
 8004aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8004b10 <LCD_F30_item+0x94>)
 8004aa2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004aa6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004aaa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004aae:	f7fe f961 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F30[item]);
    }

    item = GET_MENU(item + 1, F30_ITEM_MAX);
 8004ab2:	3401      	adds	r4, #1
 8004ab4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004ab6:	208b      	movs	r0, #139	@ 0x8b
 8004ab8:	f7fe f92c 	bl	8002d14 <write_com>
    hzkdis(F30Item[item]);
 8004abc:	4b12      	ldr	r3, [pc, #72]	@ (8004b08 <LCD_F30_item+0x8c>)
 8004abe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004ac2:	f7fe f957 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8004ac6:	209b      	movs	r0, #155	@ 0x9b
 8004ac8:	f7fe f924 	bl	8002d14 <write_com>
    if (strcmp(F30Value[item][0], "") != 0) {
 8004acc:	01a3      	lsls	r3, r4, #6
 8004ace:	4a0f      	ldr	r2, [pc, #60]	@ (8004b0c <LCD_F30_item+0x90>)
 8004ad0:	58d3      	ldr	r3, [r2, r3]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	b193      	cbz	r3, 8004afc <LCD_F30_item+0x80>
        hzkdis(F30Value[item][g_F30[item]]);
 8004ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8004b10 <LCD_F30_item+0x94>)
 8004ad8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004adc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004ae0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004ae4:	f7fe f946 	bl	8002d74 <hzkdis>
    } else {
        LCD_ShowNum(g_F30[item]);
    }
    write_com(0x93);
 8004ae8:	2093      	movs	r0, #147	@ 0x93
 8004aea:	f7fe f913 	bl	8002d14 <write_com>
}
 8004aee:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F30[item]);
 8004af0:	4b07      	ldr	r3, [pc, #28]	@ (8004b10 <LCD_F30_item+0x94>)
 8004af2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004af6:	f7fe fa33 	bl	8002f60 <LCD_ShowNum>
 8004afa:	e7da      	b.n	8004ab2 <LCD_F30_item+0x36>
        LCD_ShowNum(g_F30[item]);
 8004afc:	4b04      	ldr	r3, [pc, #16]	@ (8004b10 <LCD_F30_item+0x94>)
 8004afe:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004b02:	f7fe fa2d 	bl	8002f60 <LCD_ShowNum>
 8004b06:	e7ef      	b.n	8004ae8 <LCD_F30_item+0x6c>
 8004b08:	200047f4 	.word	0x200047f4
 8004b0c:	200047f4 	.word	0x200047f4
 8004b10:	200047f4 	.word	0x200047f4
 8004b14:	00000000 	.word	0x00000000

08004b18 <LCD_ESP_2_item>:
{
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	4604      	mov	r4, r0
    item = GET_MENU(item, ESP_2_ITEM_MAX);
 8004b1c:	2805      	cmp	r0, #5
 8004b1e:	d901      	bls.n	8004b24 <LCD_ESP_2_item+0xc>
 8004b20:	1f84      	subs	r4, r0, #6
 8004b22:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004b24:	2083      	movs	r0, #131	@ 0x83
 8004b26:	f7fe f8f5 	bl	8002d14 <write_com>
    hzkdis(ESP_2Item[item]);
 8004b2a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ca8 <LCD_ESP_2_item+0x190>)
 8004b2c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004b30:	f7fe f920 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8004b34:	2093      	movs	r0, #147	@ 0x93
 8004b36:	f7fe f8ed 	bl	8002d14 <write_com>
    if (strcmp(ESP_2Value[item][0], "") != 0) {
 8004b3a:	01a3      	lsls	r3, r4, #6
 8004b3c:	4a5b      	ldr	r2, [pc, #364]	@ (8004cac <LCD_ESP_2_item+0x194>)
 8004b3e:	58d3      	ldr	r3, [r2, r3]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	b94b      	cbnz	r3, 8004b58 <LCD_ESP_2_item+0x40>
    	if(item == 0 || item == 1){
 8004b44:	2c01      	cmp	r4, #1
 8004b46:	d92f      	bls.n	8004ba8 <LCD_ESP_2_item+0x90>
    	else if(item == 2){
 8004b48:	2c02      	cmp	r4, #2
 8004b4a:	d048      	beq.n	8004bde <LCD_ESP_2_item+0xc6>
    		LCD_ShowNum(g_ESP_2[item]);
 8004b4c:	4b58      	ldr	r3, [pc, #352]	@ (8004cb0 <LCD_ESP_2_item+0x198>)
 8004b4e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004b52:	f7fe fa05 	bl	8002f60 <LCD_ShowNum>
 8004b56:	e008      	b.n	8004b6a <LCD_ESP_2_item+0x52>
        hzkdis(ESP_2Value[item][g_ESP_2[item]]);
 8004b58:	4b55      	ldr	r3, [pc, #340]	@ (8004cb0 <LCD_ESP_2_item+0x198>)
 8004b5a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004b5e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004b62:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004b66:	f7fe f905 	bl	8002d74 <hzkdis>
    item = GET_MENU(item+1, ESP_2_ITEM_MAX);
 8004b6a:	2c04      	cmp	r4, #4
 8004b6c:	d950      	bls.n	8004c10 <LCD_ESP_2_item+0xf8>
 8004b6e:	3c05      	subs	r4, #5
 8004b70:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004b72:	208b      	movs	r0, #139	@ 0x8b
 8004b74:	f7fe f8ce 	bl	8002d14 <write_com>
    hzkdis(ESP_2Item[item]);
 8004b78:	4b4b      	ldr	r3, [pc, #300]	@ (8004ca8 <LCD_ESP_2_item+0x190>)
 8004b7a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004b7e:	f7fe f8f9 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8004b82:	209b      	movs	r0, #155	@ 0x9b
 8004b84:	f7fe f8c6 	bl	8002d14 <write_com>
    if (strcmp(ESP_2Value[item][0], "") != 0) {
 8004b88:	01a3      	lsls	r3, r4, #6
 8004b8a:	4a48      	ldr	r2, [pc, #288]	@ (8004cac <LCD_ESP_2_item+0x194>)
 8004b8c:	58d3      	ldr	r3, [r2, r3]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d140      	bne.n	8004c16 <LCD_ESP_2_item+0xfe>
    	if(item == 0 || item == 1){
 8004b94:	2c01      	cmp	r4, #1
 8004b96:	d94b      	bls.n	8004c30 <LCD_ESP_2_item+0x118>
    	else if(item == 2){
 8004b98:	2c02      	cmp	r4, #2
 8004b9a:	d064      	beq.n	8004c66 <LCD_ESP_2_item+0x14e>
    		LCD_ShowNum(g_ESP_2[item]);
 8004b9c:	4b44      	ldr	r3, [pc, #272]	@ (8004cb0 <LCD_ESP_2_item+0x198>)
 8004b9e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004ba2:	f7fe f9dd 	bl	8002f60 <LCD_ShowNum>
 8004ba6:	e03f      	b.n	8004c28 <LCD_ESP_2_item+0x110>
            int32_t tmp = (g_ESP_2[item] * 100 * 0.027127 - 21.593092) * 100;
 8004ba8:	4b41      	ldr	r3, [pc, #260]	@ (8004cb0 <LCD_ESP_2_item+0x198>)
 8004baa:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004bae:	2064      	movs	r0, #100	@ 0x64
 8004bb0:	fb03 f000 	mul.w	r0, r3, r0
 8004bb4:	f7fb fc96 	bl	80004e4 <__aeabi_i2d>
 8004bb8:	a337      	add	r3, pc, #220	@ (adr r3, 8004c98 <LCD_ESP_2_item+0x180>)
 8004bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbe:	f7fb fcfb 	bl	80005b8 <__aeabi_dmul>
 8004bc2:	a337      	add	r3, pc, #220	@ (adr r3, 8004ca0 <LCD_ESP_2_item+0x188>)
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	f7fb fb3e 	bl	8000248 <__aeabi_dsub>
 8004bcc:	2200      	movs	r2, #0
 8004bce:	4b39      	ldr	r3, [pc, #228]	@ (8004cb4 <LCD_ESP_2_item+0x19c>)
 8004bd0:	f7fb fcf2 	bl	80005b8 <__aeabi_dmul>
 8004bd4:	f7fb ffa0 	bl	8000b18 <__aeabi_d2iz>
			LCD_ShowNumWithTwoDecimals(tmp);
 8004bd8:	f7fe f8da 	bl	8002d90 <LCD_ShowNumWithTwoDecimals>
 8004bdc:	e7c5      	b.n	8004b6a <LCD_ESP_2_item+0x52>
    		int32_t tmp = (g_ESP_2[item] * 30 * 0.0009765625 - 2.0947265625) * 100;
 8004bde:	4b34      	ldr	r3, [pc, #208]	@ (8004cb0 <LCD_ESP_2_item+0x198>)
 8004be0:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004be4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8004be8:	0040      	lsls	r0, r0, #1
 8004bea:	f7fb fc7b 	bl	80004e4 <__aeabi_i2d>
 8004bee:	2200      	movs	r2, #0
 8004bf0:	4b31      	ldr	r3, [pc, #196]	@ (8004cb8 <LCD_ESP_2_item+0x1a0>)
 8004bf2:	f7fb fce1 	bl	80005b8 <__aeabi_dmul>
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	4b30      	ldr	r3, [pc, #192]	@ (8004cbc <LCD_ESP_2_item+0x1a4>)
 8004bfa:	f7fb fb25 	bl	8000248 <__aeabi_dsub>
 8004bfe:	2200      	movs	r2, #0
 8004c00:	4b2c      	ldr	r3, [pc, #176]	@ (8004cb4 <LCD_ESP_2_item+0x19c>)
 8004c02:	f7fb fcd9 	bl	80005b8 <__aeabi_dmul>
 8004c06:	f7fb ff87 	bl	8000b18 <__aeabi_d2iz>
    		LCD_ShowNumWithTwoDecimals(tmp);
 8004c0a:	f7fe f8c1 	bl	8002d90 <LCD_ShowNumWithTwoDecimals>
 8004c0e:	e7ac      	b.n	8004b6a <LCD_ESP_2_item+0x52>
    item = GET_MENU(item+1, ESP_2_ITEM_MAX);
 8004c10:	3401      	adds	r4, #1
 8004c12:	b2e4      	uxtb	r4, r4
 8004c14:	e7ad      	b.n	8004b72 <LCD_ESP_2_item+0x5a>
        hzkdis(ESP_2Value[item][g_ESP_2[item]]);
 8004c16:	4b26      	ldr	r3, [pc, #152]	@ (8004cb0 <LCD_ESP_2_item+0x198>)
 8004c18:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004c1c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004c20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c24:	f7fe f8a6 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8004c28:	2093      	movs	r0, #147	@ 0x93
 8004c2a:	f7fe f873 	bl	8002d14 <write_com>
}
 8004c2e:	bd38      	pop	{r3, r4, r5, pc}
            int32_t tmp = (g_ESP_2[item] * 100 * 0.027127 - 21.593092) * 100;
 8004c30:	4b1f      	ldr	r3, [pc, #124]	@ (8004cb0 <LCD_ESP_2_item+0x198>)
 8004c32:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004c36:	2064      	movs	r0, #100	@ 0x64
 8004c38:	fb03 f000 	mul.w	r0, r3, r0
 8004c3c:	f7fb fc52 	bl	80004e4 <__aeabi_i2d>
 8004c40:	a315      	add	r3, pc, #84	@ (adr r3, 8004c98 <LCD_ESP_2_item+0x180>)
 8004c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c46:	f7fb fcb7 	bl	80005b8 <__aeabi_dmul>
 8004c4a:	a315      	add	r3, pc, #84	@ (adr r3, 8004ca0 <LCD_ESP_2_item+0x188>)
 8004c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c50:	f7fb fafa 	bl	8000248 <__aeabi_dsub>
 8004c54:	2200      	movs	r2, #0
 8004c56:	4b17      	ldr	r3, [pc, #92]	@ (8004cb4 <LCD_ESP_2_item+0x19c>)
 8004c58:	f7fb fcae 	bl	80005b8 <__aeabi_dmul>
 8004c5c:	f7fb ff5c 	bl	8000b18 <__aeabi_d2iz>
			LCD_ShowNumWithTwoDecimals(tmp);
 8004c60:	f7fe f896 	bl	8002d90 <LCD_ShowNumWithTwoDecimals>
 8004c64:	e7e0      	b.n	8004c28 <LCD_ESP_2_item+0x110>
    		int32_t tmp = (g_ESP_2[item] * 30 * 0.0009765625 - 2.0947265625) * 100;
 8004c66:	4b12      	ldr	r3, [pc, #72]	@ (8004cb0 <LCD_ESP_2_item+0x198>)
 8004c68:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004c6c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8004c70:	0040      	lsls	r0, r0, #1
 8004c72:	f7fb fc37 	bl	80004e4 <__aeabi_i2d>
 8004c76:	2200      	movs	r2, #0
 8004c78:	4b0f      	ldr	r3, [pc, #60]	@ (8004cb8 <LCD_ESP_2_item+0x1a0>)
 8004c7a:	f7fb fc9d 	bl	80005b8 <__aeabi_dmul>
 8004c7e:	2200      	movs	r2, #0
 8004c80:	4b0e      	ldr	r3, [pc, #56]	@ (8004cbc <LCD_ESP_2_item+0x1a4>)
 8004c82:	f7fb fae1 	bl	8000248 <__aeabi_dsub>
 8004c86:	2200      	movs	r2, #0
 8004c88:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb4 <LCD_ESP_2_item+0x19c>)
 8004c8a:	f7fb fc95 	bl	80005b8 <__aeabi_dmul>
 8004c8e:	f7fb ff43 	bl	8000b18 <__aeabi_d2iz>
    		LCD_ShowNumWithTwoDecimals(tmp);
 8004c92:	f7fe f87d 	bl	8002d90 <LCD_ShowNumWithTwoDecimals>
 8004c96:	e7c7      	b.n	8004c28 <LCD_ESP_2_item+0x110>
 8004c98:	275ab7dc 	.word	0x275ab7dc
 8004c9c:	3f9bc72e 	.word	0x3f9bc72e
 8004ca0:	e09784ec 	.word	0xe09784ec
 8004ca4:	403597d4 	.word	0x403597d4
 8004ca8:	20004234 	.word	0x20004234
 8004cac:	200040b4 	.word	0x200040b4
 8004cb0:	200065a0 	.word	0x200065a0
 8004cb4:	40590000 	.word	0x40590000
 8004cb8:	3f500000 	.word	0x3f500000
 8004cbc:	4000c200 	.word	0x4000c200

08004cc0 <LCD_FCM_5_item>:
{
 8004cc0:	b538      	push	{r3, r4, r5, lr}
 8004cc2:	4604      	mov	r4, r0
    item = GET_MENU(item, FCM_5_ITEM_MAX);
 8004cc4:	2809      	cmp	r0, #9
 8004cc6:	d902      	bls.n	8004cce <LCD_FCM_5_item+0xe>
 8004cc8:	f1a0 040a 	sub.w	r4, r0, #10
 8004ccc:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004cce:	2083      	movs	r0, #131	@ 0x83
 8004cd0:	f7fe f820 	bl	8002d14 <write_com>
    hzkdis(FCM_5Item[item]);
 8004cd4:	4b52      	ldr	r3, [pc, #328]	@ (8004e20 <LCD_FCM_5_item+0x160>)
 8004cd6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004cda:	f7fe f84b 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8004cde:	2093      	movs	r0, #147	@ 0x93
 8004ce0:	f7fe f818 	bl	8002d14 <write_com>
    if (strcmp(FCM_5Value[item][0], "") != 0) {
 8004ce4:	01a3      	lsls	r3, r4, #6
 8004ce6:	4a4f      	ldr	r2, [pc, #316]	@ (8004e24 <LCD_FCM_5_item+0x164>)
 8004ce8:	58d3      	ldr	r3, [r2, r3]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	b943      	cbnz	r3, 8004d00 <LCD_FCM_5_item+0x40>
 8004cee:	1ee3      	subs	r3, r4, #3
 8004cf0:	2b06      	cmp	r3, #6
 8004cf2:	d84f      	bhi.n	8004d94 <LCD_FCM_5_item+0xd4>
 8004cf4:	e8df f003 	tbb	[pc, r3]
 8004cf8:	4e4e332c 	.word	0x4e4e332c
 8004cfc:	2c4e      	.short	0x2c4e
 8004cfe:	33          	.byte	0x33
 8004cff:	00          	.byte	0x00
        hzkdis(FCM_5Value[item][g_FCM_5[item]]);
 8004d00:	4b49      	ldr	r3, [pc, #292]	@ (8004e28 <LCD_FCM_5_item+0x168>)
 8004d02:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004d06:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004d0a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004d0e:	f7fe f831 	bl	8002d74 <hzkdis>
    item = GET_MENU(item+1, FCM_5_ITEM_MAX);
 8004d12:	2c08      	cmp	r4, #8
 8004d14:	d944      	bls.n	8004da0 <LCD_FCM_5_item+0xe0>
 8004d16:	3c09      	subs	r4, #9
 8004d18:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004d1a:	208b      	movs	r0, #139	@ 0x8b
 8004d1c:	f7fd fffa 	bl	8002d14 <write_com>
    hzkdis(FCM_5Item[item]);
 8004d20:	4625      	mov	r5, r4
 8004d22:	4b3f      	ldr	r3, [pc, #252]	@ (8004e20 <LCD_FCM_5_item+0x160>)
 8004d24:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004d28:	f7fe f824 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8004d2c:	209b      	movs	r0, #155	@ 0x9b
 8004d2e:	f7fd fff1 	bl	8002d14 <write_com>
    if (strcmp(FCM_5Value[item][0], "") != 0) {
 8004d32:	01a3      	lsls	r3, r4, #6
 8004d34:	4a3b      	ldr	r2, [pc, #236]	@ (8004e24 <LCD_FCM_5_item+0x164>)
 8004d36:	58d3      	ldr	r3, [r2, r3]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d133      	bne.n	8004da6 <LCD_FCM_5_item+0xe6>
 8004d3e:	3c03      	subs	r4, #3
 8004d40:	2c06      	cmp	r4, #6
 8004d42:	d85f      	bhi.n	8004e04 <LCD_FCM_5_item+0x144>
 8004d44:	e8df f004 	tbb	[pc, r4]
 8004d48:	5e5e433c 	.word	0x5e5e433c
 8004d4c:	3c5e      	.short	0x3c5e
 8004d4e:	43          	.byte	0x43
 8004d4f:	00          	.byte	0x00
    		LCD_ShowNum(g_FCM_5[item] - 25);
 8004d50:	4b35      	ldr	r3, [pc, #212]	@ (8004e28 <LCD_FCM_5_item+0x168>)
 8004d52:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004d56:	3819      	subs	r0, #25
 8004d58:	f7fe f902 	bl	8002f60 <LCD_ShowNum>
    	if(item == FCM_EgoRiLineHozlDst || item == FCM_EgoLeLineHozlDst){
 8004d5c:	e7d9      	b.n	8004d12 <LCD_FCM_5_item+0x52>
    		int32_t tmp = (g_FCM_5[item] * 20 * 0.00006 - 0.0156) * 100;
 8004d5e:	4b32      	ldr	r3, [pc, #200]	@ (8004e28 <LCD_FCM_5_item+0x168>)
 8004d60:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004d64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004d68:	0080      	lsls	r0, r0, #2
 8004d6a:	f7fb fbbb 	bl	80004e4 <__aeabi_i2d>
 8004d6e:	a328      	add	r3, pc, #160	@ (adr r3, 8004e10 <LCD_FCM_5_item+0x150>)
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	f7fb fc20 	bl	80005b8 <__aeabi_dmul>
 8004d78:	a327      	add	r3, pc, #156	@ (adr r3, 8004e18 <LCD_FCM_5_item+0x158>)
 8004d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7e:	f7fb fa63 	bl	8000248 <__aeabi_dsub>
 8004d82:	2200      	movs	r2, #0
 8004d84:	4b29      	ldr	r3, [pc, #164]	@ (8004e2c <LCD_FCM_5_item+0x16c>)
 8004d86:	f7fb fc17 	bl	80005b8 <__aeabi_dmul>
 8004d8a:	f7fb fec5 	bl	8000b18 <__aeabi_d2iz>
    		LCD_ShowNumWithTwoDecimals(tmp);
 8004d8e:	f7fd ffff 	bl	8002d90 <LCD_ShowNumWithTwoDecimals>
    	else if((item == FCM_EgoLeLineCrvt || item == FCM_EgoRiLineCrvt)){
 8004d92:	e7be      	b.n	8004d12 <LCD_FCM_5_item+0x52>
    		LCD_ShowNum(g_FCM_5[item]);
 8004d94:	4b24      	ldr	r3, [pc, #144]	@ (8004e28 <LCD_FCM_5_item+0x168>)
 8004d96:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004d9a:	f7fe f8e1 	bl	8002f60 <LCD_ShowNum>
 8004d9e:	e7b8      	b.n	8004d12 <LCD_FCM_5_item+0x52>
    item = GET_MENU(item+1, FCM_5_ITEM_MAX);
 8004da0:	3401      	adds	r4, #1
 8004da2:	b2e4      	uxtb	r4, r4
 8004da4:	e7b9      	b.n	8004d1a <LCD_FCM_5_item+0x5a>
        hzkdis(FCM_5Value[item][g_FCM_5[item]]);
 8004da6:	4b20      	ldr	r3, [pc, #128]	@ (8004e28 <LCD_FCM_5_item+0x168>)
 8004da8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004dac:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004db0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004db4:	f7fd ffde 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8004db8:	2093      	movs	r0, #147	@ 0x93
 8004dba:	f7fd ffab 	bl	8002d14 <write_com>
}
 8004dbe:	bd38      	pop	{r3, r4, r5, pc}
    		LCD_ShowNum(g_FCM_5[item] - 25);
 8004dc0:	4b19      	ldr	r3, [pc, #100]	@ (8004e28 <LCD_FCM_5_item+0x168>)
 8004dc2:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8004dc6:	3819      	subs	r0, #25
 8004dc8:	f7fe f8ca 	bl	8002f60 <LCD_ShowNum>
    	if(item == FCM_EgoRiLineHozlDst || item == FCM_EgoLeLineHozlDst){
 8004dcc:	e7f4      	b.n	8004db8 <LCD_FCM_5_item+0xf8>
    		int32_t tmp = (g_FCM_5[item] * 20 * 0.00006 - 0.0156) * 100;
 8004dce:	4b16      	ldr	r3, [pc, #88]	@ (8004e28 <LCD_FCM_5_item+0x168>)
 8004dd0:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8004dd4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004dd8:	0080      	lsls	r0, r0, #2
 8004dda:	f7fb fb83 	bl	80004e4 <__aeabi_i2d>
 8004dde:	a30c      	add	r3, pc, #48	@ (adr r3, 8004e10 <LCD_FCM_5_item+0x150>)
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	f7fb fbe8 	bl	80005b8 <__aeabi_dmul>
 8004de8:	a30b      	add	r3, pc, #44	@ (adr r3, 8004e18 <LCD_FCM_5_item+0x158>)
 8004dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dee:	f7fb fa2b 	bl	8000248 <__aeabi_dsub>
 8004df2:	2200      	movs	r2, #0
 8004df4:	4b0d      	ldr	r3, [pc, #52]	@ (8004e2c <LCD_FCM_5_item+0x16c>)
 8004df6:	f7fb fbdf 	bl	80005b8 <__aeabi_dmul>
 8004dfa:	f7fb fe8d 	bl	8000b18 <__aeabi_d2iz>
    		LCD_ShowNumWithTwoDecimals(tmp);
 8004dfe:	f7fd ffc7 	bl	8002d90 <LCD_ShowNumWithTwoDecimals>
    	else if((item == FCM_EgoLeLineCrvt || item == FCM_EgoRiLineCrvt)){
 8004e02:	e7d9      	b.n	8004db8 <LCD_FCM_5_item+0xf8>
    		LCD_ShowNum(g_FCM_5[item]);
 8004e04:	4b08      	ldr	r3, [pc, #32]	@ (8004e28 <LCD_FCM_5_item+0x168>)
 8004e06:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8004e0a:	f7fe f8a9 	bl	8002f60 <LCD_ShowNum>
 8004e0e:	e7d3      	b.n	8004db8 <LCD_FCM_5_item+0xf8>
 8004e10:	4d551d69 	.word	0x4d551d69
 8004e14:	3f0f7510 	.word	0x3f0f7510
 8004e18:	8e8a71de 	.word	0x8e8a71de
 8004e1c:	3f8ff2e4 	.word	0x3f8ff2e4
 8004e20:	20002c28 	.word	0x20002c28
 8004e24:	200029a8 	.word	0x200029a8
 8004e28:	20006540 	.word	0x20006540
 8004e2c:	40590000 	.word	0x40590000

08004e30 <LCD_FCM_6_item>:
{
 8004e30:	b538      	push	{r3, r4, r5, lr}
 8004e32:	4604      	mov	r4, r0
    item = GET_MENU(item, FCM_6_ITEM_MAX);
 8004e34:	2809      	cmp	r0, #9
 8004e36:	d902      	bls.n	8004e3e <LCD_FCM_6_item+0xe>
 8004e38:	f1a0 040a 	sub.w	r4, r0, #10
 8004e3c:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004e3e:	2083      	movs	r0, #131	@ 0x83
 8004e40:	f7fd ff68 	bl	8002d14 <write_com>
    hzkdis(FCM_6Item[item]);
 8004e44:	4b56      	ldr	r3, [pc, #344]	@ (8004fa0 <LCD_FCM_6_item+0x170>)
 8004e46:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004e4a:	f7fd ff93 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8004e4e:	2093      	movs	r0, #147	@ 0x93
 8004e50:	f7fd ff60 	bl	8002d14 <write_com>
    if (strcmp(FCM_6Value[item][0], "") != 0) {
 8004e54:	01a3      	lsls	r3, r4, #6
 8004e56:	4a53      	ldr	r2, [pc, #332]	@ (8004fa4 <LCD_FCM_6_item+0x174>)
 8004e58:	58d3      	ldr	r3, [r2, r3]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	b943      	cbnz	r3, 8004e70 <LCD_FCM_6_item+0x40>
 8004e5e:	1ee3      	subs	r3, r4, #3
 8004e60:	2b06      	cmp	r3, #6
 8004e62:	d852      	bhi.n	8004f0a <LCD_FCM_6_item+0xda>
 8004e64:	e8df f003 	tbb	[pc, r3]
 8004e68:	5151362c 	.word	0x5151362c
 8004e6c:	2c51      	.short	0x2c51
 8004e6e:	36          	.byte	0x36
 8004e6f:	00          	.byte	0x00
        hzkdis(FCM_6Value[item][g_FCM_6[item]]);
 8004e70:	4b4d      	ldr	r3, [pc, #308]	@ (8004fa8 <LCD_FCM_6_item+0x178>)
 8004e72:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004e76:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004e7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004e7e:	f7fd ff79 	bl	8002d74 <hzkdis>
    item = GET_MENU(item+1, FCM_6_ITEM_MAX);
 8004e82:	2c08      	cmp	r4, #8
 8004e84:	d947      	bls.n	8004f16 <LCD_FCM_6_item+0xe6>
 8004e86:	3c09      	subs	r4, #9
 8004e88:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004e8a:	208b      	movs	r0, #139	@ 0x8b
 8004e8c:	f7fd ff42 	bl	8002d14 <write_com>
    hzkdis(FCM_6Item[item]);
 8004e90:	4625      	mov	r5, r4
 8004e92:	4b43      	ldr	r3, [pc, #268]	@ (8004fa0 <LCD_FCM_6_item+0x170>)
 8004e94:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004e98:	f7fd ff6c 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8004e9c:	209b      	movs	r0, #155	@ 0x9b
 8004e9e:	f7fd ff39 	bl	8002d14 <write_com>
    if (strcmp(FCM_6Value[item][0], "") != 0) {
 8004ea2:	01a3      	lsls	r3, r4, #6
 8004ea4:	4a3f      	ldr	r2, [pc, #252]	@ (8004fa4 <LCD_FCM_6_item+0x174>)
 8004ea6:	58d3      	ldr	r3, [r2, r3]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d136      	bne.n	8004f1c <LCD_FCM_6_item+0xec>
 8004eae:	3c03      	subs	r4, #3
 8004eb0:	2c06      	cmp	r4, #6
 8004eb2:	d865      	bhi.n	8004f80 <LCD_FCM_6_item+0x150>
 8004eb4:	e8df f004 	tbb	[pc, r4]
 8004eb8:	6464493f 	.word	0x6464493f
 8004ebc:	3f64      	.short	0x3f64
 8004ebe:	49          	.byte	0x49
 8004ebf:	00          	.byte	0x00
    		LCD_ShowNum(g_FCM_6[item] * 10 - 25);
 8004ec0:	4b39      	ldr	r3, [pc, #228]	@ (8004fa8 <LCD_FCM_6_item+0x178>)
 8004ec2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004ec6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004eca:	0040      	lsls	r0, r0, #1
 8004ecc:	3819      	subs	r0, #25
 8004ece:	f7fe f847 	bl	8002f60 <LCD_ShowNum>
    	if(item == FCM_EgoRiLineHozlDst || item == FCM_EgoLeLineHozlDst){
 8004ed2:	e7d6      	b.n	8004e82 <LCD_FCM_6_item+0x52>
    		int32_t tmp = (g_FCM_6[item] * 20 * 0.00006 - 0.0156) * 100;
 8004ed4:	4b34      	ldr	r3, [pc, #208]	@ (8004fa8 <LCD_FCM_6_item+0x178>)
 8004ed6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004eda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004ede:	0080      	lsls	r0, r0, #2
 8004ee0:	f7fb fb00 	bl	80004e4 <__aeabi_i2d>
 8004ee4:	a32a      	add	r3, pc, #168	@ (adr r3, 8004f90 <LCD_FCM_6_item+0x160>)
 8004ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eea:	f7fb fb65 	bl	80005b8 <__aeabi_dmul>
 8004eee:	a32a      	add	r3, pc, #168	@ (adr r3, 8004f98 <LCD_FCM_6_item+0x168>)
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f7fb f9a8 	bl	8000248 <__aeabi_dsub>
 8004ef8:	2200      	movs	r2, #0
 8004efa:	4b2c      	ldr	r3, [pc, #176]	@ (8004fac <LCD_FCM_6_item+0x17c>)
 8004efc:	f7fb fb5c 	bl	80005b8 <__aeabi_dmul>
 8004f00:	f7fb fe0a 	bl	8000b18 <__aeabi_d2iz>
    		LCD_ShowNumWithTwoDecimals(tmp);
 8004f04:	f7fd ff44 	bl	8002d90 <LCD_ShowNumWithTwoDecimals>
    	else if(item == FCM_NeborLeLineCrvt || item == FCM_NeborRiLineCrvt){
 8004f08:	e7bb      	b.n	8004e82 <LCD_FCM_6_item+0x52>
    		LCD_ShowNum(g_FCM_6[item]);
 8004f0a:	4b27      	ldr	r3, [pc, #156]	@ (8004fa8 <LCD_FCM_6_item+0x178>)
 8004f0c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004f10:	f7fe f826 	bl	8002f60 <LCD_ShowNum>
 8004f14:	e7b5      	b.n	8004e82 <LCD_FCM_6_item+0x52>
    item = GET_MENU(item+1, FCM_6_ITEM_MAX);
 8004f16:	3401      	adds	r4, #1
 8004f18:	b2e4      	uxtb	r4, r4
 8004f1a:	e7b6      	b.n	8004e8a <LCD_FCM_6_item+0x5a>
        hzkdis(FCM_6Value[item][g_FCM_6[item]]);
 8004f1c:	4b22      	ldr	r3, [pc, #136]	@ (8004fa8 <LCD_FCM_6_item+0x178>)
 8004f1e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004f22:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004f26:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004f2a:	f7fd ff23 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8004f2e:	2093      	movs	r0, #147	@ 0x93
 8004f30:	f7fd fef0 	bl	8002d14 <write_com>
}
 8004f34:	bd38      	pop	{r3, r4, r5, pc}
    		LCD_ShowNum(g_FCM_6[item] * 10 - 25);
 8004f36:	4b1c      	ldr	r3, [pc, #112]	@ (8004fa8 <LCD_FCM_6_item+0x178>)
 8004f38:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8004f3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004f40:	0040      	lsls	r0, r0, #1
 8004f42:	3819      	subs	r0, #25
 8004f44:	f7fe f80c 	bl	8002f60 <LCD_ShowNum>
    	if(item == FCM_NeborLeLineHozlDst || item == FCM_NeborRiLineHozlDst){
 8004f48:	e7f1      	b.n	8004f2e <LCD_FCM_6_item+0xfe>
    		int32_t tmp = (g_FCM_6[item] * 20 * 0.00006 - 0.0156) * 100;
 8004f4a:	4b17      	ldr	r3, [pc, #92]	@ (8004fa8 <LCD_FCM_6_item+0x178>)
 8004f4c:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8004f50:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004f54:	0080      	lsls	r0, r0, #2
 8004f56:	f7fb fac5 	bl	80004e4 <__aeabi_i2d>
 8004f5a:	a30d      	add	r3, pc, #52	@ (adr r3, 8004f90 <LCD_FCM_6_item+0x160>)
 8004f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f60:	f7fb fb2a 	bl	80005b8 <__aeabi_dmul>
 8004f64:	a30c      	add	r3, pc, #48	@ (adr r3, 8004f98 <LCD_FCM_6_item+0x168>)
 8004f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6a:	f7fb f96d 	bl	8000248 <__aeabi_dsub>
 8004f6e:	2200      	movs	r2, #0
 8004f70:	4b0e      	ldr	r3, [pc, #56]	@ (8004fac <LCD_FCM_6_item+0x17c>)
 8004f72:	f7fb fb21 	bl	80005b8 <__aeabi_dmul>
 8004f76:	f7fb fdcf 	bl	8000b18 <__aeabi_d2iz>
    		LCD_ShowNumWithTwoDecimals(tmp);
 8004f7a:	f7fd ff09 	bl	8002d90 <LCD_ShowNumWithTwoDecimals>
    	else if(item == FCM_NeborLeLineCrvt || item == FCM_NeborRiLineCrvt){
 8004f7e:	e7d6      	b.n	8004f2e <LCD_FCM_6_item+0xfe>
    		LCD_ShowNum(g_FCM_6[item]);
 8004f80:	4b09      	ldr	r3, [pc, #36]	@ (8004fa8 <LCD_FCM_6_item+0x178>)
 8004f82:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8004f86:	f7fd ffeb 	bl	8002f60 <LCD_ShowNum>
 8004f8a:	e7d0      	b.n	8004f2e <LCD_FCM_6_item+0xfe>
 8004f8c:	f3af 8000 	nop.w
 8004f90:	4d551d69 	.word	0x4d551d69
 8004f94:	3f0f7510 	.word	0x3f0f7510
 8004f98:	8e8a71de 	.word	0x8e8a71de
 8004f9c:	3f8ff2e4 	.word	0x3f8ff2e4
 8004fa0:	2000296c 	.word	0x2000296c
 8004fa4:	200026ec 	.word	0x200026ec
 8004fa8:	2000652c 	.word	0x2000652c
 8004fac:	40590000 	.word	0x40590000

08004fb0 <LCD_F6_item>:
{
 8004fb0:	b538      	push	{r3, r4, r5, lr}
 8004fb2:	4604      	mov	r4, r0
    item = GET_MENU(item, F6_ITEM_MAX);
 8004fb4:	2807      	cmp	r0, #7
 8004fb6:	d902      	bls.n	8004fbe <LCD_F6_item+0xe>
 8004fb8:	f1a0 0408 	sub.w	r4, r0, #8
 8004fbc:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004fbe:	2083      	movs	r0, #131	@ 0x83
 8004fc0:	f7fd fea8 	bl	8002d14 <write_com>
    hzkdis(F6Item[item]);
 8004fc4:	4b44      	ldr	r3, [pc, #272]	@ (80050d8 <LCD_F6_item+0x128>)
 8004fc6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004fca:	f7fd fed3 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8004fce:	2093      	movs	r0, #147	@ 0x93
 8004fd0:	f7fd fea0 	bl	8002d14 <write_com>
    if (strcmp(F6Value[item][0], "") != 0) {
 8004fd4:	01a3      	lsls	r3, r4, #6
 8004fd6:	4a41      	ldr	r2, [pc, #260]	@ (80050dc <LCD_F6_item+0x12c>)
 8004fd8:	58d3      	ldr	r3, [r2, r3]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	bb4b      	cbnz	r3, 8005032 <LCD_F6_item+0x82>
        if(item == EMS_4_FuelConsumption){
 8004fde:	2c06      	cmp	r4, #6
 8004fe0:	d031      	beq.n	8005046 <LCD_F6_item+0x96>
        else if(item == F6_EMS_2_EngineSpeed){
 8004fe2:	2c03      	cmp	r4, #3
 8004fe4:	d042      	beq.n	800506c <LCD_F6_item+0xbc>
        	LCD_ShowNum(g_F6[item]);
 8004fe6:	4b3e      	ldr	r3, [pc, #248]	@ (80050e0 <LCD_F6_item+0x130>)
 8004fe8:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004fec:	f7fd ffb8 	bl	8002f60 <LCD_ShowNum>
    item = GET_MENU(item + 1, F6_ITEM_MAX);
 8004ff0:	2c06      	cmp	r4, #6
 8004ff2:	d944      	bls.n	800507e <LCD_F6_item+0xce>
 8004ff4:	3c07      	subs	r4, #7
 8004ff6:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004ff8:	208b      	movs	r0, #139	@ 0x8b
 8004ffa:	f7fd fe8b 	bl	8002d14 <write_com>
    hzkdis(F6Item[item]);
 8004ffe:	4b36      	ldr	r3, [pc, #216]	@ (80050d8 <LCD_F6_item+0x128>)
 8005000:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005004:	f7fd feb6 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8005008:	209b      	movs	r0, #155	@ 0x9b
 800500a:	f7fd fe83 	bl	8002d14 <write_com>
    if (strcmp(F6Value[item][0], "") != 0) {
 800500e:	01a3      	lsls	r3, r4, #6
 8005010:	4a32      	ldr	r2, [pc, #200]	@ (80050dc <LCD_F6_item+0x12c>)
 8005012:	58d3      	ldr	r3, [r2, r3]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	bbab      	cbnz	r3, 8005084 <LCD_F6_item+0xd4>
        if(item == EMS_4_FuelConsumption){
 8005018:	2c06      	cmp	r4, #6
 800501a:	d03d      	beq.n	8005098 <LCD_F6_item+0xe8>
        else if(item == F6_EMS_2_EngineSpeed){
 800501c:	2c03      	cmp	r4, #3
 800501e:	d04e      	beq.n	80050be <LCD_F6_item+0x10e>
        	LCD_ShowNum(g_F6[item]);
 8005020:	4b2f      	ldr	r3, [pc, #188]	@ (80050e0 <LCD_F6_item+0x130>)
 8005022:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8005026:	f7fd ff9b 	bl	8002f60 <LCD_ShowNum>
    write_com(0x93);
 800502a:	2093      	movs	r0, #147	@ 0x93
 800502c:	f7fd fe72 	bl	8002d14 <write_com>
}
 8005030:	bd38      	pop	{r3, r4, r5, pc}
        hzkdis(F6Value[item][g_F6[item]]);
 8005032:	4b2b      	ldr	r3, [pc, #172]	@ (80050e0 <LCD_F6_item+0x130>)
 8005034:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8005038:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800503c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005040:	f7fd fe98 	bl	8002d74 <hzkdis>
 8005044:	e7d4      	b.n	8004ff0 <LCD_F6_item+0x40>
        	uint32_t tmp = g_F6[item] * 100 * 5 * 0.004;
 8005046:	4b26      	ldr	r3, [pc, #152]	@ (80050e0 <LCD_F6_item+0x130>)
 8005048:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800504c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005050:	fb03 f000 	mul.w	r0, r3, r0
 8005054:	f7fb fa46 	bl	80004e4 <__aeabi_i2d>
 8005058:	a31d      	add	r3, pc, #116	@ (adr r3, 80050d0 <LCD_F6_item+0x120>)
 800505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505e:	f7fb faab 	bl	80005b8 <__aeabi_dmul>
 8005062:	f7fb fd81 	bl	8000b68 <__aeabi_d2uiz>
        	LCD_ShowNumWithTwoDecimals(tmp);
 8005066:	f7fd fe93 	bl	8002d90 <LCD_ShowNumWithTwoDecimals>
 800506a:	e7c1      	b.n	8004ff0 <LCD_F6_item+0x40>
            LCD_ShowNum(g_F6[item] * 100);
 800506c:	4b1c      	ldr	r3, [pc, #112]	@ (80050e0 <LCD_F6_item+0x130>)
 800506e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8005072:	2064      	movs	r0, #100	@ 0x64
 8005074:	fb03 f000 	mul.w	r0, r3, r0
 8005078:	f7fd ff72 	bl	8002f60 <LCD_ShowNum>
 800507c:	e7b8      	b.n	8004ff0 <LCD_F6_item+0x40>
    item = GET_MENU(item + 1, F6_ITEM_MAX);
 800507e:	3401      	adds	r4, #1
 8005080:	b2e4      	uxtb	r4, r4
 8005082:	e7b9      	b.n	8004ff8 <LCD_F6_item+0x48>
        hzkdis(F6Value[item][g_F6[item]]);
 8005084:	4b16      	ldr	r3, [pc, #88]	@ (80050e0 <LCD_F6_item+0x130>)
 8005086:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800508a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800508e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005092:	f7fd fe6f 	bl	8002d74 <hzkdis>
 8005096:	e7c8      	b.n	800502a <LCD_F6_item+0x7a>
        	uint32_t tmp = g_F6[item] * 100 * 5  * 0.004;
 8005098:	4b11      	ldr	r3, [pc, #68]	@ (80050e0 <LCD_F6_item+0x130>)
 800509a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800509e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80050a2:	fb03 f000 	mul.w	r0, r3, r0
 80050a6:	f7fb fa1d 	bl	80004e4 <__aeabi_i2d>
 80050aa:	a309      	add	r3, pc, #36	@ (adr r3, 80050d0 <LCD_F6_item+0x120>)
 80050ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b0:	f7fb fa82 	bl	80005b8 <__aeabi_dmul>
 80050b4:	f7fb fd58 	bl	8000b68 <__aeabi_d2uiz>
        	LCD_ShowNumWithTwoDecimals(tmp);
 80050b8:	f7fd fe6a 	bl	8002d90 <LCD_ShowNumWithTwoDecimals>
 80050bc:	e7b5      	b.n	800502a <LCD_F6_item+0x7a>
            LCD_ShowNum(g_F6[item] * 100);
 80050be:	4b08      	ldr	r3, [pc, #32]	@ (80050e0 <LCD_F6_item+0x130>)
 80050c0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80050c4:	2064      	movs	r0, #100	@ 0x64
 80050c6:	fb03 f000 	mul.w	r0, r3, r0
 80050ca:	f7fd ff49 	bl	8002f60 <LCD_ShowNum>
 80050ce:	e7ac      	b.n	800502a <LCD_F6_item+0x7a>
 80050d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80050d4:	3f70624d 	.word	0x3f70624d
 80050d8:	20000338 	.word	0x20000338
 80050dc:	20005df8 	.word	0x20005df8
 80050e0:	20005de8 	.word	0x20005de8
 80050e4:	00000000 	.word	0x00000000

080050e8 <LCD_F7_item>:
{
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	4604      	mov	r4, r0
    item = GET_MENU(item, F7_ITEM_MAX);
 80050ec:	2807      	cmp	r0, #7
 80050ee:	d902      	bls.n	80050f6 <LCD_F7_item+0xe>
 80050f0:	f1a0 0408 	sub.w	r4, r0, #8
 80050f4:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 80050f6:	2083      	movs	r0, #131	@ 0x83
 80050f8:	f7fd fe0c 	bl	8002d14 <write_com>
    hzkdis(F7Item[item]);
 80050fc:	4b44      	ldr	r3, [pc, #272]	@ (8005210 <LCD_F7_item+0x128>)
 80050fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005102:	f7fd fe37 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8005106:	2093      	movs	r0, #147	@ 0x93
 8005108:	f7fd fe04 	bl	8002d14 <write_com>
    if (strcmp(F7Value[item][0], "") != 0) {
 800510c:	01a3      	lsls	r3, r4, #6
 800510e:	4a41      	ldr	r2, [pc, #260]	@ (8005214 <LCD_F7_item+0x12c>)
 8005110:	58d3      	ldr	r3, [r2, r3]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	bb4b      	cbnz	r3, 800516a <LCD_F7_item+0x82>
        if(item == F7_EMS_4_FuelConsumption){
 8005116:	2c06      	cmp	r4, #6
 8005118:	d031      	beq.n	800517e <LCD_F7_item+0x96>
        else if(item == F7_EMS_2_EngineSpeed){
 800511a:	2c03      	cmp	r4, #3
 800511c:	d042      	beq.n	80051a4 <LCD_F7_item+0xbc>
        	LCD_ShowNum(g_F7[item]);
 800511e:	4b3e      	ldr	r3, [pc, #248]	@ (8005218 <LCD_F7_item+0x130>)
 8005120:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8005124:	f7fd ff1c 	bl	8002f60 <LCD_ShowNum>
    item = GET_MENU(item + 1, F7_ITEM_MAX);
 8005128:	2c06      	cmp	r4, #6
 800512a:	d944      	bls.n	80051b6 <LCD_F7_item+0xce>
 800512c:	3c07      	subs	r4, #7
 800512e:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8005130:	208b      	movs	r0, #139	@ 0x8b
 8005132:	f7fd fdef 	bl	8002d14 <write_com>
    hzkdis(F7Item[item]);
 8005136:	4b36      	ldr	r3, [pc, #216]	@ (8005210 <LCD_F7_item+0x128>)
 8005138:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800513c:	f7fd fe1a 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8005140:	209b      	movs	r0, #155	@ 0x9b
 8005142:	f7fd fde7 	bl	8002d14 <write_com>
    if (strcmp(F7Value[item][0], "") != 0) {
 8005146:	01a3      	lsls	r3, r4, #6
 8005148:	4a32      	ldr	r2, [pc, #200]	@ (8005214 <LCD_F7_item+0x12c>)
 800514a:	58d3      	ldr	r3, [r2, r3]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	bbab      	cbnz	r3, 80051bc <LCD_F7_item+0xd4>
        if(item == F7_EMS_4_FuelConsumption){
 8005150:	2c06      	cmp	r4, #6
 8005152:	d03d      	beq.n	80051d0 <LCD_F7_item+0xe8>
        else if(item == F7_EMS_2_EngineSpeed){
 8005154:	2c03      	cmp	r4, #3
 8005156:	d04e      	beq.n	80051f6 <LCD_F7_item+0x10e>
        	LCD_ShowNum(g_F7[item]);
 8005158:	4b2f      	ldr	r3, [pc, #188]	@ (8005218 <LCD_F7_item+0x130>)
 800515a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800515e:	f7fd feff 	bl	8002f60 <LCD_ShowNum>
    write_com(0x93);
 8005162:	2093      	movs	r0, #147	@ 0x93
 8005164:	f7fd fdd6 	bl	8002d14 <write_com>
}
 8005168:	bd38      	pop	{r3, r4, r5, pc}
        hzkdis(F7Value[item][g_F7[item]]);
 800516a:	4b2b      	ldr	r3, [pc, #172]	@ (8005218 <LCD_F7_item+0x130>)
 800516c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8005170:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8005174:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005178:	f7fd fdfc 	bl	8002d74 <hzkdis>
 800517c:	e7d4      	b.n	8005128 <LCD_F7_item+0x40>
        	uint32_t tmp = g_F7[item] * 100 * 5  * 0.004;
 800517e:	4b26      	ldr	r3, [pc, #152]	@ (8005218 <LCD_F7_item+0x130>)
 8005180:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8005184:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005188:	fb03 f000 	mul.w	r0, r3, r0
 800518c:	f7fb f9aa 	bl	80004e4 <__aeabi_i2d>
 8005190:	a31d      	add	r3, pc, #116	@ (adr r3, 8005208 <LCD_F7_item+0x120>)
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	f7fb fa0f 	bl	80005b8 <__aeabi_dmul>
 800519a:	f7fb fce5 	bl	8000b68 <__aeabi_d2uiz>
        	LCD_ShowNumWithTwoDecimals(tmp);
 800519e:	f7fd fdf7 	bl	8002d90 <LCD_ShowNumWithTwoDecimals>
 80051a2:	e7c1      	b.n	8005128 <LCD_F7_item+0x40>
        	LCD_ShowNum(g_F7[item] * 100);
 80051a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005218 <LCD_F7_item+0x130>)
 80051a6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80051aa:	2064      	movs	r0, #100	@ 0x64
 80051ac:	fb03 f000 	mul.w	r0, r3, r0
 80051b0:	f7fd fed6 	bl	8002f60 <LCD_ShowNum>
 80051b4:	e7b8      	b.n	8005128 <LCD_F7_item+0x40>
    item = GET_MENU(item + 1, F7_ITEM_MAX);
 80051b6:	3401      	adds	r4, #1
 80051b8:	b2e4      	uxtb	r4, r4
 80051ba:	e7b9      	b.n	8005130 <LCD_F7_item+0x48>
        hzkdis(F7Value[item][g_F7[item]]);
 80051bc:	4b16      	ldr	r3, [pc, #88]	@ (8005218 <LCD_F7_item+0x130>)
 80051be:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80051c2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80051c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80051ca:	f7fd fdd3 	bl	8002d74 <hzkdis>
 80051ce:	e7c8      	b.n	8005162 <LCD_F7_item+0x7a>
        	uint32_t tmp = g_F7[item] * 100 * 5  * 0.004;
 80051d0:	4b11      	ldr	r3, [pc, #68]	@ (8005218 <LCD_F7_item+0x130>)
 80051d2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80051d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80051da:	fb03 f000 	mul.w	r0, r3, r0
 80051de:	f7fb f981 	bl	80004e4 <__aeabi_i2d>
 80051e2:	a309      	add	r3, pc, #36	@ (adr r3, 8005208 <LCD_F7_item+0x120>)
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	f7fb f9e6 	bl	80005b8 <__aeabi_dmul>
 80051ec:	f7fb fcbc 	bl	8000b68 <__aeabi_d2uiz>
        	LCD_ShowNumWithTwoDecimals(tmp);
 80051f0:	f7fd fdce 	bl	8002d90 <LCD_ShowNumWithTwoDecimals>
 80051f4:	e7b5      	b.n	8005162 <LCD_F7_item+0x7a>
        	LCD_ShowNum(g_F7[item] * 100);
 80051f6:	4b08      	ldr	r3, [pc, #32]	@ (8005218 <LCD_F7_item+0x130>)
 80051f8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80051fc:	2064      	movs	r0, #100	@ 0x64
 80051fe:	fb03 f000 	mul.w	r0, r3, r0
 8005202:	f7fd fead 	bl	8002f60 <LCD_ShowNum>
 8005206:	e7ac      	b.n	8005162 <LCD_F7_item+0x7a>
 8005208:	d2f1a9fc 	.word	0xd2f1a9fc
 800520c:	3f70624d 	.word	0x3f70624d
 8005210:	20000308 	.word	0x20000308
 8005214:	20005be8 	.word	0x20005be8
 8005218:	20005bd8 	.word	0x20005bd8

0800521c <LCD_F8_item>:
{
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	4604      	mov	r4, r0
    item = GET_MENU(item, F8_ITEM_MAX);
 8005220:	2806      	cmp	r0, #6
 8005222:	d901      	bls.n	8005228 <LCD_F8_item+0xc>
 8005224:	1fc4      	subs	r4, r0, #7
 8005226:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8005228:	2083      	movs	r0, #131	@ 0x83
 800522a:	f7fd fd73 	bl	8002d14 <write_com>
    hzkdis(F8Item[item]);
 800522e:	4b30      	ldr	r3, [pc, #192]	@ (80052f0 <LCD_F8_item+0xd4>)
 8005230:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005234:	f7fd fd9e 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8005238:	2093      	movs	r0, #147	@ 0x93
 800523a:	f7fd fd6b 	bl	8002d14 <write_com>
    if (strcmp(F8Value[item][0], "") != 0) {
 800523e:	01a3      	lsls	r3, r4, #6
 8005240:	4a2c      	ldr	r2, [pc, #176]	@ (80052f4 <LCD_F8_item+0xd8>)
 8005242:	58d3      	ldr	r3, [r2, r3]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	bb3b      	cbnz	r3, 8005298 <LCD_F8_item+0x7c>
        if(item == F8_TPMS_TirePressure){
 8005248:	2c06      	cmp	r4, #6
 800524a:	d02f      	beq.n	80052ac <LCD_F8_item+0x90>
        	LCD_ShowNum(g_F8[item]);
 800524c:	4b2a      	ldr	r3, [pc, #168]	@ (80052f8 <LCD_F8_item+0xdc>)
 800524e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8005252:	f7fd fe85 	bl	8002f60 <LCD_ShowNum>
    item = GET_MENU(item + 1, F8_ITEM_MAX);
 8005256:	2c05      	cmp	r4, #5
 8005258:	d940      	bls.n	80052dc <LCD_F8_item+0xc0>
 800525a:	3c06      	subs	r4, #6
 800525c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800525e:	208b      	movs	r0, #139	@ 0x8b
 8005260:	f7fd fd58 	bl	8002d14 <write_com>
    hzkdis(F8Item[item]);
 8005264:	4b22      	ldr	r3, [pc, #136]	@ (80052f0 <LCD_F8_item+0xd4>)
 8005266:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800526a:	f7fd fd83 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 800526e:	209b      	movs	r0, #155	@ 0x9b
 8005270:	f7fd fd50 	bl	8002d14 <write_com>
    if (strcmp(F8Value[item][0], "") != 0) {
 8005274:	01a3      	lsls	r3, r4, #6
 8005276:	4a1f      	ldr	r2, [pc, #124]	@ (80052f4 <LCD_F8_item+0xd8>)
 8005278:	58d3      	ldr	r3, [r2, r3]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	b38b      	cbz	r3, 80052e2 <LCD_F8_item+0xc6>
        hzkdis(F8Value[item][g_F8[item]]);
 800527e:	4b1e      	ldr	r3, [pc, #120]	@ (80052f8 <LCD_F8_item+0xdc>)
 8005280:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8005284:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8005288:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800528c:	f7fd fd72 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8005290:	2093      	movs	r0, #147	@ 0x93
 8005292:	f7fd fd3f 	bl	8002d14 <write_com>
}
 8005296:	bd38      	pop	{r3, r4, r5, pc}
        hzkdis(F8Value[item][g_F8[item]]);
 8005298:	4b17      	ldr	r3, [pc, #92]	@ (80052f8 <LCD_F8_item+0xdc>)
 800529a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800529e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80052a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80052a6:	f7fd fd65 	bl	8002d74 <hzkdis>
 80052aa:	e7d4      	b.n	8005256 <LCD_F8_item+0x3a>
        	uint32_t tmp = (g_F8[item] * 15  * 2.75 + 100) * 100;
 80052ac:	4b12      	ldr	r3, [pc, #72]	@ (80052f8 <LCD_F8_item+0xdc>)
 80052ae:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80052b2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80052b6:	f7fb f915 	bl	80004e4 <__aeabi_i2d>
 80052ba:	2200      	movs	r2, #0
 80052bc:	4b0f      	ldr	r3, [pc, #60]	@ (80052fc <LCD_F8_item+0xe0>)
 80052be:	f7fb f97b 	bl	80005b8 <__aeabi_dmul>
 80052c2:	2200      	movs	r2, #0
 80052c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005300 <LCD_F8_item+0xe4>)
 80052c6:	f7fa ffc1 	bl	800024c <__adddf3>
 80052ca:	2200      	movs	r2, #0
 80052cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005300 <LCD_F8_item+0xe4>)
 80052ce:	f7fb f973 	bl	80005b8 <__aeabi_dmul>
 80052d2:	f7fb fc49 	bl	8000b68 <__aeabi_d2uiz>
        	LCD_ShowNumWithTwoDecimals(tmp);
 80052d6:	f7fd fd5b 	bl	8002d90 <LCD_ShowNumWithTwoDecimals>
 80052da:	e7bc      	b.n	8005256 <LCD_F8_item+0x3a>
    item = GET_MENU(item + 1, F8_ITEM_MAX);
 80052dc:	3401      	adds	r4, #1
 80052de:	b2e4      	uxtb	r4, r4
 80052e0:	e7bd      	b.n	800525e <LCD_F8_item+0x42>
        LCD_ShowNum(g_F8[item]);
 80052e2:	4b05      	ldr	r3, [pc, #20]	@ (80052f8 <LCD_F8_item+0xdc>)
 80052e4:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80052e8:	f7fd fe3a 	bl	8002f60 <LCD_ShowNum>
 80052ec:	e7d0      	b.n	8005290 <LCD_F8_item+0x74>
 80052ee:	bf00      	nop
 80052f0:	200002dc 	.word	0x200002dc
 80052f4:	20005a18 	.word	0x20005a18
 80052f8:	20005a08 	.word	0x20005a08
 80052fc:	40060000 	.word	0x40060000
 8005300:	40590000 	.word	0x40590000

08005304 <LCD_F12_item>:
{
 8005304:	b538      	push	{r3, r4, r5, lr}
 8005306:	4604      	mov	r4, r0
    item = GET_MENU(item, F12_ITEM_MAX);
 8005308:	2802      	cmp	r0, #2
 800530a:	d901      	bls.n	8005310 <LCD_F12_item+0xc>
 800530c:	1ec4      	subs	r4, r0, #3
 800530e:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8005310:	2083      	movs	r0, #131	@ 0x83
 8005312:	f7fd fcff 	bl	8002d14 <write_com>
    hzkdis(F12Item[item]);
 8005316:	4b3b      	ldr	r3, [pc, #236]	@ (8005404 <LCD_F12_item+0x100>)
 8005318:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800531c:	f7fd fd2a 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8005320:	2093      	movs	r0, #147	@ 0x93
 8005322:	f7fd fcf7 	bl	8002d14 <write_com>
    if (strcmp(F12Value[item][0], "") != 0) {
 8005326:	01a3      	lsls	r3, r4, #6
 8005328:	4a37      	ldr	r2, [pc, #220]	@ (8005408 <LCD_F12_item+0x104>)
 800532a:	58d3      	ldr	r3, [r2, r3]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	bb2b      	cbnz	r3, 800537c <LCD_F12_item+0x78>
        if(item == AC_2_OutsideTemperature){
 8005330:	2c0b      	cmp	r4, #11
 8005332:	d02d      	beq.n	8005390 <LCD_F12_item+0x8c>
        	LCD_ShowNum(g_F12[item]);
 8005334:	4b35      	ldr	r3, [pc, #212]	@ (800540c <LCD_F12_item+0x108>)
 8005336:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800533a:	f7fd fe11 	bl	8002f60 <LCD_ShowNum>
    item = GET_MENU(item + 1, F12_ITEM_MAX);
 800533e:	2c01      	cmp	r4, #1
 8005340:	d93c      	bls.n	80053bc <LCD_F12_item+0xb8>
 8005342:	3c02      	subs	r4, #2
 8005344:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8005346:	208b      	movs	r0, #139	@ 0x8b
 8005348:	f7fd fce4 	bl	8002d14 <write_com>
    hzkdis(F12Item[item]);
 800534c:	4b2d      	ldr	r3, [pc, #180]	@ (8005404 <LCD_F12_item+0x100>)
 800534e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005352:	f7fd fd0f 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8005356:	209b      	movs	r0, #155	@ 0x9b
 8005358:	f7fd fcdc 	bl	8002d14 <write_com>
    if (strcmp(F12Value[item][0], "") != 0) {
 800535c:	01a3      	lsls	r3, r4, #6
 800535e:	4a2a      	ldr	r2, [pc, #168]	@ (8005408 <LCD_F12_item+0x104>)
 8005360:	58d3      	ldr	r3, [r2, r3]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	bb6b      	cbnz	r3, 80053c2 <LCD_F12_item+0xbe>
        if(item == AC_2_OutsideTemperature){
 8005366:	2c0b      	cmp	r4, #11
 8005368:	d035      	beq.n	80053d6 <LCD_F12_item+0xd2>
        	LCD_ShowNum(g_F12[item]);
 800536a:	4b28      	ldr	r3, [pc, #160]	@ (800540c <LCD_F12_item+0x108>)
 800536c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8005370:	f7fd fdf6 	bl	8002f60 <LCD_ShowNum>
    write_com(0x93);
 8005374:	2093      	movs	r0, #147	@ 0x93
 8005376:	f7fd fccd 	bl	8002d14 <write_com>
}
 800537a:	bd38      	pop	{r3, r4, r5, pc}
        hzkdis(F12Value[item][g_F12[item]]);
 800537c:	4b23      	ldr	r3, [pc, #140]	@ (800540c <LCD_F12_item+0x108>)
 800537e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8005382:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8005386:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800538a:	f7fd fcf3 	bl	8002d74 <hzkdis>
 800538e:	e7d6      	b.n	800533e <LCD_F12_item+0x3a>
        	int32_t tmp = (g_F12[item] * 0.5) * 100 - 4000;
 8005390:	4b1e      	ldr	r3, [pc, #120]	@ (800540c <LCD_F12_item+0x108>)
 8005392:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8005396:	f7fb f8a5 	bl	80004e4 <__aeabi_i2d>
 800539a:	2200      	movs	r2, #0
 800539c:	4b1c      	ldr	r3, [pc, #112]	@ (8005410 <LCD_F12_item+0x10c>)
 800539e:	f7fb f90b 	bl	80005b8 <__aeabi_dmul>
 80053a2:	2200      	movs	r2, #0
 80053a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005414 <LCD_F12_item+0x110>)
 80053a6:	f7fb f907 	bl	80005b8 <__aeabi_dmul>
 80053aa:	2200      	movs	r2, #0
 80053ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005418 <LCD_F12_item+0x114>)
 80053ae:	f7fa ff4b 	bl	8000248 <__aeabi_dsub>
 80053b2:	f7fb fbb1 	bl	8000b18 <__aeabi_d2iz>
        	LCD_ShowNumWithTwoDecimals(tmp);
 80053b6:	f7fd fceb 	bl	8002d90 <LCD_ShowNumWithTwoDecimals>
 80053ba:	e7c0      	b.n	800533e <LCD_F12_item+0x3a>
    item = GET_MENU(item + 1, F12_ITEM_MAX);
 80053bc:	3401      	adds	r4, #1
 80053be:	b2e4      	uxtb	r4, r4
 80053c0:	e7c1      	b.n	8005346 <LCD_F12_item+0x42>
        hzkdis(F12Value[item][g_F12[item]]);
 80053c2:	4b12      	ldr	r3, [pc, #72]	@ (800540c <LCD_F12_item+0x108>)
 80053c4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80053c8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80053cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80053d0:	f7fd fcd0 	bl	8002d74 <hzkdis>
 80053d4:	e7ce      	b.n	8005374 <LCD_F12_item+0x70>
        	int32_t tmp = (g_F12[item] * 0.5) * 100 - 4000;
 80053d6:	4b0d      	ldr	r3, [pc, #52]	@ (800540c <LCD_F12_item+0x108>)
 80053d8:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80053dc:	f7fb f882 	bl	80004e4 <__aeabi_i2d>
 80053e0:	2200      	movs	r2, #0
 80053e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005410 <LCD_F12_item+0x10c>)
 80053e4:	f7fb f8e8 	bl	80005b8 <__aeabi_dmul>
 80053e8:	2200      	movs	r2, #0
 80053ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005414 <LCD_F12_item+0x110>)
 80053ec:	f7fb f8e4 	bl	80005b8 <__aeabi_dmul>
 80053f0:	2200      	movs	r2, #0
 80053f2:	4b09      	ldr	r3, [pc, #36]	@ (8005418 <LCD_F12_item+0x114>)
 80053f4:	f7fa ff28 	bl	8000248 <__aeabi_dsub>
 80053f8:	f7fb fb8e 	bl	8000b18 <__aeabi_d2iz>
        	LCD_ShowNumWithTwoDecimals(tmp);
 80053fc:	f7fd fcc8 	bl	8002d90 <LCD_ShowNumWithTwoDecimals>
 8005400:	e7b8      	b.n	8005374 <LCD_F12_item+0x70>
 8005402:	bf00      	nop
 8005404:	20000250 	.word	0x20000250
 8005408:	200054a0 	.word	0x200054a0
 800540c:	20005498 	.word	0x20005498
 8005410:	3fe00000 	.word	0x3fe00000
 8005414:	40590000 	.word	0x40590000
 8005418:	40af4000 	.word	0x40af4000

0800541c <GetPage0ItemValue>:
    switch(menu)
 800541c:	281b      	cmp	r0, #27
 800541e:	f200 80d5 	bhi.w	80055cc <GetPage0ItemValue+0x1b0>
 8005422:	e8df f010 	tbh	[pc, r0, lsl #1]
 8005426:	001c      	.short	0x001c
 8005428:	002a0023 	.word	0x002a0023
 800542c:	00380031 	.word	0x00380031
 8005430:	0046003f 	.word	0x0046003f
 8005434:	0054004d 	.word	0x0054004d
 8005438:	0062005b 	.word	0x0062005b
 800543c:	00710069 	.word	0x00710069
 8005440:	007d0077 	.word	0x007d0077
 8005444:	00890083 	.word	0x00890083
 8005448:	0095008f 	.word	0x0095008f
 800544c:	00a1009b 	.word	0x00a1009b
 8005450:	00af00a9 	.word	0x00af00a9
 8005454:	00bb00b5 	.word	0x00bb00b5
 8005458:	00c700c1 	.word	0x00c700c1
 800545c:	00cd      	.short	0x00cd
            if(item < ACU_1_ITEM_MAX)
 800545e:	2900      	cmp	r1, #0
 8005460:	f040 80b6 	bne.w	80055d0 <GetPage0ItemValue+0x1b4>
                res = g_ACU_1[item];
 8005464:	4b74      	ldr	r3, [pc, #464]	@ (8005638 <GetPage0ItemValue+0x21c>)
 8005466:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800546a:	4770      	bx	lr
            if(item < ESP_2_ITEM_MAX)
 800546c:	2905      	cmp	r1, #5
 800546e:	f200 80b1 	bhi.w	80055d4 <GetPage0ItemValue+0x1b8>
                res = g_ESP_2[item];
 8005472:	4b72      	ldr	r3, [pc, #456]	@ (800563c <GetPage0ItemValue+0x220>)
 8005474:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005478:	4770      	bx	lr
            if(item < ABS_1_ITEM_MAX)
 800547a:	2903      	cmp	r1, #3
 800547c:	f200 80ac 	bhi.w	80055d8 <GetPage0ItemValue+0x1bc>
                res = g_ABS_1[item];
 8005480:	4b6f      	ldr	r3, [pc, #444]	@ (8005640 <GetPage0ItemValue+0x224>)
 8005482:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005486:	4770      	bx	lr
            if(item < ABS_2_ITEM_MAX)
 8005488:	2903      	cmp	r1, #3
 800548a:	f200 80a7 	bhi.w	80055dc <GetPage0ItemValue+0x1c0>
                res = g_ABS_2[item];
 800548e:	4b6d      	ldr	r3, [pc, #436]	@ (8005644 <GetPage0ItemValue+0x228>)
 8005490:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005494:	4770      	bx	lr
            if(item < TPMS_1_ITEM_MAX)
 8005496:	2906      	cmp	r1, #6
 8005498:	f200 80a2 	bhi.w	80055e0 <GetPage0ItemValue+0x1c4>
                res = g_TPMS_1[item];
 800549c:	4b6a      	ldr	r3, [pc, #424]	@ (8005648 <GetPage0ItemValue+0x22c>)
 800549e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80054a2:	4770      	bx	lr
            if(item < BCM_1_ITEM_MAX)
 80054a4:	2902      	cmp	r1, #2
 80054a6:	f200 809d 	bhi.w	80055e4 <GetPage0ItemValue+0x1c8>
                res = g_BCM_1[item];
 80054aa:	4b68      	ldr	r3, [pc, #416]	@ (800564c <GetPage0ItemValue+0x230>)
 80054ac:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80054b0:	4770      	bx	lr
            if(item < BCM_3_ITEM_MAX)
 80054b2:	2900      	cmp	r1, #0
 80054b4:	f040 8098 	bne.w	80055e8 <GetPage0ItemValue+0x1cc>
                res = g_BCM_3[item];
 80054b8:	4b65      	ldr	r3, [pc, #404]	@ (8005650 <GetPage0ItemValue+0x234>)
 80054ba:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80054be:	4770      	bx	lr
            if(item < BCM_4_ITEM_MAX)
 80054c0:	2914      	cmp	r1, #20
 80054c2:	f200 8093 	bhi.w	80055ec <GetPage0ItemValue+0x1d0>
                res = g_BCM_4[item];
 80054c6:	4b63      	ldr	r3, [pc, #396]	@ (8005654 <GetPage0ItemValue+0x238>)
 80054c8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80054cc:	4770      	bx	lr
            if(item < BCM_5_ITEM_MAX)
 80054ce:	2900      	cmp	r1, #0
 80054d0:	f040 808e 	bne.w	80055f0 <GetPage0ItemValue+0x1d4>
                res = g_BCM_5[item];
 80054d4:	4b60      	ldr	r3, [pc, #384]	@ (8005658 <GetPage0ItemValue+0x23c>)
 80054d6:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80054da:	4770      	bx	lr
            if(item < PEPS_3_ITEM_MAX)
 80054dc:	2902      	cmp	r1, #2
 80054de:	f200 8089 	bhi.w	80055f4 <GetPage0ItemValue+0x1d8>
                res = g_PEPS_3[item];
 80054e2:	4b5e      	ldr	r3, [pc, #376]	@ (800565c <GetPage0ItemValue+0x240>)
 80054e4:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80054e8:	4770      	bx	lr
            if(item < TBOX_1_ITEM_MAX)
 80054ea:	2905      	cmp	r1, #5
 80054ec:	f200 8084 	bhi.w	80055f8 <GetPage0ItemValue+0x1dc>
                res = g_TBOX_1[item];
 80054f0:	4b5b      	ldr	r3, [pc, #364]	@ (8005660 <GetPage0ItemValue+0x244>)
 80054f2:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80054f6:	4770      	bx	lr
            if(item < TBOX_2_ITEM_MAX)
 80054f8:	2901      	cmp	r1, #1
 80054fa:	d901      	bls.n	8005500 <GetPage0ItemValue+0xe4>
    uint32_t res = 0U;
 80054fc:	2000      	movs	r0, #0
 80054fe:	4770      	bx	lr
                res = g_TBOX_2[item];
 8005500:	4b58      	ldr	r3, [pc, #352]	@ (8005664 <GetPage0ItemValue+0x248>)
 8005502:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005506:	4770      	bx	lr
            if(item < TBOX_4_ITEM_MAX)
 8005508:	2900      	cmp	r1, #0
 800550a:	d177      	bne.n	80055fc <GetPage0ItemValue+0x1e0>
                res = g_TBOX_4[item];
 800550c:	4b56      	ldr	r3, [pc, #344]	@ (8005668 <GetPage0ItemValue+0x24c>)
 800550e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005512:	4770      	bx	lr
            if(item < FCM_3_ITEM_MAX)
 8005514:	2909      	cmp	r1, #9
 8005516:	d873      	bhi.n	8005600 <GetPage0ItemValue+0x1e4>
                res = g_FCM_3[item];
 8005518:	4b54      	ldr	r3, [pc, #336]	@ (800566c <GetPage0ItemValue+0x250>)
 800551a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800551e:	4770      	bx	lr
            if(item < FCM_4_ITEM_MAX)
 8005520:	2909      	cmp	r1, #9
 8005522:	d86f      	bhi.n	8005604 <GetPage0ItemValue+0x1e8>
                res = g_FCM_4[item];
 8005524:	4b52      	ldr	r3, [pc, #328]	@ (8005670 <GetPage0ItemValue+0x254>)
 8005526:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800552a:	4770      	bx	lr
            if(item < FCM_5_ITEM_MAX)
 800552c:	2909      	cmp	r1, #9
 800552e:	d86b      	bhi.n	8005608 <GetPage0ItemValue+0x1ec>
                res = g_FCM_5[item];
 8005530:	4b50      	ldr	r3, [pc, #320]	@ (8005674 <GetPage0ItemValue+0x258>)
 8005532:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005536:	4770      	bx	lr
            if(item < FCM_6_ITEM_MAX)
 8005538:	2909      	cmp	r1, #9
 800553a:	d867      	bhi.n	800560c <GetPage0ItemValue+0x1f0>
                res = g_FCM_6[item];
 800553c:	4b4e      	ldr	r3, [pc, #312]	@ (8005678 <GetPage0ItemValue+0x25c>)
 800553e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005542:	4770      	bx	lr
            if(item < FCM_7_ITEM_MAX)
 8005544:	2909      	cmp	r1, #9
 8005546:	d863      	bhi.n	8005610 <GetPage0ItemValue+0x1f4>
                res = g_FCM_7[item];
 8005548:	4b4c      	ldr	r3, [pc, #304]	@ (800567c <GetPage0ItemValue+0x260>)
 800554a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800554e:	4770      	bx	lr
            if(item < FCM_8_ITEM_MAX)
 8005550:	2909      	cmp	r1, #9
 8005552:	d85f      	bhi.n	8005614 <GetPage0ItemValue+0x1f8>
                res = g_FCM_8[item];
 8005554:	4b4a      	ldr	r3, [pc, #296]	@ (8005680 <GetPage0ItemValue+0x264>)
 8005556:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800555a:	4770      	bx	lr
            if(item < GW_PC_1_ITEM_MAX)
 800555c:	2909      	cmp	r1, #9
 800555e:	d85b      	bhi.n	8005618 <GetPage0ItemValue+0x1fc>
                res = g_GW_PC_1[item];
 8005560:	4b48      	ldr	r3, [pc, #288]	@ (8005684 <GetPage0ItemValue+0x268>)
 8005562:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005566:	4770      	bx	lr
            if(item < GW_PC_6_ITEM_MAX)
 8005568:	2901      	cmp	r1, #1
 800556a:	d901      	bls.n	8005570 <GetPage0ItemValue+0x154>
    uint32_t res = 0U;
 800556c:	2000      	movs	r0, #0
 800556e:	4770      	bx	lr
                res = g_GW_PC_6[item];
 8005570:	4b45      	ldr	r3, [pc, #276]	@ (8005688 <GetPage0ItemValue+0x26c>)
 8005572:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005576:	4770      	bx	lr
            if(item < GW_PC_2_ITEM_MAX)
 8005578:	2908      	cmp	r1, #8
 800557a:	d84f      	bhi.n	800561c <GetPage0ItemValue+0x200>
                res = g_GW_PC_2[item];
 800557c:	4b43      	ldr	r3, [pc, #268]	@ (800568c <GetPage0ItemValue+0x270>)
 800557e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005582:	4770      	bx	lr
            if(item < GW_PC_7_ITEM_MAX)
 8005584:	2908      	cmp	r1, #8
 8005586:	d84b      	bhi.n	8005620 <GetPage0ItemValue+0x204>
                res = g_GW_PC_7[item];
 8005588:	4b41      	ldr	r3, [pc, #260]	@ (8005690 <GetPage0ItemValue+0x274>)
 800558a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800558e:	4770      	bx	lr
            if(item < GW_PC_4_ITEM_MAX)
 8005590:	2902      	cmp	r1, #2
 8005592:	d847      	bhi.n	8005624 <GetPage0ItemValue+0x208>
                res = g_GW_PC_4[item];
 8005594:	4b3f      	ldr	r3, [pc, #252]	@ (8005694 <GetPage0ItemValue+0x278>)
 8005596:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800559a:	4770      	bx	lr
            if(item < GW_BD_9_ITEM_MAX)
 800559c:	2918      	cmp	r1, #24
 800559e:	d843      	bhi.n	8005628 <GetPage0ItemValue+0x20c>
                res = g_GW_BD_9[item];
 80055a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005698 <GetPage0ItemValue+0x27c>)
 80055a2:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80055a6:	4770      	bx	lr
            if(item < GW_BD_14_ITEM_MAX)
 80055a8:	2916      	cmp	r1, #22
 80055aa:	d83f      	bhi.n	800562c <GetPage0ItemValue+0x210>
                res = g_GW_BD_14[item];
 80055ac:	4b3b      	ldr	r3, [pc, #236]	@ (800569c <GetPage0ItemValue+0x280>)
 80055ae:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80055b2:	4770      	bx	lr
            if(item < GW_BD_24_ITEM_MAX)
 80055b4:	2908      	cmp	r1, #8
 80055b6:	d83b      	bhi.n	8005630 <GetPage0ItemValue+0x214>
                res = g_GW_BD_24[item];
 80055b8:	4b39      	ldr	r3, [pc, #228]	@ (80056a0 <GetPage0ItemValue+0x284>)
 80055ba:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80055be:	4770      	bx	lr
            if(item < GW_BD_29_ITEM_MAX)
 80055c0:	290e      	cmp	r1, #14
 80055c2:	d837      	bhi.n	8005634 <GetPage0ItemValue+0x218>
                res = g_GW_BD_29[item];
 80055c4:	4b37      	ldr	r3, [pc, #220]	@ (80056a4 <GetPage0ItemValue+0x288>)
 80055c6:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80055ca:	4770      	bx	lr
    switch(menu)
 80055cc:	2000      	movs	r0, #0
 80055ce:	4770      	bx	lr
    uint32_t res = 0U;
 80055d0:	2000      	movs	r0, #0
 80055d2:	4770      	bx	lr
 80055d4:	2000      	movs	r0, #0
 80055d6:	4770      	bx	lr
 80055d8:	2000      	movs	r0, #0
 80055da:	4770      	bx	lr
 80055dc:	2000      	movs	r0, #0
 80055de:	4770      	bx	lr
 80055e0:	2000      	movs	r0, #0
 80055e2:	4770      	bx	lr
 80055e4:	2000      	movs	r0, #0
 80055e6:	4770      	bx	lr
 80055e8:	2000      	movs	r0, #0
 80055ea:	4770      	bx	lr
 80055ec:	2000      	movs	r0, #0
 80055ee:	4770      	bx	lr
 80055f0:	2000      	movs	r0, #0
 80055f2:	4770      	bx	lr
 80055f4:	2000      	movs	r0, #0
 80055f6:	4770      	bx	lr
 80055f8:	2000      	movs	r0, #0
 80055fa:	4770      	bx	lr
 80055fc:	2000      	movs	r0, #0
 80055fe:	4770      	bx	lr
 8005600:	2000      	movs	r0, #0
 8005602:	4770      	bx	lr
 8005604:	2000      	movs	r0, #0
 8005606:	4770      	bx	lr
 8005608:	2000      	movs	r0, #0
 800560a:	4770      	bx	lr
 800560c:	2000      	movs	r0, #0
 800560e:	4770      	bx	lr
 8005610:	2000      	movs	r0, #0
 8005612:	4770      	bx	lr
 8005614:	2000      	movs	r0, #0
 8005616:	4770      	bx	lr
 8005618:	2000      	movs	r0, #0
 800561a:	4770      	bx	lr
 800561c:	2000      	movs	r0, #0
 800561e:	4770      	bx	lr
 8005620:	2000      	movs	r0, #0
 8005622:	4770      	bx	lr
 8005624:	2000      	movs	r0, #0
 8005626:	4770      	bx	lr
 8005628:	2000      	movs	r0, #0
 800562a:	4770      	bx	lr
 800562c:	2000      	movs	r0, #0
 800562e:	4770      	bx	lr
 8005630:	2000      	movs	r0, #0
 8005632:	4770      	bx	lr
 8005634:	2000      	movs	r0, #0
}
 8005636:	4770      	bx	lr
 8005638:	200065ac 	.word	0x200065ac
 800563c:	200065a0 	.word	0x200065a0
 8005640:	20006598 	.word	0x20006598
 8005644:	20006590 	.word	0x20006590
 8005648:	20006580 	.word	0x20006580
 800564c:	20006578 	.word	0x20006578
 8005650:	20006574 	.word	0x20006574
 8005654:	20003584 	.word	0x20003584
 8005658:	20006570 	.word	0x20006570
 800565c:	20006568 	.word	0x20006568
 8005660:	2000655c 	.word	0x2000655c
 8005664:	20006558 	.word	0x20006558
 8005668:	20006554 	.word	0x20006554
 800566c:	20002f20 	.word	0x20002f20
 8005670:	20002c50 	.word	0x20002c50
 8005674:	20006540 	.word	0x20006540
 8005678:	2000652c 	.word	0x2000652c
 800567c:	20006518 	.word	0x20006518
 8005680:	20006504 	.word	0x20006504
 8005684:	200064f0 	.word	0x200064f0
 8005688:	200064ec 	.word	0x200064ec
 800568c:	20001b3c 	.word	0x20001b3c
 8005690:	200064d8 	.word	0x200064d8
 8005694:	200064d0 	.word	0x200064d0
 8005698:	200010e4 	.word	0x200010e4
 800569c:	20000a68 	.word	0x20000a68
 80056a0:	200064bc 	.word	0x200064bc
 80056a4:	2000649c 	.word	0x2000649c

080056a8 <GetPage1ItemValue>:
    switch(menu)
 80056a8:	280d      	cmp	r0, #13
 80056aa:	d85b      	bhi.n	8005764 <GetPage1ItemValue+0xbc>
 80056ac:	e8df f000 	tbb	[pc, r0]
 80056b0:	19130d07 	.word	0x19130d07
 80056b4:	312b251f 	.word	0x312b251f
 80056b8:	49433d37 	.word	0x49433d37
 80056bc:	554f      	.short	0x554f
            if(item < F1_ITEM_MAX)
 80056be:	2902      	cmp	r1, #2
 80056c0:	d852      	bhi.n	8005768 <GetPage1ItemValue+0xc0>
                res = g_F1[item];
 80056c2:	4b37      	ldr	r3, [pc, #220]	@ (80057a0 <GetPage1ItemValue+0xf8>)
 80056c4:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80056c8:	4770      	bx	lr
            if(item < F2_ITEM_MAX)
 80056ca:	2902      	cmp	r1, #2
 80056cc:	d84e      	bhi.n	800576c <GetPage1ItemValue+0xc4>
                res = g_F2[item];
 80056ce:	4b35      	ldr	r3, [pc, #212]	@ (80057a4 <GetPage1ItemValue+0xfc>)
 80056d0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80056d4:	4770      	bx	lr
            if(item < F3_ITEM_MAX)
 80056d6:	2905      	cmp	r1, #5
 80056d8:	d84a      	bhi.n	8005770 <GetPage1ItemValue+0xc8>
                res = g_F3[item];
 80056da:	4b33      	ldr	r3, [pc, #204]	@ (80057a8 <GetPage1ItemValue+0x100>)
 80056dc:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80056e0:	4770      	bx	lr
            if(item < F4_ITEM_MAX)
 80056e2:	2902      	cmp	r1, #2
 80056e4:	d846      	bhi.n	8005774 <GetPage1ItemValue+0xcc>
                res = g_F4[item];
 80056e6:	4b31      	ldr	r3, [pc, #196]	@ (80057ac <GetPage1ItemValue+0x104>)
 80056e8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80056ec:	4770      	bx	lr
            if(item < F5_ITEM_MAX)
 80056ee:	2902      	cmp	r1, #2
 80056f0:	d842      	bhi.n	8005778 <GetPage1ItemValue+0xd0>
                res = g_F5[item];
 80056f2:	4b2f      	ldr	r3, [pc, #188]	@ (80057b0 <GetPage1ItemValue+0x108>)
 80056f4:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80056f8:	4770      	bx	lr
            if(item < F6_ITEM_MAX)
 80056fa:	2907      	cmp	r1, #7
 80056fc:	d83e      	bhi.n	800577c <GetPage1ItemValue+0xd4>
                res = g_F6[item];
 80056fe:	4b2d      	ldr	r3, [pc, #180]	@ (80057b4 <GetPage1ItemValue+0x10c>)
 8005700:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005704:	4770      	bx	lr
            if(item < F7_ITEM_MAX)
 8005706:	2907      	cmp	r1, #7
 8005708:	d83a      	bhi.n	8005780 <GetPage1ItemValue+0xd8>
                res = g_F7[item];
 800570a:	4b2b      	ldr	r3, [pc, #172]	@ (80057b8 <GetPage1ItemValue+0x110>)
 800570c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005710:	4770      	bx	lr
            if(item < F8_ITEM_MAX)
 8005712:	2906      	cmp	r1, #6
 8005714:	d836      	bhi.n	8005784 <GetPage1ItemValue+0xdc>
                res = g_F8[item];
 8005716:	4b29      	ldr	r3, [pc, #164]	@ (80057bc <GetPage1ItemValue+0x114>)
 8005718:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800571c:	4770      	bx	lr
            if(item < F9_ITEM_MAX)
 800571e:	2906      	cmp	r1, #6
 8005720:	d832      	bhi.n	8005788 <GetPage1ItemValue+0xe0>
                res = g_F9[item];
 8005722:	4b27      	ldr	r3, [pc, #156]	@ (80057c0 <GetPage1ItemValue+0x118>)
 8005724:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005728:	4770      	bx	lr
            if(item < F10_ITEM_MAX)
 800572a:	2905      	cmp	r1, #5
 800572c:	d82e      	bhi.n	800578c <GetPage1ItemValue+0xe4>
                res = g_F10[item];
 800572e:	4b25      	ldr	r3, [pc, #148]	@ (80057c4 <GetPage1ItemValue+0x11c>)
 8005730:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005734:	4770      	bx	lr
            if(item < F11_ITEM_MAX)
 8005736:	2904      	cmp	r1, #4
 8005738:	d82a      	bhi.n	8005790 <GetPage1ItemValue+0xe8>
                res = g_F11[item];
 800573a:	4b23      	ldr	r3, [pc, #140]	@ (80057c8 <GetPage1ItemValue+0x120>)
 800573c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005740:	4770      	bx	lr
            if(item < F12_ITEM_MAX)
 8005742:	2902      	cmp	r1, #2
 8005744:	d826      	bhi.n	8005794 <GetPage1ItemValue+0xec>
                res = g_F12[item];
 8005746:	4b21      	ldr	r3, [pc, #132]	@ (80057cc <GetPage1ItemValue+0x124>)
 8005748:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800574c:	4770      	bx	lr
            if(item < F13_ITEM_MAX)
 800574e:	292f      	cmp	r1, #47	@ 0x2f
 8005750:	d822      	bhi.n	8005798 <GetPage1ItemValue+0xf0>
                res = g_F13[item];
 8005752:	4b1f      	ldr	r3, [pc, #124]	@ (80057d0 <GetPage1ItemValue+0x128>)
 8005754:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005758:	4770      	bx	lr
            if(item < F14_ITEM_MAX)
 800575a:	b9f9      	cbnz	r1, 800579c <GetPage1ItemValue+0xf4>
                res = g_F14[item];
 800575c:	4b1d      	ldr	r3, [pc, #116]	@ (80057d4 <GetPage1ItemValue+0x12c>)
 800575e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005762:	4770      	bx	lr
    switch(menu)
 8005764:	2000      	movs	r0, #0
 8005766:	4770      	bx	lr
    uint32_t res = 0U;
 8005768:	2000      	movs	r0, #0
 800576a:	4770      	bx	lr
 800576c:	2000      	movs	r0, #0
 800576e:	4770      	bx	lr
 8005770:	2000      	movs	r0, #0
 8005772:	4770      	bx	lr
 8005774:	2000      	movs	r0, #0
 8005776:	4770      	bx	lr
 8005778:	2000      	movs	r0, #0
 800577a:	4770      	bx	lr
 800577c:	2000      	movs	r0, #0
 800577e:	4770      	bx	lr
 8005780:	2000      	movs	r0, #0
 8005782:	4770      	bx	lr
 8005784:	2000      	movs	r0, #0
 8005786:	4770      	bx	lr
 8005788:	2000      	movs	r0, #0
 800578a:	4770      	bx	lr
 800578c:	2000      	movs	r0, #0
 800578e:	4770      	bx	lr
 8005790:	2000      	movs	r0, #0
 8005792:	4770      	bx	lr
 8005794:	2000      	movs	r0, #0
 8005796:	4770      	bx	lr
 8005798:	2000      	movs	r0, #0
 800579a:	4770      	bx	lr
 800579c:	2000      	movs	r0, #0
}
 800579e:	4770      	bx	lr
 80057a0:	200063d4 	.word	0x200063d4
 80057a4:	2000630c 	.word	0x2000630c
 80057a8:	20006180 	.word	0x20006180
 80057ac:	2000036c 	.word	0x2000036c
 80057b0:	20005ff8 	.word	0x20005ff8
 80057b4:	20005de8 	.word	0x20005de8
 80057b8:	20005bd8 	.word	0x20005bd8
 80057bc:	20005a08 	.word	0x20005a08
 80057c0:	20005838 	.word	0x20005838
 80057c4:	200056ac 	.word	0x200056ac
 80057c8:	20005560 	.word	0x20005560
 80057cc:	20005498 	.word	0x20005498
 80057d0:	20004838 	.word	0x20004838
 80057d4:	200047f4 	.word	0x200047f4

080057d8 <GetPage0ItemMAXItem>:
    switch(menu)
 80057d8:	281b      	cmp	r0, #27
 80057da:	d80f      	bhi.n	80057fc <GetPage0ItemMAXItem+0x24>
 80057dc:	e8df f000 	tbb	[pc, r0]
 80057e0:	14121040 	.word	0x14121040
 80057e4:	1a401816 	.word	0x1a401816
 80057e8:	201e1c40 	.word	0x201e1c40
 80057ec:	26242240 	.word	0x26242240
 80057f0:	2e2c2a28 	.word	0x2e2c2a28
 80057f4:	36343230 	.word	0x36343230
 80057f8:	3e3c3a38 	.word	0x3e3c3a38
 80057fc:	2000      	movs	r0, #0
 80057fe:	4770      	bx	lr
            temp = ESP_2_ITEM_MAX;
 8005800:	2006      	movs	r0, #6
            break;
 8005802:	4770      	bx	lr
            temp = ABS_1_ITEM_MAX;
 8005804:	2004      	movs	r0, #4
            break;
 8005806:	4770      	bx	lr
            temp = ABS_2_ITEM_MAX;
 8005808:	2004      	movs	r0, #4
            break;
 800580a:	4770      	bx	lr
            temp = TPMS_1_ITEM_MAX;
 800580c:	2007      	movs	r0, #7
            break;
 800580e:	4770      	bx	lr
            temp = BCM_1_ITEM_MAX;
 8005810:	2003      	movs	r0, #3
            break;
 8005812:	4770      	bx	lr
            temp = BCM_4_ITEM_MAX;
 8005814:	2015      	movs	r0, #21
            break;
 8005816:	4770      	bx	lr
            temp = PEPS_3_ITEM_MAX;
 8005818:	2003      	movs	r0, #3
            break;
 800581a:	4770      	bx	lr
            temp = TBOX_1_ITEM_MAX;
 800581c:	2006      	movs	r0, #6
            break;
 800581e:	4770      	bx	lr
            temp = TBOX_2_ITEM_MAX;
 8005820:	2002      	movs	r0, #2
            break;
 8005822:	4770      	bx	lr
            temp = FCM_3_ITEM_MAX;
 8005824:	200a      	movs	r0, #10
            break;
 8005826:	4770      	bx	lr
            temp = FCM_4_ITEM_MAX;
 8005828:	200a      	movs	r0, #10
            break;
 800582a:	4770      	bx	lr
            temp = FCM_5_ITEM_MAX;
 800582c:	200a      	movs	r0, #10
            break;
 800582e:	4770      	bx	lr
            temp = FCM_6_ITEM_MAX;
 8005830:	200a      	movs	r0, #10
            break;
 8005832:	4770      	bx	lr
            temp = FCM_7_ITEM_MAX;
 8005834:	200a      	movs	r0, #10
            break;
 8005836:	4770      	bx	lr
            temp = FCM_8_ITEM_MAX;
 8005838:	200a      	movs	r0, #10
            break;
 800583a:	4770      	bx	lr
            temp = GW_PC_1_ITEM_MAX;
 800583c:	200a      	movs	r0, #10
            break;
 800583e:	4770      	bx	lr
            temp = GW_PC_6_ITEM_MAX;
 8005840:	2002      	movs	r0, #2
            break;
 8005842:	4770      	bx	lr
            temp = GW_PC_2_ITEM_MAX;
 8005844:	2009      	movs	r0, #9
            break;
 8005846:	4770      	bx	lr
            temp = GW_PC_7_ITEM_MAX;
 8005848:	2009      	movs	r0, #9
            break;
 800584a:	4770      	bx	lr
            temp = GW_PC_4_ITEM_MAX;
 800584c:	2003      	movs	r0, #3
            break;
 800584e:	4770      	bx	lr
            temp = GW_BD_9_ITEM_MAX;
 8005850:	2019      	movs	r0, #25
            break;
 8005852:	4770      	bx	lr
            temp = GW_BD_14_ITEM_MAX;
 8005854:	2017      	movs	r0, #23
            break;
 8005856:	4770      	bx	lr
            temp = GW_BD_24_ITEM_MAX;
 8005858:	2009      	movs	r0, #9
            break;
 800585a:	4770      	bx	lr
            temp = GW_BD_29_ITEM_MAX;
 800585c:	200f      	movs	r0, #15
            break;
 800585e:	4770      	bx	lr
            temp = ACU_1_ITEM_MAX;
 8005860:	2001      	movs	r0, #1
}
 8005862:	4770      	bx	lr

08005864 <GetPage1ItemMAXItem>:
    switch(menu){
 8005864:	280d      	cmp	r0, #13
 8005866:	d808      	bhi.n	800587a <GetPage1ItemMAXItem+0x16>
 8005868:	e8df f000 	tbb	[pc, r0]
 800586c:	1a091919 	.word	0x1a091919
 8005870:	1a0d0b19 	.word	0x1a0d0b19
 8005874:	1913110f 	.word	0x1913110f
 8005878:	1715      	.short	0x1715
 800587a:	2000      	movs	r0, #0
 800587c:	4770      	bx	lr
            temp = F3_ITEM_MAX;
 800587e:	2006      	movs	r0, #6
            break;
 8005880:	4770      	bx	lr
            temp = F6_ITEM_MAX;
 8005882:	2008      	movs	r0, #8
            break;
 8005884:	4770      	bx	lr
            temp = F7_ITEM_MAX;
 8005886:	2008      	movs	r0, #8
            break;
 8005888:	4770      	bx	lr
            temp = F9_ITEM_MAX;
 800588a:	2007      	movs	r0, #7
            break;
 800588c:	4770      	bx	lr
            temp = F10_ITEM_MAX;
 800588e:	2006      	movs	r0, #6
            break;
 8005890:	4770      	bx	lr
            temp = F11_ITEM_MAX;
 8005892:	2005      	movs	r0, #5
            break;
 8005894:	4770      	bx	lr
            temp = F13_ITEM_MAX;
 8005896:	2030      	movs	r0, #48	@ 0x30
            break;
 8005898:	4770      	bx	lr
            temp = F14_ITEM_MAX;
 800589a:	2001      	movs	r0, #1
            break;
 800589c:	4770      	bx	lr
            temp = F1_ITEM_MAX;
 800589e:	2003      	movs	r0, #3
}
 80058a0:	4770      	bx	lr
	...

080058a4 <GetPage0ItemMAXValue>:
    switch(menu)
 80058a4:	281b      	cmp	r0, #27
 80058a6:	d87f      	bhi.n	80059a8 <GetPage0ItemMAXValue+0x104>
 80058a8:	e8df f000 	tbb	[pc, r0]
 80058ac:	1a16120e 	.word	0x1a16120e
 80058b0:	2a26221e 	.word	0x2a26221e
 80058b4:	3a36322e 	.word	0x3a36322e
 80058b8:	4a46423e 	.word	0x4a46423e
 80058bc:	5a56524e 	.word	0x5a56524e
 80058c0:	6a66625e 	.word	0x6a66625e
 80058c4:	7a76726e 	.word	0x7a76726e
            res = ACU_1Max[item];
 80058c8:	4b38      	ldr	r3, [pc, #224]	@ (80059ac <GetPage0ItemMAXValue+0x108>)
 80058ca:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 80058ce:	4770      	bx	lr
            res = ESP_2Max[item];
 80058d0:	4b37      	ldr	r3, [pc, #220]	@ (80059b0 <GetPage0ItemMAXValue+0x10c>)
 80058d2:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 80058d6:	4770      	bx	lr
            res = ABS_1Max[item];
 80058d8:	4b36      	ldr	r3, [pc, #216]	@ (80059b4 <GetPage0ItemMAXValue+0x110>)
 80058da:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 80058de:	4770      	bx	lr
            res = ABS_2Max[item];
 80058e0:	4b35      	ldr	r3, [pc, #212]	@ (80059b8 <GetPage0ItemMAXValue+0x114>)
 80058e2:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 80058e6:	4770      	bx	lr
            res = TPMS_1Max[item];
 80058e8:	4b34      	ldr	r3, [pc, #208]	@ (80059bc <GetPage0ItemMAXValue+0x118>)
 80058ea:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 80058ee:	4770      	bx	lr
            res = BCM_1Max[item];
 80058f0:	4b33      	ldr	r3, [pc, #204]	@ (80059c0 <GetPage0ItemMAXValue+0x11c>)
 80058f2:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 80058f6:	4770      	bx	lr
            res = BCM_3Max[item];
 80058f8:	4b32      	ldr	r3, [pc, #200]	@ (80059c4 <GetPage0ItemMAXValue+0x120>)
 80058fa:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 80058fe:	4770      	bx	lr
            res = BCM_4Max[item];
 8005900:	4b31      	ldr	r3, [pc, #196]	@ (80059c8 <GetPage0ItemMAXValue+0x124>)
 8005902:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005906:	4770      	bx	lr
            res = BCM_5Max[item];
 8005908:	4b30      	ldr	r3, [pc, #192]	@ (80059cc <GetPage0ItemMAXValue+0x128>)
 800590a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 800590e:	4770      	bx	lr
            res = PEPS_3Max[item];
 8005910:	4b2f      	ldr	r3, [pc, #188]	@ (80059d0 <GetPage0ItemMAXValue+0x12c>)
 8005912:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005916:	4770      	bx	lr
            res = TBOX_1Max[item];
 8005918:	4b2e      	ldr	r3, [pc, #184]	@ (80059d4 <GetPage0ItemMAXValue+0x130>)
 800591a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 800591e:	4770      	bx	lr
            res = TBOX_2Max[item];
 8005920:	4b2d      	ldr	r3, [pc, #180]	@ (80059d8 <GetPage0ItemMAXValue+0x134>)
 8005922:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005926:	4770      	bx	lr
            res = TBOX_4Max[item];
 8005928:	4b2c      	ldr	r3, [pc, #176]	@ (80059dc <GetPage0ItemMAXValue+0x138>)
 800592a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 800592e:	4770      	bx	lr
            res = FCM_3Max[item];
 8005930:	4b2b      	ldr	r3, [pc, #172]	@ (80059e0 <GetPage0ItemMAXValue+0x13c>)
 8005932:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005936:	4770      	bx	lr
            res = FCM_4Max[item];
 8005938:	4b2a      	ldr	r3, [pc, #168]	@ (80059e4 <GetPage0ItemMAXValue+0x140>)
 800593a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 800593e:	4770      	bx	lr
            res = FCM_5Max[item];
 8005940:	4b29      	ldr	r3, [pc, #164]	@ (80059e8 <GetPage0ItemMAXValue+0x144>)
 8005942:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005946:	4770      	bx	lr
            res = FCM_6Max[item];
 8005948:	4b28      	ldr	r3, [pc, #160]	@ (80059ec <GetPage0ItemMAXValue+0x148>)
 800594a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 800594e:	4770      	bx	lr
            res = FCM_7Max[item];
 8005950:	4b27      	ldr	r3, [pc, #156]	@ (80059f0 <GetPage0ItemMAXValue+0x14c>)
 8005952:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005956:	4770      	bx	lr
            res = FCM_8Max[item];
 8005958:	4b26      	ldr	r3, [pc, #152]	@ (80059f4 <GetPage0ItemMAXValue+0x150>)
 800595a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 800595e:	4770      	bx	lr
            res = GW_PC_1Max[item];
 8005960:	4b25      	ldr	r3, [pc, #148]	@ (80059f8 <GetPage0ItemMAXValue+0x154>)
 8005962:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005966:	4770      	bx	lr
            res = GW_PC_6Max[item];
 8005968:	4b24      	ldr	r3, [pc, #144]	@ (80059fc <GetPage0ItemMAXValue+0x158>)
 800596a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 800596e:	4770      	bx	lr
            res = GW_PC_2Max[item];
 8005970:	4b23      	ldr	r3, [pc, #140]	@ (8005a00 <GetPage0ItemMAXValue+0x15c>)
 8005972:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005976:	4770      	bx	lr
            res = GW_PC_7Max[item];
 8005978:	4b22      	ldr	r3, [pc, #136]	@ (8005a04 <GetPage0ItemMAXValue+0x160>)
 800597a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 800597e:	4770      	bx	lr
            res = GW_PC_4Max[item];
 8005980:	4b21      	ldr	r3, [pc, #132]	@ (8005a08 <GetPage0ItemMAXValue+0x164>)
 8005982:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005986:	4770      	bx	lr
            res = GW_BD_9Max[item];
 8005988:	4b20      	ldr	r3, [pc, #128]	@ (8005a0c <GetPage0ItemMAXValue+0x168>)
 800598a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 800598e:	4770      	bx	lr
            res = GW_BD_14Max[item];
 8005990:	4b1f      	ldr	r3, [pc, #124]	@ (8005a10 <GetPage0ItemMAXValue+0x16c>)
 8005992:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005996:	4770      	bx	lr
            res = GW_BD_24Max[item];
 8005998:	4b1e      	ldr	r3, [pc, #120]	@ (8005a14 <GetPage0ItemMAXValue+0x170>)
 800599a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 800599e:	4770      	bx	lr
            res = GW_BD_29Max[item];
 80059a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a18 <GetPage0ItemMAXValue+0x174>)
 80059a2:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 80059a6:	4770      	bx	lr
    switch(menu)
 80059a8:	2000      	movs	r0, #0
}
 80059aa:	4770      	bx	lr
 80059ac:	2000424c 	.word	0x2000424c
 80059b0:	200040a8 	.word	0x200040a8
 80059b4:	20003f90 	.word	0x20003f90
 80059b8:	20003e78 	.word	0x20003e78
 80059bc:	20003c8c 	.word	0x20003c8c
 80059c0:	20003bb8 	.word	0x20003bb8
 80059c4:	20003b70 	.word	0x20003b70
 80059c8:	200035b0 	.word	0x200035b0
 80059cc:	2000353c 	.word	0x2000353c
 80059d0:	20003468 	.word	0x20003468
 80059d4:	200032c4 	.word	0x200032c4
 80059d8:	20003238 	.word	0x20003238
 80059dc:	200031f0 	.word	0x200031f0
 80059e0:	20002f34 	.word	0x20002f34
 80059e4:	20002c64 	.word	0x20002c64
 80059e8:	20002994 	.word	0x20002994
 80059ec:	200026d8 	.word	0x200026d8
 80059f0:	2000241c 	.word	0x2000241c
 80059f4:	20002160 	.word	0x20002160
 80059f8:	20001e54 	.word	0x20001e54
 80059fc:	20001dc8 	.word	0x20001dc8
 8005a00:	20001b50 	.word	0x20001b50
 8005a04:	200018c4 	.word	0x200018c4
 8005a08:	200017f0 	.word	0x200017f0
 8005a0c:	20001118 	.word	0x20001118
 8005a10:	20000a98 	.word	0x20000a98
 8005a14:	200007f0 	.word	0x200007f0
 8005a18:	200003d4 	.word	0x200003d4

08005a1c <GetPage1ItemMAXValue>:
    switch(menu)
 8005a1c:	281d      	cmp	r0, #29
 8005a1e:	f200 8089 	bhi.w	8005b34 <GetPage1ItemMAXValue+0x118>
 8005a22:	e8df f000 	tbb	[pc, r0]
 8005a26:	130f      	.short	0x130f
 8005a28:	231f1b17 	.word	0x231f1b17
 8005a2c:	332f2b27 	.word	0x332f2b27
 8005a30:	433f3b37 	.word	0x433f3b37
 8005a34:	534f4b47 	.word	0x534f4b47
 8005a38:	635f5b57 	.word	0x635f5b57
 8005a3c:	736f6b67 	.word	0x736f6b67
 8005a40:	837f7b77 	.word	0x837f7b77
			res = F1Max[item];
 8005a44:	4b3c      	ldr	r3, [pc, #240]	@ (8005b38 <GetPage1ItemMAXValue+0x11c>)
 8005a46:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005a4a:	4770      	bx	lr
			res = F2Max[item];
 8005a4c:	4b3b      	ldr	r3, [pc, #236]	@ (8005b3c <GetPage1ItemMAXValue+0x120>)
 8005a4e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005a52:	4770      	bx	lr
			res = F3Max[item];
 8005a54:	4b3a      	ldr	r3, [pc, #232]	@ (8005b40 <GetPage1ItemMAXValue+0x124>)
 8005a56:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005a5a:	4770      	bx	lr
			res = F4Max[item];
 8005a5c:	4b39      	ldr	r3, [pc, #228]	@ (8005b44 <GetPage1ItemMAXValue+0x128>)
 8005a5e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005a62:	4770      	bx	lr
			res = F5Max[item];
 8005a64:	4b38      	ldr	r3, [pc, #224]	@ (8005b48 <GetPage1ItemMAXValue+0x12c>)
 8005a66:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005a6a:	4770      	bx	lr
			res = F6Max[item];
 8005a6c:	4b37      	ldr	r3, [pc, #220]	@ (8005b4c <GetPage1ItemMAXValue+0x130>)
 8005a6e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005a72:	4770      	bx	lr
			res = F7Max[item];
 8005a74:	4b36      	ldr	r3, [pc, #216]	@ (8005b50 <GetPage1ItemMAXValue+0x134>)
 8005a76:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005a7a:	4770      	bx	lr
			res = F8Max[item];
 8005a7c:	4b35      	ldr	r3, [pc, #212]	@ (8005b54 <GetPage1ItemMAXValue+0x138>)
 8005a7e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005a82:	4770      	bx	lr
			res = F9Max[item];
 8005a84:	4b34      	ldr	r3, [pc, #208]	@ (8005b58 <GetPage1ItemMAXValue+0x13c>)
 8005a86:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005a8a:	4770      	bx	lr
			res = F10Max[item];
 8005a8c:	4b33      	ldr	r3, [pc, #204]	@ (8005b5c <GetPage1ItemMAXValue+0x140>)
 8005a8e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005a92:	4770      	bx	lr
			res = F11Max[item];
 8005a94:	4b32      	ldr	r3, [pc, #200]	@ (8005b60 <GetPage1ItemMAXValue+0x144>)
 8005a96:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005a9a:	4770      	bx	lr
			res = F12Max[item];
 8005a9c:	4b31      	ldr	r3, [pc, #196]	@ (8005b64 <GetPage1ItemMAXValue+0x148>)
 8005a9e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005aa2:	4770      	bx	lr
			res = F13Max[item];
 8005aa4:	4b30      	ldr	r3, [pc, #192]	@ (8005b68 <GetPage1ItemMAXValue+0x14c>)
 8005aa6:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005aaa:	4770      	bx	lr
			res = F14Max[item];
 8005aac:	4b2f      	ldr	r3, [pc, #188]	@ (8005b6c <GetPage1ItemMAXValue+0x150>)
 8005aae:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005ab2:	4770      	bx	lr
			res = F15Max[item];
 8005ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8005b70 <GetPage1ItemMAXValue+0x154>)
 8005ab6:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005aba:	4770      	bx	lr
			res = F16Max[item];
 8005abc:	4b2d      	ldr	r3, [pc, #180]	@ (8005b74 <GetPage1ItemMAXValue+0x158>)
 8005abe:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005ac2:	4770      	bx	lr
			res = F17Max[item];
 8005ac4:	4b2c      	ldr	r3, [pc, #176]	@ (8005b78 <GetPage1ItemMAXValue+0x15c>)
 8005ac6:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005aca:	4770      	bx	lr
			res = F18Max[item];
 8005acc:	4b2b      	ldr	r3, [pc, #172]	@ (8005b7c <GetPage1ItemMAXValue+0x160>)
 8005ace:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005ad2:	4770      	bx	lr
			res = F19Max[item];
 8005ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8005b80 <GetPage1ItemMAXValue+0x164>)
 8005ad6:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005ada:	4770      	bx	lr
			res = F20Max[item];
 8005adc:	4b29      	ldr	r3, [pc, #164]	@ (8005b84 <GetPage1ItemMAXValue+0x168>)
 8005ade:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005ae2:	4770      	bx	lr
			res = F21Max[item];
 8005ae4:	4b28      	ldr	r3, [pc, #160]	@ (8005b88 <GetPage1ItemMAXValue+0x16c>)
 8005ae6:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005aea:	4770      	bx	lr
			res = F22Max[item];
 8005aec:	4b27      	ldr	r3, [pc, #156]	@ (8005b8c <GetPage1ItemMAXValue+0x170>)
 8005aee:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005af2:	4770      	bx	lr
			res = F23Max[item];
 8005af4:	4b26      	ldr	r3, [pc, #152]	@ (8005b90 <GetPage1ItemMAXValue+0x174>)
 8005af6:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005afa:	4770      	bx	lr
			res = F24Max[item];
 8005afc:	4b25      	ldr	r3, [pc, #148]	@ (8005b94 <GetPage1ItemMAXValue+0x178>)
 8005afe:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005b02:	4770      	bx	lr
			res = F25Max[item];
 8005b04:	4b24      	ldr	r3, [pc, #144]	@ (8005b98 <GetPage1ItemMAXValue+0x17c>)
 8005b06:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005b0a:	4770      	bx	lr
			res = F26Max[item];
 8005b0c:	4b23      	ldr	r3, [pc, #140]	@ (8005b9c <GetPage1ItemMAXValue+0x180>)
 8005b0e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005b12:	4770      	bx	lr
			res = F27Max[item];
 8005b14:	4b22      	ldr	r3, [pc, #136]	@ (8005ba0 <GetPage1ItemMAXValue+0x184>)
 8005b16:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005b1a:	4770      	bx	lr
			res = F28Max[item];
 8005b1c:	4b21      	ldr	r3, [pc, #132]	@ (8005ba4 <GetPage1ItemMAXValue+0x188>)
 8005b1e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005b22:	4770      	bx	lr
			res = F29Max[item];
 8005b24:	4b20      	ldr	r3, [pc, #128]	@ (8005ba8 <GetPage1ItemMAXValue+0x18c>)
 8005b26:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005b2a:	4770      	bx	lr
			res = F30Max[item];
 8005b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8005bac <GetPage1ItemMAXValue+0x190>)
 8005b2e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005b32:	4770      	bx	lr
    switch(menu)
 8005b34:	2000      	movs	r0, #0
}
 8005b36:	4770      	bx	lr
 8005b38:	200003c0 	.word	0x200003c0
 8005b3c:	200003ac 	.word	0x200003ac
 8005b40:	20000388 	.word	0x20000388
 8005b44:	20000374 	.word	0x20000374
 8005b48:	20000358 	.word	0x20000358
 8005b4c:	20000328 	.word	0x20000328
 8005b50:	200002f8 	.word	0x200002f8
 8005b54:	200002cc 	.word	0x200002cc
 8005b58:	200002a0 	.word	0x200002a0
 8005b5c:	2000027c 	.word	0x2000027c
 8005b60:	2000025c 	.word	0x2000025c
 8005b64:	20000248 	.word	0x20000248
 8005b68:	20000128 	.word	0x20000128
 8005b6c:	20000120 	.word	0x20000120
 8005b70:	200047f4 	.word	0x200047f4
 8005b74:	200047f4 	.word	0x200047f4
 8005b78:	200047f4 	.word	0x200047f4
 8005b7c:	200047f4 	.word	0x200047f4
 8005b80:	200047f4 	.word	0x200047f4
 8005b84:	200047f4 	.word	0x200047f4
 8005b88:	200047f4 	.word	0x200047f4
 8005b8c:	200047f4 	.word	0x200047f4
 8005b90:	200047f4 	.word	0x200047f4
 8005b94:	200047f4 	.word	0x200047f4
 8005b98:	200047f4 	.word	0x200047f4
 8005b9c:	200047f4 	.word	0x200047f4
 8005ba0:	200047f4 	.word	0x200047f4
 8005ba4:	200047f4 	.word	0x200047f4
 8005ba8:	200047f4 	.word	0x200047f4
 8005bac:	200047f4 	.word	0x200047f4

08005bb0 <SavePage0ItemValue>:
	g_Page0menu_index = GET_MENU(menu, Page0_MENU_MAX);
 8005bb0:	281b      	cmp	r0, #27
 8005bb2:	d901      	bls.n	8005bb8 <SavePage0ItemValue+0x8>
 8005bb4:	381c      	subs	r0, #28
 8005bb6:	b2c0      	uxtb	r0, r0
 8005bb8:	4b9b      	ldr	r3, [pc, #620]	@ (8005e28 <SavePage0ItemValue+0x278>)
 8005bba:	7018      	strb	r0, [r3, #0]
    switch (g_Page0menu_index)
 8005bbc:	281b      	cmp	r0, #27
 8005bbe:	d827      	bhi.n	8005c10 <SavePage0ItemValue+0x60>
 8005bc0:	e8df f010 	tbh	[pc, r0, lsl #1]
 8005bc4:	0029001c 	.word	0x0029001c
 8005bc8:	003f0034 	.word	0x003f0034
 8005bcc:	0055004a 	.word	0x0055004a
 8005bd0:	006b0060 	.word	0x006b0060
 8005bd4:	00810076 	.word	0x00810076
 8005bd8:	0097008c 	.word	0x0097008c
 8005bdc:	00ad00a2 	.word	0x00ad00a2
 8005be0:	00c300b8 	.word	0x00c300b8
 8005be4:	00d900ce 	.word	0x00d900ce
 8005be8:	00ef00e4 	.word	0x00ef00e4
 8005bec:	010500fa 	.word	0x010500fa
 8005bf0:	011b0110 	.word	0x011b0110
 8005bf4:	019a0126 	.word	0x019a0126
 8005bf8:	01b001a5 	.word	0x01b001a5
            value = CHECK_VALUE(value, ACU_1Max[item]);
 8005bfc:	4b8b      	ldr	r3, [pc, #556]	@ (8005e2c <SavePage0ItemValue+0x27c>)
 8005bfe:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	db01      	blt.n	8005c0a <SavePage0ItemValue+0x5a>
 8005c06:	3b01      	subs	r3, #1
 8005c08:	b21a      	sxth	r2, r3
            g_ACU_1[item] = value;
 8005c0a:	4b89      	ldr	r3, [pc, #548]	@ (8005e30 <SavePage0ItemValue+0x280>)
 8005c0c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    g_Page0item_index = item;
 8005c10:	4b88      	ldr	r3, [pc, #544]	@ (8005e34 <SavePage0ItemValue+0x284>)
 8005c12:	7019      	strb	r1, [r3, #0]
}
 8005c14:	4770      	bx	lr
            value = CHECK_VALUE(value, ESP_2Max[item]);
 8005c16:	4b88      	ldr	r3, [pc, #544]	@ (8005e38 <SavePage0ItemValue+0x288>)
 8005c18:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	db01      	blt.n	8005c24 <SavePage0ItemValue+0x74>
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b21a      	sxth	r2, r3
            g_ESP_2[item] = value;
 8005c24:	4b85      	ldr	r3, [pc, #532]	@ (8005e3c <SavePage0ItemValue+0x28c>)
 8005c26:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005c2a:	e7f1      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, ABS_1Max[item]);
 8005c2c:	4b84      	ldr	r3, [pc, #528]	@ (8005e40 <SavePage0ItemValue+0x290>)
 8005c2e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	db01      	blt.n	8005c3a <SavePage0ItemValue+0x8a>
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b21a      	sxth	r2, r3
            g_ABS_1[item] = value;
 8005c3a:	4b82      	ldr	r3, [pc, #520]	@ (8005e44 <SavePage0ItemValue+0x294>)
 8005c3c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005c40:	e7e6      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, ABS_2Max[item]);
 8005c42:	4b81      	ldr	r3, [pc, #516]	@ (8005e48 <SavePage0ItemValue+0x298>)
 8005c44:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	db01      	blt.n	8005c50 <SavePage0ItemValue+0xa0>
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b21a      	sxth	r2, r3
            g_ABS_2[item] = value;
 8005c50:	4b7e      	ldr	r3, [pc, #504]	@ (8005e4c <SavePage0ItemValue+0x29c>)
 8005c52:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005c56:	e7db      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, TPMS_1Max[item]);
 8005c58:	4b7d      	ldr	r3, [pc, #500]	@ (8005e50 <SavePage0ItemValue+0x2a0>)
 8005c5a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	db01      	blt.n	8005c66 <SavePage0ItemValue+0xb6>
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b21a      	sxth	r2, r3
            g_TPMS_1[item] = value;
 8005c66:	4b7b      	ldr	r3, [pc, #492]	@ (8005e54 <SavePage0ItemValue+0x2a4>)
 8005c68:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005c6c:	e7d0      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, BCM_1Max[item]);
 8005c6e:	4b7a      	ldr	r3, [pc, #488]	@ (8005e58 <SavePage0ItemValue+0x2a8>)
 8005c70:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	db01      	blt.n	8005c7c <SavePage0ItemValue+0xcc>
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b21a      	sxth	r2, r3
            g_BCM_1[item] = value;
 8005c7c:	4b77      	ldr	r3, [pc, #476]	@ (8005e5c <SavePage0ItemValue+0x2ac>)
 8005c7e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005c82:	e7c5      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, BCM_3Max[item]);
 8005c84:	4b76      	ldr	r3, [pc, #472]	@ (8005e60 <SavePage0ItemValue+0x2b0>)
 8005c86:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	db01      	blt.n	8005c92 <SavePage0ItemValue+0xe2>
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b21a      	sxth	r2, r3
            g_BCM_3[item] = value;
 8005c92:	4b74      	ldr	r3, [pc, #464]	@ (8005e64 <SavePage0ItemValue+0x2b4>)
 8005c94:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005c98:	e7ba      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, BCM_4Max[item]);
 8005c9a:	4b73      	ldr	r3, [pc, #460]	@ (8005e68 <SavePage0ItemValue+0x2b8>)
 8005c9c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	db01      	blt.n	8005ca8 <SavePage0ItemValue+0xf8>
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b21a      	sxth	r2, r3
            g_BCM_4[item] = value;
 8005ca8:	4b70      	ldr	r3, [pc, #448]	@ (8005e6c <SavePage0ItemValue+0x2bc>)
 8005caa:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005cae:	e7af      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, BCM_5Max[item]);
 8005cb0:	4b6f      	ldr	r3, [pc, #444]	@ (8005e70 <SavePage0ItemValue+0x2c0>)
 8005cb2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	db01      	blt.n	8005cbe <SavePage0ItemValue+0x10e>
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b21a      	sxth	r2, r3
            g_BCM_5[item] = value;
 8005cbe:	4b6d      	ldr	r3, [pc, #436]	@ (8005e74 <SavePage0ItemValue+0x2c4>)
 8005cc0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005cc4:	e7a4      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, PEPS_3Max[item]);
 8005cc6:	4b6c      	ldr	r3, [pc, #432]	@ (8005e78 <SavePage0ItemValue+0x2c8>)
 8005cc8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	db01      	blt.n	8005cd4 <SavePage0ItemValue+0x124>
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	b21a      	sxth	r2, r3
            g_PEPS_3[item] = value;
 8005cd4:	4b69      	ldr	r3, [pc, #420]	@ (8005e7c <SavePage0ItemValue+0x2cc>)
 8005cd6:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005cda:	e799      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, TBOX_1Max[item]);
 8005cdc:	4b68      	ldr	r3, [pc, #416]	@ (8005e80 <SavePage0ItemValue+0x2d0>)
 8005cde:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	db01      	blt.n	8005cea <SavePage0ItemValue+0x13a>
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b21a      	sxth	r2, r3
            g_TBOX_1[item] = value;
 8005cea:	4b66      	ldr	r3, [pc, #408]	@ (8005e84 <SavePage0ItemValue+0x2d4>)
 8005cec:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005cf0:	e78e      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, TBOX_2Max[item]);
 8005cf2:	4b65      	ldr	r3, [pc, #404]	@ (8005e88 <SavePage0ItemValue+0x2d8>)
 8005cf4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	db01      	blt.n	8005d00 <SavePage0ItemValue+0x150>
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	b21a      	sxth	r2, r3
            g_TBOX_2[item] = value;
 8005d00:	4b62      	ldr	r3, [pc, #392]	@ (8005e8c <SavePage0ItemValue+0x2dc>)
 8005d02:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005d06:	e783      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, TBOX_4Max[item]);
 8005d08:	4b61      	ldr	r3, [pc, #388]	@ (8005e90 <SavePage0ItemValue+0x2e0>)
 8005d0a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	db01      	blt.n	8005d16 <SavePage0ItemValue+0x166>
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b21a      	sxth	r2, r3
            g_TBOX_4[item] = value;
 8005d16:	4b5f      	ldr	r3, [pc, #380]	@ (8005e94 <SavePage0ItemValue+0x2e4>)
 8005d18:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005d1c:	e778      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, FCM_3Max[item]);
 8005d1e:	4b5e      	ldr	r3, [pc, #376]	@ (8005e98 <SavePage0ItemValue+0x2e8>)
 8005d20:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	db01      	blt.n	8005d2c <SavePage0ItemValue+0x17c>
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	b21a      	sxth	r2, r3
            g_FCM_3[item] = value;
 8005d2c:	4b5b      	ldr	r3, [pc, #364]	@ (8005e9c <SavePage0ItemValue+0x2ec>)
 8005d2e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005d32:	e76d      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, FCM_4Max[item]);
 8005d34:	4b5a      	ldr	r3, [pc, #360]	@ (8005ea0 <SavePage0ItemValue+0x2f0>)
 8005d36:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	db01      	blt.n	8005d42 <SavePage0ItemValue+0x192>
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b21a      	sxth	r2, r3
            g_FCM_4[item] = value;
 8005d42:	4b58      	ldr	r3, [pc, #352]	@ (8005ea4 <SavePage0ItemValue+0x2f4>)
 8005d44:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005d48:	e762      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, FCM_5Max[item]);
 8005d4a:	4b57      	ldr	r3, [pc, #348]	@ (8005ea8 <SavePage0ItemValue+0x2f8>)
 8005d4c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	db01      	blt.n	8005d58 <SavePage0ItemValue+0x1a8>
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b21a      	sxth	r2, r3
            g_FCM_5[item] = value;
 8005d58:	4b54      	ldr	r3, [pc, #336]	@ (8005eac <SavePage0ItemValue+0x2fc>)
 8005d5a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005d5e:	e757      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, FCM_6Max[item]);
 8005d60:	4b53      	ldr	r3, [pc, #332]	@ (8005eb0 <SavePage0ItemValue+0x300>)
 8005d62:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	db01      	blt.n	8005d6e <SavePage0ItemValue+0x1be>
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b21a      	sxth	r2, r3
            g_FCM_6[item] = value;
 8005d6e:	4b51      	ldr	r3, [pc, #324]	@ (8005eb4 <SavePage0ItemValue+0x304>)
 8005d70:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005d74:	e74c      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, FCM_7Max[item]);
 8005d76:	4b50      	ldr	r3, [pc, #320]	@ (8005eb8 <SavePage0ItemValue+0x308>)
 8005d78:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	db01      	blt.n	8005d84 <SavePage0ItemValue+0x1d4>
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b21a      	sxth	r2, r3
            g_FCM_7[item] = value;
 8005d84:	4b4d      	ldr	r3, [pc, #308]	@ (8005ebc <SavePage0ItemValue+0x30c>)
 8005d86:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005d8a:	e741      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, FCM_8Max[item]);
 8005d8c:	4b4c      	ldr	r3, [pc, #304]	@ (8005ec0 <SavePage0ItemValue+0x310>)
 8005d8e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	db01      	blt.n	8005d9a <SavePage0ItemValue+0x1ea>
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b21a      	sxth	r2, r3
            g_FCM_8[item] = value;
 8005d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8005ec4 <SavePage0ItemValue+0x314>)
 8005d9c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005da0:	e736      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, GW_PC_1Max[item]);
 8005da2:	4b49      	ldr	r3, [pc, #292]	@ (8005ec8 <SavePage0ItemValue+0x318>)
 8005da4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	db01      	blt.n	8005db0 <SavePage0ItemValue+0x200>
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b21a      	sxth	r2, r3
            g_GW_PC_1[item] = value;
 8005db0:	4b46      	ldr	r3, [pc, #280]	@ (8005ecc <SavePage0ItemValue+0x31c>)
 8005db2:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005db6:	e72b      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, GW_PC_6Max[item]);
 8005db8:	4b45      	ldr	r3, [pc, #276]	@ (8005ed0 <SavePage0ItemValue+0x320>)
 8005dba:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	db01      	blt.n	8005dc6 <SavePage0ItemValue+0x216>
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b21a      	sxth	r2, r3
            g_GW_PC_6[item] = value;
 8005dc6:	4b43      	ldr	r3, [pc, #268]	@ (8005ed4 <SavePage0ItemValue+0x324>)
 8005dc8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005dcc:	e720      	b.n	8005c10 <SavePage0ItemValue+0x60>
			value = CHECK_VALUE(value, GW_PC_2Max[item]);
 8005dce:	4b42      	ldr	r3, [pc, #264]	@ (8005ed8 <SavePage0ItemValue+0x328>)
 8005dd0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	db01      	blt.n	8005ddc <SavePage0ItemValue+0x22c>
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	b21a      	sxth	r2, r3
			g_GW_PC_2[item] = value;
 8005ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8005edc <SavePage0ItemValue+0x32c>)
 8005dde:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005de2:	e715      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, GW_PC_7Max[item]);
 8005de4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ee0 <SavePage0ItemValue+0x330>)
 8005de6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	db01      	blt.n	8005df2 <SavePage0ItemValue+0x242>
 8005dee:	3b01      	subs	r3, #1
 8005df0:	b21a      	sxth	r2, r3
            g_GW_PC_7[item] = value;
 8005df2:	4b3c      	ldr	r3, [pc, #240]	@ (8005ee4 <SavePage0ItemValue+0x334>)
 8005df4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005df8:	e70a      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, GW_PC_4Max[item]);
 8005dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8005ee8 <SavePage0ItemValue+0x338>)
 8005dfc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	db01      	blt.n	8005e08 <SavePage0ItemValue+0x258>
 8005e04:	3b01      	subs	r3, #1
 8005e06:	b21a      	sxth	r2, r3
            g_GW_PC_4[item] = value;
 8005e08:	4b38      	ldr	r3, [pc, #224]	@ (8005eec <SavePage0ItemValue+0x33c>)
 8005e0a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005e0e:	e6ff      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, GW_BD_9Max[item]);
 8005e10:	4b37      	ldr	r3, [pc, #220]	@ (8005ef0 <SavePage0ItemValue+0x340>)
 8005e12:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	db01      	blt.n	8005e1e <SavePage0ItemValue+0x26e>
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	b21a      	sxth	r2, r3
            g_GW_BD_9[item] = value;
 8005e1e:	4b35      	ldr	r3, [pc, #212]	@ (8005ef4 <SavePage0ItemValue+0x344>)
 8005e20:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005e24:	e6f4      	b.n	8005c10 <SavePage0ItemValue+0x60>
 8005e26:	bf00      	nop
 8005e28:	200047e9 	.word	0x200047e9
 8005e2c:	2000424c 	.word	0x2000424c
 8005e30:	200065ac 	.word	0x200065ac
 8005e34:	200047e8 	.word	0x200047e8
 8005e38:	200040a8 	.word	0x200040a8
 8005e3c:	200065a0 	.word	0x200065a0
 8005e40:	20003f90 	.word	0x20003f90
 8005e44:	20006598 	.word	0x20006598
 8005e48:	20003e78 	.word	0x20003e78
 8005e4c:	20006590 	.word	0x20006590
 8005e50:	20003c8c 	.word	0x20003c8c
 8005e54:	20006580 	.word	0x20006580
 8005e58:	20003bb8 	.word	0x20003bb8
 8005e5c:	20006578 	.word	0x20006578
 8005e60:	20003b70 	.word	0x20003b70
 8005e64:	20006574 	.word	0x20006574
 8005e68:	200035b0 	.word	0x200035b0
 8005e6c:	20003584 	.word	0x20003584
 8005e70:	2000353c 	.word	0x2000353c
 8005e74:	20006570 	.word	0x20006570
 8005e78:	20003468 	.word	0x20003468
 8005e7c:	20006568 	.word	0x20006568
 8005e80:	200032c4 	.word	0x200032c4
 8005e84:	2000655c 	.word	0x2000655c
 8005e88:	20003238 	.word	0x20003238
 8005e8c:	20006558 	.word	0x20006558
 8005e90:	200031f0 	.word	0x200031f0
 8005e94:	20006554 	.word	0x20006554
 8005e98:	20002f34 	.word	0x20002f34
 8005e9c:	20002f20 	.word	0x20002f20
 8005ea0:	20002c64 	.word	0x20002c64
 8005ea4:	20002c50 	.word	0x20002c50
 8005ea8:	20002994 	.word	0x20002994
 8005eac:	20006540 	.word	0x20006540
 8005eb0:	200026d8 	.word	0x200026d8
 8005eb4:	2000652c 	.word	0x2000652c
 8005eb8:	2000241c 	.word	0x2000241c
 8005ebc:	20006518 	.word	0x20006518
 8005ec0:	20002160 	.word	0x20002160
 8005ec4:	20006504 	.word	0x20006504
 8005ec8:	20001e54 	.word	0x20001e54
 8005ecc:	200064f0 	.word	0x200064f0
 8005ed0:	20001dc8 	.word	0x20001dc8
 8005ed4:	200064ec 	.word	0x200064ec
 8005ed8:	20001b50 	.word	0x20001b50
 8005edc:	20001b3c 	.word	0x20001b3c
 8005ee0:	200018c4 	.word	0x200018c4
 8005ee4:	200064d8 	.word	0x200064d8
 8005ee8:	200017f0 	.word	0x200017f0
 8005eec:	200064d0 	.word	0x200064d0
 8005ef0:	20001118 	.word	0x20001118
 8005ef4:	200010e4 	.word	0x200010e4
            value = CHECK_VALUE(value, GW_BD_14Max[item]);
 8005ef8:	4b10      	ldr	r3, [pc, #64]	@ (8005f3c <SavePage0ItemValue+0x38c>)
 8005efa:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	db01      	blt.n	8005f06 <SavePage0ItemValue+0x356>
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b21a      	sxth	r2, r3
            g_GW_BD_14[item] = value;
 8005f06:	4b0e      	ldr	r3, [pc, #56]	@ (8005f40 <SavePage0ItemValue+0x390>)
 8005f08:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005f0c:	e680      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, GW_BD_24Max[item]);
 8005f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f44 <SavePage0ItemValue+0x394>)
 8005f10:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	db01      	blt.n	8005f1c <SavePage0ItemValue+0x36c>
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b21a      	sxth	r2, r3
            g_GW_BD_24[item] = value;
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f48 <SavePage0ItemValue+0x398>)
 8005f1e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005f22:	e675      	b.n	8005c10 <SavePage0ItemValue+0x60>
            value = CHECK_VALUE(value, GW_BD_29Max[item]);
 8005f24:	4b09      	ldr	r3, [pc, #36]	@ (8005f4c <SavePage0ItemValue+0x39c>)
 8005f26:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	db01      	blt.n	8005f32 <SavePage0ItemValue+0x382>
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	b21a      	sxth	r2, r3
            g_GW_BD_29[item] = value;
 8005f32:	4b07      	ldr	r3, [pc, #28]	@ (8005f50 <SavePage0ItemValue+0x3a0>)
 8005f34:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005f38:	e66a      	b.n	8005c10 <SavePage0ItemValue+0x60>
 8005f3a:	bf00      	nop
 8005f3c:	20000a98 	.word	0x20000a98
 8005f40:	20000a68 	.word	0x20000a68
 8005f44:	200007f0 	.word	0x200007f0
 8005f48:	200064bc 	.word	0x200064bc
 8005f4c:	200003d4 	.word	0x200003d4
 8005f50:	2000649c 	.word	0x2000649c

08005f54 <SavePage1ItemValue>:
	g_Page1menu_index = GET_MENU(menu, Page1_MENU_MAX);
 8005f54:	281d      	cmp	r0, #29
 8005f56:	d901      	bls.n	8005f5c <SavePage1ItemValue+0x8>
 8005f58:	381e      	subs	r0, #30
 8005f5a:	b2c0      	uxtb	r0, r0
 8005f5c:	4b93      	ldr	r3, [pc, #588]	@ (80061ac <SavePage1ItemValue+0x258>)
 8005f5e:	7018      	strb	r0, [r3, #0]
	switch (g_Page1menu_index)
 8005f60:	281d      	cmp	r0, #29
 8005f62:	d829      	bhi.n	8005fb8 <SavePage1ItemValue+0x64>
 8005f64:	e8df f010 	tbh	[pc, r0, lsl #1]
 8005f68:	002b001e 	.word	0x002b001e
 8005f6c:	00500036 	.word	0x00500036
 8005f70:	006c005b 	.word	0x006c005b
 8005f74:	00b3008d 	.word	0x00b3008d
 8005f78:	00c900be 	.word	0x00c900be
 8005f7c:	00df00d4 	.word	0x00df00d4
 8005f80:	00f500ea 	.word	0x00f500ea
 8005f84:	010b0100 	.word	0x010b0100
 8005f88:	016a0116 	.word	0x016a0116
 8005f8c:	01800175 	.word	0x01800175
 8005f90:	0196018b 	.word	0x0196018b
 8005f94:	01ac01a1 	.word	0x01ac01a1
 8005f98:	01c201b7 	.word	0x01c201b7
 8005f9c:	01d801cd 	.word	0x01d801cd
 8005fa0:	01ee01e3 	.word	0x01ee01e3
	        value = CHECK_VALUE(value, F1Max[item]);
 8005fa4:	4b82      	ldr	r3, [pc, #520]	@ (80061b0 <SavePage1ItemValue+0x25c>)
 8005fa6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	db01      	blt.n	8005fb2 <SavePage1ItemValue+0x5e>
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b21a      	sxth	r2, r3
	        g_F1[item] = value;
 8005fb2:	4b80      	ldr	r3, [pc, #512]	@ (80061b4 <SavePage1ItemValue+0x260>)
 8005fb4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    g_Page1item_index = item;
 8005fb8:	4b7f      	ldr	r3, [pc, #508]	@ (80061b8 <SavePage1ItemValue+0x264>)
 8005fba:	7019      	strb	r1, [r3, #0]
}
 8005fbc:	4770      	bx	lr
	        value = CHECK_VALUE(value, F2Max[item]);
 8005fbe:	4b7f      	ldr	r3, [pc, #508]	@ (80061bc <SavePage1ItemValue+0x268>)
 8005fc0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	db01      	blt.n	8005fcc <SavePage1ItemValue+0x78>
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b21a      	sxth	r2, r3
	        g_F2[item] = value;
 8005fcc:	4b7c      	ldr	r3, [pc, #496]	@ (80061c0 <SavePage1ItemValue+0x26c>)
 8005fce:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 8005fd2:	e7f1      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F3Max[item]);
 8005fd4:	4b7b      	ldr	r3, [pc, #492]	@ (80061c4 <SavePage1ItemValue+0x270>)
 8005fd6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	db01      	blt.n	8005fe2 <SavePage1ItemValue+0x8e>
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b21a      	sxth	r2, r3
	        g_F3[item] = value;
 8005fe2:	b292      	uxth	r2, r2
 8005fe4:	4b78      	ldr	r3, [pc, #480]	@ (80061c8 <SavePage1ItemValue+0x274>)
 8005fe6:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			if(item == F3_ABS_3_VehicleSpeed || item == F3_ABS_3_VehicleSpeedValid || item == F3_ABS_3_Timeout_Flag){
 8005fea:	2902      	cmp	r1, #2
 8005fec:	d803      	bhi.n	8005ff6 <SavePage1ItemValue+0xa2>
				g_F1[item] = g_F3[item];
 8005fee:	4b71      	ldr	r3, [pc, #452]	@ (80061b4 <SavePage1ItemValue+0x260>)
 8005ff0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8005ff4:	e7e0      	b.n	8005fb8 <SavePage1ItemValue+0x64>
			else if(item == F3_EMS_2_EngineSpeed || item == F3_EMS_2_EngineSpeedValid || item == F3_EMS_2_Timeout_Flag){
 8005ff6:	1ecb      	subs	r3, r1, #3
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d8dc      	bhi.n	8005fb8 <SavePage1ItemValue+0x64>
				g_F2[item - 3] = g_F3[item];
 8005ffe:	1ecb      	subs	r3, r1, #3
 8006000:	486f      	ldr	r0, [pc, #444]	@ (80061c0 <SavePage1ItemValue+0x26c>)
 8006002:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8006006:	e7d7      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F4Max[item]);
 8006008:	4b70      	ldr	r3, [pc, #448]	@ (80061cc <SavePage1ItemValue+0x278>)
 800600a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800600e:	429a      	cmp	r2, r3
 8006010:	db01      	blt.n	8006016 <SavePage1ItemValue+0xc2>
 8006012:	3b01      	subs	r3, #1
 8006014:	b21a      	sxth	r2, r3
	        g_F4[item] = value;
 8006016:	4b6e      	ldr	r3, [pc, #440]	@ (80061d0 <SavePage1ItemValue+0x27c>)
 8006018:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 800601c:	e7cc      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F5Max[item]);
 800601e:	4b6d      	ldr	r3, [pc, #436]	@ (80061d4 <SavePage1ItemValue+0x280>)
 8006020:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006024:	429a      	cmp	r2, r3
 8006026:	db01      	blt.n	800602c <SavePage1ItemValue+0xd8>
 8006028:	3b01      	subs	r3, #1
 800602a:	b21a      	sxth	r2, r3
	        g_F5[item] = value;
 800602c:	b292      	uxth	r2, r2
 800602e:	4b6a      	ldr	r3, [pc, #424]	@ (80061d8 <SavePage1ItemValue+0x284>)
 8006030:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			if(item == F5_ABS_3_VehicleSpeed || item == F5_ABS_3_VehicleSpeedValid || item == F5_ABS_3_Timeout_Flag){
 8006034:	2902      	cmp	r1, #2
 8006036:	d8bf      	bhi.n	8005fb8 <SavePage1ItemValue+0x64>
				g_F1[item] = g_F5[item];
 8006038:	4b5e      	ldr	r3, [pc, #376]	@ (80061b4 <SavePage1ItemValue+0x260>)
 800603a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 800603e:	e7bb      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F6Max[item]);
 8006040:	4b66      	ldr	r3, [pc, #408]	@ (80061dc <SavePage1ItemValue+0x288>)
 8006042:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006046:	429a      	cmp	r2, r3
 8006048:	db01      	blt.n	800604e <SavePage1ItemValue+0xfa>
 800604a:	3b01      	subs	r3, #1
 800604c:	b21a      	sxth	r2, r3
	        g_F6[item] = value;
 800604e:	b292      	uxth	r2, r2
 8006050:	4b63      	ldr	r3, [pc, #396]	@ (80061e0 <SavePage1ItemValue+0x28c>)
 8006052:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			if(item == F6_ABS_3_VehicleSpeed || item == F6_ABS_3_VehicleSpeedValid || item == F6_ABS_3_Timeout_Flag){
 8006056:	2902      	cmp	r1, #2
 8006058:	d803      	bhi.n	8006062 <SavePage1ItemValue+0x10e>
				g_F1[item] = g_F6[item];
 800605a:	4b56      	ldr	r3, [pc, #344]	@ (80061b4 <SavePage1ItemValue+0x260>)
 800605c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8006060:	e7aa      	b.n	8005fb8 <SavePage1ItemValue+0x64>
			else if(item == F6_EMS_2_EngineSpeed || item == F6_EMS_2_EngineSpeedValid || item == F6_EMS_2_Timeout_Flag){
 8006062:	1ecb      	subs	r3, r1, #3
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d804      	bhi.n	8006074 <SavePage1ItemValue+0x120>
				g_F2[item - 3] = g_F6[item];
 800606a:	1ecb      	subs	r3, r1, #3
 800606c:	4854      	ldr	r0, [pc, #336]	@ (80061c0 <SavePage1ItemValue+0x26c>)
 800606e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8006072:	e7a1      	b.n	8005fb8 <SavePage1ItemValue+0x64>
			else if(item == F6_EMS_4_Timeout_Flag){
 8006074:	2907      	cmp	r1, #7
 8006076:	d19f      	bne.n	8005fb8 <SavePage1ItemValue+0x64>
				g_F4[EMS_4_Timeout_Flag] = g_F6[F6_EMS_4_Timeout_Flag];
 8006078:	4b59      	ldr	r3, [pc, #356]	@ (80061e0 <SavePage1ItemValue+0x28c>)
 800607a:	89da      	ldrh	r2, [r3, #14]
 800607c:	4b54      	ldr	r3, [pc, #336]	@ (80061d0 <SavePage1ItemValue+0x27c>)
 800607e:	809a      	strh	r2, [r3, #4]
 8006080:	e79a      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F7Max[item]);
 8006082:	4b58      	ldr	r3, [pc, #352]	@ (80061e4 <SavePage1ItemValue+0x290>)
 8006084:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006088:	429a      	cmp	r2, r3
 800608a:	db01      	blt.n	8006090 <SavePage1ItemValue+0x13c>
 800608c:	3b01      	subs	r3, #1
 800608e:	b21a      	sxth	r2, r3
	        g_F7[item] = value;
 8006090:	b292      	uxth	r2, r2
 8006092:	4b55      	ldr	r3, [pc, #340]	@ (80061e8 <SavePage1ItemValue+0x294>)
 8006094:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8006098:	2907      	cmp	r1, #7
 800609a:	d88d      	bhi.n	8005fb8 <SavePage1ItemValue+0x64>
 800609c:	e8df f001 	tbb	[pc, r1]
 80060a0:	08040404 	.word	0x08040404
 80060a4:	0d120808 	.word	0x0d120808
				g_F1[item] = g_F7[item];
 80060a8:	4b42      	ldr	r3, [pc, #264]	@ (80061b4 <SavePage1ItemValue+0x260>)
 80060aa:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 80060ae:	e783      	b.n	8005fb8 <SavePage1ItemValue+0x64>
				g_F2[item - 3] = g_F7[item];
 80060b0:	1ecb      	subs	r3, r1, #3
 80060b2:	4843      	ldr	r0, [pc, #268]	@ (80061c0 <SavePage1ItemValue+0x26c>)
 80060b4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 80060b8:	e77e      	b.n	8005fb8 <SavePage1ItemValue+0x64>
				g_F4[EMS_4_Timeout_Flag] = g_F7[F7_EMS_4_Timeout_Flag];
 80060ba:	4b4b      	ldr	r3, [pc, #300]	@ (80061e8 <SavePage1ItemValue+0x294>)
 80060bc:	89da      	ldrh	r2, [r3, #14]
 80060be:	4b44      	ldr	r3, [pc, #272]	@ (80061d0 <SavePage1ItemValue+0x27c>)
 80060c0:	809a      	strh	r2, [r3, #4]
 80060c2:	e779      	b.n	8005fb8 <SavePage1ItemValue+0x64>
				g_F6[EMS_4_FuelConsumption] = g_F7[F7_EMS_4_FuelConsumption];
 80060c4:	4b48      	ldr	r3, [pc, #288]	@ (80061e8 <SavePage1ItemValue+0x294>)
 80060c6:	899a      	ldrh	r2, [r3, #12]
 80060c8:	4b45      	ldr	r3, [pc, #276]	@ (80061e0 <SavePage1ItemValue+0x28c>)
 80060ca:	819a      	strh	r2, [r3, #12]
 80060cc:	e774      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F8Max[item]);
 80060ce:	4b47      	ldr	r3, [pc, #284]	@ (80061ec <SavePage1ItemValue+0x298>)
 80060d0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	db01      	blt.n	80060dc <SavePage1ItemValue+0x188>
 80060d8:	3b01      	subs	r3, #1
 80060da:	b21a      	sxth	r2, r3
	        g_F8[item] = value;
 80060dc:	4b44      	ldr	r3, [pc, #272]	@ (80061f0 <SavePage1ItemValue+0x29c>)
 80060de:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 80060e2:	e769      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F9Max[item]);
 80060e4:	4b43      	ldr	r3, [pc, #268]	@ (80061f4 <SavePage1ItemValue+0x2a0>)
 80060e6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	db01      	blt.n	80060f2 <SavePage1ItemValue+0x19e>
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b21a      	sxth	r2, r3
	        g_F9[item] = value;
 80060f2:	4b41      	ldr	r3, [pc, #260]	@ (80061f8 <SavePage1ItemValue+0x2a4>)
 80060f4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 80060f8:	e75e      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F10Max[item]);
 80060fa:	4b40      	ldr	r3, [pc, #256]	@ (80061fc <SavePage1ItemValue+0x2a8>)
 80060fc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006100:	429a      	cmp	r2, r3
 8006102:	db01      	blt.n	8006108 <SavePage1ItemValue+0x1b4>
 8006104:	3b01      	subs	r3, #1
 8006106:	b21a      	sxth	r2, r3
	        g_F10[item] = value;
 8006108:	4b3d      	ldr	r3, [pc, #244]	@ (8006200 <SavePage1ItemValue+0x2ac>)
 800610a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 800610e:	e753      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F11Max[item]);
 8006110:	4b3c      	ldr	r3, [pc, #240]	@ (8006204 <SavePage1ItemValue+0x2b0>)
 8006112:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006116:	429a      	cmp	r2, r3
 8006118:	db01      	blt.n	800611e <SavePage1ItemValue+0x1ca>
 800611a:	3b01      	subs	r3, #1
 800611c:	b21a      	sxth	r2, r3
	        g_F11[item] = value;
 800611e:	4b3a      	ldr	r3, [pc, #232]	@ (8006208 <SavePage1ItemValue+0x2b4>)
 8006120:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 8006124:	e748      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F12Max[item]);
 8006126:	4b39      	ldr	r3, [pc, #228]	@ (800620c <SavePage1ItemValue+0x2b8>)
 8006128:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800612c:	429a      	cmp	r2, r3
 800612e:	db01      	blt.n	8006134 <SavePage1ItemValue+0x1e0>
 8006130:	3b01      	subs	r3, #1
 8006132:	b21a      	sxth	r2, r3
	        g_F12[item] = value;
 8006134:	4b36      	ldr	r3, [pc, #216]	@ (8006210 <SavePage1ItemValue+0x2bc>)
 8006136:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 800613a:	e73d      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F13Max[item]);
 800613c:	4b35      	ldr	r3, [pc, #212]	@ (8006214 <SavePage1ItemValue+0x2c0>)
 800613e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006142:	429a      	cmp	r2, r3
 8006144:	db01      	blt.n	800614a <SavePage1ItemValue+0x1f6>
 8006146:	3b01      	subs	r3, #1
 8006148:	b21a      	sxth	r2, r3
	        g_F13[item] = value;
 800614a:	4b33      	ldr	r3, [pc, #204]	@ (8006218 <SavePage1ItemValue+0x2c4>)
 800614c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 8006150:	e732      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F14Max[item]);
 8006152:	4b32      	ldr	r3, [pc, #200]	@ (800621c <SavePage1ItemValue+0x2c8>)
 8006154:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006158:	429a      	cmp	r2, r3
 800615a:	db01      	blt.n	8006160 <SavePage1ItemValue+0x20c>
 800615c:	3b01      	subs	r3, #1
 800615e:	b21a      	sxth	r2, r3
	        g_F14[item] = value;
 8006160:	4b2f      	ldr	r3, [pc, #188]	@ (8006220 <SavePage1ItemValue+0x2cc>)
 8006162:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 8006166:	e727      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F15Max[item]);
 8006168:	4b2e      	ldr	r3, [pc, #184]	@ (8006224 <SavePage1ItemValue+0x2d0>)
 800616a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800616e:	429a      	cmp	r2, r3
 8006170:	db01      	blt.n	8006176 <SavePage1ItemValue+0x222>
 8006172:	3b01      	subs	r3, #1
 8006174:	b21a      	sxth	r2, r3
	        g_F15[item] = value;
 8006176:	4b2c      	ldr	r3, [pc, #176]	@ (8006228 <SavePage1ItemValue+0x2d4>)
 8006178:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 800617c:	e71c      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F16Max[item]);
 800617e:	4b2b      	ldr	r3, [pc, #172]	@ (800622c <SavePage1ItemValue+0x2d8>)
 8006180:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006184:	429a      	cmp	r2, r3
 8006186:	db01      	blt.n	800618c <SavePage1ItemValue+0x238>
 8006188:	3b01      	subs	r3, #1
 800618a:	b21a      	sxth	r2, r3
	        g_F16[item] = value;
 800618c:	4b28      	ldr	r3, [pc, #160]	@ (8006230 <SavePage1ItemValue+0x2dc>)
 800618e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 8006192:	e711      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F17Max[item]);
 8006194:	4b27      	ldr	r3, [pc, #156]	@ (8006234 <SavePage1ItemValue+0x2e0>)
 8006196:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800619a:	429a      	cmp	r2, r3
 800619c:	db01      	blt.n	80061a2 <SavePage1ItemValue+0x24e>
 800619e:	3b01      	subs	r3, #1
 80061a0:	b21a      	sxth	r2, r3
	        g_F17[item] = value;
 80061a2:	4b25      	ldr	r3, [pc, #148]	@ (8006238 <SavePage1ItemValue+0x2e4>)
 80061a4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 80061a8:	e706      	b.n	8005fb8 <SavePage1ItemValue+0x64>
 80061aa:	bf00      	nop
 80061ac:	200047e7 	.word	0x200047e7
 80061b0:	200003c0 	.word	0x200003c0
 80061b4:	200063d4 	.word	0x200063d4
 80061b8:	200047e6 	.word	0x200047e6
 80061bc:	200003ac 	.word	0x200003ac
 80061c0:	2000630c 	.word	0x2000630c
 80061c4:	20000388 	.word	0x20000388
 80061c8:	20006180 	.word	0x20006180
 80061cc:	20000374 	.word	0x20000374
 80061d0:	2000036c 	.word	0x2000036c
 80061d4:	20000358 	.word	0x20000358
 80061d8:	20005ff8 	.word	0x20005ff8
 80061dc:	20000328 	.word	0x20000328
 80061e0:	20005de8 	.word	0x20005de8
 80061e4:	200002f8 	.word	0x200002f8
 80061e8:	20005bd8 	.word	0x20005bd8
 80061ec:	200002cc 	.word	0x200002cc
 80061f0:	20005a08 	.word	0x20005a08
 80061f4:	200002a0 	.word	0x200002a0
 80061f8:	20005838 	.word	0x20005838
 80061fc:	2000027c 	.word	0x2000027c
 8006200:	200056ac 	.word	0x200056ac
 8006204:	2000025c 	.word	0x2000025c
 8006208:	20005560 	.word	0x20005560
 800620c:	20000248 	.word	0x20000248
 8006210:	20005498 	.word	0x20005498
 8006214:	20000128 	.word	0x20000128
 8006218:	20004838 	.word	0x20004838
 800621c:	20000120 	.word	0x20000120
 8006220:	200047f4 	.word	0x200047f4
 8006224:	200047f4 	.word	0x200047f4
 8006228:	200047f4 	.word	0x200047f4
 800622c:	200047f4 	.word	0x200047f4
 8006230:	200047f4 	.word	0x200047f4
 8006234:	200047f4 	.word	0x200047f4
 8006238:	200047f4 	.word	0x200047f4
	        value = CHECK_VALUE(value, F18Max[item]);
 800623c:	4b47      	ldr	r3, [pc, #284]	@ (800635c <SavePage1ItemValue+0x408>)
 800623e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006242:	429a      	cmp	r2, r3
 8006244:	db01      	blt.n	800624a <SavePage1ItemValue+0x2f6>
 8006246:	3b01      	subs	r3, #1
 8006248:	b21a      	sxth	r2, r3
	        g_F18[item] = value;
 800624a:	4b45      	ldr	r3, [pc, #276]	@ (8006360 <SavePage1ItemValue+0x40c>)
 800624c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 8006250:	e6b2      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F19Max[item]);
 8006252:	4b44      	ldr	r3, [pc, #272]	@ (8006364 <SavePage1ItemValue+0x410>)
 8006254:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006258:	429a      	cmp	r2, r3
 800625a:	db01      	blt.n	8006260 <SavePage1ItemValue+0x30c>
 800625c:	3b01      	subs	r3, #1
 800625e:	b21a      	sxth	r2, r3
	        g_F19[item] = value;
 8006260:	4b41      	ldr	r3, [pc, #260]	@ (8006368 <SavePage1ItemValue+0x414>)
 8006262:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 8006266:	e6a7      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F20Max[item]);
 8006268:	4b40      	ldr	r3, [pc, #256]	@ (800636c <SavePage1ItemValue+0x418>)
 800626a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800626e:	429a      	cmp	r2, r3
 8006270:	db01      	blt.n	8006276 <SavePage1ItemValue+0x322>
 8006272:	3b01      	subs	r3, #1
 8006274:	b21a      	sxth	r2, r3
	        g_F20[item] = value;
 8006276:	4b3e      	ldr	r3, [pc, #248]	@ (8006370 <SavePage1ItemValue+0x41c>)
 8006278:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 800627c:	e69c      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F21Max[item]);
 800627e:	4b3d      	ldr	r3, [pc, #244]	@ (8006374 <SavePage1ItemValue+0x420>)
 8006280:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006284:	429a      	cmp	r2, r3
 8006286:	db01      	blt.n	800628c <SavePage1ItemValue+0x338>
 8006288:	3b01      	subs	r3, #1
 800628a:	b21a      	sxth	r2, r3
	        g_F21[item] = value;
 800628c:	4b3a      	ldr	r3, [pc, #232]	@ (8006378 <SavePage1ItemValue+0x424>)
 800628e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 8006292:	e691      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F22Max[item]);
 8006294:	4b39      	ldr	r3, [pc, #228]	@ (800637c <SavePage1ItemValue+0x428>)
 8006296:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800629a:	429a      	cmp	r2, r3
 800629c:	db01      	blt.n	80062a2 <SavePage1ItemValue+0x34e>
 800629e:	3b01      	subs	r3, #1
 80062a0:	b21a      	sxth	r2, r3
	        g_F22[item] = value;
 80062a2:	4b37      	ldr	r3, [pc, #220]	@ (8006380 <SavePage1ItemValue+0x42c>)
 80062a4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 80062a8:	e686      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F23Max[item]);
 80062aa:	4b36      	ldr	r3, [pc, #216]	@ (8006384 <SavePage1ItemValue+0x430>)
 80062ac:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	db01      	blt.n	80062b8 <SavePage1ItemValue+0x364>
 80062b4:	3b01      	subs	r3, #1
 80062b6:	b21a      	sxth	r2, r3
	        g_F23[item] = value;
 80062b8:	4b33      	ldr	r3, [pc, #204]	@ (8006388 <SavePage1ItemValue+0x434>)
 80062ba:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 80062be:	e67b      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F24Max[item]);
 80062c0:	4b32      	ldr	r3, [pc, #200]	@ (800638c <SavePage1ItemValue+0x438>)
 80062c2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	db01      	blt.n	80062ce <SavePage1ItemValue+0x37a>
 80062ca:	3b01      	subs	r3, #1
 80062cc:	b21a      	sxth	r2, r3
	        g_F24[item] = value;
 80062ce:	4b30      	ldr	r3, [pc, #192]	@ (8006390 <SavePage1ItemValue+0x43c>)
 80062d0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 80062d4:	e670      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F25Max[item]);
 80062d6:	4b2f      	ldr	r3, [pc, #188]	@ (8006394 <SavePage1ItemValue+0x440>)
 80062d8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80062dc:	429a      	cmp	r2, r3
 80062de:	db01      	blt.n	80062e4 <SavePage1ItemValue+0x390>
 80062e0:	3b01      	subs	r3, #1
 80062e2:	b21a      	sxth	r2, r3
	        g_F25[item] = value;
 80062e4:	4b2c      	ldr	r3, [pc, #176]	@ (8006398 <SavePage1ItemValue+0x444>)
 80062e6:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 80062ea:	e665      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F26Max[item]);
 80062ec:	4b2b      	ldr	r3, [pc, #172]	@ (800639c <SavePage1ItemValue+0x448>)
 80062ee:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	db01      	blt.n	80062fa <SavePage1ItemValue+0x3a6>
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b21a      	sxth	r2, r3
	        g_F26[item] = value;
 80062fa:	4b29      	ldr	r3, [pc, #164]	@ (80063a0 <SavePage1ItemValue+0x44c>)
 80062fc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 8006300:	e65a      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F27Max[item]);
 8006302:	4b28      	ldr	r3, [pc, #160]	@ (80063a4 <SavePage1ItemValue+0x450>)
 8006304:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006308:	429a      	cmp	r2, r3
 800630a:	db01      	blt.n	8006310 <SavePage1ItemValue+0x3bc>
 800630c:	3b01      	subs	r3, #1
 800630e:	b21a      	sxth	r2, r3
	        g_F27[item] = value;
 8006310:	4b25      	ldr	r3, [pc, #148]	@ (80063a8 <SavePage1ItemValue+0x454>)
 8006312:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 8006316:	e64f      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F28Max[item]);
 8006318:	4b24      	ldr	r3, [pc, #144]	@ (80063ac <SavePage1ItemValue+0x458>)
 800631a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800631e:	429a      	cmp	r2, r3
 8006320:	db01      	blt.n	8006326 <SavePage1ItemValue+0x3d2>
 8006322:	3b01      	subs	r3, #1
 8006324:	b21a      	sxth	r2, r3
	        g_F28[item] = value;
 8006326:	4b22      	ldr	r3, [pc, #136]	@ (80063b0 <SavePage1ItemValue+0x45c>)
 8006328:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 800632c:	e644      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F29Max[item]);
 800632e:	4b21      	ldr	r3, [pc, #132]	@ (80063b4 <SavePage1ItemValue+0x460>)
 8006330:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006334:	429a      	cmp	r2, r3
 8006336:	db01      	blt.n	800633c <SavePage1ItemValue+0x3e8>
 8006338:	3b01      	subs	r3, #1
 800633a:	b21a      	sxth	r2, r3
	        g_F29[item] = value;
 800633c:	4b1e      	ldr	r3, [pc, #120]	@ (80063b8 <SavePage1ItemValue+0x464>)
 800633e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 8006342:	e639      	b.n	8005fb8 <SavePage1ItemValue+0x64>
	        value = CHECK_VALUE(value, F30Max[item]);
 8006344:	4b1d      	ldr	r3, [pc, #116]	@ (80063bc <SavePage1ItemValue+0x468>)
 8006346:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800634a:	429a      	cmp	r2, r3
 800634c:	db01      	blt.n	8006352 <SavePage1ItemValue+0x3fe>
 800634e:	3b01      	subs	r3, #1
 8006350:	b21a      	sxth	r2, r3
	        g_F30[item] = value;
 8006352:	4b1b      	ldr	r3, [pc, #108]	@ (80063c0 <SavePage1ItemValue+0x46c>)
 8006354:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	        break;
 8006358:	e62e      	b.n	8005fb8 <SavePage1ItemValue+0x64>
 800635a:	bf00      	nop
 800635c:	200047f4 	.word	0x200047f4
 8006360:	200047f4 	.word	0x200047f4
 8006364:	200047f4 	.word	0x200047f4
 8006368:	200047f4 	.word	0x200047f4
 800636c:	200047f4 	.word	0x200047f4
 8006370:	200047f4 	.word	0x200047f4
 8006374:	200047f4 	.word	0x200047f4
 8006378:	200047f4 	.word	0x200047f4
 800637c:	200047f4 	.word	0x200047f4
 8006380:	200047f4 	.word	0x200047f4
 8006384:	200047f4 	.word	0x200047f4
 8006388:	200047f4 	.word	0x200047f4
 800638c:	200047f4 	.word	0x200047f4
 8006390:	200047f4 	.word	0x200047f4
 8006394:	200047f4 	.word	0x200047f4
 8006398:	200047f4 	.word	0x200047f4
 800639c:	200047f4 	.word	0x200047f4
 80063a0:	200047f4 	.word	0x200047f4
 80063a4:	200047f4 	.word	0x200047f4
 80063a8:	200047f4 	.word	0x200047f4
 80063ac:	200047f4 	.word	0x200047f4
 80063b0:	200047f4 	.word	0x200047f4
 80063b4:	200047f4 	.word	0x200047f4
 80063b8:	200047f4 	.word	0x200047f4
 80063bc:	200047f4 	.word	0x200047f4
 80063c0:	200047f4 	.word	0x200047f4

080063c4 <ItemValueLimit>:
}
 80063c4:	2000      	movs	r0, #0
 80063c6:	4770      	bx	lr

080063c8 <GetACU_1Value>:
    item = GET_MENU(item, ACU_1_ITEM_MAX);
 80063c8:	4603      	mov	r3, r0
 80063ca:	b108      	cbz	r0, 80063d0 <GetACU_1Value+0x8>
 80063cc:	1e43      	subs	r3, r0, #1
 80063ce:	b2db      	uxtb	r3, r3
    res = g_ACU_1[item];
 80063d0:	4a04      	ldr	r2, [pc, #16]	@ (80063e4 <GetACU_1Value+0x1c>)
 80063d2:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
    if(crash_flag != 0 && res == 0){
 80063d6:	4b04      	ldr	r3, [pc, #16]	@ (80063e8 <GetACU_1Value+0x20>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	b10b      	cbz	r3, 80063e0 <GetACU_1Value+0x18>
 80063dc:	b900      	cbnz	r0, 80063e0 <GetACU_1Value+0x18>
    	res = crash_flag;
 80063de:	4618      	mov	r0, r3
}
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	200065ac 	.word	0x200065ac
 80063e8:	200047f0 	.word	0x200047f0

080063ec <GetESP_2Value>:
{
 80063ec:	4603      	mov	r3, r0
    item = GET_MENU(item, ESP_2_ITEM_MAX);
 80063ee:	2805      	cmp	r0, #5
 80063f0:	d901      	bls.n	80063f6 <GetESP_2Value+0xa>
 80063f2:	1f83      	subs	r3, r0, #6
 80063f4:	b2db      	uxtb	r3, r3
    res = g_ESP_2[item];
 80063f6:	4a08      	ldr	r2, [pc, #32]	@ (8006418 <GetESP_2Value+0x2c>)
 80063f8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80063fc:	4610      	mov	r0, r2
    if(item == 0 || item == 1){
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d902      	bls.n	8006408 <GetESP_2Value+0x1c>
    else if(item == 2){
 8006402:	2b02      	cmp	r3, #2
 8006404:	d004      	beq.n	8006410 <GetESP_2Value+0x24>
}
 8006406:	4770      	bx	lr
    	res = g_ESP_2[item] * 100;
 8006408:	2064      	movs	r0, #100	@ 0x64
 800640a:	fb02 f000 	mul.w	r0, r2, r0
 800640e:	4770      	bx	lr
    	res = g_ESP_2[item] * 30;
 8006410:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8006414:	0050      	lsls	r0, r2, #1
    return res;
 8006416:	e7f6      	b.n	8006406 <GetESP_2Value+0x1a>
 8006418:	200065a0 	.word	0x200065a0
 800641c:	00000000 	.word	0x00000000

08006420 <GetABS_1Value>:
{
 8006420:	b508      	push	{r3, lr}
    item = GET_MENU(item, ABS_1_ITEM_MAX);
 8006422:	2803      	cmp	r0, #3
 8006424:	d901      	bls.n	800642a <GetABS_1Value+0xa>
 8006426:	3804      	subs	r0, #4
 8006428:	b2c0      	uxtb	r0, r0
    if(item == 0 || item == 2){
 800642a:	b128      	cbz	r0, 8006438 <GetABS_1Value+0x18>
 800642c:	2802      	cmp	r0, #2
 800642e:	d003      	beq.n	8006438 <GetABS_1Value+0x18>
        res = g_ABS_1[item];
 8006430:	4b0b      	ldr	r3, [pc, #44]	@ (8006460 <GetABS_1Value+0x40>)
 8006432:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    return res;
 8006436:	e00b      	b.n	8006450 <GetABS_1Value+0x30>
        res = g_ABS_1[item] / 0.005625;
 8006438:	4b09      	ldr	r3, [pc, #36]	@ (8006460 <GetABS_1Value+0x40>)
 800643a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800643e:	f7fa f851 	bl	80004e4 <__aeabi_i2d>
 8006442:	a305      	add	r3, pc, #20	@ (adr r3, 8006458 <GetABS_1Value+0x38>)
 8006444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006448:	f7fa f9e0 	bl	800080c <__aeabi_ddiv>
 800644c:	f7fa fb8c 	bl	8000b68 <__aeabi_d2uiz>
}
 8006450:	bd08      	pop	{r3, pc}
 8006452:	bf00      	nop
 8006454:	f3af 8000 	nop.w
 8006458:	70a3d70a 	.word	0x70a3d70a
 800645c:	3f770a3d 	.word	0x3f770a3d
 8006460:	20006598 	.word	0x20006598
 8006464:	00000000 	.word	0x00000000

08006468 <GetABS_2Value>:
{
 8006468:	b508      	push	{r3, lr}
    item = GET_MENU(item, ABS_2_ITEM_MAX);
 800646a:	2803      	cmp	r0, #3
 800646c:	d901      	bls.n	8006472 <GetABS_2Value+0xa>
 800646e:	3804      	subs	r0, #4
 8006470:	b2c0      	uxtb	r0, r0
    if(item == 0 || item == 2){
 8006472:	b128      	cbz	r0, 8006480 <GetABS_2Value+0x18>
 8006474:	2802      	cmp	r0, #2
 8006476:	d003      	beq.n	8006480 <GetABS_2Value+0x18>
        res = g_ABS_2[item];
 8006478:	4b0b      	ldr	r3, [pc, #44]	@ (80064a8 <GetABS_2Value+0x40>)
 800647a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    return res;
 800647e:	e00b      	b.n	8006498 <GetABS_2Value+0x30>
        res = g_ABS_2[item] / 0.005625;
 8006480:	4b09      	ldr	r3, [pc, #36]	@ (80064a8 <GetABS_2Value+0x40>)
 8006482:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006486:	f7fa f82d 	bl	80004e4 <__aeabi_i2d>
 800648a:	a305      	add	r3, pc, #20	@ (adr r3, 80064a0 <GetABS_2Value+0x38>)
 800648c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006490:	f7fa f9bc 	bl	800080c <__aeabi_ddiv>
 8006494:	f7fa fb68 	bl	8000b68 <__aeabi_d2uiz>
}
 8006498:	bd08      	pop	{r3, pc}
 800649a:	bf00      	nop
 800649c:	f3af 8000 	nop.w
 80064a0:	70a3d70a 	.word	0x70a3d70a
 80064a4:	3f770a3d 	.word	0x3f770a3d
 80064a8:	20006590 	.word	0x20006590

080064ac <GetBCM_1Value>:
    item = GET_MENU(item, BCM_1_ITEM_MAX);
 80064ac:	2802      	cmp	r0, #2
 80064ae:	d901      	bls.n	80064b4 <GetBCM_1Value+0x8>
 80064b0:	3803      	subs	r0, #3
 80064b2:	b2c0      	uxtb	r0, r0
}
 80064b4:	4b01      	ldr	r3, [pc, #4]	@ (80064bc <GetBCM_1Value+0x10>)
 80064b6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80064ba:	4770      	bx	lr
 80064bc:	20006578 	.word	0x20006578

080064c0 <GetBCM_3Value>:
{
 80064c0:	b508      	push	{r3, lr}
    item = GET_MENU(item, BCM_3_ITEM_MAX);
 80064c2:	b128      	cbz	r0, 80064d0 <GetBCM_3Value+0x10>
 80064c4:	1e43      	subs	r3, r0, #1
 80064c6:	b2db      	uxtb	r3, r3
    res = g_BCM_3[item];
 80064c8:	4a06      	ldr	r2, [pc, #24]	@ (80064e4 <GetBCM_3Value+0x24>)
 80064ca:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
	if(item == BCM_ConsoleBtn1TriggerSts){
 80064ce:	b933      	cbnz	r3, 80064de <GetBCM_3Value+0x1e>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==GPIO_PIN_RESET)
 80064d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80064d4:	4804      	ldr	r0, [pc, #16]	@ (80064e8 <GetBCM_3Value+0x28>)
 80064d6:	f003 fd89 	bl	8009fec <HAL_GPIO_ReadPin>
 80064da:	b908      	cbnz	r0, 80064e0 <GetBCM_3Value+0x20>
			res = 1;
 80064dc:	2001      	movs	r0, #1
}
 80064de:	bd08      	pop	{r3, pc}
			res = 0;
 80064e0:	2000      	movs	r0, #0
    return res;
 80064e2:	e7fc      	b.n	80064de <GetBCM_3Value+0x1e>
 80064e4:	20006574 	.word	0x20006574
 80064e8:	40011000 	.word	0x40011000

080064ec <GetBCM_4Value>:
{
 80064ec:	b508      	push	{r3, lr}
 80064ee:	4603      	mov	r3, r0
    item = GET_MENU(item, BCM_4_ITEM_MAX);
 80064f0:	2814      	cmp	r0, #20
 80064f2:	d902      	bls.n	80064fa <GetBCM_4Value+0xe>
 80064f4:	f1a0 0315 	sub.w	r3, r0, #21
 80064f8:	b2db      	uxtb	r3, r3
    res = g_BCM_4[item];
 80064fa:	4a07      	ldr	r2, [pc, #28]	@ (8006518 <GetBCM_4Value+0x2c>)
 80064fc:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
    if(item == BCM_AssistIlluminationSetSts){
 8006500:	2b0c      	cmp	r3, #12
 8006502:	d000      	beq.n	8006506 <GetBCM_4Value+0x1a>
}
 8006504:	bd08      	pop	{r3, pc}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_RESET)
 8006506:	2120      	movs	r1, #32
 8006508:	4804      	ldr	r0, [pc, #16]	@ (800651c <GetBCM_4Value+0x30>)
 800650a:	f003 fd6f 	bl	8009fec <HAL_GPIO_ReadPin>
 800650e:	b908      	cbnz	r0, 8006514 <GetBCM_4Value+0x28>
			res = 1;
 8006510:	2001      	movs	r0, #1
 8006512:	e7f7      	b.n	8006504 <GetBCM_4Value+0x18>
			res = 0;
 8006514:	2000      	movs	r0, #0
    return res;
 8006516:	e7f5      	b.n	8006504 <GetBCM_4Value+0x18>
 8006518:	20003584 	.word	0x20003584
 800651c:	40010c00 	.word	0x40010c00

08006520 <GetBCM_5Value>:
    item = GET_MENU(item, BCM_5_ITEM_MAX);
 8006520:	4603      	mov	r3, r0
 8006522:	b108      	cbz	r0, 8006528 <GetBCM_5Value+0x8>
 8006524:	1e43      	subs	r3, r0, #1
 8006526:	b2db      	uxtb	r3, r3
}
 8006528:	4a01      	ldr	r2, [pc, #4]	@ (8006530 <GetBCM_5Value+0x10>)
 800652a:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800652e:	4770      	bx	lr
 8006530:	20006570 	.word	0x20006570

08006534 <GetFCM_3Value>:
    item = GET_MENU(item, FCM_3_ITEM_MAX);
 8006534:	2809      	cmp	r0, #9
 8006536:	d901      	bls.n	800653c <GetFCM_3Value+0x8>
 8006538:	380a      	subs	r0, #10
 800653a:	b2c0      	uxtb	r0, r0
}
 800653c:	4b01      	ldr	r3, [pc, #4]	@ (8006544 <GetFCM_3Value+0x10>)
 800653e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006542:	4770      	bx	lr
 8006544:	20002f20 	.word	0x20002f20

08006548 <GetFCM_4Value>:
    item = GET_MENU(item, FCM_4_ITEM_MAX);
 8006548:	2809      	cmp	r0, #9
 800654a:	d901      	bls.n	8006550 <GetFCM_4Value+0x8>
 800654c:	380a      	subs	r0, #10
 800654e:	b2c0      	uxtb	r0, r0
}
 8006550:	4b01      	ldr	r3, [pc, #4]	@ (8006558 <GetFCM_4Value+0x10>)
 8006552:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006556:	4770      	bx	lr
 8006558:	20002c50 	.word	0x20002c50

0800655c <GetFCM_5Value>:
{
 800655c:	4603      	mov	r3, r0
    item = GET_MENU(item, FCM_5_ITEM_MAX);
 800655e:	2809      	cmp	r0, #9
 8006560:	d902      	bls.n	8006568 <GetFCM_5Value+0xc>
 8006562:	f1a0 030a 	sub.w	r3, r0, #10
 8006566:	b2db      	uxtb	r3, r3
    res = g_FCM_5[item];
 8006568:	4a0a      	ldr	r2, [pc, #40]	@ (8006594 <GetFCM_5Value+0x38>)
 800656a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800656e:	4610      	mov	r0, r2
 8006570:	3b03      	subs	r3, #3
 8006572:	2b06      	cmp	r3, #6
 8006574:	d80c      	bhi.n	8006590 <GetFCM_5Value+0x34>
 8006576:	e8df f003 	tbb	[pc, r3]
 800657a:	0804      	.short	0x0804
 800657c:	040b0b0b 	.word	0x040b0b0b
 8006580:	08          	.byte	0x08
 8006581:	00          	.byte	0x00
    	res = g_FCM_5[item] * 10;
 8006582:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006586:	0050      	lsls	r0, r2, #1
 8006588:	4770      	bx	lr
    	res = g_FCM_5[item] * 20;
 800658a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800658e:	0090      	lsls	r0, r2, #2
}
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	20006540 	.word	0x20006540

08006598 <GetFCM_6Value>:
{
 8006598:	4603      	mov	r3, r0
    item = GET_MENU(item, FCM_6_ITEM_MAX);
 800659a:	2809      	cmp	r0, #9
 800659c:	d902      	bls.n	80065a4 <GetFCM_6Value+0xc>
 800659e:	f1a0 030a 	sub.w	r3, r0, #10
 80065a2:	b2db      	uxtb	r3, r3
    res = g_FCM_6[item];
 80065a4:	4a0a      	ldr	r2, [pc, #40]	@ (80065d0 <GetFCM_6Value+0x38>)
 80065a6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80065aa:	4610      	mov	r0, r2
 80065ac:	3b03      	subs	r3, #3
 80065ae:	2b06      	cmp	r3, #6
 80065b0:	d80c      	bhi.n	80065cc <GetFCM_6Value+0x34>
 80065b2:	e8df f003 	tbb	[pc, r3]
 80065b6:	0804      	.short	0x0804
 80065b8:	040b0b0b 	.word	0x040b0b0b
 80065bc:	08          	.byte	0x08
 80065bd:	00          	.byte	0x00
    	res = g_FCM_6[item] * 10;
 80065be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80065c2:	0050      	lsls	r0, r2, #1
 80065c4:	4770      	bx	lr
    	res = g_FCM_6[item] * 20;
 80065c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80065ca:	0090      	lsls	r0, r2, #2
}
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	2000652c 	.word	0x2000652c

080065d4 <GetFCM_7Value>:
{
 80065d4:	4603      	mov	r3, r0
    item = GET_MENU(item, FCM_7_ITEM_MAX);
 80065d6:	2809      	cmp	r0, #9
 80065d8:	d902      	bls.n	80065e0 <GetFCM_7Value+0xc>
 80065da:	f1a0 030a 	sub.w	r3, r0, #10
 80065de:	b2db      	uxtb	r3, r3
    res = g_FCM_7[item];
 80065e0:	4a05      	ldr	r2, [pc, #20]	@ (80065f8 <GetFCM_7Value+0x24>)
 80065e2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80065e6:	4610      	mov	r0, r2
    if(item == FCM_ACCObjHozDstY || item == FCM_FrntFarObjHozDstY){
 80065e8:	2b05      	cmp	r3, #5
 80065ea:	d001      	beq.n	80065f0 <GetFCM_7Value+0x1c>
 80065ec:	2b09      	cmp	r3, #9
 80065ee:	d102      	bne.n	80065f6 <GetFCM_7Value+0x22>
    	res = g_FCM_7[item] * 100;
 80065f0:	2064      	movs	r0, #100	@ 0x64
 80065f2:	fb02 f000 	mul.w	r0, r2, r0
}
 80065f6:	4770      	bx	lr
 80065f8:	20006518 	.word	0x20006518

080065fc <GetFCM_8Value>:
{
 80065fc:	4603      	mov	r3, r0
    item = GET_MENU(item, FCM_8_ITEM_MAX);
 80065fe:	2809      	cmp	r0, #9
 8006600:	d902      	bls.n	8006608 <GetFCM_8Value+0xc>
 8006602:	f1a0 030a 	sub.w	r3, r0, #10
 8006606:	b2db      	uxtb	r3, r3
    res = g_FCM_8[item];
 8006608:	4a05      	ldr	r2, [pc, #20]	@ (8006620 <GetFCM_8Value+0x24>)
 800660a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800660e:	4610      	mov	r0, r2
    if((item == FCM_LeObjHozDstY || item == FCM_RiObjHozDstY)){
 8006610:	2b05      	cmp	r3, #5
 8006612:	d001      	beq.n	8006618 <GetFCM_8Value+0x1c>
 8006614:	2b09      	cmp	r3, #9
 8006616:	d102      	bne.n	800661e <GetFCM_8Value+0x22>
    	 res = g_FCM_8[item] * 100;
 8006618:	2064      	movs	r0, #100	@ 0x64
 800661a:	fb02 f000 	mul.w	r0, r2, r0
}
 800661e:	4770      	bx	lr
 8006620:	20006504 	.word	0x20006504

08006624 <GetGW_BD_14Value>:
{
 8006624:	4603      	mov	r3, r0
    item = GET_MENU(item, GW_BD_14_ITEM_MAX);
 8006626:	2816      	cmp	r0, #22
 8006628:	d902      	bls.n	8006630 <GetGW_BD_14Value+0xc>
 800662a:	f1a0 0317 	sub.w	r3, r0, #23
 800662e:	b2db      	uxtb	r3, r3
    res = g_GW_BD_14[item];
 8006630:	4a04      	ldr	r2, [pc, #16]	@ (8006644 <GetGW_BD_14Value+0x20>)
 8006632:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006636:	4610      	mov	r0, r2
    if((item == AC_2_OutsideTemperature)){
 8006638:	2b0b      	cmp	r3, #11
 800663a:	d000      	beq.n	800663e <GetGW_BD_14Value+0x1a>
}
 800663c:	4770      	bx	lr
        res = g_GW_BD_14[item] * 2;
 800663e:	0050      	lsls	r0, r2, #1
    return res;
 8006640:	e7fc      	b.n	800663c <GetGW_BD_14Value+0x18>
 8006642:	bf00      	nop
 8006644:	20000a68 	.word	0x20000a68

08006648 <GetGW_BD_24Value>:
{
 8006648:	4603      	mov	r3, r0
    item = GET_MENU(item, GW_BD_24_ITEM_MAX);
 800664a:	2808      	cmp	r0, #8
 800664c:	d902      	bls.n	8006654 <GetGW_BD_24Value+0xc>
 800664e:	f1a0 0309 	sub.w	r3, r0, #9
 8006652:	b2db      	uxtb	r3, r3
    res = g_GW_BD_24[item];
 8006654:	4a04      	ldr	r2, [pc, #16]	@ (8006668 <GetGW_BD_24Value+0x20>)
 8006656:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800665a:	4610      	mov	r0, r2
    if((item >= 4 && item <= 7)){
 800665c:	3b04      	subs	r3, #4
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b03      	cmp	r3, #3
 8006662:	d800      	bhi.n	8006666 <GetGW_BD_24Value+0x1e>
        res = g_GW_BD_24[item] * 4;
 8006664:	0090      	lsls	r0, r2, #2
}
 8006666:	4770      	bx	lr
 8006668:	200064bc 	.word	0x200064bc

0800666c <GetGW_BD_29Value>:
    item = GET_MENU(item, GW_BD_29_ITEM_MAX);
 800666c:	280e      	cmp	r0, #14
 800666e:	d901      	bls.n	8006674 <GetGW_BD_29Value+0x8>
 8006670:	380f      	subs	r0, #15
 8006672:	b2c0      	uxtb	r0, r0
}
 8006674:	4b01      	ldr	r3, [pc, #4]	@ (800667c <GetGW_BD_29Value+0x10>)
 8006676:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800667a:	4770      	bx	lr
 800667c:	2000649c 	.word	0x2000649c

08006680 <GetGW_BD_9Value>:
{
 8006680:	b508      	push	{r3, lr}
 8006682:	4603      	mov	r3, r0
    item = GET_MENU(item, GW_BD_9_ITEM_MAX);
 8006684:	2818      	cmp	r0, #24
 8006686:	d902      	bls.n	800668e <GetGW_BD_9Value+0xe>
 8006688:	f1a0 0319 	sub.w	r3, r0, #25
 800668c:	b2db      	uxtb	r3, r3
    res = g_GW_BD_9[item];
 800668e:	4a07      	ldr	r2, [pc, #28]	@ (80066ac <GetGW_BD_9Value+0x2c>)
 8006690:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
	if(item == BCM_1_FrontLeftDoorSts){
 8006694:	b103      	cbz	r3, 8006698 <GetGW_BD_9Value+0x18>
}
 8006696:	bd08      	pop	{r3, pc}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15)==GPIO_PIN_RESET)
 8006698:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800669c:	4804      	ldr	r0, [pc, #16]	@ (80066b0 <GetGW_BD_9Value+0x30>)
 800669e:	f003 fca5 	bl	8009fec <HAL_GPIO_ReadPin>
 80066a2:	b908      	cbnz	r0, 80066a8 <GetGW_BD_9Value+0x28>
			res = 1;
 80066a4:	2001      	movs	r0, #1
 80066a6:	e7f6      	b.n	8006696 <GetGW_BD_9Value+0x16>
			res = 0;
 80066a8:	2000      	movs	r0, #0
    return res;
 80066aa:	e7f4      	b.n	8006696 <GetGW_BD_9Value+0x16>
 80066ac:	200010e4 	.word	0x200010e4
 80066b0:	40010800 	.word	0x40010800

080066b4 <GetGW_PC_1Value>:
{
 80066b4:	b510      	push	{r4, lr}
    item = GET_MENU(item, GW_PC_1_ITEM_MAX);
 80066b6:	2809      	cmp	r0, #9
 80066b8:	d901      	bls.n	80066be <GetGW_PC_1Value+0xa>
 80066ba:	380a      	subs	r0, #10
 80066bc:	b2c0      	uxtb	r0, r0
    if(item == EMS_2_EngineSpeed){
 80066be:	2803      	cmp	r0, #3
 80066c0:	d005      	beq.n	80066ce <GetGW_PC_1Value+0x1a>
        res = g_GW_PC_1[item];
 80066c2:	4b0b      	ldr	r3, [pc, #44]	@ (80066f0 <GetGW_PC_1Value+0x3c>)
 80066c4:	f833 4010 	ldrh.w	r4, [r3, r0, lsl #1]
    if(item == TCU_1_GearShiftPosition){
 80066c8:	b148      	cbz	r0, 80066de <GetGW_PC_1Value+0x2a>
}
 80066ca:	4620      	mov	r0, r4
 80066cc:	bd10      	pop	{r4, pc}
        res = g_GW_PC_1[item] * 400;
 80066ce:	4b08      	ldr	r3, [pc, #32]	@ (80066f0 <GetGW_PC_1Value+0x3c>)
 80066d0:	f833 4010 	ldrh.w	r4, [r3, r0, lsl #1]
 80066d4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80066d8:	fb03 f404 	mul.w	r4, r3, r4
 80066dc:	e7f4      	b.n	80066c8 <GetGW_PC_1Value+0x14>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)==GPIO_PIN_RESET)
 80066de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80066e2:	4804      	ldr	r0, [pc, #16]	@ (80066f4 <GetGW_PC_1Value+0x40>)
 80066e4:	f003 fc82 	bl	8009fec <HAL_GPIO_ReadPin>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d1ee      	bne.n	80066ca <GetGW_PC_1Value+0x16>
			res = 1;
 80066ec:	2401      	movs	r4, #1
    return res;
 80066ee:	e7ec      	b.n	80066ca <GetGW_PC_1Value+0x16>
 80066f0:	200064f0 	.word	0x200064f0
 80066f4:	40010c00 	.word	0x40010c00

080066f8 <GetGW_PC_6Value>:
    item = GET_MENU(item, GW_PC_6_ITEM_MAX);
 80066f8:	2801      	cmp	r0, #1
 80066fa:	d901      	bls.n	8006700 <GetGW_PC_6Value+0x8>
 80066fc:	3802      	subs	r0, #2
 80066fe:	b2c0      	uxtb	r0, r0
}
 8006700:	4b01      	ldr	r3, [pc, #4]	@ (8006708 <GetGW_PC_6Value+0x10>)
 8006702:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006706:	4770      	bx	lr
 8006708:	200064ec 	.word	0x200064ec
 800670c:	00000000 	.word	0x00000000

08006710 <GetGW_PC_2Value>:
{
 8006710:	b508      	push	{r3, lr}
 8006712:	4603      	mov	r3, r0
    item = GET_MENU(item, GW_PC_2_ITEM_MAX);
 8006714:	2808      	cmp	r0, #8
 8006716:	d902      	bls.n	800671e <GetGW_PC_2Value+0xe>
 8006718:	f1a0 0309 	sub.w	r3, r0, #9
 800671c:	b2db      	uxtb	r3, r3
    res = g_GW_PC_2[item];
 800671e:	4a0e      	ldr	r2, [pc, #56]	@ (8006758 <GetGW_PC_2Value+0x48>)
 8006720:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006724:	4610      	mov	r0, r2
    if(item == ABS_3_VehicleSpeed){
 8006726:	b94b      	cbnz	r3, 800673c <GetGW_PC_2Value+0x2c>
        res = g_GW_PC_2[item] / 0.005625;
 8006728:	f7f9 fedc 	bl	80004e4 <__aeabi_i2d>
 800672c:	a308      	add	r3, pc, #32	@ (adr r3, 8006750 <GetGW_PC_2Value+0x40>)
 800672e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006732:	f7fa f86b 	bl	800080c <__aeabi_ddiv>
 8006736:	f7fa fa17 	bl	8000b68 <__aeabi_d2uiz>
}
 800673a:	bd08      	pop	{r3, pc}
    else if(item == SAS_1_SteeringAngle){
 800673c:	2b01      	cmp	r3, #1
 800673e:	d1fc      	bne.n	800673a <GetGW_PC_2Value+0x2a>
    	res = g_GW_PC_2[item] * 85;
 8006740:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006744:	eb02 1002 	add.w	r0, r2, r2, lsl #4
    return res;
 8006748:	e7f7      	b.n	800673a <GetGW_PC_2Value+0x2a>
 800674a:	bf00      	nop
 800674c:	f3af 8000 	nop.w
 8006750:	70a3d70a 	.word	0x70a3d70a
 8006754:	3f770a3d 	.word	0x3f770a3d
 8006758:	20001b3c 	.word	0x20001b3c

0800675c <GetGW_PC_7Value>:
    item = GET_MENU(item, GW_PC_7_ITEM_MAX);
 800675c:	2808      	cmp	r0, #8
 800675e:	d901      	bls.n	8006764 <GetGW_PC_7Value+0x8>
 8006760:	3809      	subs	r0, #9
 8006762:	b2c0      	uxtb	r0, r0
}
 8006764:	4b01      	ldr	r3, [pc, #4]	@ (800676c <GetGW_PC_7Value+0x10>)
 8006766:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800676a:	4770      	bx	lr
 800676c:	200064d8 	.word	0x200064d8

08006770 <GetGW_PC_4Value>:
    item = GET_MENU(item, GW_PC_4_ITEM_MAX);
 8006770:	2802      	cmp	r0, #2
 8006772:	d901      	bls.n	8006778 <GetGW_PC_4Value+0x8>
 8006774:	3803      	subs	r0, #3
 8006776:	b2c0      	uxtb	r0, r0
}
 8006778:	4b01      	ldr	r3, [pc, #4]	@ (8006780 <GetGW_PC_4Value+0x10>)
 800677a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800677e:	4770      	bx	lr
 8006780:	200064d0 	.word	0x200064d0

08006784 <GetPEPS_3Value>:
    item = GET_MENU(item, PEPS_3_ITEM_MAX);
 8006784:	2802      	cmp	r0, #2
 8006786:	d901      	bls.n	800678c <GetPEPS_3Value+0x8>
 8006788:	3803      	subs	r0, #3
 800678a:	b2c0      	uxtb	r0, r0
}
 800678c:	4b01      	ldr	r3, [pc, #4]	@ (8006794 <GetPEPS_3Value+0x10>)
 800678e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006792:	4770      	bx	lr
 8006794:	20006568 	.word	0x20006568

08006798 <GetTBOX_1Value>:
    item = GET_MENU(item, TBOX_1_ITEM_MAX);
 8006798:	2805      	cmp	r0, #5
 800679a:	d901      	bls.n	80067a0 <GetTBOX_1Value+0x8>
 800679c:	3806      	subs	r0, #6
 800679e:	b2c0      	uxtb	r0, r0
}
 80067a0:	4b01      	ldr	r3, [pc, #4]	@ (80067a8 <GetTBOX_1Value+0x10>)
 80067a2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80067a6:	4770      	bx	lr
 80067a8:	2000655c 	.word	0x2000655c

080067ac <GetTBOX_2Value>:
    item = GET_MENU(item, TBOX_2_ITEM_MAX);
 80067ac:	2801      	cmp	r0, #1
 80067ae:	d901      	bls.n	80067b4 <GetTBOX_2Value+0x8>
 80067b0:	3802      	subs	r0, #2
 80067b2:	b2c0      	uxtb	r0, r0
}
 80067b4:	4b01      	ldr	r3, [pc, #4]	@ (80067bc <GetTBOX_2Value+0x10>)
 80067b6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80067ba:	4770      	bx	lr
 80067bc:	20006558 	.word	0x20006558

080067c0 <GetTBOX_4Value>:
    item = GET_MENU(item, TBOX_4_ITEM_MAX);
 80067c0:	4603      	mov	r3, r0
 80067c2:	b108      	cbz	r0, 80067c8 <GetTBOX_4Value+0x8>
 80067c4:	1e43      	subs	r3, r0, #1
 80067c6:	b2db      	uxtb	r3, r3
}
 80067c8:	4a01      	ldr	r2, [pc, #4]	@ (80067d0 <GetTBOX_4Value+0x10>)
 80067ca:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80067ce:	4770      	bx	lr
 80067d0:	20006554 	.word	0x20006554

080067d4 <GetTPMS_1Value>:
    item = GET_MENU(item, TPMS_1_ITEM_MAX);
 80067d4:	2806      	cmp	r0, #6
 80067d6:	d901      	bls.n	80067dc <GetTPMS_1Value+0x8>
 80067d8:	3807      	subs	r0, #7
 80067da:	b2c0      	uxtb	r0, r0
    if(item == TPMS_TirePressure || item == TPMS_TireTemperature){
 80067dc:	2801      	cmp	r0, #1
 80067de:	d005      	beq.n	80067ec <GetTPMS_1Value+0x18>
 80067e0:	2806      	cmp	r0, #6
 80067e2:	d003      	beq.n	80067ec <GetTPMS_1Value+0x18>
    	res = g_TPMS_1[item];
 80067e4:	4b04      	ldr	r3, [pc, #16]	@ (80067f8 <GetTPMS_1Value+0x24>)
 80067e6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 80067ea:	4770      	bx	lr
        res = g_TPMS_1[item] * 15;
 80067ec:	4b02      	ldr	r3, [pc, #8]	@ (80067f8 <GetTPMS_1Value+0x24>)
 80067ee:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80067f2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80067f6:	4770      	bx	lr
 80067f8:	20006580 	.word	0x20006580
 80067fc:	00000000 	.word	0x00000000

08006800 <GetF1Value>:
{
 8006800:	b508      	push	{r3, lr}
    item = GET_MENU(item, F1_ITEM_MAX);
 8006802:	2802      	cmp	r0, #2
 8006804:	d901      	bls.n	800680a <GetF1Value+0xa>
 8006806:	3803      	subs	r0, #3
 8006808:	b2c0      	uxtb	r0, r0
    if(item == F1_ABS_3_VehicleSpeed){
 800680a:	b960      	cbnz	r0, 8006826 <GetF1Value+0x26>
        res = g_F1[item] / 0.05625;
 800680c:	4b0a      	ldr	r3, [pc, #40]	@ (8006838 <GetF1Value+0x38>)
 800680e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006812:	f7f9 fe67 	bl	80004e4 <__aeabi_i2d>
 8006816:	a306      	add	r3, pc, #24	@ (adr r3, 8006830 <GetF1Value+0x30>)
 8006818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681c:	f7f9 fff6 	bl	800080c <__aeabi_ddiv>
 8006820:	f7fa f9a2 	bl	8000b68 <__aeabi_d2uiz>
}
 8006824:	bd08      	pop	{r3, pc}
        res = g_F1[item];
 8006826:	4b04      	ldr	r3, [pc, #16]	@ (8006838 <GetF1Value+0x38>)
 8006828:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    return res;
 800682c:	e7fa      	b.n	8006824 <GetF1Value+0x24>
 800682e:	bf00      	nop
 8006830:	cccccccd 	.word	0xcccccccd
 8006834:	3faccccc 	.word	0x3faccccc
 8006838:	200063d4 	.word	0x200063d4

0800683c <GetF2Value>:
    item = GET_MENU(item, F2_ITEM_MAX);
 800683c:	2802      	cmp	r0, #2
 800683e:	d903      	bls.n	8006848 <GetF2Value+0xc>
 8006840:	3803      	subs	r0, #3
 8006842:	b2c0      	uxtb	r0, r0
    if(item == EMS_2_EngineSpeed){
 8006844:	2803      	cmp	r0, #3
 8006846:	d003      	beq.n	8006850 <GetF2Value+0x14>
        res = g_F2[item];
 8006848:	4b05      	ldr	r3, [pc, #20]	@ (8006860 <GetF2Value+0x24>)
 800684a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 800684e:	4770      	bx	lr
        res = g_F2[item] * 400;
 8006850:	4b03      	ldr	r3, [pc, #12]	@ (8006860 <GetF2Value+0x24>)
 8006852:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006856:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800685a:	fb03 f000 	mul.w	r0, r3, r0
 800685e:	4770      	bx	lr
 8006860:	2000630c 	.word	0x2000630c

08006864 <GetF4Value>:
    item = GET_MENU(item, F4_ITEM_MAX);
 8006864:	2802      	cmp	r0, #2
 8006866:	d901      	bls.n	800686c <GetF4Value+0x8>
 8006868:	3803      	subs	r0, #3
 800686a:	b2c0      	uxtb	r0, r0
    if(item == EMS_4_EngineCoolantTemp){
 800686c:	b920      	cbnz	r0, 8006878 <GetF4Value+0x14>
        res = g_F4[item] * 2;
 800686e:	4b04      	ldr	r3, [pc, #16]	@ (8006880 <GetF4Value+0x1c>)
 8006870:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006874:	0040      	lsls	r0, r0, #1
 8006876:	4770      	bx	lr
        res = g_F4[item];
 8006878:	4b01      	ldr	r3, [pc, #4]	@ (8006880 <GetF4Value+0x1c>)
 800687a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 800687e:	4770      	bx	lr
 8006880:	2000036c 	.word	0x2000036c

08006884 <GetF6Value>:
    item = GET_MENU(item, F6_ITEM_MAX);
 8006884:	2807      	cmp	r0, #7
 8006886:	d901      	bls.n	800688c <GetF6Value+0x8>
 8006888:	3808      	subs	r0, #8
 800688a:	b2c0      	uxtb	r0, r0
    if(item == EMS_4_FuelConsumption){
 800688c:	2806      	cmp	r0, #6
 800688e:	d003      	beq.n	8006898 <GetF6Value+0x14>
        res = g_F6[item];
 8006890:	4b04      	ldr	r3, [pc, #16]	@ (80068a4 <GetF6Value+0x20>)
 8006892:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 8006896:	4770      	bx	lr
        res = g_F6[item] * 5;
 8006898:	4b02      	ldr	r3, [pc, #8]	@ (80068a4 <GetF6Value+0x20>)
 800689a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800689e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80068a2:	4770      	bx	lr
 80068a4:	20005de8 	.word	0x20005de8

080068a8 <GetF8Value>:
    item = GET_MENU(item, F8_ITEM_MAX);
 80068a8:	2806      	cmp	r0, #6
 80068aa:	d901      	bls.n	80068b0 <GetF8Value+0x8>
 80068ac:	3807      	subs	r0, #7
 80068ae:	b2c0      	uxtb	r0, r0
    if(item == F8_TPMS_TirePressure){
 80068b0:	2806      	cmp	r0, #6
 80068b2:	d003      	beq.n	80068bc <GetF8Value+0x14>
    	res = g_F8[item];
 80068b4:	4b04      	ldr	r3, [pc, #16]	@ (80068c8 <GetF8Value+0x20>)
 80068b6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 80068ba:	4770      	bx	lr
        res = g_F8[item] * 15;
 80068bc:	4b02      	ldr	r3, [pc, #8]	@ (80068c8 <GetF8Value+0x20>)
 80068be:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80068c2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80068c6:	4770      	bx	lr
 80068c8:	20005a08 	.word	0x20005a08

080068cc <GetF9Value>:
    item = GET_MENU(item, F9_ITEM_MAX);
 80068cc:	2806      	cmp	r0, #6
 80068ce:	d901      	bls.n	80068d4 <GetF9Value+0x8>
 80068d0:	3807      	subs	r0, #7
 80068d2:	b2c0      	uxtb	r0, r0
}
 80068d4:	4b01      	ldr	r3, [pc, #4]	@ (80068dc <GetF9Value+0x10>)
 80068d6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80068da:	4770      	bx	lr
 80068dc:	20005838 	.word	0x20005838

080068e0 <GetF10Value>:
    item = GET_MENU(item, F10_ITEM_MAX);
 80068e0:	2805      	cmp	r0, #5
 80068e2:	d901      	bls.n	80068e8 <GetF10Value+0x8>
 80068e4:	3806      	subs	r0, #6
 80068e6:	b2c0      	uxtb	r0, r0
}
 80068e8:	4b01      	ldr	r3, [pc, #4]	@ (80068f0 <GetF10Value+0x10>)
 80068ea:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80068ee:	4770      	bx	lr
 80068f0:	200056ac 	.word	0x200056ac

080068f4 <GetF11Value>:
    item = GET_MENU(item, F11_ITEM_MAX);
 80068f4:	2804      	cmp	r0, #4
 80068f6:	d901      	bls.n	80068fc <GetF11Value+0x8>
 80068f8:	3805      	subs	r0, #5
 80068fa:	b2c0      	uxtb	r0, r0
}
 80068fc:	4b01      	ldr	r3, [pc, #4]	@ (8006904 <GetF11Value+0x10>)
 80068fe:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006902:	4770      	bx	lr
 8006904:	20005560 	.word	0x20005560

08006908 <GetF12Value>:
    item = GET_MENU(item, F12_ITEM_MAX);
 8006908:	2802      	cmp	r0, #2
 800690a:	d901      	bls.n	8006910 <GetF12Value+0x8>
 800690c:	3803      	subs	r0, #3
 800690e:	b2c0      	uxtb	r0, r0
}
 8006910:	4b01      	ldr	r3, [pc, #4]	@ (8006918 <GetF12Value+0x10>)
 8006912:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006916:	4770      	bx	lr
 8006918:	20005498 	.word	0x20005498

0800691c <GetF13Value>:
    item = GET_MENU(item, F13_ITEM_MAX);
 800691c:	282f      	cmp	r0, #47	@ 0x2f
 800691e:	d901      	bls.n	8006924 <GetF13Value+0x8>
 8006920:	3830      	subs	r0, #48	@ 0x30
 8006922:	b2c0      	uxtb	r0, r0
}
 8006924:	4b01      	ldr	r3, [pc, #4]	@ (800692c <GetF13Value+0x10>)
 8006926:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800692a:	4770      	bx	lr
 800692c:	20004838 	.word	0x20004838

08006930 <LCD_ACU_1_item_Judge>:
	if(*m_value == 1 || *m_value == 2 || *m_value == 4 || *m_value == 8 || *m_value == 16){
 8006930:	680b      	ldr	r3, [r1, #0]
 8006932:	2b10      	cmp	r3, #16
 8006934:	d806      	bhi.n	8006944 <LCD_ACU_1_item_Judge+0x14>
 8006936:	4812      	ldr	r0, [pc, #72]	@ (8006980 <LCD_ACU_1_item_Judge+0x50>)
 8006938:	40d8      	lsrs	r0, r3
 800693a:	f010 0f01 	tst.w	r0, #1
 800693e:	d001      	beq.n	8006944 <LCD_ACU_1_item_Judge+0x14>
		crash_flag = *m_value;
 8006940:	4810      	ldr	r0, [pc, #64]	@ (8006984 <LCD_ACU_1_item_Judge+0x54>)
 8006942:	6003      	str	r3, [r0, #0]
 8006944:	2b10      	cmp	r3, #16
 8006946:	d818      	bhi.n	800697a <LCD_ACU_1_item_Judge+0x4a>
 8006948:	e8df f003 	tbb	[pc, r3]
 800694c:	17090909 	.word	0x17090909
 8006950:	1717170e 	.word	0x1717170e
 8006954:	17171711 	.word	0x17171711
 8006958:	17171717 	.word	0x17171717
 800695c:	14          	.byte	0x14
 800695d:	00          	.byte	0x00
		if(crash_flag != 0){
 800695e:	4b09      	ldr	r3, [pc, #36]	@ (8006984 <LCD_ACU_1_item_Judge+0x54>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	b163      	cbz	r3, 800697e <LCD_ACU_1_item_Judge+0x4e>
			*m_value = crash_flag;
 8006964:	600b      	str	r3, [r1, #0]
 8006966:	4770      	bx	lr
		*m_value = 3;
 8006968:	2303      	movs	r3, #3
 800696a:	600b      	str	r3, [r1, #0]
 800696c:	4770      	bx	lr
		*m_value = 4;
 800696e:	2304      	movs	r3, #4
 8006970:	600b      	str	r3, [r1, #0]
 8006972:	4770      	bx	lr
		*m_value = 5;
 8006974:	2305      	movs	r3, #5
 8006976:	600b      	str	r3, [r1, #0]
 8006978:	4770      	bx	lr
		*flag = 1;
 800697a:	2301      	movs	r3, #1
 800697c:	7013      	strb	r3, [r2, #0]
}
 800697e:	4770      	bx	lr
 8006980:	00010116 	.word	0x00010116
 8006984:	200047f0 	.word	0x200047f0

08006988 <LCD_ACU_1_item>:
{
 8006988:	b530      	push	{r4, r5, lr}
 800698a:	b083      	sub	sp, #12
    item = GET_MENU(item, ACU_1_ITEM_MAX);
 800698c:	4604      	mov	r4, r0
 800698e:	b108      	cbz	r0, 8006994 <LCD_ACU_1_item+0xc>
 8006990:	1e44      	subs	r4, r0, #1
 8006992:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8006994:	2083      	movs	r0, #131	@ 0x83
 8006996:	f7fc f9bd 	bl	8002d14 <write_com>
    hzkdis(ACU_1Item[item]);
 800699a:	4625      	mov	r5, r4
 800699c:	4b2e      	ldr	r3, [pc, #184]	@ (8006a58 <LCD_ACU_1_item+0xd0>)
 800699e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80069a2:	f7fc f9e7 	bl	8002d74 <hzkdis>
    write_com(0x93);
 80069a6:	2093      	movs	r0, #147	@ 0x93
 80069a8:	f7fc f9b4 	bl	8002d14 <write_com>
    uint32_t m_value = g_ACU_1[item];
 80069ac:	4b2b      	ldr	r3, [pc, #172]	@ (8006a5c <LCD_ACU_1_item+0xd4>)
 80069ae:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80069b2:	9301      	str	r3, [sp, #4]
    uint8_t flag = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_ACU_1_item_Judge(item, &m_value, &flag);
 80069ba:	f10d 0203 	add.w	r2, sp, #3
 80069be:	a901      	add	r1, sp, #4
 80069c0:	4620      	mov	r0, r4
 80069c2:	f7ff ffb5 	bl	8006930 <LCD_ACU_1_item_Judge>
    if (flag == 0) {
 80069c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d135      	bne.n	8006a3a <LCD_ACU_1_item+0xb2>
        hzkdis(ACU_1Value[item][m_value]);
 80069ce:	9b01      	ldr	r3, [sp, #4]
 80069d0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80069d4:	4a22      	ldr	r2, [pc, #136]	@ (8006a60 <LCD_ACU_1_item+0xd8>)
 80069d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80069da:	f7fc f9cb 	bl	8002d74 <hzkdis>
    write_com(0x8b);
 80069de:	208b      	movs	r0, #139	@ 0x8b
 80069e0:	f7fc f998 	bl	8002d14 <write_com>
    hzkdis(ACU_1Item[item]);
 80069e4:	4b1c      	ldr	r3, [pc, #112]	@ (8006a58 <LCD_ACU_1_item+0xd0>)
 80069e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069ea:	f7fc f9c3 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 80069ee:	209b      	movs	r0, #155	@ 0x9b
 80069f0:	f7fc f990 	bl	8002d14 <write_com>
    m_value = g_ACU_1[item];
 80069f4:	4b19      	ldr	r3, [pc, #100]	@ (8006a5c <LCD_ACU_1_item+0xd4>)
 80069f6:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 80069fa:	9301      	str	r3, [sp, #4]
    flag = 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_ACU_1_item_Judge(item, &m_value, &flag);
 8006a02:	f10d 0203 	add.w	r2, sp, #3
 8006a06:	a901      	add	r1, sp, #4
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f7ff ff91 	bl	8006930 <LCD_ACU_1_item_Judge>
	if (flag == 0) {
 8006a0e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006a12:	b9b3      	cbnz	r3, 8006a42 <LCD_ACU_1_item+0xba>
		hzkdis(ACU_1Value[item][m_value]);
 8006a14:	9b01      	ldr	r3, [sp, #4]
 8006a16:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 8006a1a:	4a11      	ldr	r2, [pc, #68]	@ (8006a60 <LCD_ACU_1_item+0xd8>)
 8006a1c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006a20:	f7fc f9a8 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8006a24:	2093      	movs	r0, #147	@ 0x93
 8006a26:	f7fc f975 	bl	8002d14 <write_com>
    if(crash_flag != 0 && first_crash_flag == 0){
 8006a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8006a64 <LCD_ACU_1_item+0xdc>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	b113      	cbz	r3, 8006a36 <LCD_ACU_1_item+0xae>
 8006a30:	4b0d      	ldr	r3, [pc, #52]	@ (8006a68 <LCD_ACU_1_item+0xe0>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	b14b      	cbz	r3, 8006a4a <LCD_ACU_1_item+0xc2>
}
 8006a36:	b003      	add	sp, #12
 8006a38:	bd30      	pop	{r4, r5, pc}
        LCD_ShowNum(m_value);
 8006a3a:	9801      	ldr	r0, [sp, #4]
 8006a3c:	f7fc fa90 	bl	8002f60 <LCD_ShowNum>
 8006a40:	e7cd      	b.n	80069de <LCD_ACU_1_item+0x56>
		LCD_ShowNum(m_value);
 8006a42:	9801      	ldr	r0, [sp, #4]
 8006a44:	f7fc fa8c 	bl	8002f60 <LCD_ShowNum>
 8006a48:	e7ec      	b.n	8006a24 <LCD_ACU_1_item+0x9c>
    	CanIl_SendEventMsg(ACU_1);
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	f005 fd84 	bl	800c558 <CanIl_SendEventMsg>
    	first_crash_flag = 1;
 8006a50:	4b05      	ldr	r3, [pc, #20]	@ (8006a68 <LCD_ACU_1_item+0xe0>)
 8006a52:	2201      	movs	r2, #1
 8006a54:	701a      	strb	r2, [r3, #0]
}
 8006a56:	e7ee      	b.n	8006a36 <LCD_ACU_1_item+0xae>
 8006a58:	20004290 	.word	0x20004290
 8006a5c:	200065ac 	.word	0x200065ac
 8006a60:	20004250 	.word	0x20004250
 8006a64:	200047f0 	.word	0x200047f0
 8006a68:	200047ec 	.word	0x200047ec

08006a6c <LCD_TPMS_1_item_Judge>:
	if(item == 1 || item == 6){
 8006a6c:	2801      	cmp	r0, #1
 8006a6e:	d002      	beq.n	8006a76 <LCD_TPMS_1_item_Judge+0xa>
 8006a70:	2806      	cmp	r0, #6
 8006a72:	d000      	beq.n	8006a76 <LCD_TPMS_1_item_Judge+0xa>
}
 8006a74:	4770      	bx	lr
		if(*m_value == 0xFF){
 8006a76:	680b      	ldr	r3, [r1, #0]
 8006a78:	2bff      	cmp	r3, #255	@ 0xff
 8006a7a:	d1fb      	bne.n	8006a74 <LCD_TPMS_1_item_Judge+0x8>
			*m_value = 0;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	600b      	str	r3, [r1, #0]
}
 8006a80:	e7f8      	b.n	8006a74 <LCD_TPMS_1_item_Judge+0x8>
 8006a82:	0000      	movs	r0, r0
 8006a84:	0000      	movs	r0, r0
	...

08006a88 <LCD_TPMS_1_item>:
{
 8006a88:	b530      	push	{r4, r5, lr}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	4604      	mov	r4, r0
    item = GET_MENU(item, TPMS_1_ITEM_MAX);
 8006a8e:	2806      	cmp	r0, #6
 8006a90:	d901      	bls.n	8006a96 <LCD_TPMS_1_item+0xe>
 8006a92:	1fc4      	subs	r4, r0, #7
 8006a94:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8006a96:	2083      	movs	r0, #131	@ 0x83
 8006a98:	f7fc f93c 	bl	8002d14 <write_com>
    hzkdis(TPMS_1Item[item]);
 8006a9c:	4b50      	ldr	r3, [pc, #320]	@ (8006be0 <LCD_TPMS_1_item+0x158>)
 8006a9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006aa2:	f7fc f967 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8006aa6:	2093      	movs	r0, #147	@ 0x93
 8006aa8:	f7fc f934 	bl	8002d14 <write_com>
    uint32_t m_value = g_TPMS_1[item];
 8006aac:	4b4d      	ldr	r3, [pc, #308]	@ (8006be4 <LCD_TPMS_1_item+0x15c>)
 8006aae:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8006ab2:	9301      	str	r3, [sp, #4]
    uint8_t flag = 0;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_TPMS_1_item_Judge(item, &m_value, &flag);
 8006aba:	f10d 0203 	add.w	r2, sp, #3
 8006abe:	a901      	add	r1, sp, #4
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f7ff ffd3 	bl	8006a6c <LCD_TPMS_1_item_Judge>
    if (flag == 0) {
 8006ac6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d15a      	bne.n	8006b84 <LCD_TPMS_1_item+0xfc>
        if(item == TPMS_TirePressure){
 8006ace:	2c01      	cmp	r4, #1
 8006ad0:	d03e      	beq.n	8006b50 <LCD_TPMS_1_item+0xc8>
        else if(item == TPMS_TireTemperature){
 8006ad2:	2c06      	cmp	r4, #6
 8006ad4:	d04f      	beq.n	8006b76 <LCD_TPMS_1_item+0xee>
        	hzkdis(TPMS_1Value[item][g_TPMS_1[item]]);
 8006ad6:	4b43      	ldr	r3, [pc, #268]	@ (8006be4 <LCD_TPMS_1_item+0x15c>)
 8006ad8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8006adc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8006ae0:	4a41      	ldr	r2, [pc, #260]	@ (8006be8 <LCD_TPMS_1_item+0x160>)
 8006ae2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006ae6:	f7fc f945 	bl	8002d74 <hzkdis>
    item = GET_MENU(item+1, TPMS_1_ITEM_MAX);
 8006aea:	2c05      	cmp	r4, #5
 8006aec:	d950      	bls.n	8006b90 <LCD_TPMS_1_item+0x108>
 8006aee:	3c06      	subs	r4, #6
 8006af0:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8006af2:	208b      	movs	r0, #139	@ 0x8b
 8006af4:	f7fc f90e 	bl	8002d14 <write_com>
    hzkdis(TPMS_1Item[item]);
 8006af8:	4b39      	ldr	r3, [pc, #228]	@ (8006be0 <LCD_TPMS_1_item+0x158>)
 8006afa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006afe:	f7fc f939 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8006b02:	209b      	movs	r0, #155	@ 0x9b
 8006b04:	f7fc f906 	bl	8002d14 <write_com>
    m_value = g_TPMS_1[item];
 8006b08:	4b36      	ldr	r3, [pc, #216]	@ (8006be4 <LCD_TPMS_1_item+0x15c>)
 8006b0a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8006b0e:	9301      	str	r3, [sp, #4]
    flag = 0;
 8006b10:	2300      	movs	r3, #0
 8006b12:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_TPMS_1_item_Judge(item, &m_value, &flag);
 8006b16:	f10d 0203 	add.w	r2, sp, #3
 8006b1a:	a901      	add	r1, sp, #4
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f7ff ffa5 	bl	8006a6c <LCD_TPMS_1_item_Judge>
    if (flag == 0) {
 8006b22:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d14f      	bne.n	8006bca <LCD_TPMS_1_item+0x142>
        if(item == TPMS_TirePressure){
 8006b2a:	2c01      	cmp	r4, #1
 8006b2c:	d033      	beq.n	8006b96 <LCD_TPMS_1_item+0x10e>
        else if(item == TPMS_TireTemperature){
 8006b2e:	2c06      	cmp	r4, #6
 8006b30:	d044      	beq.n	8006bbc <LCD_TPMS_1_item+0x134>
        	hzkdis(TPMS_1Value[item][g_TPMS_1[item]]);
 8006b32:	4b2c      	ldr	r3, [pc, #176]	@ (8006be4 <LCD_TPMS_1_item+0x15c>)
 8006b34:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8006b38:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8006b3c:	4a2a      	ldr	r2, [pc, #168]	@ (8006be8 <LCD_TPMS_1_item+0x160>)
 8006b3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006b42:	f7fc f917 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8006b46:	2093      	movs	r0, #147	@ 0x93
 8006b48:	f7fc f8e4 	bl	8002d14 <write_com>
}
 8006b4c:	b003      	add	sp, #12
 8006b4e:	bd30      	pop	{r4, r5, pc}
        	int32_t tmp = (m_value * 15  * 2.745) * 100;
 8006b50:	9801      	ldr	r0, [sp, #4]
 8006b52:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8006b56:	f7f9 fcb5 	bl	80004c4 <__aeabi_ui2d>
 8006b5a:	a31f      	add	r3, pc, #124	@ (adr r3, 8006bd8 <LCD_TPMS_1_item+0x150>)
 8006b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b60:	f7f9 fd2a 	bl	80005b8 <__aeabi_dmul>
 8006b64:	2200      	movs	r2, #0
 8006b66:	4b21      	ldr	r3, [pc, #132]	@ (8006bec <LCD_TPMS_1_item+0x164>)
 8006b68:	f7f9 fd26 	bl	80005b8 <__aeabi_dmul>
 8006b6c:	f7f9 ffd4 	bl	8000b18 <__aeabi_d2iz>
        	LCD_ShowNumWithTwoDecimals(tmp);
 8006b70:	f7fc f90e 	bl	8002d90 <LCD_ShowNumWithTwoDecimals>
 8006b74:	e7b9      	b.n	8006aea <LCD_TPMS_1_item+0x62>
        	uint32_t tmp = (m_value * 15  - 60);
 8006b76:	9801      	ldr	r0, [sp, #4]
 8006b78:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
        	LCD_ShowNum(tmp);
 8006b7c:	383c      	subs	r0, #60	@ 0x3c
 8006b7e:	f7fc f9ef 	bl	8002f60 <LCD_ShowNum>
 8006b82:	e7b2      	b.n	8006aea <LCD_TPMS_1_item+0x62>
        LCD_ShowNum(g_TPMS_1[item]);
 8006b84:	4b17      	ldr	r3, [pc, #92]	@ (8006be4 <LCD_TPMS_1_item+0x15c>)
 8006b86:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8006b8a:	f7fc f9e9 	bl	8002f60 <LCD_ShowNum>
 8006b8e:	e7ac      	b.n	8006aea <LCD_TPMS_1_item+0x62>
    item = GET_MENU(item+1, TPMS_1_ITEM_MAX);
 8006b90:	3401      	adds	r4, #1
 8006b92:	b2e4      	uxtb	r4, r4
 8006b94:	e7ad      	b.n	8006af2 <LCD_TPMS_1_item+0x6a>
        	uint32_t tmp = (m_value * 15  * 2.745) * 100;
 8006b96:	9801      	ldr	r0, [sp, #4]
 8006b98:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8006b9c:	f7f9 fc92 	bl	80004c4 <__aeabi_ui2d>
 8006ba0:	a30d      	add	r3, pc, #52	@ (adr r3, 8006bd8 <LCD_TPMS_1_item+0x150>)
 8006ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba6:	f7f9 fd07 	bl	80005b8 <__aeabi_dmul>
 8006baa:	2200      	movs	r2, #0
 8006bac:	4b0f      	ldr	r3, [pc, #60]	@ (8006bec <LCD_TPMS_1_item+0x164>)
 8006bae:	f7f9 fd03 	bl	80005b8 <__aeabi_dmul>
 8006bb2:	f7f9 ffd9 	bl	8000b68 <__aeabi_d2uiz>
        	LCD_ShowNumWithTwoDecimals(tmp);
 8006bb6:	f7fc f8eb 	bl	8002d90 <LCD_ShowNumWithTwoDecimals>
 8006bba:	e7c4      	b.n	8006b46 <LCD_TPMS_1_item+0xbe>
        	uint32_t tmp = (m_value * 15  - 60);
 8006bbc:	9801      	ldr	r0, [sp, #4]
 8006bbe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
        	LCD_ShowNum(tmp);
 8006bc2:	383c      	subs	r0, #60	@ 0x3c
 8006bc4:	f7fc f9cc 	bl	8002f60 <LCD_ShowNum>
 8006bc8:	e7bd      	b.n	8006b46 <LCD_TPMS_1_item+0xbe>
        LCD_ShowNum(g_TPMS_1[item]);
 8006bca:	4b06      	ldr	r3, [pc, #24]	@ (8006be4 <LCD_TPMS_1_item+0x15c>)
 8006bcc:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8006bd0:	f7fc f9c6 	bl	8002f60 <LCD_ShowNum>
 8006bd4:	e7b7      	b.n	8006b46 <LCD_TPMS_1_item+0xbe>
 8006bd6:	bf00      	nop
 8006bd8:	8f5c28f6 	.word	0x8f5c28f6
 8006bdc:	4005f5c2 	.word	0x4005f5c2
 8006be0:	20003e5c 	.word	0x20003e5c
 8006be4:	20006580 	.word	0x20006580
 8006be8:	20003c9c 	.word	0x20003c9c
 8006bec:	40590000 	.word	0x40590000

08006bf0 <LCD_BCM_4_item_Judge>:
void LCD_BCM_4_item_Judge(uint8_t item, uint32_t *m_value, uint8_t *flag){
 8006bf0:	280e      	cmp	r0, #14
 8006bf2:	d81b      	bhi.n	8006c2c <LCD_BCM_4_item_Judge+0x3c>
 8006bf4:	e8df f000 	tbb	[pc, r0]
 8006bf8:	1a1a1a08 	.word	0x1a1a1a08
 8006bfc:	21141a1a 	.word	0x21141a1a
 8006c00:	1a391a2d 	.word	0x1a391a2d
 8006c04:	1a1a      	.short	0x1a1a
 8006c06:	3f          	.byte	0x3f
 8006c07:	00          	.byte	0x00
    	if(*m_value >= 3 && *m_value <= 6){
 8006c08:	680b      	ldr	r3, [r1, #0]
 8006c0a:	1eda      	subs	r2, r3, #3
 8006c0c:	2a03      	cmp	r2, #3
 8006c0e:	d802      	bhi.n	8006c16 <LCD_BCM_4_item_Judge+0x26>
    		*m_value = 3;
 8006c10:	2303      	movs	r3, #3
 8006c12:	600b      	str	r3, [r1, #0]
 8006c14:	4770      	bx	lr
    	else if(*m_value == 7){
 8006c16:	2b07      	cmp	r3, #7
 8006c18:	d108      	bne.n	8006c2c <LCD_BCM_4_item_Judge+0x3c>
    		*m_value = 4;
 8006c1a:	2304      	movs	r3, #4
 8006c1c:	600b      	str	r3, [r1, #0]
 8006c1e:	4770      	bx	lr
    	if(*m_value >= 5 && *m_value <= 6){
 8006c20:	680b      	ldr	r3, [r1, #0]
 8006c22:	1f5a      	subs	r2, r3, #5
 8006c24:	2a01      	cmp	r2, #1
 8006c26:	d902      	bls.n	8006c2e <LCD_BCM_4_item_Judge+0x3e>
    	else if(*m_value == 7){
 8006c28:	2b07      	cmp	r3, #7
 8006c2a:	d003      	beq.n	8006c34 <LCD_BCM_4_item_Judge+0x44>
}
 8006c2c:	4770      	bx	lr
    		*m_value = 5;
 8006c2e:	2305      	movs	r3, #5
 8006c30:	600b      	str	r3, [r1, #0]
 8006c32:	4770      	bx	lr
    		*m_value = 6;
 8006c34:	2306      	movs	r3, #6
 8006c36:	600b      	str	r3, [r1, #0]
 8006c38:	4770      	bx	lr
    	if(*m_value >= 5 && *m_value <= 6){
 8006c3a:	680b      	ldr	r3, [r1, #0]
 8006c3c:	1f5a      	subs	r2, r3, #5
 8006c3e:	2a01      	cmp	r2, #1
 8006c40:	d904      	bls.n	8006c4c <LCD_BCM_4_item_Judge+0x5c>
    	else if(*m_value == 7){
 8006c42:	2b07      	cmp	r3, #7
 8006c44:	d1f2      	bne.n	8006c2c <LCD_BCM_4_item_Judge+0x3c>
    		*m_value = 6;
 8006c46:	2306      	movs	r3, #6
 8006c48:	600b      	str	r3, [r1, #0]
 8006c4a:	4770      	bx	lr
    		*m_value = 5;
 8006c4c:	2305      	movs	r3, #5
 8006c4e:	600b      	str	r3, [r1, #0]
 8006c50:	4770      	bx	lr
    	if(*m_value >= 4 && *m_value <= 6){
 8006c52:	680b      	ldr	r3, [r1, #0]
 8006c54:	1f1a      	subs	r2, r3, #4
 8006c56:	2a02      	cmp	r2, #2
 8006c58:	d802      	bhi.n	8006c60 <LCD_BCM_4_item_Judge+0x70>
    		*m_value = 4;
 8006c5a:	2304      	movs	r3, #4
 8006c5c:	600b      	str	r3, [r1, #0]
 8006c5e:	4770      	bx	lr
    	else if(*m_value == 7){
 8006c60:	2b07      	cmp	r3, #7
 8006c62:	d1e3      	bne.n	8006c2c <LCD_BCM_4_item_Judge+0x3c>
    		*m_value = 5;
 8006c64:	2305      	movs	r3, #5
 8006c66:	600b      	str	r3, [r1, #0]
 8006c68:	4770      	bx	lr
    	if(*m_value >= 11){
 8006c6a:	680b      	ldr	r3, [r1, #0]
 8006c6c:	2b0a      	cmp	r3, #10
 8006c6e:	d9dd      	bls.n	8006c2c <LCD_BCM_4_item_Judge+0x3c>
    		*m_value = 11;
 8006c70:	230b      	movs	r3, #11
 8006c72:	600b      	str	r3, [r1, #0]
 8006c74:	4770      	bx	lr
    	if(*m_value >= 4 && *m_value <= 6){
 8006c76:	680b      	ldr	r3, [r1, #0]
 8006c78:	1f1a      	subs	r2, r3, #4
 8006c7a:	2a02      	cmp	r2, #2
 8006c7c:	d802      	bhi.n	8006c84 <LCD_BCM_4_item_Judge+0x94>
    	    *m_value = 4;
 8006c7e:	2304      	movs	r3, #4
 8006c80:	600b      	str	r3, [r1, #0]
 8006c82:	4770      	bx	lr
    	else if(*m_value == 7){
 8006c84:	2b07      	cmp	r3, #7
 8006c86:	d1d1      	bne.n	8006c2c <LCD_BCM_4_item_Judge+0x3c>
    		*m_value = 5;
 8006c88:	2305      	movs	r3, #5
 8006c8a:	600b      	str	r3, [r1, #0]
}
 8006c8c:	e7ce      	b.n	8006c2c <LCD_BCM_4_item_Judge+0x3c>
	...

08006c90 <LCD_BCM_4_item>:
{
 8006c90:	b510      	push	{r4, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	4604      	mov	r4, r0
    item = GET_MENU(item, BCM_4_ITEM_MAX);
 8006c96:	2814      	cmp	r0, #20
 8006c98:	d902      	bls.n	8006ca0 <LCD_BCM_4_item+0x10>
 8006c9a:	f1a0 0415 	sub.w	r4, r0, #21
 8006c9e:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8006ca0:	2083      	movs	r0, #131	@ 0x83
 8006ca2:	f7fc f837 	bl	8002d14 <write_com>
    hzkdis(BCM_4Item[item]);
 8006ca6:	4b2b      	ldr	r3, [pc, #172]	@ (8006d54 <LCD_BCM_4_item+0xc4>)
 8006ca8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006cac:	f7fc f862 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8006cb0:	2093      	movs	r0, #147	@ 0x93
 8006cb2:	f7fc f82f 	bl	8002d14 <write_com>
    uint32_t m_value = g_BCM_4[item];
 8006cb6:	4b28      	ldr	r3, [pc, #160]	@ (8006d58 <LCD_BCM_4_item+0xc8>)
 8006cb8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8006cbc:	9301      	str	r3, [sp, #4]
    uint8_t flag = 0;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_BCM_4_item_Judge(item, &m_value, &flag);
 8006cc4:	f10d 0203 	add.w	r2, sp, #3
 8006cc8:	a901      	add	r1, sp, #4
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f7ff ff90 	bl	8006bf0 <LCD_BCM_4_item_Judge>
    if (flag == 0) {
 8006cd0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006cd4:	bb9b      	cbnz	r3, 8006d3e <LCD_BCM_4_item+0xae>
        hzkdis(BCM_4Value[item][m_value]);
 8006cd6:	9b01      	ldr	r3, [sp, #4]
 8006cd8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8006cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8006d5c <LCD_BCM_4_item+0xcc>)
 8006cde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006ce2:	f7fc f847 	bl	8002d74 <hzkdis>
    item = GET_MENU(item+1, BCM_4_ITEM_MAX);
 8006ce6:	2c13      	cmp	r4, #19
 8006ce8:	d92d      	bls.n	8006d46 <LCD_BCM_4_item+0xb6>
 8006cea:	3c14      	subs	r4, #20
 8006cec:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8006cee:	208b      	movs	r0, #139	@ 0x8b
 8006cf0:	f7fc f810 	bl	8002d14 <write_com>
    hzkdis(BCM_4Item[item]);
 8006cf4:	4b17      	ldr	r3, [pc, #92]	@ (8006d54 <LCD_BCM_4_item+0xc4>)
 8006cf6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006cfa:	f7fc f83b 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8006cfe:	209b      	movs	r0, #155	@ 0x9b
 8006d00:	f7fc f808 	bl	8002d14 <write_com>
    m_value = g_BCM_4[item];
 8006d04:	4b14      	ldr	r3, [pc, #80]	@ (8006d58 <LCD_BCM_4_item+0xc8>)
 8006d06:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8006d0a:	9301      	str	r3, [sp, #4]
    flag = 0;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_BCM_4_item_Judge(item, &m_value, &flag);
 8006d12:	f10d 0203 	add.w	r2, sp, #3
 8006d16:	a901      	add	r1, sp, #4
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f7ff ff69 	bl	8006bf0 <LCD_BCM_4_item_Judge>
    if (flag == 0) {
 8006d1e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006d22:	b99b      	cbnz	r3, 8006d4c <LCD_BCM_4_item+0xbc>
        hzkdis(BCM_4Value[item][m_value]);
 8006d24:	9b01      	ldr	r3, [sp, #4]
 8006d26:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8006d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8006d5c <LCD_BCM_4_item+0xcc>)
 8006d2c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006d30:	f7fc f820 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8006d34:	2093      	movs	r0, #147	@ 0x93
 8006d36:	f7fb ffed 	bl	8002d14 <write_com>
}
 8006d3a:	b002      	add	sp, #8
 8006d3c:	bd10      	pop	{r4, pc}
        LCD_ShowNum(m_value);
 8006d3e:	9801      	ldr	r0, [sp, #4]
 8006d40:	f7fc f90e 	bl	8002f60 <LCD_ShowNum>
 8006d44:	e7cf      	b.n	8006ce6 <LCD_BCM_4_item+0x56>
    item = GET_MENU(item+1, BCM_4_ITEM_MAX);
 8006d46:	3401      	adds	r4, #1
 8006d48:	b2e4      	uxtb	r4, r4
 8006d4a:	e7d0      	b.n	8006cee <LCD_BCM_4_item+0x5e>
        LCD_ShowNum(m_value);
 8006d4c:	9801      	ldr	r0, [sp, #4]
 8006d4e:	f7fc f907 	bl	8002f60 <LCD_ShowNum>
 8006d52:	e7ef      	b.n	8006d34 <LCD_BCM_4_item+0xa4>
 8006d54:	20003b1c 	.word	0x20003b1c
 8006d58:	20003584 	.word	0x20003584
 8006d5c:	200035dc 	.word	0x200035dc

08006d60 <LCD_BCM_5_item_Judge>:
	if(item == 0){
 8006d60:	b928      	cbnz	r0, 8006d6e <LCD_BCM_5_item_Judge+0xe>
		if(*m_value >= 7 && *m_value <= 0x15){
 8006d62:	680b      	ldr	r3, [r1, #0]
 8006d64:	3b07      	subs	r3, #7
 8006d66:	2b0e      	cmp	r3, #14
 8006d68:	d801      	bhi.n	8006d6e <LCD_BCM_5_item_Judge+0xe>
			*m_value = 7;
 8006d6a:	2307      	movs	r3, #7
 8006d6c:	600b      	str	r3, [r1, #0]
}
 8006d6e:	4770      	bx	lr

08006d70 <LCD_BCM_5_item>:
{
 8006d70:	b530      	push	{r4, r5, lr}
 8006d72:	b083      	sub	sp, #12
    item = GET_MENU(item, BCM_5_ITEM_MAX);
 8006d74:	4604      	mov	r4, r0
 8006d76:	b108      	cbz	r0, 8006d7c <LCD_BCM_5_item+0xc>
 8006d78:	1e44      	subs	r4, r0, #1
 8006d7a:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8006d7c:	2083      	movs	r0, #131	@ 0x83
 8006d7e:	f7fb ffc9 	bl	8002d14 <write_com>
    hzkdis(BCM_5Item[item]);
 8006d82:	4625      	mov	r5, r4
 8006d84:	4b27      	ldr	r3, [pc, #156]	@ (8006e24 <LCD_BCM_5_item+0xb4>)
 8006d86:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006d8a:	f7fb fff3 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8006d8e:	2093      	movs	r0, #147	@ 0x93
 8006d90:	f7fb ffc0 	bl	8002d14 <write_com>
    uint32_t m_value = g_BCM_5[item];
 8006d94:	4b24      	ldr	r3, [pc, #144]	@ (8006e28 <LCD_BCM_5_item+0xb8>)
 8006d96:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8006d9a:	9301      	str	r3, [sp, #4]
    uint8_t flag = 0;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_BCM_5_item_Judge(item, &m_value, &flag);
 8006da2:	f10d 0203 	add.w	r2, sp, #3
 8006da6:	a901      	add	r1, sp, #4
 8006da8:	4620      	mov	r0, r4
 8006daa:	f7ff ffd9 	bl	8006d60 <LCD_BCM_5_item_Judge>
    if (flag == 0) {
 8006dae:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006db2:	bb7b      	cbnz	r3, 8006e14 <LCD_BCM_5_item+0xa4>
        hzkdis(BCM_5Value[item][m_value]);
 8006db4:	9b01      	ldr	r3, [sp, #4]
 8006db6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8006dba:	4a1c      	ldr	r2, [pc, #112]	@ (8006e2c <LCD_BCM_5_item+0xbc>)
 8006dbc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006dc0:	f7fb ffd8 	bl	8002d74 <hzkdis>
    write_com(0x8b);
 8006dc4:	208b      	movs	r0, #139	@ 0x8b
 8006dc6:	f7fb ffa5 	bl	8002d14 <write_com>
    hzkdis(BCM_5Item[item]);
 8006dca:	4b16      	ldr	r3, [pc, #88]	@ (8006e24 <LCD_BCM_5_item+0xb4>)
 8006dcc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dd0:	f7fb ffd0 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8006dd4:	209b      	movs	r0, #155	@ 0x9b
 8006dd6:	f7fb ff9d 	bl	8002d14 <write_com>
    m_value = g_BCM_5[item];
 8006dda:	4b13      	ldr	r3, [pc, #76]	@ (8006e28 <LCD_BCM_5_item+0xb8>)
 8006ddc:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8006de0:	9301      	str	r3, [sp, #4]
    flag = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_BCM_5_item_Judge(item, &m_value, &flag);
 8006de8:	f10d 0203 	add.w	r2, sp, #3
 8006dec:	a901      	add	r1, sp, #4
 8006dee:	4620      	mov	r0, r4
 8006df0:	f7ff ffb6 	bl	8006d60 <LCD_BCM_5_item_Judge>
    if (flag == 0) {
 8006df4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006df8:	b983      	cbnz	r3, 8006e1c <LCD_BCM_5_item+0xac>
        hzkdis(BCM_5Value[item][m_value]);
 8006dfa:	9b01      	ldr	r3, [sp, #4]
 8006dfc:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 8006e00:	4a0a      	ldr	r2, [pc, #40]	@ (8006e2c <LCD_BCM_5_item+0xbc>)
 8006e02:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006e06:	f7fb ffb5 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8006e0a:	2093      	movs	r0, #147	@ 0x93
 8006e0c:	f7fb ff82 	bl	8002d14 <write_com>
}
 8006e10:	b003      	add	sp, #12
 8006e12:	bd30      	pop	{r4, r5, pc}
        LCD_ShowNum(m_value);
 8006e14:	9801      	ldr	r0, [sp, #4]
 8006e16:	f7fc f8a3 	bl	8002f60 <LCD_ShowNum>
 8006e1a:	e7d3      	b.n	8006dc4 <LCD_BCM_5_item+0x54>
        LCD_ShowNum(m_value);
 8006e1c:	9801      	ldr	r0, [sp, #4]
 8006e1e:	f7fc f89f 	bl	8002f60 <LCD_ShowNum>
 8006e22:	e7f2      	b.n	8006e0a <LCD_BCM_5_item+0x9a>
 8006e24:	20003580 	.word	0x20003580
 8006e28:	20006570 	.word	0x20006570
 8006e2c:	20003540 	.word	0x20003540

08006e30 <LCD_TBOX_1_item_Judge>:
	if(item == 3 || item == 4){
 8006e30:	1ec3      	subs	r3, r0, #3
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d902      	bls.n	8006e3e <LCD_TBOX_1_item_Judge+0xe>
	else if(item == 5){
 8006e38:	2805      	cmp	r0, #5
 8006e3a:	d004      	beq.n	8006e46 <LCD_TBOX_1_item_Judge+0x16>
}
 8006e3c:	4770      	bx	lr
		*m_value += 1;
 8006e3e:	680b      	ldr	r3, [r1, #0]
 8006e40:	3301      	adds	r3, #1
 8006e42:	600b      	str	r3, [r1, #0]
 8006e44:	4770      	bx	lr
		*m_value += 2000;
 8006e46:	680b      	ldr	r3, [r1, #0]
 8006e48:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8006e4c:	600b      	str	r3, [r1, #0]
}
 8006e4e:	e7f5      	b.n	8006e3c <LCD_TBOX_1_item_Judge+0xc>

08006e50 <LCD_TBOX_1_item>:
{
 8006e50:	b510      	push	{r4, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	4604      	mov	r4, r0
    item = GET_MENU(item, TBOX_1_ITEM_MAX);
 8006e56:	2805      	cmp	r0, #5
 8006e58:	d901      	bls.n	8006e5e <LCD_TBOX_1_item+0xe>
 8006e5a:	1f84      	subs	r4, r0, #6
 8006e5c:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8006e5e:	2083      	movs	r0, #131	@ 0x83
 8006e60:	f7fb ff58 	bl	8002d14 <write_com>
    hzkdis(TBOX_1Item[item]);
 8006e64:	4b2c      	ldr	r3, [pc, #176]	@ (8006f18 <LCD_TBOX_1_item+0xc8>)
 8006e66:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006e6a:	f7fb ff83 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8006e6e:	2093      	movs	r0, #147	@ 0x93
 8006e70:	f7fb ff50 	bl	8002d14 <write_com>
    uint32_t m_value = g_TBOX_1[item];
 8006e74:	4b29      	ldr	r3, [pc, #164]	@ (8006f1c <LCD_TBOX_1_item+0xcc>)
 8006e76:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8006e7a:	9301      	str	r3, [sp, #4]
    uint8_t flag = 0;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_TBOX_1_item_Judge(item, &m_value, &flag);
 8006e82:	f10d 0203 	add.w	r2, sp, #3
 8006e86:	a901      	add	r1, sp, #4
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f7ff ffd1 	bl	8006e30 <LCD_TBOX_1_item_Judge>
    if (strcmp(TBOX_1Value[item][0], "") != 0) {
 8006e8e:	01a3      	lsls	r3, r4, #6
 8006e90:	4a23      	ldr	r2, [pc, #140]	@ (8006f20 <LCD_TBOX_1_item+0xd0>)
 8006e92:	58d3      	ldr	r3, [r2, r3]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	b39b      	cbz	r3, 8006f00 <LCD_TBOX_1_item+0xb0>
        hzkdis(TBOX_1Value[item][m_value]);
 8006e98:	9b01      	ldr	r3, [sp, #4]
 8006e9a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8006e9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006ea2:	f7fb ff67 	bl	8002d74 <hzkdis>
    item = GET_MENU(item+1, TBOX_1_ITEM_MAX);
 8006ea6:	2c04      	cmp	r4, #4
 8006ea8:	d92e      	bls.n	8006f08 <LCD_TBOX_1_item+0xb8>
 8006eaa:	3c05      	subs	r4, #5
 8006eac:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8006eae:	208b      	movs	r0, #139	@ 0x8b
 8006eb0:	f7fb ff30 	bl	8002d14 <write_com>
    hzkdis(TBOX_1Item[item]);
 8006eb4:	4b18      	ldr	r3, [pc, #96]	@ (8006f18 <LCD_TBOX_1_item+0xc8>)
 8006eb6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006eba:	f7fb ff5b 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8006ebe:	209b      	movs	r0, #155	@ 0x9b
 8006ec0:	f7fb ff28 	bl	8002d14 <write_com>
    m_value = g_TBOX_1[item];
 8006ec4:	4b15      	ldr	r3, [pc, #84]	@ (8006f1c <LCD_TBOX_1_item+0xcc>)
 8006ec6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8006eca:	9301      	str	r3, [sp, #4]
    flag = 0;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_TBOX_1_item_Judge(item, &m_value, &flag);
 8006ed2:	f10d 0203 	add.w	r2, sp, #3
 8006ed6:	a901      	add	r1, sp, #4
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f7ff ffa9 	bl	8006e30 <LCD_TBOX_1_item_Judge>
    if (strcmp(TBOX_1Value[item][0], "") != 0) {
 8006ede:	01a3      	lsls	r3, r4, #6
 8006ee0:	4a0f      	ldr	r2, [pc, #60]	@ (8006f20 <LCD_TBOX_1_item+0xd0>)
 8006ee2:	58d3      	ldr	r3, [r2, r3]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	b193      	cbz	r3, 8006f0e <LCD_TBOX_1_item+0xbe>
        hzkdis(TBOX_1Value[item][m_value]);
 8006ee8:	9b01      	ldr	r3, [sp, #4]
 8006eea:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8006eee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006ef2:	f7fb ff3f 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8006ef6:	2093      	movs	r0, #147	@ 0x93
 8006ef8:	f7fb ff0c 	bl	8002d14 <write_com>
}
 8006efc:	b002      	add	sp, #8
 8006efe:	bd10      	pop	{r4, pc}
        LCD_ShowNum(m_value);
 8006f00:	9801      	ldr	r0, [sp, #4]
 8006f02:	f7fc f82d 	bl	8002f60 <LCD_ShowNum>
 8006f06:	e7ce      	b.n	8006ea6 <LCD_TBOX_1_item+0x56>
    item = GET_MENU(item+1, TBOX_1_ITEM_MAX);
 8006f08:	3401      	adds	r4, #1
 8006f0a:	b2e4      	uxtb	r4, r4
 8006f0c:	e7cf      	b.n	8006eae <LCD_TBOX_1_item+0x5e>
        LCD_ShowNum(m_value);
 8006f0e:	9801      	ldr	r0, [sp, #4]
 8006f10:	f7fc f826 	bl	8002f60 <LCD_ShowNum>
 8006f14:	e7ef      	b.n	8006ef6 <LCD_TBOX_1_item+0xa6>
 8006f16:	bf00      	nop
 8006f18:	20003450 	.word	0x20003450
 8006f1c:	2000655c 	.word	0x2000655c
 8006f20:	200032d0 	.word	0x200032d0

08006f24 <LCD_FCM_3_item_Judge>:
	if(item == 1){
 8006f24:	2801      	cmp	r0, #1
 8006f26:	d000      	beq.n	8006f2a <LCD_FCM_3_item_Judge+0x6>
}
 8006f28:	4770      	bx	lr
		if(*m_value >= 0x6 && *m_value <= 0x7){
 8006f2a:	680b      	ldr	r3, [r1, #0]
 8006f2c:	3b06      	subs	r3, #6
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d8fa      	bhi.n	8006f28 <LCD_FCM_3_item_Judge+0x4>
			*m_value = 6;
 8006f32:	2306      	movs	r3, #6
 8006f34:	600b      	str	r3, [r1, #0]
}
 8006f36:	e7f7      	b.n	8006f28 <LCD_FCM_3_item_Judge+0x4>

08006f38 <LCD_FCM_3_item>:
{
 8006f38:	b510      	push	{r4, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	4604      	mov	r4, r0
    item = GET_MENU(item, FCM_3_ITEM_MAX);
 8006f3e:	2809      	cmp	r0, #9
 8006f40:	d902      	bls.n	8006f48 <LCD_FCM_3_item+0x10>
 8006f42:	f1a0 040a 	sub.w	r4, r0, #10
 8006f46:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8006f48:	2083      	movs	r0, #131	@ 0x83
 8006f4a:	f7fb fee3 	bl	8002d14 <write_com>
    hzkdis(FCM_3Item[item]);
 8006f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8007008 <LCD_FCM_3_item+0xd0>)
 8006f50:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006f54:	f7fb ff0e 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8006f58:	2093      	movs	r0, #147	@ 0x93
 8006f5a:	f7fb fedb 	bl	8002d14 <write_com>
    uint32_t m_value = g_FCM_3[item];
 8006f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800700c <LCD_FCM_3_item+0xd4>)
 8006f60:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8006f64:	9301      	str	r3, [sp, #4]
    uint8_t flag = 0;
 8006f66:	2300      	movs	r3, #0
 8006f68:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_FCM_3_item_Judge(item, &m_value, &flag);
 8006f6c:	f10d 0203 	add.w	r2, sp, #3
 8006f70:	a901      	add	r1, sp, #4
 8006f72:	4620      	mov	r0, r4
 8006f74:	f7ff ffd6 	bl	8006f24 <LCD_FCM_3_item_Judge>
    if (flag == 0) {
 8006f78:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d136      	bne.n	8006fee <LCD_FCM_3_item+0xb6>
        hzkdis(FCM_3Value[item][m_value]);
 8006f80:	9b01      	ldr	r3, [sp, #4]
 8006f82:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8006f86:	4a22      	ldr	r2, [pc, #136]	@ (8007010 <LCD_FCM_3_item+0xd8>)
 8006f88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006f8c:	f7fb fef2 	bl	8002d74 <hzkdis>
    item = GET_MENU(item+1, FCM_3_ITEM_MAX);
 8006f90:	2c08      	cmp	r4, #8
 8006f92:	d930      	bls.n	8006ff6 <LCD_FCM_3_item+0xbe>
 8006f94:	3c09      	subs	r4, #9
 8006f96:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8006f98:	208b      	movs	r0, #139	@ 0x8b
 8006f9a:	f7fb febb 	bl	8002d14 <write_com>
    hzkdis(FCM_3Item[item]);
 8006f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8007008 <LCD_FCM_3_item+0xd0>)
 8006fa0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006fa4:	f7fb fee6 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8006fa8:	209b      	movs	r0, #155	@ 0x9b
 8006faa:	f7fb feb3 	bl	8002d14 <write_com>
    m_value = g_FCM_3[item];
 8006fae:	4b17      	ldr	r3, [pc, #92]	@ (800700c <LCD_FCM_3_item+0xd4>)
 8006fb0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8006fb4:	9301      	str	r3, [sp, #4]
    flag = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_FCM_3_item_Judge(item, &m_value, &flag);
 8006fbc:	f10d 0203 	add.w	r2, sp, #3
 8006fc0:	a901      	add	r1, sp, #4
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f7ff ffae 	bl	8006f24 <LCD_FCM_3_item_Judge>
    if (strcmp(FCM_3Value[item][0], "") != 0) {
 8006fc8:	01a3      	lsls	r3, r4, #6
 8006fca:	4a11      	ldr	r2, [pc, #68]	@ (8007010 <LCD_FCM_3_item+0xd8>)
 8006fcc:	58d3      	ldr	r3, [r2, r3]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	b1a3      	cbz	r3, 8006ffc <LCD_FCM_3_item+0xc4>
        hzkdis(FCM_3Value[item][g_FCM_3[item]]);
 8006fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800700c <LCD_FCM_3_item+0xd4>)
 8006fd4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8006fd8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8006fdc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006fe0:	f7fb fec8 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8006fe4:	2093      	movs	r0, #147	@ 0x93
 8006fe6:	f7fb fe95 	bl	8002d14 <write_com>
}
 8006fea:	b002      	add	sp, #8
 8006fec:	bd10      	pop	{r4, pc}
        LCD_ShowNum(m_value);
 8006fee:	9801      	ldr	r0, [sp, #4]
 8006ff0:	f7fb ffb6 	bl	8002f60 <LCD_ShowNum>
 8006ff4:	e7cc      	b.n	8006f90 <LCD_FCM_3_item+0x58>
    item = GET_MENU(item+1, FCM_3_ITEM_MAX);
 8006ff6:	3401      	adds	r4, #1
 8006ff8:	b2e4      	uxtb	r4, r4
 8006ffa:	e7cd      	b.n	8006f98 <LCD_FCM_3_item+0x60>
        LCD_ShowNum(g_FCM_3[item]);
 8006ffc:	4b03      	ldr	r3, [pc, #12]	@ (800700c <LCD_FCM_3_item+0xd4>)
 8006ffe:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8007002:	f7fb ffad 	bl	8002f60 <LCD_ShowNum>
 8007006:	e7ed      	b.n	8006fe4 <LCD_FCM_3_item+0xac>
 8007008:	200031c8 	.word	0x200031c8
 800700c:	20002f20 	.word	0x20002f20
 8007010:	20002f48 	.word	0x20002f48

08007014 <LCD_FCM_4_item_Judge>:
	if(item == 1){
 8007014:	2801      	cmp	r0, #1
 8007016:	d004      	beq.n	8007022 <LCD_FCM_4_item_Judge+0xe>
	else if(item == 4){
 8007018:	2804      	cmp	r0, #4
 800701a:	d009      	beq.n	8007030 <LCD_FCM_4_item_Judge+0x1c>
	else if(item == 7){
 800701c:	2807      	cmp	r0, #7
 800701e:	d00e      	beq.n	800703e <LCD_FCM_4_item_Judge+0x2a>
}
 8007020:	4770      	bx	lr
		if(*m_value >= 5 && *m_value <= 7){
 8007022:	680b      	ldr	r3, [r1, #0]
 8007024:	3b05      	subs	r3, #5
 8007026:	2b02      	cmp	r3, #2
 8007028:	d8fa      	bhi.n	8007020 <LCD_FCM_4_item_Judge+0xc>
			*m_value = 5;
 800702a:	2305      	movs	r3, #5
 800702c:	600b      	str	r3, [r1, #0]
 800702e:	4770      	bx	lr
		if(*m_value >= 6 && *m_value <= 7){
 8007030:	680b      	ldr	r3, [r1, #0]
 8007032:	3b06      	subs	r3, #6
 8007034:	2b01      	cmp	r3, #1
 8007036:	d8f3      	bhi.n	8007020 <LCD_FCM_4_item_Judge+0xc>
			*m_value = 6;
 8007038:	2306      	movs	r3, #6
 800703a:	600b      	str	r3, [r1, #0]
 800703c:	4770      	bx	lr
		if(*m_value >= 6 && *m_value <= 7){
 800703e:	680b      	ldr	r3, [r1, #0]
 8007040:	3b06      	subs	r3, #6
 8007042:	2b01      	cmp	r3, #1
 8007044:	d8ec      	bhi.n	8007020 <LCD_FCM_4_item_Judge+0xc>
			*m_value = 6;
 8007046:	2306      	movs	r3, #6
 8007048:	600b      	str	r3, [r1, #0]
}
 800704a:	e7e9      	b.n	8007020 <LCD_FCM_4_item_Judge+0xc>

0800704c <LCD_FCM_4_item>:
{
 800704c:	b510      	push	{r4, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	4604      	mov	r4, r0
    item = GET_MENU(item, FCM_4_ITEM_MAX);
 8007052:	2809      	cmp	r0, #9
 8007054:	d902      	bls.n	800705c <LCD_FCM_4_item+0x10>
 8007056:	f1a0 040a 	sub.w	r4, r0, #10
 800705a:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 800705c:	2083      	movs	r0, #131	@ 0x83
 800705e:	f7fb fe59 	bl	8002d14 <write_com>
    hzkdis(FCM_4Item[item]);
 8007062:	4b2b      	ldr	r3, [pc, #172]	@ (8007110 <LCD_FCM_4_item+0xc4>)
 8007064:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007068:	f7fb fe84 	bl	8002d74 <hzkdis>
    write_com(0x93);
 800706c:	2093      	movs	r0, #147	@ 0x93
 800706e:	f7fb fe51 	bl	8002d14 <write_com>
    uint32_t m_value = g_FCM_4[item];
 8007072:	4b28      	ldr	r3, [pc, #160]	@ (8007114 <LCD_FCM_4_item+0xc8>)
 8007074:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8007078:	9301      	str	r3, [sp, #4]
    uint8_t flag = 0;
 800707a:	2300      	movs	r3, #0
 800707c:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_FCM_4_item_Judge(item, &m_value, &flag);
 8007080:	f10d 0203 	add.w	r2, sp, #3
 8007084:	a901      	add	r1, sp, #4
 8007086:	4620      	mov	r0, r4
 8007088:	f7ff ffc4 	bl	8007014 <LCD_FCM_4_item_Judge>
    if (flag == 0) {
 800708c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007090:	bb9b      	cbnz	r3, 80070fa <LCD_FCM_4_item+0xae>
        hzkdis(FCM_4Value[item][m_value]);
 8007092:	9b01      	ldr	r3, [sp, #4]
 8007094:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8007098:	4a1f      	ldr	r2, [pc, #124]	@ (8007118 <LCD_FCM_4_item+0xcc>)
 800709a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800709e:	f7fb fe69 	bl	8002d74 <hzkdis>
    item = GET_MENU(item+1, FCM_4_ITEM_MAX);
 80070a2:	2c08      	cmp	r4, #8
 80070a4:	d92d      	bls.n	8007102 <LCD_FCM_4_item+0xb6>
 80070a6:	3c09      	subs	r4, #9
 80070a8:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80070aa:	208b      	movs	r0, #139	@ 0x8b
 80070ac:	f7fb fe32 	bl	8002d14 <write_com>
    hzkdis(FCM_4Item[item]);
 80070b0:	4b17      	ldr	r3, [pc, #92]	@ (8007110 <LCD_FCM_4_item+0xc4>)
 80070b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80070b6:	f7fb fe5d 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 80070ba:	209b      	movs	r0, #155	@ 0x9b
 80070bc:	f7fb fe2a 	bl	8002d14 <write_com>
    m_value = g_FCM_4[item];
 80070c0:	4b14      	ldr	r3, [pc, #80]	@ (8007114 <LCD_FCM_4_item+0xc8>)
 80070c2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80070c6:	9301      	str	r3, [sp, #4]
    flag = 0;
 80070c8:	2300      	movs	r3, #0
 80070ca:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_FCM_4_item_Judge(item, &m_value, &flag);
 80070ce:	f10d 0203 	add.w	r2, sp, #3
 80070d2:	a901      	add	r1, sp, #4
 80070d4:	4620      	mov	r0, r4
 80070d6:	f7ff ff9d 	bl	8007014 <LCD_FCM_4_item_Judge>
    if (flag == 0) {
 80070da:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80070de:	b99b      	cbnz	r3, 8007108 <LCD_FCM_4_item+0xbc>
        hzkdis(FCM_4Value[item][m_value]);
 80070e0:	9b01      	ldr	r3, [sp, #4]
 80070e2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80070e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007118 <LCD_FCM_4_item+0xcc>)
 80070e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80070ec:	f7fb fe42 	bl	8002d74 <hzkdis>
    write_com(0x93);
 80070f0:	2093      	movs	r0, #147	@ 0x93
 80070f2:	f7fb fe0f 	bl	8002d14 <write_com>
}
 80070f6:	b002      	add	sp, #8
 80070f8:	bd10      	pop	{r4, pc}
        LCD_ShowNum(m_value);
 80070fa:	9801      	ldr	r0, [sp, #4]
 80070fc:	f7fb ff30 	bl	8002f60 <LCD_ShowNum>
 8007100:	e7cf      	b.n	80070a2 <LCD_FCM_4_item+0x56>
    item = GET_MENU(item+1, FCM_4_ITEM_MAX);
 8007102:	3401      	adds	r4, #1
 8007104:	b2e4      	uxtb	r4, r4
 8007106:	e7d0      	b.n	80070aa <LCD_FCM_4_item+0x5e>
        LCD_ShowNum(m_value);
 8007108:	9801      	ldr	r0, [sp, #4]
 800710a:	f7fb ff29 	bl	8002f60 <LCD_ShowNum>
 800710e:	e7ef      	b.n	80070f0 <LCD_FCM_4_item+0xa4>
 8007110:	20002ef8 	.word	0x20002ef8
 8007114:	20002c50 	.word	0x20002c50
 8007118:	20002c78 	.word	0x20002c78

0800711c <LCD_FCM_7_item_Judge>:
void LCD_FCM_7_item_Judge(uint8_t item, uint32_t *m_value, uint8_t *flag){
 800711c:	3801      	subs	r0, #1
 800711e:	2808      	cmp	r0, #8
 8007120:	d815      	bhi.n	800714e <LCD_FCM_7_item_Judge+0x32>
 8007122:	e8df f000 	tbb	[pc, r0]
 8007126:	1405      	.short	0x1405
 8007128:	14121205 	.word	0x14121205
 800712c:	120c      	.short	0x120c
 800712e:	12          	.byte	0x12
 800712f:	00          	.byte	0x00
		if(*m_value >= 5 && *m_value <= 7){
 8007130:	680b      	ldr	r3, [r1, #0]
 8007132:	3b05      	subs	r3, #5
 8007134:	2b02      	cmp	r3, #2
 8007136:	d80a      	bhi.n	800714e <LCD_FCM_7_item_Judge+0x32>
			*m_value = 5;
 8007138:	2305      	movs	r3, #5
 800713a:	600b      	str	r3, [r1, #0]
 800713c:	4770      	bx	lr
		if(*m_value >= 7){
 800713e:	680b      	ldr	r3, [r1, #0]
 8007140:	2b06      	cmp	r3, #6
 8007142:	d904      	bls.n	800714e <LCD_FCM_7_item_Judge+0x32>
			*m_value = 7;
 8007144:	2307      	movs	r3, #7
 8007146:	600b      	str	r3, [r1, #0]
 8007148:	4770      	bx	lr
		*flag = 1;
 800714a:	2301      	movs	r3, #1
 800714c:	7013      	strb	r3, [r2, #0]
}
 800714e:	4770      	bx	lr

08007150 <LCD_FCM_7_item>:
{
 8007150:	b510      	push	{r4, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	4604      	mov	r4, r0
    item = GET_MENU(item, FCM_7_ITEM_MAX);
 8007156:	2809      	cmp	r0, #9
 8007158:	d902      	bls.n	8007160 <LCD_FCM_7_item+0x10>
 800715a:	f1a0 040a 	sub.w	r4, r0, #10
 800715e:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8007160:	2083      	movs	r0, #131	@ 0x83
 8007162:	f7fb fdd7 	bl	8002d14 <write_com>
    hzkdis(FCM_7Item[item]);
 8007166:	4b38      	ldr	r3, [pc, #224]	@ (8007248 <LCD_FCM_7_item+0xf8>)
 8007168:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800716c:	f7fb fe02 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8007170:	2093      	movs	r0, #147	@ 0x93
 8007172:	f7fb fdcf 	bl	8002d14 <write_com>
    uint32_t m_value = g_FCM_7[item];
 8007176:	4b35      	ldr	r3, [pc, #212]	@ (800724c <LCD_FCM_7_item+0xfc>)
 8007178:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800717c:	9301      	str	r3, [sp, #4]
    uint8_t flag = 0;
 800717e:	2300      	movs	r3, #0
 8007180:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_FCM_7_item_Judge(item, &m_value, &flag);
 8007184:	f10d 0203 	add.w	r2, sp, #3
 8007188:	a901      	add	r1, sp, #4
 800718a:	4620      	mov	r0, r4
 800718c:	f7ff ffc6 	bl	800711c <LCD_FCM_7_item_Judge>
    if (flag == 0) {
 8007190:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d039      	beq.n	800720c <LCD_FCM_7_item+0xbc>
    	if(item == FCM_ACCObjHozDstY || item == FCM_FrntFarObjHozDstY){
 8007198:	2c05      	cmp	r4, #5
 800719a:	d001      	beq.n	80071a0 <LCD_FCM_7_item+0x50>
 800719c:	2c09      	cmp	r4, #9
 800719e:	d13e      	bne.n	800721e <LCD_FCM_7_item+0xce>
            LCD_ShowNum(m_value * 10 - 50);
 80071a0:	9801      	ldr	r0, [sp, #4]
 80071a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80071a6:	0040      	lsls	r0, r0, #1
 80071a8:	3832      	subs	r0, #50	@ 0x32
 80071aa:	f7fb fed9 	bl	8002f60 <LCD_ShowNum>
    item = GET_MENU(item+1, FCM_7_ITEM_MAX);
 80071ae:	2c08      	cmp	r4, #8
 80071b0:	d939      	bls.n	8007226 <LCD_FCM_7_item+0xd6>
 80071b2:	3c09      	subs	r4, #9
 80071b4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80071b6:	208b      	movs	r0, #139	@ 0x8b
 80071b8:	f7fb fdac 	bl	8002d14 <write_com>
    hzkdis(FCM_7Item[item]);
 80071bc:	4b22      	ldr	r3, [pc, #136]	@ (8007248 <LCD_FCM_7_item+0xf8>)
 80071be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80071c2:	f7fb fdd7 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 80071c6:	209b      	movs	r0, #155	@ 0x9b
 80071c8:	f7fb fda4 	bl	8002d14 <write_com>
    m_value = g_FCM_7[item];
 80071cc:	4b1f      	ldr	r3, [pc, #124]	@ (800724c <LCD_FCM_7_item+0xfc>)
 80071ce:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80071d2:	9301      	str	r3, [sp, #4]
    flag = 0;
 80071d4:	2300      	movs	r3, #0
 80071d6:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_FCM_7_item_Judge(item, &m_value, &flag);
 80071da:	f10d 0203 	add.w	r2, sp, #3
 80071de:	a901      	add	r1, sp, #4
 80071e0:	4620      	mov	r0, r4
 80071e2:	f7ff ff9b 	bl	800711c <LCD_FCM_7_item_Judge>
    if (flag == 0) {
 80071e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80071ea:	b1fb      	cbz	r3, 800722c <LCD_FCM_7_item+0xdc>
    	if(item == FCM_ACCObjHozDstY || item == FCM_FrntFarObjHozDstY){
 80071ec:	2c05      	cmp	r4, #5
 80071ee:	d001      	beq.n	80071f4 <LCD_FCM_7_item+0xa4>
 80071f0:	2c09      	cmp	r4, #9
 80071f2:	d124      	bne.n	800723e <LCD_FCM_7_item+0xee>
            LCD_ShowNum(m_value * 100 - 50);
 80071f4:	9801      	ldr	r0, [sp, #4]
 80071f6:	2364      	movs	r3, #100	@ 0x64
 80071f8:	fb03 f000 	mul.w	r0, r3, r0
 80071fc:	3832      	subs	r0, #50	@ 0x32
 80071fe:	f7fb feaf 	bl	8002f60 <LCD_ShowNum>
    write_com(0x93);
 8007202:	2093      	movs	r0, #147	@ 0x93
 8007204:	f7fb fd86 	bl	8002d14 <write_com>
}
 8007208:	b002      	add	sp, #8
 800720a:	bd10      	pop	{r4, pc}
        hzkdis(FCM_7Value[item][m_value]);
 800720c:	9b01      	ldr	r3, [sp, #4]
 800720e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8007212:	4a0f      	ldr	r2, [pc, #60]	@ (8007250 <LCD_FCM_7_item+0x100>)
 8007214:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007218:	f7fb fdac 	bl	8002d74 <hzkdis>
 800721c:	e7c7      	b.n	80071ae <LCD_FCM_7_item+0x5e>
    		LCD_ShowNum(m_value);
 800721e:	9801      	ldr	r0, [sp, #4]
 8007220:	f7fb fe9e 	bl	8002f60 <LCD_ShowNum>
 8007224:	e7c3      	b.n	80071ae <LCD_FCM_7_item+0x5e>
    item = GET_MENU(item+1, FCM_7_ITEM_MAX);
 8007226:	3401      	adds	r4, #1
 8007228:	b2e4      	uxtb	r4, r4
 800722a:	e7c4      	b.n	80071b6 <LCD_FCM_7_item+0x66>
        hzkdis(FCM_7Value[item][m_value]);
 800722c:	9b01      	ldr	r3, [sp, #4]
 800722e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8007232:	4a07      	ldr	r2, [pc, #28]	@ (8007250 <LCD_FCM_7_item+0x100>)
 8007234:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007238:	f7fb fd9c 	bl	8002d74 <hzkdis>
 800723c:	e7e1      	b.n	8007202 <LCD_FCM_7_item+0xb2>
    		LCD_ShowNum(m_value);
 800723e:	9801      	ldr	r0, [sp, #4]
 8007240:	f7fb fe8e 	bl	8002f60 <LCD_ShowNum>
 8007244:	e7dd      	b.n	8007202 <LCD_FCM_7_item+0xb2>
 8007246:	bf00      	nop
 8007248:	200026b0 	.word	0x200026b0
 800724c:	20006518 	.word	0x20006518
 8007250:	20002430 	.word	0x20002430

08007254 <LCD_FCM_8_item_Judge>:
void LCD_FCM_8_item_Judge(uint8_t item, uint32_t *m_value, uint8_t *flag){
 8007254:	3802      	subs	r0, #2
 8007256:	2807      	cmp	r0, #7
 8007258:	d80e      	bhi.n	8007278 <LCD_FCM_8_item_Judge+0x24>
 800725a:	e8df f000 	tbb	[pc, r0]
 800725e:	0d04      	.short	0x0d04
 8007260:	0d040b0b 	.word	0x0d040b0b
 8007264:	0b0b      	.short	0x0b0b
		if(*m_value >= 5 && *m_value <= 7){
 8007266:	680b      	ldr	r3, [r1, #0]
 8007268:	3b05      	subs	r3, #5
 800726a:	2b02      	cmp	r3, #2
 800726c:	d804      	bhi.n	8007278 <LCD_FCM_8_item_Judge+0x24>
			*m_value = 5;
 800726e:	2305      	movs	r3, #5
 8007270:	600b      	str	r3, [r1, #0]
 8007272:	4770      	bx	lr
		*flag = 1;
 8007274:	2301      	movs	r3, #1
 8007276:	7013      	strb	r3, [r2, #0]
}
 8007278:	4770      	bx	lr
	...

0800727c <LCD_FCM_8_item>:
{
 800727c:	b510      	push	{r4, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	4604      	mov	r4, r0
    item = GET_MENU(item, FCM_8_ITEM_MAX);
 8007282:	2809      	cmp	r0, #9
 8007284:	d902      	bls.n	800728c <LCD_FCM_8_item+0x10>
 8007286:	f1a0 040a 	sub.w	r4, r0, #10
 800728a:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 800728c:	2083      	movs	r0, #131	@ 0x83
 800728e:	f7fb fd41 	bl	8002d14 <write_com>
    hzkdis(FCM_8Item[item]);
 8007292:	4b38      	ldr	r3, [pc, #224]	@ (8007374 <LCD_FCM_8_item+0xf8>)
 8007294:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007298:	f7fb fd6c 	bl	8002d74 <hzkdis>
    write_com(0x93);
 800729c:	2093      	movs	r0, #147	@ 0x93
 800729e:	f7fb fd39 	bl	8002d14 <write_com>
    uint32_t m_value = g_FCM_8[item];
 80072a2:	4b35      	ldr	r3, [pc, #212]	@ (8007378 <LCD_FCM_8_item+0xfc>)
 80072a4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80072a8:	9301      	str	r3, [sp, #4]
    uint8_t flag = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_FCM_8_item_Judge(item, &m_value, &flag);
 80072b0:	f10d 0203 	add.w	r2, sp, #3
 80072b4:	a901      	add	r1, sp, #4
 80072b6:	4620      	mov	r0, r4
 80072b8:	f7ff ffcc 	bl	8007254 <LCD_FCM_8_item_Judge>
    if (flag == 0) {
 80072bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d039      	beq.n	8007338 <LCD_FCM_8_item+0xbc>
    	if(item == FCM_LeObjHozDstY || item == FCM_RiObjHozDstY){
 80072c4:	2c05      	cmp	r4, #5
 80072c6:	d001      	beq.n	80072cc <LCD_FCM_8_item+0x50>
 80072c8:	2c09      	cmp	r4, #9
 80072ca:	d13e      	bne.n	800734a <LCD_FCM_8_item+0xce>
            LCD_ShowNum(m_value * 10 - 50);
 80072cc:	9801      	ldr	r0, [sp, #4]
 80072ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80072d2:	0040      	lsls	r0, r0, #1
 80072d4:	3832      	subs	r0, #50	@ 0x32
 80072d6:	f7fb fe43 	bl	8002f60 <LCD_ShowNum>
    item = GET_MENU(item+1, FCM_8_ITEM_MAX);
 80072da:	2c08      	cmp	r4, #8
 80072dc:	d939      	bls.n	8007352 <LCD_FCM_8_item+0xd6>
 80072de:	3c09      	subs	r4, #9
 80072e0:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80072e2:	208b      	movs	r0, #139	@ 0x8b
 80072e4:	f7fb fd16 	bl	8002d14 <write_com>
    hzkdis(FCM_8Item[item]);
 80072e8:	4b22      	ldr	r3, [pc, #136]	@ (8007374 <LCD_FCM_8_item+0xf8>)
 80072ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80072ee:	f7fb fd41 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 80072f2:	209b      	movs	r0, #155	@ 0x9b
 80072f4:	f7fb fd0e 	bl	8002d14 <write_com>
    m_value = g_FCM_8[item];
 80072f8:	4b1f      	ldr	r3, [pc, #124]	@ (8007378 <LCD_FCM_8_item+0xfc>)
 80072fa:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80072fe:	9301      	str	r3, [sp, #4]
    flag = 0;
 8007300:	2300      	movs	r3, #0
 8007302:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_FCM_8_item_Judge(item, &m_value, &flag);
 8007306:	f10d 0203 	add.w	r2, sp, #3
 800730a:	a901      	add	r1, sp, #4
 800730c:	4620      	mov	r0, r4
 800730e:	f7ff ffa1 	bl	8007254 <LCD_FCM_8_item_Judge>
    if (flag == 0) {
 8007312:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007316:	b1fb      	cbz	r3, 8007358 <LCD_FCM_8_item+0xdc>
    	if(item == FCM_LeObjHozDstY || item == FCM_RiObjHozDstY){
 8007318:	2c05      	cmp	r4, #5
 800731a:	d001      	beq.n	8007320 <LCD_FCM_8_item+0xa4>
 800731c:	2c09      	cmp	r4, #9
 800731e:	d124      	bne.n	800736a <LCD_FCM_8_item+0xee>
            LCD_ShowNum(m_value * 10 - 50);
 8007320:	9801      	ldr	r0, [sp, #4]
 8007322:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007326:	0040      	lsls	r0, r0, #1
 8007328:	3832      	subs	r0, #50	@ 0x32
 800732a:	f7fb fe19 	bl	8002f60 <LCD_ShowNum>
    write_com(0x93);
 800732e:	2093      	movs	r0, #147	@ 0x93
 8007330:	f7fb fcf0 	bl	8002d14 <write_com>
}
 8007334:	b002      	add	sp, #8
 8007336:	bd10      	pop	{r4, pc}
        hzkdis(FCM_8Value[item][m_value]);
 8007338:	9b01      	ldr	r3, [sp, #4]
 800733a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800733e:	4a0f      	ldr	r2, [pc, #60]	@ (800737c <LCD_FCM_8_item+0x100>)
 8007340:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007344:	f7fb fd16 	bl	8002d74 <hzkdis>
 8007348:	e7c7      	b.n	80072da <LCD_FCM_8_item+0x5e>
    		LCD_ShowNum(m_value);
 800734a:	9801      	ldr	r0, [sp, #4]
 800734c:	f7fb fe08 	bl	8002f60 <LCD_ShowNum>
 8007350:	e7c3      	b.n	80072da <LCD_FCM_8_item+0x5e>
    item = GET_MENU(item+1, FCM_8_ITEM_MAX);
 8007352:	3401      	adds	r4, #1
 8007354:	b2e4      	uxtb	r4, r4
 8007356:	e7c4      	b.n	80072e2 <LCD_FCM_8_item+0x66>
        hzkdis(FCM_8Value[item][m_value]);
 8007358:	9b01      	ldr	r3, [sp, #4]
 800735a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800735e:	4a07      	ldr	r2, [pc, #28]	@ (800737c <LCD_FCM_8_item+0x100>)
 8007360:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007364:	f7fb fd06 	bl	8002d74 <hzkdis>
 8007368:	e7e1      	b.n	800732e <LCD_FCM_8_item+0xb2>
    		LCD_ShowNum(m_value);
 800736a:	9801      	ldr	r0, [sp, #4]
 800736c:	f7fb fdf8 	bl	8002f60 <LCD_ShowNum>
 8007370:	e7dd      	b.n	800732e <LCD_FCM_8_item+0xb2>
 8007372:	bf00      	nop
 8007374:	200023f4 	.word	0x200023f4
 8007378:	20006504 	.word	0x20006504
 800737c:	20002174 	.word	0x20002174

08007380 <LCD_GW_PC_1_item_Judge>:
	if(item == 0){
 8007380:	b9d0      	cbnz	r0, 80073b8 <LCD_GW_PC_1_item_Judge+0x38>
		if((*m_value >= 0 && *m_value <= 5) || (*m_value == 7)){
 8007382:	680b      	ldr	r3, [r1, #0]
 8007384:	2b0f      	cmp	r3, #15
 8007386:	d814      	bhi.n	80073b2 <LCD_GW_PC_1_item_Judge+0x32>
 8007388:	e8df f003 	tbb	[pc, r3]
 800738c:	08080808 	.word	0x08080808
 8007390:	08130808 	.word	0x08130808
 8007394:	0d0d0d0d 	.word	0x0d0d0d0d
 8007398:	1013130d 	.word	0x1013130d
			if(*m_value == 7){
 800739c:	2b07      	cmp	r3, #7
 800739e:	d110      	bne.n	80073c2 <LCD_GW_PC_1_item_Judge+0x42>
				*m_value = 6;
 80073a0:	2306      	movs	r3, #6
 80073a2:	600b      	str	r3, [r1, #0]
 80073a4:	4770      	bx	lr
			*m_value = 7;
 80073a6:	2307      	movs	r3, #7
 80073a8:	600b      	str	r3, [r1, #0]
 80073aa:	4770      	bx	lr
			*m_value = 8;
 80073ac:	2308      	movs	r3, #8
 80073ae:	600b      	str	r3, [r1, #0]
 80073b0:	4770      	bx	lr
			*flag = 1;
 80073b2:	2301      	movs	r3, #1
 80073b4:	7013      	strb	r3, [r2, #0]
 80073b6:	4770      	bx	lr
	else if(item == 2){
 80073b8:	2802      	cmp	r0, #2
 80073ba:	d003      	beq.n	80073c4 <LCD_GW_PC_1_item_Judge+0x44>
	else if(item == EMS_2_EngineSpeed){
 80073bc:	2803      	cmp	r0, #3
 80073be:	f000 8098 	beq.w	80074f2 <LCD_GW_PC_1_item_Judge+0x172>
}
 80073c2:	4770      	bx	lr
		if(*m_value >= 0 && *m_value <= 0x0A){
 80073c4:	680b      	ldr	r3, [r1, #0]
 80073c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80073c8:	f200 8090 	bhi.w	80074ec <LCD_GW_PC_1_item_Judge+0x16c>
 80073cc:	a001      	add	r0, pc, #4	@ (adr r0, 80073d4 <LCD_GW_PC_1_item_Judge+0x54>)
 80073ce:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80073d2:	bf00      	nop
 80073d4:	080073c3 	.word	0x080073c3
 80073d8:	080073c3 	.word	0x080073c3
 80073dc:	080073c3 	.word	0x080073c3
 80073e0:	080073c3 	.word	0x080073c3
 80073e4:	080073c3 	.word	0x080073c3
 80073e8:	080073c3 	.word	0x080073c3
 80073ec:	080073c3 	.word	0x080073c3
 80073f0:	080073c3 	.word	0x080073c3
 80073f4:	080073c3 	.word	0x080073c3
 80073f8:	080073c3 	.word	0x080073c3
 80073fc:	080073c3 	.word	0x080073c3
 8007400:	080074d5 	.word	0x080074d5
 8007404:	080074d5 	.word	0x080074d5
 8007408:	080074d5 	.word	0x080074d5
 800740c:	080074d5 	.word	0x080074d5
 8007410:	080074d5 	.word	0x080074d5
 8007414:	080074db 	.word	0x080074db
 8007418:	080074db 	.word	0x080074db
 800741c:	080074db 	.word	0x080074db
 8007420:	080074db 	.word	0x080074db
 8007424:	080074e1 	.word	0x080074e1
 8007428:	080074e1 	.word	0x080074e1
 800742c:	080074e1 	.word	0x080074e1
 8007430:	080074e1 	.word	0x080074e1
 8007434:	080074e1 	.word	0x080074e1
 8007438:	080074e1 	.word	0x080074e1
 800743c:	080074e1 	.word	0x080074e1
 8007440:	080074e1 	.word	0x080074e1
 8007444:	080074e1 	.word	0x080074e1
 8007448:	080074e1 	.word	0x080074e1
 800744c:	080074e1 	.word	0x080074e1
 8007450:	080074e1 	.word	0x080074e1
 8007454:	080074e1 	.word	0x080074e1
 8007458:	080074e1 	.word	0x080074e1
 800745c:	080074e1 	.word	0x080074e1
 8007460:	080074e1 	.word	0x080074e1
 8007464:	080074e1 	.word	0x080074e1
 8007468:	080074e1 	.word	0x080074e1
 800746c:	080074e1 	.word	0x080074e1
 8007470:	080074e1 	.word	0x080074e1
 8007474:	080074e1 	.word	0x080074e1
 8007478:	080074e1 	.word	0x080074e1
 800747c:	080074e1 	.word	0x080074e1
 8007480:	080074e1 	.word	0x080074e1
 8007484:	080074e1 	.word	0x080074e1
 8007488:	080074e1 	.word	0x080074e1
 800748c:	080074e1 	.word	0x080074e1
 8007490:	080074e1 	.word	0x080074e1
 8007494:	080074e1 	.word	0x080074e1
 8007498:	080074e1 	.word	0x080074e1
 800749c:	080074e1 	.word	0x080074e1
 80074a0:	080074e1 	.word	0x080074e1
 80074a4:	080074e1 	.word	0x080074e1
 80074a8:	080074e1 	.word	0x080074e1
 80074ac:	080074e1 	.word	0x080074e1
 80074b0:	080074e1 	.word	0x080074e1
 80074b4:	080074e1 	.word	0x080074e1
 80074b8:	080074e1 	.word	0x080074e1
 80074bc:	080074e1 	.word	0x080074e1
 80074c0:	080074e1 	.word	0x080074e1
 80074c4:	080074e1 	.word	0x080074e1
 80074c8:	080074e1 	.word	0x080074e1
 80074cc:	080074e1 	.word	0x080074e1
 80074d0:	080074e7 	.word	0x080074e7
			*m_value = 11;
 80074d4:	230b      	movs	r3, #11
 80074d6:	600b      	str	r3, [r1, #0]
 80074d8:	4770      	bx	lr
			*m_value -= 4;
 80074da:	3b04      	subs	r3, #4
 80074dc:	600b      	str	r3, [r1, #0]
 80074de:	4770      	bx	lr
			*m_value = 16;
 80074e0:	2310      	movs	r3, #16
 80074e2:	600b      	str	r3, [r1, #0]
 80074e4:	4770      	bx	lr
			*m_value = 17;
 80074e6:	2311      	movs	r3, #17
 80074e8:	600b      	str	r3, [r1, #0]
 80074ea:	4770      	bx	lr
			*flag = 1;
 80074ec:	2301      	movs	r3, #1
 80074ee:	7013      	strb	r3, [r2, #0]
 80074f0:	4770      	bx	lr
		*flag = 1;
 80074f2:	2301      	movs	r3, #1
 80074f4:	7013      	strb	r3, [r2, #0]
}
 80074f6:	e764      	b.n	80073c2 <LCD_GW_PC_1_item_Judge+0x42>

080074f8 <LCD_GW_PC_1_item>:
{
 80074f8:	b530      	push	{r4, r5, lr}
 80074fa:	b083      	sub	sp, #12
 80074fc:	4604      	mov	r4, r0
    item = GET_MENU(item, GW_PC_1_ITEM_MAX);
 80074fe:	2809      	cmp	r0, #9
 8007500:	d902      	bls.n	8007508 <LCD_GW_PC_1_item+0x10>
 8007502:	f1a0 040a 	sub.w	r4, r0, #10
 8007506:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8007508:	2083      	movs	r0, #131	@ 0x83
 800750a:	f7fb fc03 	bl	8002d14 <write_com>
    hzkdis(GW_PC_1Item[item]);
 800750e:	4b3a      	ldr	r3, [pc, #232]	@ (80075f8 <LCD_GW_PC_1_item+0x100>)
 8007510:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007514:	f7fb fc2e 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8007518:	2093      	movs	r0, #147	@ 0x93
 800751a:	f7fb fbfb 	bl	8002d14 <write_com>
    uint32_t m_value = g_GW_PC_1[item];
 800751e:	4b37      	ldr	r3, [pc, #220]	@ (80075fc <LCD_GW_PC_1_item+0x104>)
 8007520:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8007524:	9301      	str	r3, [sp, #4]
    uint8_t flag = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_GW_PC_1_item_Judge(item, &m_value, &flag);
 800752c:	f10d 0203 	add.w	r2, sp, #3
 8007530:	a901      	add	r1, sp, #4
 8007532:	4620      	mov	r0, r4
 8007534:	f7ff ff24 	bl	8007380 <LCD_GW_PC_1_item_Judge>
    if (flag == 0) {
 8007538:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800753c:	b38b      	cbz	r3, 80075a2 <LCD_GW_PC_1_item+0xaa>
    	if(item == EMS_2_EngineSpeed){
 800753e:	2c03      	cmp	r4, #3
 8007540:	d03a      	beq.n	80075b8 <LCD_GW_PC_1_item+0xc0>
			LCD_ShowNum(g_GW_PC_1[item]);
 8007542:	4b2e      	ldr	r3, [pc, #184]	@ (80075fc <LCD_GW_PC_1_item+0x104>)
 8007544:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8007548:	f7fb fd0a 	bl	8002f60 <LCD_ShowNum>
    item = GET_MENU(item+1, GW_PC_1_ITEM_MAX);
 800754c:	2c08      	cmp	r4, #8
 800754e:	d93c      	bls.n	80075ca <LCD_GW_PC_1_item+0xd2>
 8007550:	3c09      	subs	r4, #9
 8007552:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8007554:	208b      	movs	r0, #139	@ 0x8b
 8007556:	f7fb fbdd 	bl	8002d14 <write_com>
    hzkdis(GW_PC_1Item[item]);
 800755a:	4b27      	ldr	r3, [pc, #156]	@ (80075f8 <LCD_GW_PC_1_item+0x100>)
 800755c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007560:	f7fb fc08 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8007564:	209b      	movs	r0, #155	@ 0x9b
 8007566:	f7fb fbd5 	bl	8002d14 <write_com>
    m_value = g_GW_PC_1[item];
 800756a:	4b24      	ldr	r3, [pc, #144]	@ (80075fc <LCD_GW_PC_1_item+0x104>)
 800756c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8007570:	9301      	str	r3, [sp, #4]
    flag = 0;
 8007572:	2300      	movs	r3, #0
 8007574:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_GW_PC_1_item_Judge(item, &m_value, &flag);
 8007578:	f10d 0203 	add.w	r2, sp, #3
 800757c:	a901      	add	r1, sp, #4
 800757e:	4620      	mov	r0, r4
 8007580:	f7ff fefe 	bl	8007380 <LCD_GW_PC_1_item_Judge>
    if (flag == 0) {
 8007584:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007588:	b313      	cbz	r3, 80075d0 <LCD_GW_PC_1_item+0xd8>
    	if(item == EMS_2_EngineSpeed){
 800758a:	2c03      	cmp	r4, #3
 800758c:	d02b      	beq.n	80075e6 <LCD_GW_PC_1_item+0xee>
			LCD_ShowNum(g_GW_PC_1[item]);
 800758e:	4b1b      	ldr	r3, [pc, #108]	@ (80075fc <LCD_GW_PC_1_item+0x104>)
 8007590:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8007594:	f7fb fce4 	bl	8002f60 <LCD_ShowNum>
    write_com(0x93);
 8007598:	2093      	movs	r0, #147	@ 0x93
 800759a:	f7fb fbbb 	bl	8002d14 <write_com>
}
 800759e:	b003      	add	sp, #12
 80075a0:	bd30      	pop	{r4, r5, pc}
        hzkdis(GW_PC_1Value[item][m_value]);
 80075a2:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 80075a6:	9b01      	ldr	r3, [sp, #4]
 80075a8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80075ac:	4a14      	ldr	r2, [pc, #80]	@ (8007600 <LCD_GW_PC_1_item+0x108>)
 80075ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80075b2:	f7fb fbdf 	bl	8002d74 <hzkdis>
 80075b6:	e7c9      	b.n	800754c <LCD_GW_PC_1_item+0x54>
			LCD_ShowNum(g_GW_PC_1[item] * 100);
 80075b8:	4b10      	ldr	r3, [pc, #64]	@ (80075fc <LCD_GW_PC_1_item+0x104>)
 80075ba:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80075be:	2064      	movs	r0, #100	@ 0x64
 80075c0:	fb03 f000 	mul.w	r0, r3, r0
 80075c4:	f7fb fccc 	bl	8002f60 <LCD_ShowNum>
 80075c8:	e7c0      	b.n	800754c <LCD_GW_PC_1_item+0x54>
    item = GET_MENU(item+1, GW_PC_1_ITEM_MAX);
 80075ca:	3401      	adds	r4, #1
 80075cc:	b2e4      	uxtb	r4, r4
 80075ce:	e7c1      	b.n	8007554 <LCD_GW_PC_1_item+0x5c>
        hzkdis(GW_PC_1Value[item][m_value]);
 80075d0:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 80075d4:	9b01      	ldr	r3, [sp, #4]
 80075d6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80075da:	4a09      	ldr	r2, [pc, #36]	@ (8007600 <LCD_GW_PC_1_item+0x108>)
 80075dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80075e0:	f7fb fbc8 	bl	8002d74 <hzkdis>
 80075e4:	e7d8      	b.n	8007598 <LCD_GW_PC_1_item+0xa0>
			LCD_ShowNum(g_GW_PC_1[item] * 100);
 80075e6:	4b05      	ldr	r3, [pc, #20]	@ (80075fc <LCD_GW_PC_1_item+0x104>)
 80075e8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80075ec:	2064      	movs	r0, #100	@ 0x64
 80075ee:	fb03 f000 	mul.w	r0, r3, r0
 80075f2:	f7fb fcb5 	bl	8002f60 <LCD_ShowNum>
 80075f6:	e7cf      	b.n	8007598 <LCD_GW_PC_1_item+0xa0>
 80075f8:	20002138 	.word	0x20002138
 80075fc:	200064f0 	.word	0x200064f0
 8007600:	20001e68 	.word	0x20001e68

08007604 <LCD_GW_PC_6_item_Judge>:
	if(item == 0){
 8007604:	b920      	cbnz	r0, 8007610 <LCD_GW_PC_6_item_Judge+0xc>
		if(*m_value >= 4){
 8007606:	680b      	ldr	r3, [r1, #0]
 8007608:	2b03      	cmp	r3, #3
 800760a:	d901      	bls.n	8007610 <LCD_GW_PC_6_item_Judge+0xc>
			*m_value = 4;
 800760c:	2304      	movs	r3, #4
 800760e:	600b      	str	r3, [r1, #0]
}
 8007610:	4770      	bx	lr
	...

08007614 <LCD_GW_PC_6_item>:
{
 8007614:	b510      	push	{r4, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	4604      	mov	r4, r0
    item = GET_MENU(item, GW_PC_6_ITEM_MAX);
 800761a:	2801      	cmp	r0, #1
 800761c:	d901      	bls.n	8007622 <LCD_GW_PC_6_item+0xe>
 800761e:	1e84      	subs	r4, r0, #2
 8007620:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8007622:	2083      	movs	r0, #131	@ 0x83
 8007624:	f7fb fb76 	bl	8002d14 <write_com>
    hzkdis(GW_PC_6Item[item]);
 8007628:	4b2a      	ldr	r3, [pc, #168]	@ (80076d4 <LCD_GW_PC_6_item+0xc0>)
 800762a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800762e:	f7fb fba1 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8007632:	2093      	movs	r0, #147	@ 0x93
 8007634:	f7fb fb6e 	bl	8002d14 <write_com>
    uint32_t m_value = g_GW_PC_6[item];
 8007638:	4b27      	ldr	r3, [pc, #156]	@ (80076d8 <LCD_GW_PC_6_item+0xc4>)
 800763a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800763e:	9301      	str	r3, [sp, #4]
    uint8_t flag = 0;
 8007640:	2300      	movs	r3, #0
 8007642:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_GW_PC_6_item_Judge(item, &m_value, &flag);
 8007646:	f10d 0203 	add.w	r2, sp, #3
 800764a:	a901      	add	r1, sp, #4
 800764c:	4620      	mov	r0, r4
 800764e:	f7ff ffd9 	bl	8007604 <LCD_GW_PC_6_item_Judge>
    if (flag == 0) {
 8007652:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007656:	bb93      	cbnz	r3, 80076be <LCD_GW_PC_6_item+0xaa>
        hzkdis(GW_PC_6Value[item][m_value]);
 8007658:	9b01      	ldr	r3, [sp, #4]
 800765a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800765e:	4a1f      	ldr	r2, [pc, #124]	@ (80076dc <LCD_GW_PC_6_item+0xc8>)
 8007660:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007664:	f7fb fb86 	bl	8002d74 <hzkdis>
    item = GET_MENU(item+1, GW_PC_6_ITEM_MAX);
 8007668:	b36c      	cbz	r4, 80076c6 <LCD_GW_PC_6_item+0xb2>
 800766a:	3c01      	subs	r4, #1
 800766c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800766e:	208b      	movs	r0, #139	@ 0x8b
 8007670:	f7fb fb50 	bl	8002d14 <write_com>
    hzkdis(GW_PC_6Item[item]);
 8007674:	4b17      	ldr	r3, [pc, #92]	@ (80076d4 <LCD_GW_PC_6_item+0xc0>)
 8007676:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800767a:	f7fb fb7b 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 800767e:	209b      	movs	r0, #155	@ 0x9b
 8007680:	f7fb fb48 	bl	8002d14 <write_com>
    m_value = g_GW_PC_6[item];
 8007684:	4b14      	ldr	r3, [pc, #80]	@ (80076d8 <LCD_GW_PC_6_item+0xc4>)
 8007686:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800768a:	9301      	str	r3, [sp, #4]
	flag = 0;
 800768c:	2300      	movs	r3, #0
 800768e:	f88d 3003 	strb.w	r3, [sp, #3]
	LCD_GW_PC_6_item_Judge(item, &m_value, &flag);
 8007692:	f10d 0203 	add.w	r2, sp, #3
 8007696:	a901      	add	r1, sp, #4
 8007698:	4620      	mov	r0, r4
 800769a:	f7ff ffb3 	bl	8007604 <LCD_GW_PC_6_item_Judge>
	if (flag == 0) {
 800769e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80076a2:	b99b      	cbnz	r3, 80076cc <LCD_GW_PC_6_item+0xb8>
		hzkdis(GW_PC_6Value[item][m_value]);
 80076a4:	9b01      	ldr	r3, [sp, #4]
 80076a6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80076aa:	4a0c      	ldr	r2, [pc, #48]	@ (80076dc <LCD_GW_PC_6_item+0xc8>)
 80076ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80076b0:	f7fb fb60 	bl	8002d74 <hzkdis>
    write_com(0x93);
 80076b4:	2093      	movs	r0, #147	@ 0x93
 80076b6:	f7fb fb2d 	bl	8002d14 <write_com>
}
 80076ba:	b002      	add	sp, #8
 80076bc:	bd10      	pop	{r4, pc}
		LCD_ShowNum(m_value);
 80076be:	9801      	ldr	r0, [sp, #4]
 80076c0:	f7fb fc4e 	bl	8002f60 <LCD_ShowNum>
 80076c4:	e7d0      	b.n	8007668 <LCD_GW_PC_6_item+0x54>
    item = GET_MENU(item+1, GW_PC_6_ITEM_MAX);
 80076c6:	3401      	adds	r4, #1
 80076c8:	b2e4      	uxtb	r4, r4
 80076ca:	e7d0      	b.n	800766e <LCD_GW_PC_6_item+0x5a>
		LCD_ShowNum(m_value);
 80076cc:	9801      	ldr	r0, [sp, #4]
 80076ce:	f7fb fc47 	bl	8002f60 <LCD_ShowNum>
 80076d2:	e7ef      	b.n	80076b4 <LCD_GW_PC_6_item+0xa0>
 80076d4:	20001e4c 	.word	0x20001e4c
 80076d8:	200064ec 	.word	0x200064ec
 80076dc:	20001dcc 	.word	0x20001dcc

080076e0 <LCD_GW_PC_2_item_Judge>:
	if(item == 1){
 80076e0:	2801      	cmp	r0, #1
 80076e2:	d008      	beq.n	80076f6 <LCD_GW_PC_2_item_Judge+0x16>
	else if(item == 0){
 80076e4:	b930      	cbnz	r0, 80076f4 <LCD_GW_PC_2_item_Judge+0x14>
		*m_value *= 10;
 80076e6:	680b      	ldr	r3, [r1, #0]
 80076e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	600b      	str	r3, [r1, #0]
		*flag = 1;
 80076f0:	2301      	movs	r3, #1
 80076f2:	7013      	strb	r3, [r2, #0]
}
 80076f4:	4770      	bx	lr
		if(*m_value <= (0x3CF1/85) && *m_value > (0x1E78/85)){
 80076f6:	680b      	ldr	r3, [r1, #0]
 80076f8:	f1a3 025c 	sub.w	r2, r3, #92	@ 0x5c
 80076fc:	2a5b      	cmp	r2, #91	@ 0x5b
 80076fe:	d802      	bhi.n	8007706 <LCD_GW_PC_2_item_Judge+0x26>
			*m_value = 0;
 8007700:	2300      	movs	r3, #0
 8007702:	600b      	str	r3, [r1, #0]
 8007704:	4770      	bx	lr
		else if(*m_value >= 0 && *m_value < (0x1E78/85)){
 8007706:	2b5a      	cmp	r3, #90	@ 0x5a
 8007708:	d802      	bhi.n	8007710 <LCD_GW_PC_2_item_Judge+0x30>
			*m_value = 1;
 800770a:	2301      	movs	r3, #1
 800770c:	600b      	str	r3, [r1, #0]
 800770e:	4770      	bx	lr
		else if(*m_value > (0x3CF1/85) && *m_value <= (0xFFFE/85)){
 8007710:	f1a3 00b8 	sub.w	r0, r3, #184	@ 0xb8
 8007714:	f240 224a 	movw	r2, #586	@ 0x24a
 8007718:	4290      	cmp	r0, r2
 800771a:	d802      	bhi.n	8007722 <LCD_GW_PC_2_item_Judge+0x42>
			*m_value = 2;
 800771c:	2302      	movs	r3, #2
 800771e:	600b      	str	r3, [r1, #0]
 8007720:	4770      	bx	lr
		else if(*m_value == (0x1E78/85)){
 8007722:	2b5b      	cmp	r3, #91	@ 0x5b
 8007724:	d002      	beq.n	800772c <LCD_GW_PC_2_item_Judge+0x4c>
			*m_value = 4;
 8007726:	2304      	movs	r3, #4
 8007728:	600b      	str	r3, [r1, #0]
 800772a:	4770      	bx	lr
			*m_value = 3;
 800772c:	2303      	movs	r3, #3
 800772e:	600b      	str	r3, [r1, #0]
 8007730:	4770      	bx	lr
	...

08007734 <LCD_GW_PC_2_item>:
{
 8007734:	b510      	push	{r4, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	4604      	mov	r4, r0
    item = GET_MENU(item, GW_PC_2_ITEM_MAX);
 800773a:	2808      	cmp	r0, #8
 800773c:	d902      	bls.n	8007744 <LCD_GW_PC_2_item+0x10>
 800773e:	f1a0 0409 	sub.w	r4, r0, #9
 8007742:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8007744:	2083      	movs	r0, #131	@ 0x83
 8007746:	f7fb fae5 	bl	8002d14 <write_com>
    hzkdis(GW_PC_2Item[item]);
 800774a:	4b2b      	ldr	r3, [pc, #172]	@ (80077f8 <LCD_GW_PC_2_item+0xc4>)
 800774c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007750:	f7fb fb10 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8007754:	2093      	movs	r0, #147	@ 0x93
 8007756:	f7fb fadd 	bl	8002d14 <write_com>
    uint32_t m_value = g_GW_PC_2[item];
 800775a:	4b28      	ldr	r3, [pc, #160]	@ (80077fc <LCD_GW_PC_2_item+0xc8>)
 800775c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8007760:	9301      	str	r3, [sp, #4]
    uint8_t flag = 0;
 8007762:	2300      	movs	r3, #0
 8007764:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_GW_PC_2_item_Judge(item, &m_value, &flag);
 8007768:	f10d 0203 	add.w	r2, sp, #3
 800776c:	a901      	add	r1, sp, #4
 800776e:	4620      	mov	r0, r4
 8007770:	f7ff ffb6 	bl	80076e0 <LCD_GW_PC_2_item_Judge>
    if (flag == 0) {
 8007774:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007778:	bb9b      	cbnz	r3, 80077e2 <LCD_GW_PC_2_item+0xae>
        hzkdis(GW_PC_2Value[item][m_value]);
 800777a:	9b01      	ldr	r3, [sp, #4]
 800777c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8007780:	4a1f      	ldr	r2, [pc, #124]	@ (8007800 <LCD_GW_PC_2_item+0xcc>)
 8007782:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007786:	f7fb faf5 	bl	8002d74 <hzkdis>
    item = GET_MENU(item+1, GW_PC_2_ITEM_MAX);
 800778a:	2c07      	cmp	r4, #7
 800778c:	d92d      	bls.n	80077ea <LCD_GW_PC_2_item+0xb6>
 800778e:	3c08      	subs	r4, #8
 8007790:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8007792:	208b      	movs	r0, #139	@ 0x8b
 8007794:	f7fb fabe 	bl	8002d14 <write_com>
    hzkdis(GW_PC_2Item[item]);
 8007798:	4b17      	ldr	r3, [pc, #92]	@ (80077f8 <LCD_GW_PC_2_item+0xc4>)
 800779a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800779e:	f7fb fae9 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 80077a2:	209b      	movs	r0, #155	@ 0x9b
 80077a4:	f7fb fab6 	bl	8002d14 <write_com>
    m_value = g_GW_PC_2[item];
 80077a8:	4b14      	ldr	r3, [pc, #80]	@ (80077fc <LCD_GW_PC_2_item+0xc8>)
 80077aa:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80077ae:	9301      	str	r3, [sp, #4]
    flag = 0;
 80077b0:	2300      	movs	r3, #0
 80077b2:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_GW_PC_2_item_Judge(item, &m_value, &flag);
 80077b6:	f10d 0203 	add.w	r2, sp, #3
 80077ba:	a901      	add	r1, sp, #4
 80077bc:	4620      	mov	r0, r4
 80077be:	f7ff ff8f 	bl	80076e0 <LCD_GW_PC_2_item_Judge>
    if (flag == 0) {
 80077c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80077c6:	b99b      	cbnz	r3, 80077f0 <LCD_GW_PC_2_item+0xbc>
        hzkdis(GW_PC_2Value[item][m_value]);
 80077c8:	9b01      	ldr	r3, [sp, #4]
 80077ca:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80077ce:	4a0c      	ldr	r2, [pc, #48]	@ (8007800 <LCD_GW_PC_2_item+0xcc>)
 80077d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80077d4:	f7fb face 	bl	8002d74 <hzkdis>
    write_com(0x93);
 80077d8:	2093      	movs	r0, #147	@ 0x93
 80077da:	f7fb fa9b 	bl	8002d14 <write_com>
}
 80077de:	b002      	add	sp, #8
 80077e0:	bd10      	pop	{r4, pc}
        LCD_ShowNum(m_value);
 80077e2:	9801      	ldr	r0, [sp, #4]
 80077e4:	f7fb fbbc 	bl	8002f60 <LCD_ShowNum>
 80077e8:	e7cf      	b.n	800778a <LCD_GW_PC_2_item+0x56>
    item = GET_MENU(item+1, GW_PC_2_ITEM_MAX);
 80077ea:	3401      	adds	r4, #1
 80077ec:	b2e4      	uxtb	r4, r4
 80077ee:	e7d0      	b.n	8007792 <LCD_GW_PC_2_item+0x5e>
        LCD_ShowNum(m_value);
 80077f0:	9801      	ldr	r0, [sp, #4]
 80077f2:	f7fb fbb5 	bl	8002f60 <LCD_ShowNum>
 80077f6:	e7ef      	b.n	80077d8 <LCD_GW_PC_2_item+0xa4>
 80077f8:	20001da4 	.word	0x20001da4
 80077fc:	20001b3c 	.word	0x20001b3c
 8007800:	20001b64 	.word	0x20001b64

08007804 <LCD_GW_BD_14_item_Judge>:
void LCD_GW_BD_14_item_Judge(uint8_t item, uint32_t *m_value, uint8_t *flag){
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	460c      	mov	r4, r1
 8007808:	4615      	mov	r5, r2
 800780a:	3802      	subs	r0, #2
 800780c:	2809      	cmp	r0, #9
 800780e:	f200 8089 	bhi.w	8007924 <LCD_GW_BD_14_item_Judge+0x120>
 8007812:	e8df f000 	tbb	[pc, r0]
 8007816:	4005      	.short	0x4005
 8007818:	87877b87 	.word	0x87877b87
 800781c:	82878787 	.word	0x82878787
		if(*m_value == 0){
 8007820:	680b      	ldr	r3, [r1, #0]
 8007822:	b90b      	cbnz	r3, 8007828 <LCD_GW_BD_14_item_Judge+0x24>
			*m_value = 0;
 8007824:	600b      	str	r3, [r1, #0]
 8007826:	e07d      	b.n	8007924 <LCD_GW_BD_14_item_Judge+0x120>
		else if(*m_value == 1){
 8007828:	2b01      	cmp	r3, #1
 800782a:	d015      	beq.n	8007858 <LCD_GW_BD_14_item_Judge+0x54>
		else if(*m_value >= 2 && *m_value <= 32){
 800782c:	1e98      	subs	r0, r3, #2
 800782e:	281e      	cmp	r0, #30
 8007830:	d824      	bhi.n	800787c <LCD_GW_BD_14_item_Judge+0x78>
			if((*m_value - 2) % 2 == 0){
 8007832:	f013 0f01 	tst.w	r3, #1
 8007836:	d111      	bne.n	800785c <LCD_GW_BD_14_item_Judge+0x58>
				*m_value = 16.5 + 0.5 * (*m_value - 2);
 8007838:	f7f8 fe44 	bl	80004c4 <__aeabi_ui2d>
 800783c:	2200      	movs	r2, #0
 800783e:	4b3b      	ldr	r3, [pc, #236]	@ (800792c <LCD_GW_BD_14_item_Judge+0x128>)
 8007840:	f7f8 feba 	bl	80005b8 <__aeabi_dmul>
 8007844:	2200      	movs	r2, #0
 8007846:	4b3a      	ldr	r3, [pc, #232]	@ (8007930 <LCD_GW_BD_14_item_Judge+0x12c>)
 8007848:	f7f8 fd00 	bl	800024c <__adddf3>
 800784c:	f7f9 f98c 	bl	8000b68 <__aeabi_d2uiz>
 8007850:	6020      	str	r0, [r4, #0]
				*flag = 3;
 8007852:	2303      	movs	r3, #3
 8007854:	702b      	strb	r3, [r5, #0]
 8007856:	e065      	b.n	8007924 <LCD_GW_BD_14_item_Judge+0x120>
			*m_value = 1;
 8007858:	600b      	str	r3, [r1, #0]
 800785a:	e063      	b.n	8007924 <LCD_GW_BD_14_item_Judge+0x120>
				*m_value = 16.5 + 0.5 * (*m_value - 2);
 800785c:	f7f8 fe32 	bl	80004c4 <__aeabi_ui2d>
 8007860:	2200      	movs	r2, #0
 8007862:	4b32      	ldr	r3, [pc, #200]	@ (800792c <LCD_GW_BD_14_item_Judge+0x128>)
 8007864:	f7f8 fea8 	bl	80005b8 <__aeabi_dmul>
 8007868:	2200      	movs	r2, #0
 800786a:	4b31      	ldr	r3, [pc, #196]	@ (8007930 <LCD_GW_BD_14_item_Judge+0x12c>)
 800786c:	f7f8 fcee 	bl	800024c <__adddf3>
 8007870:	f7f9 f97a 	bl	8000b68 <__aeabi_d2uiz>
 8007874:	6020      	str	r0, [r4, #0]
				*flag = 2;
 8007876:	2302      	movs	r3, #2
 8007878:	702b      	strb	r3, [r5, #0]
 800787a:	e053      	b.n	8007924 <LCD_GW_BD_14_item_Judge+0x120>
		else if(*m_value == 0x3E){
 800787c:	2b3e      	cmp	r3, #62	@ 0x3e
 800787e:	d004      	beq.n	800788a <LCD_GW_BD_14_item_Judge+0x86>
		else if(*m_value == 0x3F){
 8007880:	2b3f      	cmp	r3, #63	@ 0x3f
 8007882:	d005      	beq.n	8007890 <LCD_GW_BD_14_item_Judge+0x8c>
			*flag = 1;
 8007884:	2301      	movs	r3, #1
 8007886:	7013      	strb	r3, [r2, #0]
 8007888:	e04c      	b.n	8007924 <LCD_GW_BD_14_item_Judge+0x120>
			*m_value = 2;
 800788a:	2302      	movs	r3, #2
 800788c:	600b      	str	r3, [r1, #0]
 800788e:	e049      	b.n	8007924 <LCD_GW_BD_14_item_Judge+0x120>
			*m_value = 3;
 8007890:	2303      	movs	r3, #3
 8007892:	600b      	str	r3, [r1, #0]
 8007894:	e046      	b.n	8007924 <LCD_GW_BD_14_item_Judge+0x120>
		if(*m_value == 0){
 8007896:	680b      	ldr	r3, [r1, #0]
 8007898:	b90b      	cbnz	r3, 800789e <LCD_GW_BD_14_item_Judge+0x9a>
			*m_value = 0;
 800789a:	600b      	str	r3, [r1, #0]
 800789c:	e042      	b.n	8007924 <LCD_GW_BD_14_item_Judge+0x120>
		else if(*m_value == 1){
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d015      	beq.n	80078ce <LCD_GW_BD_14_item_Judge+0xca>
		else if(*m_value >= 2 && *m_value <= 32){
 80078a2:	1e98      	subs	r0, r3, #2
 80078a4:	281e      	cmp	r0, #30
 80078a6:	d824      	bhi.n	80078f2 <LCD_GW_BD_14_item_Judge+0xee>
			if((*m_value - 2) % 2 == 0){
 80078a8:	f013 0f01 	tst.w	r3, #1
 80078ac:	d111      	bne.n	80078d2 <LCD_GW_BD_14_item_Judge+0xce>
				*m_value = 16.5 + 0.5 * (*m_value - 2);
 80078ae:	f7f8 fe09 	bl	80004c4 <__aeabi_ui2d>
 80078b2:	2200      	movs	r2, #0
 80078b4:	4b1d      	ldr	r3, [pc, #116]	@ (800792c <LCD_GW_BD_14_item_Judge+0x128>)
 80078b6:	f7f8 fe7f 	bl	80005b8 <__aeabi_dmul>
 80078ba:	2200      	movs	r2, #0
 80078bc:	4b1c      	ldr	r3, [pc, #112]	@ (8007930 <LCD_GW_BD_14_item_Judge+0x12c>)
 80078be:	f7f8 fcc5 	bl	800024c <__adddf3>
 80078c2:	f7f9 f951 	bl	8000b68 <__aeabi_d2uiz>
 80078c6:	6020      	str	r0, [r4, #0]
				*flag = 3;
 80078c8:	2303      	movs	r3, #3
 80078ca:	702b      	strb	r3, [r5, #0]
 80078cc:	e02a      	b.n	8007924 <LCD_GW_BD_14_item_Judge+0x120>
			*m_value = 1;
 80078ce:	600b      	str	r3, [r1, #0]
 80078d0:	e028      	b.n	8007924 <LCD_GW_BD_14_item_Judge+0x120>
				*m_value = 16.5 + 0.5 * (*m_value - 2);
 80078d2:	f7f8 fdf7 	bl	80004c4 <__aeabi_ui2d>
 80078d6:	2200      	movs	r2, #0
 80078d8:	4b14      	ldr	r3, [pc, #80]	@ (800792c <LCD_GW_BD_14_item_Judge+0x128>)
 80078da:	f7f8 fe6d 	bl	80005b8 <__aeabi_dmul>
 80078de:	2200      	movs	r2, #0
 80078e0:	4b13      	ldr	r3, [pc, #76]	@ (8007930 <LCD_GW_BD_14_item_Judge+0x12c>)
 80078e2:	f7f8 fcb3 	bl	800024c <__adddf3>
 80078e6:	f7f9 f93f 	bl	8000b68 <__aeabi_d2uiz>
 80078ea:	6020      	str	r0, [r4, #0]
				*flag = 2;
 80078ec:	2302      	movs	r3, #2
 80078ee:	702b      	strb	r3, [r5, #0]
 80078f0:	e018      	b.n	8007924 <LCD_GW_BD_14_item_Judge+0x120>
		else if(*m_value == 0x3E){
 80078f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80078f4:	d004      	beq.n	8007900 <LCD_GW_BD_14_item_Judge+0xfc>
		else if(*m_value == 0x3F){
 80078f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80078f8:	d005      	beq.n	8007906 <LCD_GW_BD_14_item_Judge+0x102>
			*flag = 1;
 80078fa:	2301      	movs	r3, #1
 80078fc:	7013      	strb	r3, [r2, #0]
 80078fe:	e011      	b.n	8007924 <LCD_GW_BD_14_item_Judge+0x120>
			*m_value = 2;
 8007900:	2302      	movs	r3, #2
 8007902:	600b      	str	r3, [r1, #0]
 8007904:	e00e      	b.n	8007924 <LCD_GW_BD_14_item_Judge+0x120>
			*m_value = 3;
 8007906:	2303      	movs	r3, #3
 8007908:	600b      	str	r3, [r1, #0]
 800790a:	e00b      	b.n	8007924 <LCD_GW_BD_14_item_Judge+0x120>
		if(*m_value >= 6 && *m_value <= 7){
 800790c:	680b      	ldr	r3, [r1, #0]
 800790e:	3b06      	subs	r3, #6
 8007910:	2b01      	cmp	r3, #1
 8007912:	d807      	bhi.n	8007924 <LCD_GW_BD_14_item_Judge+0x120>
			*m_value = 6;
 8007914:	2306      	movs	r3, #6
 8007916:	600b      	str	r3, [r1, #0]
 8007918:	e004      	b.n	8007924 <LCD_GW_BD_14_item_Judge+0x120>
		if(*m_value == 0xFF){
 800791a:	680b      	ldr	r3, [r1, #0]
 800791c:	2bff      	cmp	r3, #255	@ 0xff
 800791e:	d002      	beq.n	8007926 <LCD_GW_BD_14_item_Judge+0x122>
			*flag = 1;
 8007920:	2301      	movs	r3, #1
 8007922:	7013      	strb	r3, [r2, #0]
}
 8007924:	bd38      	pop	{r3, r4, r5, pc}
			*m_value = 0;
 8007926:	2300      	movs	r3, #0
 8007928:	600b      	str	r3, [r1, #0]
 800792a:	e7fb      	b.n	8007924 <LCD_GW_BD_14_item_Judge+0x120>
 800792c:	3fe00000 	.word	0x3fe00000
 8007930:	40308000 	.word	0x40308000

08007934 <LCD_GW_BD_14_item>:
{
 8007934:	b510      	push	{r4, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	4604      	mov	r4, r0
    item = GET_MENU(item, GW_BD_14_ITEM_MAX);
 800793a:	2816      	cmp	r0, #22
 800793c:	d902      	bls.n	8007944 <LCD_GW_BD_14_item+0x10>
 800793e:	f1a0 0417 	sub.w	r4, r0, #23
 8007942:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8007944:	2083      	movs	r0, #131	@ 0x83
 8007946:	f7fb f9e5 	bl	8002d14 <write_com>
    hzkdis(GW_BD_14Item[item]);
 800794a:	4b40      	ldr	r3, [pc, #256]	@ (8007a4c <LCD_GW_BD_14_item+0x118>)
 800794c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007950:	f7fb fa10 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8007954:	2093      	movs	r0, #147	@ 0x93
 8007956:	f7fb f9dd 	bl	8002d14 <write_com>
    uint32_t m_value = g_GW_BD_14[item];
 800795a:	4b3d      	ldr	r3, [pc, #244]	@ (8007a50 <LCD_GW_BD_14_item+0x11c>)
 800795c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8007960:	9301      	str	r3, [sp, #4]
    uint8_t flag = 0;
 8007962:	2300      	movs	r3, #0
 8007964:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_GW_BD_14_item_Judge(item, &m_value, &flag);
 8007968:	f10d 0203 	add.w	r2, sp, #3
 800796c:	a901      	add	r1, sp, #4
 800796e:	4620      	mov	r0, r4
 8007970:	f7ff ff48 	bl	8007804 <LCD_GW_BD_14_item_Judge>
    if (flag == 0) {
 8007974:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007978:	b143      	cbz	r3, 800798c <LCD_GW_BD_14_item+0x58>
    } else if(flag == 1) {
 800797a:	2b01      	cmp	r3, #1
 800797c:	d036      	beq.n	80079ec <LCD_GW_BD_14_item+0xb8>
    else if(flag ==2){
 800797e:	2b02      	cmp	r3, #2
 8007980:	d03f      	beq.n	8007a02 <LCD_GW_BD_14_item+0xce>
    	LCD_ShowNumdecimal(m_value, 1);
 8007982:	2101      	movs	r1, #1
 8007984:	9801      	ldr	r0, [sp, #4]
 8007986:	f7fb fa6d 	bl	8002e64 <LCD_ShowNumdecimal>
 800798a:	e007      	b.n	800799c <LCD_GW_BD_14_item+0x68>
        hzkdis(GW_BD_14Value[item][m_value]);
 800798c:	9b01      	ldr	r3, [sp, #4]
 800798e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8007992:	4a30      	ldr	r2, [pc, #192]	@ (8007a54 <LCD_GW_BD_14_item+0x120>)
 8007994:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007998:	f7fb f9ec 	bl	8002d74 <hzkdis>
    item = GET_MENU(item+1, GW_BD_14_ITEM_MAX);
 800799c:	2c15      	cmp	r4, #21
 800799e:	d935      	bls.n	8007a0c <LCD_GW_BD_14_item+0xd8>
 80079a0:	3c16      	subs	r4, #22
 80079a2:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80079a4:	208b      	movs	r0, #139	@ 0x8b
 80079a6:	f7fb f9b5 	bl	8002d14 <write_com>
    hzkdis(GW_BD_14Item[item]);
 80079aa:	4b28      	ldr	r3, [pc, #160]	@ (8007a4c <LCD_GW_BD_14_item+0x118>)
 80079ac:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80079b0:	f7fb f9e0 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 80079b4:	209b      	movs	r0, #155	@ 0x9b
 80079b6:	f7fb f9ad 	bl	8002d14 <write_com>
    m_value = g_GW_BD_14[item];
 80079ba:	4b25      	ldr	r3, [pc, #148]	@ (8007a50 <LCD_GW_BD_14_item+0x11c>)
 80079bc:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80079c0:	9301      	str	r3, [sp, #4]
    flag = 0;
 80079c2:	2300      	movs	r3, #0
 80079c4:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_GW_BD_14_item_Judge(item, &m_value, &flag);
 80079c8:	f10d 0203 	add.w	r2, sp, #3
 80079cc:	a901      	add	r1, sp, #4
 80079ce:	4620      	mov	r0, r4
 80079d0:	f7ff ff18 	bl	8007804 <LCD_GW_BD_14_item_Judge>
    if (flag == 0) {
 80079d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80079d8:	b1db      	cbz	r3, 8007a12 <LCD_GW_BD_14_item+0xde>
    } else if(flag == 1) {
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d026      	beq.n	8007a2c <LCD_GW_BD_14_item+0xf8>
    else if(flag ==2){
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d02f      	beq.n	8007a42 <LCD_GW_BD_14_item+0x10e>
    	LCD_ShowNumdecimal(m_value, 1);
 80079e2:	2101      	movs	r1, #1
 80079e4:	9801      	ldr	r0, [sp, #4]
 80079e6:	f7fb fa3d 	bl	8002e64 <LCD_ShowNumdecimal>
 80079ea:	e01a      	b.n	8007a22 <LCD_GW_BD_14_item+0xee>
    	if(item == 11){
 80079ec:	2c0b      	cmp	r4, #11
 80079ee:	d003      	beq.n	80079f8 <LCD_GW_BD_14_item+0xc4>
    		LCD_ShowNum(m_value);
 80079f0:	9801      	ldr	r0, [sp, #4]
 80079f2:	f7fb fab5 	bl	8002f60 <LCD_ShowNum>
 80079f6:	e7d1      	b.n	800799c <LCD_GW_BD_14_item+0x68>
    		LCD_ShowNum(tmp);
 80079f8:	9801      	ldr	r0, [sp, #4]
 80079fa:	3828      	subs	r0, #40	@ 0x28
 80079fc:	f7fb fab0 	bl	8002f60 <LCD_ShowNum>
 8007a00:	e7cc      	b.n	800799c <LCD_GW_BD_14_item+0x68>
    	LCD_ShowNumdecimal(m_value, 0);
 8007a02:	2100      	movs	r1, #0
 8007a04:	9801      	ldr	r0, [sp, #4]
 8007a06:	f7fb fa2d 	bl	8002e64 <LCD_ShowNumdecimal>
 8007a0a:	e7c7      	b.n	800799c <LCD_GW_BD_14_item+0x68>
    item = GET_MENU(item+1, GW_BD_14_ITEM_MAX);
 8007a0c:	3401      	adds	r4, #1
 8007a0e:	b2e4      	uxtb	r4, r4
 8007a10:	e7c8      	b.n	80079a4 <LCD_GW_BD_14_item+0x70>
        hzkdis(GW_BD_14Value[item][m_value]);
 8007a12:	9b01      	ldr	r3, [sp, #4]
 8007a14:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8007a18:	4a0e      	ldr	r2, [pc, #56]	@ (8007a54 <LCD_GW_BD_14_item+0x120>)
 8007a1a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007a1e:	f7fb f9a9 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8007a22:	2093      	movs	r0, #147	@ 0x93
 8007a24:	f7fb f976 	bl	8002d14 <write_com>
}
 8007a28:	b002      	add	sp, #8
 8007a2a:	bd10      	pop	{r4, pc}
    	if(item == 11){
 8007a2c:	2c0b      	cmp	r4, #11
 8007a2e:	d003      	beq.n	8007a38 <LCD_GW_BD_14_item+0x104>
    		LCD_ShowNum(m_value);
 8007a30:	9801      	ldr	r0, [sp, #4]
 8007a32:	f7fb fa95 	bl	8002f60 <LCD_ShowNum>
 8007a36:	e7f4      	b.n	8007a22 <LCD_GW_BD_14_item+0xee>
    		LCD_ShowNum(tmp);
 8007a38:	9801      	ldr	r0, [sp, #4]
 8007a3a:	3828      	subs	r0, #40	@ 0x28
 8007a3c:	f7fb fa90 	bl	8002f60 <LCD_ShowNum>
 8007a40:	e7ef      	b.n	8007a22 <LCD_GW_BD_14_item+0xee>
    	LCD_ShowNumdecimal(m_value, 0);
 8007a42:	2100      	movs	r1, #0
 8007a44:	9801      	ldr	r0, [sp, #4]
 8007a46:	f7fb fa0d 	bl	8002e64 <LCD_ShowNumdecimal>
 8007a4a:	e7ea      	b.n	8007a22 <LCD_GW_BD_14_item+0xee>
 8007a4c:	20001088 	.word	0x20001088
 8007a50:	20000a68 	.word	0x20000a68
 8007a54:	20000ac8 	.word	0x20000ac8

08007a58 <LCD_GW_BD_29_item_Judge>:
void LCD_GW_BD_29_item_Judge(uint8_t item, uint32_t *m_value, uint8_t *flag){
 8007a58:	280b      	cmp	r0, #11
 8007a5a:	d82f      	bhi.n	8007abc <LCD_GW_BD_29_item_Judge+0x64>
 8007a5c:	e8df f000 	tbb	[pc, r0]
 8007a60:	1e120606 	.word	0x1e120606
 8007a64:	2e2a2e2e 	.word	0x2e2a2e2e
 8007a68:	062e062e 	.word	0x062e062e
		if(*m_value >= 4 && *m_value <= 0x0E){
 8007a6c:	680b      	ldr	r3, [r1, #0]
 8007a6e:	1f1a      	subs	r2, r3, #4
 8007a70:	2a0a      	cmp	r2, #10
 8007a72:	d802      	bhi.n	8007a7a <LCD_GW_BD_29_item_Judge+0x22>
			*m_value = 4;
 8007a74:	2304      	movs	r3, #4
 8007a76:	600b      	str	r3, [r1, #0]
 8007a78:	4770      	bx	lr
		else if(*m_value == 0x0F){
 8007a7a:	2b0f      	cmp	r3, #15
 8007a7c:	d11e      	bne.n	8007abc <LCD_GW_BD_29_item_Judge+0x64>
			*m_value = 5;
 8007a7e:	2305      	movs	r3, #5
 8007a80:	600b      	str	r3, [r1, #0]
 8007a82:	4770      	bx	lr
		if(*m_value >= 4 && *m_value <= 6){
 8007a84:	680b      	ldr	r3, [r1, #0]
 8007a86:	1f1a      	subs	r2, r3, #4
 8007a88:	2a02      	cmp	r2, #2
 8007a8a:	d802      	bhi.n	8007a92 <LCD_GW_BD_29_item_Judge+0x3a>
			*m_value = 4;
 8007a8c:	2304      	movs	r3, #4
 8007a8e:	600b      	str	r3, [r1, #0]
 8007a90:	4770      	bx	lr
		else if(*m_value == 7){
 8007a92:	2b07      	cmp	r3, #7
 8007a94:	d112      	bne.n	8007abc <LCD_GW_BD_29_item_Judge+0x64>
			*m_value = 5;
 8007a96:	2305      	movs	r3, #5
 8007a98:	600b      	str	r3, [r1, #0]
 8007a9a:	4770      	bx	lr
		if(*m_value >= 4 && *m_value <= 0x0E){
 8007a9c:	680b      	ldr	r3, [r1, #0]
 8007a9e:	1f1a      	subs	r2, r3, #4
 8007aa0:	2a0a      	cmp	r2, #10
 8007aa2:	d802      	bhi.n	8007aaa <LCD_GW_BD_29_item_Judge+0x52>
			*m_value = 3;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	600b      	str	r3, [r1, #0]
 8007aa8:	4770      	bx	lr
		else if(*m_value == 0x0F){
 8007aaa:	2b0f      	cmp	r3, #15
 8007aac:	d106      	bne.n	8007abc <LCD_GW_BD_29_item_Judge+0x64>
			*m_value = 4;
 8007aae:	2304      	movs	r3, #4
 8007ab0:	600b      	str	r3, [r1, #0]
 8007ab2:	4770      	bx	lr
		if(*m_value >= 6 && *m_value <= 7){
 8007ab4:	680b      	ldr	r3, [r1, #0]
 8007ab6:	3b06      	subs	r3, #6
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d900      	bls.n	8007abe <LCD_GW_BD_29_item_Judge+0x66>
}
 8007abc:	4770      	bx	lr
			*m_value = 6;
 8007abe:	2306      	movs	r3, #6
 8007ac0:	600b      	str	r3, [r1, #0]
}
 8007ac2:	e7fb      	b.n	8007abc <LCD_GW_BD_29_item_Judge+0x64>

08007ac4 <LCD_GW_BD_29_item>:
{
 8007ac4:	b510      	push	{r4, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	4604      	mov	r4, r0
    item = GET_MENU(item, GW_BD_29_ITEM_MAX);
 8007aca:	280e      	cmp	r0, #14
 8007acc:	d902      	bls.n	8007ad4 <LCD_GW_BD_29_item+0x10>
 8007ace:	f1a0 040f 	sub.w	r4, r0, #15
 8007ad2:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8007ad4:	2083      	movs	r0, #131	@ 0x83
 8007ad6:	f7fb f91d 	bl	8002d14 <write_com>
    hzkdis(GW_BD_29Item[item]);
 8007ada:	4b2b      	ldr	r3, [pc, #172]	@ (8007b88 <LCD_GW_BD_29_item+0xc4>)
 8007adc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007ae0:	f7fb f948 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8007ae4:	2093      	movs	r0, #147	@ 0x93
 8007ae6:	f7fb f915 	bl	8002d14 <write_com>
    uint32_t m_value = g_GW_BD_29[item];
 8007aea:	4b28      	ldr	r3, [pc, #160]	@ (8007b8c <LCD_GW_BD_29_item+0xc8>)
 8007aec:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8007af0:	9301      	str	r3, [sp, #4]
    uint8_t flag = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_GW_BD_29_item_Judge(item, &m_value, &flag);
 8007af8:	f10d 0203 	add.w	r2, sp, #3
 8007afc:	a901      	add	r1, sp, #4
 8007afe:	4620      	mov	r0, r4
 8007b00:	f7ff ffaa 	bl	8007a58 <LCD_GW_BD_29_item_Judge>
    if (flag == 0) {
 8007b04:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007b08:	bb9b      	cbnz	r3, 8007b72 <LCD_GW_BD_29_item+0xae>
        hzkdis(GW_BD_29Value[item][m_value]);
 8007b0a:	9b01      	ldr	r3, [sp, #4]
 8007b0c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8007b10:	4a1f      	ldr	r2, [pc, #124]	@ (8007b90 <LCD_GW_BD_29_item+0xcc>)
 8007b12:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007b16:	f7fb f92d 	bl	8002d74 <hzkdis>
    item = GET_MENU(item+1, GW_BD_29_ITEM_MAX);
 8007b1a:	2c0d      	cmp	r4, #13
 8007b1c:	d92d      	bls.n	8007b7a <LCD_GW_BD_29_item+0xb6>
 8007b1e:	3c0e      	subs	r4, #14
 8007b20:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8007b22:	208b      	movs	r0, #139	@ 0x8b
 8007b24:	f7fb f8f6 	bl	8002d14 <write_com>
    hzkdis(GW_BD_29Item[item]);
 8007b28:	4b17      	ldr	r3, [pc, #92]	@ (8007b88 <LCD_GW_BD_29_item+0xc4>)
 8007b2a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007b2e:	f7fb f921 	bl	8002d74 <hzkdis>
    write_com(0x9b);
 8007b32:	209b      	movs	r0, #155	@ 0x9b
 8007b34:	f7fb f8ee 	bl	8002d14 <write_com>
    m_value = g_GW_BD_29[item];
 8007b38:	4b14      	ldr	r3, [pc, #80]	@ (8007b8c <LCD_GW_BD_29_item+0xc8>)
 8007b3a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8007b3e:	9301      	str	r3, [sp, #4]
    flag = 0;
 8007b40:	2300      	movs	r3, #0
 8007b42:	f88d 3003 	strb.w	r3, [sp, #3]
    LCD_GW_BD_29_item_Judge(item, &m_value, &flag);
 8007b46:	f10d 0203 	add.w	r2, sp, #3
 8007b4a:	a901      	add	r1, sp, #4
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f7ff ff83 	bl	8007a58 <LCD_GW_BD_29_item_Judge>
    if (flag == 0) {
 8007b52:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007b56:	b99b      	cbnz	r3, 8007b80 <LCD_GW_BD_29_item+0xbc>
        hzkdis(GW_BD_29Value[item][m_value]);
 8007b58:	9b01      	ldr	r3, [sp, #4]
 8007b5a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8007b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8007b90 <LCD_GW_BD_29_item+0xcc>)
 8007b60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007b64:	f7fb f906 	bl	8002d74 <hzkdis>
    write_com(0x93);
 8007b68:	2093      	movs	r0, #147	@ 0x93
 8007b6a:	f7fb f8d3 	bl	8002d14 <write_com>
}
 8007b6e:	b002      	add	sp, #8
 8007b70:	bd10      	pop	{r4, pc}
        LCD_ShowNum(m_value);
 8007b72:	9801      	ldr	r0, [sp, #4]
 8007b74:	f7fb f9f4 	bl	8002f60 <LCD_ShowNum>
 8007b78:	e7cf      	b.n	8007b1a <LCD_GW_BD_29_item+0x56>
    item = GET_MENU(item+1, GW_BD_29_ITEM_MAX);
 8007b7a:	3401      	adds	r4, #1
 8007b7c:	b2e4      	uxtb	r4, r4
 8007b7e:	e7d0      	b.n	8007b22 <LCD_GW_BD_29_item+0x5e>
        LCD_ShowNum(m_value);
 8007b80:	9801      	ldr	r0, [sp, #4]
 8007b82:	f7fb f9ed 	bl	8002f60 <LCD_ShowNum>
 8007b86:	e7ef      	b.n	8007b68 <LCD_GW_BD_29_item+0xa4>
 8007b88:	200007b4 	.word	0x200007b4
 8007b8c:	2000649c 	.word	0x2000649c
 8007b90:	200003f4 	.word	0x200003f4

08007b94 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007b94:	b500      	push	{lr}
 8007b96:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007b98:	2300      	movs	r3, #0
 8007b9a:	9301      	str	r3, [sp, #4]
 8007b9c:	9302      	str	r3, [sp, #8]
 8007b9e:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007ba0:	482c      	ldr	r0, [pc, #176]	@ (8007c54 <MX_ADC1_Init+0xc0>)
 8007ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8007c58 <MX_ADC1_Init+0xc4>)
 8007ba4:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007ba6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007baa:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007bac:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8007bae:	2201      	movs	r2, #1
 8007bb0:	7502      	strb	r2, [r0, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 8007bb2:	6182      	str	r2, [r0, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007bb4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8007bb8:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007bba:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 5;
 8007bbc:	2305      	movs	r3, #5
 8007bbe:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007bc0:	f001 f924 	bl	8008e0c <HAL_ADC_Init>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d132      	bne.n	8007c2e <MX_ADC1_Init+0x9a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8007bc8:	2308      	movs	r3, #8
 8007bca:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007bd4:	a901      	add	r1, sp, #4
 8007bd6:	481f      	ldr	r0, [pc, #124]	@ (8007c54 <MX_ADC1_Init+0xc0>)
 8007bd8:	f000 ff94 	bl	8008b04 <HAL_ADC_ConfigChannel>
 8007bdc:	bb50      	cbnz	r0, 8007c34 <MX_ADC1_Init+0xa0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007bde:	230e      	movs	r3, #14
 8007be0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8007be2:	2302      	movs	r3, #2
 8007be4:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007be6:	a901      	add	r1, sp, #4
 8007be8:	481a      	ldr	r0, [pc, #104]	@ (8007c54 <MX_ADC1_Init+0xc0>)
 8007bea:	f000 ff8b 	bl	8008b04 <HAL_ADC_ConfigChannel>
 8007bee:	bb20      	cbnz	r0, 8007c3a <MX_ADC1_Init+0xa6>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007bf0:	230f      	movs	r3, #15
 8007bf2:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007bf8:	a901      	add	r1, sp, #4
 8007bfa:	4816      	ldr	r0, [pc, #88]	@ (8007c54 <MX_ADC1_Init+0xc0>)
 8007bfc:	f000 ff82 	bl	8008b04 <HAL_ADC_ConfigChannel>
 8007c00:	b9f0      	cbnz	r0, 8007c40 <MX_ADC1_Init+0xac>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8007c02:	230b      	movs	r3, #11
 8007c04:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007c06:	2304      	movs	r3, #4
 8007c08:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c0a:	eb0d 0103 	add.w	r1, sp, r3
 8007c0e:	4811      	ldr	r0, [pc, #68]	@ (8007c54 <MX_ADC1_Init+0xc0>)
 8007c10:	f000 ff78 	bl	8008b04 <HAL_ADC_ConfigChannel>
 8007c14:	b9b8      	cbnz	r0, 8007c46 <MX_ADC1_Init+0xb2>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8007c16:	230c      	movs	r3, #12
 8007c18:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8007c1a:	2305      	movs	r3, #5
 8007c1c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c1e:	a901      	add	r1, sp, #4
 8007c20:	480c      	ldr	r0, [pc, #48]	@ (8007c54 <MX_ADC1_Init+0xc0>)
 8007c22:	f000 ff6f 	bl	8008b04 <HAL_ADC_ConfigChannel>
 8007c26:	b988      	cbnz	r0, 8007c4c <MX_ADC1_Init+0xb8>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007c28:	b005      	add	sp, #20
 8007c2a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8007c2e:	f000 fc81 	bl	8008534 <Error_Handler>
 8007c32:	e7c9      	b.n	8007bc8 <MX_ADC1_Init+0x34>
    Error_Handler();
 8007c34:	f000 fc7e 	bl	8008534 <Error_Handler>
 8007c38:	e7d1      	b.n	8007bde <MX_ADC1_Init+0x4a>
    Error_Handler();
 8007c3a:	f000 fc7b 	bl	8008534 <Error_Handler>
 8007c3e:	e7d7      	b.n	8007bf0 <MX_ADC1_Init+0x5c>
    Error_Handler();
 8007c40:	f000 fc78 	bl	8008534 <Error_Handler>
 8007c44:	e7dd      	b.n	8007c02 <MX_ADC1_Init+0x6e>
    Error_Handler();
 8007c46:	f000 fc75 	bl	8008534 <Error_Handler>
 8007c4a:	e7e4      	b.n	8007c16 <MX_ADC1_Init+0x82>
    Error_Handler();
 8007c4c:	f000 fc72 	bl	8008534 <Error_Handler>
}
 8007c50:	e7ea      	b.n	8007c28 <MX_ADC1_Init+0x94>
 8007c52:	bf00      	nop
 8007c54:	200065b0 	.word	0x200065b0
 8007c58:	40012400 	.word	0x40012400

08007c5c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007c5c:	b510      	push	{r4, lr}
 8007c5e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c60:	2300      	movs	r3, #0
 8007c62:	9304      	str	r3, [sp, #16]
 8007c64:	9305      	str	r3, [sp, #20]
 8007c66:	9306      	str	r3, [sp, #24]
 8007c68:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8007c6a:	6802      	ldr	r2, [r0, #0]
 8007c6c:	4b18      	ldr	r3, [pc, #96]	@ (8007cd0 <HAL_ADC_MspInit+0x74>)
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d001      	beq.n	8007c76 <HAL_ADC_MspInit+0x1a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007c72:	b008      	add	sp, #32
 8007c74:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007c76:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8007c7a:	699a      	ldr	r2, [r3, #24]
 8007c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c80:	619a      	str	r2, [r3, #24]
 8007c82:	699a      	ldr	r2, [r3, #24]
 8007c84:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8007c88:	9201      	str	r2, [sp, #4]
 8007c8a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c8c:	699a      	ldr	r2, [r3, #24]
 8007c8e:	f042 0210 	orr.w	r2, r2, #16
 8007c92:	619a      	str	r2, [r3, #24]
 8007c94:	699a      	ldr	r2, [r3, #24]
 8007c96:	f002 0210 	and.w	r2, r2, #16
 8007c9a:	9202      	str	r2, [sp, #8]
 8007c9c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c9e:	699a      	ldr	r2, [r3, #24]
 8007ca0:	f042 0208 	orr.w	r2, r2, #8
 8007ca4:	619a      	str	r2, [r3, #24]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	f003 0308 	and.w	r3, r3, #8
 8007cac:	9303      	str	r3, [sp, #12]
 8007cae:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8007cb0:	2336      	movs	r3, #54	@ 0x36
 8007cb2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007cb4:	2403      	movs	r4, #3
 8007cb6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007cb8:	a904      	add	r1, sp, #16
 8007cba:	4806      	ldr	r0, [pc, #24]	@ (8007cd4 <HAL_ADC_MspInit+0x78>)
 8007cbc:	f002 f888 	bl	8009dd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007cc4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cc6:	a904      	add	r1, sp, #16
 8007cc8:	4803      	ldr	r0, [pc, #12]	@ (8007cd8 <HAL_ADC_MspInit+0x7c>)
 8007cca:	f002 f881 	bl	8009dd0 <HAL_GPIO_Init>
}
 8007cce:	e7d0      	b.n	8007c72 <HAL_ADC_MspInit+0x16>
 8007cd0:	40012400 	.word	0x40012400
 8007cd4:	40011000 	.word	0x40011000
 8007cd8:	40010c00 	.word	0x40010c00

08007cdc <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8007cdc:	b510      	push	{r4, lr}
 8007cde:	b08a      	sub	sp, #40	@ 0x28
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8007ce0:	481c      	ldr	r0, [pc, #112]	@ (8007d54 <MX_CAN1_Init+0x78>)
 8007ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8007d58 <MX_CAN1_Init+0x7c>)
 8007ce4:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = GET_PRESCALER(CCAN1_BAUDRATE);
 8007ce6:	2309      	movs	r3, #9
 8007ce8:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8007cea:	2300      	movs	r3, #0
 8007cec:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007cee:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8007cf0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007cf4:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8007cf6:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8007cfa:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8007cfc:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8007cfe:	2201      	movs	r2, #1
 8007d00:	7642      	strb	r2, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8007d02:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8007d04:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8007d06:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8007d08:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8007d0a:	f001 f903 	bl	8008f14 <HAL_CAN_Init>
 8007d0e:	b9d0      	cbnz	r0, 8007d46 <MX_CAN1_Init+0x6a>
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  Filter.FilterIdHigh = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	9300      	str	r3, [sp, #0]
	Filter.FilterIdLow = 0;
 8007d14:	9301      	str	r3, [sp, #4]
	Filter.FilterMaskIdHigh = 0;
 8007d16:	9302      	str	r3, [sp, #8]
	Filter.FilterMaskIdLow = 0;
 8007d18:	9303      	str	r3, [sp, #12]
	Filter.SlaveStartFilterBank = 0;
 8007d1a:	9309      	str	r3, [sp, #36]	@ 0x24
	Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	9207      	str	r2, [sp, #28]
	Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8007d20:	9306      	str	r3, [sp, #24]
	Filter.FilterBank = 0;
 8007d22:	9305      	str	r3, [sp, #20]
	Filter.FilterFIFOAssignment = CAN_FilterFIFO0;
 8007d24:	9304      	str	r3, [sp, #16]
	Filter.FilterActivation = CAN_FILTER_ENABLE;
 8007d26:	9208      	str	r2, [sp, #32]

  HAL_CAN_ConfigFilter(&hcan1, &Filter);
 8007d28:	4c0a      	ldr	r4, [pc, #40]	@ (8007d54 <MX_CAN1_Init+0x78>)
 8007d2a:	4669      	mov	r1, sp
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f001 f997 	bl	8009060 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan1);
 8007d32:	4620      	mov	r0, r4
 8007d34:	f001 fa32 	bl	800919c <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8007d38:	2102      	movs	r1, #2
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f001 fb9f 	bl	800947e <HAL_CAN_ActivateNotification>
 8007d40:	b920      	cbnz	r0, 8007d4c <MX_CAN1_Init+0x70>
		/* Notification Error */
		Error_Handler();
	}
  /* USER CODE END CAN1_Init 2 */

}
 8007d42:	b00a      	add	sp, #40	@ 0x28
 8007d44:	bd10      	pop	{r4, pc}
    Error_Handler();
 8007d46:	f000 fbf5 	bl	8008534 <Error_Handler>
 8007d4a:	e7e1      	b.n	8007d10 <MX_CAN1_Init+0x34>
		Error_Handler();
 8007d4c:	f000 fbf2 	bl	8008534 <Error_Handler>
}
 8007d50:	e7f7      	b.n	8007d42 <MX_CAN1_Init+0x66>
 8007d52:	bf00      	nop
 8007d54:	20006614 	.word	0x20006614
 8007d58:	40006400 	.word	0x40006400

08007d5c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8007d5c:	b510      	push	{r4, lr}
 8007d5e:	b08a      	sub	sp, #40	@ 0x28
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8007d60:	481c      	ldr	r0, [pc, #112]	@ (8007dd4 <MX_CAN2_Init+0x78>)
 8007d62:	4b1d      	ldr	r3, [pc, #116]	@ (8007dd8 <MX_CAN2_Init+0x7c>)
 8007d64:	6003      	str	r3, [r0, #0]
  hcan2.Init.Prescaler = GET_PRESCALER(BCAN_BAUDRATE);
 8007d66:	2309      	movs	r3, #9
 8007d68:	6043      	str	r3, [r0, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	6083      	str	r3, [r0, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007d6e:	60c3      	str	r3, [r0, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8007d70:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007d74:	6102      	str	r2, [r0, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8007d76:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8007d7a:	6142      	str	r2, [r0, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8007d7c:	7603      	strb	r3, [r0, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8007d7e:	2201      	movs	r2, #1
 8007d80:	7642      	strb	r2, [r0, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8007d82:	7683      	strb	r3, [r0, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8007d84:	76c3      	strb	r3, [r0, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8007d86:	7703      	strb	r3, [r0, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8007d88:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8007d8a:	f001 f8c3 	bl	8008f14 <HAL_CAN_Init>
 8007d8e:	b9d8      	cbnz	r0, 8007dc8 <MX_CAN2_Init+0x6c>
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  Filter.FilterIdHigh = 0;
 8007d90:	2300      	movs	r3, #0
 8007d92:	9300      	str	r3, [sp, #0]
	Filter.FilterIdLow = 0;
 8007d94:	9301      	str	r3, [sp, #4]
	Filter.FilterMaskIdHigh = 0;
 8007d96:	9302      	str	r3, [sp, #8]
	Filter.FilterMaskIdLow = 0;
 8007d98:	9303      	str	r3, [sp, #12]
	Filter.SlaveStartFilterBank = 14;
 8007d9a:	210e      	movs	r1, #14
 8007d9c:	9109      	str	r1, [sp, #36]	@ 0x24
	Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8007d9e:	2201      	movs	r2, #1
 8007da0:	9207      	str	r2, [sp, #28]
	Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8007da2:	9306      	str	r3, [sp, #24]
	Filter.FilterBank = 14;
 8007da4:	9105      	str	r1, [sp, #20]
	Filter.FilterFIFOAssignment = CAN_FilterFIFO0;
 8007da6:	9304      	str	r3, [sp, #16]
	Filter.FilterActivation = CAN_FILTER_ENABLE;
 8007da8:	9208      	str	r2, [sp, #32]

	HAL_CAN_ConfigFilter(&hcan2, &Filter);
 8007daa:	4c0a      	ldr	r4, [pc, #40]	@ (8007dd4 <MX_CAN2_Init+0x78>)
 8007dac:	4669      	mov	r1, sp
 8007dae:	4620      	mov	r0, r4
 8007db0:	f001 f956 	bl	8009060 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan2);
 8007db4:	4620      	mov	r0, r4
 8007db6:	f001 f9f1 	bl	800919c <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8007dba:	2102      	movs	r1, #2
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f001 fb5e 	bl	800947e <HAL_CAN_ActivateNotification>
 8007dc2:	b920      	cbnz	r0, 8007dce <MX_CAN2_Init+0x72>
		/* Notification Error */
		Error_Handler();
	}
  /* USER CODE END CAN2_Init 2 */

}
 8007dc4:	b00a      	add	sp, #40	@ 0x28
 8007dc6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8007dc8:	f000 fbb4 	bl	8008534 <Error_Handler>
 8007dcc:	e7e0      	b.n	8007d90 <MX_CAN2_Init+0x34>
		Error_Handler();
 8007dce:	f000 fbb1 	bl	8008534 <Error_Handler>
}
 8007dd2:	e7f7      	b.n	8007dc4 <MX_CAN2_Init+0x68>
 8007dd4:	200065ec 	.word	0x200065ec
 8007dd8:	40006800 	.word	0x40006800

08007ddc <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8007ddc:	b510      	push	{r4, lr}
 8007dde:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007de0:	2300      	movs	r3, #0
 8007de2:	9306      	str	r3, [sp, #24]
 8007de4:	9307      	str	r3, [sp, #28]
 8007de6:	9308      	str	r3, [sp, #32]
 8007de8:	9309      	str	r3, [sp, #36]	@ 0x24
  if(canHandle->Instance==CAN1)
 8007dea:	6803      	ldr	r3, [r0, #0]
 8007dec:	4a3f      	ldr	r2, [pc, #252]	@ (8007eec <HAL_CAN_MspInit+0x110>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d004      	beq.n	8007dfc <HAL_CAN_MspInit+0x20>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
  else if(canHandle->Instance==CAN2)
 8007df2:	4a3f      	ldr	r2, [pc, #252]	@ (8007ef0 <HAL_CAN_MspInit+0x114>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d038      	beq.n	8007e6a <HAL_CAN_MspInit+0x8e>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8007df8:	b00a      	add	sp, #40	@ 0x28
 8007dfa:	bd10      	pop	{r4, pc}
    HAL_RCC_CAN1_CLK_ENABLED++;
 8007dfc:	4a3d      	ldr	r2, [pc, #244]	@ (8007ef4 <HAL_CAN_MspInit+0x118>)
 8007dfe:	6813      	ldr	r3, [r2, #0]
 8007e00:	3301      	adds	r3, #1
 8007e02:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d025      	beq.n	8007e54 <HAL_CAN_MspInit+0x78>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e08:	4b3b      	ldr	r3, [pc, #236]	@ (8007ef8 <HAL_CAN_MspInit+0x11c>)
 8007e0a:	699a      	ldr	r2, [r3, #24]
 8007e0c:	f042 0204 	orr.w	r2, r2, #4
 8007e10:	619a      	str	r2, [r3, #24]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	f003 0304 	and.w	r3, r3, #4
 8007e18:	9302      	str	r3, [sp, #8]
 8007e1a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007e1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007e20:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e22:	4c36      	ldr	r4, [pc, #216]	@ (8007efc <HAL_CAN_MspInit+0x120>)
 8007e24:	a906      	add	r1, sp, #24
 8007e26:	4620      	mov	r0, r4
 8007e28:	f001 ffd2 	bl	8009dd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007e2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007e30:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e32:	2302      	movs	r3, #2
 8007e34:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007e36:	2303      	movs	r3, #3
 8007e38:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e3a:	a906      	add	r1, sp, #24
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f001 ffc7 	bl	8009dd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8007e42:	2200      	movs	r2, #0
 8007e44:	2105      	movs	r1, #5
 8007e46:	2014      	movs	r0, #20
 8007e48:	f001 fca6 	bl	8009798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8007e4c:	2014      	movs	r0, #20
 8007e4e:	f001 fcb3 	bl	80097b8 <HAL_NVIC_EnableIRQ>
 8007e52:	e7d1      	b.n	8007df8 <HAL_CAN_MspInit+0x1c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8007e54:	4b28      	ldr	r3, [pc, #160]	@ (8007ef8 <HAL_CAN_MspInit+0x11c>)
 8007e56:	69da      	ldr	r2, [r3, #28]
 8007e58:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8007e5c:	61da      	str	r2, [r3, #28]
 8007e5e:	69db      	ldr	r3, [r3, #28]
 8007e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e64:	9301      	str	r3, [sp, #4]
 8007e66:	9b01      	ldr	r3, [sp, #4]
 8007e68:	e7ce      	b.n	8007e08 <HAL_CAN_MspInit+0x2c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8007e6a:	4b23      	ldr	r3, [pc, #140]	@ (8007ef8 <HAL_CAN_MspInit+0x11c>)
 8007e6c:	69da      	ldr	r2, [r3, #28]
 8007e6e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8007e72:	61da      	str	r2, [r3, #28]
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007e7a:	9303      	str	r3, [sp, #12]
 8007e7c:	9b03      	ldr	r3, [sp, #12]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8007e7e:	4a1d      	ldr	r2, [pc, #116]	@ (8007ef4 <HAL_CAN_MspInit+0x118>)
 8007e80:	6813      	ldr	r3, [r2, #0]
 8007e82:	3301      	adds	r3, #1
 8007e84:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d025      	beq.n	8007ed6 <HAL_CAN_MspInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ef8 <HAL_CAN_MspInit+0x11c>)
 8007e8c:	699a      	ldr	r2, [r3, #24]
 8007e8e:	f042 0208 	orr.w	r2, r2, #8
 8007e92:	619a      	str	r2, [r3, #24]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	f003 0308 	and.w	r3, r3, #8
 8007e9a:	9305      	str	r3, [sp, #20]
 8007e9c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007e9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007ea2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ea4:	4c16      	ldr	r4, [pc, #88]	@ (8007f00 <HAL_CAN_MspInit+0x124>)
 8007ea6:	a906      	add	r1, sp, #24
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f001 ff91 	bl	8009dd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007eae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007eb2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ebc:	a906      	add	r1, sp, #24
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f001 ff86 	bl	8009dd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	2105      	movs	r1, #5
 8007ec8:	2040      	movs	r0, #64	@ 0x40
 8007eca:	f001 fc65 	bl	8009798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8007ece:	2040      	movs	r0, #64	@ 0x40
 8007ed0:	f001 fc72 	bl	80097b8 <HAL_NVIC_EnableIRQ>
}
 8007ed4:	e790      	b.n	8007df8 <HAL_CAN_MspInit+0x1c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8007ed6:	4b08      	ldr	r3, [pc, #32]	@ (8007ef8 <HAL_CAN_MspInit+0x11c>)
 8007ed8:	69da      	ldr	r2, [r3, #28]
 8007eda:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8007ede:	61da      	str	r2, [r3, #28]
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ee6:	9304      	str	r3, [sp, #16]
 8007ee8:	9b04      	ldr	r3, [sp, #16]
 8007eea:	e7ce      	b.n	8007e8a <HAL_CAN_MspInit+0xae>
 8007eec:	40006400 	.word	0x40006400
 8007ef0:	40006800 	.word	0x40006800
 8007ef4:	200065e8 	.word	0x200065e8
 8007ef8:	40021000 	.word	0x40021000
 8007efc:	40010800 	.word	0x40010800
 8007f00:	40010c00 	.word	0x40010c00

08007f04 <HAL_CAN_RxFifo0MsgPendingCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8007f04:	b500      	push	{lr}
 8007f06:	b087      	sub	sp, #28
    CanMsg_t RxMessageObject;
    BaseType_t xHigherPriorityTaskWoken = 0;
 8007f08:	2100      	movs	r1, #0
 8007f0a:	9101      	str	r1, [sp, #4]
	/* Get RX message */
	if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8007f0c:	4b18      	ldr	r3, [pc, #96]	@ (8007f70 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8007f0e:	4a19      	ldr	r2, [pc, #100]	@ (8007f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8007f10:	f001 fa00 	bl	8009314 <HAL_CAN_GetRxMessage>
 8007f14:	b938      	cbnz	r0, 8007f26 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		/* Reception Error */
		Error_Handler();
	}
    
    RxMessageObject.MsgID = RxHeader.StdId;
 8007f16:	4b17      	ldr	r3, [pc, #92]	@ (8007f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	9202      	str	r2, [sp, #8]
    RxMessageObject.MsgLen = RxHeader.DLC;
 8007f1c:	7c18      	ldrb	r0, [r3, #16]
 8007f1e:	f88d 000c 	strb.w	r0, [sp, #12]
    
    for(uint8_t i = 0;i<RxMessageObject.MsgLen;++i)
 8007f22:	2300      	movs	r3, #0
 8007f24:	e00b      	b.n	8007f3e <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
		Error_Handler();
 8007f26:	f000 fb05 	bl	8008534 <Error_Handler>
 8007f2a:	e7f4      	b.n	8007f16 <HAL_CAN_RxFifo0MsgPendingCallback+0x12>
    {
        RxMessageObject.Msg[i] = RxData[i];
 8007f2c:	4a10      	ldr	r2, [pc, #64]	@ (8007f70 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8007f2e:	5cd1      	ldrb	r1, [r2, r3]
 8007f30:	f103 0218 	add.w	r2, r3, #24
 8007f34:	446a      	add	r2, sp
 8007f36:	f802 1c0b 	strb.w	r1, [r2, #-11]
    for(uint8_t i = 0;i<RxMessageObject.MsgLen;++i)
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	4298      	cmp	r0, r3
 8007f40:	d8f4      	bhi.n	8007f2c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
    }
    
    if(ReceiveQueue != NULL)
 8007f42:	4b0d      	ldr	r3, [pc, #52]	@ (8007f78 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8007f44:	6818      	ldr	r0, [r3, #0]
 8007f46:	b120      	cbz	r0, 8007f52 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
    {
        if(errQUEUE_FULL == xQueueSendFromISR(ReceiveQueue, &RxMessageObject, &xHigherPriorityTaskWoken))
 8007f48:	2300      	movs	r3, #0
 8007f4a:	aa01      	add	r2, sp, #4
 8007f4c:	a902      	add	r1, sp, #8
 8007f4e:	f003 fa63 	bl	800b418 <xQueueGenericSendFromISR>
        {
            //printf("ERR: CAN queue is full for buffer\r\n");
        }
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8007f52:	9b01      	ldr	r3, [sp, #4]
 8007f54:	b14b      	cbz	r3, 8007f6a <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
 8007f56:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007f5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	f3bf 8f6f 	isb	sy
}
 8007f6a:	b007      	add	sp, #28
 8007f6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f70:	2000663c 	.word	0x2000663c
 8007f74:	20006644 	.word	0x20006644
 8007f78:	200066a8 	.word	0x200066a8

08007f7c <CAN2_SendMsg>:

uint8_t CAN2_SendMsg(uint8_t *msgdata, uint32_t msgID, uint8_t msglen)
{
 8007f7c:	b500      	push	{lr}
 8007f7e:	b089      	sub	sp, #36	@ 0x24
	static uint32_t Gu32CurTxMailBox;
	uint8_t tmpdata[8] = {0u};
 8007f80:	2300      	movs	r3, #0
 8007f82:	9306      	str	r3, [sp, #24]
 8007f84:	9307      	str	r3, [sp, #28]
	uint8_t i = 0, res = 0u;
	uint32_t freelevel = 0u;
	CAN_TxHeaderTypeDef TxHeader;
    if(msgID > 0x7ffu)
 8007f86:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8007f8a:	d308      	bcc.n	8007f9e <CAN2_SendMsg+0x22>
	{
		TxHeader.IDE = CAN_ID_EXT;
 8007f8c:	2304      	movs	r3, #4
 8007f8e:	9302      	str	r3, [sp, #8]
		
		TxHeader.ExtId = msgID;
 8007f90:	9101      	str	r1, [sp, #4]
	else
	{
		TxHeader.IDE = CAN_ID_STD;
		TxHeader.StdId = msgID;
	}
	TxHeader.DLC = msglen;
 8007f92:	9204      	str	r2, [sp, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8007f94:	2300      	movs	r3, #0
 8007f96:	9303      	str	r3, [sp, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8007f98:	f88d 3014 	strb.w	r3, [sp, #20]

	for(i = 0u; i < msglen; i++) {
 8007f9c:	e00c      	b.n	8007fb8 <CAN2_SendMsg+0x3c>
		TxHeader.IDE = CAN_ID_STD;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	9302      	str	r3, [sp, #8]
		TxHeader.StdId = msgID;
 8007fa2:	9100      	str	r1, [sp, #0]
 8007fa4:	e7f5      	b.n	8007f92 <CAN2_SendMsg+0x16>
		tmpdata[i] = msgdata[i];
 8007fa6:	f810 c003 	ldrb.w	ip, [r0, r3]
 8007faa:	f103 0120 	add.w	r1, r3, #32
 8007fae:	4469      	add	r1, sp
 8007fb0:	f801 cc08 	strb.w	ip, [r1, #-8]
	for(i = 0u; i < msglen; i++) {
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d3f4      	bcc.n	8007fa6 <CAN2_SendMsg+0x2a>
	}
	freelevel = HAL_CAN_GetTxMailboxesFreeLevel(&hcan2);
 8007fbc:	4809      	ldr	r0, [pc, #36]	@ (8007fe4 <CAN2_SendMsg+0x68>)
 8007fbe:	f001 f990 	bl	80092e2 <HAL_CAN_GetTxMailboxesFreeLevel>
	if(freelevel != 0u) {
 8007fc2:	b918      	cbnz	r0, 8007fcc <CAN2_SendMsg+0x50>
	uint8_t i = 0, res = 0u;
 8007fc4:	2000      	movs	r0, #0
		if(HAL_CAN_AddTxMessage(&hcan2, &TxHeader, tmpdata, &Gu32CurTxMailBox)!=HAL_OK){
            res = 0u;
        }
	}
	return res;
}
 8007fc6:	b009      	add	sp, #36	@ 0x24
 8007fc8:	f85d fb04 	ldr.w	pc, [sp], #4
		if(HAL_CAN_AddTxMessage(&hcan2, &TxHeader, tmpdata, &Gu32CurTxMailBox)!=HAL_OK){
 8007fcc:	4b06      	ldr	r3, [pc, #24]	@ (8007fe8 <CAN2_SendMsg+0x6c>)
 8007fce:	aa06      	add	r2, sp, #24
 8007fd0:	4669      	mov	r1, sp
 8007fd2:	4804      	ldr	r0, [pc, #16]	@ (8007fe4 <CAN2_SendMsg+0x68>)
 8007fd4:	f001 f910 	bl	80091f8 <HAL_CAN_AddTxMessage>
 8007fd8:	b908      	cbnz	r0, 8007fde <CAN2_SendMsg+0x62>
		res = 1u;
 8007fda:	2001      	movs	r0, #1
 8007fdc:	e7f3      	b.n	8007fc6 <CAN2_SendMsg+0x4a>
            res = 0u;
 8007fde:	2000      	movs	r0, #0
 8007fe0:	e7f1      	b.n	8007fc6 <CAN2_SendMsg+0x4a>
 8007fe2:	bf00      	nop
 8007fe4:	200065ec 	.word	0x200065ec
 8007fe8:	200065e4 	.word	0x200065e4

08007fec <CAN_SendMsg>:

uint8_t CAN_SendMsg(uint8_t *msgdata, uint32_t msgID, uint8_t msglen)
{
 8007fec:	b500      	push	{lr}
 8007fee:	b089      	sub	sp, #36	@ 0x24
	static uint32_t Gu32CurTxMailBox;
	uint8_t tmpdata[8] = {0u};
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	9306      	str	r3, [sp, #24]
 8007ff4:	9307      	str	r3, [sp, #28]
	uint8_t i = 0, res = 0u;
	uint32_t freelevel = 0u;
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.IDE = CAN_ID_STD;
 8007ff6:	9302      	str	r3, [sp, #8]
	TxHeader.StdId = msgID;
 8007ff8:	9100      	str	r1, [sp, #0]
	TxHeader.DLC = msglen;
 8007ffa:	9204      	str	r2, [sp, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8007ffc:	9303      	str	r3, [sp, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8007ffe:	f88d 3014 	strb.w	r3, [sp, #20]

	for(i = 0u; i < msglen; i++) {
 8008002:	e008      	b.n	8008016 <CAN_SendMsg+0x2a>
		tmpdata[i] = msgdata[i];
 8008004:	f810 c003 	ldrb.w	ip, [r0, r3]
 8008008:	f103 0120 	add.w	r1, r3, #32
 800800c:	4469      	add	r1, sp
 800800e:	f801 cc08 	strb.w	ip, [r1, #-8]
	for(i = 0u; i < msglen; i++) {
 8008012:	3301      	adds	r3, #1
 8008014:	b2db      	uxtb	r3, r3
 8008016:	4293      	cmp	r3, r2
 8008018:	d3f4      	bcc.n	8008004 <CAN_SendMsg+0x18>
	}
	freelevel = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 800801a:	4808      	ldr	r0, [pc, #32]	@ (800803c <CAN_SendMsg+0x50>)
 800801c:	f001 f961 	bl	80092e2 <HAL_CAN_GetTxMailboxesFreeLevel>
	if(freelevel != 0u) {
 8008020:	b918      	cbnz	r0, 800802a <CAN_SendMsg+0x3e>
	uint8_t i = 0, res = 0u;
 8008022:	2000      	movs	r0, #0
		res = 1u;
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, tmpdata, &Gu32CurTxMailBox);
	}
	return res;
}
 8008024:	b009      	add	sp, #36	@ 0x24
 8008026:	f85d fb04 	ldr.w	pc, [sp], #4
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, tmpdata, &Gu32CurTxMailBox);
 800802a:	4b05      	ldr	r3, [pc, #20]	@ (8008040 <CAN_SendMsg+0x54>)
 800802c:	aa06      	add	r2, sp, #24
 800802e:	4669      	mov	r1, sp
 8008030:	4802      	ldr	r0, [pc, #8]	@ (800803c <CAN_SendMsg+0x50>)
 8008032:	f001 f8e1 	bl	80091f8 <HAL_CAN_AddTxMessage>
		res = 1u;
 8008036:	2001      	movs	r0, #1
 8008038:	e7f4      	b.n	8008024 <CAN_SendMsg+0x38>
 800803a:	bf00      	nop
 800803c:	20006614 	.word	0x20006614
 8008040:	200065e0 	.word	0x200065e0

08008044 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_channel1
  */
void MX_DMA_Init(void)
{
 8008044:	b500      	push	{lr}
 8008046:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008048:	4b18      	ldr	r3, [pc, #96]	@ (80080ac <MX_DMA_Init+0x68>)
 800804a:	695a      	ldr	r2, [r3, #20]
 800804c:	f042 0202 	orr.w	r2, r2, #2
 8008050:	615a      	str	r2, [r3, #20]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	f003 0302 	and.w	r3, r3, #2
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	9b01      	ldr	r3, [sp, #4]

  /* Configure DMA request hdma_memtomem_dma2_channel1 on DMA2_Channel1 */
  hdma_memtomem_dma2_channel1.Instance = DMA2_Channel1;
 800805c:	4814      	ldr	r0, [pc, #80]	@ (80080b0 <MX_DMA_Init+0x6c>)
 800805e:	4b15      	ldr	r3, [pc, #84]	@ (80080b4 <MX_DMA_Init+0x70>)
 8008060:	6003      	str	r3, [r0, #0]
  hdma_memtomem_dma2_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8008062:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008066:	6043      	str	r3, [r0, #4]
  hdma_memtomem_dma2_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8008068:	2340      	movs	r3, #64	@ 0x40
 800806a:	6083      	str	r3, [r0, #8]
  hdma_memtomem_dma2_channel1.Init.MemInc = DMA_MINC_ENABLE;
 800806c:	2380      	movs	r3, #128	@ 0x80
 800806e:	60c3      	str	r3, [r0, #12]
  hdma_memtomem_dma2_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008070:	2300      	movs	r3, #0
 8008072:	6103      	str	r3, [r0, #16]
  hdma_memtomem_dma2_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008074:	6143      	str	r3, [r0, #20]
  hdma_memtomem_dma2_channel1.Init.Mode = DMA_NORMAL;
 8008076:	6183      	str	r3, [r0, #24]
  hdma_memtomem_dma2_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8008078:	61c3      	str	r3, [r0, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma2_channel1) != HAL_OK)
 800807a:	f001 fbd5 	bl	8009828 <HAL_DMA_Init>
 800807e:	b990      	cbnz	r0, 80080a6 <MX_DMA_Init+0x62>
    Error_Handler();
  }

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 5, 0);
 8008080:	2200      	movs	r2, #0
 8008082:	2105      	movs	r1, #5
 8008084:	203a      	movs	r0, #58	@ 0x3a
 8008086:	f001 fb87 	bl	8009798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 800808a:	203a      	movs	r0, #58	@ 0x3a
 800808c:	f001 fb94 	bl	80097b8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 8008090:	2200      	movs	r2, #0
 8008092:	2105      	movs	r1, #5
 8008094:	203c      	movs	r0, #60	@ 0x3c
 8008096:	f001 fb7f 	bl	8009798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800809a:	203c      	movs	r0, #60	@ 0x3c
 800809c:	f001 fb8c 	bl	80097b8 <HAL_NVIC_EnableIRQ>

}
 80080a0:	b003      	add	sp, #12
 80080a2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80080a6:	f000 fa45 	bl	8008534 <Error_Handler>
 80080aa:	e7e9      	b.n	8008080 <MX_DMA_Init+0x3c>
 80080ac:	40021000 	.word	0x40021000
 80080b0:	20006660 	.word	0x20006660
 80080b4:	40020408 	.word	0x40020408

080080b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80080b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80080ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80080be:	f003 f924 	bl	800b30a <osDelay>
 80080c2:	e7fa      	b.n	80080ba <StartDefaultTask+0x2>

080080c4 <heartbeat_task>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void heartbeat_task(void const * argument)
{
 80080c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN heartbeat_task */
    UserTimer_Initial();
 80080c6:	f004 fc11 	bl	800c8ec <UserTimer_Initial>
    printf("heartbeat_task\r\n");
 80080ca:	4803      	ldr	r0, [pc, #12]	@ (80080d8 <heartbeat_task+0x14>)
 80080cc:	f005 fc1e 	bl	800d90c <puts>
  /* Infinite loop */
  for(;;)
  {
      UserTimer_Handler();
 80080d0:	f004 fc34 	bl	800c93c <UserTimer_Handler>
 80080d4:	e7fc      	b.n	80080d0 <heartbeat_task+0xc>
 80080d6:	bf00      	nop
 80080d8:	08012a04 	.word	0x08012a04

080080dc <task0_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_can_task */
void task0_task(void const * argument)
{
 80080dc:	b508      	push	{r3, lr}
    (void)*argument;
    for(;;)
    {
        vTaskDelay(pdMS_TO_TICKS(1));
 80080de:	2001      	movs	r0, #1
 80080e0:	f003 fd58 	bl	800bb94 <vTaskDelay>
 80080e4:	e7fb      	b.n	80080de <task0_task+0x2>

080080e6 <task1_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gpio_task */
void task1_task(void const * argument)
{
 80080e6:	b508      	push	{r3, lr}
    (void)*argument;
    for(;;)
    {
			//printf("task1\r\n");
        ADC_SamplingProcess();
 80080e8:	f7f8 ff92 	bl	8001010 <ADC_SamplingProcess>
        vTaskDelay(pdMS_TO_TICKS(5));
 80080ec:	2005      	movs	r0, #5
 80080ee:	f003 fd51 	bl	800bb94 <vTaskDelay>
 80080f2:	e7f9      	b.n	80080e8 <task1_task+0x2>

080080f4 <task2_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_button_task */
void task2_task(void const * argument)
{
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	e00a      	b.n	800810e <task2_task+0x1a>
        Key_CheckProcess();
        if(now_page == 0){
			if (key_menu_cnt != GetPage0MenuIndex() ||
				key_item_cnt != GetPage0ItemIndex() ||
				key_value_cnt != GetPage0ItemValue(GetPage0MenuIndex(), GetPage0ItemIndex(), 0)) {
				SavePage0ItemValue(key_menu_cnt,key_item_cnt,key_value_cnt);
 80080f8:	4b27      	ldr	r3, [pc, #156]	@ (8008198 <task2_task+0xa4>)
 80080fa:	881a      	ldrh	r2, [r3, #0]
 80080fc:	4b27      	ldr	r3, [pc, #156]	@ (800819c <task2_task+0xa8>)
 80080fe:	7819      	ldrb	r1, [r3, #0]
 8008100:	4b27      	ldr	r3, [pc, #156]	@ (80081a0 <task2_task+0xac>)
 8008102:	7818      	ldrb	r0, [r3, #0]
 8008104:	f7fd fd54 	bl	8005bb0 <SavePage0ItemValue>
				key_item_cnt != GetPage1ItemIndex() ||
				key_value_cnt != GetPage1ItemValue(GetPage1MenuIndex(), GetPage1ItemIndex(), 0)) {
				SavePage1ItemValue(key_menu_cnt,key_item_cnt,key_value_cnt);
			}
        }
        vTaskDelay(pdMS_TO_TICKS(10));
 8008108:	200a      	movs	r0, #10
 800810a:	f003 fd43 	bl	800bb94 <vTaskDelay>
        Key_CheckProcess();
 800810e:	f7fa fd6f 	bl	8002bf0 <Key_CheckProcess>
        if(now_page == 0){
 8008112:	4b24      	ldr	r3, [pc, #144]	@ (80081a4 <task2_task+0xb0>)
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	b9d3      	cbnz	r3, 800814e <task2_task+0x5a>
			if (key_menu_cnt != GetPage0MenuIndex() ||
 8008118:	f7fa ff9c 	bl	8003054 <GetPage0MenuIndex>
 800811c:	4b20      	ldr	r3, [pc, #128]	@ (80081a0 <task2_task+0xac>)
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	4298      	cmp	r0, r3
 8008122:	d1e9      	bne.n	80080f8 <task2_task+0x4>
				key_item_cnt != GetPage0ItemIndex() ||
 8008124:	4b1d      	ldr	r3, [pc, #116]	@ (800819c <task2_task+0xa8>)
 8008126:	781c      	ldrb	r4, [r3, #0]
 8008128:	f7fa ffa0 	bl	800306c <GetPage0ItemIndex>
			if (key_menu_cnt != GetPage0MenuIndex() ||
 800812c:	4284      	cmp	r4, r0
 800812e:	d1e3      	bne.n	80080f8 <task2_task+0x4>
				key_value_cnt != GetPage0ItemValue(GetPage0MenuIndex(), GetPage0ItemIndex(), 0)) {
 8008130:	4b19      	ldr	r3, [pc, #100]	@ (8008198 <task2_task+0xa4>)
 8008132:	881d      	ldrh	r5, [r3, #0]
 8008134:	f7fa ff8e 	bl	8003054 <GetPage0MenuIndex>
 8008138:	4604      	mov	r4, r0
 800813a:	f7fa ff97 	bl	800306c <GetPage0ItemIndex>
 800813e:	4601      	mov	r1, r0
 8008140:	2200      	movs	r2, #0
 8008142:	4620      	mov	r0, r4
 8008144:	f7fd f96a 	bl	800541c <GetPage0ItemValue>
				key_item_cnt != GetPage0ItemIndex() ||
 8008148:	4285      	cmp	r5, r0
 800814a:	d1d5      	bne.n	80080f8 <task2_task+0x4>
 800814c:	e7dc      	b.n	8008108 <task2_task+0x14>
			if (key_menu_cnt != GetPage1MenuIndex() ||
 800814e:	f7fa ff87 	bl	8003060 <GetPage1MenuIndex>
 8008152:	4b13      	ldr	r3, [pc, #76]	@ (80081a0 <task2_task+0xac>)
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	4298      	cmp	r0, r3
 8008158:	d008      	beq.n	800816c <task2_task+0x78>
				SavePage1ItemValue(key_menu_cnt,key_item_cnt,key_value_cnt);
 800815a:	4b0f      	ldr	r3, [pc, #60]	@ (8008198 <task2_task+0xa4>)
 800815c:	881a      	ldrh	r2, [r3, #0]
 800815e:	4b0f      	ldr	r3, [pc, #60]	@ (800819c <task2_task+0xa8>)
 8008160:	7819      	ldrb	r1, [r3, #0]
 8008162:	4b0f      	ldr	r3, [pc, #60]	@ (80081a0 <task2_task+0xac>)
 8008164:	7818      	ldrb	r0, [r3, #0]
 8008166:	f7fd fef5 	bl	8005f54 <SavePage1ItemValue>
 800816a:	e7cd      	b.n	8008108 <task2_task+0x14>
				key_item_cnt != GetPage1ItemIndex() ||
 800816c:	4b0b      	ldr	r3, [pc, #44]	@ (800819c <task2_task+0xa8>)
 800816e:	781c      	ldrb	r4, [r3, #0]
 8008170:	f7fa ff82 	bl	8003078 <GetPage1ItemIndex>
			if (key_menu_cnt != GetPage1MenuIndex() ||
 8008174:	4284      	cmp	r4, r0
 8008176:	d1f0      	bne.n	800815a <task2_task+0x66>
				key_value_cnt != GetPage1ItemValue(GetPage1MenuIndex(), GetPage1ItemIndex(), 0)) {
 8008178:	4b07      	ldr	r3, [pc, #28]	@ (8008198 <task2_task+0xa4>)
 800817a:	881d      	ldrh	r5, [r3, #0]
 800817c:	f7fa ff70 	bl	8003060 <GetPage1MenuIndex>
 8008180:	4604      	mov	r4, r0
 8008182:	f7fa ff79 	bl	8003078 <GetPage1ItemIndex>
 8008186:	4601      	mov	r1, r0
 8008188:	2200      	movs	r2, #0
 800818a:	4620      	mov	r0, r4
 800818c:	f7fd fa8c 	bl	80056a8 <GetPage1ItemValue>
				key_item_cnt != GetPage1ItemIndex() ||
 8008190:	4285      	cmp	r5, r0
 8008192:	d1e2      	bne.n	800815a <task2_task+0x66>
 8008194:	e7b8      	b.n	8008108 <task2_task+0x14>
 8008196:	bf00      	nop
 8008198:	200047e2 	.word	0x200047e2
 800819c:	200047e4 	.word	0x200047e4
 80081a0:	200047e5 	.word	0x200047e5
 80081a4:	200047eb 	.word	0x200047eb

080081a8 <task3_task>:
*/
/* USER CODE END Header_menu_task */
extern uint8_t Can_Send_Sts;

void task3_task(void const * argument)
{
 80081a8:	b570      	push	{r4, r5, r6, lr}
 80081aa:	e02b      	b.n	8008204 <task3_task+0x5c>
            v_menu = GetPage0MenuIndex();
            v_item = GetPage0ItemIndex();
            v_value = GetPage0ItemValue(v_menu, v_item, 0);
    	}
    	else{
    		v_menu = GetPage1MenuIndex();
 80081ac:	f7fa ff58 	bl	8003060 <GetPage1MenuIndex>
 80081b0:	4604      	mov	r4, r0
            v_item = GetPage1ItemIndex();
 80081b2:	f7fa ff61 	bl	8003078 <GetPage1ItemIndex>
 80081b6:	b2c5      	uxtb	r5, r0
            v_value = GetPage1ItemValue(v_menu, v_item, 0);
 80081b8:	2200      	movs	r2, #0
 80081ba:	4629      	mov	r1, r5
 80081bc:	4620      	mov	r0, r4
 80081be:	f7fd fa73 	bl	80056a8 <GetPage1ItemValue>
 80081c2:	b206      	sxth	r6, r0
 80081c4:	e02e      	b.n	8008224 <task3_task+0x7c>
        {
            if(Last_CAN_SendSts != Can_Send_Sts)
            {
                Last_CAN_SendSts = Can_Send_Sts;
            }
            if (v_menu != s_menu || v_item != s_item || v_value != s_value || switch_flag == 1) {
 80081c6:	4b30      	ldr	r3, [pc, #192]	@ (8008288 <task3_task+0xe0>)
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	42ab      	cmp	r3, r5
 80081cc:	d137      	bne.n	800823e <task3_task+0x96>
 80081ce:	4b2f      	ldr	r3, [pc, #188]	@ (800828c <task3_task+0xe4>)
 80081d0:	881b      	ldrh	r3, [r3, #0]
 80081d2:	429e      	cmp	r6, r3
 80081d4:	d133      	bne.n	800823e <task3_task+0x96>
 80081d6:	4b2e      	ldr	r3, [pc, #184]	@ (8008290 <task3_task+0xe8>)
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d10f      	bne.n	80081fe <task3_task+0x56>
 80081de:	e02e      	b.n	800823e <task3_task+0x96>
                        s_item = v_item;
                        s_value = v_value;
                    }
            	}
            	else{
                	if (LCD_Page1Menu_Display(v_menu, v_item, v_value) == DISPLAY_SUCCESS) {
 80081e0:	4632      	mov	r2, r6
 80081e2:	4629      	mov	r1, r5
 80081e4:	4620      	mov	r0, r4
 80081e6:	f7fa fffb 	bl	80031e0 <LCD_Page1Menu_Display>
 80081ea:	b928      	cbnz	r0, 80081f8 <task3_task+0x50>
                        s_menu = v_menu;
 80081ec:	4b29      	ldr	r3, [pc, #164]	@ (8008294 <task3_task+0xec>)
 80081ee:	701c      	strb	r4, [r3, #0]
                        s_item = v_item;
 80081f0:	4b25      	ldr	r3, [pc, #148]	@ (8008288 <task3_task+0xe0>)
 80081f2:	701d      	strb	r5, [r3, #0]
                        s_value = v_value;
 80081f4:	4b25      	ldr	r3, [pc, #148]	@ (800828c <task3_task+0xe4>)
 80081f6:	801e      	strh	r6, [r3, #0]
                    }
            	}
            	switch_flag = 0;
 80081f8:	4b25      	ldr	r3, [pc, #148]	@ (8008290 <task3_task+0xe8>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	701a      	strb	r2, [r3, #0]
                s_item = 0xFF;
                s_value = 0xFFFF;
            }
        }

        vTaskDelay(pdMS_TO_TICKS(20));
 80081fe:	2014      	movs	r0, #20
 8008200:	f003 fcc8 	bl	800bb94 <vTaskDelay>
    	if(now_page == 0){
 8008204:	4b24      	ldr	r3, [pc, #144]	@ (8008298 <task3_task+0xf0>)
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1cf      	bne.n	80081ac <task3_task+0x4>
            v_menu = GetPage0MenuIndex();
 800820c:	f7fa ff22 	bl	8003054 <GetPage0MenuIndex>
 8008210:	4604      	mov	r4, r0
            v_item = GetPage0ItemIndex();
 8008212:	f7fa ff2b 	bl	800306c <GetPage0ItemIndex>
 8008216:	b2c5      	uxtb	r5, r0
            v_value = GetPage0ItemValue(v_menu, v_item, 0);
 8008218:	2200      	movs	r2, #0
 800821a:	4629      	mov	r1, r5
 800821c:	4620      	mov	r0, r4
 800821e:	f7fd f8fd 	bl	800541c <GetPage0ItemValue>
 8008222:	b206      	sxth	r6, r0
        if(Can_Send_Sts == E_CANSEND_OPEN)
 8008224:	4b1d      	ldr	r3, [pc, #116]	@ (800829c <task3_task+0xf4>)
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	b9db      	cbnz	r3, 8008262 <task3_task+0xba>
            if(Last_CAN_SendSts != Can_Send_Sts)
 800822a:	4a1d      	ldr	r2, [pc, #116]	@ (80082a0 <task3_task+0xf8>)
 800822c:	7812      	ldrb	r2, [r2, #0]
 800822e:	4293      	cmp	r3, r2
 8008230:	d001      	beq.n	8008236 <task3_task+0x8e>
                Last_CAN_SendSts = Can_Send_Sts;
 8008232:	4a1b      	ldr	r2, [pc, #108]	@ (80082a0 <task3_task+0xf8>)
 8008234:	7013      	strb	r3, [r2, #0]
            if (v_menu != s_menu || v_item != s_item || v_value != s_value || switch_flag == 1) {
 8008236:	4b17      	ldr	r3, [pc, #92]	@ (8008294 <task3_task+0xec>)
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	42a3      	cmp	r3, r4
 800823c:	d0c3      	beq.n	80081c6 <task3_task+0x1e>
            	if(now_page == 0){
 800823e:	4b16      	ldr	r3, [pc, #88]	@ (8008298 <task3_task+0xf0>)
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1cc      	bne.n	80081e0 <task3_task+0x38>
                	if (LCD_Page0Menu_Display(v_menu, v_item, v_value) == DISPLAY_SUCCESS) {
 8008246:	4632      	mov	r2, r6
 8008248:	4629      	mov	r1, r5
 800824a:	4620      	mov	r0, r4
 800824c:	f7fa ffb2 	bl	80031b4 <LCD_Page0Menu_Display>
 8008250:	2800      	cmp	r0, #0
 8008252:	d1d1      	bne.n	80081f8 <task3_task+0x50>
                        s_menu = v_menu;
 8008254:	4b0f      	ldr	r3, [pc, #60]	@ (8008294 <task3_task+0xec>)
 8008256:	701c      	strb	r4, [r3, #0]
                        s_item = v_item;
 8008258:	4b0b      	ldr	r3, [pc, #44]	@ (8008288 <task3_task+0xe0>)
 800825a:	701d      	strb	r5, [r3, #0]
                        s_value = v_value;
 800825c:	4b0b      	ldr	r3, [pc, #44]	@ (800828c <task3_task+0xe4>)
 800825e:	801e      	strh	r6, [r3, #0]
 8008260:	e7ca      	b.n	80081f8 <task3_task+0x50>
            if(Last_CAN_SendSts != Can_Send_Sts)
 8008262:	4a0f      	ldr	r2, [pc, #60]	@ (80082a0 <task3_task+0xf8>)
 8008264:	7812      	ldrb	r2, [r2, #0]
 8008266:	4293      	cmp	r3, r2
 8008268:	d0c9      	beq.n	80081fe <task3_task+0x56>
                Last_CAN_SendSts = Can_Send_Sts;
 800826a:	4a0d      	ldr	r2, [pc, #52]	@ (80082a0 <task3_task+0xf8>)
 800826c:	7013      	strb	r3, [r2, #0]
                LCD_Show_CANSendClose();
 800826e:	f7fa ffcd 	bl	800320c <LCD_Show_CANSendClose>
                s_menu = 0xFF;
 8008272:	23ff      	movs	r3, #255	@ 0xff
 8008274:	4a07      	ldr	r2, [pc, #28]	@ (8008294 <task3_task+0xec>)
 8008276:	7013      	strb	r3, [r2, #0]
                s_item = 0xFF;
 8008278:	4a03      	ldr	r2, [pc, #12]	@ (8008288 <task3_task+0xe0>)
 800827a:	7013      	strb	r3, [r2, #0]
                s_value = 0xFFFF;
 800827c:	4b03      	ldr	r3, [pc, #12]	@ (800828c <task3_task+0xe4>)
 800827e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008282:	801a      	strh	r2, [r3, #0]
 8008284:	e7bb      	b.n	80081fe <task3_task+0x56>
 8008286:	bf00      	nop
 8008288:	200066a6 	.word	0x200066a6
 800828c:	200066a4 	.word	0x200066a4
 8008290:	200047ea 	.word	0x200047ea
 8008294:	2000437c 	.word	0x2000437c
 8008298:	200047eb 	.word	0x200047eb
 800829c:	200047e1 	.word	0x200047e1
 80082a0:	200066a7 	.word	0x200066a7

080082a4 <vApplicationTickHook>:
}
 80082a4:	4770      	bx	lr

080082a6 <vApplicationStackOverflowHook>:
}
 80082a6:	4770      	bx	lr

080082a8 <vApplicationMallocFailedHook>:
}
 80082a8:	4770      	bx	lr
	...

080082ac <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80082ac:	4b03      	ldr	r3, [pc, #12]	@ (80082bc <vApplicationGetIdleTaskMemory+0x10>)
 80082ae:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80082b0:	4b03      	ldr	r3, [pc, #12]	@ (80082c0 <vApplicationGetIdleTaskMemory+0x14>)
 80082b2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80082b4:	2380      	movs	r3, #128	@ 0x80
 80082b6:	6013      	str	r3, [r2, #0]
}
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	200068ac 	.word	0x200068ac
 80082c0:	200066ac 	.word	0x200066ac

080082c4 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80082c4:	b510      	push	{r4, lr}
 80082c6:	b0b2      	sub	sp, #200	@ 0xc8
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80082c8:	4c3f      	ldr	r4, [pc, #252]	@ (80083c8 <MX_FREERTOS_Init+0x104>)
 80082ca:	f10d 0cac 	add.w	ip, sp, #172	@ 0xac
 80082ce:	46a6      	mov	lr, r4
 80082d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80082d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80082d8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80082dc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80082e0:	2100      	movs	r1, #0
 80082e2:	a82b      	add	r0, sp, #172	@ 0xac
 80082e4:	f002 ffde 	bl	800b2a4 <osThreadCreate>
 80082e8:	4b38      	ldr	r3, [pc, #224]	@ (80083cc <MX_FREERTOS_Init+0x108>)
 80082ea:	6018      	str	r0, [r3, #0]
  osThreadDef(heartbeattask, heartbeat_task, osPriorityIdle, 0, 128);
 80082ec:	f10d 0c90 	add.w	ip, sp, #144	@ 0x90
 80082f0:	f104 0e1c 	add.w	lr, r4, #28
 80082f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80082f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80082fc:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8008300:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  heartbeattaskHandle = osThreadCreate(osThread(heartbeattask), NULL);
 8008304:	2100      	movs	r1, #0
 8008306:	a824      	add	r0, sp, #144	@ 0x90
 8008308:	f002 ffcc 	bl	800b2a4 <osThreadCreate>
 800830c:	4b30      	ldr	r3, [pc, #192]	@ (80083d0 <MX_FREERTOS_Init+0x10c>)
 800830e:	6018      	str	r0, [r3, #0]
  osThreadDef(task0task, task0_task, osPriorityIdle, 0, 128);
 8008310:	f10d 0c74 	add.w	ip, sp, #116	@ 0x74
 8008314:	f104 0e38 	add.w	lr, r4, #56	@ 0x38
 8008318:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800831c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008320:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8008324:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  task0Handle = osThreadCreate(osThread(task0task), NULL);
 8008328:	2100      	movs	r1, #0
 800832a:	a81d      	add	r0, sp, #116	@ 0x74
 800832c:	f002 ffba 	bl	800b2a4 <osThreadCreate>
 8008330:	4b28      	ldr	r3, [pc, #160]	@ (80083d4 <MX_FREERTOS_Init+0x110>)
 8008332:	6018      	str	r0, [r3, #0]
  osThreadDef(task1task, task1_task, osPriorityIdle, 0, 128);
 8008334:	f10d 0c58 	add.w	ip, sp, #88	@ 0x58
 8008338:	f104 0e54 	add.w	lr, r4, #84	@ 0x54
 800833c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008340:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008344:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8008348:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1task), NULL);
 800834c:	2100      	movs	r1, #0
 800834e:	a816      	add	r0, sp, #88	@ 0x58
 8008350:	f002 ffa8 	bl	800b2a4 <osThreadCreate>
 8008354:	4b20      	ldr	r3, [pc, #128]	@ (80083d8 <MX_FREERTOS_Init+0x114>)
 8008356:	6018      	str	r0, [r3, #0]
  osThreadDef(task2task, task2_task, osPriorityIdle, 0, 128);
 8008358:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800835c:	f104 0e70 	add.w	lr, r4, #112	@ 0x70
 8008360:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008364:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008368:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800836c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2task), NULL);
 8008370:	2100      	movs	r1, #0
 8008372:	a80f      	add	r0, sp, #60	@ 0x3c
 8008374:	f002 ff96 	bl	800b2a4 <osThreadCreate>
 8008378:	4b18      	ldr	r3, [pc, #96]	@ (80083dc <MX_FREERTOS_Init+0x118>)
 800837a:	6018      	str	r0, [r3, #0]
  osThreadDef(task3task, task3_task, osPriorityIdle, 0, 128);
 800837c:	f10d 0c20 	add.w	ip, sp, #32
 8008380:	f104 0e8c 	add.w	lr, r4, #140	@ 0x8c
 8008384:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008388:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800838c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8008390:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3task), NULL);
 8008394:	2100      	movs	r1, #0
 8008396:	a808      	add	r0, sp, #32
 8008398:	f002 ff84 	bl	800b2a4 <osThreadCreate>
 800839c:	4b10      	ldr	r3, [pc, #64]	@ (80083e0 <MX_FREERTOS_Init+0x11c>)
 800839e:	6018      	str	r0, [r3, #0]
  osThreadDef(cantransmittask, CanTransmitFunction, osPriorityIdle, 0, 128);
 80083a0:	f10d 0e04 	add.w	lr, sp, #4
 80083a4:	f104 0ca8 	add.w	ip, r4, #168	@ 0xa8
 80083a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80083ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80083b0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80083b4:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  CanTransmitHandle = osThreadCreate(osThread(cantransmittask), NULL);
 80083b8:	2100      	movs	r1, #0
 80083ba:	a801      	add	r0, sp, #4
 80083bc:	f002 ff72 	bl	800b2a4 <osThreadCreate>
 80083c0:	4b08      	ldr	r3, [pc, #32]	@ (80083e4 <MX_FREERTOS_Init+0x120>)
 80083c2:	6018      	str	r0, [r3, #0]
}
 80083c4:	b032      	add	sp, #200	@ 0xc8
 80083c6:	bd10      	pop	{r4, pc}
 80083c8:	080111a0 	.word	0x080111a0
 80083cc:	20006908 	.word	0x20006908
 80083d0:	20006920 	.word	0x20006920
 80083d4:	2000691c 	.word	0x2000691c
 80083d8:	20006918 	.word	0x20006918
 80083dc:	20006914 	.word	0x20006914
 80083e0:	20006910 	.word	0x20006910
 80083e4:	2000690c 	.word	0x2000690c

080083e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80083e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083ec:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083ee:	2500      	movs	r5, #0
 80083f0:	9504      	str	r5, [sp, #16]
 80083f2:	9505      	str	r5, [sp, #20]
 80083f4:	9506      	str	r5, [sp, #24]
 80083f6:	9507      	str	r5, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80083f8:	4b42      	ldr	r3, [pc, #264]	@ (8008504 <MX_GPIO_Init+0x11c>)
 80083fa:	699a      	ldr	r2, [r3, #24]
 80083fc:	f042 0210 	orr.w	r2, r2, #16
 8008400:	619a      	str	r2, [r3, #24]
 8008402:	699a      	ldr	r2, [r3, #24]
 8008404:	f002 0210 	and.w	r2, r2, #16
 8008408:	9200      	str	r2, [sp, #0]
 800840a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800840c:	699a      	ldr	r2, [r3, #24]
 800840e:	f042 0220 	orr.w	r2, r2, #32
 8008412:	619a      	str	r2, [r3, #24]
 8008414:	699a      	ldr	r2, [r3, #24]
 8008416:	f002 0220 	and.w	r2, r2, #32
 800841a:	9201      	str	r2, [sp, #4]
 800841c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800841e:	699a      	ldr	r2, [r3, #24]
 8008420:	f042 0204 	orr.w	r2, r2, #4
 8008424:	619a      	str	r2, [r3, #24]
 8008426:	699a      	ldr	r2, [r3, #24]
 8008428:	f002 0204 	and.w	r2, r2, #4
 800842c:	9202      	str	r2, [sp, #8]
 800842e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008430:	699a      	ldr	r2, [r3, #24]
 8008432:	f042 0208 	orr.w	r2, r2, #8
 8008436:	619a      	str	r2, [r3, #24]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	f003 0308 	and.w	r3, r3, #8
 800843e:	9303      	str	r3, [sp, #12]
 8008440:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_SET);
 8008442:	f8df 90c4 	ldr.w	r9, [pc, #196]	@ 8008508 <MX_GPIO_Init+0x120>
 8008446:	2201      	movs	r2, #1
 8008448:	2148      	movs	r1, #72	@ 0x48
 800844a:	4648      	mov	r0, r9
 800844c:	f001 fdd5 	bl	8009ffa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8008450:	4f2e      	ldr	r7, [pc, #184]	@ (800850c <MX_GPIO_Init+0x124>)
 8008452:	2201      	movs	r2, #1
 8008454:	21f1      	movs	r1, #241	@ 0xf1
 8008456:	4638      	mov	r0, r7
 8008458:	f001 fdcf 	bl	8009ffa <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 800845c:	4e2c      	ldr	r6, [pc, #176]	@ (8008510 <MX_GPIO_Init+0x128>)
 800845e:	462a      	mov	r2, r5
 8008460:	210a      	movs	r1, #10
 8008462:	4630      	mov	r0, r6
 8008464:	f001 fdc9 	bl	8009ffa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_SET);
 8008468:	2201      	movs	r2, #1
 800846a:	f44f 410c 	mov.w	r1, #35840	@ 0x8c00
 800846e:	4630      	mov	r0, r6
 8008470:	f001 fdc3 	bl	8009ffa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8008474:	462a      	mov	r2, r5
 8008476:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800847a:	4638      	mov	r0, r7
 800847c:	f001 fdbd 	bl	8009ffa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8008480:	f44f 530e 	mov.w	r3, #9088	@ 0x2380
 8008484:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008486:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008488:	2401      	movs	r4, #1
 800848a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800848c:	a904      	add	r1, sp, #16
 800848e:	4648      	mov	r0, r9
 8008490:	f001 fc9e 	bl	8009dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8008494:	2348      	movs	r3, #72	@ 0x48
 8008496:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008498:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800849a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800849c:	f04f 0803 	mov.w	r8, #3
 80084a0:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80084a4:	a904      	add	r1, sp, #16
 80084a6:	4648      	mov	r0, r9
 80084a8:	f001 fc92 	bl	8009dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA6
                           PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80084ac:	f240 63f1 	movw	r3, #1777	@ 0x6f1
 80084b0:	9304      	str	r3, [sp, #16]
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80084b2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80084b4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80084b6:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084ba:	a904      	add	r1, sp, #16
 80084bc:	4638      	mov	r0, r7
 80084be:	f001 fc87 	bl	8009dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_15;
 80084c2:	f248 1302 	movw	r3, #33026	@ 0x8102
 80084c6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084c8:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80084ca:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084cc:	a904      	add	r1, sp, #16
 80084ce:	4638      	mov	r0, r7
 80084d0:	f001 fc7e 	bl	8009dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB10 PB11 PB15
                           PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15
 80084d4:	f648 430a 	movw	r3, #35850	@ 0x8c0a
 80084d8:	9304      	str	r3, [sp, #16]
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80084da:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80084dc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80084de:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084e2:	a904      	add	r1, sp, #16
 80084e4:	4630      	mov	r0, r6
 80084e6:	f001 fc73 	bl	8009dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80084ea:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 80084ee:	9304      	str	r3, [sp, #16]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084f0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80084f2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084f4:	a904      	add	r1, sp, #16
 80084f6:	4630      	mov	r0, r6
 80084f8:	f001 fc6a 	bl	8009dd0 <HAL_GPIO_Init>


}
 80084fc:	b009      	add	sp, #36	@ 0x24
 80084fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008502:	bf00      	nop
 8008504:	40021000 	.word	0x40021000
 8008508:	40011000 	.word	0x40011000
 800850c:	40010800 	.word	0x40010800
 8008510:	40010c00 	.word	0x40010c00

08008514 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8008514:	b500      	push	{lr}
 8008516:	b083      	sub	sp, #12
 8008518:	9001      	str	r0, [sp, #4]
    HAL_UART_Transmit(&huart4 , (uint8_t *)&ch, 1, 0xFFFF);
 800851a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800851e:	2201      	movs	r2, #1
 8008520:	a901      	add	r1, sp, #4
 8008522:	4803      	ldr	r0, [pc, #12]	@ (8008530 <__io_putchar+0x1c>)
 8008524:	f002 fb90 	bl	800ac48 <HAL_UART_Transmit>
    return ch;
}
 8008528:	9801      	ldr	r0, [sp, #4]
 800852a:	b003      	add	sp, #12
 800852c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008530:	20006b40 	.word	0x20006b40

08008534 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008534:	b672      	cpsid	i
 8008536:	e7fe      	b.n	8008536 <Error_Handler+0x2>

08008538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008538:	b500      	push	{lr}
 800853a:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800853c:	2238      	movs	r2, #56	@ 0x38
 800853e:	2100      	movs	r1, #0
 8008540:	eb0d 0002 	add.w	r0, sp, r2
 8008544:	f005 fae4 	bl	800db10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008548:	2100      	movs	r1, #0
 800854a:	9109      	str	r1, [sp, #36]	@ 0x24
 800854c:	910a      	str	r1, [sp, #40]	@ 0x28
 800854e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008550:	910c      	str	r1, [sp, #48]	@ 0x30
 8008552:	910d      	str	r1, [sp, #52]	@ 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008554:	2220      	movs	r2, #32
 8008556:	a801      	add	r0, sp, #4
 8008558:	f005 fada 	bl	800db10 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800855c:	2201      	movs	r2, #1
 800855e:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008560:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008564:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008566:	9213      	str	r2, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008568:	2202      	movs	r2, #2
 800856a:	9216      	str	r2, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800856c:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800856e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8008572:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008574:	a80e      	add	r0, sp, #56	@ 0x38
 8008576:	f001 fd5d 	bl	800a034 <HAL_RCC_OscConfig>
 800857a:	b9e0      	cbnz	r0, 80085b6 <SystemClock_Config+0x7e>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800857c:	230f      	movs	r3, #15
 800857e:	9309      	str	r3, [sp, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008580:	2102      	movs	r1, #2
 8008582:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008584:	2300      	movs	r3, #0
 8008586:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008588:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800858c:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800858e:	930d      	str	r3, [sp, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008590:	a809      	add	r0, sp, #36	@ 0x24
 8008592:	f002 f827 	bl	800a5e4 <HAL_RCC_ClockConfig>
 8008596:	b980      	cbnz	r0, 80085ba <SystemClock_Config+0x82>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8008598:	2302      	movs	r3, #2
 800859a:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800859c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085a0:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80085a2:	a801      	add	r0, sp, #4
 80085a4:	f002 f8fa 	bl	800a79c <HAL_RCCEx_PeriphCLKConfig>
 80085a8:	b948      	cbnz	r0, 80085be <SystemClock_Config+0x86>
    Error_Handler();
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80085aa:	4b06      	ldr	r3, [pc, #24]	@ (80085c4 <SystemClock_Config+0x8c>)
 80085ac:	2201      	movs	r2, #1
 80085ae:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80085b0:	b01d      	add	sp, #116	@ 0x74
 80085b2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80085b6:	f7ff ffbd 	bl	8008534 <Error_Handler>
    Error_Handler();
 80085ba:	f7ff ffbb 	bl	8008534 <Error_Handler>
    Error_Handler();
 80085be:	f7ff ffb9 	bl	8008534 <Error_Handler>
 80085c2:	bf00      	nop
 80085c4:	42420000 	.word	0x42420000

080085c8 <main>:
{
 80085c8:	b508      	push	{r3, lr}
  HAL_Init();
 80085ca:	f000 fa73 	bl	8008ab4 <HAL_Init>
  SystemClock_Config();
 80085ce:	f7ff ffb3 	bl	8008538 <SystemClock_Config>
  MX_GPIO_Init();
 80085d2:	f7ff ff09 	bl	80083e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80085d6:	f7ff fd35 	bl	8008044 <MX_DMA_Init>
  MX_ADC1_Init();
 80085da:	f7ff fadb 	bl	8007b94 <MX_ADC1_Init>
  MX_CAN1_Init();
 80085de:	f7ff fb7d 	bl	8007cdc <MX_CAN1_Init>
  MX_CAN2_Init();
 80085e2:	f7ff fbbb 	bl	8007d5c <MX_CAN2_Init>
  MX_UART4_Init();
 80085e6:	f000 f8e7 	bl	80087b8 <MX_UART4_Init>
  MX_UART5_Init();
 80085ea:	f000 f8ff 	bl	80087ec <MX_UART5_Init>
  MX_USART2_UART_Init();
 80085ee:	f000 f917 	bl	8008820 <MX_USART2_UART_Init>
  App_Init(); //DBC CAN
 80085f2:	f7f8 fd93 	bl	800111c <App_Init>
  lcd128_Init(); //LCD
 80085f6:	f7fa fe37 	bl	8003268 <lcd128_Init>
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE); //ʹ��IDLE�ж�
 80085fa:	480a      	ldr	r0, [pc, #40]	@ (8008624 <main+0x5c>)
 80085fc:	6802      	ldr	r2, [r0, #0]
 80085fe:	68d3      	ldr	r3, [r2, #12]
 8008600:	f043 0310 	orr.w	r3, r3, #16
 8008604:	60d3      	str	r3, [r2, #12]
  HAL_UART_Receive_DMA(&huart4, usart4_rx_buffer_data, 256);
 8008606:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800860a:	4907      	ldr	r1, [pc, #28]	@ (8008628 <main+0x60>)
 800860c:	f002 fe2c 	bl	800b268 <HAL_UART_Receive_DMA>
  printf("Enter\r\n");
 8008610:	4806      	ldr	r0, [pc, #24]	@ (800862c <main+0x64>)
 8008612:	f005 f97b 	bl	800d90c <puts>
  CanCcl_vPoweronInit(); //CAN
 8008616:	f003 fe93 	bl	800c340 <CanCcl_vPoweronInit>
  MX_FREERTOS_Init();
 800861a:	f7ff fe53 	bl	80082c4 <MX_FREERTOS_Init>
  osKernelStart();
 800861e:	f002 fe3c 	bl	800b29a <osKernelStart>
 8008622:	e7fe      	b.n	8008622 <main+0x5a>
 8008624:	20006b40 	.word	0x20006b40
 8008628:	20006924 	.word	0x20006924
 800862c:	08012a70 	.word	0x08012a70

08008630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008630:	b500      	push	{lr}
 8008632:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008634:	4b11      	ldr	r3, [pc, #68]	@ (800867c <HAL_MspInit+0x4c>)
 8008636:	699a      	ldr	r2, [r3, #24]
 8008638:	f042 0201 	orr.w	r2, r2, #1
 800863c:	619a      	str	r2, [r3, #24]
 800863e:	699a      	ldr	r2, [r3, #24]
 8008640:	f002 0201 	and.w	r2, r2, #1
 8008644:	9200      	str	r2, [sp, #0]
 8008646:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008648:	69da      	ldr	r2, [r3, #28]
 800864a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800864e:	61da      	str	r2, [r3, #28]
 8008650:	69db      	ldr	r3, [r3, #28]
 8008652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008656:	9301      	str	r3, [sp, #4]
 8008658:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800865a:	2200      	movs	r2, #0
 800865c:	210f      	movs	r1, #15
 800865e:	f06f 0001 	mvn.w	r0, #1
 8008662:	f001 f899 	bl	8009798 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8008666:	4a06      	ldr	r2, [pc, #24]	@ (8008680 <HAL_MspInit+0x50>)
 8008668:	6853      	ldr	r3, [r2, #4]
 800866a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800866e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008672:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008674:	b003      	add	sp, #12
 8008676:	f85d fb04 	ldr.w	pc, [sp], #4
 800867a:	bf00      	nop
 800867c:	40021000 	.word	0x40021000
 8008680:	40010000 	.word	0x40010000

08008684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008684:	e7fe      	b.n	8008684 <NMI_Handler>

08008686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008686:	e7fe      	b.n	8008686 <HardFault_Handler>

08008688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008688:	e7fe      	b.n	8008688 <MemManage_Handler>

0800868a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800868a:	e7fe      	b.n	800868a <BusFault_Handler>

0800868c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800868c:	e7fe      	b.n	800868c <UsageFault_Handler>

0800868e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800868e:	4770      	bx	lr

08008690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008690:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008692:	f000 fa21 	bl	8008ad8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8008696:	f003 fb43 	bl	800bd20 <xTaskGetSchedulerState>
 800869a:	2801      	cmp	r0, #1
 800869c:	d100      	bne.n	80086a0 <SysTick_Handler+0x10>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800869e:	bd08      	pop	{r3, pc}
  xPortSysTickHandler();
 80086a0:	f003 fc60 	bl	800bf64 <xPortSysTickHandler>
}
 80086a4:	e7fb      	b.n	800869e <SysTick_Handler+0xe>
	...

080086a8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80086a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80086aa:	4802      	ldr	r0, [pc, #8]	@ (80086b4 <CAN1_RX0_IRQHandler+0xc>)
 80086ac:	f000 ff05 	bl	80094ba <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80086b0:	bd08      	pop	{r3, pc}
 80086b2:	bf00      	nop
 80086b4:	20006614 	.word	0x20006614

080086b8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80086b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80086ba:	4802      	ldr	r0, [pc, #8]	@ (80086c4 <UART4_IRQHandler+0xc>)
 80086bc:	f002 fbe4 	bl	800ae88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80086c0:	bd08      	pop	{r3, pc}
 80086c2:	bf00      	nop
 80086c4:	20006b40 	.word	0x20006b40

080086c8 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80086c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80086ca:	4802      	ldr	r0, [pc, #8]	@ (80086d4 <DMA2_Channel3_IRQHandler+0xc>)
 80086cc:	f001 fa0a 	bl	8009ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80086d0:	bd08      	pop	{r3, pc}
 80086d2:	bf00      	nop
 80086d4:	20006a6c 	.word	0x20006a6c

080086d8 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80086d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80086da:	4802      	ldr	r0, [pc, #8]	@ (80086e4 <DMA2_Channel5_IRQHandler+0xc>)
 80086dc:	f001 fa02 	bl	8009ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80086e0:	bd08      	pop	{r3, pc}
 80086e2:	bf00      	nop
 80086e4:	20006a28 	.word	0x20006a28

080086e8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 80086e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80086ea:	4802      	ldr	r0, [pc, #8]	@ (80086f4 <CAN2_RX0_IRQHandler+0xc>)
 80086ec:	f000 fee5 	bl	80094ba <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80086f0:	bd08      	pop	{r3, pc}
 80086f2:	bf00      	nop
 80086f4:	200065ec 	.word	0x200065ec

080086f8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80086f8:	2001      	movs	r0, #1
 80086fa:	4770      	bx	lr

080086fc <_kill>:

int _kill(int pid, int sig)
{
 80086fc:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80086fe:	f005 fa59 	bl	800dbb4 <__errno>
 8008702:	2316      	movs	r3, #22
 8008704:	6003      	str	r3, [r0, #0]
  return -1;
}
 8008706:	f04f 30ff 	mov.w	r0, #4294967295
 800870a:	bd08      	pop	{r3, pc}

0800870c <_exit>:

void _exit (int status)
{
 800870c:	b508      	push	{r3, lr}
  _kill(status, -1);
 800870e:	f04f 31ff 	mov.w	r1, #4294967295
 8008712:	f7ff fff3 	bl	80086fc <_kill>
 8008716:	e7fe      	b.n	8008716 <_exit+0xa>

08008718 <_read>:
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008718:	b570      	push	{r4, r5, r6, lr}
 800871a:	460c      	mov	r4, r1
 800871c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800871e:	2500      	movs	r5, #0
 8008720:	e006      	b.n	8008730 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8008722:	f3af 8000 	nop.w
 8008726:	4621      	mov	r1, r4
 8008728:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800872c:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 800872e:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008730:	42b5      	cmp	r5, r6
 8008732:	dbf6      	blt.n	8008722 <_read+0xa>
  }

  return len;
}
 8008734:	4630      	mov	r0, r6
 8008736:	bd70      	pop	{r4, r5, r6, pc}

08008738 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008738:	b570      	push	{r4, r5, r6, lr}
 800873a:	460c      	mov	r4, r1
 800873c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800873e:	2500      	movs	r5, #0
 8008740:	e004      	b.n	800874c <_write+0x14>
  {
    __io_putchar(*ptr++);
 8008742:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008746:	f7ff fee5 	bl	8008514 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800874a:	3501      	adds	r5, #1
 800874c:	42b5      	cmp	r5, r6
 800874e:	dbf8      	blt.n	8008742 <_write+0xa>
  }
  return len;
}
 8008750:	4630      	mov	r0, r6
 8008752:	bd70      	pop	{r4, r5, r6, pc}

08008754 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8008754:	f04f 30ff 	mov.w	r0, #4294967295
 8008758:	4770      	bx	lr

0800875a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800875a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800875e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8008760:	2000      	movs	r0, #0
 8008762:	4770      	bx	lr

08008764 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8008764:	2001      	movs	r0, #1
 8008766:	4770      	bx	lr

08008768 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8008768:	2000      	movs	r0, #0
 800876a:	4770      	bx	lr

0800876c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800876c:	b510      	push	{r4, lr}
 800876e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008770:	4a0c      	ldr	r2, [pc, #48]	@ (80087a4 <_sbrk+0x38>)
 8008772:	490d      	ldr	r1, [pc, #52]	@ (80087a8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008774:	480d      	ldr	r0, [pc, #52]	@ (80087ac <_sbrk+0x40>)
 8008776:	6800      	ldr	r0, [r0, #0]
 8008778:	b140      	cbz	r0, 800878c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800877a:	480c      	ldr	r0, [pc, #48]	@ (80087ac <_sbrk+0x40>)
 800877c:	6800      	ldr	r0, [r0, #0]
 800877e:	4403      	add	r3, r0
 8008780:	1a52      	subs	r2, r2, r1
 8008782:	4293      	cmp	r3, r2
 8008784:	d806      	bhi.n	8008794 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8008786:	4a09      	ldr	r2, [pc, #36]	@ (80087ac <_sbrk+0x40>)
 8008788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800878a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800878c:	4807      	ldr	r0, [pc, #28]	@ (80087ac <_sbrk+0x40>)
 800878e:	4c08      	ldr	r4, [pc, #32]	@ (80087b0 <_sbrk+0x44>)
 8008790:	6004      	str	r4, [r0, #0]
 8008792:	e7f2      	b.n	800877a <_sbrk+0xe>
    errno = ENOMEM;
 8008794:	f005 fa0e 	bl	800dbb4 <__errno>
 8008798:	230c      	movs	r3, #12
 800879a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800879c:	f04f 30ff 	mov.w	r0, #4294967295
 80087a0:	e7f3      	b.n	800878a <_sbrk+0x1e>
 80087a2:	bf00      	nop
 80087a4:	20010000 	.word	0x20010000
 80087a8:	00000400 	.word	0x00000400
 80087ac:	20006a24 	.word	0x20006a24
 80087b0:	20009660 	.word	0x20009660

080087b4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80087b4:	4770      	bx	lr
	...

080087b8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80087b8:	b508      	push	{r3, lr}
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80087ba:	480a      	ldr	r0, [pc, #40]	@ (80087e4 <MX_UART4_Init+0x2c>)
 80087bc:	4b0a      	ldr	r3, [pc, #40]	@ (80087e8 <MX_UART4_Init+0x30>)
 80087be:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 80087c0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80087c4:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80087c6:	2300      	movs	r3, #0
 80087c8:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80087ca:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80087cc:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80087ce:	220c      	movs	r2, #12
 80087d0:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80087d2:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80087d4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80087d6:	f002 f9c6 	bl	800ab66 <HAL_UART_Init>
 80087da:	b900      	cbnz	r0, 80087de <MX_UART4_Init+0x26>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80087dc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80087de:	f7ff fea9 	bl	8008534 <Error_Handler>
}
 80087e2:	e7fb      	b.n	80087dc <MX_UART4_Init+0x24>
 80087e4:	20006b40 	.word	0x20006b40
 80087e8:	40004c00 	.word	0x40004c00

080087ec <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80087ec:	b508      	push	{r3, lr}
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80087ee:	480a      	ldr	r0, [pc, #40]	@ (8008818 <MX_UART5_Init+0x2c>)
 80087f0:	4b0a      	ldr	r3, [pc, #40]	@ (800881c <MX_UART5_Init+0x30>)
 80087f2:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 80087f4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80087f8:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80087fa:	2300      	movs	r3, #0
 80087fc:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80087fe:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8008800:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8008802:	220c      	movs	r2, #12
 8008804:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008806:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8008808:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800880a:	f002 f9ac 	bl	800ab66 <HAL_UART_Init>
 800880e:	b900      	cbnz	r0, 8008812 <MX_UART5_Init+0x26>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8008810:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008812:	f7ff fe8f 	bl	8008534 <Error_Handler>
}
 8008816:	e7fb      	b.n	8008810 <MX_UART5_Init+0x24>
 8008818:	20006af8 	.word	0x20006af8
 800881c:	40005000 	.word	0x40005000

08008820 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008820:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008822:	480a      	ldr	r0, [pc, #40]	@ (800884c <MX_USART2_UART_Init+0x2c>)
 8008824:	4b0a      	ldr	r3, [pc, #40]	@ (8008850 <MX_USART2_UART_Init+0x30>)
 8008826:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8008828:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800882c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800882e:	2100      	movs	r1, #0
 8008830:	6081      	str	r1, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008832:	60c1      	str	r1, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008834:	6101      	str	r1, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008836:	230c      	movs	r3, #12
 8008838:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800883a:	6181      	str	r1, [r0, #24]
  if (HAL_LIN_Init(&huart2, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 800883c:	f002 f9c3 	bl	800abc6 <HAL_LIN_Init>
 8008840:	b900      	cbnz	r0, 8008844 <MX_USART2_UART_Init+0x24>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008842:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008844:	f7ff fe76 	bl	8008534 <Error_Handler>
}
 8008848:	e7fb      	b.n	8008842 <MX_USART2_UART_Init+0x22>
 800884a:	bf00      	nop
 800884c:	20006ab0 	.word	0x20006ab0
 8008850:	40004400 	.word	0x40004400

08008854 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008854:	b570      	push	{r4, r5, r6, lr}
 8008856:	b08c      	sub	sp, #48	@ 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008858:	2300      	movs	r3, #0
 800885a:	9308      	str	r3, [sp, #32]
 800885c:	9309      	str	r3, [sp, #36]	@ 0x24
 800885e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008860:	930b      	str	r3, [sp, #44]	@ 0x2c
  if(uartHandle->Instance==UART4)
 8008862:	6803      	ldr	r3, [r0, #0]
 8008864:	4a62      	ldr	r2, [pc, #392]	@ (80089f0 <HAL_UART_MspInit+0x19c>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d008      	beq.n	800887c <HAL_UART_MspInit+0x28>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART5)
 800886a:	4a62      	ldr	r2, [pc, #392]	@ (80089f4 <HAL_UART_MspInit+0x1a0>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d066      	beq.n	800893e <HAL_UART_MspInit+0xea>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8008870:	4a61      	ldr	r2, [pc, #388]	@ (80089f8 <HAL_UART_MspInit+0x1a4>)
 8008872:	4293      	cmp	r3, r2
 8008874:	f000 8094 	beq.w	80089a0 <HAL_UART_MspInit+0x14c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8008878:	b00c      	add	sp, #48	@ 0x30
 800887a:	bd70      	pop	{r4, r5, r6, pc}
 800887c:	4604      	mov	r4, r0
    __HAL_RCC_UART4_CLK_ENABLE();
 800887e:	4b5f      	ldr	r3, [pc, #380]	@ (80089fc <HAL_UART_MspInit+0x1a8>)
 8008880:	69da      	ldr	r2, [r3, #28]
 8008882:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8008886:	61da      	str	r2, [r3, #28]
 8008888:	69da      	ldr	r2, [r3, #28]
 800888a:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 800888e:	9201      	str	r2, [sp, #4]
 8008890:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008892:	699a      	ldr	r2, [r3, #24]
 8008894:	f042 0210 	orr.w	r2, r2, #16
 8008898:	619a      	str	r2, [r3, #24]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	f003 0310 	and.w	r3, r3, #16
 80088a0:	9302      	str	r3, [sp, #8]
 80088a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80088a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088a8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088aa:	2302      	movs	r3, #2
 80088ac:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80088ae:	2303      	movs	r3, #3
 80088b0:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088b2:	4e53      	ldr	r6, [pc, #332]	@ (8008a00 <HAL_UART_MspInit+0x1ac>)
 80088b4:	a908      	add	r1, sp, #32
 80088b6:	4630      	mov	r0, r6
 80088b8:	f001 fa8a 	bl	8009dd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80088bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80088c0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088c2:	2500      	movs	r5, #0
 80088c4:	9509      	str	r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088c6:	950a      	str	r5, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088c8:	a908      	add	r1, sp, #32
 80088ca:	4630      	mov	r0, r6
 80088cc:	f001 fa80 	bl	8009dd0 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA2_Channel3;
 80088d0:	484c      	ldr	r0, [pc, #304]	@ (8008a04 <HAL_UART_MspInit+0x1b0>)
 80088d2:	4b4d      	ldr	r3, [pc, #308]	@ (8008a08 <HAL_UART_MspInit+0x1b4>)
 80088d4:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80088d6:	6045      	str	r5, [r0, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80088d8:	6085      	str	r5, [r0, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80088da:	2380      	movs	r3, #128	@ 0x80
 80088dc:	60c3      	str	r3, [r0, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80088de:	6105      	str	r5, [r0, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80088e0:	6145      	str	r5, [r0, #20]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80088e2:	6185      	str	r5, [r0, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80088e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80088e8:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80088ea:	f000 ff9d 	bl	8009828 <HAL_DMA_Init>
 80088ee:	bb00      	cbnz	r0, 8008932 <HAL_UART_MspInit+0xde>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80088f0:	4b44      	ldr	r3, [pc, #272]	@ (8008a04 <HAL_UART_MspInit+0x1b0>)
 80088f2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80088f4:	625c      	str	r4, [r3, #36]	@ 0x24
    hdma_uart4_tx.Instance = DMA2_Channel5;
 80088f6:	4845      	ldr	r0, [pc, #276]	@ (8008a0c <HAL_UART_MspInit+0x1b8>)
 80088f8:	4b45      	ldr	r3, [pc, #276]	@ (8008a10 <HAL_UART_MspInit+0x1bc>)
 80088fa:	6003      	str	r3, [r0, #0]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80088fc:	2310      	movs	r3, #16
 80088fe:	6043      	str	r3, [r0, #4]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008900:	2300      	movs	r3, #0
 8008902:	6083      	str	r3, [r0, #8]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008904:	2280      	movs	r2, #128	@ 0x80
 8008906:	60c2      	str	r2, [r0, #12]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008908:	6103      	str	r3, [r0, #16]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800890a:	6143      	str	r3, [r0, #20]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800890c:	6183      	str	r3, [r0, #24]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800890e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008912:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8008914:	f000 ff88 	bl	8009828 <HAL_DMA_Init>
 8008918:	b970      	cbnz	r0, 8008938 <HAL_UART_MspInit+0xe4>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800891a:	4b3c      	ldr	r3, [pc, #240]	@ (8008a0c <HAL_UART_MspInit+0x1b8>)
 800891c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800891e:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8008920:	2200      	movs	r2, #0
 8008922:	2105      	movs	r1, #5
 8008924:	2034      	movs	r0, #52	@ 0x34
 8008926:	f000 ff37 	bl	8009798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800892a:	2034      	movs	r0, #52	@ 0x34
 800892c:	f000 ff44 	bl	80097b8 <HAL_NVIC_EnableIRQ>
 8008930:	e7a2      	b.n	8008878 <HAL_UART_MspInit+0x24>
      Error_Handler();
 8008932:	f7ff fdff 	bl	8008534 <Error_Handler>
 8008936:	e7db      	b.n	80088f0 <HAL_UART_MspInit+0x9c>
      Error_Handler();
 8008938:	f7ff fdfc 	bl	8008534 <Error_Handler>
 800893c:	e7ed      	b.n	800891a <HAL_UART_MspInit+0xc6>
    __HAL_RCC_UART5_CLK_ENABLE();
 800893e:	4b2f      	ldr	r3, [pc, #188]	@ (80089fc <HAL_UART_MspInit+0x1a8>)
 8008940:	69da      	ldr	r2, [r3, #28]
 8008942:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8008946:	61da      	str	r2, [r3, #28]
 8008948:	69da      	ldr	r2, [r3, #28]
 800894a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800894e:	9203      	str	r2, [sp, #12]
 8008950:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008952:	699a      	ldr	r2, [r3, #24]
 8008954:	f042 0210 	orr.w	r2, r2, #16
 8008958:	619a      	str	r2, [r3, #24]
 800895a:	699a      	ldr	r2, [r3, #24]
 800895c:	f002 0210 	and.w	r2, r2, #16
 8008960:	9204      	str	r2, [sp, #16]
 8008962:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008964:	699a      	ldr	r2, [r3, #24]
 8008966:	f042 0220 	orr.w	r2, r2, #32
 800896a:	619a      	str	r2, [r3, #24]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	f003 0320 	and.w	r3, r3, #32
 8008972:	9305      	str	r3, [sp, #20]
 8008974:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008976:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800897a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800897c:	2302      	movs	r3, #2
 800897e:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008980:	2303      	movs	r3, #3
 8008982:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008984:	a908      	add	r1, sp, #32
 8008986:	481e      	ldr	r0, [pc, #120]	@ (8008a00 <HAL_UART_MspInit+0x1ac>)
 8008988:	f001 fa22 	bl	8009dd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800898c:	2304      	movs	r3, #4
 800898e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008990:	2300      	movs	r3, #0
 8008992:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008994:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008996:	a908      	add	r1, sp, #32
 8008998:	481e      	ldr	r0, [pc, #120]	@ (8008a14 <HAL_UART_MspInit+0x1c0>)
 800899a:	f001 fa19 	bl	8009dd0 <HAL_GPIO_Init>
 800899e:	e76b      	b.n	8008878 <HAL_UART_MspInit+0x24>
    __HAL_RCC_USART2_CLK_ENABLE();
 80089a0:	4b16      	ldr	r3, [pc, #88]	@ (80089fc <HAL_UART_MspInit+0x1a8>)
 80089a2:	69da      	ldr	r2, [r3, #28]
 80089a4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80089a8:	61da      	str	r2, [r3, #28]
 80089aa:	69da      	ldr	r2, [r3, #28]
 80089ac:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80089b0:	9206      	str	r2, [sp, #24]
 80089b2:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089b4:	699a      	ldr	r2, [r3, #24]
 80089b6:	f042 0204 	orr.w	r2, r2, #4
 80089ba:	619a      	str	r2, [r3, #24]
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	f003 0304 	and.w	r3, r3, #4
 80089c2:	9307      	str	r3, [sp, #28]
 80089c4:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80089c6:	2304      	movs	r3, #4
 80089c8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089ca:	2302      	movs	r3, #2
 80089cc:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80089ce:	2303      	movs	r3, #3
 80089d0:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089d2:	4c11      	ldr	r4, [pc, #68]	@ (8008a18 <HAL_UART_MspInit+0x1c4>)
 80089d4:	a908      	add	r1, sp, #32
 80089d6:	4620      	mov	r0, r4
 80089d8:	f001 f9fa 	bl	8009dd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80089dc:	2308      	movs	r3, #8
 80089de:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80089e0:	2300      	movs	r3, #0
 80089e2:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089e4:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089e6:	a908      	add	r1, sp, #32
 80089e8:	4620      	mov	r0, r4
 80089ea:	f001 f9f1 	bl	8009dd0 <HAL_GPIO_Init>
}
 80089ee:	e743      	b.n	8008878 <HAL_UART_MspInit+0x24>
 80089f0:	40004c00 	.word	0x40004c00
 80089f4:	40005000 	.word	0x40005000
 80089f8:	40004400 	.word	0x40004400
 80089fc:	40021000 	.word	0x40021000
 8008a00:	40011000 	.word	0x40011000
 8008a04:	20006a6c 	.word	0x20006a6c
 8008a08:	40020430 	.word	0x40020430
 8008a0c:	20006a28 	.word	0x20006a28
 8008a10:	40020458 	.word	0x40020458
 8008a14:	40011400 	.word	0x40011400
 8008a18:	40010800 	.word	0x40010800

08008a1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008a1c:	f7ff feca 	bl	80087b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008a20:	480b      	ldr	r0, [pc, #44]	@ (8008a50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8008a22:	490c      	ldr	r1, [pc, #48]	@ (8008a54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8008a24:	4a0c      	ldr	r2, [pc, #48]	@ (8008a58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8008a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008a28:	e002      	b.n	8008a30 <LoopCopyDataInit>

08008a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008a2e:	3304      	adds	r3, #4

08008a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008a34:	d3f9      	bcc.n	8008a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008a36:	4a09      	ldr	r2, [pc, #36]	@ (8008a5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8008a38:	4c09      	ldr	r4, [pc, #36]	@ (8008a60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008a3c:	e001      	b.n	8008a42 <LoopFillZerobss>

08008a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008a40:	3204      	adds	r2, #4

08008a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008a44:	d3fb      	bcc.n	8008a3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008a46:	f005 f8bb 	bl	800dbc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008a4a:	f7ff fdbd 	bl	80085c8 <main>
  bx lr
 8008a4e:	4770      	bx	lr
  ldr r0, =_sdata
 8008a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008a54:	2000456c 	.word	0x2000456c
  ldr r2, =_sidata
 8008a58:	0801322c 	.word	0x0801322c
  ldr r2, =_sbss
 8008a5c:	2000456c 	.word	0x2000456c
  ldr r4, =_ebss
 8008a60:	2000965c 	.word	0x2000965c

08008a64 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008a64:	e7fe      	b.n	8008a64 <ADC1_2_IRQHandler>
	...

08008a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a68:	b510      	push	{r4, lr}
 8008a6a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8008aa8 <HAL_InitTick+0x40>)
 8008a6e:	781a      	ldrb	r2, [r3, #0]
 8008a70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008a74:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a78:	4a0c      	ldr	r2, [pc, #48]	@ (8008aac <HAL_InitTick+0x44>)
 8008a7a:	6810      	ldr	r0, [r2, #0]
 8008a7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8008a80:	f000 fea8 	bl	80097d4 <HAL_SYSTICK_Config>
 8008a84:	b968      	cbnz	r0, 8008aa2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008a86:	2c0f      	cmp	r4, #15
 8008a88:	d901      	bls.n	8008a8e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8008a8a:	2001      	movs	r0, #1
 8008a8c:	e00a      	b.n	8008aa4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008a8e:	2200      	movs	r2, #0
 8008a90:	4621      	mov	r1, r4
 8008a92:	f04f 30ff 	mov.w	r0, #4294967295
 8008a96:	f000 fe7f 	bl	8009798 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008a9a:	4b05      	ldr	r3, [pc, #20]	@ (8008ab0 <HAL_InitTick+0x48>)
 8008a9c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	e000      	b.n	8008aa4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8008aa2:	2001      	movs	r0, #1
}
 8008aa4:	bd10      	pop	{r4, pc}
 8008aa6:	bf00      	nop
 8008aa8:	20004384 	.word	0x20004384
 8008aac:	20004380 	.word	0x20004380
 8008ab0:	20004388 	.word	0x20004388

08008ab4 <HAL_Init>:
{
 8008ab4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008ab6:	4a07      	ldr	r2, [pc, #28]	@ (8008ad4 <HAL_Init+0x20>)
 8008ab8:	6813      	ldr	r3, [r2, #0]
 8008aba:	f043 0310 	orr.w	r3, r3, #16
 8008abe:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008ac0:	2003      	movs	r0, #3
 8008ac2:	f000 fe57 	bl	8009774 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8008ac6:	200f      	movs	r0, #15
 8008ac8:	f7ff ffce 	bl	8008a68 <HAL_InitTick>
  HAL_MspInit();
 8008acc:	f7ff fdb0 	bl	8008630 <HAL_MspInit>
}
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	bd08      	pop	{r3, pc}
 8008ad4:	40022000 	.word	0x40022000

08008ad8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8008ad8:	4a03      	ldr	r2, [pc, #12]	@ (8008ae8 <HAL_IncTick+0x10>)
 8008ada:	6811      	ldr	r1, [r2, #0]
 8008adc:	4b03      	ldr	r3, [pc, #12]	@ (8008aec <HAL_IncTick+0x14>)
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	440b      	add	r3, r1
 8008ae2:	6013      	str	r3, [r2, #0]
}
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	20006b88 	.word	0x20006b88
 8008aec:	20004384 	.word	0x20004384

08008af0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008af0:	4b01      	ldr	r3, [pc, #4]	@ (8008af8 <HAL_GetTick+0x8>)
 8008af2:	6818      	ldr	r0, [r3, #0]
}
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	20006b88 	.word	0x20006b88

08008afc <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8008afc:	6803      	ldr	r3, [r0, #0]
 8008afe:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8008b00:	4770      	bx	lr
	...

08008b04 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8008b04:	b430      	push	{r4, r5}
 8008b06:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8008b08:	2200      	movs	r2, #0
 8008b0a:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008b0c:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8008b10:	2a01      	cmp	r2, #1
 8008b12:	f000 808f 	beq.w	8008c34 <HAL_ADC_ConfigChannel+0x130>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008b1e:	684a      	ldr	r2, [r1, #4]
 8008b20:	2a06      	cmp	r2, #6
 8008b22:	d82d      	bhi.n	8008b80 <HAL_ADC_ConfigChannel+0x7c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8008b24:	6804      	ldr	r4, [r0, #0]
 8008b26:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008b28:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008b2c:	3a05      	subs	r2, #5
 8008b2e:	f04f 0c1f 	mov.w	ip, #31
 8008b32:	fa0c fc02 	lsl.w	ip, ip, r2
 8008b36:	ea20 000c 	bic.w	r0, r0, ip
 8008b3a:	680d      	ldr	r5, [r1, #0]
 8008b3c:	fa05 f202 	lsl.w	r2, r5, r2
 8008b40:	4302      	orrs	r2, r0
 8008b42:	6362      	str	r2, [r4, #52]	@ 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8008b44:	680a      	ldr	r2, [r1, #0]
 8008b46:	2a09      	cmp	r2, #9
 8008b48:	d938      	bls.n	8008bbc <HAL_ADC_ConfigChannel+0xb8>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8008b4a:	681c      	ldr	r4, [r3, #0]
 8008b4c:	68e0      	ldr	r0, [r4, #12]
 8008b4e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008b52:	3a1e      	subs	r2, #30
 8008b54:	f04f 0c07 	mov.w	ip, #7
 8008b58:	fa0c fc02 	lsl.w	ip, ip, r2
 8008b5c:	ea20 000c 	bic.w	r0, r0, ip
 8008b60:	688d      	ldr	r5, [r1, #8]
 8008b62:	fa05 f202 	lsl.w	r2, r5, r2
 8008b66:	4302      	orrs	r2, r0
 8008b68:	60e2      	str	r2, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008b6a:	680a      	ldr	r2, [r1, #0]
 8008b6c:	3a10      	subs	r2, #16
 8008b6e:	2a01      	cmp	r2, #1
 8008b70:	d934      	bls.n	8008bdc <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008b72:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8008b7a:	b002      	add	sp, #8
 8008b7c:	bc30      	pop	{r4, r5}
 8008b7e:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8008b80:	2a0c      	cmp	r2, #12
 8008b82:	d80d      	bhi.n	8008ba0 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8008b84:	6805      	ldr	r5, [r0, #0]
 8008b86:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8008b88:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008b8c:	3a23      	subs	r2, #35	@ 0x23
 8008b8e:	241f      	movs	r4, #31
 8008b90:	4094      	lsls	r4, r2
 8008b92:	ea20 0004 	bic.w	r0, r0, r4
 8008b96:	680c      	ldr	r4, [r1, #0]
 8008b98:	4094      	lsls	r4, r2
 8008b9a:	4320      	orrs	r0, r4
 8008b9c:	6328      	str	r0, [r5, #48]	@ 0x30
 8008b9e:	e7d1      	b.n	8008b44 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8008ba0:	6805      	ldr	r5, [r0, #0]
 8008ba2:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8008ba4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008ba8:	3a41      	subs	r2, #65	@ 0x41
 8008baa:	241f      	movs	r4, #31
 8008bac:	4094      	lsls	r4, r2
 8008bae:	ea20 0004 	bic.w	r0, r0, r4
 8008bb2:	680c      	ldr	r4, [r1, #0]
 8008bb4:	4094      	lsls	r4, r2
 8008bb6:	4320      	orrs	r0, r4
 8008bb8:	62e8      	str	r0, [r5, #44]	@ 0x2c
 8008bba:	e7c3      	b.n	8008b44 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8008bbc:	681c      	ldr	r4, [r3, #0]
 8008bbe:	6920      	ldr	r0, [r4, #16]
 8008bc0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008bc4:	f04f 0c07 	mov.w	ip, #7
 8008bc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8008bcc:	ea20 000c 	bic.w	r0, r0, ip
 8008bd0:	688d      	ldr	r5, [r1, #8]
 8008bd2:	fa05 f202 	lsl.w	r2, r5, r2
 8008bd6:	4302      	orrs	r2, r0
 8008bd8:	6122      	str	r2, [r4, #16]
 8008bda:	e7c6      	b.n	8008b6a <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	4816      	ldr	r0, [pc, #88]	@ (8008c38 <HAL_ADC_ConfigChannel+0x134>)
 8008be0:	4282      	cmp	r2, r0
 8008be2:	d005      	beq.n	8008bf0 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008be4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008be6:	f042 0220 	orr.w	r2, r2, #32
 8008bea:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8008bec:	2001      	movs	r0, #1
 8008bee:	e7c1      	b.n	8008b74 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8008bf0:	6890      	ldr	r0, [r2, #8]
 8008bf2:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 8008bf6:	d11b      	bne.n	8008c30 <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8008bf8:	6890      	ldr	r0, [r2, #8]
 8008bfa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8008bfe:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008c00:	680a      	ldr	r2, [r1, #0]
 8008c02:	2a10      	cmp	r2, #16
 8008c04:	d001      	beq.n	8008c0a <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008c06:	2000      	movs	r0, #0
 8008c08:	e7b4      	b.n	8008b74 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8008c3c <HAL_ADC_ConfigChannel+0x138>)
 8008c0c:	6812      	ldr	r2, [r2, #0]
 8008c0e:	490c      	ldr	r1, [pc, #48]	@ (8008c40 <HAL_ADC_ConfigChannel+0x13c>)
 8008c10:	fba1 1202 	umull	r1, r2, r1, r2
 8008c14:	0c92      	lsrs	r2, r2, #18
 8008c16:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008c1a:	0052      	lsls	r2, r2, #1
 8008c1c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8008c1e:	e002      	b.n	8008c26 <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8008c20:	9a01      	ldr	r2, [sp, #4]
 8008c22:	3a01      	subs	r2, #1
 8008c24:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8008c26:	9a01      	ldr	r2, [sp, #4]
 8008c28:	2a00      	cmp	r2, #0
 8008c2a:	d1f9      	bne.n	8008c20 <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	e7a1      	b.n	8008b74 <HAL_ADC_ConfigChannel+0x70>
 8008c30:	2000      	movs	r0, #0
 8008c32:	e79f      	b.n	8008b74 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8008c34:	2002      	movs	r0, #2
 8008c36:	e7a0      	b.n	8008b7a <HAL_ADC_ConfigChannel+0x76>
 8008c38:	40012400 	.word	0x40012400
 8008c3c:	20004380 	.word	0x20004380
 8008c40:	431bde83 	.word	0x431bde83

08008c44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8008c44:	b530      	push	{r4, r5, lr}
 8008c46:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008c4c:	6803      	ldr	r3, [r0, #0]
 8008c4e:	689a      	ldr	r2, [r3, #8]
 8008c50:	f012 0f01 	tst.w	r2, #1
 8008c54:	d133      	bne.n	8008cbe <ADC_Enable+0x7a>
 8008c56:	4604      	mov	r4, r0
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008c58:	689a      	ldr	r2, [r3, #8]
 8008c5a:	f042 0201 	orr.w	r2, r2, #1
 8008c5e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008c60:	4b18      	ldr	r3, [pc, #96]	@ (8008cc4 <ADC_Enable+0x80>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a18      	ldr	r2, [pc, #96]	@ (8008cc8 <ADC_Enable+0x84>)
 8008c66:	fba2 2303 	umull	r2, r3, r2, r3
 8008c6a:	0c9b      	lsrs	r3, r3, #18
 8008c6c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8008c6e:	e002      	b.n	8008c76 <ADC_Enable+0x32>
    {
      wait_loop_index--;
 8008c70:	9b01      	ldr	r3, [sp, #4]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8008c76:	9b01      	ldr	r3, [sp, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1f9      	bne.n	8008c70 <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008c7c:	f7ff ff38 	bl	8008af0 <HAL_GetTick>
 8008c80:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f013 0f01 	tst.w	r3, #1
 8008c8a:	d116      	bne.n	8008cba <ADC_Enable+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008c8c:	f7ff ff30 	bl	8008af0 <HAL_GetTick>
 8008c90:	1b43      	subs	r3, r0, r5
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d9f5      	bls.n	8008c82 <ADC_Enable+0x3e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f013 0f01 	tst.w	r3, #1
 8008c9e:	d1f0      	bne.n	8008c82 <ADC_Enable+0x3e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008ca0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008ca2:	f043 0310 	orr.w	r3, r3, #16
 8008ca6:	62a3      	str	r3, [r4, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008ca8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008caa:	f043 0301 	orr.w	r3, r3, #1
 8008cae:	62e3      	str	r3, [r4, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24

          return HAL_ERROR;
 8008cb6:	2001      	movs	r0, #1
 8008cb8:	e002      	b.n	8008cc0 <ADC_Enable+0x7c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8008cba:	2000      	movs	r0, #0
 8008cbc:	e000      	b.n	8008cc0 <ADC_Enable+0x7c>
 8008cbe:	2000      	movs	r0, #0
}
 8008cc0:	b003      	add	sp, #12
 8008cc2:	bd30      	pop	{r4, r5, pc}
 8008cc4:	20004380 	.word	0x20004380
 8008cc8:	431bde83 	.word	0x431bde83

08008ccc <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8008ccc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d068      	beq.n	8008da6 <HAL_ADC_Start+0xda>
{
 8008cd4:	b510      	push	{r4, lr}
 8008cd6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8008cd8:	2301      	movs	r3, #1
 8008cda:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8008cde:	f7ff ffb1 	bl	8008c44 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d15b      	bne.n	8008d9e <HAL_ADC_Start+0xd2>
    ADC_STATE_CLR_SET(hadc->State,
 8008ce6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008ce8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cec:	f023 0301 	bic.w	r3, r3, #1
 8008cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cf4:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8008dac <HAL_ADC_Start+0xe0>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d027      	beq.n	8008d4e <HAL_ADC_Start+0x82>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008cfe:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008d00:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8008d04:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8008d0c:	d005      	beq.n	8008d1a <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008d0e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008d10:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8008d14:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008d18:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008d1a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008d1c:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8008d20:	d02b      	beq.n	8008d7a <HAL_ADC_Start+0xae>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008d22:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008d24:	f022 0206 	bic.w	r2, r2, #6
 8008d28:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_UNLOCK(hadc);
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8008d30:	f06f 0202 	mvn.w	r2, #2
 8008d34:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	689a      	ldr	r2, [r3, #8]
 8008d3a:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8008d3e:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8008d42:	d01d      	beq.n	8008d80 <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8008d44:	689a      	ldr	r2, [r3, #8]
 8008d46:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8008d4a:	609a      	str	r2, [r3, #8]
 8008d4c:	e02a      	b.n	8008da4 <HAL_ADC_Start+0xd8>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8008d4e:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8008d52:	6852      	ldr	r2, [r2, #4]
 8008d54:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 8008d58:	d0d1      	beq.n	8008cfe <HAL_ADC_Start+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008d5a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008d5c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8008d60:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8008d62:	4a13      	ldr	r2, [pc, #76]	@ (8008db0 <HAL_ADC_Start+0xe4>)
 8008d64:	6852      	ldr	r2, [r2, #4]
 8008d66:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8008d6a:	d0d6      	beq.n	8008d1a <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008d6c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008d6e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8008d72:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008d76:	62a2      	str	r2, [r4, #40]	@ 0x28
 8008d78:	e7cf      	b.n	8008d1a <HAL_ADC_Start+0x4e>
      ADC_CLEAR_ERRORCODE(hadc);
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8008d7e:	e7d4      	b.n	8008d2a <HAL_ADC_Start+0x5e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8008d80:	4a0a      	ldr	r2, [pc, #40]	@ (8008dac <HAL_ADC_Start+0xe0>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d004      	beq.n	8008d90 <HAL_ADC_Start+0xc4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8008d86:	689a      	ldr	r2, [r3, #8]
 8008d88:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8008d8c:	609a      	str	r2, [r3, #8]
 8008d8e:	e009      	b.n	8008da4 <HAL_ADC_Start+0xd8>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8008d90:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8008d94:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8008d96:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 8008d9a:	d1d3      	bne.n	8008d44 <HAL_ADC_Start+0x78>
 8008d9c:	e7f3      	b.n	8008d86 <HAL_ADC_Start+0xba>
    __HAL_UNLOCK(hadc);
 8008d9e:	2300      	movs	r3, #0
 8008da0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8008da4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8008da6:	2002      	movs	r0, #2
}
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	40012800 	.word	0x40012800
 8008db0:	40012400 	.word	0x40012400

08008db4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8008db4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008db6:	6803      	ldr	r3, [r0, #0]
 8008db8:	689a      	ldr	r2, [r3, #8]
 8008dba:	f012 0f01 	tst.w	r2, #1
 8008dbe:	d101      	bne.n	8008dc4 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8008dc0:	2000      	movs	r0, #0
}
 8008dc2:	bd38      	pop	{r3, r4, r5, pc}
 8008dc4:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8008dc6:	689a      	ldr	r2, [r3, #8]
 8008dc8:	f022 0201 	bic.w	r2, r2, #1
 8008dcc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8008dce:	f7ff fe8f 	bl	8008af0 <HAL_GetTick>
 8008dd2:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	f013 0f01 	tst.w	r3, #1
 8008ddc:	d013      	beq.n	8008e06 <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008dde:	f7ff fe87 	bl	8008af0 <HAL_GetTick>
 8008de2:	1b43      	subs	r3, r0, r5
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d9f5      	bls.n	8008dd4 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	f013 0f01 	tst.w	r3, #1
 8008df0:	d0f0      	beq.n	8008dd4 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008df2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008df4:	f043 0310 	orr.w	r3, r3, #16
 8008df8:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008dfa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008dfc:	f043 0301 	orr.w	r3, r3, #1
 8008e00:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8008e02:	2001      	movs	r0, #1
 8008e04:	e7dd      	b.n	8008dc2 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8008e06:	2000      	movs	r0, #0
 8008e08:	e7db      	b.n	8008dc2 <ADC_ConversionStop_Disable+0xe>
	...

08008e0c <HAL_ADC_Init>:
  if(hadc == NULL)
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d07b      	beq.n	8008f08 <HAL_ADC_Init+0xfc>
{
 8008e10:	b570      	push	{r4, r5, r6, lr}
 8008e12:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008e14:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d04d      	beq.n	8008eb6 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f7ff ffca 	bl	8008db4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8008e20:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008e22:	f013 0310 	ands.w	r3, r3, #16
 8008e26:	d169      	bne.n	8008efc <HAL_ADC_Init+0xf0>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d167      	bne.n	8008efc <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 8008e2c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008e2e:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8008e32:	f022 0202 	bic.w	r2, r2, #2
 8008e36:	f042 0202 	orr.w	r2, r2, #2
 8008e3a:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008e3c:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8008e3e:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008e40:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8008e42:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8008e44:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8008e48:	68a5      	ldr	r5, [r4, #8]
 8008e4a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8008e4e:	d002      	beq.n	8008e56 <HAL_ADC_Init+0x4a>
 8008e50:	2d01      	cmp	r5, #1
 8008e52:	d036      	beq.n	8008ec2 <HAL_ADC_Init+0xb6>
 8008e54:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008e56:	7d26      	ldrb	r6, [r4, #20]
 8008e58:	2e01      	cmp	r6, #1
 8008e5a:	d035      	beq.n	8008ec8 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8008e5c:	6826      	ldr	r6, [r4, #0]
 8008e5e:	6871      	ldr	r1, [r6, #4]
 8008e60:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 8008e64:	4329      	orrs	r1, r5
 8008e66:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8008e68:	6825      	ldr	r5, [r4, #0]
 8008e6a:	68ae      	ldr	r6, [r5, #8]
 8008e6c:	4927      	ldr	r1, [pc, #156]	@ (8008f0c <HAL_ADC_Init+0x100>)
 8008e6e:	4031      	ands	r1, r6
 8008e70:	4311      	orrs	r1, r2
 8008e72:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8008e74:	68a1      	ldr	r1, [r4, #8]
 8008e76:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8008e7a:	d001      	beq.n	8008e80 <HAL_ADC_Init+0x74>
 8008e7c:	2901      	cmp	r1, #1
 8008e7e:	d102      	bne.n	8008e86 <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	3b01      	subs	r3, #1
 8008e84:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8008e86:	6825      	ldr	r5, [r4, #0]
 8008e88:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8008e8a:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 8008e8e:	430b      	orrs	r3, r1
 8008e90:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	6899      	ldr	r1, [r3, #8]
 8008e96:	4b1e      	ldr	r3, [pc, #120]	@ (8008f10 <HAL_ADC_Init+0x104>)
 8008e98:	400b      	ands	r3, r1
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d025      	beq.n	8008eea <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 8008e9e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008ea0:	f023 0312 	bic.w	r3, r3, #18
 8008ea4:	f043 0310 	orr.w	r3, r3, #16
 8008ea8:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008eaa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008eac:	f043 0301 	orr.w	r3, r3, #1
 8008eb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 8008eb2:	2001      	movs	r0, #1
 8008eb4:	e027      	b.n	8008f06 <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 8008eb6:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8008eb8:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8008ebc:	f7fe fece 	bl	8007c5c <HAL_ADC_MspInit>
 8008ec0:	e7ab      	b.n	8008e1a <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8008ec2:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8008ec6:	e7c6      	b.n	8008e56 <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8008ec8:	b931      	cbnz	r1, 8008ed8 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8008eca:	69a1      	ldr	r1, [r4, #24]
 8008ecc:	3901      	subs	r1, #1
 8008ece:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8008ed2:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 8008ed6:	e7c1      	b.n	8008e5c <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008ed8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8008eda:	f041 0120 	orr.w	r1, r1, #32
 8008ede:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008ee0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008ee2:	f041 0101 	orr.w	r1, r1, #1
 8008ee6:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8008ee8:	e7b8      	b.n	8008e5c <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 8008eea:	2300      	movs	r3, #0
 8008eec:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8008eee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008ef0:	f023 0303 	bic.w	r3, r3, #3
 8008ef4:	f043 0301 	orr.w	r3, r3, #1
 8008ef8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008efa:	e004      	b.n	8008f06 <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008efc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008efe:	f043 0310 	orr.w	r3, r3, #16
 8008f02:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8008f04:	2001      	movs	r0, #1
}
 8008f06:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8008f08:	2001      	movs	r0, #1
}
 8008f0a:	4770      	bx	lr
 8008f0c:	ffe1f7fd 	.word	0xffe1f7fd
 8008f10:	ff1f0efe 	.word	0xff1f0efe

08008f14 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008f14:	2800      	cmp	r0, #0
 8008f16:	f000 80a1 	beq.w	800905c <HAL_CAN_Init+0x148>
{
 8008f1a:	b538      	push	{r3, r4, r5, lr}
 8008f1c:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008f1e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8008f22:	b1d3      	cbz	r3, 8008f5a <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008f24:	6822      	ldr	r2, [r4, #0]
 8008f26:	6813      	ldr	r3, [r2, #0]
 8008f28:	f043 0301 	orr.w	r3, r3, #1
 8008f2c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008f2e:	f7ff fddf 	bl	8008af0 <HAL_GetTick>
 8008f32:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008f34:	6823      	ldr	r3, [r4, #0]
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	f012 0f01 	tst.w	r2, #1
 8008f3c:	d110      	bne.n	8008f60 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008f3e:	f7ff fdd7 	bl	8008af0 <HAL_GetTick>
 8008f42:	1b40      	subs	r0, r0, r5
 8008f44:	280a      	cmp	r0, #10
 8008f46:	d9f5      	bls.n	8008f34 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008f48:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008f4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f4e:	6263      	str	r3, [r4, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008f50:	2305      	movs	r3, #5
 8008f52:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8008f56:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8008f58:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8008f5a:	f7fe ff3f 	bl	8007ddc <HAL_CAN_MspInit>
 8008f5e:	e7e1      	b.n	8008f24 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	f022 0202 	bic.w	r2, r2, #2
 8008f66:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8008f68:	f7ff fdc2 	bl	8008af0 <HAL_GetTick>
 8008f6c:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	685a      	ldr	r2, [r3, #4]
 8008f72:	f012 0f02 	tst.w	r2, #2
 8008f76:	d00d      	beq.n	8008f94 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008f78:	f7ff fdba 	bl	8008af0 <HAL_GetTick>
 8008f7c:	1b40      	subs	r0, r0, r5
 8008f7e:	280a      	cmp	r0, #10
 8008f80:	d9f5      	bls.n	8008f6e <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008f82:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f88:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8008f8a:	2305      	movs	r3, #5
 8008f8c:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8008f90:	2001      	movs	r0, #1
 8008f92:	e7e1      	b.n	8008f58 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008f94:	7e22      	ldrb	r2, [r4, #24]
 8008f96:	2a01      	cmp	r2, #1
 8008f98:	d03d      	beq.n	8009016 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008fa0:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8008fa2:	7e63      	ldrb	r3, [r4, #25]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d03b      	beq.n	8009020 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008fa8:	6822      	ldr	r2, [r4, #0]
 8008faa:	6813      	ldr	r3, [r2, #0]
 8008fac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fb0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008fb2:	7ea3      	ldrb	r3, [r4, #26]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d039      	beq.n	800902c <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008fb8:	6822      	ldr	r2, [r4, #0]
 8008fba:	6813      	ldr	r3, [r2, #0]
 8008fbc:	f023 0320 	bic.w	r3, r3, #32
 8008fc0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008fc2:	7ee3      	ldrb	r3, [r4, #27]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d037      	beq.n	8009038 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008fc8:	6822      	ldr	r2, [r4, #0]
 8008fca:	6813      	ldr	r3, [r2, #0]
 8008fcc:	f043 0310 	orr.w	r3, r3, #16
 8008fd0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008fd2:	7f23      	ldrb	r3, [r4, #28]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d035      	beq.n	8009044 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008fd8:	6822      	ldr	r2, [r4, #0]
 8008fda:	6813      	ldr	r3, [r2, #0]
 8008fdc:	f023 0308 	bic.w	r3, r3, #8
 8008fe0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008fe2:	7f63      	ldrb	r3, [r4, #29]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d033      	beq.n	8009050 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008fe8:	6822      	ldr	r2, [r4, #0]
 8008fea:	6813      	ldr	r3, [r2, #0]
 8008fec:	f023 0304 	bic.w	r3, r3, #4
 8008ff0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008ff2:	68a3      	ldr	r3, [r4, #8]
 8008ff4:	68e2      	ldr	r2, [r4, #12]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	6922      	ldr	r2, [r4, #16]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	6962      	ldr	r2, [r4, #20]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	6862      	ldr	r2, [r4, #4]
 8009002:	3a01      	subs	r2, #1
 8009004:	6821      	ldr	r1, [r4, #0]
 8009006:	4313      	orrs	r3, r2
 8009008:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800900a:	2000      	movs	r0, #0
 800900c:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800900e:	2301      	movs	r3, #1
 8009010:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8009014:	e7a0      	b.n	8008f58 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800901c:	601a      	str	r2, [r3, #0]
 800901e:	e7c0      	b.n	8008fa2 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009020:	6822      	ldr	r2, [r4, #0]
 8009022:	6813      	ldr	r3, [r2, #0]
 8009024:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009028:	6013      	str	r3, [r2, #0]
 800902a:	e7c2      	b.n	8008fb2 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800902c:	6822      	ldr	r2, [r4, #0]
 800902e:	6813      	ldr	r3, [r2, #0]
 8009030:	f043 0320 	orr.w	r3, r3, #32
 8009034:	6013      	str	r3, [r2, #0]
 8009036:	e7c4      	b.n	8008fc2 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009038:	6822      	ldr	r2, [r4, #0]
 800903a:	6813      	ldr	r3, [r2, #0]
 800903c:	f023 0310 	bic.w	r3, r3, #16
 8009040:	6013      	str	r3, [r2, #0]
 8009042:	e7c6      	b.n	8008fd2 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009044:	6822      	ldr	r2, [r4, #0]
 8009046:	6813      	ldr	r3, [r2, #0]
 8009048:	f043 0308 	orr.w	r3, r3, #8
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	e7c8      	b.n	8008fe2 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009050:	6822      	ldr	r2, [r4, #0]
 8009052:	6813      	ldr	r3, [r2, #0]
 8009054:	f043 0304 	orr.w	r3, r3, #4
 8009058:	6013      	str	r3, [r2, #0]
 800905a:	e7ca      	b.n	8008ff2 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 800905c:	2001      	movs	r0, #1
}
 800905e:	4770      	bx	lr

08009060 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009060:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8009064:	3b01      	subs	r3, #1
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b01      	cmp	r3, #1
 800906a:	d905      	bls.n	8009078 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800906c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800906e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009072:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8009074:	2001      	movs	r0, #1
  }
}
 8009076:	4770      	bx	lr
{
 8009078:	b510      	push	{r4, lr}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800907a:	4b47      	ldr	r3, [pc, #284]	@ (8009198 <HAL_CAN_ConfigFilter+0x138>)
 800907c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8009080:	f042 0201 	orr.w	r2, r2, #1
 8009084:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8009088:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800908c:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8009090:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8009094:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8009098:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 800909a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800909e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80090a2:	694a      	ldr	r2, [r1, #20]
 80090a4:	f002 021f 	and.w	r2, r2, #31
 80090a8:	2001      	movs	r0, #1
 80090aa:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80090ae:	f8d3 021c 	ldr.w	r0, [r3, #540]	@ 0x21c
 80090b2:	ea6f 0c02 	mvn.w	ip, r2
 80090b6:	ea20 0002 	bic.w	r0, r0, r2
 80090ba:	f8c3 021c 	str.w	r0, [r3, #540]	@ 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80090be:	69cb      	ldr	r3, [r1, #28]
 80090c0:	b9cb      	cbnz	r3, 80090f6 <HAL_CAN_ConfigFilter+0x96>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80090c2:	4b35      	ldr	r3, [pc, #212]	@ (8009198 <HAL_CAN_ConfigFilter+0x138>)
 80090c4:	f8d3 020c 	ldr.w	r0, [r3, #524]	@ 0x20c
 80090c8:	ea0c 0000 	and.w	r0, ip, r0
 80090cc:	f8c3 020c 	str.w	r0, [r3, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80090d0:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80090d2:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80090d4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80090d8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80090dc:	3048      	adds	r0, #72	@ 0x48
 80090de:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80090e2:	688c      	ldr	r4, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80090e4:	8808      	ldrh	r0, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80090e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80090ea:	694c      	ldr	r4, [r1, #20]
 80090ec:	f104 0e48 	add.w	lr, r4, #72	@ 0x48
 80090f0:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
 80090f4:	6058      	str	r0, [r3, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80090f6:	69cb      	ldr	r3, [r1, #28]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d01e      	beq.n	800913a <HAL_CAN_ConfigFilter+0xda>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80090fc:	698b      	ldr	r3, [r1, #24]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d135      	bne.n	800916e <HAL_CAN_ConfigFilter+0x10e>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8009102:	4825      	ldr	r0, [pc, #148]	@ (8009198 <HAL_CAN_ConfigFilter+0x138>)
 8009104:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 8009108:	ea0c 0303 	and.w	r3, ip, r3
 800910c:	f8c0 3204 	str.w	r3, [r0, #516]	@ 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009110:	690b      	ldr	r3, [r1, #16]
 8009112:	bb9b      	cbnz	r3, 800917c <HAL_CAN_ConfigFilter+0x11c>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009114:	4820      	ldr	r0, [pc, #128]	@ (8009198 <HAL_CAN_ConfigFilter+0x138>)
 8009116:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 800911a:	ea0c 0303 	and.w	r3, ip, r3
 800911e:	f8c0 3214 	str.w	r3, [r0, #532]	@ 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009122:	6a0b      	ldr	r3, [r1, #32]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d030      	beq.n	800918a <HAL_CAN_ConfigFilter+0x12a>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009128:	4a1b      	ldr	r2, [pc, #108]	@ (8009198 <HAL_CAN_ConfigFilter+0x138>)
 800912a:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 800912e:	f023 0301 	bic.w	r3, r3, #1
 8009132:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    return HAL_OK;
 8009136:	2000      	movs	r0, #0
}
 8009138:	bd10      	pop	{r4, pc}
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800913a:	4b17      	ldr	r3, [pc, #92]	@ (8009198 <HAL_CAN_ConfigFilter+0x138>)
 800913c:	f8d3 020c 	ldr.w	r0, [r3, #524]	@ 0x20c
 8009140:	4310      	orrs	r0, r2
 8009142:	f8c3 020c 	str.w	r0, [r3, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009146:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009148:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800914a:	f8d1 e000 	ldr.w	lr, [r1]
 800914e:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009152:	3048      	adds	r0, #72	@ 0x48
 8009154:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8009158:	8988      	ldrh	r0, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800915a:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800915c:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8009160:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009164:	3448      	adds	r4, #72	@ 0x48
 8009166:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800916a:	6058      	str	r0, [r3, #4]
 800916c:	e7c6      	b.n	80090fc <HAL_CAN_ConfigFilter+0x9c>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800916e:	480a      	ldr	r0, [pc, #40]	@ (8009198 <HAL_CAN_ConfigFilter+0x138>)
 8009170:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 8009174:	4313      	orrs	r3, r2
 8009176:	f8c0 3204 	str.w	r3, [r0, #516]	@ 0x204
 800917a:	e7c9      	b.n	8009110 <HAL_CAN_ConfigFilter+0xb0>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800917c:	4806      	ldr	r0, [pc, #24]	@ (8009198 <HAL_CAN_ConfigFilter+0x138>)
 800917e:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 8009182:	4313      	orrs	r3, r2
 8009184:	f8c0 3214 	str.w	r3, [r0, #532]	@ 0x214
 8009188:	e7cb      	b.n	8009122 <HAL_CAN_ConfigFilter+0xc2>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800918a:	4903      	ldr	r1, [pc, #12]	@ (8009198 <HAL_CAN_ConfigFilter+0x138>)
 800918c:	f8d1 321c 	ldr.w	r3, [r1, #540]	@ 0x21c
 8009190:	4313      	orrs	r3, r2
 8009192:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
 8009196:	e7c7      	b.n	8009128 <HAL_CAN_ConfigFilter+0xc8>
 8009198:	40006400 	.word	0x40006400

0800919c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800919c:	b570      	push	{r4, r5, r6, lr}
 800919e:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80091a0:	f890 5020 	ldrb.w	r5, [r0, #32]
 80091a4:	b2ed      	uxtb	r5, r5
 80091a6:	2d01      	cmp	r5, #1
 80091a8:	d006      	beq.n	80091b8 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80091aa:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80091ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091b0:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 80091b2:	2501      	movs	r5, #1
  }
}
 80091b4:	4628      	mov	r0, r5
 80091b6:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 80091b8:	2302      	movs	r3, #2
 80091ba:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80091be:	6802      	ldr	r2, [r0, #0]
 80091c0:	6813      	ldr	r3, [r2, #0]
 80091c2:	f023 0301 	bic.w	r3, r3, #1
 80091c6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80091c8:	f7ff fc92 	bl	8008af0 <HAL_GetTick>
 80091cc:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80091ce:	6823      	ldr	r3, [r4, #0]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	f013 0f01 	tst.w	r3, #1
 80091d6:	d00c      	beq.n	80091f2 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80091d8:	f7ff fc8a 	bl	8008af0 <HAL_GetTick>
 80091dc:	1b83      	subs	r3, r0, r6
 80091de:	2b0a      	cmp	r3, #10
 80091e0:	d9f5      	bls.n	80091ce <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80091e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80091e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091e8:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80091ea:	2305      	movs	r3, #5
 80091ec:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 80091f0:	e7e0      	b.n	80091b4 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80091f2:	2500      	movs	r5, #0
 80091f4:	6265      	str	r5, [r4, #36]	@ 0x24
    return HAL_OK;
 80091f6:	e7dd      	b.n	80091b4 <HAL_CAN_Start+0x18>

080091f8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80091f8:	b530      	push	{r4, r5, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80091fa:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80091fe:	6804      	ldr	r4, [r0, #0]
 8009200:	68a4      	ldr	r4, [r4, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009202:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009206:	fa5f fc8c 	uxtb.w	ip, ip
 800920a:	f1bc 0f01 	cmp.w	ip, #1
 800920e:	d862      	bhi.n	80092d6 <HAL_CAN_AddTxMessage+0xde>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009210:	f014 5fe0 	tst.w	r4, #469762048	@ 0x1c000000
 8009214:	d059      	beq.n	80092ca <HAL_CAN_AddTxMessage+0xd2>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009216:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800921a:	2401      	movs	r4, #1
 800921c:	fa04 f40c 	lsl.w	r4, r4, ip
 8009220:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8009222:	688b      	ldr	r3, [r1, #8]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d13d      	bne.n	80092a4 <HAL_CAN_AddTxMessage+0xac>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009228:	680d      	ldr	r5, [r1, #0]
                                                           pHeader->RTR);
 800922a:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800922c:	6804      	ldr	r4, [r0, #0]
 800922e:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 8009232:	f10c 0318 	add.w	r3, ip, #24
 8009236:	011b      	lsls	r3, r3, #4
 8009238:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800923a:	6803      	ldr	r3, [r0, #0]
 800923c:	690c      	ldr	r4, [r1, #16]
 800923e:	f10c 0e18 	add.w	lr, ip, #24
 8009242:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 8009246:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8009248:	7d0b      	ldrb	r3, [r1, #20]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d035      	beq.n	80092ba <HAL_CAN_AddTxMessage+0xc2>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800924e:	79d1      	ldrb	r1, [r2, #7]
 8009250:	7993      	ldrb	r3, [r2, #6]
 8009252:	041b      	lsls	r3, r3, #16
 8009254:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8009258:	7951      	ldrb	r1, [r2, #5]
 800925a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800925e:	7914      	ldrb	r4, [r2, #4]
 8009260:	6801      	ldr	r1, [r0, #0]
 8009262:	4323      	orrs	r3, r4
 8009264:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8009268:	f8c1 318c 	str.w	r3, [r1, #396]	@ 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800926c:	78d1      	ldrb	r1, [r2, #3]
 800926e:	7893      	ldrb	r3, [r2, #2]
 8009270:	041b      	lsls	r3, r3, #16
 8009272:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8009276:	7851      	ldrb	r1, [r2, #1]
 8009278:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800927c:	7811      	ldrb	r1, [r2, #0]
 800927e:	6802      	ldr	r2, [r0, #0]
 8009280:	430b      	orrs	r3, r1
 8009282:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8009286:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800928a:	6802      	ldr	r2, [r0, #0]
 800928c:	f10c 0c18 	add.w	ip, ip, #24
 8009290:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8009294:	f852 300c 	ldr.w	r3, [r2, ip]
 8009298:	f043 0301 	orr.w	r3, r3, #1
 800929c:	f842 300c 	str.w	r3, [r2, ip]

      /* Return function status */
      return HAL_OK;
 80092a0:	2000      	movs	r0, #0
 80092a2:	e01d      	b.n	80092e0 <HAL_CAN_AddTxMessage+0xe8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80092a4:	684c      	ldr	r4, [r1, #4]
 80092a6:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                                                           pHeader->RTR);
 80092aa:	68cc      	ldr	r4, [r1, #12]
                                                           pHeader->IDE |
 80092ac:	4323      	orrs	r3, r4
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80092ae:	f10c 0418 	add.w	r4, ip, #24
 80092b2:	0124      	lsls	r4, r4, #4
 80092b4:	6805      	ldr	r5, [r0, #0]
 80092b6:	512b      	str	r3, [r5, r4]
 80092b8:	e7bf      	b.n	800923a <HAL_CAN_AddTxMessage+0x42>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80092ba:	6803      	ldr	r3, [r0, #0]
 80092bc:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 80092c0:	6859      	ldr	r1, [r3, #4]
 80092c2:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80092c6:	6059      	str	r1, [r3, #4]
 80092c8:	e7c1      	b.n	800924e <HAL_CAN_AddTxMessage+0x56>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80092ca:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80092cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80092d0:	6243      	str	r3, [r0, #36]	@ 0x24

      return HAL_ERROR;
 80092d2:	2001      	movs	r0, #1
 80092d4:	e004      	b.n	80092e0 <HAL_CAN_AddTxMessage+0xe8>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80092d6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80092d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80092dc:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 80092de:	2001      	movs	r0, #1
  }
}
 80092e0:	bd30      	pop	{r4, r5, pc}

080092e2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 80092e2:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80092e6:	3b01      	subs	r3, #1
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d901      	bls.n	80092f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x10>
  uint32_t freelevel = 0U;
 80092ee:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 80092f0:	4770      	bx	lr
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80092f2:	6803      	ldr	r3, [r0, #0]
 80092f4:	6898      	ldr	r0, [r3, #8]
 80092f6:	f010 6080 	ands.w	r0, r0, #67108864	@ 0x4000000
 80092fa:	d000      	beq.n	80092fe <HAL_CAN_GetTxMailboxesFreeLevel+0x1c>
      freelevel++;
 80092fc:	2001      	movs	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80092fe:	689a      	ldr	r2, [r3, #8]
 8009300:	f012 6f00 	tst.w	r2, #134217728	@ 0x8000000
 8009304:	d000      	beq.n	8009308 <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
      freelevel++;
 8009306:	3001      	adds	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800930e:	d0ef      	beq.n	80092f0 <HAL_CAN_GetTxMailboxesFreeLevel+0xe>
      freelevel++;
 8009310:	3001      	adds	r0, #1
 8009312:	4770      	bx	lr

08009314 <HAL_CAN_GetRxMessage>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8009314:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009318:	f10c 3cff 	add.w	ip, ip, #4294967295
 800931c:	fa5f fc8c 	uxtb.w	ip, ip
 8009320:	f1bc 0f01 	cmp.w	ip, #1
 8009324:	f200 80a5 	bhi.w	8009472 <HAL_CAN_GetRxMessage+0x15e>
{
 8009328:	b430      	push	{r4, r5}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800932a:	b951      	cbnz	r1, 8009342 <HAL_CAN_GetRxMessage+0x2e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800932c:	6804      	ldr	r4, [r0, #0]
 800932e:	68e4      	ldr	r4, [r4, #12]
 8009330:	f014 0f03 	tst.w	r4, #3
 8009334:	d110      	bne.n	8009358 <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009336:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009338:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800933c:	6243      	str	r3, [r0, #36]	@ 0x24

        return HAL_ERROR;
 800933e:	2001      	movs	r0, #1
 8009340:	e07e      	b.n	8009440 <HAL_CAN_GetRxMessage+0x12c>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009342:	6804      	ldr	r4, [r0, #0]
 8009344:	6924      	ldr	r4, [r4, #16]
 8009346:	f014 0f03 	tst.w	r4, #3
 800934a:	d105      	bne.n	8009358 <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800934c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800934e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009352:	6243      	str	r3, [r0, #36]	@ 0x24

        return HAL_ERROR;
 8009354:	2001      	movs	r0, #1
 8009356:	e073      	b.n	8009440 <HAL_CAN_GetRxMessage+0x12c>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009358:	6805      	ldr	r5, [r0, #0]
 800935a:	f101 041b 	add.w	r4, r1, #27
 800935e:	0124      	lsls	r4, r4, #4
 8009360:	592c      	ldr	r4, [r5, r4]
 8009362:	f004 0404 	and.w	r4, r4, #4
 8009366:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009368:	2c00      	cmp	r4, #0
 800936a:	d16b      	bne.n	8009444 <HAL_CAN_GetRxMessage+0x130>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800936c:	6805      	ldr	r5, [r0, #0]
 800936e:	f101 041b 	add.w	r4, r1, #27
 8009372:	0124      	lsls	r4, r4, #4
 8009374:	592c      	ldr	r4, [r5, r4]
 8009376:	0d64      	lsrs	r4, r4, #21
 8009378:	6014      	str	r4, [r2, #0]
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800937a:	6804      	ldr	r4, [r0, #0]
 800937c:	f101 0c1b 	add.w	ip, r1, #27
 8009380:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8009384:	f854 400c 	ldr.w	r4, [r4, ip]
 8009388:	f004 0402 	and.w	r4, r4, #2
 800938c:	60d4      	str	r4, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800938e:	6804      	ldr	r4, [r0, #0]
 8009390:	44a4      	add	ip, r4
 8009392:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8009396:	f015 0f08 	tst.w	r5, #8
 800939a:	d05b      	beq.n	8009454 <HAL_CAN_GetRxMessage+0x140>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800939c:	2408      	movs	r4, #8
 800939e:	6114      	str	r4, [r2, #16]
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80093a0:	6804      	ldr	r4, [r0, #0]
 80093a2:	f101 0c1b 	add.w	ip, r1, #27
 80093a6:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 80093aa:	6864      	ldr	r4, [r4, #4]
 80093ac:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80093b0:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80093b2:	6804      	ldr	r4, [r0, #0]
 80093b4:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 80093b8:	6864      	ldr	r4, [r4, #4]
 80093ba:	0c24      	lsrs	r4, r4, #16
 80093bc:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80093be:	6802      	ldr	r2, [r0, #0]
 80093c0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80093c4:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 80093c8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80093ca:	6802      	ldr	r2, [r0, #0]
 80093cc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80093d0:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 80093d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80093d8:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80093da:	6802      	ldr	r2, [r0, #0]
 80093dc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80093e0:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 80093e4:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80093e8:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80093ea:	6802      	ldr	r2, [r0, #0]
 80093ec:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80093f0:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 80093f4:	0e12      	lsrs	r2, r2, #24
 80093f6:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80093f8:	6802      	ldr	r2, [r0, #0]
 80093fa:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80093fe:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8009402:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009404:	6802      	ldr	r2, [r0, #0]
 8009406:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800940a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800940e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8009412:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009414:	6802      	ldr	r2, [r0, #0]
 8009416:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800941a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800941e:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8009422:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009424:	6802      	ldr	r2, [r0, #0]
 8009426:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800942a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800942e:	0e12      	lsrs	r2, r2, #24
 8009430:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009432:	b9c1      	cbnz	r1, 8009466 <HAL_CAN_GetRxMessage+0x152>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009434:	6802      	ldr	r2, [r0, #0]
 8009436:	68d3      	ldr	r3, [r2, #12]
 8009438:	f043 0320 	orr.w	r3, r3, #32
 800943c:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 800943e:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8009440:	bc30      	pop	{r4, r5}
 8009442:	4770      	bx	lr
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009444:	6805      	ldr	r5, [r0, #0]
 8009446:	f101 041b 	add.w	r4, r1, #27
 800944a:	0124      	lsls	r4, r4, #4
 800944c:	592c      	ldr	r4, [r5, r4]
 800944e:	08e4      	lsrs	r4, r4, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8009450:	6054      	str	r4, [r2, #4]
 8009452:	e792      	b.n	800937a <HAL_CAN_GetRxMessage+0x66>
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009454:	f101 051b 	add.w	r5, r1, #27
 8009458:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 800945c:	6864      	ldr	r4, [r4, #4]
 800945e:	f004 040f 	and.w	r4, r4, #15
 8009462:	6114      	str	r4, [r2, #16]
 8009464:	e79c      	b.n	80093a0 <HAL_CAN_GetRxMessage+0x8c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009466:	6802      	ldr	r2, [r0, #0]
 8009468:	6913      	ldr	r3, [r2, #16]
 800946a:	f043 0320 	orr.w	r3, r3, #32
 800946e:	6113      	str	r3, [r2, #16]
 8009470:	e7e5      	b.n	800943e <HAL_CAN_GetRxMessage+0x12a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009472:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009478:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 800947a:	2001      	movs	r0, #1
}
 800947c:	4770      	bx	lr

0800947e <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800947e:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009482:	3b01      	subs	r3, #1
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b01      	cmp	r3, #1
 8009488:	d905      	bls.n	8009496 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800948a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800948c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009490:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8009492:	2001      	movs	r0, #1
  }
}
 8009494:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009496:	6802      	ldr	r2, [r0, #0]
 8009498:	6953      	ldr	r3, [r2, #20]
 800949a:	430b      	orrs	r3, r1
 800949c:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 800949e:	2000      	movs	r0, #0
 80094a0:	4770      	bx	lr

080094a2 <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80094a2:	4770      	bx	lr

080094a4 <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80094a4:	4770      	bx	lr

080094a6 <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80094a6:	4770      	bx	lr

080094a8 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80094a8:	4770      	bx	lr

080094aa <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80094aa:	4770      	bx	lr

080094ac <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80094ac:	4770      	bx	lr

080094ae <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80094ae:	4770      	bx	lr

080094b0 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80094b0:	4770      	bx	lr

080094b2 <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80094b2:	4770      	bx	lr

080094b4 <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80094b4:	4770      	bx	lr

080094b6 <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80094b6:	4770      	bx	lr

080094b8 <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80094b8:	4770      	bx	lr

080094ba <HAL_CAN_IRQHandler>:
{
 80094ba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094be:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80094c0:	6803      	ldr	r3, [r0, #0]
 80094c2:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80094c4:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80094c8:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80094ca:	f8d3 a00c 	ldr.w	sl, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80094ce:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80094d2:	f8d3 b018 	ldr.w	fp, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80094d6:	f014 0601 	ands.w	r6, r4, #1
 80094da:	d03b      	beq.n	8009554 <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80094dc:	f017 0601 	ands.w	r6, r7, #1
 80094e0:	d016      	beq.n	8009510 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80094e2:	2201      	movs	r2, #1
 80094e4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80094e6:	f017 0f02 	tst.w	r7, #2
 80094ea:	d108      	bne.n	80094fe <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80094ec:	f017 0f04 	tst.w	r7, #4
 80094f0:	d10c      	bne.n	800950c <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80094f2:	f017 0608 	ands.w	r6, r7, #8
 80094f6:	d006      	beq.n	8009506 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80094f8:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 80094fc:	e008      	b.n	8009510 <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80094fe:	f7ff ffd0 	bl	80094a2 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009502:	2600      	movs	r6, #0
 8009504:	e004      	b.n	8009510 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8009506:	f7ff ffcf 	bl	80094a8 <HAL_CAN_TxMailbox0AbortCallback>
 800950a:	e001      	b.n	8009510 <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800950c:	f44f 6600 	mov.w	r6, #2048	@ 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009510:	f417 7f80 	tst.w	r7, #256	@ 0x100
 8009514:	d00d      	beq.n	8009532 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009516:	682b      	ldr	r3, [r5, #0]
 8009518:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800951c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800951e:	f417 7f00 	tst.w	r7, #512	@ 0x200
 8009522:	f040 8096 	bne.w	8009652 <HAL_CAN_IRQHandler+0x198>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009526:	f417 6f80 	tst.w	r7, #1024	@ 0x400
 800952a:	f000 8096 	beq.w	800965a <HAL_CAN_IRQHandler+0x1a0>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800952e:	f446 5600 	orr.w	r6, r6, #8192	@ 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009532:	f417 3f80 	tst.w	r7, #65536	@ 0x10000
 8009536:	d00d      	beq.n	8009554 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009538:	682b      	ldr	r3, [r5, #0]
 800953a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800953e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009540:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8009544:	f040 8093 	bne.w	800966e <HAL_CAN_IRQHandler+0x1b4>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009548:	f417 2f80 	tst.w	r7, #262144	@ 0x40000
 800954c:	f000 8093 	beq.w	8009676 <HAL_CAN_IRQHandler+0x1bc>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009550:	f446 4600 	orr.w	r6, r6, #32768	@ 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009554:	f014 0f08 	tst.w	r4, #8
 8009558:	d007      	beq.n	800956a <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800955a:	f01a 0f10 	tst.w	sl, #16
 800955e:	d004      	beq.n	800956a <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009560:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009564:	682b      	ldr	r3, [r5, #0]
 8009566:	2210      	movs	r2, #16
 8009568:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800956a:	f014 0f04 	tst.w	r4, #4
 800956e:	d003      	beq.n	8009578 <HAL_CAN_IRQHandler+0xbe>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009570:	f01a 0f08 	tst.w	sl, #8
 8009574:	f040 8089 	bne.w	800968a <HAL_CAN_IRQHandler+0x1d0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009578:	f014 0f02 	tst.w	r4, #2
 800957c:	d005      	beq.n	800958a <HAL_CAN_IRQHandler+0xd0>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800957e:	682b      	ldr	r3, [r5, #0]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	f013 0f03 	tst.w	r3, #3
 8009586:	f040 8087 	bne.w	8009698 <HAL_CAN_IRQHandler+0x1de>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800958a:	f014 0f40 	tst.w	r4, #64	@ 0x40
 800958e:	d007      	beq.n	80095a0 <HAL_CAN_IRQHandler+0xe6>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009590:	f019 0f10 	tst.w	r9, #16
 8009594:	d004      	beq.n	80095a0 <HAL_CAN_IRQHandler+0xe6>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009596:	f446 6680 	orr.w	r6, r6, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800959a:	682b      	ldr	r3, [r5, #0]
 800959c:	2210      	movs	r2, #16
 800959e:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80095a0:	f014 0f20 	tst.w	r4, #32
 80095a4:	d002      	beq.n	80095ac <HAL_CAN_IRQHandler+0xf2>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80095a6:	f019 0f08 	tst.w	r9, #8
 80095aa:	d179      	bne.n	80096a0 <HAL_CAN_IRQHandler+0x1e6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80095ac:	f014 0f10 	tst.w	r4, #16
 80095b0:	d004      	beq.n	80095bc <HAL_CAN_IRQHandler+0x102>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80095b2:	682b      	ldr	r3, [r5, #0]
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	f013 0f03 	tst.w	r3, #3
 80095ba:	d178      	bne.n	80096ae <HAL_CAN_IRQHandler+0x1f4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80095bc:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
 80095c0:	d002      	beq.n	80095c8 <HAL_CAN_IRQHandler+0x10e>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80095c2:	f018 0f10 	tst.w	r8, #16
 80095c6:	d176      	bne.n	80096b6 <HAL_CAN_IRQHandler+0x1fc>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80095c8:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
 80095cc:	d002      	beq.n	80095d4 <HAL_CAN_IRQHandler+0x11a>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80095ce:	f018 0f08 	tst.w	r8, #8
 80095d2:	d177      	bne.n	80096c4 <HAL_CAN_IRQHandler+0x20a>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80095d4:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 80095d8:	d037      	beq.n	800964a <HAL_CAN_IRQHandler+0x190>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80095da:	f018 0f04 	tst.w	r8, #4
 80095de:	d031      	beq.n	8009644 <HAL_CAN_IRQHandler+0x18a>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80095e0:	f414 7f80 	tst.w	r4, #256	@ 0x100
 80095e4:	d004      	beq.n	80095f0 <HAL_CAN_IRQHandler+0x136>
 80095e6:	f01b 0f01 	tst.w	fp, #1
 80095ea:	d001      	beq.n	80095f0 <HAL_CAN_IRQHandler+0x136>
        errorcode |= HAL_CAN_ERROR_EWG;
 80095ec:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80095f0:	f414 7f00 	tst.w	r4, #512	@ 0x200
 80095f4:	d004      	beq.n	8009600 <HAL_CAN_IRQHandler+0x146>
 80095f6:	f01b 0f02 	tst.w	fp, #2
 80095fa:	d001      	beq.n	8009600 <HAL_CAN_IRQHandler+0x146>
        errorcode |= HAL_CAN_ERROR_EPV;
 80095fc:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009600:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 8009604:	d004      	beq.n	8009610 <HAL_CAN_IRQHandler+0x156>
 8009606:	f01b 0f04 	tst.w	fp, #4
 800960a:	d001      	beq.n	8009610 <HAL_CAN_IRQHandler+0x156>
        errorcode |= HAL_CAN_ERROR_BOF;
 800960c:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009610:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 8009614:	d016      	beq.n	8009644 <HAL_CAN_IRQHandler+0x18a>
 8009616:	f01b 0b70 	ands.w	fp, fp, #112	@ 0x70
 800961a:	d013      	beq.n	8009644 <HAL_CAN_IRQHandler+0x18a>
        switch (esrflags & CAN_ESR_LEC)
 800961c:	f1bb 0f40 	cmp.w	fp, #64	@ 0x40
 8009620:	d066      	beq.n	80096f0 <HAL_CAN_IRQHandler+0x236>
 8009622:	d856      	bhi.n	80096d2 <HAL_CAN_IRQHandler+0x218>
 8009624:	f1bb 0f20 	cmp.w	fp, #32
 8009628:	d05c      	beq.n	80096e4 <HAL_CAN_IRQHandler+0x22a>
 800962a:	f1bb 0f30 	cmp.w	fp, #48	@ 0x30
 800962e:	d05c      	beq.n	80096ea <HAL_CAN_IRQHandler+0x230>
 8009630:	f1bb 0f10 	cmp.w	fp, #16
 8009634:	d101      	bne.n	800963a <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_STF;
 8009636:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800963a:	682a      	ldr	r2, [r5, #0]
 800963c:	6993      	ldr	r3, [r2, #24]
 800963e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009642:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8009644:	682b      	ldr	r3, [r5, #0]
 8009646:	2204      	movs	r2, #4
 8009648:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800964a:	2e00      	cmp	r6, #0
 800964c:	d156      	bne.n	80096fc <HAL_CAN_IRQHandler+0x242>
}
 800964e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009652:	4628      	mov	r0, r5
 8009654:	f7ff ff26 	bl	80094a4 <HAL_CAN_TxMailbox1CompleteCallback>
 8009658:	e76b      	b.n	8009532 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800965a:	f417 6f00 	tst.w	r7, #2048	@ 0x800
 800965e:	d002      	beq.n	8009666 <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009660:	f446 4680 	orr.w	r6, r6, #16384	@ 0x4000
 8009664:	e765      	b.n	8009532 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009666:	4628      	mov	r0, r5
 8009668:	f7ff ff1f 	bl	80094aa <HAL_CAN_TxMailbox1AbortCallback>
 800966c:	e761      	b.n	8009532 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800966e:	4628      	mov	r0, r5
 8009670:	f7ff ff19 	bl	80094a6 <HAL_CAN_TxMailbox2CompleteCallback>
 8009674:	e76e      	b.n	8009554 <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009676:	f417 2f00 	tst.w	r7, #524288	@ 0x80000
 800967a:	d002      	beq.n	8009682 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800967c:	f446 3680 	orr.w	r6, r6, #65536	@ 0x10000
 8009680:	e768      	b.n	8009554 <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009682:	4628      	mov	r0, r5
 8009684:	f7ff ff12 	bl	80094ac <HAL_CAN_TxMailbox2AbortCallback>
 8009688:	e764      	b.n	8009554 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800968a:	682b      	ldr	r3, [r5, #0]
 800968c:	2208      	movs	r2, #8
 800968e:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009690:	4628      	mov	r0, r5
 8009692:	f7ff ff0c 	bl	80094ae <HAL_CAN_RxFifo0FullCallback>
 8009696:	e76f      	b.n	8009578 <HAL_CAN_IRQHandler+0xbe>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009698:	4628      	mov	r0, r5
 800969a:	f7fe fc33 	bl	8007f04 <HAL_CAN_RxFifo0MsgPendingCallback>
 800969e:	e774      	b.n	800958a <HAL_CAN_IRQHandler+0xd0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80096a0:	682b      	ldr	r3, [r5, #0]
 80096a2:	2208      	movs	r2, #8
 80096a4:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80096a6:	4628      	mov	r0, r5
 80096a8:	f7ff ff03 	bl	80094b2 <HAL_CAN_RxFifo1FullCallback>
 80096ac:	e77e      	b.n	80095ac <HAL_CAN_IRQHandler+0xf2>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80096ae:	4628      	mov	r0, r5
 80096b0:	f7ff fefe 	bl	80094b0 <HAL_CAN_RxFifo1MsgPendingCallback>
 80096b4:	e782      	b.n	80095bc <HAL_CAN_IRQHandler+0x102>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80096b6:	682b      	ldr	r3, [r5, #0]
 80096b8:	2210      	movs	r2, #16
 80096ba:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80096bc:	4628      	mov	r0, r5
 80096be:	f7ff fef9 	bl	80094b4 <HAL_CAN_SleepCallback>
 80096c2:	e781      	b.n	80095c8 <HAL_CAN_IRQHandler+0x10e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80096c4:	682b      	ldr	r3, [r5, #0]
 80096c6:	2208      	movs	r2, #8
 80096c8:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80096ca:	4628      	mov	r0, r5
 80096cc:	f7ff fef3 	bl	80094b6 <HAL_CAN_WakeUpFromRxMsgCallback>
 80096d0:	e780      	b.n	80095d4 <HAL_CAN_IRQHandler+0x11a>
        switch (esrflags & CAN_ESR_LEC)
 80096d2:	f1bb 0f50 	cmp.w	fp, #80	@ 0x50
 80096d6:	d00e      	beq.n	80096f6 <HAL_CAN_IRQHandler+0x23c>
 80096d8:	f1bb 0f60 	cmp.w	fp, #96	@ 0x60
 80096dc:	d1ad      	bne.n	800963a <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_CRC;
 80096de:	f446 7680 	orr.w	r6, r6, #256	@ 0x100
            break;
 80096e2:	e7aa      	b.n	800963a <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_FOR;
 80096e4:	f046 0610 	orr.w	r6, r6, #16
            break;
 80096e8:	e7a7      	b.n	800963a <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_ACK;
 80096ea:	f046 0620 	orr.w	r6, r6, #32
            break;
 80096ee:	e7a4      	b.n	800963a <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_BR;
 80096f0:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
            break;
 80096f4:	e7a1      	b.n	800963a <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_BD;
 80096f6:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
            break;
 80096fa:	e79e      	b.n	800963a <HAL_CAN_IRQHandler+0x180>
    hcan->ErrorCode |= errorcode;
 80096fc:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80096fe:	4333      	orrs	r3, r6
 8009700:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 8009702:	4628      	mov	r0, r5
 8009704:	f7ff fed8 	bl	80094b8 <HAL_CAN_ErrorCallback>
}
 8009708:	e7a1      	b.n	800964e <HAL_CAN_IRQHandler+0x194>
	...

0800970c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800970c:	2800      	cmp	r0, #0
 800970e:	db08      	blt.n	8009722 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009710:	0109      	lsls	r1, r1, #4
 8009712:	b2c9      	uxtb	r1, r1
 8009714:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8009718:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800971c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8009720:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009722:	f000 000f 	and.w	r0, r0, #15
 8009726:	0109      	lsls	r1, r1, #4
 8009728:	b2c9      	uxtb	r1, r1
 800972a:	4b01      	ldr	r3, [pc, #4]	@ (8009730 <__NVIC_SetPriority+0x24>)
 800972c:	5419      	strb	r1, [r3, r0]
  }
}
 800972e:	4770      	bx	lr
 8009730:	e000ed14 	.word	0xe000ed14

08009734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009734:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009736:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800973a:	f1c0 0c07 	rsb	ip, r0, #7
 800973e:	f1bc 0f04 	cmp.w	ip, #4
 8009742:	bf28      	it	cs
 8009744:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009748:	1d03      	adds	r3, r0, #4
 800974a:	2b06      	cmp	r3, #6
 800974c:	d90f      	bls.n	800976e <NVIC_EncodePriority+0x3a>
 800974e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009750:	f04f 3eff 	mov.w	lr, #4294967295
 8009754:	fa0e f00c 	lsl.w	r0, lr, ip
 8009758:	ea21 0100 	bic.w	r1, r1, r0
 800975c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800975e:	fa0e fe03 	lsl.w	lr, lr, r3
 8009762:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8009766:	ea41 0002 	orr.w	r0, r1, r2
 800976a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800976e:	2300      	movs	r3, #0
 8009770:	e7ee      	b.n	8009750 <NVIC_EncodePriority+0x1c>
	...

08009774 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009774:	4a07      	ldr	r2, [pc, #28]	@ (8009794 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8009776:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009778:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800977c:	041b      	lsls	r3, r3, #16
 800977e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009780:	0200      	lsls	r0, r0, #8
 8009782:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009786:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8009788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800978c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8009790:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8009792:	4770      	bx	lr
 8009794:	e000ed00 	.word	0xe000ed00

08009798 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009798:	b510      	push	{r4, lr}
 800979a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800979c:	4b05      	ldr	r3, [pc, #20]	@ (80097b4 <HAL_NVIC_SetPriority+0x1c>)
 800979e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80097a0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80097a4:	f7ff ffc6 	bl	8009734 <NVIC_EncodePriority>
 80097a8:	4601      	mov	r1, r0
 80097aa:	4620      	mov	r0, r4
 80097ac:	f7ff ffae 	bl	800970c <__NVIC_SetPriority>
}
 80097b0:	bd10      	pop	{r4, pc}
 80097b2:	bf00      	nop
 80097b4:	e000ed00 	.word	0xe000ed00

080097b8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80097b8:	2800      	cmp	r0, #0
 80097ba:	db07      	blt.n	80097cc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80097bc:	f000 021f 	and.w	r2, r0, #31
 80097c0:	0940      	lsrs	r0, r0, #5
 80097c2:	2301      	movs	r3, #1
 80097c4:	4093      	lsls	r3, r2
 80097c6:	4a02      	ldr	r2, [pc, #8]	@ (80097d0 <HAL_NVIC_EnableIRQ+0x18>)
 80097c8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	e000e100 	.word	0xe000e100

080097d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80097d4:	3801      	subs	r0, #1
 80097d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80097da:	d20b      	bcs.n	80097f4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80097dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80097e0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097e2:	4a05      	ldr	r2, [pc, #20]	@ (80097f8 <HAL_SYSTICK_Config+0x24>)
 80097e4:	21f0      	movs	r1, #240	@ 0xf0
 80097e6:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80097ea:	2000      	movs	r0, #0
 80097ec:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80097ee:	2207      	movs	r2, #7
 80097f0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80097f2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80097f4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80097f6:	4770      	bx	lr
 80097f8:	e000ed00 	.word	0xe000ed00

080097fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80097fc:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80097fe:	2401      	movs	r4, #1
 8009800:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8009802:	40ac      	lsls	r4, r5
 8009804:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8009806:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009808:	6804      	ldr	r4, [r0, #0]
 800980a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800980c:	6843      	ldr	r3, [r0, #4]
 800980e:	2b10      	cmp	r3, #16
 8009810:	d005      	beq.n	800981e <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8009812:	6803      	ldr	r3, [r0, #0]
 8009814:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8009816:	6803      	ldr	r3, [r0, #0]
 8009818:	60da      	str	r2, [r3, #12]
  }
}
 800981a:	bc30      	pop	{r4, r5}
 800981c:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800981e:	6803      	ldr	r3, [r0, #0]
 8009820:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8009822:	6803      	ldr	r3, [r0, #0]
 8009824:	60d9      	str	r1, [r3, #12]
 8009826:	e7f8      	b.n	800981a <DMA_SetConfig+0x1e>

08009828 <HAL_DMA_Init>:
  if(hdma == NULL)
 8009828:	2800      	cmp	r0, #0
 800982a:	d038      	beq.n	800989e <HAL_DMA_Init+0x76>
{
 800982c:	b410      	push	{r4}
 800982e:	4602      	mov	r2, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009830:	6801      	ldr	r1, [r0, #0]
 8009832:	4b1c      	ldr	r3, [pc, #112]	@ (80098a4 <HAL_DMA_Init+0x7c>)
 8009834:	4299      	cmp	r1, r3
 8009836:	d827      	bhi.n	8009888 <HAL_DMA_Init+0x60>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009838:	4b1b      	ldr	r3, [pc, #108]	@ (80098a8 <HAL_DMA_Init+0x80>)
 800983a:	440b      	add	r3, r1
 800983c:	481b      	ldr	r0, [pc, #108]	@ (80098ac <HAL_DMA_Init+0x84>)
 800983e:	fba0 0303 	umull	r0, r3, r0, r3
 8009842:	091b      	lsrs	r3, r3, #4
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	6413      	str	r3, [r2, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8009848:	4b19      	ldr	r3, [pc, #100]	@ (80098b0 <HAL_DMA_Init+0x88>)
 800984a:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 800984c:	2302      	movs	r3, #2
 800984e:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  tmp = hdma->Instance->CCR;
 8009852:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009854:	f36f 100d 	bfc	r0, #4, #10
  tmp |=  hdma->Init.Direction        |
 8009858:	6853      	ldr	r3, [r2, #4]
 800985a:	6894      	ldr	r4, [r2, #8]
 800985c:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800985e:	68d4      	ldr	r4, [r2, #12]
 8009860:	4323      	orrs	r3, r4
 8009862:	6914      	ldr	r4, [r2, #16]
 8009864:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009866:	6954      	ldr	r4, [r2, #20]
 8009868:	4323      	orrs	r3, r4
 800986a:	6994      	ldr	r4, [r2, #24]
 800986c:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800986e:	69d4      	ldr	r4, [r2, #28]
 8009870:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8009872:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8009874:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009876:	2000      	movs	r0, #0
 8009878:	6390      	str	r0, [r2, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_READY;
 800987a:	2301      	movs	r3, #1
 800987c:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  hdma->Lock = HAL_UNLOCKED;
 8009880:	f882 0020 	strb.w	r0, [r2, #32]
}
 8009884:	bc10      	pop	{r4}
 8009886:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009888:	4b0a      	ldr	r3, [pc, #40]	@ (80098b4 <HAL_DMA_Init+0x8c>)
 800988a:	440b      	add	r3, r1
 800988c:	4807      	ldr	r0, [pc, #28]	@ (80098ac <HAL_DMA_Init+0x84>)
 800988e:	fba0 0303 	umull	r0, r3, r0, r3
 8009892:	091b      	lsrs	r3, r3, #4
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	6413      	str	r3, [r2, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8009898:	4b07      	ldr	r3, [pc, #28]	@ (80098b8 <HAL_DMA_Init+0x90>)
 800989a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800989c:	e7d6      	b.n	800984c <HAL_DMA_Init+0x24>
    return HAL_ERROR;
 800989e:	2001      	movs	r0, #1
}
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	40020407 	.word	0x40020407
 80098a8:	bffdfff8 	.word	0xbffdfff8
 80098ac:	cccccccd 	.word	0xcccccccd
 80098b0:	40020000 	.word	0x40020000
 80098b4:	bffdfbf8 	.word	0xbffdfbf8
 80098b8:	40020400 	.word	0x40020400

080098bc <HAL_DMA_Start_IT>:
{
 80098bc:	b538      	push	{r3, r4, r5, lr}
 80098be:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80098c0:	f890 0020 	ldrb.w	r0, [r0, #32]
 80098c4:	2801      	cmp	r0, #1
 80098c6:	d032      	beq.n	800992e <HAL_DMA_Start_IT+0x72>
 80098c8:	2001      	movs	r0, #1
 80098ca:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80098ce:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 80098d2:	b2c0      	uxtb	r0, r0
 80098d4:	2801      	cmp	r0, #1
 80098d6:	d004      	beq.n	80098e2 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 80098d8:	2300      	movs	r3, #0
 80098da:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 80098de:	2002      	movs	r0, #2
}
 80098e0:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80098e2:	2002      	movs	r0, #2
 80098e4:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80098e8:	2000      	movs	r0, #0
 80098ea:	63a0      	str	r0, [r4, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 80098ec:	6825      	ldr	r5, [r4, #0]
 80098ee:	6828      	ldr	r0, [r5, #0]
 80098f0:	f020 0001 	bic.w	r0, r0, #1
 80098f4:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80098f6:	4620      	mov	r0, r4
 80098f8:	f7ff ff80 	bl	80097fc <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 80098fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80098fe:	b15b      	cbz	r3, 8009918 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009900:	6822      	ldr	r2, [r4, #0]
 8009902:	6813      	ldr	r3, [r2, #0]
 8009904:	f043 030e 	orr.w	r3, r3, #14
 8009908:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800990a:	6822      	ldr	r2, [r4, #0]
 800990c:	6813      	ldr	r3, [r2, #0]
 800990e:	f043 0301 	orr.w	r3, r3, #1
 8009912:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009914:	2000      	movs	r0, #0
 8009916:	e7e3      	b.n	80098e0 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009918:	6822      	ldr	r2, [r4, #0]
 800991a:	6813      	ldr	r3, [r2, #0]
 800991c:	f023 0304 	bic.w	r3, r3, #4
 8009920:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009922:	6822      	ldr	r2, [r4, #0]
 8009924:	6813      	ldr	r3, [r2, #0]
 8009926:	f043 030a 	orr.w	r3, r3, #10
 800992a:	6013      	str	r3, [r2, #0]
 800992c:	e7ed      	b.n	800990a <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 800992e:	2002      	movs	r0, #2
 8009930:	e7d6      	b.n	80098e0 <HAL_DMA_Start_IT+0x24>

08009932 <HAL_DMA_Abort>:
{
 8009932:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009934:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 8009938:	b2d2      	uxtb	r2, r2
 800993a:	2a02      	cmp	r2, #2
 800993c:	d006      	beq.n	800994c <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800993e:	2204      	movs	r2, #4
 8009940:	6382      	str	r2, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8009942:	2200      	movs	r2, #0
 8009944:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8009948:	2001      	movs	r0, #1
 800994a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800994c:	6801      	ldr	r1, [r0, #0]
 800994e:	680a      	ldr	r2, [r1, #0]
 8009950:	f022 020e 	bic.w	r2, r2, #14
 8009954:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8009956:	6801      	ldr	r1, [r0, #0]
 8009958:	680a      	ldr	r2, [r1, #0]
 800995a:	f022 0201 	bic.w	r2, r2, #1
 800995e:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009960:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8009962:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8009964:	2101      	movs	r1, #1
 8009966:	fa01 f202 	lsl.w	r2, r1, r2
 800996a:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 800996c:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  __HAL_UNLOCK(hdma);      
 8009970:	2000      	movs	r0, #0
 8009972:	f883 0020 	strb.w	r0, [r3, #32]
}
 8009976:	4770      	bx	lr

08009978 <HAL_DMA_Abort_IT>:
{  
 8009978:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800997a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800997e:	b2db      	uxtb	r3, r3
 8009980:	2b02      	cmp	r3, #2
 8009982:	d003      	beq.n	800998c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009984:	2304      	movs	r3, #4
 8009986:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8009988:	2001      	movs	r0, #1
}
 800998a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800998c:	6802      	ldr	r2, [r0, #0]
 800998e:	6813      	ldr	r3, [r2, #0]
 8009990:	f023 030e 	bic.w	r3, r3, #14
 8009994:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8009996:	6802      	ldr	r2, [r0, #0]
 8009998:	6813      	ldr	r3, [r2, #0]
 800999a:	f023 0301 	bic.w	r3, r3, #1
 800999e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80099a0:	6803      	ldr	r3, [r0, #0]
 80099a2:	4a4c      	ldr	r2, [pc, #304]	@ (8009ad4 <HAL_DMA_Abort_IT+0x15c>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d94e      	bls.n	8009a46 <HAL_DMA_Abort_IT+0xce>
 80099a8:	3a78      	subs	r2, #120	@ 0x78
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d024      	beq.n	80099f8 <HAL_DMA_Abort_IT+0x80>
 80099ae:	3214      	adds	r2, #20
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d030      	beq.n	8009a16 <HAL_DMA_Abort_IT+0x9e>
 80099b4:	3214      	adds	r2, #20
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d02f      	beq.n	8009a1a <HAL_DMA_Abort_IT+0xa2>
 80099ba:	3214      	adds	r2, #20
 80099bc:	4293      	cmp	r3, r2
 80099be:	d02f      	beq.n	8009a20 <HAL_DMA_Abort_IT+0xa8>
 80099c0:	3214      	adds	r2, #20
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d02f      	beq.n	8009a26 <HAL_DMA_Abort_IT+0xae>
 80099c6:	3214      	adds	r2, #20
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d02f      	beq.n	8009a2c <HAL_DMA_Abort_IT+0xb4>
 80099cc:	3214      	adds	r2, #20
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d02f      	beq.n	8009a32 <HAL_DMA_Abort_IT+0xba>
 80099d2:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d02e      	beq.n	8009a38 <HAL_DMA_Abort_IT+0xc0>
 80099da:	3214      	adds	r2, #20
 80099dc:	4293      	cmp	r3, r2
 80099de:	d02d      	beq.n	8009a3c <HAL_DMA_Abort_IT+0xc4>
 80099e0:	3214      	adds	r2, #20
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d02c      	beq.n	8009a40 <HAL_DMA_Abort_IT+0xc8>
 80099e6:	3214      	adds	r2, #20
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d002      	beq.n	80099f2 <HAL_DMA_Abort_IT+0x7a>
 80099ec:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80099f0:	e003      	b.n	80099fa <HAL_DMA_Abort_IT+0x82>
 80099f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80099f6:	e000      	b.n	80099fa <HAL_DMA_Abort_IT+0x82>
 80099f8:	2201      	movs	r2, #1
 80099fa:	4b37      	ldr	r3, [pc, #220]	@ (8009ad8 <HAL_DMA_Abort_IT+0x160>)
 80099fc:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80099fe:	2301      	movs	r3, #1
 8009a00:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8009a04:	2300      	movs	r3, #0
 8009a06:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8009a0a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d05e      	beq.n	8009ace <HAL_DMA_Abort_IT+0x156>
      hdma->XferAbortCallback(hdma);
 8009a10:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8009a12:	2000      	movs	r0, #0
 8009a14:	e7b9      	b.n	800998a <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009a16:	2210      	movs	r2, #16
 8009a18:	e7ef      	b.n	80099fa <HAL_DMA_Abort_IT+0x82>
 8009a1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a1e:	e7ec      	b.n	80099fa <HAL_DMA_Abort_IT+0x82>
 8009a20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009a24:	e7e9      	b.n	80099fa <HAL_DMA_Abort_IT+0x82>
 8009a26:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009a2a:	e7e6      	b.n	80099fa <HAL_DMA_Abort_IT+0x82>
 8009a2c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009a30:	e7e3      	b.n	80099fa <HAL_DMA_Abort_IT+0x82>
 8009a32:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009a36:	e7e0      	b.n	80099fa <HAL_DMA_Abort_IT+0x82>
 8009a38:	2201      	movs	r2, #1
 8009a3a:	e7de      	b.n	80099fa <HAL_DMA_Abort_IT+0x82>
 8009a3c:	2210      	movs	r2, #16
 8009a3e:	e7dc      	b.n	80099fa <HAL_DMA_Abort_IT+0x82>
 8009a40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a44:	e7d9      	b.n	80099fa <HAL_DMA_Abort_IT+0x82>
 8009a46:	4a25      	ldr	r2, [pc, #148]	@ (8009adc <HAL_DMA_Abort_IT+0x164>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d024      	beq.n	8009a96 <HAL_DMA_Abort_IT+0x11e>
 8009a4c:	3214      	adds	r2, #20
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d025      	beq.n	8009a9e <HAL_DMA_Abort_IT+0x126>
 8009a52:	3214      	adds	r2, #20
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d024      	beq.n	8009aa2 <HAL_DMA_Abort_IT+0x12a>
 8009a58:	3214      	adds	r2, #20
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d024      	beq.n	8009aa8 <HAL_DMA_Abort_IT+0x130>
 8009a5e:	3214      	adds	r2, #20
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d024      	beq.n	8009aae <HAL_DMA_Abort_IT+0x136>
 8009a64:	3214      	adds	r2, #20
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d024      	beq.n	8009ab4 <HAL_DMA_Abort_IT+0x13c>
 8009a6a:	3214      	adds	r2, #20
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d024      	beq.n	8009aba <HAL_DMA_Abort_IT+0x142>
 8009a70:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d023      	beq.n	8009ac0 <HAL_DMA_Abort_IT+0x148>
 8009a78:	3214      	adds	r2, #20
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d022      	beq.n	8009ac4 <HAL_DMA_Abort_IT+0x14c>
 8009a7e:	3214      	adds	r2, #20
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d021      	beq.n	8009ac8 <HAL_DMA_Abort_IT+0x150>
 8009a84:	3214      	adds	r2, #20
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d002      	beq.n	8009a90 <HAL_DMA_Abort_IT+0x118>
 8009a8a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009a8e:	e003      	b.n	8009a98 <HAL_DMA_Abort_IT+0x120>
 8009a90:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009a94:	e000      	b.n	8009a98 <HAL_DMA_Abort_IT+0x120>
 8009a96:	2201      	movs	r2, #1
 8009a98:	4b11      	ldr	r3, [pc, #68]	@ (8009ae0 <HAL_DMA_Abort_IT+0x168>)
 8009a9a:	605a      	str	r2, [r3, #4]
 8009a9c:	e7af      	b.n	80099fe <HAL_DMA_Abort_IT+0x86>
 8009a9e:	2210      	movs	r2, #16
 8009aa0:	e7fa      	b.n	8009a98 <HAL_DMA_Abort_IT+0x120>
 8009aa2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009aa6:	e7f7      	b.n	8009a98 <HAL_DMA_Abort_IT+0x120>
 8009aa8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009aac:	e7f4      	b.n	8009a98 <HAL_DMA_Abort_IT+0x120>
 8009aae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009ab2:	e7f1      	b.n	8009a98 <HAL_DMA_Abort_IT+0x120>
 8009ab4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009ab8:	e7ee      	b.n	8009a98 <HAL_DMA_Abort_IT+0x120>
 8009aba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009abe:	e7eb      	b.n	8009a98 <HAL_DMA_Abort_IT+0x120>
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	e7e9      	b.n	8009a98 <HAL_DMA_Abort_IT+0x120>
 8009ac4:	2210      	movs	r2, #16
 8009ac6:	e7e7      	b.n	8009a98 <HAL_DMA_Abort_IT+0x120>
 8009ac8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009acc:	e7e4      	b.n	8009a98 <HAL_DMA_Abort_IT+0x120>
  HAL_StatusTypeDef status = HAL_OK;
 8009ace:	2000      	movs	r0, #0
 8009ad0:	e75b      	b.n	800998a <HAL_DMA_Abort_IT+0x12>
 8009ad2:	bf00      	nop
 8009ad4:	40020080 	.word	0x40020080
 8009ad8:	40020400 	.word	0x40020400
 8009adc:	40020008 	.word	0x40020008
 8009ae0:	40020000 	.word	0x40020000

08009ae4 <HAL_DMA_IRQHandler>:
{
 8009ae4:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009ae6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8009ae8:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8009aea:	6804      	ldr	r4, [r0, #0]
 8009aec:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8009aee:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8009af0:	2304      	movs	r3, #4
 8009af2:	408b      	lsls	r3, r1
 8009af4:	4213      	tst	r3, r2
 8009af6:	f000 809b 	beq.w	8009c30 <HAL_DMA_IRQHandler+0x14c>
 8009afa:	f015 0f04 	tst.w	r5, #4
 8009afe:	f000 8097 	beq.w	8009c30 <HAL_DMA_IRQHandler+0x14c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	f013 0f20 	tst.w	r3, #32
 8009b08:	d103      	bne.n	8009b12 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009b0a:	6823      	ldr	r3, [r4, #0]
 8009b0c:	f023 0304 	bic.w	r3, r3, #4
 8009b10:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009b12:	6803      	ldr	r3, [r0, #0]
 8009b14:	4a9a      	ldr	r2, [pc, #616]	@ (8009d80 <HAL_DMA_IRQHandler+0x29c>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d946      	bls.n	8009ba8 <HAL_DMA_IRQHandler+0xc4>
 8009b1a:	3a78      	subs	r2, #120	@ 0x78
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d024      	beq.n	8009b6a <HAL_DMA_IRQHandler+0x86>
 8009b20:	3214      	adds	r2, #20
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d028      	beq.n	8009b78 <HAL_DMA_IRQHandler+0x94>
 8009b26:	3214      	adds	r2, #20
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d027      	beq.n	8009b7c <HAL_DMA_IRQHandler+0x98>
 8009b2c:	3214      	adds	r2, #20
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d027      	beq.n	8009b82 <HAL_DMA_IRQHandler+0x9e>
 8009b32:	3214      	adds	r2, #20
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d027      	beq.n	8009b88 <HAL_DMA_IRQHandler+0xa4>
 8009b38:	3214      	adds	r2, #20
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d027      	beq.n	8009b8e <HAL_DMA_IRQHandler+0xaa>
 8009b3e:	3214      	adds	r2, #20
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d027      	beq.n	8009b94 <HAL_DMA_IRQHandler+0xb0>
 8009b44:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d026      	beq.n	8009b9a <HAL_DMA_IRQHandler+0xb6>
 8009b4c:	3214      	adds	r2, #20
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d025      	beq.n	8009b9e <HAL_DMA_IRQHandler+0xba>
 8009b52:	3214      	adds	r2, #20
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d024      	beq.n	8009ba2 <HAL_DMA_IRQHandler+0xbe>
 8009b58:	3214      	adds	r2, #20
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d002      	beq.n	8009b64 <HAL_DMA_IRQHandler+0x80>
 8009b5e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009b62:	e003      	b.n	8009b6c <HAL_DMA_IRQHandler+0x88>
 8009b64:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009b68:	e000      	b.n	8009b6c <HAL_DMA_IRQHandler+0x88>
 8009b6a:	2204      	movs	r2, #4
 8009b6c:	4b85      	ldr	r3, [pc, #532]	@ (8009d84 <HAL_DMA_IRQHandler+0x2a0>)
 8009b6e:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8009b70:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8009b72:	b103      	cbz	r3, 8009b76 <HAL_DMA_IRQHandler+0x92>
      hdma->XferHalfCpltCallback(hdma);
 8009b74:	4798      	blx	r3
}
 8009b76:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009b78:	2240      	movs	r2, #64	@ 0x40
 8009b7a:	e7f7      	b.n	8009b6c <HAL_DMA_IRQHandler+0x88>
 8009b7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009b80:	e7f4      	b.n	8009b6c <HAL_DMA_IRQHandler+0x88>
 8009b82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009b86:	e7f1      	b.n	8009b6c <HAL_DMA_IRQHandler+0x88>
 8009b88:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009b8c:	e7ee      	b.n	8009b6c <HAL_DMA_IRQHandler+0x88>
 8009b8e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8009b92:	e7eb      	b.n	8009b6c <HAL_DMA_IRQHandler+0x88>
 8009b94:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8009b98:	e7e8      	b.n	8009b6c <HAL_DMA_IRQHandler+0x88>
 8009b9a:	2204      	movs	r2, #4
 8009b9c:	e7e6      	b.n	8009b6c <HAL_DMA_IRQHandler+0x88>
 8009b9e:	2240      	movs	r2, #64	@ 0x40
 8009ba0:	e7e4      	b.n	8009b6c <HAL_DMA_IRQHandler+0x88>
 8009ba2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009ba6:	e7e1      	b.n	8009b6c <HAL_DMA_IRQHandler+0x88>
 8009ba8:	4a77      	ldr	r2, [pc, #476]	@ (8009d88 <HAL_DMA_IRQHandler+0x2a4>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d024      	beq.n	8009bf8 <HAL_DMA_IRQHandler+0x114>
 8009bae:	3214      	adds	r2, #20
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d025      	beq.n	8009c00 <HAL_DMA_IRQHandler+0x11c>
 8009bb4:	3214      	adds	r2, #20
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d024      	beq.n	8009c04 <HAL_DMA_IRQHandler+0x120>
 8009bba:	3214      	adds	r2, #20
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d024      	beq.n	8009c0a <HAL_DMA_IRQHandler+0x126>
 8009bc0:	3214      	adds	r2, #20
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d024      	beq.n	8009c10 <HAL_DMA_IRQHandler+0x12c>
 8009bc6:	3214      	adds	r2, #20
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d024      	beq.n	8009c16 <HAL_DMA_IRQHandler+0x132>
 8009bcc:	3214      	adds	r2, #20
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d024      	beq.n	8009c1c <HAL_DMA_IRQHandler+0x138>
 8009bd2:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d023      	beq.n	8009c22 <HAL_DMA_IRQHandler+0x13e>
 8009bda:	3214      	adds	r2, #20
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d022      	beq.n	8009c26 <HAL_DMA_IRQHandler+0x142>
 8009be0:	3214      	adds	r2, #20
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d021      	beq.n	8009c2a <HAL_DMA_IRQHandler+0x146>
 8009be6:	3214      	adds	r2, #20
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d002      	beq.n	8009bf2 <HAL_DMA_IRQHandler+0x10e>
 8009bec:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009bf0:	e003      	b.n	8009bfa <HAL_DMA_IRQHandler+0x116>
 8009bf2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009bf6:	e000      	b.n	8009bfa <HAL_DMA_IRQHandler+0x116>
 8009bf8:	2204      	movs	r2, #4
 8009bfa:	4b64      	ldr	r3, [pc, #400]	@ (8009d8c <HAL_DMA_IRQHandler+0x2a8>)
 8009bfc:	605a      	str	r2, [r3, #4]
 8009bfe:	e7b7      	b.n	8009b70 <HAL_DMA_IRQHandler+0x8c>
 8009c00:	2240      	movs	r2, #64	@ 0x40
 8009c02:	e7fa      	b.n	8009bfa <HAL_DMA_IRQHandler+0x116>
 8009c04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009c08:	e7f7      	b.n	8009bfa <HAL_DMA_IRQHandler+0x116>
 8009c0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009c0e:	e7f4      	b.n	8009bfa <HAL_DMA_IRQHandler+0x116>
 8009c10:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009c14:	e7f1      	b.n	8009bfa <HAL_DMA_IRQHandler+0x116>
 8009c16:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8009c1a:	e7ee      	b.n	8009bfa <HAL_DMA_IRQHandler+0x116>
 8009c1c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8009c20:	e7eb      	b.n	8009bfa <HAL_DMA_IRQHandler+0x116>
 8009c22:	2204      	movs	r2, #4
 8009c24:	e7e9      	b.n	8009bfa <HAL_DMA_IRQHandler+0x116>
 8009c26:	2240      	movs	r2, #64	@ 0x40
 8009c28:	e7e7      	b.n	8009bfa <HAL_DMA_IRQHandler+0x116>
 8009c2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009c2e:	e7e4      	b.n	8009bfa <HAL_DMA_IRQHandler+0x116>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8009c30:	2302      	movs	r3, #2
 8009c32:	408b      	lsls	r3, r1
 8009c34:	4213      	tst	r3, r2
 8009c36:	f000 80ab 	beq.w	8009d90 <HAL_DMA_IRQHandler+0x2ac>
 8009c3a:	f015 0f02 	tst.w	r5, #2
 8009c3e:	f000 80a7 	beq.w	8009d90 <HAL_DMA_IRQHandler+0x2ac>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	f013 0f20 	tst.w	r3, #32
 8009c48:	d106      	bne.n	8009c58 <HAL_DMA_IRQHandler+0x174>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	f023 030a 	bic.w	r3, r3, #10
 8009c50:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8009c52:	2301      	movs	r3, #1
 8009c54:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009c58:	6803      	ldr	r3, [r0, #0]
 8009c5a:	4a49      	ldr	r2, [pc, #292]	@ (8009d80 <HAL_DMA_IRQHandler+0x29c>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d94b      	bls.n	8009cf8 <HAL_DMA_IRQHandler+0x214>
 8009c60:	3a78      	subs	r2, #120	@ 0x78
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d024      	beq.n	8009cb0 <HAL_DMA_IRQHandler+0x1cc>
 8009c66:	3214      	adds	r2, #20
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d02d      	beq.n	8009cc8 <HAL_DMA_IRQHandler+0x1e4>
 8009c6c:	3214      	adds	r2, #20
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d02c      	beq.n	8009ccc <HAL_DMA_IRQHandler+0x1e8>
 8009c72:	3214      	adds	r2, #20
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d02c      	beq.n	8009cd2 <HAL_DMA_IRQHandler+0x1ee>
 8009c78:	3214      	adds	r2, #20
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d02c      	beq.n	8009cd8 <HAL_DMA_IRQHandler+0x1f4>
 8009c7e:	3214      	adds	r2, #20
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d02c      	beq.n	8009cde <HAL_DMA_IRQHandler+0x1fa>
 8009c84:	3214      	adds	r2, #20
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d02c      	beq.n	8009ce4 <HAL_DMA_IRQHandler+0x200>
 8009c8a:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d02b      	beq.n	8009cea <HAL_DMA_IRQHandler+0x206>
 8009c92:	3214      	adds	r2, #20
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d02a      	beq.n	8009cee <HAL_DMA_IRQHandler+0x20a>
 8009c98:	3214      	adds	r2, #20
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d029      	beq.n	8009cf2 <HAL_DMA_IRQHandler+0x20e>
 8009c9e:	3214      	adds	r2, #20
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d002      	beq.n	8009caa <HAL_DMA_IRQHandler+0x1c6>
 8009ca4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009ca8:	e003      	b.n	8009cb2 <HAL_DMA_IRQHandler+0x1ce>
 8009caa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009cae:	e000      	b.n	8009cb2 <HAL_DMA_IRQHandler+0x1ce>
 8009cb0:	2202      	movs	r2, #2
 8009cb2:	4b34      	ldr	r3, [pc, #208]	@ (8009d84 <HAL_DMA_IRQHandler+0x2a0>)
 8009cb4:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8009cbc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f43f af59 	beq.w	8009b76 <HAL_DMA_IRQHandler+0x92>
      hdma->XferCpltCallback(hdma);
 8009cc4:	4798      	blx	r3
 8009cc6:	e756      	b.n	8009b76 <HAL_DMA_IRQHandler+0x92>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009cc8:	2220      	movs	r2, #32
 8009cca:	e7f2      	b.n	8009cb2 <HAL_DMA_IRQHandler+0x1ce>
 8009ccc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009cd0:	e7ef      	b.n	8009cb2 <HAL_DMA_IRQHandler+0x1ce>
 8009cd2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009cd6:	e7ec      	b.n	8009cb2 <HAL_DMA_IRQHandler+0x1ce>
 8009cd8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009cdc:	e7e9      	b.n	8009cb2 <HAL_DMA_IRQHandler+0x1ce>
 8009cde:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8009ce2:	e7e6      	b.n	8009cb2 <HAL_DMA_IRQHandler+0x1ce>
 8009ce4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009ce8:	e7e3      	b.n	8009cb2 <HAL_DMA_IRQHandler+0x1ce>
 8009cea:	2202      	movs	r2, #2
 8009cec:	e7e1      	b.n	8009cb2 <HAL_DMA_IRQHandler+0x1ce>
 8009cee:	2220      	movs	r2, #32
 8009cf0:	e7df      	b.n	8009cb2 <HAL_DMA_IRQHandler+0x1ce>
 8009cf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009cf6:	e7dc      	b.n	8009cb2 <HAL_DMA_IRQHandler+0x1ce>
 8009cf8:	4a23      	ldr	r2, [pc, #140]	@ (8009d88 <HAL_DMA_IRQHandler+0x2a4>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d024      	beq.n	8009d48 <HAL_DMA_IRQHandler+0x264>
 8009cfe:	3214      	adds	r2, #20
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d025      	beq.n	8009d50 <HAL_DMA_IRQHandler+0x26c>
 8009d04:	3214      	adds	r2, #20
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d024      	beq.n	8009d54 <HAL_DMA_IRQHandler+0x270>
 8009d0a:	3214      	adds	r2, #20
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d024      	beq.n	8009d5a <HAL_DMA_IRQHandler+0x276>
 8009d10:	3214      	adds	r2, #20
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d024      	beq.n	8009d60 <HAL_DMA_IRQHandler+0x27c>
 8009d16:	3214      	adds	r2, #20
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d024      	beq.n	8009d66 <HAL_DMA_IRQHandler+0x282>
 8009d1c:	3214      	adds	r2, #20
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d024      	beq.n	8009d6c <HAL_DMA_IRQHandler+0x288>
 8009d22:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d023      	beq.n	8009d72 <HAL_DMA_IRQHandler+0x28e>
 8009d2a:	3214      	adds	r2, #20
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d022      	beq.n	8009d76 <HAL_DMA_IRQHandler+0x292>
 8009d30:	3214      	adds	r2, #20
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d021      	beq.n	8009d7a <HAL_DMA_IRQHandler+0x296>
 8009d36:	3214      	adds	r2, #20
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d002      	beq.n	8009d42 <HAL_DMA_IRQHandler+0x25e>
 8009d3c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009d40:	e003      	b.n	8009d4a <HAL_DMA_IRQHandler+0x266>
 8009d42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009d46:	e000      	b.n	8009d4a <HAL_DMA_IRQHandler+0x266>
 8009d48:	2202      	movs	r2, #2
 8009d4a:	4b10      	ldr	r3, [pc, #64]	@ (8009d8c <HAL_DMA_IRQHandler+0x2a8>)
 8009d4c:	605a      	str	r2, [r3, #4]
 8009d4e:	e7b2      	b.n	8009cb6 <HAL_DMA_IRQHandler+0x1d2>
 8009d50:	2220      	movs	r2, #32
 8009d52:	e7fa      	b.n	8009d4a <HAL_DMA_IRQHandler+0x266>
 8009d54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d58:	e7f7      	b.n	8009d4a <HAL_DMA_IRQHandler+0x266>
 8009d5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009d5e:	e7f4      	b.n	8009d4a <HAL_DMA_IRQHandler+0x266>
 8009d60:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009d64:	e7f1      	b.n	8009d4a <HAL_DMA_IRQHandler+0x266>
 8009d66:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8009d6a:	e7ee      	b.n	8009d4a <HAL_DMA_IRQHandler+0x266>
 8009d6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009d70:	e7eb      	b.n	8009d4a <HAL_DMA_IRQHandler+0x266>
 8009d72:	2202      	movs	r2, #2
 8009d74:	e7e9      	b.n	8009d4a <HAL_DMA_IRQHandler+0x266>
 8009d76:	2220      	movs	r2, #32
 8009d78:	e7e7      	b.n	8009d4a <HAL_DMA_IRQHandler+0x266>
 8009d7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d7e:	e7e4      	b.n	8009d4a <HAL_DMA_IRQHandler+0x266>
 8009d80:	40020080 	.word	0x40020080
 8009d84:	40020400 	.word	0x40020400
 8009d88:	40020008 	.word	0x40020008
 8009d8c:	40020000 	.word	0x40020000
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8009d90:	2308      	movs	r3, #8
 8009d92:	408b      	lsls	r3, r1
 8009d94:	4213      	tst	r3, r2
 8009d96:	f43f aeee 	beq.w	8009b76 <HAL_DMA_IRQHandler+0x92>
 8009d9a:	f015 0f08 	tst.w	r5, #8
 8009d9e:	f43f aeea 	beq.w	8009b76 <HAL_DMA_IRQHandler+0x92>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	f023 030e 	bic.w	r3, r3, #14
 8009da8:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009daa:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8009dac:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8009dae:	2301      	movs	r3, #1
 8009db0:	fa03 f202 	lsl.w	r2, r3, r2
 8009db4:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009db6:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8009db8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8009dc2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f43f aed6 	beq.w	8009b76 <HAL_DMA_IRQHandler+0x92>
      hdma->XferErrorCallback(hdma);
 8009dca:	4798      	blx	r3
  return;
 8009dcc:	e6d3      	b.n	8009b76 <HAL_DMA_IRQHandler+0x92>
 8009dce:	bf00      	nop

08009dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009dd0:	b570      	push	{r4, r5, r6, lr}
 8009dd2:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009dd4:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8009dd6:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009dd8:	e0a1      	b.n	8009f1e <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009dda:	4d7e      	ldr	r5, [pc, #504]	@ (8009fd4 <HAL_GPIO_Init+0x204>)
 8009ddc:	42ab      	cmp	r3, r5
 8009dde:	d014      	beq.n	8009e0a <HAL_GPIO_Init+0x3a>
 8009de0:	d80c      	bhi.n	8009dfc <HAL_GPIO_Init+0x2c>
 8009de2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009de6:	42ab      	cmp	r3, r5
 8009de8:	d00f      	beq.n	8009e0a <HAL_GPIO_Init+0x3a>
 8009dea:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 8009dee:	42ab      	cmp	r3, r5
 8009df0:	d00b      	beq.n	8009e0a <HAL_GPIO_Init+0x3a>
 8009df2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009df6:	42ab      	cmp	r3, r5
 8009df8:	d110      	bne.n	8009e1c <HAL_GPIO_Init+0x4c>
 8009dfa:	e006      	b.n	8009e0a <HAL_GPIO_Init+0x3a>
 8009dfc:	4d76      	ldr	r5, [pc, #472]	@ (8009fd8 <HAL_GPIO_Init+0x208>)
 8009dfe:	42ab      	cmp	r3, r5
 8009e00:	d003      	beq.n	8009e0a <HAL_GPIO_Init+0x3a>
 8009e02:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8009e06:	42ab      	cmp	r3, r5
 8009e08:	d108      	bne.n	8009e1c <HAL_GPIO_Init+0x4c>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009e0a:	688b      	ldr	r3, [r1, #8]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d050      	beq.n	8009eb2 <HAL_GPIO_Init+0xe2>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d049      	beq.n	8009ea8 <HAL_GPIO_Init+0xd8>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8009e14:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009e16:	2408      	movs	r4, #8
 8009e18:	e000      	b.n	8009e1c <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009e1a:	68cc      	ldr	r4, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009e1c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8009e20:	d849      	bhi.n	8009eb6 <HAL_GPIO_Init+0xe6>
 8009e22:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009e24:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009e28:	6833      	ldr	r3, [r6, #0]
 8009e2a:	250f      	movs	r5, #15
 8009e2c:	4095      	lsls	r5, r2
 8009e2e:	ea23 0305 	bic.w	r3, r3, r5
 8009e32:	fa04 f202 	lsl.w	r2, r4, r2
 8009e36:	4313      	orrs	r3, r2
 8009e38:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009e3a:	684b      	ldr	r3, [r1, #4]
 8009e3c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8009e40:	d06b      	beq.n	8009f1a <HAL_GPIO_Init+0x14a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009e42:	4b66      	ldr	r3, [pc, #408]	@ (8009fdc <HAL_GPIO_Init+0x20c>)
 8009e44:	699a      	ldr	r2, [r3, #24]
 8009e46:	f042 0201 	orr.w	r2, r2, #1
 8009e4a:	619a      	str	r2, [r3, #24]
 8009e4c:	699b      	ldr	r3, [r3, #24]
 8009e4e:	f003 0301 	and.w	r3, r3, #1
 8009e52:	9301      	str	r3, [sp, #4]
 8009e54:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8009e56:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8009e5a:	1c95      	adds	r5, r2, #2
 8009e5c:	4b60      	ldr	r3, [pc, #384]	@ (8009fe0 <HAL_GPIO_Init+0x210>)
 8009e5e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009e62:	f00c 0503 	and.w	r5, ip, #3
 8009e66:	00ad      	lsls	r5, r5, #2
 8009e68:	230f      	movs	r3, #15
 8009e6a:	40ab      	lsls	r3, r5
 8009e6c:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009e70:	4b5c      	ldr	r3, [pc, #368]	@ (8009fe4 <HAL_GPIO_Init+0x214>)
 8009e72:	4298      	cmp	r0, r3
 8009e74:	d026      	beq.n	8009ec4 <HAL_GPIO_Init+0xf4>
 8009e76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009e7a:	4298      	cmp	r0, r3
 8009e7c:	f000 808c 	beq.w	8009f98 <HAL_GPIO_Init+0x1c8>
 8009e80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009e84:	4298      	cmp	r0, r3
 8009e86:	f000 8089 	beq.w	8009f9c <HAL_GPIO_Init+0x1cc>
 8009e8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009e8e:	4298      	cmp	r0, r3
 8009e90:	d016      	beq.n	8009ec0 <HAL_GPIO_Init+0xf0>
 8009e92:	2304      	movs	r3, #4
 8009e94:	e017      	b.n	8009ec6 <HAL_GPIO_Init+0xf6>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009e96:	68cc      	ldr	r4, [r1, #12]
 8009e98:	3404      	adds	r4, #4
          break;
 8009e9a:	e7bf      	b.n	8009e1c <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009e9c:	68cc      	ldr	r4, [r1, #12]
 8009e9e:	3408      	adds	r4, #8
          break;
 8009ea0:	e7bc      	b.n	8009e1c <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009ea2:	68cc      	ldr	r4, [r1, #12]
 8009ea4:	340c      	adds	r4, #12
          break;
 8009ea6:	e7b9      	b.n	8009e1c <HAL_GPIO_Init+0x4c>
            GPIOx->BSRR = ioposition;
 8009ea8:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009eaa:	2408      	movs	r4, #8
 8009eac:	e7b6      	b.n	8009e1c <HAL_GPIO_Init+0x4c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009eae:	2400      	movs	r4, #0
 8009eb0:	e7b4      	b.n	8009e1c <HAL_GPIO_Init+0x4c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009eb2:	2404      	movs	r4, #4
 8009eb4:	e7b2      	b.n	8009e1c <HAL_GPIO_Init+0x4c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009eb6:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009eb8:	f1ac 0208 	sub.w	r2, ip, #8
 8009ebc:	0092      	lsls	r2, r2, #2
 8009ebe:	e7b3      	b.n	8009e28 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	e000      	b.n	8009ec6 <HAL_GPIO_Init+0xf6>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	40ab      	lsls	r3, r5
 8009ec8:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8009eca:	3202      	adds	r2, #2
 8009ecc:	4d44      	ldr	r5, [pc, #272]	@ (8009fe0 <HAL_GPIO_Init+0x210>)
 8009ece:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009ed2:	684b      	ldr	r3, [r1, #4]
 8009ed4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8009ed8:	d062      	beq.n	8009fa0 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009eda:	4a43      	ldr	r2, [pc, #268]	@ (8009fe8 <HAL_GPIO_Init+0x218>)
 8009edc:	6893      	ldr	r3, [r2, #8]
 8009ede:	ea43 030e 	orr.w	r3, r3, lr
 8009ee2:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009ee4:	684b      	ldr	r3, [r1, #4]
 8009ee6:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8009eea:	d05f      	beq.n	8009fac <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009eec:	4a3e      	ldr	r2, [pc, #248]	@ (8009fe8 <HAL_GPIO_Init+0x218>)
 8009eee:	68d3      	ldr	r3, [r2, #12]
 8009ef0:	ea43 030e 	orr.w	r3, r3, lr
 8009ef4:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009ef6:	684b      	ldr	r3, [r1, #4]
 8009ef8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009efc:	d05c      	beq.n	8009fb8 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009efe:	4a3a      	ldr	r2, [pc, #232]	@ (8009fe8 <HAL_GPIO_Init+0x218>)
 8009f00:	6853      	ldr	r3, [r2, #4]
 8009f02:	ea43 030e 	orr.w	r3, r3, lr
 8009f06:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009f08:	684b      	ldr	r3, [r1, #4]
 8009f0a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8009f0e:	d059      	beq.n	8009fc4 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009f10:	4a35      	ldr	r2, [pc, #212]	@ (8009fe8 <HAL_GPIO_Init+0x218>)
 8009f12:	6813      	ldr	r3, [r2, #0]
 8009f14:	ea43 030e 	orr.w	r3, r3, lr
 8009f18:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8009f1a:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009f1e:	680b      	ldr	r3, [r1, #0]
 8009f20:	fa33 f20c 	lsrs.w	r2, r3, ip
 8009f24:	d054      	beq.n	8009fd0 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8009f26:	2201      	movs	r2, #1
 8009f28:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009f2c:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8009f30:	ea32 0303 	bics.w	r3, r2, r3
 8009f34:	d1f1      	bne.n	8009f1a <HAL_GPIO_Init+0x14a>
      switch (GPIO_Init->Mode)
 8009f36:	684b      	ldr	r3, [r1, #4]
 8009f38:	2b12      	cmp	r3, #18
 8009f3a:	f63f af4e 	bhi.w	8009dda <HAL_GPIO_Init+0xa>
 8009f3e:	2b12      	cmp	r3, #18
 8009f40:	f63f af6c 	bhi.w	8009e1c <HAL_GPIO_Init+0x4c>
 8009f44:	a501      	add	r5, pc, #4	@ (adr r5, 8009f4c <HAL_GPIO_Init+0x17c>)
 8009f46:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8009f4a:	bf00      	nop
 8009f4c:	08009e0b 	.word	0x08009e0b
 8009f50:	08009e1b 	.word	0x08009e1b
 8009f54:	08009e9d 	.word	0x08009e9d
 8009f58:	08009eaf 	.word	0x08009eaf
 8009f5c:	08009e1d 	.word	0x08009e1d
 8009f60:	08009e1d 	.word	0x08009e1d
 8009f64:	08009e1d 	.word	0x08009e1d
 8009f68:	08009e1d 	.word	0x08009e1d
 8009f6c:	08009e1d 	.word	0x08009e1d
 8009f70:	08009e1d 	.word	0x08009e1d
 8009f74:	08009e1d 	.word	0x08009e1d
 8009f78:	08009e1d 	.word	0x08009e1d
 8009f7c:	08009e1d 	.word	0x08009e1d
 8009f80:	08009e1d 	.word	0x08009e1d
 8009f84:	08009e1d 	.word	0x08009e1d
 8009f88:	08009e1d 	.word	0x08009e1d
 8009f8c:	08009e1d 	.word	0x08009e1d
 8009f90:	08009e97 	.word	0x08009e97
 8009f94:	08009ea3 	.word	0x08009ea3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e794      	b.n	8009ec6 <HAL_GPIO_Init+0xf6>
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	e792      	b.n	8009ec6 <HAL_GPIO_Init+0xf6>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009fa0:	4a11      	ldr	r2, [pc, #68]	@ (8009fe8 <HAL_GPIO_Init+0x218>)
 8009fa2:	6893      	ldr	r3, [r2, #8]
 8009fa4:	ea23 030e 	bic.w	r3, r3, lr
 8009fa8:	6093      	str	r3, [r2, #8]
 8009faa:	e79b      	b.n	8009ee4 <HAL_GPIO_Init+0x114>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009fac:	4a0e      	ldr	r2, [pc, #56]	@ (8009fe8 <HAL_GPIO_Init+0x218>)
 8009fae:	68d3      	ldr	r3, [r2, #12]
 8009fb0:	ea23 030e 	bic.w	r3, r3, lr
 8009fb4:	60d3      	str	r3, [r2, #12]
 8009fb6:	e79e      	b.n	8009ef6 <HAL_GPIO_Init+0x126>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009fb8:	4a0b      	ldr	r2, [pc, #44]	@ (8009fe8 <HAL_GPIO_Init+0x218>)
 8009fba:	6853      	ldr	r3, [r2, #4]
 8009fbc:	ea23 030e 	bic.w	r3, r3, lr
 8009fc0:	6053      	str	r3, [r2, #4]
 8009fc2:	e7a1      	b.n	8009f08 <HAL_GPIO_Init+0x138>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009fc4:	4a08      	ldr	r2, [pc, #32]	@ (8009fe8 <HAL_GPIO_Init+0x218>)
 8009fc6:	6813      	ldr	r3, [r2, #0]
 8009fc8:	ea23 030e 	bic.w	r3, r3, lr
 8009fcc:	6013      	str	r3, [r2, #0]
 8009fce:	e7a4      	b.n	8009f1a <HAL_GPIO_Init+0x14a>
  }
}
 8009fd0:	b002      	add	sp, #8
 8009fd2:	bd70      	pop	{r4, r5, r6, pc}
 8009fd4:	10220000 	.word	0x10220000
 8009fd8:	10310000 	.word	0x10310000
 8009fdc:	40021000 	.word	0x40021000
 8009fe0:	40010000 	.word	0x40010000
 8009fe4:	40010800 	.word	0x40010800
 8009fe8:	40010400 	.word	0x40010400

08009fec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009fec:	6883      	ldr	r3, [r0, #8]
 8009fee:	4219      	tst	r1, r3
 8009ff0:	d001      	beq.n	8009ff6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8009ff2:	2001      	movs	r0, #1
 8009ff4:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009ff6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8009ff8:	4770      	bx	lr

08009ffa <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009ffa:	b10a      	cbz	r2, 800a000 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009ffc:	6101      	str	r1, [r0, #16]
 8009ffe:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a000:	0409      	lsls	r1, r1, #16
 800a002:	6101      	str	r1, [r0, #16]
  }
}
 800a004:	4770      	bx	lr
	...

0800a008 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a008:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a00a:	4b08      	ldr	r3, [pc, #32]	@ (800a02c <RCC_Delay+0x24>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a08      	ldr	r2, [pc, #32]	@ (800a030 <RCC_Delay+0x28>)
 800a010:	fba2 2303 	umull	r2, r3, r2, r3
 800a014:	0a5b      	lsrs	r3, r3, #9
 800a016:	fb00 f303 	mul.w	r3, r0, r3
 800a01a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800a01c:	bf00      	nop
  }
  while (Delay --);
 800a01e:	9b01      	ldr	r3, [sp, #4]
 800a020:	1e5a      	subs	r2, r3, #1
 800a022:	9201      	str	r2, [sp, #4]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d1f9      	bne.n	800a01c <RCC_Delay+0x14>
}
 800a028:	b002      	add	sp, #8
 800a02a:	4770      	bx	lr
 800a02c:	20004380 	.word	0x20004380
 800a030:	10624dd3 	.word	0x10624dd3

0800a034 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800a034:	2800      	cmp	r0, #0
 800a036:	f000 8261 	beq.w	800a4fc <HAL_RCC_OscConfig+0x4c8>
{
 800a03a:	b570      	push	{r4, r5, r6, lr}
 800a03c:	b082      	sub	sp, #8
 800a03e:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a040:	6803      	ldr	r3, [r0, #0]
 800a042:	f013 0f01 	tst.w	r3, #1
 800a046:	d02c      	beq.n	800a0a2 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a048:	4b99      	ldr	r3, [pc, #612]	@ (800a2b0 <HAL_RCC_OscConfig+0x27c>)
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	f003 030c 	and.w	r3, r3, #12
 800a050:	2b04      	cmp	r3, #4
 800a052:	d01d      	beq.n	800a090 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a054:	4b96      	ldr	r3, [pc, #600]	@ (800a2b0 <HAL_RCC_OscConfig+0x27c>)
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	f003 030c 	and.w	r3, r3, #12
 800a05c:	2b08      	cmp	r3, #8
 800a05e:	d012      	beq.n	800a086 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a060:	68a3      	ldr	r3, [r4, #8]
 800a062:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a066:	d041      	beq.n	800a0ec <HAL_RCC_OscConfig+0xb8>
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d155      	bne.n	800a118 <HAL_RCC_OscConfig+0xe4>
 800a06c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a070:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a082:	601a      	str	r2, [r3, #0]
 800a084:	e037      	b.n	800a0f6 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a086:	4b8a      	ldr	r3, [pc, #552]	@ (800a2b0 <HAL_RCC_OscConfig+0x27c>)
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800a08e:	d0e7      	beq.n	800a060 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a090:	4b87      	ldr	r3, [pc, #540]	@ (800a2b0 <HAL_RCC_OscConfig+0x27c>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800a098:	d003      	beq.n	800a0a2 <HAL_RCC_OscConfig+0x6e>
 800a09a:	68a3      	ldr	r3, [r4, #8]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f000 822f 	beq.w	800a500 <HAL_RCC_OscConfig+0x4cc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	f013 0f02 	tst.w	r3, #2
 800a0a8:	d075      	beq.n	800a196 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a0aa:	4b81      	ldr	r3, [pc, #516]	@ (800a2b0 <HAL_RCC_OscConfig+0x27c>)
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	f013 0f0c 	tst.w	r3, #12
 800a0b2:	d05f      	beq.n	800a174 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a0b4:	4b7e      	ldr	r3, [pc, #504]	@ (800a2b0 <HAL_RCC_OscConfig+0x27c>)
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	f003 030c 	and.w	r3, r3, #12
 800a0bc:	2b08      	cmp	r3, #8
 800a0be:	d054      	beq.n	800a16a <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a0c0:	6963      	ldr	r3, [r4, #20]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f000 808a 	beq.w	800a1dc <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 800a0c8:	4b7a      	ldr	r3, [pc, #488]	@ (800a2b4 <HAL_RCC_OscConfig+0x280>)
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a0ce:	f7fe fd0f 	bl	8008af0 <HAL_GetTick>
 800a0d2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0d4:	4b76      	ldr	r3, [pc, #472]	@ (800a2b0 <HAL_RCC_OscConfig+0x27c>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f013 0f02 	tst.w	r3, #2
 800a0dc:	d175      	bne.n	800a1ca <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0de:	f7fe fd07 	bl	8008af0 <HAL_GetTick>
 800a0e2:	1b40      	subs	r0, r0, r5
 800a0e4:	2802      	cmp	r0, #2
 800a0e6:	d9f5      	bls.n	800a0d4 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 800a0e8:	2003      	movs	r0, #3
 800a0ea:	e210      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0ec:	4a70      	ldr	r2, [pc, #448]	@ (800a2b0 <HAL_RCC_OscConfig+0x27c>)
 800a0ee:	6813      	ldr	r3, [r2, #0]
 800a0f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0f4:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a0f6:	68a3      	ldr	r3, [r4, #8]
 800a0f8:	b343      	cbz	r3, 800a14c <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 800a0fa:	f7fe fcf9 	bl	8008af0 <HAL_GetTick>
 800a0fe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a100:	4b6b      	ldr	r3, [pc, #428]	@ (800a2b0 <HAL_RCC_OscConfig+0x27c>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800a108:	d1cb      	bne.n	800a0a2 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a10a:	f7fe fcf1 	bl	8008af0 <HAL_GetTick>
 800a10e:	1b40      	subs	r0, r0, r5
 800a110:	2864      	cmp	r0, #100	@ 0x64
 800a112:	d9f5      	bls.n	800a100 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 800a114:	2003      	movs	r0, #3
 800a116:	e1fa      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a118:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a11c:	d009      	beq.n	800a132 <HAL_RCC_OscConfig+0xfe>
 800a11e:	4b64      	ldr	r3, [pc, #400]	@ (800a2b0 <HAL_RCC_OscConfig+0x27c>)
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a126:	601a      	str	r2, [r3, #0]
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a12e:	601a      	str	r2, [r3, #0]
 800a130:	e7e1      	b.n	800a0f6 <HAL_RCC_OscConfig+0xc2>
 800a132:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a136:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a140:	601a      	str	r2, [r3, #0]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a148:	601a      	str	r2, [r3, #0]
 800a14a:	e7d4      	b.n	800a0f6 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 800a14c:	f7fe fcd0 	bl	8008af0 <HAL_GetTick>
 800a150:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a152:	4b57      	ldr	r3, [pc, #348]	@ (800a2b0 <HAL_RCC_OscConfig+0x27c>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800a15a:	d0a2      	beq.n	800a0a2 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a15c:	f7fe fcc8 	bl	8008af0 <HAL_GetTick>
 800a160:	1b40      	subs	r0, r0, r5
 800a162:	2864      	cmp	r0, #100	@ 0x64
 800a164:	d9f5      	bls.n	800a152 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800a166:	2003      	movs	r0, #3
 800a168:	e1d1      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a16a:	4b51      	ldr	r3, [pc, #324]	@ (800a2b0 <HAL_RCC_OscConfig+0x27c>)
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800a172:	d1a5      	bne.n	800a0c0 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a174:	4b4e      	ldr	r3, [pc, #312]	@ (800a2b0 <HAL_RCC_OscConfig+0x27c>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f013 0f02 	tst.w	r3, #2
 800a17c:	d003      	beq.n	800a186 <HAL_RCC_OscConfig+0x152>
 800a17e:	6963      	ldr	r3, [r4, #20]
 800a180:	2b01      	cmp	r3, #1
 800a182:	f040 81bf 	bne.w	800a504 <HAL_RCC_OscConfig+0x4d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a186:	4a4a      	ldr	r2, [pc, #296]	@ (800a2b0 <HAL_RCC_OscConfig+0x27c>)
 800a188:	6813      	ldr	r3, [r2, #0]
 800a18a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a18e:	69a1      	ldr	r1, [r4, #24]
 800a190:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a194:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a196:	6823      	ldr	r3, [r4, #0]
 800a198:	f013 0f08 	tst.w	r3, #8
 800a19c:	d033      	beq.n	800a206 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a19e:	69e3      	ldr	r3, [r4, #28]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d05c      	beq.n	800a25e <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 800a1a4:	4b43      	ldr	r3, [pc, #268]	@ (800a2b4 <HAL_RCC_OscConfig+0x280>)
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800a1ac:	f7fe fca0 	bl	8008af0 <HAL_GetTick>
 800a1b0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a1b2:	4b3f      	ldr	r3, [pc, #252]	@ (800a2b0 <HAL_RCC_OscConfig+0x27c>)
 800a1b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1b6:	f013 0f02 	tst.w	r3, #2
 800a1ba:	d121      	bne.n	800a200 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a1bc:	f7fe fc98 	bl	8008af0 <HAL_GetTick>
 800a1c0:	1b40      	subs	r0, r0, r5
 800a1c2:	2802      	cmp	r0, #2
 800a1c4:	d9f5      	bls.n	800a1b2 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 800a1c6:	2003      	movs	r0, #3
 800a1c8:	e1a1      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1ca:	4a39      	ldr	r2, [pc, #228]	@ (800a2b0 <HAL_RCC_OscConfig+0x27c>)
 800a1cc:	6813      	ldr	r3, [r2, #0]
 800a1ce:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a1d2:	69a1      	ldr	r1, [r4, #24]
 800a1d4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a1d8:	6013      	str	r3, [r2, #0]
 800a1da:	e7dc      	b.n	800a196 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800a1dc:	4b35      	ldr	r3, [pc, #212]	@ (800a2b4 <HAL_RCC_OscConfig+0x280>)
 800a1de:	2200      	movs	r2, #0
 800a1e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a1e2:	f7fe fc85 	bl	8008af0 <HAL_GetTick>
 800a1e6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a1e8:	4b31      	ldr	r3, [pc, #196]	@ (800a2b0 <HAL_RCC_OscConfig+0x27c>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f013 0f02 	tst.w	r3, #2
 800a1f0:	d0d1      	beq.n	800a196 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1f2:	f7fe fc7d 	bl	8008af0 <HAL_GetTick>
 800a1f6:	1b40      	subs	r0, r0, r5
 800a1f8:	2802      	cmp	r0, #2
 800a1fa:	d9f5      	bls.n	800a1e8 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 800a1fc:	2003      	movs	r0, #3
 800a1fe:	e186      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
      RCC_Delay(1);
 800a200:	2001      	movs	r0, #1
 800a202:	f7ff ff01 	bl	800a008 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	f013 0f04 	tst.w	r3, #4
 800a20c:	f000 8096 	beq.w	800a33c <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a210:	4b27      	ldr	r3, [pc, #156]	@ (800a2b0 <HAL_RCC_OscConfig+0x27c>)
 800a212:	69db      	ldr	r3, [r3, #28]
 800a214:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800a218:	d134      	bne.n	800a284 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 800a21a:	4b25      	ldr	r3, [pc, #148]	@ (800a2b0 <HAL_RCC_OscConfig+0x27c>)
 800a21c:	69da      	ldr	r2, [r3, #28]
 800a21e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800a222:	61da      	str	r2, [r3, #28]
 800a224:	69db      	ldr	r3, [r3, #28]
 800a226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a22a:	9301      	str	r3, [sp, #4]
 800a22c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a22e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a230:	4b21      	ldr	r3, [pc, #132]	@ (800a2b8 <HAL_RCC_OscConfig+0x284>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800a238:	d026      	beq.n	800a288 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a23a:	6923      	ldr	r3, [r4, #16]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d03d      	beq.n	800a2bc <HAL_RCC_OscConfig+0x288>
 800a240:	2b00      	cmp	r3, #0
 800a242:	d153      	bne.n	800a2ec <HAL_RCC_OscConfig+0x2b8>
 800a244:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a248:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800a24c:	6a1a      	ldr	r2, [r3, #32]
 800a24e:	f022 0201 	bic.w	r2, r2, #1
 800a252:	621a      	str	r2, [r3, #32]
 800a254:	6a1a      	ldr	r2, [r3, #32]
 800a256:	f022 0204 	bic.w	r2, r2, #4
 800a25a:	621a      	str	r2, [r3, #32]
 800a25c:	e033      	b.n	800a2c6 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 800a25e:	4b15      	ldr	r3, [pc, #84]	@ (800a2b4 <HAL_RCC_OscConfig+0x280>)
 800a260:	2200      	movs	r2, #0
 800a262:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800a266:	f7fe fc43 	bl	8008af0 <HAL_GetTick>
 800a26a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a26c:	4b10      	ldr	r3, [pc, #64]	@ (800a2b0 <HAL_RCC_OscConfig+0x27c>)
 800a26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a270:	f013 0f02 	tst.w	r3, #2
 800a274:	d0c7      	beq.n	800a206 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a276:	f7fe fc3b 	bl	8008af0 <HAL_GetTick>
 800a27a:	1b40      	subs	r0, r0, r5
 800a27c:	2802      	cmp	r0, #2
 800a27e:	d9f5      	bls.n	800a26c <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 800a280:	2003      	movs	r0, #3
 800a282:	e144      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
    FlagStatus       pwrclkchanged = RESET;
 800a284:	2500      	movs	r5, #0
 800a286:	e7d3      	b.n	800a230 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a288:	4a0b      	ldr	r2, [pc, #44]	@ (800a2b8 <HAL_RCC_OscConfig+0x284>)
 800a28a:	6813      	ldr	r3, [r2, #0]
 800a28c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a290:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800a292:	f7fe fc2d 	bl	8008af0 <HAL_GetTick>
 800a296:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a298:	4b07      	ldr	r3, [pc, #28]	@ (800a2b8 <HAL_RCC_OscConfig+0x284>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800a2a0:	d1cb      	bne.n	800a23a <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2a2:	f7fe fc25 	bl	8008af0 <HAL_GetTick>
 800a2a6:	1b80      	subs	r0, r0, r6
 800a2a8:	2864      	cmp	r0, #100	@ 0x64
 800a2aa:	d9f5      	bls.n	800a298 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 800a2ac:	2003      	movs	r0, #3
 800a2ae:	e12e      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
 800a2b0:	40021000 	.word	0x40021000
 800a2b4:	42420000 	.word	0x42420000
 800a2b8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a2bc:	4a98      	ldr	r2, [pc, #608]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a2be:	6a13      	ldr	r3, [r2, #32]
 800a2c0:	f043 0301 	orr.w	r3, r3, #1
 800a2c4:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a2c6:	6923      	ldr	r3, [r4, #16]
 800a2c8:	b333      	cbz	r3, 800a318 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 800a2ca:	f7fe fc11 	bl	8008af0 <HAL_GetTick>
 800a2ce:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2d0:	4b93      	ldr	r3, [pc, #588]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a2d2:	6a1b      	ldr	r3, [r3, #32]
 800a2d4:	f013 0f02 	tst.w	r3, #2
 800a2d8:	d12f      	bne.n	800a33a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2da:	f7fe fc09 	bl	8008af0 <HAL_GetTick>
 800a2de:	1b80      	subs	r0, r0, r6
 800a2e0:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a2e4:	4298      	cmp	r0, r3
 800a2e6:	d9f3      	bls.n	800a2d0 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 800a2e8:	2003      	movs	r0, #3
 800a2ea:	e110      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a2ec:	2b05      	cmp	r3, #5
 800a2ee:	d009      	beq.n	800a304 <HAL_RCC_OscConfig+0x2d0>
 800a2f0:	4b8b      	ldr	r3, [pc, #556]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a2f2:	6a1a      	ldr	r2, [r3, #32]
 800a2f4:	f022 0201 	bic.w	r2, r2, #1
 800a2f8:	621a      	str	r2, [r3, #32]
 800a2fa:	6a1a      	ldr	r2, [r3, #32]
 800a2fc:	f022 0204 	bic.w	r2, r2, #4
 800a300:	621a      	str	r2, [r3, #32]
 800a302:	e7e0      	b.n	800a2c6 <HAL_RCC_OscConfig+0x292>
 800a304:	4b86      	ldr	r3, [pc, #536]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a306:	6a1a      	ldr	r2, [r3, #32]
 800a308:	f042 0204 	orr.w	r2, r2, #4
 800a30c:	621a      	str	r2, [r3, #32]
 800a30e:	6a1a      	ldr	r2, [r3, #32]
 800a310:	f042 0201 	orr.w	r2, r2, #1
 800a314:	621a      	str	r2, [r3, #32]
 800a316:	e7d6      	b.n	800a2c6 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 800a318:	f7fe fbea 	bl	8008af0 <HAL_GetTick>
 800a31c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a31e:	4b80      	ldr	r3, [pc, #512]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	f013 0f02 	tst.w	r3, #2
 800a326:	d008      	beq.n	800a33a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a328:	f7fe fbe2 	bl	8008af0 <HAL_GetTick>
 800a32c:	1b80      	subs	r0, r0, r6
 800a32e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a332:	4298      	cmp	r0, r3
 800a334:	d9f3      	bls.n	800a31e <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800a336:	2003      	movs	r0, #3
 800a338:	e0e9      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
    if (pwrclkchanged == SET)
 800a33a:	bb75      	cbnz	r5, 800a39a <HAL_RCC_OscConfig+0x366>
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800a33c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d06e      	beq.n	800a420 <HAL_RCC_OscConfig+0x3ec>
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800a342:	4a77      	ldr	r2, [pc, #476]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a344:	6852      	ldr	r2, [r2, #4]
 800a346:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 800a34a:	d005      	beq.n	800a358 <HAL_RCC_OscConfig+0x324>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800a34c:	4a74      	ldr	r2, [pc, #464]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a34e:	6852      	ldr	r2, [r2, #4]
 800a350:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800a354:	2a08      	cmp	r2, #8
 800a356:	d026      	beq.n	800a3a6 <HAL_RCC_OscConfig+0x372>
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800a358:	2b02      	cmp	r3, #2
 800a35a:	d14a      	bne.n	800a3f2 <HAL_RCC_OscConfig+0x3be>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800a35c:	4b70      	ldr	r3, [pc, #448]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800a364:	d007      	beq.n	800a376 <HAL_RCC_OscConfig+0x342>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 800a366:	4b6e      	ldr	r3, [pc, #440]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a36a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a36e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800a370:	4293      	cmp	r3, r2
 800a372:	f040 80c9 	bne.w	800a508 <HAL_RCC_OscConfig+0x4d4>
        __HAL_RCC_PLL2_DISABLE();
 800a376:	4b6b      	ldr	r3, [pc, #428]	@ (800a524 <HAL_RCC_OscConfig+0x4f0>)
 800a378:	2200      	movs	r2, #0
 800a37a:	669a      	str	r2, [r3, #104]	@ 0x68
        tickstart = HAL_GetTick();
 800a37c:	f7fe fbb8 	bl	8008af0 <HAL_GetTick>
 800a380:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800a382:	4b67      	ldr	r3, [pc, #412]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800a38a:	d013      	beq.n	800a3b4 <HAL_RCC_OscConfig+0x380>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a38c:	f7fe fbb0 	bl	8008af0 <HAL_GetTick>
 800a390:	1b40      	subs	r0, r0, r5
 800a392:	2864      	cmp	r0, #100	@ 0x64
 800a394:	d9f5      	bls.n	800a382 <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 800a396:	2003      	movs	r0, #3
 800a398:	e0b9      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a39a:	4a61      	ldr	r2, [pc, #388]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a39c:	69d3      	ldr	r3, [r2, #28]
 800a39e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a3a2:	61d3      	str	r3, [r2, #28]
 800a3a4:	e7ca      	b.n	800a33c <HAL_RCC_OscConfig+0x308>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800a3a6:	4a5e      	ldr	r2, [pc, #376]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a3a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800a3aa:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 800a3ae:	d0d3      	beq.n	800a358 <HAL_RCC_OscConfig+0x324>
      return HAL_ERROR;
 800a3b0:	2001      	movs	r0, #1
 800a3b2:	e0ac      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 800a3b4:	4a5a      	ldr	r2, [pc, #360]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a3b6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a3b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a3bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3be:	430b      	orrs	r3, r1
 800a3c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800a3c2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a3c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a3c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a3ca:	430b      	orrs	r3, r1
 800a3cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        __HAL_RCC_PLL2_ENABLE();
 800a3ce:	4b55      	ldr	r3, [pc, #340]	@ (800a524 <HAL_RCC_OscConfig+0x4f0>)
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	669a      	str	r2, [r3, #104]	@ 0x68
        tickstart = HAL_GetTick();
 800a3d4:	f7fe fb8c 	bl	8008af0 <HAL_GetTick>
 800a3d8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800a3da:	4b51      	ldr	r3, [pc, #324]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800a3e2:	d11d      	bne.n	800a420 <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a3e4:	f7fe fb84 	bl	8008af0 <HAL_GetTick>
 800a3e8:	1b40      	subs	r0, r0, r5
 800a3ea:	2864      	cmp	r0, #100	@ 0x64
 800a3ec:	d9f5      	bls.n	800a3da <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 800a3ee:	2003      	movs	r0, #3
 800a3f0:	e08d      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800a3f2:	4a4b      	ldr	r2, [pc, #300]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a3f4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a3f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        __HAL_RCC_PLL2_DISABLE();
 800a3fc:	4b49      	ldr	r3, [pc, #292]	@ (800a524 <HAL_RCC_OscConfig+0x4f0>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	669a      	str	r2, [r3, #104]	@ 0x68
        tickstart = HAL_GetTick();
 800a402:	f7fe fb75 	bl	8008af0 <HAL_GetTick>
 800a406:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800a408:	4b45      	ldr	r3, [pc, #276]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800a410:	d006      	beq.n	800a420 <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a412:	f7fe fb6d 	bl	8008af0 <HAL_GetTick>
 800a416:	1b40      	subs	r0, r0, r5
 800a418:	2864      	cmp	r0, #100	@ 0x64
 800a41a:	d9f5      	bls.n	800a408 <HAL_RCC_OscConfig+0x3d4>
            return HAL_TIMEOUT;
 800a41c:	2003      	movs	r0, #3
 800a41e:	e076      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a420:	6a23      	ldr	r3, [r4, #32]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d072      	beq.n	800a50c <HAL_RCC_OscConfig+0x4d8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a426:	4a3e      	ldr	r2, [pc, #248]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a428:	6852      	ldr	r2, [r2, #4]
 800a42a:	f002 020c 	and.w	r2, r2, #12
 800a42e:	2a08      	cmp	r2, #8
 800a430:	d054      	beq.n	800a4dc <HAL_RCC_OscConfig+0x4a8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a432:	2b02      	cmp	r3, #2
 800a434:	d011      	beq.n	800a45a <HAL_RCC_OscConfig+0x426>
        __HAL_RCC_PLL_DISABLE();
 800a436:	4b3b      	ldr	r3, [pc, #236]	@ (800a524 <HAL_RCC_OscConfig+0x4f0>)
 800a438:	2200      	movs	r2, #0
 800a43a:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800a43c:	f7fe fb58 	bl	8008af0 <HAL_GetTick>
 800a440:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a442:	4b37      	ldr	r3, [pc, #220]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800a44a:	d045      	beq.n	800a4d8 <HAL_RCC_OscConfig+0x4a4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a44c:	f7fe fb50 	bl	8008af0 <HAL_GetTick>
 800a450:	1b00      	subs	r0, r0, r4
 800a452:	2802      	cmp	r0, #2
 800a454:	d9f5      	bls.n	800a442 <HAL_RCC_OscConfig+0x40e>
            return HAL_TIMEOUT;
 800a456:	2003      	movs	r0, #3
 800a458:	e059      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_PLL_DISABLE();
 800a45a:	4b32      	ldr	r3, [pc, #200]	@ (800a524 <HAL_RCC_OscConfig+0x4f0>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800a460:	f7fe fb46 	bl	8008af0 <HAL_GetTick>
 800a464:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a466:	4b2e      	ldr	r3, [pc, #184]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800a46e:	d006      	beq.n	800a47e <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a470:	f7fe fb3e 	bl	8008af0 <HAL_GetTick>
 800a474:	1b40      	subs	r0, r0, r5
 800a476:	2802      	cmp	r0, #2
 800a478:	d9f5      	bls.n	800a466 <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 800a47a:	2003      	movs	r0, #3
 800a47c:	e047      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a47e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a484:	d01a      	beq.n	800a4bc <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a486:	4926      	ldr	r1, [pc, #152]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a488:	684b      	ldr	r3, [r1, #4]
 800a48a:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 800a48e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a490:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a492:	4302      	orrs	r2, r0
 800a494:	4313      	orrs	r3, r2
 800a496:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800a498:	4b22      	ldr	r3, [pc, #136]	@ (800a524 <HAL_RCC_OscConfig+0x4f0>)
 800a49a:	2201      	movs	r2, #1
 800a49c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800a49e:	f7fe fb27 	bl	8008af0 <HAL_GetTick>
 800a4a2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a4a4:	4b1e      	ldr	r3, [pc, #120]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800a4ac:	d112      	bne.n	800a4d4 <HAL_RCC_OscConfig+0x4a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4ae:	f7fe fb1f 	bl	8008af0 <HAL_GetTick>
 800a4b2:	1b00      	subs	r0, r0, r4
 800a4b4:	2802      	cmp	r0, #2
 800a4b6:	d9f5      	bls.n	800a4a4 <HAL_RCC_OscConfig+0x470>
            return HAL_TIMEOUT;
 800a4b8:	2003      	movs	r0, #3
 800a4ba:	e028      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800a4bc:	4a18      	ldr	r2, [pc, #96]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a4be:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a4c0:	6861      	ldr	r1, [r4, #4]
 800a4c2:	430b      	orrs	r3, r1
 800a4c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a4c6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a4c8:	f023 030f 	bic.w	r3, r3, #15
 800a4cc:	68e1      	ldr	r1, [r4, #12]
 800a4ce:	430b      	orrs	r3, r1
 800a4d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a4d2:	e7d8      	b.n	800a486 <HAL_RCC_OscConfig+0x452>
  return HAL_OK;
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	e01a      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
 800a4d8:	2000      	movs	r0, #0
 800a4da:	e018      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d018      	beq.n	800a512 <HAL_RCC_OscConfig+0x4de>
        pll_config = RCC->CFGR;
 800a4e0:	4b0f      	ldr	r3, [pc, #60]	@ (800a520 <HAL_RCC_OscConfig+0x4ec>)
 800a4e2:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4e4:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 800a4e8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a4ea:	4291      	cmp	r1, r2
 800a4ec:	d113      	bne.n	800a516 <HAL_RCC_OscConfig+0x4e2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a4ee:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800a4f2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d110      	bne.n	800a51a <HAL_RCC_OscConfig+0x4e6>
  return HAL_OK;
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	e008      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
    return HAL_ERROR;
 800a4fc:	2001      	movs	r0, #1
}
 800a4fe:	4770      	bx	lr
        return HAL_ERROR;
 800a500:	2001      	movs	r0, #1
 800a502:	e004      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
        return HAL_ERROR;
 800a504:	2001      	movs	r0, #1
 800a506:	e002      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
          return HAL_ERROR;
 800a508:	2001      	movs	r0, #1
 800a50a:	e000      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
  return HAL_OK;
 800a50c:	2000      	movs	r0, #0
}
 800a50e:	b002      	add	sp, #8
 800a510:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800a512:	2001      	movs	r0, #1
 800a514:	e7fb      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
          return HAL_ERROR;
 800a516:	2001      	movs	r0, #1
 800a518:	e7f9      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
 800a51a:	2001      	movs	r0, #1
 800a51c:	e7f7      	b.n	800a50e <HAL_RCC_OscConfig+0x4da>
 800a51e:	bf00      	nop
 800a520:	40021000 	.word	0x40021000
 800a524:	42420000 	.word	0x42420000

0800a528 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800a528:	4b29      	ldr	r3, [pc, #164]	@ (800a5d0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800a52a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800a52c:	f003 020c 	and.w	r2, r3, #12
 800a530:	2a08      	cmp	r2, #8
 800a532:	d001      	beq.n	800a538 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 800a534:	4827      	ldr	r0, [pc, #156]	@ (800a5d4 <HAL_RCC_GetSysClockFreq+0xac>)
}
 800a536:	4770      	bx	lr
{
 800a538:	b570      	push	{r4, r5, r6, lr}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a53a:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800a53e:	4926      	ldr	r1, [pc, #152]	@ (800a5d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800a540:	5c8c      	ldrb	r4, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a542:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800a546:	d03f      	beq.n	800a5c8 <HAL_RCC_GetSysClockFreq+0xa0>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800a548:	4a21      	ldr	r2, [pc, #132]	@ (800a5d0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800a54a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a54c:	f003 030f 	and.w	r3, r3, #15
 800a550:	4922      	ldr	r1, [pc, #136]	@ (800a5dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800a552:	5ccb      	ldrb	r3, [r1, r3]
        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800a554:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a556:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 800a55a:	d02f      	beq.n	800a5bc <HAL_RCC_GetSysClockFreq+0x94>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800a55c:	491c      	ldr	r1, [pc, #112]	@ (800a5d0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800a55e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800a560:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800a564:	3201      	adds	r2, #1
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800a566:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
 800a568:	f3c0 2003 	ubfx	r0, r0, #8, #4
 800a56c:	3002      	adds	r0, #2
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800a56e:	fba0 0e04 	umull	r0, lr, r0, r4
 800a572:	ea4f 114e 	mov.w	r1, lr, lsl #5
 800a576:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
 800a57a:	0145      	lsls	r5, r0, #5
 800a57c:	1a2d      	subs	r5, r5, r0
 800a57e:	eb61 060e 	sbc.w	r6, r1, lr
 800a582:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800a586:	ea4c 6c95 	orr.w	ip, ip, r5, lsr #26
 800a58a:	01a9      	lsls	r1, r5, #6
 800a58c:	1b49      	subs	r1, r1, r5
 800a58e:	eb6c 0c06 	sbc.w	ip, ip, r6
 800a592:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800a596:	ea4c 7c51 	orr.w	ip, ip, r1, lsr #29
 800a59a:	00c9      	lsls	r1, r1, #3
 800a59c:	1809      	adds	r1, r1, r0
 800a59e:	eb4e 0e0c 	adc.w	lr, lr, ip
 800a5a2:	ea4f 2e4e 	mov.w	lr, lr, lsl #9
 800a5a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5aa:	0248      	lsls	r0, r1, #9
 800a5ac:	ea4e 51d1 	orr.w	r1, lr, r1, lsr #23
 800a5b0:	f7f6 fb4a 	bl	8000c48 <__aeabi_uldivmod>
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800a5b4:	2c0d      	cmp	r4, #13
 800a5b6:	d10a      	bne.n	800a5ce <HAL_RCC_GetSysClockFreq+0xa6>
          pllclk = pllclk / 2;
 800a5b8:	0840      	lsrs	r0, r0, #1
 800a5ba:	e008      	b.n	800a5ce <HAL_RCC_GetSysClockFreq+0xa6>
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800a5bc:	4805      	ldr	r0, [pc, #20]	@ (800a5d4 <HAL_RCC_GetSysClockFreq+0xac>)
 800a5be:	fb04 f000 	mul.w	r0, r4, r0
 800a5c2:	fbb0 f0f3 	udiv	r0, r0, r3
 800a5c6:	e7f5      	b.n	800a5b4 <HAL_RCC_GetSysClockFreq+0x8c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a5c8:	4805      	ldr	r0, [pc, #20]	@ (800a5e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a5ca:	fb04 f000 	mul.w	r0, r4, r0
}
 800a5ce:	bd70      	pop	{r4, r5, r6, pc}
 800a5d0:	40021000 	.word	0x40021000
 800a5d4:	007a1200 	.word	0x007a1200
 800a5d8:	08012dd4 	.word	0x08012dd4
 800a5dc:	08012dc4 	.word	0x08012dc4
 800a5e0:	003d0900 	.word	0x003d0900

0800a5e4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	f000 80a0 	beq.w	800a72a <HAL_RCC_ClockConfig+0x146>
{
 800a5ea:	b570      	push	{r4, r5, r6, lr}
 800a5ec:	460d      	mov	r5, r1
 800a5ee:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a5f0:	4b52      	ldr	r3, [pc, #328]	@ (800a73c <HAL_RCC_ClockConfig+0x158>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 0307 	and.w	r3, r3, #7
 800a5f8:	428b      	cmp	r3, r1
 800a5fa:	d20b      	bcs.n	800a614 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5fc:	4a4f      	ldr	r2, [pc, #316]	@ (800a73c <HAL_RCC_ClockConfig+0x158>)
 800a5fe:	6813      	ldr	r3, [r2, #0]
 800a600:	f023 0307 	bic.w	r3, r3, #7
 800a604:	430b      	orrs	r3, r1
 800a606:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a608:	6813      	ldr	r3, [r2, #0]
 800a60a:	f003 0307 	and.w	r3, r3, #7
 800a60e:	428b      	cmp	r3, r1
 800a610:	f040 808d 	bne.w	800a72e <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a614:	6823      	ldr	r3, [r4, #0]
 800a616:	f013 0f02 	tst.w	r3, #2
 800a61a:	d017      	beq.n	800a64c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a61c:	f013 0f04 	tst.w	r3, #4
 800a620:	d004      	beq.n	800a62c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a622:	4a47      	ldr	r2, [pc, #284]	@ (800a740 <HAL_RCC_ClockConfig+0x15c>)
 800a624:	6853      	ldr	r3, [r2, #4]
 800a626:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a62a:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a62c:	6823      	ldr	r3, [r4, #0]
 800a62e:	f013 0f08 	tst.w	r3, #8
 800a632:	d004      	beq.n	800a63e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a634:	4a42      	ldr	r2, [pc, #264]	@ (800a740 <HAL_RCC_ClockConfig+0x15c>)
 800a636:	6853      	ldr	r3, [r2, #4]
 800a638:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800a63c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a63e:	4a40      	ldr	r2, [pc, #256]	@ (800a740 <HAL_RCC_ClockConfig+0x15c>)
 800a640:	6853      	ldr	r3, [r2, #4]
 800a642:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a646:	68a1      	ldr	r1, [r4, #8]
 800a648:	430b      	orrs	r3, r1
 800a64a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a64c:	6823      	ldr	r3, [r4, #0]
 800a64e:	f013 0f01 	tst.w	r3, #1
 800a652:	d031      	beq.n	800a6b8 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a654:	6863      	ldr	r3, [r4, #4]
 800a656:	2b01      	cmp	r3, #1
 800a658:	d020      	beq.n	800a69c <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d025      	beq.n	800a6aa <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a65e:	4a38      	ldr	r2, [pc, #224]	@ (800a740 <HAL_RCC_ClockConfig+0x15c>)
 800a660:	6812      	ldr	r2, [r2, #0]
 800a662:	f012 0f02 	tst.w	r2, #2
 800a666:	d064      	beq.n	800a732 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a668:	4935      	ldr	r1, [pc, #212]	@ (800a740 <HAL_RCC_ClockConfig+0x15c>)
 800a66a:	684a      	ldr	r2, [r1, #4]
 800a66c:	f022 0203 	bic.w	r2, r2, #3
 800a670:	4313      	orrs	r3, r2
 800a672:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800a674:	f7fe fa3c 	bl	8008af0 <HAL_GetTick>
 800a678:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a67a:	4b31      	ldr	r3, [pc, #196]	@ (800a740 <HAL_RCC_ClockConfig+0x15c>)
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	f003 030c 	and.w	r3, r3, #12
 800a682:	6862      	ldr	r2, [r4, #4]
 800a684:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800a688:	d016      	beq.n	800a6b8 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a68a:	f7fe fa31 	bl	8008af0 <HAL_GetTick>
 800a68e:	1b80      	subs	r0, r0, r6
 800a690:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a694:	4298      	cmp	r0, r3
 800a696:	d9f0      	bls.n	800a67a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 800a698:	2003      	movs	r0, #3
 800a69a:	e045      	b.n	800a728 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a69c:	4a28      	ldr	r2, [pc, #160]	@ (800a740 <HAL_RCC_ClockConfig+0x15c>)
 800a69e:	6812      	ldr	r2, [r2, #0]
 800a6a0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800a6a4:	d1e0      	bne.n	800a668 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800a6a6:	2001      	movs	r0, #1
 800a6a8:	e03e      	b.n	800a728 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a6aa:	4a25      	ldr	r2, [pc, #148]	@ (800a740 <HAL_RCC_ClockConfig+0x15c>)
 800a6ac:	6812      	ldr	r2, [r2, #0]
 800a6ae:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800a6b2:	d1d9      	bne.n	800a668 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800a6b4:	2001      	movs	r0, #1
 800a6b6:	e037      	b.n	800a728 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a6b8:	4b20      	ldr	r3, [pc, #128]	@ (800a73c <HAL_RCC_ClockConfig+0x158>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 0307 	and.w	r3, r3, #7
 800a6c0:	42ab      	cmp	r3, r5
 800a6c2:	d90a      	bls.n	800a6da <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6c4:	4a1d      	ldr	r2, [pc, #116]	@ (800a73c <HAL_RCC_ClockConfig+0x158>)
 800a6c6:	6813      	ldr	r3, [r2, #0]
 800a6c8:	f023 0307 	bic.w	r3, r3, #7
 800a6cc:	432b      	orrs	r3, r5
 800a6ce:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6d0:	6813      	ldr	r3, [r2, #0]
 800a6d2:	f003 0307 	and.w	r3, r3, #7
 800a6d6:	42ab      	cmp	r3, r5
 800a6d8:	d12d      	bne.n	800a736 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	f013 0f04 	tst.w	r3, #4
 800a6e0:	d006      	beq.n	800a6f0 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a6e2:	4a17      	ldr	r2, [pc, #92]	@ (800a740 <HAL_RCC_ClockConfig+0x15c>)
 800a6e4:	6853      	ldr	r3, [r2, #4]
 800a6e6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800a6ea:	68e1      	ldr	r1, [r4, #12]
 800a6ec:	430b      	orrs	r3, r1
 800a6ee:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6f0:	6823      	ldr	r3, [r4, #0]
 800a6f2:	f013 0f08 	tst.w	r3, #8
 800a6f6:	d007      	beq.n	800a708 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a6f8:	4a11      	ldr	r2, [pc, #68]	@ (800a740 <HAL_RCC_ClockConfig+0x15c>)
 800a6fa:	6853      	ldr	r3, [r2, #4]
 800a6fc:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800a700:	6921      	ldr	r1, [r4, #16]
 800a702:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a706:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a708:	f7ff ff0e 	bl	800a528 <HAL_RCC_GetSysClockFreq>
 800a70c:	4b0c      	ldr	r3, [pc, #48]	@ (800a740 <HAL_RCC_ClockConfig+0x15c>)
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a714:	4a0b      	ldr	r2, [pc, #44]	@ (800a744 <HAL_RCC_ClockConfig+0x160>)
 800a716:	5cd3      	ldrb	r3, [r2, r3]
 800a718:	40d8      	lsrs	r0, r3
 800a71a:	4b0b      	ldr	r3, [pc, #44]	@ (800a748 <HAL_RCC_ClockConfig+0x164>)
 800a71c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800a71e:	4b0b      	ldr	r3, [pc, #44]	@ (800a74c <HAL_RCC_ClockConfig+0x168>)
 800a720:	6818      	ldr	r0, [r3, #0]
 800a722:	f7fe f9a1 	bl	8008a68 <HAL_InitTick>
  return HAL_OK;
 800a726:	2000      	movs	r0, #0
}
 800a728:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800a72a:	2001      	movs	r0, #1
}
 800a72c:	4770      	bx	lr
    return HAL_ERROR;
 800a72e:	2001      	movs	r0, #1
 800a730:	e7fa      	b.n	800a728 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800a732:	2001      	movs	r0, #1
 800a734:	e7f8      	b.n	800a728 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800a736:	2001      	movs	r0, #1
 800a738:	e7f6      	b.n	800a728 <HAL_RCC_ClockConfig+0x144>
 800a73a:	bf00      	nop
 800a73c:	40022000 	.word	0x40022000
 800a740:	40021000 	.word	0x40021000
 800a744:	08012db4 	.word	0x08012db4
 800a748:	20004380 	.word	0x20004380
 800a74c:	20004388 	.word	0x20004388

0800a750 <HAL_RCC_GetHCLKFreq>:
}
 800a750:	4b01      	ldr	r3, [pc, #4]	@ (800a758 <HAL_RCC_GetHCLKFreq+0x8>)
 800a752:	6818      	ldr	r0, [r3, #0]
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	20004380 	.word	0x20004380

0800a75c <HAL_RCC_GetPCLK1Freq>:
{
 800a75c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a75e:	f7ff fff7 	bl	800a750 <HAL_RCC_GetHCLKFreq>
 800a762:	4b04      	ldr	r3, [pc, #16]	@ (800a774 <HAL_RCC_GetPCLK1Freq+0x18>)
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a76a:	4a03      	ldr	r2, [pc, #12]	@ (800a778 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a76c:	5cd3      	ldrb	r3, [r2, r3]
}
 800a76e:	40d8      	lsrs	r0, r3
 800a770:	bd08      	pop	{r3, pc}
 800a772:	bf00      	nop
 800a774:	40021000 	.word	0x40021000
 800a778:	08012dac 	.word	0x08012dac

0800a77c <HAL_RCC_GetPCLK2Freq>:
{
 800a77c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a77e:	f7ff ffe7 	bl	800a750 <HAL_RCC_GetHCLKFreq>
 800a782:	4b04      	ldr	r3, [pc, #16]	@ (800a794 <HAL_RCC_GetPCLK2Freq+0x18>)
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800a78a:	4a03      	ldr	r2, [pc, #12]	@ (800a798 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800a78c:	5cd3      	ldrb	r3, [r2, r3]
}
 800a78e:	40d8      	lsrs	r0, r3
 800a790:	bd08      	pop	{r3, pc}
 800a792:	bf00      	nop
 800a794:	40021000 	.word	0x40021000
 800a798:	08012dac 	.word	0x08012dac

0800a79c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a79c:	b570      	push	{r4, r5, r6, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a7a2:	6803      	ldr	r3, [r0, #0]
 800a7a4:	f013 0f01 	tst.w	r3, #1
 800a7a8:	d039      	beq.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x82>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a7aa:	4b6e      	ldr	r3, [pc, #440]	@ (800a964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a7ac:	69db      	ldr	r3, [r3, #28]
 800a7ae:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800a7b2:	d10b      	bne.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x30>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7b4:	4b6b      	ldr	r3, [pc, #428]	@ (800a964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a7b6:	69da      	ldr	r2, [r3, #28]
 800a7b8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800a7bc:	61da      	str	r2, [r3, #28]
 800a7be:	69db      	ldr	r3, [r3, #28]
 800a7c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7c4:	9301      	str	r3, [sp, #4]
 800a7c6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a7c8:	2501      	movs	r5, #1
 800a7ca:	e000      	b.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x32>
    FlagStatus pwrclkchanged = RESET;
 800a7cc:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a7ce:	4b66      	ldr	r3, [pc, #408]	@ (800a968 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800a7d6:	d07d      	beq.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a7d8:	4b62      	ldr	r3, [pc, #392]	@ (800a964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a7da:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a7dc:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800a7e0:	d013      	beq.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800a7e2:	6862      	ldr	r2, [r4, #4]
 800a7e4:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d00e      	beq.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a7ec:	4a5d      	ldr	r2, [pc, #372]	@ (800a964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a7ee:	6a13      	ldr	r3, [r2, #32]
 800a7f0:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a7f4:	495d      	ldr	r1, [pc, #372]	@ (800a96c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a7f6:	2601      	movs	r6, #1
 800a7f8:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a7fc:	2600      	movs	r6, #0
 800a7fe:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a802:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a804:	f013 0f01 	tst.w	r3, #1
 800a808:	d179      	bne.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x162>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a80a:	4a56      	ldr	r2, [pc, #344]	@ (800a964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a80c:	6a13      	ldr	r3, [r2, #32]
 800a80e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a812:	6861      	ldr	r1, [r4, #4]
 800a814:	430b      	orrs	r3, r1
 800a816:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a818:	2d00      	cmp	r5, #0
 800a81a:	f040 8082 	bne.w	800a922 <HAL_RCCEx_PeriphCLKConfig+0x186>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a81e:	6823      	ldr	r3, [r4, #0]
 800a820:	f013 0f02 	tst.w	r3, #2
 800a824:	d006      	beq.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a826:	4a4f      	ldr	r2, [pc, #316]	@ (800a964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a828:	6853      	ldr	r3, [r2, #4]
 800a82a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800a82e:	68a1      	ldr	r1, [r4, #8]
 800a830:	430b      	orrs	r3, r1
 800a832:	6053      	str	r3, [r2, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	f013 0f04 	tst.w	r3, #4
 800a83a:	d006      	beq.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800a83c:	4a49      	ldr	r2, [pc, #292]	@ (800a964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a83e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a840:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a844:	68e1      	ldr	r1, [r4, #12]
 800a846:	430b      	orrs	r3, r1
 800a848:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	f013 0f08 	tst.w	r3, #8
 800a850:	d006      	beq.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 800a852:	4a44      	ldr	r2, [pc, #272]	@ (800a964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a854:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a85a:	6921      	ldr	r1, [r4, #16]
 800a85c:	430b      	orrs	r3, r1
 800a85e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800a860:	4b40      	ldr	r3, [pc, #256]	@ (800a964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a864:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800a868:	d104      	bne.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800a86a:	4b3e      	ldr	r3, [pc, #248]	@ (800a964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a86e:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800a872:	d062      	beq.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x19e>

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 800a874:	4b3b      	ldr	r3, [pc, #236]	@ (800a964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800a87c:	d156      	bne.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x190>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 800a87e:	4b39      	ldr	r3, [pc, #228]	@ (800a964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 800a886:	d006      	beq.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 800a888:	4b36      	ldr	r3, [pc, #216]	@ (800a964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a88a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a88c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a890:	69a2      	ldr	r2, [r4, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 800a892:	4293      	cmp	r3, r2
 800a894:	d15f      	bne.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      {
        return HAL_ERROR;
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 800a896:	4a33      	ldr	r2, [pc, #204]	@ (800a964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a898:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a89a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a89e:	69a1      	ldr	r1, [r4, #24]
 800a8a0:	430b      	orrs	r3, r1
 800a8a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 800a8a4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a8a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a8aa:	6961      	ldr	r1, [r4, #20]
 800a8ac:	430b      	orrs	r3, r1
 800a8ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 800a8b0:	4b2e      	ldr	r3, [pc, #184]	@ (800a96c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8b6:	f7fe f91b 	bl	8008af0 <HAL_GetTick>
 800a8ba:	4605      	mov	r5, r0

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a8bc:	4b29      	ldr	r3, [pc, #164]	@ (800a964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800a8c4:	d139      	bne.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x19e>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a8c6:	f7fe f913 	bl	8008af0 <HAL_GetTick>
 800a8ca:	1b40      	subs	r0, r0, r5
 800a8cc:	2864      	cmp	r0, #100	@ 0x64
 800a8ce:	d9f5      	bls.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x120>
        {
          return HAL_TIMEOUT;
 800a8d0:	2003      	movs	r0, #3
 800a8d2:	e03e      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a8d4:	4a24      	ldr	r2, [pc, #144]	@ (800a968 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a8d6:	6813      	ldr	r3, [r2, #0]
 800a8d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a8dc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800a8de:	f7fe f907 	bl	8008af0 <HAL_GetTick>
 800a8e2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8e4:	4b20      	ldr	r3, [pc, #128]	@ (800a968 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800a8ec:	f47f af74 	bne.w	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8f0:	f7fe f8fe 	bl	8008af0 <HAL_GetTick>
 800a8f4:	1b80      	subs	r0, r0, r6
 800a8f6:	2864      	cmp	r0, #100	@ 0x64
 800a8f8:	d9f4      	bls.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x148>
          return HAL_TIMEOUT;
 800a8fa:	2003      	movs	r0, #3
 800a8fc:	e029      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        tickstart = HAL_GetTick();
 800a8fe:	f7fe f8f7 	bl	8008af0 <HAL_GetTick>
 800a902:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a904:	4b17      	ldr	r3, [pc, #92]	@ (800a964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a906:	6a1b      	ldr	r3, [r3, #32]
 800a908:	f013 0f02 	tst.w	r3, #2
 800a90c:	f47f af7d 	bne.w	800a80a <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a910:	f7fe f8ee 	bl	8008af0 <HAL_GetTick>
 800a914:	1b80      	subs	r0, r0, r6
 800a916:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a91a:	4298      	cmp	r0, r3
 800a91c:	d9f2      	bls.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x168>
            return HAL_TIMEOUT;
 800a91e:	2003      	movs	r0, #3
 800a920:	e017      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a922:	69d3      	ldr	r3, [r2, #28]
 800a924:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a928:	61d3      	str	r3, [r2, #28]
 800a92a:	e778      	b.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x82>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800a92c:	4b0d      	ldr	r3, [pc, #52]	@ (800a964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a92e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a930:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a934:	6962      	ldr	r2, [r4, #20]
 800a936:	4293      	cmp	r3, r2
 800a938:	d10f      	bne.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x1be>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a93a:	6823      	ldr	r3, [r4, #0]
 800a93c:	f013 0f10 	tst.w	r3, #16
 800a940:	d00d      	beq.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a942:	4a08      	ldr	r2, [pc, #32]	@ (800a964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a944:	6853      	ldr	r3, [r2, #4]
 800a946:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800a94a:	69e1      	ldr	r1, [r4, #28]
 800a94c:	430b      	orrs	r3, r1
 800a94e:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800a950:	2000      	movs	r0, #0
}
 800a952:	b002      	add	sp, #8
 800a954:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800a956:	2001      	movs	r0, #1
 800a958:	e7fb      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        return HAL_ERROR;
 800a95a:	2001      	movs	r0, #1
 800a95c:	e7f9      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  return HAL_OK;
 800a95e:	2000      	movs	r0, #0
 800a960:	e7f7      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a962:	bf00      	nop
 800a964:	40021000 	.word	0x40021000
 800a968:	40007000 	.word	0x40007000
 800a96c:	42420000 	.word	0x42420000

0800a970 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a970:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a972:	f102 030c 	add.w	r3, r2, #12
 800a976:	e853 3f00 	ldrex	r3, [r3]
 800a97a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97e:	320c      	adds	r2, #12
 800a980:	e842 3100 	strex	r1, r3, [r2]
 800a984:	2900      	cmp	r1, #0
 800a986:	d1f3      	bne.n	800a970 <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a988:	2320      	movs	r3, #32
 800a98a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 800a98e:	4770      	bx	lr

0800a990 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a990:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a992:	f102 030c 	add.w	r3, r2, #12
 800a996:	e853 3f00 	ldrex	r3, [r3]
 800a99a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99e:	320c      	adds	r2, #12
 800a9a0:	e842 3100 	strex	r1, r3, [r2]
 800a9a4:	2900      	cmp	r1, #0
 800a9a6:	d1f3      	bne.n	800a990 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9a8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9aa:	f102 0314 	add.w	r3, r2, #20
 800a9ae:	e853 3f00 	ldrex	r3, [r3]
 800a9b2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b6:	3214      	adds	r2, #20
 800a9b8:	e842 3100 	strex	r1, r3, [r2]
 800a9bc:	2900      	cmp	r1, #0
 800a9be:	d1f3      	bne.n	800a9a8 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9c0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d005      	beq.n	800a9d2 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9c6:	2320      	movs	r3, #32
 800a9c8:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800a9d0:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9d2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d4:	f102 030c 	add.w	r3, r2, #12
 800a9d8:	e853 3f00 	ldrex	r3, [r3]
 800a9dc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e0:	320c      	adds	r2, #12
 800a9e2:	e842 3100 	strex	r1, r3, [r2]
 800a9e6:	2900      	cmp	r1, #0
 800a9e8:	d1f3      	bne.n	800a9d2 <UART_EndRxTransfer+0x42>
 800a9ea:	e7ec      	b.n	800a9c6 <UART_EndRxTransfer+0x36>

0800a9ec <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a9ec:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	2b21      	cmp	r3, #33	@ 0x21
 800a9f4:	d001      	beq.n	800a9fa <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800a9f6:	2002      	movs	r0, #2
  }
}
 800a9f8:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9fa:	6883      	ldr	r3, [r0, #8]
 800a9fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa00:	d017      	beq.n	800aa32 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aa02:	6a03      	ldr	r3, [r0, #32]
 800aa04:	1c5a      	adds	r2, r3, #1
 800aa06:	6202      	str	r2, [r0, #32]
 800aa08:	781a      	ldrb	r2, [r3, #0]
 800aa0a:	6803      	ldr	r3, [r0, #0]
 800aa0c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800aa0e:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	3b01      	subs	r3, #1
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800aa18:	b94b      	cbnz	r3, 800aa2e <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aa1a:	6802      	ldr	r2, [r0, #0]
 800aa1c:	68d3      	ldr	r3, [r2, #12]
 800aa1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa22:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aa24:	6802      	ldr	r2, [r0, #0]
 800aa26:	68d3      	ldr	r3, [r2, #12]
 800aa28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa2c:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800aa2e:	2000      	movs	r0, #0
 800aa30:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa32:	6903      	ldr	r3, [r0, #16]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1e4      	bne.n	800aa02 <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aa38:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800aa3a:	881b      	ldrh	r3, [r3, #0]
 800aa3c:	6802      	ldr	r2, [r0, #0]
 800aa3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa42:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 800aa44:	6a03      	ldr	r3, [r0, #32]
 800aa46:	3302      	adds	r3, #2
 800aa48:	6203      	str	r3, [r0, #32]
 800aa4a:	e7e0      	b.n	800aa0e <UART_Transmit_IT+0x22>

0800aa4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa4c:	b510      	push	{r4, lr}
 800aa4e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa50:	6802      	ldr	r2, [r0, #0]
 800aa52:	6913      	ldr	r3, [r2, #16]
 800aa54:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800aa58:	68c1      	ldr	r1, [r0, #12]
 800aa5a:	430b      	orrs	r3, r1
 800aa5c:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800aa5e:	6883      	ldr	r3, [r0, #8]
 800aa60:	6902      	ldr	r2, [r0, #16]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	6942      	ldr	r2, [r0, #20]
 800aa66:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800aa68:	6801      	ldr	r1, [r0, #0]
 800aa6a:	68cb      	ldr	r3, [r1, #12]
 800aa6c:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800aa70:	f023 030c 	bic.w	r3, r3, #12
 800aa74:	4313      	orrs	r3, r2
 800aa76:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aa78:	6802      	ldr	r2, [r0, #0]
 800aa7a:	6953      	ldr	r3, [r2, #20]
 800aa7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa80:	6981      	ldr	r1, [r0, #24]
 800aa82:	430b      	orrs	r3, r1
 800aa84:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 800aa86:	6802      	ldr	r2, [r0, #0]
 800aa88:	4b13      	ldr	r3, [pc, #76]	@ (800aad8 <UART_SetConfig+0x8c>)
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d020      	beq.n	800aad0 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800aa8e:	f7ff fe65 	bl	800a75c <HAL_RCC_GetPCLK1Freq>
 800aa92:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa94:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800aa98:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800aa9c:	6863      	ldr	r3, [r4, #4]
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	fbb2 f2f3 	udiv	r2, r2, r3
 800aaa4:	480d      	ldr	r0, [pc, #52]	@ (800aadc <UART_SetConfig+0x90>)
 800aaa6:	fba0 3102 	umull	r3, r1, r0, r2
 800aaaa:	0949      	lsrs	r1, r1, #5
 800aaac:	2364      	movs	r3, #100	@ 0x64
 800aaae:	fb03 2311 	mls	r3, r3, r1, r2
 800aab2:	011b      	lsls	r3, r3, #4
 800aab4:	3332      	adds	r3, #50	@ 0x32
 800aab6:	fba0 0303 	umull	r0, r3, r0, r3
 800aaba:	095b      	lsrs	r3, r3, #5
 800aabc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800aac0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800aac4:	f003 030f 	and.w	r3, r3, #15
 800aac8:	6821      	ldr	r1, [r4, #0]
 800aaca:	4413      	add	r3, r2
 800aacc:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 800aace:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800aad0:	f7ff fe54 	bl	800a77c <HAL_RCC_GetPCLK2Freq>
 800aad4:	4602      	mov	r2, r0
 800aad6:	e7dd      	b.n	800aa94 <UART_SetConfig+0x48>
 800aad8:	40013800 	.word	0x40013800
 800aadc:	51eb851f 	.word	0x51eb851f

0800aae0 <UART_WaitOnFlagUntilTimeout>:
{
 800aae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aae4:	b083      	sub	sp, #12
 800aae6:	4605      	mov	r5, r0
 800aae8:	460e      	mov	r6, r1
 800aaea:	4617      	mov	r7, r2
 800aaec:	4699      	mov	r9, r3
 800aaee:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aaf2:	682b      	ldr	r3, [r5, #0]
 800aaf4:	681c      	ldr	r4, [r3, #0]
 800aaf6:	ea36 0404 	bics.w	r4, r6, r4
 800aafa:	bf0c      	ite	eq
 800aafc:	2401      	moveq	r4, #1
 800aafe:	2400      	movne	r4, #0
 800ab00:	42bc      	cmp	r4, r7
 800ab02:	d128      	bne.n	800ab56 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 800ab04:	f1b8 3fff 	cmp.w	r8, #4294967295
 800ab08:	d0f3      	beq.n	800aaf2 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab0a:	f7fd fff1 	bl	8008af0 <HAL_GetTick>
 800ab0e:	eba0 0009 	sub.w	r0, r0, r9
 800ab12:	4540      	cmp	r0, r8
 800ab14:	d823      	bhi.n	800ab5e <UART_WaitOnFlagUntilTimeout+0x7e>
 800ab16:	f1b8 0f00 	cmp.w	r8, #0
 800ab1a:	d022      	beq.n	800ab62 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ab1c:	682b      	ldr	r3, [r5, #0]
 800ab1e:	68da      	ldr	r2, [r3, #12]
 800ab20:	f012 0f04 	tst.w	r2, #4
 800ab24:	d0e5      	beq.n	800aaf2 <UART_WaitOnFlagUntilTimeout+0x12>
 800ab26:	2e80      	cmp	r6, #128	@ 0x80
 800ab28:	d0e3      	beq.n	800aaf2 <UART_WaitOnFlagUntilTimeout+0x12>
 800ab2a:	2e40      	cmp	r6, #64	@ 0x40
 800ab2c:	d0e1      	beq.n	800aaf2 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	f012 0f08 	tst.w	r2, #8
 800ab34:	d0dd      	beq.n	800aaf2 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800ab36:	2400      	movs	r4, #0
 800ab38:	9401      	str	r4, [sp, #4]
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	9201      	str	r2, [sp, #4]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	9301      	str	r3, [sp, #4]
 800ab42:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800ab44:	4628      	mov	r0, r5
 800ab46:	f7ff ff23 	bl	800a990 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ab4a:	2308      	movs	r3, #8
 800ab4c:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 800ab4e:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800ab52:	2001      	movs	r0, #1
 800ab54:	e000      	b.n	800ab58 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 800ab56:	2000      	movs	r0, #0
}
 800ab58:	b003      	add	sp, #12
 800ab5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 800ab5e:	2003      	movs	r0, #3
 800ab60:	e7fa      	b.n	800ab58 <UART_WaitOnFlagUntilTimeout+0x78>
 800ab62:	2003      	movs	r0, #3
 800ab64:	e7f8      	b.n	800ab58 <UART_WaitOnFlagUntilTimeout+0x78>

0800ab66 <HAL_UART_Init>:
  if (huart == NULL)
 800ab66:	b360      	cbz	r0, 800abc2 <HAL_UART_Init+0x5c>
{
 800ab68:	b510      	push	{r4, lr}
 800ab6a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800ab6c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800ab70:	b313      	cbz	r3, 800abb8 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800ab72:	2324      	movs	r3, #36	@ 0x24
 800ab74:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800ab78:	6822      	ldr	r2, [r4, #0]
 800ab7a:	68d3      	ldr	r3, [r2, #12]
 800ab7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ab80:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800ab82:	4620      	mov	r0, r4
 800ab84:	f7ff ff62 	bl	800aa4c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab88:	6822      	ldr	r2, [r4, #0]
 800ab8a:	6913      	ldr	r3, [r2, #16]
 800ab8c:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800ab90:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab92:	6822      	ldr	r2, [r4, #0]
 800ab94:	6953      	ldr	r3, [r2, #20]
 800ab96:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800ab9a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800ab9c:	6822      	ldr	r2, [r4, #0]
 800ab9e:	68d3      	ldr	r3, [r2, #12]
 800aba0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800aba4:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aba6:	2000      	movs	r0, #0
 800aba8:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800abaa:	2320      	movs	r3, #32
 800abac:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800abb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abb4:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800abb6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800abb8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800abbc:	f7fd fe4a 	bl	8008854 <HAL_UART_MspInit>
 800abc0:	e7d7      	b.n	800ab72 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800abc2:	2001      	movs	r0, #1
}
 800abc4:	4770      	bx	lr

0800abc6 <HAL_LIN_Init>:
  if (huart == NULL)
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d03c      	beq.n	800ac44 <HAL_LIN_Init+0x7e>
{
 800abca:	b538      	push	{r3, r4, r5, lr}
 800abcc:	460d      	mov	r5, r1
 800abce:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800abd0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d030      	beq.n	800ac3a <HAL_LIN_Init+0x74>
  huart->gState = HAL_UART_STATE_BUSY;
 800abd8:	2324      	movs	r3, #36	@ 0x24
 800abda:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800abde:	6822      	ldr	r2, [r4, #0]
 800abe0:	68d3      	ldr	r3, [r2, #12]
 800abe2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800abe6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800abe8:	4620      	mov	r0, r4
 800abea:	f7ff ff2f 	bl	800aa4c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 800abee:	6822      	ldr	r2, [r4, #0]
 800abf0:	6913      	ldr	r3, [r2, #16]
 800abf2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800abf6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 800abf8:	6822      	ldr	r2, [r4, #0]
 800abfa:	6953      	ldr	r3, [r2, #20]
 800abfc:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800ac00:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 800ac02:	6822      	ldr	r2, [r4, #0]
 800ac04:	6913      	ldr	r3, [r2, #16]
 800ac06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ac0a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 800ac0c:	6822      	ldr	r2, [r4, #0]
 800ac0e:	6913      	ldr	r3, [r2, #16]
 800ac10:	f023 0320 	bic.w	r3, r3, #32
 800ac14:	6113      	str	r3, [r2, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 800ac16:	6822      	ldr	r2, [r4, #0]
 800ac18:	6913      	ldr	r3, [r2, #16]
 800ac1a:	432b      	orrs	r3, r5
 800ac1c:	6113      	str	r3, [r2, #16]
  __HAL_UART_ENABLE(huart);
 800ac1e:	6822      	ldr	r2, [r4, #0]
 800ac20:	68d3      	ldr	r3, [r2, #12]
 800ac22:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ac26:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac28:	2000      	movs	r0, #0
 800ac2a:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ac2c:	2320      	movs	r3, #32
 800ac2e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ac32:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac36:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800ac38:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 800ac3a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800ac3e:	f7fd fe09 	bl	8008854 <HAL_UART_MspInit>
 800ac42:	e7c9      	b.n	800abd8 <HAL_LIN_Init+0x12>
    return HAL_ERROR;
 800ac44:	2001      	movs	r0, #1
}
 800ac46:	4770      	bx	lr

0800ac48 <HAL_UART_Transmit>:
{
 800ac48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac4c:	b082      	sub	sp, #8
 800ac4e:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800ac50:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b20      	cmp	r3, #32
 800ac58:	d156      	bne.n	800ad08 <HAL_UART_Transmit+0xc0>
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	460d      	mov	r5, r1
 800ac5e:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800ac60:	2900      	cmp	r1, #0
 800ac62:	d055      	beq.n	800ad10 <HAL_UART_Transmit+0xc8>
 800ac64:	b90a      	cbnz	r2, 800ac6a <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 800ac66:	2001      	movs	r0, #1
 800ac68:	e04f      	b.n	800ad0a <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac6e:	2321      	movs	r3, #33	@ 0x21
 800ac70:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800ac74:	f7fd ff3c 	bl	8008af0 <HAL_GetTick>
 800ac78:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800ac7a:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ac7e:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac82:	68a3      	ldr	r3, [r4, #8]
 800ac84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac88:	d002      	beq.n	800ac90 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 800ac8a:	f04f 0800 	mov.w	r8, #0
 800ac8e:	e014      	b.n	800acba <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac90:	6923      	ldr	r3, [r4, #16]
 800ac92:	b32b      	cbz	r3, 800ace0 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800ac94:	f04f 0800 	mov.w	r8, #0
 800ac98:	e00f      	b.n	800acba <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 800ac9a:	2320      	movs	r3, #32
 800ac9c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 800aca0:	2003      	movs	r0, #3
 800aca2:	e032      	b.n	800ad0a <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aca4:	f838 3b02 	ldrh.w	r3, [r8], #2
 800aca8:	6822      	ldr	r2, [r4, #0]
 800acaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acae:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800acb0:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800acb2:	b292      	uxth	r2, r2
 800acb4:	3a01      	subs	r2, #1
 800acb6:	b292      	uxth	r2, r2
 800acb8:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800acba:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	b193      	cbz	r3, 800ace6 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800acc0:	9600      	str	r6, [sp, #0]
 800acc2:	463b      	mov	r3, r7
 800acc4:	2200      	movs	r2, #0
 800acc6:	2180      	movs	r1, #128	@ 0x80
 800acc8:	4620      	mov	r0, r4
 800acca:	f7ff ff09 	bl	800aae0 <UART_WaitOnFlagUntilTimeout>
 800acce:	2800      	cmp	r0, #0
 800acd0:	d1e3      	bne.n	800ac9a <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 800acd2:	2d00      	cmp	r5, #0
 800acd4:	d0e6      	beq.n	800aca4 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800acd6:	f815 2b01 	ldrb.w	r2, [r5], #1
 800acda:	6823      	ldr	r3, [r4, #0]
 800acdc:	605a      	str	r2, [r3, #4]
 800acde:	e7e7      	b.n	800acb0 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 800ace0:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800ace2:	2500      	movs	r5, #0
 800ace4:	e7e9      	b.n	800acba <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ace6:	9600      	str	r6, [sp, #0]
 800ace8:	463b      	mov	r3, r7
 800acea:	2200      	movs	r2, #0
 800acec:	2140      	movs	r1, #64	@ 0x40
 800acee:	4620      	mov	r0, r4
 800acf0:	f7ff fef6 	bl	800aae0 <UART_WaitOnFlagUntilTimeout>
 800acf4:	b918      	cbnz	r0, 800acfe <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 800acf6:	2320      	movs	r3, #32
 800acf8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800acfc:	e005      	b.n	800ad0a <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 800acfe:	2320      	movs	r3, #32
 800ad00:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 800ad04:	2003      	movs	r0, #3
 800ad06:	e000      	b.n	800ad0a <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 800ad08:	2002      	movs	r0, #2
}
 800ad0a:	b002      	add	sp, #8
 800ad0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800ad10:	2001      	movs	r0, #1
 800ad12:	e7fa      	b.n	800ad0a <HAL_UART_Transmit+0xc2>

0800ad14 <HAL_UART_TxCpltCallback>:
}
 800ad14:	4770      	bx	lr

0800ad16 <UART_EndTransmit_IT>:
{
 800ad16:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ad18:	6801      	ldr	r1, [r0, #0]
 800ad1a:	68ca      	ldr	r2, [r1, #12]
 800ad1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ad20:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800ad22:	2220      	movs	r2, #32
 800ad24:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 800ad28:	f7ff fff4 	bl	800ad14 <HAL_UART_TxCpltCallback>
}
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	bd08      	pop	{r3, pc}

0800ad30 <HAL_UART_RxCpltCallback>:
}
 800ad30:	4770      	bx	lr

0800ad32 <HAL_UART_RxHalfCpltCallback>:
}
 800ad32:	4770      	bx	lr

0800ad34 <HAL_UART_ErrorCallback>:
}
 800ad34:	4770      	bx	lr

0800ad36 <UART_DMAError>:
{
 800ad36:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad38:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ad3a:	6823      	ldr	r3, [r4, #0]
 800ad3c:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ad3e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	2b21      	cmp	r3, #33	@ 0x21
 800ad46:	d010      	beq.n	800ad6a <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ad48:	6823      	ldr	r3, [r4, #0]
 800ad4a:	695a      	ldr	r2, [r3, #20]
 800ad4c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ad50:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b22      	cmp	r3, #34	@ 0x22
 800ad58:	d011      	beq.n	800ad7e <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad5a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ad5c:	f043 0310 	orr.w	r3, r3, #16
 800ad60:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 800ad62:	4620      	mov	r0, r4
 800ad64:	f7ff ffe6 	bl	800ad34 <HAL_UART_ErrorCallback>
}
 800ad68:	bd10      	pop	{r4, pc}
 800ad6a:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ad6e:	2a00      	cmp	r2, #0
 800ad70:	d0ea      	beq.n	800ad48 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 800ad72:	2300      	movs	r3, #0
 800ad74:	84e3      	strh	r3, [r4, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800ad76:	4620      	mov	r0, r4
 800ad78:	f7ff fdfa 	bl	800a970 <UART_EndTxTransfer>
 800ad7c:	e7e4      	b.n	800ad48 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ad7e:	2a00      	cmp	r2, #0
 800ad80:	d0eb      	beq.n	800ad5a <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 800ad82:	2300      	movs	r3, #0
 800ad84:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800ad86:	4620      	mov	r0, r4
 800ad88:	f7ff fe02 	bl	800a990 <UART_EndRxTransfer>
 800ad8c:	e7e5      	b.n	800ad5a <UART_DMAError+0x24>

0800ad8e <UART_DMAAbortOnError>:
{
 800ad8e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad90:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 800ad92:	2300      	movs	r3, #0
 800ad94:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800ad96:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 800ad98:	f7ff ffcc 	bl	800ad34 <HAL_UART_ErrorCallback>
}
 800ad9c:	bd08      	pop	{r3, pc}

0800ad9e <HAL_UARTEx_RxEventCallback>:
}
 800ad9e:	4770      	bx	lr

0800ada0 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ada0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	2b22      	cmp	r3, #34	@ 0x22
 800ada8:	d169      	bne.n	800ae7e <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adaa:	6883      	ldr	r3, [r0, #8]
 800adac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adb0:	d04f      	beq.n	800ae52 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800adb2:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800adb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adb8:	d004      	beq.n	800adc4 <UART_Receive_IT+0x24>
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d156      	bne.n	800ae6c <UART_Receive_IT+0xcc>
 800adbe:	6903      	ldr	r3, [r0, #16]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d153      	bne.n	800ae6c <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800adc4:	6803      	ldr	r3, [r0, #0]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800adca:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800adcc:	3301      	adds	r3, #1
 800adce:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 800add0:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800add2:	b29b      	uxth	r3, r3
 800add4:	3b01      	subs	r3, #1
 800add6:	b29b      	uxth	r3, r3
 800add8:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800adda:	2b00      	cmp	r3, #0
 800addc:	d151      	bne.n	800ae82 <UART_Receive_IT+0xe2>
{
 800adde:	b500      	push	{lr}
 800ade0:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ade2:	6802      	ldr	r2, [r0, #0]
 800ade4:	68d3      	ldr	r3, [r2, #12]
 800ade6:	f023 0320 	bic.w	r3, r3, #32
 800adea:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800adec:	6802      	ldr	r2, [r0, #0]
 800adee:	68d3      	ldr	r3, [r2, #12]
 800adf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800adf4:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800adf6:	6802      	ldr	r2, [r0, #0]
 800adf8:	6953      	ldr	r3, [r2, #20]
 800adfa:	f023 0301 	bic.w	r3, r3, #1
 800adfe:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800ae00:	2320      	movs	r3, #32
 800ae02:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae06:	2300      	movs	r3, #0
 800ae08:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae0a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d133      	bne.n	800ae78 <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae10:	2300      	movs	r3, #0
 800ae12:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae14:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae16:	f102 030c 	add.w	r3, r2, #12
 800ae1a:	e853 3f00 	ldrex	r3, [r3]
 800ae1e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae22:	320c      	adds	r2, #12
 800ae24:	e842 3100 	strex	r1, r3, [r2]
 800ae28:	2900      	cmp	r1, #0
 800ae2a:	d1f3      	bne.n	800ae14 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ae2c:	6803      	ldr	r3, [r0, #0]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	f012 0f10 	tst.w	r2, #16
 800ae34:	d006      	beq.n	800ae44 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ae36:	2200      	movs	r2, #0
 800ae38:	9201      	str	r2, [sp, #4]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	9201      	str	r2, [sp, #4]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	9301      	str	r3, [sp, #4]
 800ae42:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae44:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800ae46:	f7ff ffaa 	bl	800ad9e <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 800ae4a:	2000      	movs	r0, #0
}
 800ae4c:	b003      	add	sp, #12
 800ae4e:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae52:	6902      	ldr	r2, [r0, #16]
 800ae54:	2a00      	cmp	r2, #0
 800ae56:	d1ac      	bne.n	800adb2 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ae58:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ae5a:	6803      	ldr	r3, [r0, #0]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae62:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800ae64:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ae66:	3302      	adds	r3, #2
 800ae68:	6283      	str	r3, [r0, #40]	@ 0x28
 800ae6a:	e7b1      	b.n	800add0 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ae6c:	6803      	ldr	r3, [r0, #0]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae74:	7013      	strb	r3, [r2, #0]
 800ae76:	e7a8      	b.n	800adca <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 800ae78:	f7ff ff5a 	bl	800ad30 <HAL_UART_RxCpltCallback>
 800ae7c:	e7e5      	b.n	800ae4a <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 800ae7e:	2002      	movs	r0, #2
 800ae80:	4770      	bx	lr
    return HAL_OK;
 800ae82:	2000      	movs	r0, #0
}
 800ae84:	4770      	bx	lr
	...

0800ae88 <HAL_UART_IRQHandler>:
{
 800ae88:	b510      	push	{r4, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ae8e:	6802      	ldr	r2, [r0, #0]
 800ae90:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae92:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae94:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 800ae96:	f013 0f0f 	tst.w	r3, #15
 800ae9a:	d109      	bne.n	800aeb0 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae9c:	f013 0f20 	tst.w	r3, #32
 800aea0:	d00c      	beq.n	800aebc <HAL_UART_IRQHandler+0x34>
 800aea2:	f010 0f20 	tst.w	r0, #32
 800aea6:	d009      	beq.n	800aebc <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f7ff ff79 	bl	800ada0 <UART_Receive_IT>
      return;
 800aeae:	e016      	b.n	800aede <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800aeb0:	f011 0101 	ands.w	r1, r1, #1
 800aeb4:	d115      	bne.n	800aee2 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aeb6:	f410 7f90 	tst.w	r0, #288	@ 0x120
 800aeba:	d112      	bne.n	800aee2 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aebc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800aebe:	2901      	cmp	r1, #1
 800aec0:	d079      	beq.n	800afb6 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aec2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aec6:	d003      	beq.n	800aed0 <HAL_UART_IRQHandler+0x48>
 800aec8:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800aecc:	f040 8113 	bne.w	800b0f6 <HAL_UART_IRQHandler+0x26e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aed0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800aed4:	d003      	beq.n	800aede <HAL_UART_IRQHandler+0x56>
 800aed6:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800aeda:	f040 8110 	bne.w	800b0fe <HAL_UART_IRQHandler+0x276>
}
 800aede:	b002      	add	sp, #8
 800aee0:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aee2:	f013 0f01 	tst.w	r3, #1
 800aee6:	d006      	beq.n	800aef6 <HAL_UART_IRQHandler+0x6e>
 800aee8:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800aeec:	d003      	beq.n	800aef6 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aeee:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800aef0:	f042 0201 	orr.w	r2, r2, #1
 800aef4:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aef6:	f013 0f04 	tst.w	r3, #4
 800aefa:	d004      	beq.n	800af06 <HAL_UART_IRQHandler+0x7e>
 800aefc:	b119      	cbz	r1, 800af06 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aefe:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800af00:	f042 0202 	orr.w	r2, r2, #2
 800af04:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800af06:	f013 0f02 	tst.w	r3, #2
 800af0a:	d004      	beq.n	800af16 <HAL_UART_IRQHandler+0x8e>
 800af0c:	b119      	cbz	r1, 800af16 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af0e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800af10:	f042 0204 	orr.w	r2, r2, #4
 800af14:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800af16:	f013 0f08 	tst.w	r3, #8
 800af1a:	d007      	beq.n	800af2c <HAL_UART_IRQHandler+0xa4>
 800af1c:	f010 0f20 	tst.w	r0, #32
 800af20:	d100      	bne.n	800af24 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800af22:	b119      	cbz	r1, 800af2c <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af24:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800af26:	f042 0208 	orr.w	r2, r2, #8
 800af2a:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af2c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800af2e:	2a00      	cmp	r2, #0
 800af30:	d0d5      	beq.n	800aede <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af32:	f013 0f20 	tst.w	r3, #32
 800af36:	d002      	beq.n	800af3e <HAL_UART_IRQHandler+0xb6>
 800af38:	f010 0f20 	tst.w	r0, #32
 800af3c:	d129      	bne.n	800af92 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af3e:	6823      	ldr	r3, [r4, #0]
 800af40:	695b      	ldr	r3, [r3, #20]
 800af42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800af46:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800af48:	f012 0f08 	tst.w	r2, #8
 800af4c:	d100      	bne.n	800af50 <HAL_UART_IRQHandler+0xc8>
 800af4e:	b363      	cbz	r3, 800afaa <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 800af50:	4620      	mov	r0, r4
 800af52:	f7ff fd1d 	bl	800a990 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af56:	6823      	ldr	r3, [r4, #0]
 800af58:	695b      	ldr	r3, [r3, #20]
 800af5a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800af5e:	d020      	beq.n	800afa2 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af60:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af62:	f102 0314 	add.w	r3, r2, #20
 800af66:	e853 3f00 	ldrex	r3, [r3]
 800af6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6e:	3214      	adds	r2, #20
 800af70:	e842 3100 	strex	r1, r3, [r2]
 800af74:	2900      	cmp	r1, #0
 800af76:	d1f3      	bne.n	800af60 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 800af78:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800af7a:	b173      	cbz	r3, 800af9a <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af7c:	4a62      	ldr	r2, [pc, #392]	@ (800b108 <HAL_UART_IRQHandler+0x280>)
 800af7e:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af80:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800af82:	f7fe fcf9 	bl	8009978 <HAL_DMA_Abort_IT>
 800af86:	2800      	cmp	r0, #0
 800af88:	d0a9      	beq.n	800aede <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af8a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800af8c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800af8e:	4798      	blx	r3
 800af90:	e7a5      	b.n	800aede <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 800af92:	4620      	mov	r0, r4
 800af94:	f7ff ff04 	bl	800ada0 <UART_Receive_IT>
 800af98:	e7d1      	b.n	800af3e <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 800af9a:	4620      	mov	r0, r4
 800af9c:	f7ff feca 	bl	800ad34 <HAL_UART_ErrorCallback>
 800afa0:	e79d      	b.n	800aede <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 800afa2:	4620      	mov	r0, r4
 800afa4:	f7ff fec6 	bl	800ad34 <HAL_UART_ErrorCallback>
 800afa8:	e799      	b.n	800aede <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 800afaa:	4620      	mov	r0, r4
 800afac:	f7ff fec2 	bl	800ad34 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afb0:	2300      	movs	r3, #0
 800afb2:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 800afb4:	e793      	b.n	800aede <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800afb6:	f013 0f10 	tst.w	r3, #16
 800afba:	d082      	beq.n	800aec2 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800afbc:	f010 0f10 	tst.w	r0, #16
 800afc0:	f43f af7f 	beq.w	800aec2 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800afc4:	2300      	movs	r3, #0
 800afc6:	9301      	str	r3, [sp, #4]
 800afc8:	6813      	ldr	r3, [r2, #0]
 800afca:	9301      	str	r3, [sp, #4]
 800afcc:	6853      	ldr	r3, [r2, #4]
 800afce:	9301      	str	r3, [sp, #4]
 800afd0:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afd2:	6953      	ldr	r3, [r2, #20]
 800afd4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800afd8:	d051      	beq.n	800b07e <HAL_UART_IRQHandler+0x1f6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800afda:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800afdc:	6813      	ldr	r3, [r2, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	f43f af7b 	beq.w	800aede <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800afe8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800afea:	4299      	cmp	r1, r3
 800afec:	f67f af77 	bls.w	800aede <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 800aff0:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aff2:	6993      	ldr	r3, [r2, #24]
 800aff4:	2b20      	cmp	r3, #32
 800aff6:	d037      	beq.n	800b068 <HAL_UART_IRQHandler+0x1e0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aff8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affa:	f102 030c 	add.w	r3, r2, #12
 800affe:	e853 3f00 	ldrex	r3, [r3]
 800b002:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b006:	320c      	adds	r2, #12
 800b008:	e842 3100 	strex	r1, r3, [r2]
 800b00c:	2900      	cmp	r1, #0
 800b00e:	d1f3      	bne.n	800aff8 <HAL_UART_IRQHandler+0x170>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b010:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b012:	f102 0314 	add.w	r3, r2, #20
 800b016:	e853 3f00 	ldrex	r3, [r3]
 800b01a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01e:	3214      	adds	r2, #20
 800b020:	e842 3100 	strex	r1, r3, [r2]
 800b024:	2900      	cmp	r1, #0
 800b026:	d1f3      	bne.n	800b010 <HAL_UART_IRQHandler+0x188>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b028:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02a:	f102 0314 	add.w	r3, r2, #20
 800b02e:	e853 3f00 	ldrex	r3, [r3]
 800b032:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b036:	3214      	adds	r2, #20
 800b038:	e842 3100 	strex	r1, r3, [r2]
 800b03c:	2900      	cmp	r1, #0
 800b03e:	d1f3      	bne.n	800b028 <HAL_UART_IRQHandler+0x1a0>
          huart->RxState = HAL_UART_STATE_READY;
 800b040:	2320      	movs	r3, #32
 800b042:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b046:	2300      	movs	r3, #0
 800b048:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b04a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04c:	f102 030c 	add.w	r3, r2, #12
 800b050:	e853 3f00 	ldrex	r3, [r3]
 800b054:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b058:	320c      	adds	r2, #12
 800b05a:	e842 3100 	strex	r1, r3, [r2]
 800b05e:	2900      	cmp	r1, #0
 800b060:	d1f3      	bne.n	800b04a <HAL_UART_IRQHandler+0x1c2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b062:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800b064:	f7fe fc65 	bl	8009932 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b068:	2302      	movs	r3, #2
 800b06a:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b06c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800b06e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800b070:	b29b      	uxth	r3, r3
 800b072:	1ac9      	subs	r1, r1, r3
 800b074:	b289      	uxth	r1, r1
 800b076:	4620      	mov	r0, r4
 800b078:	f7ff fe91 	bl	800ad9e <HAL_UARTEx_RxEventCallback>
      return;
 800b07c:	e72f      	b.n	800aede <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b07e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800b080:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800b082:	b29b      	uxth	r3, r3
 800b084:	1ac9      	subs	r1, r1, r3
 800b086:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800b088:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f43f af26 	beq.w	800aede <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 800b092:	2900      	cmp	r1, #0
 800b094:	f43f af23 	beq.w	800aede <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b098:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09a:	f102 030c 	add.w	r3, r2, #12
 800b09e:	e853 3f00 	ldrex	r3, [r3]
 800b0a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a6:	320c      	adds	r2, #12
 800b0a8:	e842 3000 	strex	r0, r3, [r2]
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d1f3      	bne.n	800b098 <HAL_UART_IRQHandler+0x210>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0b0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b2:	f102 0314 	add.w	r3, r2, #20
 800b0b6:	e853 3f00 	ldrex	r3, [r3]
 800b0ba:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0be:	3214      	adds	r2, #20
 800b0c0:	e842 3000 	strex	r0, r3, [r2]
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	d1f3      	bne.n	800b0b0 <HAL_UART_IRQHandler+0x228>
        huart->RxState = HAL_UART_STATE_READY;
 800b0c8:	2320      	movs	r3, #32
 800b0ca:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d4:	f102 030c 	add.w	r3, r2, #12
 800b0d8:	e853 3f00 	ldrex	r3, [r3]
 800b0dc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e0:	320c      	adds	r2, #12
 800b0e2:	e842 3000 	strex	r0, r3, [r2]
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d1f3      	bne.n	800b0d2 <HAL_UART_IRQHandler+0x24a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b0ea:	2302      	movs	r3, #2
 800b0ec:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f7ff fe55 	bl	800ad9e <HAL_UARTEx_RxEventCallback>
      return;
 800b0f4:	e6f3      	b.n	800aede <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f7ff fc78 	bl	800a9ec <UART_Transmit_IT>
    return;
 800b0fc:	e6ef      	b.n	800aede <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 800b0fe:	4620      	mov	r0, r4
 800b100:	f7ff fe09 	bl	800ad16 <UART_EndTransmit_IT>
    return;
 800b104:	e6eb      	b.n	800aede <HAL_UART_IRQHandler+0x56>
 800b106:	bf00      	nop
 800b108:	0800ad8f 	.word	0x0800ad8f

0800b10c <UART_DMARxHalfCplt>:
{
 800b10c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b10e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b110:	2301      	movs	r3, #1
 800b112:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b114:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b116:	2b01      	cmp	r3, #1
 800b118:	d002      	beq.n	800b120 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 800b11a:	f7ff fe0a 	bl	800ad32 <HAL_UART_RxHalfCpltCallback>
}
 800b11e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b120:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800b122:	0849      	lsrs	r1, r1, #1
 800b124:	f7ff fe3b 	bl	800ad9e <HAL_UARTEx_RxEventCallback>
 800b128:	e7f9      	b.n	800b11e <UART_DMARxHalfCplt+0x12>

0800b12a <UART_DMAReceiveCplt>:
{
 800b12a:	b508      	push	{r3, lr}
 800b12c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b12e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f013 0f20 	tst.w	r3, #32
 800b138:	d12b      	bne.n	800b192 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 800b13a:	2300      	movs	r3, #0
 800b13c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b13e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b140:	f102 030c 	add.w	r3, r2, #12
 800b144:	e853 3f00 	ldrex	r3, [r3]
 800b148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14c:	320c      	adds	r2, #12
 800b14e:	e842 3100 	strex	r1, r3, [r2]
 800b152:	2900      	cmp	r1, #0
 800b154:	d1f3      	bne.n	800b13e <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b156:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b158:	f102 0314 	add.w	r3, r2, #20
 800b15c:	e853 3f00 	ldrex	r3, [r3]
 800b160:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b164:	3214      	adds	r2, #20
 800b166:	e842 3100 	strex	r1, r3, [r2]
 800b16a:	2900      	cmp	r1, #0
 800b16c:	d1f3      	bne.n	800b156 <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b16e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b170:	f102 0314 	add.w	r3, r2, #20
 800b174:	e853 3f00 	ldrex	r3, [r3]
 800b178:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b17c:	3214      	adds	r2, #20
 800b17e:	e842 3100 	strex	r1, r3, [r2]
 800b182:	2900      	cmp	r1, #0
 800b184:	d1f3      	bne.n	800b16e <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 800b186:	2320      	movs	r3, #32
 800b188:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b18c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d007      	beq.n	800b1a2 <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b192:	2300      	movs	r3, #0
 800b194:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b196:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d00f      	beq.n	800b1bc <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 800b19c:	f7ff fdc8 	bl	800ad30 <HAL_UART_RxCpltCallback>
}
 800b1a0:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1a2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a4:	f102 030c 	add.w	r3, r2, #12
 800b1a8:	e853 3f00 	ldrex	r3, [r3]
 800b1ac:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b0:	320c      	adds	r2, #12
 800b1b2:	e842 3100 	strex	r1, r3, [r2]
 800b1b6:	2900      	cmp	r1, #0
 800b1b8:	d1f3      	bne.n	800b1a2 <UART_DMAReceiveCplt+0x78>
 800b1ba:	e7ea      	b.n	800b192 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1bc:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800b1be:	f7ff fdee 	bl	800ad9e <HAL_UARTEx_RxEventCallback>
 800b1c2:	e7ed      	b.n	800b1a0 <UART_DMAReceiveCplt+0x76>

0800b1c4 <UART_Start_Receive_DMA>:
{
 800b1c4:	b530      	push	{r4, r5, lr}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 800b1cc:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b1ce:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1d0:	2500      	movs	r5, #0
 800b1d2:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1d4:	2222      	movs	r2, #34	@ 0x22
 800b1d6:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b1da:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b1dc:	481f      	ldr	r0, [pc, #124]	@ (800b25c <UART_Start_Receive_DMA+0x98>)
 800b1de:	6290      	str	r0, [r2, #40]	@ 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b1e0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800b1e2:	481f      	ldr	r0, [pc, #124]	@ (800b260 <UART_Start_Receive_DMA+0x9c>)
 800b1e4:	62d0      	str	r0, [r2, #44]	@ 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b1e6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800b1e8:	481e      	ldr	r0, [pc, #120]	@ (800b264 <UART_Start_Receive_DMA+0xa0>)
 800b1ea:	6310      	str	r0, [r2, #48]	@ 0x30
  huart->hdmarx->XferAbortCallback = NULL;
 800b1ec:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800b1ee:	6355      	str	r5, [r2, #52]	@ 0x34
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b1f0:	6820      	ldr	r0, [r4, #0]
 800b1f2:	460a      	mov	r2, r1
 800b1f4:	1d01      	adds	r1, r0, #4
 800b1f6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800b1f8:	f7fe fb60 	bl	80098bc <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b1fc:	9501      	str	r5, [sp, #4]
 800b1fe:	6823      	ldr	r3, [r4, #0]
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	9201      	str	r2, [sp, #4]
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	9301      	str	r3, [sp, #4]
 800b208:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b20a:	6923      	ldr	r3, [r4, #16]
 800b20c:	b15b      	cbz	r3, 800b226 <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b20e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b210:	f102 030c 	add.w	r3, r2, #12
 800b214:	e853 3f00 	ldrex	r3, [r3]
 800b218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b21c:	320c      	adds	r2, #12
 800b21e:	e842 3100 	strex	r1, r3, [r2]
 800b222:	2900      	cmp	r1, #0
 800b224:	d1f3      	bne.n	800b20e <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b226:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b228:	f102 0314 	add.w	r3, r2, #20
 800b22c:	e853 3f00 	ldrex	r3, [r3]
 800b230:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b234:	3214      	adds	r2, #20
 800b236:	e842 3100 	strex	r1, r3, [r2]
 800b23a:	2900      	cmp	r1, #0
 800b23c:	d1f3      	bne.n	800b226 <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b23e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b240:	f102 0314 	add.w	r3, r2, #20
 800b244:	e853 3f00 	ldrex	r3, [r3]
 800b248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b24c:	3214      	adds	r2, #20
 800b24e:	e842 3100 	strex	r1, r3, [r2]
 800b252:	2900      	cmp	r1, #0
 800b254:	d1f3      	bne.n	800b23e <UART_Start_Receive_DMA+0x7a>
}
 800b256:	2000      	movs	r0, #0
 800b258:	b003      	add	sp, #12
 800b25a:	bd30      	pop	{r4, r5, pc}
 800b25c:	0800b12b 	.word	0x0800b12b
 800b260:	0800b10d 	.word	0x0800b10d
 800b264:	0800ad37 	.word	0x0800ad37

0800b268 <HAL_UART_Receive_DMA>:
{
 800b268:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800b26a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	2b20      	cmp	r3, #32
 800b272:	d108      	bne.n	800b286 <HAL_UART_Receive_DMA+0x1e>
    if ((pData == NULL) || (Size == 0U))
 800b274:	b149      	cbz	r1, 800b28a <HAL_UART_Receive_DMA+0x22>
 800b276:	b90a      	cbnz	r2, 800b27c <HAL_UART_Receive_DMA+0x14>
      return HAL_ERROR;
 800b278:	2001      	movs	r0, #1
}
 800b27a:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b27c:	2300      	movs	r3, #0
 800b27e:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b280:	f7ff ffa0 	bl	800b1c4 <UART_Start_Receive_DMA>
 800b284:	e7f9      	b.n	800b27a <HAL_UART_Receive_DMA+0x12>
    return HAL_BUSY;
 800b286:	2002      	movs	r0, #2
 800b288:	e7f7      	b.n	800b27a <HAL_UART_Receive_DMA+0x12>
      return HAL_ERROR;
 800b28a:	2001      	movs	r0, #1
 800b28c:	e7f5      	b.n	800b27a <HAL_UART_Receive_DMA+0x12>

0800b28e <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800b28e:	2884      	cmp	r0, #132	@ 0x84
 800b290:	d001      	beq.n	800b296 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 800b292:	3003      	adds	r0, #3
 800b294:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b296:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 800b298:	4770      	bx	lr

0800b29a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b29a:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800b29c:	f000 fb26 	bl	800b8ec <vTaskStartScheduler>
  
  return osOK;
}
 800b2a0:	2000      	movs	r0, #0
 800b2a2:	bd08      	pop	{r3, pc}

0800b2a4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b2a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2a8:	b087      	sub	sp, #28
 800b2aa:	460e      	mov	r6, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b2ac:	6944      	ldr	r4, [r0, #20]
 800b2ae:	b1c4      	cbz	r4, 800b2e2 <osThreadCreate+0x3e>
 800b2b0:	6985      	ldr	r5, [r0, #24]
 800b2b2:	b1b5      	cbz	r5, 800b2e2 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b2b4:	6847      	ldr	r7, [r0, #4]
 800b2b6:	f8d0 8000 	ldr.w	r8, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b2ba:	f8d0 9010 	ldr.w	r9, [r0, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b2be:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800b2c2:	f7ff ffe4 	bl	800b28e <makeFreeRtosPriority>
 800b2c6:	9502      	str	r5, [sp, #8]
 800b2c8:	9401      	str	r4, [sp, #4]
 800b2ca:	9000      	str	r0, [sp, #0]
 800b2cc:	4633      	mov	r3, r6
 800b2ce:	464a      	mov	r2, r9
 800b2d0:	4641      	mov	r1, r8
 800b2d2:	4638      	mov	r0, r7
 800b2d4:	f000 fa9c 	bl	800b810 <xTaskCreateStatic>
 800b2d8:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b2da:	9805      	ldr	r0, [sp, #20]
}
 800b2dc:	b007      	add	sp, #28
 800b2de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b2e2:	6844      	ldr	r4, [r0, #4]
 800b2e4:	6805      	ldr	r5, [r0, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b2e6:	6907      	ldr	r7, [r0, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b2e8:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800b2ec:	f7ff ffcf 	bl	800b28e <makeFreeRtosPriority>
 800b2f0:	ab05      	add	r3, sp, #20
 800b2f2:	9301      	str	r3, [sp, #4]
 800b2f4:	9000      	str	r0, [sp, #0]
 800b2f6:	4633      	mov	r3, r6
 800b2f8:	b2ba      	uxth	r2, r7
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f000 fac2 	bl	800b886 <xTaskCreate>
 800b302:	2801      	cmp	r0, #1
 800b304:	d0e9      	beq.n	800b2da <osThreadCreate+0x36>
      return NULL;
 800b306:	2000      	movs	r0, #0
 800b308:	e7e8      	b.n	800b2dc <osThreadCreate+0x38>

0800b30a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b30a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b30c:	b900      	cbnz	r0, 800b310 <osDelay+0x6>
 800b30e:	2001      	movs	r0, #1
 800b310:	f000 fc40 	bl	800bb94 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b314:	2000      	movs	r0, #0
 800b316:	bd08      	pop	{r3, pc}

0800b318 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b318:	f100 0308 	add.w	r3, r0, #8
 800b31c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b31e:	f04f 32ff 	mov.w	r2, #4294967295
 800b322:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b324:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b326:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b328:	2300      	movs	r3, #0
 800b32a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b32c:	4770      	bx	lr

0800b32e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b32e:	2300      	movs	r3, #0
 800b330:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b332:	4770      	bx	lr

0800b334 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800b334:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b336:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b338:	689a      	ldr	r2, [r3, #8]
 800b33a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b33c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b33e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b340:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800b342:	6803      	ldr	r3, [r0, #0]
 800b344:	3301      	adds	r3, #1
 800b346:	6003      	str	r3, [r0, #0]
}
 800b348:	4770      	bx	lr

0800b34a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b34a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b34c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b34e:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b352:	d011      	beq.n	800b378 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b354:	f100 0308 	add.w	r3, r0, #8
 800b358:	461c      	mov	r4, r3
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	42aa      	cmp	r2, r5
 800b360:	d9fa      	bls.n	800b358 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b362:	6863      	ldr	r3, [r4, #4]
 800b364:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b366:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b368:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800b36a:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b36c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800b36e:	6803      	ldr	r3, [r0, #0]
 800b370:	3301      	adds	r3, #1
 800b372:	6003      	str	r3, [r0, #0]
}
 800b374:	bc30      	pop	{r4, r5}
 800b376:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800b378:	6904      	ldr	r4, [r0, #16]
 800b37a:	e7f2      	b.n	800b362 <vListInsert+0x18>

0800b37c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b37c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b37e:	6841      	ldr	r1, [r0, #4]
 800b380:	6882      	ldr	r2, [r0, #8]
 800b382:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b384:	6841      	ldr	r1, [r0, #4]
 800b386:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b388:	685a      	ldr	r2, [r3, #4]
 800b38a:	4282      	cmp	r2, r0
 800b38c:	d006      	beq.n	800b39c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b38e:	2200      	movs	r2, #0
 800b390:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	3a01      	subs	r2, #1
 800b396:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b398:	6818      	ldr	r0, [r3, #0]
}
 800b39a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b39c:	6882      	ldr	r2, [r0, #8]
 800b39e:	605a      	str	r2, [r3, #4]
 800b3a0:	e7f5      	b.n	800b38e <uxListRemove+0x12>

0800b3a2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b3a2:	b570      	push	{r4, r5, r6, lr}
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3a8:	6b86      	ldr	r6, [r0, #56]	@ 0x38

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b3aa:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800b3ac:	b95a      	cbnz	r2, 800b3c6 <prvCopyDataToQueue+0x24>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b3ae:	6803      	ldr	r3, [r0, #0]
 800b3b0:	b11b      	cbz	r3, 800b3ba <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800b3b2:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b3b4:	3601      	adds	r6, #1
 800b3b6:	63a6      	str	r6, [r4, #56]	@ 0x38

	return xReturn;
}
 800b3b8:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b3ba:	6880      	ldr	r0, [r0, #8]
 800b3bc:	f000 fcc0 	bl	800bd40 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	60a3      	str	r3, [r4, #8]
 800b3c4:	e7f6      	b.n	800b3b4 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800b3c6:	b96d      	cbnz	r5, 800b3e4 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b3c8:	6840      	ldr	r0, [r0, #4]
 800b3ca:	f002 fc2e 	bl	800dc2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3ce:	6863      	ldr	r3, [r4, #4]
 800b3d0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800b3d2:	4413      	add	r3, r2
 800b3d4:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3d6:	68a2      	ldr	r2, [r4, #8]
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d319      	bcc.n	800b410 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3dc:	6823      	ldr	r3, [r4, #0]
 800b3de:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	e7e7      	b.n	800b3b4 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b3e4:	68c0      	ldr	r0, [r0, #12]
 800b3e6:	f002 fc20 	bl	800dc2a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b3ea:	68e3      	ldr	r3, [r4, #12]
 800b3ec:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800b3ee:	4251      	negs	r1, r2
 800b3f0:	1a9b      	subs	r3, r3, r2
 800b3f2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3f4:	6822      	ldr	r2, [r4, #0]
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d202      	bcs.n	800b400 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b3fa:	68a3      	ldr	r3, [r4, #8]
 800b3fc:	440b      	add	r3, r1
 800b3fe:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800b400:	2d02      	cmp	r5, #2
 800b402:	d001      	beq.n	800b408 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800b404:	2000      	movs	r0, #0
 800b406:	e7d5      	b.n	800b3b4 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b408:	b126      	cbz	r6, 800b414 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800b40a:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800b40c:	2000      	movs	r0, #0
 800b40e:	e7d1      	b.n	800b3b4 <prvCopyDataToQueue+0x12>
 800b410:	4628      	mov	r0, r5
 800b412:	e7cf      	b.n	800b3b4 <prvCopyDataToQueue+0x12>
 800b414:	2000      	movs	r0, #0
 800b416:	e7cd      	b.n	800b3b4 <prvCopyDataToQueue+0x12>

0800b418 <xQueueGenericSendFromISR>:
{
 800b418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800b41c:	b190      	cbz	r0, 800b444 <xQueueGenericSendFromISR+0x2c>
 800b41e:	460f      	mov	r7, r1
 800b420:	4616      	mov	r6, r2
 800b422:	461c      	mov	r4, r3
 800b424:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b426:	b1b1      	cbz	r1, 800b456 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b428:	2c02      	cmp	r4, #2
 800b42a:	d120      	bne.n	800b46e <xQueueGenericSendFromISR+0x56>
 800b42c:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d01d      	beq.n	800b46e <xQueueGenericSendFromISR+0x56>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b436:	f383 8811 	msr	BASEPRI, r3
 800b43a:	f3bf 8f6f 	isb	sy
 800b43e:	f3bf 8f4f 	dsb	sy
 800b442:	e7fe      	b.n	800b442 <xQueueGenericSendFromISR+0x2a>
 800b444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b448:	f383 8811 	msr	BASEPRI, r3
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	e7fe      	b.n	800b454 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b456:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d0e5      	beq.n	800b428 <xQueueGenericSendFromISR+0x10>
 800b45c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b460:	f383 8811 	msr	BASEPRI, r3
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	e7fe      	b.n	800b46c <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b46e:	f000 fe03 	bl	800c078 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b472:	f3ef 8811 	mrs	r8, BASEPRI
 800b476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b47a:	f383 8811 	msr	BASEPRI, r3
 800b47e:	f3bf 8f6f 	isb	sy
 800b482:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b486:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 800b488:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d306      	bcc.n	800b49c <xQueueGenericSendFromISR+0x84>
 800b48e:	2c02      	cmp	r4, #2
 800b490:	d004      	beq.n	800b49c <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800b492:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b494:	f388 8811 	msr	BASEPRI, r8
}
 800b498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800b49c:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 800b4a0:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4a4:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b4a6:	4622      	mov	r2, r4
 800b4a8:	4639      	mov	r1, r7
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	f7ff ff79 	bl	800b3a2 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800b4b0:	f1b9 3fff 	cmp.w	r9, #4294967295
 800b4b4:	d006      	beq.n	800b4c4 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b4b6:	f109 0301 	add.w	r3, r9, #1
 800b4ba:	b25b      	sxtb	r3, r3
 800b4bc:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800b4c0:	2001      	movs	r0, #1
 800b4c2:	e7e7      	b.n	800b494 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b4c4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800b4c6:	b90b      	cbnz	r3, 800b4cc <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800b4c8:	2001      	movs	r0, #1
 800b4ca:	e7e3      	b.n	800b494 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4cc:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800b4d0:	f000 fbe0 	bl	800bc94 <xTaskRemoveFromEventList>
 800b4d4:	b118      	cbz	r0, 800b4de <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800b4d6:	b126      	cbz	r6, 800b4e2 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b4d8:	2001      	movs	r0, #1
 800b4da:	6030      	str	r0, [r6, #0]
 800b4dc:	e7da      	b.n	800b494 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800b4de:	2001      	movs	r0, #1
 800b4e0:	e7d8      	b.n	800b494 <xQueueGenericSendFromISR+0x7c>
 800b4e2:	2001      	movs	r0, #1
 800b4e4:	e7d6      	b.n	800b494 <xQueueGenericSendFromISR+0x7c>
	...

0800b4e8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4e8:	4b08      	ldr	r3, [pc, #32]	@ (800b50c <prvResetNextTaskUnblockTime+0x24>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	b923      	cbnz	r3, 800b4fa <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b4f0:	4b07      	ldr	r3, [pc, #28]	@ (800b510 <prvResetNextTaskUnblockTime+0x28>)
 800b4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b4f6:	601a      	str	r2, [r3, #0]
 800b4f8:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4fa:	4b04      	ldr	r3, [pc, #16]	@ (800b50c <prvResetNextTaskUnblockTime+0x24>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b502:	685a      	ldr	r2, [r3, #4]
 800b504:	4b02      	ldr	r3, [pc, #8]	@ (800b510 <prvResetNextTaskUnblockTime+0x28>)
 800b506:	601a      	str	r2, [r3, #0]
	}
}
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	20006bfc 	.word	0x20006bfc
 800b510:	20006b94 	.word	0x20006b94

0800b514 <prvInitialiseNewTask>:
{
 800b514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b518:	4680      	mov	r8, r0
 800b51a:	460d      	mov	r5, r1
 800b51c:	4617      	mov	r7, r2
 800b51e:	4699      	mov	r9, r3
 800b520:	9e08      	ldr	r6, [sp, #32]
 800b522:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 800b526:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b528:	0092      	lsls	r2, r2, #2
 800b52a:	21a5      	movs	r1, #165	@ 0xa5
 800b52c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800b52e:	f002 faef 	bl	800db10 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b532:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b534:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 800b538:	3a01      	subs	r2, #1
 800b53a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b53e:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800b542:	b3a5      	cbz	r5, 800b5ae <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b544:	f04f 0c00 	mov.w	ip, #0
 800b548:	f1bc 0f0f 	cmp.w	ip, #15
 800b54c:	d809      	bhi.n	800b562 <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b54e:	f815 300c 	ldrb.w	r3, [r5, ip]
 800b552:	eb04 020c 	add.w	r2, r4, ip
 800b556:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800b55a:	b113      	cbz	r3, 800b562 <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b55c:	f10c 0c01 	add.w	ip, ip, #1
 800b560:	e7f2      	b.n	800b548 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b562:	2300      	movs	r3, #0
 800b564:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b568:	2e06      	cmp	r6, #6
 800b56a:	d900      	bls.n	800b56e <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b56c:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 800b56e:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800b570:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b572:	2500      	movs	r5, #0
 800b574:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b576:	1d20      	adds	r0, r4, #4
 800b578:	f7ff fed9 	bl	800b32e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b57c:	f104 0018 	add.w	r0, r4, #24
 800b580:	f7ff fed5 	bl	800b32e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b584:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b586:	f1c6 0607 	rsb	r6, r6, #7
 800b58a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b58c:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800b58e:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b590:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b594:	464a      	mov	r2, r9
 800b596:	4641      	mov	r1, r8
 800b598:	4638      	mov	r0, r7
 800b59a:	f000 fc59 	bl	800be50 <pxPortInitialiseStack>
 800b59e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800b5a0:	f1ba 0f00 	cmp.w	sl, #0
 800b5a4:	d001      	beq.n	800b5aa <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b5a6:	f8ca 4000 	str.w	r4, [sl]
}
 800b5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800b5b4:	e7d8      	b.n	800b568 <prvInitialiseNewTask+0x54>
	...

0800b5b8 <prvInitialiseTaskLists>:
{
 800b5b8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5ba:	2400      	movs	r4, #0
 800b5bc:	e007      	b.n	800b5ce <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b5be:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800b5c2:	0093      	lsls	r3, r2, #2
 800b5c4:	480e      	ldr	r0, [pc, #56]	@ (800b600 <prvInitialiseTaskLists+0x48>)
 800b5c6:	4418      	add	r0, r3
 800b5c8:	f7ff fea6 	bl	800b318 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5cc:	3401      	adds	r4, #1
 800b5ce:	2c06      	cmp	r4, #6
 800b5d0:	d9f5      	bls.n	800b5be <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800b5d2:	4d0c      	ldr	r5, [pc, #48]	@ (800b604 <prvInitialiseTaskLists+0x4c>)
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	f7ff fe9f 	bl	800b318 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b5da:	4c0b      	ldr	r4, [pc, #44]	@ (800b608 <prvInitialiseTaskLists+0x50>)
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f7ff fe9b 	bl	800b318 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b5e2:	480a      	ldr	r0, [pc, #40]	@ (800b60c <prvInitialiseTaskLists+0x54>)
 800b5e4:	f7ff fe98 	bl	800b318 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800b5e8:	4809      	ldr	r0, [pc, #36]	@ (800b610 <prvInitialiseTaskLists+0x58>)
 800b5ea:	f7ff fe95 	bl	800b318 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800b5ee:	4809      	ldr	r0, [pc, #36]	@ (800b614 <prvInitialiseTaskLists+0x5c>)
 800b5f0:	f7ff fe92 	bl	800b318 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800b5f4:	4b08      	ldr	r3, [pc, #32]	@ (800b618 <prvInitialiseTaskLists+0x60>)
 800b5f6:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b5f8:	4b08      	ldr	r3, [pc, #32]	@ (800b61c <prvInitialiseTaskLists+0x64>)
 800b5fa:	601c      	str	r4, [r3, #0]
}
 800b5fc:	bd38      	pop	{r3, r4, r5, pc}
 800b5fe:	bf00      	nop
 800b600:	20006c28 	.word	0x20006c28
 800b604:	20006c14 	.word	0x20006c14
 800b608:	20006c00 	.word	0x20006c00
 800b60c:	20006be4 	.word	0x20006be4
 800b610:	20006bd0 	.word	0x20006bd0
 800b614:	20006bb8 	.word	0x20006bb8
 800b618:	20006bfc 	.word	0x20006bfc
 800b61c:	20006bf8 	.word	0x20006bf8

0800b620 <prvAddNewTaskToReadyList>:
{
 800b620:	b510      	push	{r4, lr}
 800b622:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800b624:	f000 fc3e 	bl	800bea4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800b628:	4a22      	ldr	r2, [pc, #136]	@ (800b6b4 <prvAddNewTaskToReadyList+0x94>)
 800b62a:	6813      	ldr	r3, [r2, #0]
 800b62c:	3301      	adds	r3, #1
 800b62e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b630:	4b21      	ldr	r3, [pc, #132]	@ (800b6b8 <prvAddNewTaskToReadyList+0x98>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	b15b      	cbz	r3, 800b64e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800b636:	4b21      	ldr	r3, [pc, #132]	@ (800b6bc <prvAddNewTaskToReadyList+0x9c>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	b96b      	cbnz	r3, 800b658 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b63c:	4b1e      	ldr	r3, [pc, #120]	@ (800b6b8 <prvAddNewTaskToReadyList+0x98>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b642:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b644:	429a      	cmp	r2, r3
 800b646:	d807      	bhi.n	800b658 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800b648:	4b1b      	ldr	r3, [pc, #108]	@ (800b6b8 <prvAddNewTaskToReadyList+0x98>)
 800b64a:	601c      	str	r4, [r3, #0]
 800b64c:	e004      	b.n	800b658 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800b64e:	4b1a      	ldr	r3, [pc, #104]	@ (800b6b8 <prvAddNewTaskToReadyList+0x98>)
 800b650:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b652:	6813      	ldr	r3, [r2, #0]
 800b654:	2b01      	cmp	r3, #1
 800b656:	d029      	beq.n	800b6ac <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800b658:	4a19      	ldr	r2, [pc, #100]	@ (800b6c0 <prvAddNewTaskToReadyList+0xa0>)
 800b65a:	6813      	ldr	r3, [r2, #0]
 800b65c:	3301      	adds	r3, #1
 800b65e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b660:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800b662:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800b664:	2301      	movs	r3, #1
 800b666:	4083      	lsls	r3, r0
 800b668:	4a16      	ldr	r2, [pc, #88]	@ (800b6c4 <prvAddNewTaskToReadyList+0xa4>)
 800b66a:	6811      	ldr	r1, [r2, #0]
 800b66c:	430b      	orrs	r3, r1
 800b66e:	6013      	str	r3, [r2, #0]
 800b670:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b674:	1d21      	adds	r1, r4, #4
 800b676:	4b14      	ldr	r3, [pc, #80]	@ (800b6c8 <prvAddNewTaskToReadyList+0xa8>)
 800b678:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b67c:	f7ff fe5a 	bl	800b334 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800b680:	f000 fc32 	bl	800bee8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800b684:	4b0d      	ldr	r3, [pc, #52]	@ (800b6bc <prvAddNewTaskToReadyList+0x9c>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	b17b      	cbz	r3, 800b6aa <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b68a:	4b0b      	ldr	r3, [pc, #44]	@ (800b6b8 <prvAddNewTaskToReadyList+0x98>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b690:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b692:	429a      	cmp	r2, r3
 800b694:	d209      	bcs.n	800b6aa <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800b696:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b69a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b69e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	f3bf 8f6f 	isb	sy
}
 800b6aa:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800b6ac:	f7ff ff84 	bl	800b5b8 <prvInitialiseTaskLists>
 800b6b0:	e7d2      	b.n	800b658 <prvAddNewTaskToReadyList+0x38>
 800b6b2:	bf00      	nop
 800b6b4:	20006bb4 	.word	0x20006bb4
 800b6b8:	20006cb4 	.word	0x20006cb4
 800b6bc:	20006ba8 	.word	0x20006ba8
 800b6c0:	20006b98 	.word	0x20006b98
 800b6c4:	20006bac 	.word	0x20006bac
 800b6c8:	20006c28 	.word	0x20006c28

0800b6cc <prvDeleteTCB>:
	{
 800b6cc:	b510      	push	{r4, lr}
 800b6ce:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b6d0:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 800b6d4:	b163      	cbz	r3, 800b6f0 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d011      	beq.n	800b6fe <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b6da:	2b02      	cmp	r3, #2
 800b6dc:	d00e      	beq.n	800b6fc <prvDeleteTCB+0x30>
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	e7fe      	b.n	800b6ee <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 800b6f0:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800b6f2:	f000 fddd 	bl	800c2b0 <vPortFree>
				vPortFree( pxTCB );
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f000 fdda 	bl	800c2b0 <vPortFree>
	}
 800b6fc:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800b6fe:	f000 fdd7 	bl	800c2b0 <vPortFree>
 800b702:	e7fb      	b.n	800b6fc <prvDeleteTCB+0x30>

0800b704 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b704:	4b0f      	ldr	r3, [pc, #60]	@ (800b744 <prvCheckTasksWaitingTermination+0x40>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	b1d3      	cbz	r3, 800b740 <prvCheckTasksWaitingTermination+0x3c>
{
 800b70a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800b70c:	f000 fbca 	bl	800bea4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b710:	4b0d      	ldr	r3, [pc, #52]	@ (800b748 <prvCheckTasksWaitingTermination+0x44>)
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b716:	1d20      	adds	r0, r4, #4
 800b718:	f7ff fe30 	bl	800b37c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b71c:	4a0b      	ldr	r2, [pc, #44]	@ (800b74c <prvCheckTasksWaitingTermination+0x48>)
 800b71e:	6813      	ldr	r3, [r2, #0]
 800b720:	3b01      	subs	r3, #1
 800b722:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b724:	4a07      	ldr	r2, [pc, #28]	@ (800b744 <prvCheckTasksWaitingTermination+0x40>)
 800b726:	6813      	ldr	r3, [r2, #0]
 800b728:	3b01      	subs	r3, #1
 800b72a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800b72c:	f000 fbdc 	bl	800bee8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800b730:	4620      	mov	r0, r4
 800b732:	f7ff ffcb 	bl	800b6cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b736:	4b03      	ldr	r3, [pc, #12]	@ (800b744 <prvCheckTasksWaitingTermination+0x40>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1e6      	bne.n	800b70c <prvCheckTasksWaitingTermination+0x8>
}
 800b73e:	bd10      	pop	{r4, pc}
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	20006bcc 	.word	0x20006bcc
 800b748:	20006bd0 	.word	0x20006bd0
 800b74c:	20006bb4 	.word	0x20006bb4

0800b750 <prvIdleTask>:
{
 800b750:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800b752:	f7ff ffd7 	bl	800b704 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b756:	4b07      	ldr	r3, [pc, #28]	@ (800b774 <prvIdleTask+0x24>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d9f9      	bls.n	800b752 <prvIdleTask+0x2>
				taskYIELD();
 800b75e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b766:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b76a:	f3bf 8f4f 	dsb	sy
 800b76e:	f3bf 8f6f 	isb	sy
 800b772:	e7ee      	b.n	800b752 <prvIdleTask+0x2>
 800b774:	20006c28 	.word	0x20006c28

0800b778 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b778:	b570      	push	{r4, r5, r6, lr}
 800b77a:	4604      	mov	r4, r0
 800b77c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b77e:	4b1d      	ldr	r3, [pc, #116]	@ (800b7f4 <prvAddCurrentTaskToDelayedList+0x7c>)
 800b780:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b782:	4b1d      	ldr	r3, [pc, #116]	@ (800b7f8 <prvAddCurrentTaskToDelayedList+0x80>)
 800b784:	6818      	ldr	r0, [r3, #0]
 800b786:	3004      	adds	r0, #4
 800b788:	f7ff fdf8 	bl	800b37c <uxListRemove>
 800b78c:	b948      	cbnz	r0, 800b7a2 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b78e:	4b1a      	ldr	r3, [pc, #104]	@ (800b7f8 <prvAddCurrentTaskToDelayedList+0x80>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b794:	2201      	movs	r2, #1
 800b796:	409a      	lsls	r2, r3
 800b798:	4918      	ldr	r1, [pc, #96]	@ (800b7fc <prvAddCurrentTaskToDelayedList+0x84>)
 800b79a:	680b      	ldr	r3, [r1, #0]
 800b79c:	ea23 0302 	bic.w	r3, r3, r2
 800b7a0:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b7a2:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b7a6:	d00d      	beq.n	800b7c4 <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b7a8:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b7aa:	4b13      	ldr	r3, [pc, #76]	@ (800b7f8 <prvAddCurrentTaskToDelayedList+0x80>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800b7b0:	42a6      	cmp	r6, r4
 800b7b2:	d910      	bls.n	800b7d6 <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7b4:	4b12      	ldr	r3, [pc, #72]	@ (800b800 <prvAddCurrentTaskToDelayedList+0x88>)
 800b7b6:	6818      	ldr	r0, [r3, #0]
 800b7b8:	4b0f      	ldr	r3, [pc, #60]	@ (800b7f8 <prvAddCurrentTaskToDelayedList+0x80>)
 800b7ba:	6819      	ldr	r1, [r3, #0]
 800b7bc:	3104      	adds	r1, #4
 800b7be:	f7ff fdc4 	bl	800b34a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b7c2:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b7c4:	2d00      	cmp	r5, #0
 800b7c6:	d0ef      	beq.n	800b7a8 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7c8:	4b0b      	ldr	r3, [pc, #44]	@ (800b7f8 <prvAddCurrentTaskToDelayedList+0x80>)
 800b7ca:	6819      	ldr	r1, [r3, #0]
 800b7cc:	3104      	adds	r1, #4
 800b7ce:	480d      	ldr	r0, [pc, #52]	@ (800b804 <prvAddCurrentTaskToDelayedList+0x8c>)
 800b7d0:	f7ff fdb0 	bl	800b334 <vListInsertEnd>
 800b7d4:	e7f5      	b.n	800b7c2 <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7d6:	4b0c      	ldr	r3, [pc, #48]	@ (800b808 <prvAddCurrentTaskToDelayedList+0x90>)
 800b7d8:	6818      	ldr	r0, [r3, #0]
 800b7da:	4b07      	ldr	r3, [pc, #28]	@ (800b7f8 <prvAddCurrentTaskToDelayedList+0x80>)
 800b7dc:	6819      	ldr	r1, [r3, #0]
 800b7de:	3104      	adds	r1, #4
 800b7e0:	f7ff fdb3 	bl	800b34a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b7e4:	4b09      	ldr	r3, [pc, #36]	@ (800b80c <prvAddCurrentTaskToDelayedList+0x94>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	42a3      	cmp	r3, r4
 800b7ea:	d9ea      	bls.n	800b7c2 <prvAddCurrentTaskToDelayedList+0x4a>
					xNextTaskUnblockTime = xTimeToWake;
 800b7ec:	4b07      	ldr	r3, [pc, #28]	@ (800b80c <prvAddCurrentTaskToDelayedList+0x94>)
 800b7ee:	601c      	str	r4, [r3, #0]
}
 800b7f0:	e7e7      	b.n	800b7c2 <prvAddCurrentTaskToDelayedList+0x4a>
 800b7f2:	bf00      	nop
 800b7f4:	20006bb0 	.word	0x20006bb0
 800b7f8:	20006cb4 	.word	0x20006cb4
 800b7fc:	20006bac 	.word	0x20006bac
 800b800:	20006bf8 	.word	0x20006bf8
 800b804:	20006bb8 	.word	0x20006bb8
 800b808:	20006bfc 	.word	0x20006bfc
 800b80c:	20006b94 	.word	0x20006b94

0800b810 <xTaskCreateStatic>:
	{
 800b810:	b530      	push	{r4, r5, lr}
 800b812:	b087      	sub	sp, #28
 800b814:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800b816:	b17c      	cbz	r4, 800b838 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b818:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800b81a:	b1b5      	cbz	r5, 800b84a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800b81c:	255c      	movs	r5, #92	@ 0x5c
 800b81e:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b820:	9d04      	ldr	r5, [sp, #16]
 800b822:	2d5c      	cmp	r5, #92	@ 0x5c
 800b824:	d01a      	beq.n	800b85c <xTaskCreateStatic+0x4c>
 800b826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b82a:	f383 8811 	msr	BASEPRI, r3
 800b82e:	f3bf 8f6f 	isb	sy
 800b832:	f3bf 8f4f 	dsb	sy
 800b836:	e7fe      	b.n	800b836 <xTaskCreateStatic+0x26>
 800b838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b83c:	f383 8811 	msr	BASEPRI, r3
 800b840:	f3bf 8f6f 	isb	sy
 800b844:	f3bf 8f4f 	dsb	sy
 800b848:	e7fe      	b.n	800b848 <xTaskCreateStatic+0x38>
 800b84a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b84e:	f383 8811 	msr	BASEPRI, r3
 800b852:	f3bf 8f6f 	isb	sy
 800b856:	f3bf 8f4f 	dsb	sy
 800b85a:	e7fe      	b.n	800b85a <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b85c:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b85e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800b860:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b862:	2402      	movs	r4, #2
 800b864:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b868:	2400      	movs	r4, #0
 800b86a:	9403      	str	r4, [sp, #12]
 800b86c:	9502      	str	r5, [sp, #8]
 800b86e:	ac05      	add	r4, sp, #20
 800b870:	9401      	str	r4, [sp, #4]
 800b872:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b874:	9400      	str	r4, [sp, #0]
 800b876:	f7ff fe4d 	bl	800b514 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b87a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800b87c:	f7ff fed0 	bl	800b620 <prvAddNewTaskToReadyList>
	}
 800b880:	9805      	ldr	r0, [sp, #20]
 800b882:	b007      	add	sp, #28
 800b884:	bd30      	pop	{r4, r5, pc}

0800b886 <xTaskCreate>:
	{
 800b886:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b88a:	b085      	sub	sp, #20
 800b88c:	4607      	mov	r7, r0
 800b88e:	4688      	mov	r8, r1
 800b890:	4614      	mov	r4, r2
 800b892:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b894:	0090      	lsls	r0, r2, #2
 800b896:	f000 fc7f 	bl	800c198 <pvPortMalloc>
			if( pxStack != NULL )
 800b89a:	b308      	cbz	r0, 800b8e0 <xTaskCreate+0x5a>
 800b89c:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b89e:	205c      	movs	r0, #92	@ 0x5c
 800b8a0:	f000 fc7a 	bl	800c198 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	b1a8      	cbz	r0, 800b8d4 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800b8a8:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b8b2:	9303      	str	r3, [sp, #12]
 800b8b4:	9002      	str	r0, [sp, #8]
 800b8b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8b8:	9301      	str	r3, [sp, #4]
 800b8ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	4633      	mov	r3, r6
 800b8c0:	4622      	mov	r2, r4
 800b8c2:	4641      	mov	r1, r8
 800b8c4:	4638      	mov	r0, r7
 800b8c6:	f7ff fe25 	bl	800b514 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	f7ff fea8 	bl	800b620 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b8d0:	2001      	movs	r0, #1
 800b8d2:	e007      	b.n	800b8e4 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800b8d4:	4648      	mov	r0, r9
 800b8d6:	f000 fceb 	bl	800c2b0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b8da:	f04f 30ff 	mov.w	r0, #4294967295
 800b8de:	e001      	b.n	800b8e4 <xTaskCreate+0x5e>
 800b8e0:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800b8e4:	b005      	add	sp, #20
 800b8e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800b8ec <vTaskStartScheduler>:
{
 800b8ec:	b510      	push	{r4, lr}
 800b8ee:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b8f0:	2400      	movs	r4, #0
 800b8f2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b8f4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b8f6:	aa07      	add	r2, sp, #28
 800b8f8:	a906      	add	r1, sp, #24
 800b8fa:	a805      	add	r0, sp, #20
 800b8fc:	f7fc fcd6 	bl	80082ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b900:	9b05      	ldr	r3, [sp, #20]
 800b902:	9302      	str	r3, [sp, #8]
 800b904:	9b06      	ldr	r3, [sp, #24]
 800b906:	9301      	str	r3, [sp, #4]
 800b908:	9400      	str	r4, [sp, #0]
 800b90a:	4623      	mov	r3, r4
 800b90c:	9a07      	ldr	r2, [sp, #28]
 800b90e:	490e      	ldr	r1, [pc, #56]	@ (800b948 <vTaskStartScheduler+0x5c>)
 800b910:	480e      	ldr	r0, [pc, #56]	@ (800b94c <vTaskStartScheduler+0x60>)
 800b912:	f7ff ff7d 	bl	800b810 <xTaskCreateStatic>
 800b916:	4b0e      	ldr	r3, [pc, #56]	@ (800b950 <vTaskStartScheduler+0x64>)
 800b918:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800b91a:	b190      	cbz	r0, 800b942 <vTaskStartScheduler+0x56>
 800b91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b920:	f383 8811 	msr	BASEPRI, r3
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800b92c:	4b09      	ldr	r3, [pc, #36]	@ (800b954 <vTaskStartScheduler+0x68>)
 800b92e:	f04f 32ff 	mov.w	r2, #4294967295
 800b932:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b934:	4b08      	ldr	r3, [pc, #32]	@ (800b958 <vTaskStartScheduler+0x6c>)
 800b936:	2201      	movs	r2, #1
 800b938:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b93a:	4b08      	ldr	r3, [pc, #32]	@ (800b95c <vTaskStartScheduler+0x70>)
 800b93c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800b93e:	f000 fb3b 	bl	800bfb8 <xPortStartScheduler>
}
 800b942:	b008      	add	sp, #32
 800b944:	bd10      	pop	{r4, pc}
 800b946:	bf00      	nop
 800b948:	08012a78 	.word	0x08012a78
 800b94c:	0800b751 	.word	0x0800b751
 800b950:	20006b90 	.word	0x20006b90
 800b954:	20006b94 	.word	0x20006b94
 800b958:	20006ba8 	.word	0x20006ba8
 800b95c:	20006bb0 	.word	0x20006bb0

0800b960 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800b960:	4a02      	ldr	r2, [pc, #8]	@ (800b96c <vTaskSuspendAll+0xc>)
 800b962:	6813      	ldr	r3, [r2, #0]
 800b964:	3301      	adds	r3, #1
 800b966:	6013      	str	r3, [r2, #0]
}
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop
 800b96c:	20006b8c 	.word	0x20006b8c

0800b970 <xTaskIncrementTick>:
{
 800b970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b972:	4b3f      	ldr	r3, [pc, #252]	@ (800ba70 <xTaskIncrementTick+0x100>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d170      	bne.n	800ba5c <xTaskIncrementTick+0xec>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b97a:	4b3e      	ldr	r3, [pc, #248]	@ (800ba74 <xTaskIncrementTick+0x104>)
 800b97c:	681d      	ldr	r5, [r3, #0]
 800b97e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800b980:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b982:	b9c5      	cbnz	r5, 800b9b6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800b984:	4b3c      	ldr	r3, [pc, #240]	@ (800ba78 <xTaskIncrementTick+0x108>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	b143      	cbz	r3, 800b99e <xTaskIncrementTick+0x2e>
 800b98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	e7fe      	b.n	800b99c <xTaskIncrementTick+0x2c>
 800b99e:	4a36      	ldr	r2, [pc, #216]	@ (800ba78 <xTaskIncrementTick+0x108>)
 800b9a0:	6811      	ldr	r1, [r2, #0]
 800b9a2:	4b36      	ldr	r3, [pc, #216]	@ (800ba7c <xTaskIncrementTick+0x10c>)
 800b9a4:	6818      	ldr	r0, [r3, #0]
 800b9a6:	6010      	str	r0, [r2, #0]
 800b9a8:	6019      	str	r1, [r3, #0]
 800b9aa:	4a35      	ldr	r2, [pc, #212]	@ (800ba80 <xTaskIncrementTick+0x110>)
 800b9ac:	6813      	ldr	r3, [r2, #0]
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	6013      	str	r3, [r2, #0]
 800b9b2:	f7ff fd99 	bl	800b4e8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b9b6:	4b33      	ldr	r3, [pc, #204]	@ (800ba84 <xTaskIncrementTick+0x114>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	42ab      	cmp	r3, r5
 800b9bc:	d941      	bls.n	800ba42 <xTaskIncrementTick+0xd2>
BaseType_t xSwitchRequired = pdFALSE;
 800b9be:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b9c0:	4b31      	ldr	r3, [pc, #196]	@ (800ba88 <xTaskIncrementTick+0x118>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b9ca:	009a      	lsls	r2, r3, #2
 800b9cc:	4b2f      	ldr	r3, [pc, #188]	@ (800ba8c <xTaskIncrementTick+0x11c>)
 800b9ce:	589b      	ldr	r3, [r3, r2]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d900      	bls.n	800b9d6 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800b9d4:	2701      	movs	r7, #1
			if( xPendedTicks == ( TickType_t ) 0 )
 800b9d6:	4b2e      	ldr	r3, [pc, #184]	@ (800ba90 <xTaskIncrementTick+0x120>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d03b      	beq.n	800ba56 <xTaskIncrementTick+0xe6>
			if( xYieldPending != pdFALSE )
 800b9de:	4b2d      	ldr	r3, [pc, #180]	@ (800ba94 <xTaskIncrementTick+0x124>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d041      	beq.n	800ba6a <xTaskIncrementTick+0xfa>
				xSwitchRequired = pdTRUE;
 800b9e6:	2701      	movs	r7, #1
	return xSwitchRequired;
 800b9e8:	e03f      	b.n	800ba6a <xTaskIncrementTick+0xfa>
							xSwitchRequired = pdTRUE;
 800b9ea:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9ec:	4b22      	ldr	r3, [pc, #136]	@ (800ba78 <xTaskIncrementTick+0x108>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	b343      	cbz	r3, 800ba46 <xTaskIncrementTick+0xd6>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9f4:	4b20      	ldr	r3, [pc, #128]	@ (800ba78 <xTaskIncrementTick+0x108>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b9fc:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800b9fe:	429d      	cmp	r5, r3
 800ba00:	d326      	bcc.n	800ba50 <xTaskIncrementTick+0xe0>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba02:	1d26      	adds	r6, r4, #4
 800ba04:	4630      	mov	r0, r6
 800ba06:	f7ff fcb9 	bl	800b37c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba0a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ba0c:	b11b      	cbz	r3, 800ba16 <xTaskIncrementTick+0xa6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba0e:	f104 0018 	add.w	r0, r4, #24
 800ba12:	f7ff fcb3 	bl	800b37c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba16:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ba18:	2201      	movs	r2, #1
 800ba1a:	409a      	lsls	r2, r3
 800ba1c:	491e      	ldr	r1, [pc, #120]	@ (800ba98 <xTaskIncrementTick+0x128>)
 800ba1e:	6808      	ldr	r0, [r1, #0]
 800ba20:	4302      	orrs	r2, r0
 800ba22:	600a      	str	r2, [r1, #0]
 800ba24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ba28:	009a      	lsls	r2, r3, #2
 800ba2a:	4631      	mov	r1, r6
 800ba2c:	4817      	ldr	r0, [pc, #92]	@ (800ba8c <xTaskIncrementTick+0x11c>)
 800ba2e:	4410      	add	r0, r2
 800ba30:	f7ff fc80 	bl	800b334 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba34:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ba36:	4b14      	ldr	r3, [pc, #80]	@ (800ba88 <xTaskIncrementTick+0x118>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d2d4      	bcs.n	800b9ea <xTaskIncrementTick+0x7a>
 800ba40:	e7d4      	b.n	800b9ec <xTaskIncrementTick+0x7c>
BaseType_t xSwitchRequired = pdFALSE;
 800ba42:	2700      	movs	r7, #0
 800ba44:	e7d2      	b.n	800b9ec <xTaskIncrementTick+0x7c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba46:	4b0f      	ldr	r3, [pc, #60]	@ (800ba84 <xTaskIncrementTick+0x114>)
 800ba48:	f04f 32ff 	mov.w	r2, #4294967295
 800ba4c:	601a      	str	r2, [r3, #0]
					break;
 800ba4e:	e7b7      	b.n	800b9c0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800ba50:	4a0c      	ldr	r2, [pc, #48]	@ (800ba84 <xTaskIncrementTick+0x114>)
 800ba52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba54:	e7b4      	b.n	800b9c0 <xTaskIncrementTick+0x50>
				vApplicationTickHook();
 800ba56:	f7fc fc25 	bl	80082a4 <vApplicationTickHook>
 800ba5a:	e7c0      	b.n	800b9de <xTaskIncrementTick+0x6e>
		++xPendedTicks;
 800ba5c:	4a0c      	ldr	r2, [pc, #48]	@ (800ba90 <xTaskIncrementTick+0x120>)
 800ba5e:	6813      	ldr	r3, [r2, #0]
 800ba60:	3301      	adds	r3, #1
 800ba62:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
 800ba64:	f7fc fc1e 	bl	80082a4 <vApplicationTickHook>
BaseType_t xSwitchRequired = pdFALSE;
 800ba68:	2700      	movs	r7, #0
}
 800ba6a:	4638      	mov	r0, r7
 800ba6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	20006b8c 	.word	0x20006b8c
 800ba74:	20006bb0 	.word	0x20006bb0
 800ba78:	20006bfc 	.word	0x20006bfc
 800ba7c:	20006bf8 	.word	0x20006bf8
 800ba80:	20006b9c 	.word	0x20006b9c
 800ba84:	20006b94 	.word	0x20006b94
 800ba88:	20006cb4 	.word	0x20006cb4
 800ba8c:	20006c28 	.word	0x20006c28
 800ba90:	20006ba4 	.word	0x20006ba4
 800ba94:	20006ba0 	.word	0x20006ba0
 800ba98:	20006bac 	.word	0x20006bac

0800ba9c <xTaskResumeAll>:
{
 800ba9c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800ba9e:	4b35      	ldr	r3, [pc, #212]	@ (800bb74 <xTaskResumeAll+0xd8>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	b943      	cbnz	r3, 800bab6 <xTaskResumeAll+0x1a>
 800baa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa8:	f383 8811 	msr	BASEPRI, r3
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	e7fe      	b.n	800bab4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800bab6:	f000 f9f5 	bl	800bea4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800baba:	4b2e      	ldr	r3, [pc, #184]	@ (800bb74 <xTaskResumeAll+0xd8>)
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	3a01      	subs	r2, #1
 800bac0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d14f      	bne.n	800bb68 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bac8:	4b2b      	ldr	r3, [pc, #172]	@ (800bb78 <xTaskResumeAll+0xdc>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	b90b      	cbnz	r3, 800bad2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800bace:	2400      	movs	r4, #0
 800bad0:	e04b      	b.n	800bb6a <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800bad2:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bad4:	4b29      	ldr	r3, [pc, #164]	@ (800bb7c <xTaskResumeAll+0xe0>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	b31b      	cbz	r3, 800bb22 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bada:	4b28      	ldr	r3, [pc, #160]	@ (800bb7c <xTaskResumeAll+0xe0>)
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bae0:	f104 0018 	add.w	r0, r4, #24
 800bae4:	f7ff fc4a 	bl	800b37c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bae8:	1d25      	adds	r5, r4, #4
 800baea:	4628      	mov	r0, r5
 800baec:	f7ff fc46 	bl	800b37c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800baf0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800baf2:	2301      	movs	r3, #1
 800baf4:	4083      	lsls	r3, r0
 800baf6:	4a22      	ldr	r2, [pc, #136]	@ (800bb80 <xTaskResumeAll+0xe4>)
 800baf8:	6811      	ldr	r1, [r2, #0]
 800bafa:	430b      	orrs	r3, r1
 800bafc:	6013      	str	r3, [r2, #0]
 800bafe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800bb02:	4629      	mov	r1, r5
 800bb04:	4b1f      	ldr	r3, [pc, #124]	@ (800bb84 <xTaskResumeAll+0xe8>)
 800bb06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bb0a:	f7ff fc13 	bl	800b334 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb0e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800bb10:	4b1d      	ldr	r3, [pc, #116]	@ (800bb88 <xTaskResumeAll+0xec>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d3dc      	bcc.n	800bad4 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800bb1a:	4b1c      	ldr	r3, [pc, #112]	@ (800bb8c <xTaskResumeAll+0xf0>)
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	601a      	str	r2, [r3, #0]
 800bb20:	e7d8      	b.n	800bad4 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800bb22:	b10c      	cbz	r4, 800bb28 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800bb24:	f7ff fce0 	bl	800b4e8 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bb28:	4b19      	ldr	r3, [pc, #100]	@ (800bb90 <xTaskResumeAll+0xf4>)
 800bb2a:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800bb2c:	b984      	cbnz	r4, 800bb50 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800bb2e:	4b17      	ldr	r3, [pc, #92]	@ (800bb8c <xTaskResumeAll+0xf0>)
 800bb30:	681c      	ldr	r4, [r3, #0]
 800bb32:	b1d4      	cbz	r4, 800bb6a <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800bb34:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bb38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb3c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bb40:	f3bf 8f4f 	dsb	sy
 800bb44:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800bb48:	2401      	movs	r4, #1
 800bb4a:	e00e      	b.n	800bb6a <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bb4c:	3c01      	subs	r4, #1
 800bb4e:	d007      	beq.n	800bb60 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800bb50:	f7ff ff0e 	bl	800b970 <xTaskIncrementTick>
 800bb54:	2800      	cmp	r0, #0
 800bb56:	d0f9      	beq.n	800bb4c <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800bb58:	4b0c      	ldr	r3, [pc, #48]	@ (800bb8c <xTaskResumeAll+0xf0>)
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	601a      	str	r2, [r3, #0]
 800bb5e:	e7f5      	b.n	800bb4c <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800bb60:	4b0b      	ldr	r3, [pc, #44]	@ (800bb90 <xTaskResumeAll+0xf4>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	601a      	str	r2, [r3, #0]
 800bb66:	e7e2      	b.n	800bb2e <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800bb68:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800bb6a:	f000 f9bd 	bl	800bee8 <vPortExitCritical>
}
 800bb6e:	4620      	mov	r0, r4
 800bb70:	bd38      	pop	{r3, r4, r5, pc}
 800bb72:	bf00      	nop
 800bb74:	20006b8c 	.word	0x20006b8c
 800bb78:	20006bb4 	.word	0x20006bb4
 800bb7c:	20006be4 	.word	0x20006be4
 800bb80:	20006bac 	.word	0x20006bac
 800bb84:	20006c28 	.word	0x20006c28
 800bb88:	20006cb4 	.word	0x20006cb4
 800bb8c:	20006ba0 	.word	0x20006ba0
 800bb90:	20006ba4 	.word	0x20006ba4

0800bb94 <vTaskDelay>:
	{
 800bb94:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb96:	b1a8      	cbz	r0, 800bbc4 <vTaskDelay+0x30>
 800bb98:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800bb9a:	4b10      	ldr	r3, [pc, #64]	@ (800bbdc <vTaskDelay+0x48>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	b143      	cbz	r3, 800bbb2 <vTaskDelay+0x1e>
 800bba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba4:	f383 8811 	msr	BASEPRI, r3
 800bba8:	f3bf 8f6f 	isb	sy
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	e7fe      	b.n	800bbb0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800bbb2:	f7ff fed5 	bl	800b960 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	4620      	mov	r0, r4
 800bbba:	f7ff fddd 	bl	800b778 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800bbbe:	f7ff ff6d 	bl	800ba9c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800bbc2:	b948      	cbnz	r0, 800bbd8 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800bbc4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bbc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbcc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bbd0:	f3bf 8f4f 	dsb	sy
 800bbd4:	f3bf 8f6f 	isb	sy
	}
 800bbd8:	bd10      	pop	{r4, pc}
 800bbda:	bf00      	nop
 800bbdc:	20006b8c 	.word	0x20006b8c

0800bbe0 <vTaskSwitchContext>:
{
 800bbe0:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bbe2:	4b27      	ldr	r3, [pc, #156]	@ (800bc80 <vTaskSwitchContext+0xa0>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	b11b      	cbz	r3, 800bbf0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800bbe8:	4b26      	ldr	r3, [pc, #152]	@ (800bc84 <vTaskSwitchContext+0xa4>)
 800bbea:	2201      	movs	r2, #1
 800bbec:	601a      	str	r2, [r3, #0]
}
 800bbee:	bd08      	pop	{r3, pc}
		xYieldPending = pdFALSE;
 800bbf0:	4b24      	ldr	r3, [pc, #144]	@ (800bc84 <vTaskSwitchContext+0xa4>)
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800bbf6:	4b24      	ldr	r3, [pc, #144]	@ (800bc88 <vTaskSwitchContext+0xa8>)
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	6812      	ldr	r2, [r2, #0]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d915      	bls.n	800bc30 <vTaskSwitchContext+0x50>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc04:	4b21      	ldr	r3, [pc, #132]	@ (800bc8c <vTaskSwitchContext+0xac>)
 800bc06:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bc08:	fab3 f383 	clz	r3, r3
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	f1c3 031f 	rsb	r3, r3, #31
 800bc12:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800bc16:	008a      	lsls	r2, r1, #2
 800bc18:	491d      	ldr	r1, [pc, #116]	@ (800bc90 <vTaskSwitchContext+0xb0>)
 800bc1a:	588a      	ldr	r2, [r1, r2]
 800bc1c:	b97a      	cbnz	r2, 800bc3e <vTaskSwitchContext+0x5e>
	__asm volatile
 800bc1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc22:	f383 8811 	msr	BASEPRI, r3
 800bc26:	f3bf 8f6f 	isb	sy
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	e7fe      	b.n	800bc2e <vTaskSwitchContext+0x4e>
		taskCHECK_FOR_STACK_OVERFLOW();
 800bc30:	4b15      	ldr	r3, [pc, #84]	@ (800bc88 <vTaskSwitchContext+0xa8>)
 800bc32:	6818      	ldr	r0, [r3, #0]
 800bc34:	6819      	ldr	r1, [r3, #0]
 800bc36:	3134      	adds	r1, #52	@ 0x34
 800bc38:	f7fc fb35 	bl	80082a6 <vApplicationStackOverflowHook>
 800bc3c:	e7e2      	b.n	800bc04 <vTaskSwitchContext+0x24>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc3e:	4814      	ldr	r0, [pc, #80]	@ (800bc90 <vTaskSwitchContext+0xb0>)
 800bc40:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800bc44:	008a      	lsls	r2, r1, #2
 800bc46:	4402      	add	r2, r0
 800bc48:	6851      	ldr	r1, [r2, #4]
 800bc4a:	6849      	ldr	r1, [r1, #4]
 800bc4c:	6051      	str	r1, [r2, #4]
 800bc4e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800bc52:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800bc56:	3208      	adds	r2, #8
 800bc58:	4402      	add	r2, r0
 800bc5a:	4291      	cmp	r1, r2
 800bc5c:	d009      	beq.n	800bc72 <vTaskSwitchContext+0x92>
 800bc5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800bc62:	009a      	lsls	r2, r3, #2
 800bc64:	4b0a      	ldr	r3, [pc, #40]	@ (800bc90 <vTaskSwitchContext+0xb0>)
 800bc66:	4413      	add	r3, r2
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	68da      	ldr	r2, [r3, #12]
 800bc6c:	4b06      	ldr	r3, [pc, #24]	@ (800bc88 <vTaskSwitchContext+0xa8>)
 800bc6e:	601a      	str	r2, [r3, #0]
}
 800bc70:	e7bd      	b.n	800bbee <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc72:	6848      	ldr	r0, [r1, #4]
 800bc74:	4662      	mov	r2, ip
 800bc76:	0091      	lsls	r1, r2, #2
 800bc78:	4a05      	ldr	r2, [pc, #20]	@ (800bc90 <vTaskSwitchContext+0xb0>)
 800bc7a:	440a      	add	r2, r1
 800bc7c:	6050      	str	r0, [r2, #4]
 800bc7e:	e7ee      	b.n	800bc5e <vTaskSwitchContext+0x7e>
 800bc80:	20006b8c 	.word	0x20006b8c
 800bc84:	20006ba0 	.word	0x20006ba0
 800bc88:	20006cb4 	.word	0x20006cb4
 800bc8c:	20006bac 	.word	0x20006bac
 800bc90:	20006c28 	.word	0x20006c28

0800bc94 <xTaskRemoveFromEventList>:
{
 800bc94:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc96:	68c3      	ldr	r3, [r0, #12]
 800bc98:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800bc9a:	b324      	cbz	r4, 800bce6 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bc9c:	f104 0518 	add.w	r5, r4, #24
 800bca0:	4628      	mov	r0, r5
 800bca2:	f7ff fb6b 	bl	800b37c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bca6:	4b18      	ldr	r3, [pc, #96]	@ (800bd08 <xTaskRemoveFromEventList+0x74>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	bb2b      	cbnz	r3, 800bcf8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bcac:	1d25      	adds	r5, r4, #4
 800bcae:	4628      	mov	r0, r5
 800bcb0:	f7ff fb64 	bl	800b37c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bcb4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	4083      	lsls	r3, r0
 800bcba:	4a14      	ldr	r2, [pc, #80]	@ (800bd0c <xTaskRemoveFromEventList+0x78>)
 800bcbc:	6811      	ldr	r1, [r2, #0]
 800bcbe:	430b      	orrs	r3, r1
 800bcc0:	6013      	str	r3, [r2, #0]
 800bcc2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800bcc6:	4629      	mov	r1, r5
 800bcc8:	4b11      	ldr	r3, [pc, #68]	@ (800bd10 <xTaskRemoveFromEventList+0x7c>)
 800bcca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bcce:	f7ff fb31 	bl	800b334 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bcd2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800bcd4:	4b0f      	ldr	r3, [pc, #60]	@ (800bd14 <xTaskRemoveFromEventList+0x80>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d911      	bls.n	800bd02 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800bcde:	2001      	movs	r0, #1
 800bce0:	4b0d      	ldr	r3, [pc, #52]	@ (800bd18 <xTaskRemoveFromEventList+0x84>)
 800bce2:	6018      	str	r0, [r3, #0]
}
 800bce4:	bd38      	pop	{r3, r4, r5, pc}
 800bce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcea:	f383 8811 	msr	BASEPRI, r3
 800bcee:	f3bf 8f6f 	isb	sy
 800bcf2:	f3bf 8f4f 	dsb	sy
 800bcf6:	e7fe      	b.n	800bcf6 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bcf8:	4629      	mov	r1, r5
 800bcfa:	4808      	ldr	r0, [pc, #32]	@ (800bd1c <xTaskRemoveFromEventList+0x88>)
 800bcfc:	f7ff fb1a 	bl	800b334 <vListInsertEnd>
 800bd00:	e7e7      	b.n	800bcd2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800bd02:	2000      	movs	r0, #0
	return xReturn;
 800bd04:	e7ee      	b.n	800bce4 <xTaskRemoveFromEventList+0x50>
 800bd06:	bf00      	nop
 800bd08:	20006b8c 	.word	0x20006b8c
 800bd0c:	20006bac 	.word	0x20006bac
 800bd10:	20006c28 	.word	0x20006c28
 800bd14:	20006cb4 	.word	0x20006cb4
 800bd18:	20006ba0 	.word	0x20006ba0
 800bd1c:	20006be4 	.word	0x20006be4

0800bd20 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800bd20:	4b05      	ldr	r3, [pc, #20]	@ (800bd38 <xTaskGetSchedulerState+0x18>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	b133      	cbz	r3, 800bd34 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd26:	4b05      	ldr	r3, [pc, #20]	@ (800bd3c <xTaskGetSchedulerState+0x1c>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	b10b      	cbz	r3, 800bd30 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd2c:	2000      	movs	r0, #0
	}
 800bd2e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800bd30:	2002      	movs	r0, #2
 800bd32:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd34:	2001      	movs	r0, #1
 800bd36:	4770      	bx	lr
 800bd38:	20006ba8 	.word	0x20006ba8
 800bd3c:	20006b8c 	.word	0x20006b8c

0800bd40 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800bd40:	2800      	cmp	r0, #0
 800bd42:	d04b      	beq.n	800bddc <xTaskPriorityDisinherit+0x9c>
	{
 800bd44:	b538      	push	{r3, r4, r5, lr}
 800bd46:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800bd48:	4b26      	ldr	r3, [pc, #152]	@ (800bde4 <xTaskPriorityDisinherit+0xa4>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4283      	cmp	r3, r0
 800bd4e:	d008      	beq.n	800bd62 <xTaskPriorityDisinherit+0x22>
 800bd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd54:	f383 8811 	msr	BASEPRI, r3
 800bd58:	f3bf 8f6f 	isb	sy
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	e7fe      	b.n	800bd60 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd62:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800bd64:	b943      	cbnz	r3, 800bd78 <xTaskPriorityDisinherit+0x38>
 800bd66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd6a:	f383 8811 	msr	BASEPRI, r3
 800bd6e:	f3bf 8f6f 	isb	sy
 800bd72:	f3bf 8f4f 	dsb	sy
 800bd76:	e7fe      	b.n	800bd76 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800bd78:	3b01      	subs	r3, #1
 800bd7a:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd7c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800bd7e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800bd80:	4291      	cmp	r1, r2
 800bd82:	d02d      	beq.n	800bde0 <xTaskPriorityDisinherit+0xa0>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd84:	b10b      	cbz	r3, 800bd8a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800bd86:	2000      	movs	r0, #0
	}
 800bd88:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd8a:	1d05      	adds	r5, r0, #4
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	f7ff faf5 	bl	800b37c <uxListRemove>
 800bd92:	b968      	cbnz	r0, 800bdb0 <xTaskPriorityDisinherit+0x70>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bd94:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800bd96:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800bd9a:	0092      	lsls	r2, r2, #2
 800bd9c:	4912      	ldr	r1, [pc, #72]	@ (800bde8 <xTaskPriorityDisinherit+0xa8>)
 800bd9e:	588a      	ldr	r2, [r1, r2]
 800bda0:	b932      	cbnz	r2, 800bdb0 <xTaskPriorityDisinherit+0x70>
 800bda2:	2201      	movs	r2, #1
 800bda4:	409a      	lsls	r2, r3
 800bda6:	4911      	ldr	r1, [pc, #68]	@ (800bdec <xTaskPriorityDisinherit+0xac>)
 800bda8:	680b      	ldr	r3, [r1, #0]
 800bdaa:	ea23 0302 	bic.w	r3, r3, r2
 800bdae:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bdb0:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800bdb2:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdb4:	f1c0 0307 	rsb	r3, r0, #7
 800bdb8:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800bdba:	2401      	movs	r4, #1
 800bdbc:	fa04 f300 	lsl.w	r3, r4, r0
 800bdc0:	4a0a      	ldr	r2, [pc, #40]	@ (800bdec <xTaskPriorityDisinherit+0xac>)
 800bdc2:	6811      	ldr	r1, [r2, #0]
 800bdc4:	430b      	orrs	r3, r1
 800bdc6:	6013      	str	r3, [r2, #0]
 800bdc8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800bdcc:	4629      	mov	r1, r5
 800bdce:	4b06      	ldr	r3, [pc, #24]	@ (800bde8 <xTaskPriorityDisinherit+0xa8>)
 800bdd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bdd4:	f7ff faae 	bl	800b334 <vListInsertEnd>
					xReturn = pdTRUE;
 800bdd8:	4620      	mov	r0, r4
 800bdda:	e7d5      	b.n	800bd88 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800bddc:	2000      	movs	r0, #0
	}
 800bdde:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800bde0:	2000      	movs	r0, #0
 800bde2:	e7d1      	b.n	800bd88 <xTaskPriorityDisinherit+0x48>
 800bde4:	20006cb4 	.word	0x20006cb4
 800bde8:	20006c28 	.word	0x20006c28
 800bdec:	20006bac 	.word	0x20006bac

0800bdf0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bdf0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bdf6:	4b0d      	ldr	r3, [pc, #52]	@ (800be2c <prvTaskExitError+0x3c>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdfe:	d008      	beq.n	800be12 <prvTaskExitError+0x22>
 800be00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be04:	f383 8811 	msr	BASEPRI, r3
 800be08:	f3bf 8f6f 	isb	sy
 800be0c:	f3bf 8f4f 	dsb	sy
 800be10:	e7fe      	b.n	800be10 <prvTaskExitError+0x20>
 800be12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be16:	f383 8811 	msr	BASEPRI, r3
 800be1a:	f3bf 8f6f 	isb	sy
 800be1e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be22:	9b01      	ldr	r3, [sp, #4]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d0fc      	beq.n	800be22 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800be28:	b002      	add	sp, #8
 800be2a:	4770      	bx	lr
 800be2c:	2000438c 	.word	0x2000438c

0800be30 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800be30:	4806      	ldr	r0, [pc, #24]	@ (800be4c <prvPortStartFirstTask+0x1c>)
 800be32:	6800      	ldr	r0, [r0, #0]
 800be34:	6800      	ldr	r0, [r0, #0]
 800be36:	f380 8808 	msr	MSP, r0
 800be3a:	b662      	cpsie	i
 800be3c:	b661      	cpsie	f
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	df00      	svc	0
 800be48:	bf00      	nop
 800be4a:	0000      	.short	0x0000
 800be4c:	e000ed08 	.word	0xe000ed08

0800be50 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800be54:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be58:	f021 0101 	bic.w	r1, r1, #1
 800be5c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800be60:	4b03      	ldr	r3, [pc, #12]	@ (800be70 <pxPortInitialiseStack+0x20>)
 800be62:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800be66:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800be6a:	3840      	subs	r0, #64	@ 0x40
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop
 800be70:	0800bdf1 	.word	0x0800bdf1
	...

0800be80 <SVC_Handler>:
	__asm volatile (
 800be80:	4b07      	ldr	r3, [pc, #28]	@ (800bea0 <pxCurrentTCBConst2>)
 800be82:	6819      	ldr	r1, [r3, #0]
 800be84:	6808      	ldr	r0, [r1, #0]
 800be86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800be8a:	f380 8809 	msr	PSP, r0
 800be8e:	f3bf 8f6f 	isb	sy
 800be92:	f04f 0000 	mov.w	r0, #0
 800be96:	f380 8811 	msr	BASEPRI, r0
 800be9a:	f04e 0e0d 	orr.w	lr, lr, #13
 800be9e:	4770      	bx	lr

0800bea0 <pxCurrentTCBConst2>:
 800bea0:	20006cb4 	.word	0x20006cb4

0800bea4 <vPortEnterCritical>:
 800bea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea8:	f383 8811 	msr	BASEPRI, r3
 800beac:	f3bf 8f6f 	isb	sy
 800beb0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800beb4:	4a0b      	ldr	r2, [pc, #44]	@ (800bee4 <vPortEnterCritical+0x40>)
 800beb6:	6813      	ldr	r3, [r2, #0]
 800beb8:	3301      	adds	r3, #1
 800beba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d000      	beq.n	800bec2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800bec0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bec2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bec6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800beca:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800bece:	d0f7      	beq.n	800bec0 <vPortEnterCritical+0x1c>
 800bed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed4:	f383 8811 	msr	BASEPRI, r3
 800bed8:	f3bf 8f6f 	isb	sy
 800bedc:	f3bf 8f4f 	dsb	sy
 800bee0:	e7fe      	b.n	800bee0 <vPortEnterCritical+0x3c>
 800bee2:	bf00      	nop
 800bee4:	2000438c 	.word	0x2000438c

0800bee8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800bee8:	4b09      	ldr	r3, [pc, #36]	@ (800bf10 <vPortExitCritical+0x28>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	b943      	cbnz	r3, 800bf00 <vPortExitCritical+0x18>
 800beee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef2:	f383 8811 	msr	BASEPRI, r3
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	f3bf 8f4f 	dsb	sy
 800befe:	e7fe      	b.n	800befe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800bf00:	3b01      	subs	r3, #1
 800bf02:	4a03      	ldr	r2, [pc, #12]	@ (800bf10 <vPortExitCritical+0x28>)
 800bf04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf06:	b90b      	cbnz	r3, 800bf0c <vPortExitCritical+0x24>
	__asm volatile
 800bf08:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	2000438c 	.word	0x2000438c
	...

0800bf20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bf20:	f3ef 8009 	mrs	r0, PSP
 800bf24:	f3bf 8f6f 	isb	sy
 800bf28:	4b0d      	ldr	r3, [pc, #52]	@ (800bf60 <pxCurrentTCBConst>)
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bf30:	6010      	str	r0, [r2, #0]
 800bf32:	e92d 4008 	stmdb	sp!, {r3, lr}
 800bf36:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bf3a:	f380 8811 	msr	BASEPRI, r0
 800bf3e:	f7ff fe4f 	bl	800bbe0 <vTaskSwitchContext>
 800bf42:	f04f 0000 	mov.w	r0, #0
 800bf46:	f380 8811 	msr	BASEPRI, r0
 800bf4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bf4e:	6819      	ldr	r1, [r3, #0]
 800bf50:	6808      	ldr	r0, [r1, #0]
 800bf52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bf56:	f380 8809 	msr	PSP, r0
 800bf5a:	f3bf 8f6f 	isb	sy
 800bf5e:	4770      	bx	lr

0800bf60 <pxCurrentTCBConst>:
 800bf60:	20006cb4 	.word	0x20006cb4

0800bf64 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf64:	b508      	push	{r3, lr}
	__asm volatile
 800bf66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf6a:	f383 8811 	msr	BASEPRI, r3
 800bf6e:	f3bf 8f6f 	isb	sy
 800bf72:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf76:	f7ff fcfb 	bl	800b970 <xTaskIncrementTick>
 800bf7a:	b128      	cbz	r0, 800bf88 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf7c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bf80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf84:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800bf88:	2300      	movs	r3, #0
 800bf8a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf8e:	bd08      	pop	{r3, pc}

0800bf90 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf90:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800bf94:	2300      	movs	r3, #0
 800bf96:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf98:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf9a:	4b05      	ldr	r3, [pc, #20]	@ (800bfb0 <vPortSetupTimerInterrupt+0x20>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	4905      	ldr	r1, [pc, #20]	@ (800bfb4 <vPortSetupTimerInterrupt+0x24>)
 800bfa0:	fba1 1303 	umull	r1, r3, r1, r3
 800bfa4:	099b      	lsrs	r3, r3, #6
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bfaa:	2307      	movs	r3, #7
 800bfac:	6113      	str	r3, [r2, #16]
}
 800bfae:	4770      	bx	lr
 800bfb0:	20004380 	.word	0x20004380
 800bfb4:	10624dd3 	.word	0x10624dd3

0800bfb8 <xPortStartScheduler>:
{
 800bfb8:	b510      	push	{r4, lr}
 800bfba:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bfbc:	4b2a      	ldr	r3, [pc, #168]	@ (800c068 <xPortStartScheduler+0xb0>)
 800bfbe:	781a      	ldrb	r2, [r3, #0]
 800bfc0:	b2d2      	uxtb	r2, r2
 800bfc2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bfc4:	22ff      	movs	r2, #255	@ 0xff
 800bfc6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bfd0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bfd4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bfd8:	4a24      	ldr	r2, [pc, #144]	@ (800c06c <xPortStartScheduler+0xb4>)
 800bfda:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bfdc:	4b24      	ldr	r3, [pc, #144]	@ (800c070 <xPortStartScheduler+0xb8>)
 800bfde:	2207      	movs	r2, #7
 800bfe0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfe2:	e009      	b.n	800bff8 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 800bfe4:	4a22      	ldr	r2, [pc, #136]	@ (800c070 <xPortStartScheduler+0xb8>)
 800bfe6:	6813      	ldr	r3, [r2, #0]
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bfec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bff0:	005b      	lsls	r3, r3, #1
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bff8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bffc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c000:	d1f0      	bne.n	800bfe4 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c002:	4b1b      	ldr	r3, [pc, #108]	@ (800c070 <xPortStartScheduler+0xb8>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	2b03      	cmp	r3, #3
 800c008:	d008      	beq.n	800c01c <xPortStartScheduler+0x64>
	__asm volatile
 800c00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c00e:	f383 8811 	msr	BASEPRI, r3
 800c012:	f3bf 8f6f 	isb	sy
 800c016:	f3bf 8f4f 	dsb	sy
 800c01a:	e7fe      	b.n	800c01a <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c01c:	021b      	lsls	r3, r3, #8
 800c01e:	4a14      	ldr	r2, [pc, #80]	@ (800c070 <xPortStartScheduler+0xb8>)
 800c020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c022:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c026:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c028:	9b01      	ldr	r3, [sp, #4]
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	4a0e      	ldr	r2, [pc, #56]	@ (800c068 <xPortStartScheduler+0xb0>)
 800c02e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c030:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c034:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 800c038:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800c03c:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c040:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 800c044:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 800c048:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800c04c:	f7ff ffa0 	bl	800bf90 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800c050:	2400      	movs	r4, #0
 800c052:	4b08      	ldr	r3, [pc, #32]	@ (800c074 <xPortStartScheduler+0xbc>)
 800c054:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 800c056:	f7ff feeb 	bl	800be30 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800c05a:	f7ff fdc1 	bl	800bbe0 <vTaskSwitchContext>
	prvTaskExitError();
 800c05e:	f7ff fec7 	bl	800bdf0 <prvTaskExitError>
}
 800c062:	4620      	mov	r0, r4
 800c064:	b002      	add	sp, #8
 800c066:	bd10      	pop	{r4, pc}
 800c068:	e000e400 	.word	0xe000e400
 800c06c:	20006cbc 	.word	0x20006cbc
 800c070:	20006cb8 	.word	0x20006cb8
 800c074:	2000438c 	.word	0x2000438c

0800c078 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c078:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c07c:	2b0f      	cmp	r3, #15
 800c07e:	d90f      	bls.n	800c0a0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c080:	4a11      	ldr	r2, [pc, #68]	@ (800c0c8 <vPortValidateInterruptPriority+0x50>)
 800c082:	5c9b      	ldrb	r3, [r3, r2]
 800c084:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c086:	4a11      	ldr	r2, [pc, #68]	@ (800c0cc <vPortValidateInterruptPriority+0x54>)
 800c088:	7812      	ldrb	r2, [r2, #0]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d908      	bls.n	800c0a0 <vPortValidateInterruptPriority+0x28>
 800c08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c092:	f383 8811 	msr	BASEPRI, r3
 800c096:	f3bf 8f6f 	isb	sy
 800c09a:	f3bf 8f4f 	dsb	sy
 800c09e:	e7fe      	b.n	800c09e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c0a0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c0a4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800c0a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c0ac:	4a08      	ldr	r2, [pc, #32]	@ (800c0d0 <vPortValidateInterruptPriority+0x58>)
 800c0ae:	6812      	ldr	r2, [r2, #0]
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d908      	bls.n	800c0c6 <vPortValidateInterruptPriority+0x4e>
 800c0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b8:	f383 8811 	msr	BASEPRI, r3
 800c0bc:	f3bf 8f6f 	isb	sy
 800c0c0:	f3bf 8f4f 	dsb	sy
 800c0c4:	e7fe      	b.n	800c0c4 <vPortValidateInterruptPriority+0x4c>
	}
 800c0c6:	4770      	bx	lr
 800c0c8:	e000e3f0 	.word	0xe000e3f0
 800c0cc:	20006cbc 	.word	0x20006cbc
 800c0d0:	20006cb8 	.word	0x20006cb8

0800c0d4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c0d4:	4a12      	ldr	r2, [pc, #72]	@ (800c120 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c0d6:	f012 0f07 	tst.w	r2, #7
 800c0da:	d01e      	beq.n	800c11a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c0dc:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0de:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c0e2:	f5c1 5320 	rsb	r3, r1, #10240	@ 0x2800
 800c0e6:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0e8:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c0ea:	480e      	ldr	r0, [pc, #56]	@ (800c124 <prvHeapInit+0x50>)
 800c0ec:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c0f2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800c0f4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0f6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800c0fa:	480b      	ldr	r0, [pc, #44]	@ (800c128 <prvHeapInit+0x54>)
 800c0fc:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800c0fe:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c100:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c102:	1a99      	subs	r1, r3, r2
 800c104:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c106:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c108:	4b08      	ldr	r3, [pc, #32]	@ (800c12c <prvHeapInit+0x58>)
 800c10a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c10c:	4b08      	ldr	r3, [pc, #32]	@ (800c130 <prvHeapInit+0x5c>)
 800c10e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c110:	4b08      	ldr	r3, [pc, #32]	@ (800c134 <prvHeapInit+0x60>)
 800c112:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c116:	601a      	str	r2, [r3, #0]
}
 800c118:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c11a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800c11e:	e7e4      	b.n	800c0ea <prvHeapInit+0x16>
 800c120:	20006ce0 	.word	0x20006ce0
 800c124:	20006cd8 	.word	0x20006cd8
 800c128:	20006cd4 	.word	0x20006cd4
 800c12c:	20006ccc 	.word	0x20006ccc
 800c130:	20006cd0 	.word	0x20006cd0
 800c134:	20006cc0 	.word	0x20006cc0

0800c138 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c138:	4b15      	ldr	r3, [pc, #84]	@ (800c190 <prvInsertBlockIntoFreeList+0x58>)
 800c13a:	461a      	mov	r2, r3
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4283      	cmp	r3, r0
 800c140:	d3fb      	bcc.n	800c13a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c142:	6851      	ldr	r1, [r2, #4]
 800c144:	eb02 0c01 	add.w	ip, r2, r1
 800c148:	4584      	cmp	ip, r0
 800c14a:	d009      	beq.n	800c160 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c14c:	6841      	ldr	r1, [r0, #4]
 800c14e:	eb00 0c01 	add.w	ip, r0, r1
 800c152:	4563      	cmp	r3, ip
 800c154:	d009      	beq.n	800c16a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c156:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c158:	4290      	cmp	r0, r2
 800c15a:	d018      	beq.n	800c18e <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c15c:	6010      	str	r0, [r2, #0]
 800c15e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c160:	6840      	ldr	r0, [r0, #4]
 800c162:	4401      	add	r1, r0
 800c164:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800c166:	4610      	mov	r0, r2
 800c168:	e7f0      	b.n	800c14c <prvInsertBlockIntoFreeList+0x14>
{
 800c16a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c16c:	4c09      	ldr	r4, [pc, #36]	@ (800c194 <prvInsertBlockIntoFreeList+0x5c>)
 800c16e:	6824      	ldr	r4, [r4, #0]
 800c170:	42a3      	cmp	r3, r4
 800c172:	d00a      	beq.n	800c18a <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	4419      	add	r1, r3
 800c178:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c17a:	6813      	ldr	r3, [r2, #0]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800c180:	4290      	cmp	r0, r2
 800c182:	d000      	beq.n	800c186 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c184:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c186:	bc10      	pop	{r4}
 800c188:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c18a:	6004      	str	r4, [r0, #0]
 800c18c:	e7f8      	b.n	800c180 <prvInsertBlockIntoFreeList+0x48>
 800c18e:	4770      	bx	lr
 800c190:	20006cd8 	.word	0x20006cd8
 800c194:	20006cd4 	.word	0x20006cd4

0800c198 <pvPortMalloc>:
{
 800c198:	b538      	push	{r3, r4, r5, lr}
 800c19a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800c19c:	f7ff fbe0 	bl	800b960 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800c1a0:	4b3d      	ldr	r3, [pc, #244]	@ (800c298 <pvPortMalloc+0x100>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	b1ab      	cbz	r3, 800c1d2 <pvPortMalloc+0x3a>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c1a6:	4b3d      	ldr	r3, [pc, #244]	@ (800c29c <pvPortMalloc+0x104>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	421c      	tst	r4, r3
 800c1ac:	d114      	bne.n	800c1d8 <pvPortMalloc+0x40>
			if( xWantedSize > 0 )
 800c1ae:	2c00      	cmp	r4, #0
 800c1b0:	d06a      	beq.n	800c288 <pvPortMalloc+0xf0>
				xWantedSize += xHeapStructSize;
 800c1b2:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c1b6:	f014 0f07 	tst.w	r4, #7
 800c1ba:	d002      	beq.n	800c1c2 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c1bc:	f022 0207 	bic.w	r2, r2, #7
 800c1c0:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c1c2:	b1d2      	cbz	r2, 800c1fa <pvPortMalloc+0x62>
 800c1c4:	4b36      	ldr	r3, [pc, #216]	@ (800c2a0 <pvPortMalloc+0x108>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d31a      	bcc.n	800c202 <pvPortMalloc+0x6a>
				pxBlock = xStart.pxNextFreeBlock;
 800c1cc:	4935      	ldr	r1, [pc, #212]	@ (800c2a4 <pvPortMalloc+0x10c>)
 800c1ce:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c1d0:	e01d      	b.n	800c20e <pvPortMalloc+0x76>
			prvHeapInit();
 800c1d2:	f7ff ff7f 	bl	800c0d4 <prvHeapInit>
 800c1d6:	e7e6      	b.n	800c1a6 <pvPortMalloc+0xe>
	( void ) xTaskResumeAll();
 800c1d8:	f7ff fc60 	bl	800ba9c <xTaskResumeAll>
void *pvReturn = NULL;
 800c1dc:	2500      	movs	r5, #0
			vApplicationMallocFailedHook();
 800c1de:	f7fc f863 	bl	80082a8 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1e2:	f015 0f07 	tst.w	r5, #7
 800c1e6:	d055      	beq.n	800c294 <pvPortMalloc+0xfc>
 800c1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ec:	f383 8811 	msr	BASEPRI, r3
 800c1f0:	f3bf 8f6f 	isb	sy
 800c1f4:	f3bf 8f4f 	dsb	sy
 800c1f8:	e7fe      	b.n	800c1f8 <pvPortMalloc+0x60>
	( void ) xTaskResumeAll();
 800c1fa:	f7ff fc4f 	bl	800ba9c <xTaskResumeAll>
void *pvReturn = NULL;
 800c1fe:	2500      	movs	r5, #0
 800c200:	e7ed      	b.n	800c1de <pvPortMalloc+0x46>
	( void ) xTaskResumeAll();
 800c202:	f7ff fc4b 	bl	800ba9c <xTaskResumeAll>
void *pvReturn = NULL;
 800c206:	2500      	movs	r5, #0
 800c208:	e7e9      	b.n	800c1de <pvPortMalloc+0x46>
					pxPreviousBlock = pxBlock;
 800c20a:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800c20c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c20e:	6863      	ldr	r3, [r4, #4]
 800c210:	4293      	cmp	r3, r2
 800c212:	d202      	bcs.n	800c21a <pvPortMalloc+0x82>
 800c214:	6823      	ldr	r3, [r4, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1f7      	bne.n	800c20a <pvPortMalloc+0x72>
				if( pxBlock != pxEnd )
 800c21a:	4b1f      	ldr	r3, [pc, #124]	@ (800c298 <pvPortMalloc+0x100>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	42a3      	cmp	r3, r4
 800c220:	d014      	beq.n	800c24c <pvPortMalloc+0xb4>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c222:	680d      	ldr	r5, [r1, #0]
 800c224:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c226:	6823      	ldr	r3, [r4, #0]
 800c228:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c22a:	6863      	ldr	r3, [r4, #4]
 800c22c:	1a9b      	subs	r3, r3, r2
 800c22e:	2b10      	cmp	r3, #16
 800c230:	d914      	bls.n	800c25c <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c232:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c234:	f010 0f07 	tst.w	r0, #7
 800c238:	d00c      	beq.n	800c254 <pvPortMalloc+0xbc>
 800c23a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c23e:	f383 8811 	msr	BASEPRI, r3
 800c242:	f3bf 8f6f 	isb	sy
 800c246:	f3bf 8f4f 	dsb	sy
 800c24a:	e7fe      	b.n	800c24a <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 800c24c:	f7ff fc26 	bl	800ba9c <xTaskResumeAll>
void *pvReturn = NULL;
 800c250:	2500      	movs	r5, #0
 800c252:	e7c4      	b.n	800c1de <pvPortMalloc+0x46>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c254:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c256:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c258:	f7ff ff6e 	bl	800c138 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c25c:	6862      	ldr	r2, [r4, #4]
 800c25e:	4910      	ldr	r1, [pc, #64]	@ (800c2a0 <pvPortMalloc+0x108>)
 800c260:	680b      	ldr	r3, [r1, #0]
 800c262:	1a9b      	subs	r3, r3, r2
 800c264:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c266:	4910      	ldr	r1, [pc, #64]	@ (800c2a8 <pvPortMalloc+0x110>)
 800c268:	6809      	ldr	r1, [r1, #0]
 800c26a:	428b      	cmp	r3, r1
 800c26c:	d201      	bcs.n	800c272 <pvPortMalloc+0xda>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c26e:	490e      	ldr	r1, [pc, #56]	@ (800c2a8 <pvPortMalloc+0x110>)
 800c270:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c272:	4b0a      	ldr	r3, [pc, #40]	@ (800c29c <pvPortMalloc+0x104>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4313      	orrs	r3, r2
 800c278:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c27a:	2300      	movs	r3, #0
 800c27c:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800c27e:	4a0b      	ldr	r2, [pc, #44]	@ (800c2ac <pvPortMalloc+0x114>)
 800c280:	6813      	ldr	r3, [r2, #0]
 800c282:	3301      	adds	r3, #1
 800c284:	6013      	str	r3, [r2, #0]
 800c286:	e000      	b.n	800c28a <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 800c288:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 800c28a:	f7ff fc07 	bl	800ba9c <xTaskResumeAll>
		if( pvReturn == NULL )
 800c28e:	2d00      	cmp	r5, #0
 800c290:	d1a7      	bne.n	800c1e2 <pvPortMalloc+0x4a>
 800c292:	e7a4      	b.n	800c1de <pvPortMalloc+0x46>
}
 800c294:	4628      	mov	r0, r5
 800c296:	bd38      	pop	{r3, r4, r5, pc}
 800c298:	20006cd4 	.word	0x20006cd4
 800c29c:	20006cc0 	.word	0x20006cc0
 800c2a0:	20006cd0 	.word	0x20006cd0
 800c2a4:	20006cd8 	.word	0x20006cd8
 800c2a8:	20006ccc 	.word	0x20006ccc
 800c2ac:	20006cc8 	.word	0x20006cc8

0800c2b0 <vPortFree>:
	if( pv != NULL )
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d034      	beq.n	800c31e <vPortFree+0x6e>
{
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800c2b8:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c2bc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800c2c0:	4a17      	ldr	r2, [pc, #92]	@ (800c320 <vPortFree+0x70>)
 800c2c2:	6812      	ldr	r2, [r2, #0]
 800c2c4:	4213      	tst	r3, r2
 800c2c6:	d108      	bne.n	800c2da <vPortFree+0x2a>
 800c2c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2cc:	f383 8811 	msr	BASEPRI, r3
 800c2d0:	f3bf 8f6f 	isb	sy
 800c2d4:	f3bf 8f4f 	dsb	sy
 800c2d8:	e7fe      	b.n	800c2d8 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c2da:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800c2de:	b141      	cbz	r1, 800c2f2 <vPortFree+0x42>
 800c2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2e4:	f383 8811 	msr	BASEPRI, r3
 800c2e8:	f3bf 8f6f 	isb	sy
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	e7fe      	b.n	800c2f0 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c2f2:	ea23 0302 	bic.w	r3, r3, r2
 800c2f6:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800c2fa:	f7ff fb31 	bl	800b960 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c2fe:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800c302:	4a08      	ldr	r2, [pc, #32]	@ (800c324 <vPortFree+0x74>)
 800c304:	6813      	ldr	r3, [r2, #0]
 800c306:	440b      	add	r3, r1
 800c308:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c30a:	4628      	mov	r0, r5
 800c30c:	f7ff ff14 	bl	800c138 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c310:	4a05      	ldr	r2, [pc, #20]	@ (800c328 <vPortFree+0x78>)
 800c312:	6813      	ldr	r3, [r2, #0]
 800c314:	3301      	adds	r3, #1
 800c316:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800c318:	f7ff fbc0 	bl	800ba9c <xTaskResumeAll>
}
 800c31c:	bd38      	pop	{r3, r4, r5, pc}
 800c31e:	4770      	bx	lr
 800c320:	20006cc0 	.word	0x20006cc0
 800c324:	20006cd0 	.word	0x20006cd0
 800c328:	20006cc4 	.word	0x20006cc4

0800c32c <CanCcl_InitPowerOn>:
* Description:
* Call       : Local
* Returns   : Nothing
******************************************************************************/
static void CanCcl_InitPowerOn( void )
{
 800c32c:	b508      	push	{r3, lr}
	//CanIl_RxSignalTable_Init();
	//CanIl_TxSignalTable_Init();
	CanIl_MessageTable_Init();
 800c32e:	f000 f8a5 	bl	800c47c <CanIl_MessageTable_Init>
    CanIl_StateInit();
 800c332:	f000 f8a5 	bl	800c480 <CanIl_StateInit>
	CanIl_RxStart();
 800c336:	f000 f8a9 	bl	800c48c <CanIl_RxStart>
	CanIl_TxStart();
 800c33a:	f000 f8b5 	bl	800c4a8 <CanIl_TxStart>
}
 800c33e:	bd08      	pop	{r3, pc}

0800c340 <CanCcl_vPoweronInit>:
* Description:
* Call       : Local
* Returns   : Nothing
******************************************************************************/
void CanCcl_vPoweronInit(void)
{
 800c340:	b508      	push	{r3, lr}
    CanCcl_InitPowerOn();
 800c342:	f7ff fff3 	bl	800c32c <CanCcl_InitPowerOn>
}
 800c346:	bd08      	pop	{r3, pc}

0800c348 <CanCcl_TickCntHnadler>:
* Description:
* Call       : Global
* Returns   : Nothing
******************************************************************************/
void CanCcl_TickCntHnadler(void)
{
 800c348:	b508      	push	{r3, lr}
	CanIl_TxTask();
 800c34a:	f000 faab 	bl	800c8a4 <CanIl_TxTask>
    // CanIl_RxTask();
}
 800c34e:	bd08      	pop	{r3, pc}

0800c350 <CanIl_TxStateTask>:
{
	uint16_t ilTxHnd;
	uint16_t x;
	uint16_t i;

	if(CanIl_Tx_NotSuspended())
 800c350:	4b20      	ldr	r3, [pc, #128]	@ (800c3d4 <CanIl_TxStateTask+0x84>)
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	f013 0f03 	tst.w	r3, #3
 800c358:	d03a      	beq.n	800c3d0 <CanIl_TxStateTask+0x80>
	{
		ilTxHnd = iBytesOfTxHandles;
 800c35a:	4b1f      	ldr	r3, [pc, #124]	@ (800c3d8 <CanIl_TxStateTask+0x88>)
 800c35c:	781a      	ldrb	r2, [r3, #0]
 800c35e:	e01e      	b.n	800c39e <CanIl_TxStateTask+0x4e>
			{
				if(ilTxConfirmationFlags(x) != 0)
				{
					for(i=0;i<iBytesOfTxHandles;i++)
					{
						ilTxConfirmationFlags(i) = 0;
 800c360:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 800c364:	481d      	ldr	r0, [pc, #116]	@ (800c3dc <CanIl_TxStateTask+0x8c>)
 800c366:	6800      	ldr	r0, [r0, #0]
 800c368:	f04f 0c00 	mov.w	ip, #0
 800c36c:	f800 c001 	strb.w	ip, [r0, r1]
					for(i=0;i<iBytesOfTxHandles;i++)
 800c370:	3301      	adds	r3, #1
 800c372:	b29b      	uxth	r3, r3
 800c374:	4918      	ldr	r1, [pc, #96]	@ (800c3d8 <CanIl_TxStateTask+0x88>)
 800c376:	7809      	ldrb	r1, [r1, #0]
 800c378:	4299      	cmp	r1, r3
 800c37a:	d8f1      	bhi.n	800c360 <CanIl_TxStateTask+0x10>
					}
					ilTxUpdateCounter(ilTxHnd) = CanIl_GetTxUpdateCycles(ilTxHnd);
 800c37c:	ebce 0ece 	rsb	lr, lr, lr, lsl #3
 800c380:	ea4f 038e 	mov.w	r3, lr, lsl #2
 800c384:	4916      	ldr	r1, [pc, #88]	@ (800c3e0 <CanIl_TxStateTask+0x90>)
 800c386:	6809      	ldr	r1, [r1, #0]
 800c388:	4419      	add	r1, r3
 800c38a:	4b14      	ldr	r3, [pc, #80]	@ (800c3dc <CanIl_TxStateTask+0x8c>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4423      	add	r3, r4
 800c390:	7cc9      	ldrb	r1, [r1, #19]
 800c392:	7059      	strb	r1, [r3, #1]
 800c394:	e012      	b.n	800c3bc <CanIl_TxStateTask+0x6c>
					for(i=0;i<iBytesOfTxHandles;i++)
 800c396:	2300      	movs	r3, #0
 800c398:	e7ec      	b.n	800c374 <CanIl_TxStateTask+0x24>
				}
			}
		}while(ilTxHnd != 0);
	}
}
 800c39a:	bd10      	pop	{r4, pc}
		}while(ilTxHnd != 0);
 800c39c:	b1ba      	cbz	r2, 800c3ce <CanIl_TxStateTask+0x7e>
			ilTxHnd--;
 800c39e:	3a01      	subs	r2, #1
 800c3a0:	b292      	uxth	r2, r2
			if(x != iCanNotUsedTxHandle)
 800c3a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d0f8      	beq.n	800c39c <CanIl_TxStateTask+0x4c>
{
 800c3aa:	b510      	push	{r4, lr}
				if(ilTxConfirmationFlags(x) != 0)
 800c3ac:	4696      	mov	lr, r2
 800c3ae:	eb02 04c2 	add.w	r4, r2, r2, lsl #3
 800c3b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c3dc <CanIl_TxStateTask+0x8c>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	5d1b      	ldrb	r3, [r3, r4]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d1ec      	bne.n	800c396 <CanIl_TxStateTask+0x46>
		}while(ilTxHnd != 0);
 800c3bc:	2a00      	cmp	r2, #0
 800c3be:	d0ec      	beq.n	800c39a <CanIl_TxStateTask+0x4a>
			ilTxHnd--;
 800c3c0:	3a01      	subs	r2, #1
 800c3c2:	b292      	uxth	r2, r2
			if(x != iCanNotUsedTxHandle)
 800c3c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d1ef      	bne.n	800c3ac <CanIl_TxStateTask+0x5c>
 800c3cc:	e7f6      	b.n	800c3bc <CanIl_TxStateTask+0x6c>
 800c3ce:	4770      	bx	lr
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop
 800c3d4:	200094f2 	.word	0x200094f2
 800c3d8:	200094f3 	.word	0x200094f3
 800c3dc:	200094f8 	.word	0x200094f8
 800c3e0:	200094f4 	.word	0x200094f4

0800c3e4 <CanIl_EventMsgCycTxPro>:

static void CanIl_EventMsgCycTxPro(void)
{
    uint8_t i;

    for (i=0; i<iBytesOfTxHandles; i++)
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	4a1b      	ldr	r2, [pc, #108]	@ (800c454 <CanIl_EventMsgCycTxPro+0x70>)
 800c3e8:	7812      	ldrb	r2, [r2, #0]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d931      	bls.n	800c452 <CanIl_EventMsgCycTxPro+0x6e>
{
 800c3ee:	b410      	push	{r4}
 800c3f0:	e005      	b.n	800c3fe <CanIl_EventMsgCycTxPro+0x1a>
    for (i=0; i<iBytesOfTxHandles; i++)
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	4a17      	ldr	r2, [pc, #92]	@ (800c454 <CanIl_EventMsgCycTxPro+0x70>)
 800c3f8:	7812      	ldrb	r2, [r2, #0]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d927      	bls.n	800c44e <CanIl_EventMsgCycTxPro+0x6a>
    {
    	if(iEventMsgInfo(i).Flag==TRUE)
 800c3fe:	eb03 00c3 	add.w	r0, r3, r3, lsl #3
 800c402:	4a15      	ldr	r2, [pc, #84]	@ (800c458 <CanIl_EventMsgCycTxPro+0x74>)
 800c404:	6812      	ldr	r2, [r2, #0]
 800c406:	4402      	add	r2, r0
 800c408:	7951      	ldrb	r1, [r2, #5]
 800c40a:	2901      	cmp	r1, #1
 800c40c:	d1f1      	bne.n	800c3f2 <CanIl_EventMsgCycTxPro+0xe>
    	{
    		iEventMsgInfo(i).Counter++;
 800c40e:	79d1      	ldrb	r1, [r2, #7]
 800c410:	3101      	adds	r1, #1
 800c412:	b2c9      	uxtb	r1, r1
 800c414:	71d1      	strb	r1, [r2, #7]
    		if(iEventMsgInfo(i).Counter >= CanIl_GetEventTx_Interval_Time())
 800c416:	4c11      	ldr	r4, [pc, #68]	@ (800c45c <CanIl_EventMsgCycTxPro+0x78>)
 800c418:	6824      	ldr	r4, [r4, #0]
 800c41a:	f894 c000 	ldrb.w	ip, [r4]
 800c41e:	4561      	cmp	r1, ip
 800c420:	d3e7      	bcc.n	800c3f2 <CanIl_EventMsgCycTxPro+0xe>
    		{
    			ilTxState(i) |= iTxQuickStart;
 800c422:	7891      	ldrb	r1, [r2, #2]
 800c424:	f041 0110 	orr.w	r1, r1, #16
 800c428:	7091      	strb	r1, [r2, #2]
    			iEventMsgInfo(i).Counter = 0;
 800c42a:	4a0b      	ldr	r2, [pc, #44]	@ (800c458 <CanIl_EventMsgCycTxPro+0x74>)
 800c42c:	6811      	ldr	r1, [r2, #0]
 800c42e:	4401      	add	r1, r0
 800c430:	2200      	movs	r2, #0
 800c432:	71ca      	strb	r2, [r1, #7]
    			iEventMsgInfo(i).Time++;
 800c434:	798a      	ldrb	r2, [r1, #6]
 800c436:	3201      	adds	r2, #1
 800c438:	b2d2      	uxtb	r2, r2
 800c43a:	718a      	strb	r2, [r1, #6]
    			if(iEventMsgInfo(i).Time >= CanIl_GetEventTx_Cnt())
 800c43c:	4807      	ldr	r0, [pc, #28]	@ (800c45c <CanIl_EventMsgCycTxPro+0x78>)
 800c43e:	6800      	ldr	r0, [r0, #0]
 800c440:	7840      	ldrb	r0, [r0, #1]
 800c442:	4282      	cmp	r2, r0
 800c444:	d3d5      	bcc.n	800c3f2 <CanIl_EventMsgCycTxPro+0xe>
    			{
    				iEventMsgInfo(i).Time = 0;
 800c446:	2200      	movs	r2, #0
 800c448:	718a      	strb	r2, [r1, #6]
    			    iEventMsgInfo(i).Flag = FALSE;
 800c44a:	714a      	strb	r2, [r1, #5]
 800c44c:	e7d1      	b.n	800c3f2 <CanIl_EventMsgCycTxPro+0xe>
    			}
    		}
    	}
    }
}
 800c44e:	bc10      	pop	{r4}
 800c450:	4770      	bx	lr
 800c452:	4770      	bx	lr
 800c454:	200094f3 	.word	0x200094f3
 800c458:	200094f8 	.word	0x200094f8
 800c45c:	20004394 	.word	0x20004394

0800c460 <CanDrv_HLTxConfirm>:
	}
	CanIl_CanBusDetectHandler();
}

static void CanDrv_HLTxConfirm(uint16_t Index)
{
 800c460:	b508      	push	{r3, lr}
	uint16_t txHandle;

	//txHandle = CurTxHandleIndex;
	txHandle = Index;

	if (CanGetApplConfirmationPtr(txHandle) != NULL)
 800c462:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800c466:	4b04      	ldr	r3, [pc, #16]	@ (800c478 <CanDrv_HLTxConfirm+0x18>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c46e:	699b      	ldr	r3, [r3, #24]
 800c470:	b103      	cbz	r3, 800c474 <CanDrv_HLTxConfirm+0x14>
	{
		(CanGetApplConfirmationPtr(txHandle))(txHandle);
 800c472:	4798      	blx	r3
	}
}
 800c474:	bd08      	pop	{r3, pc}
 800c476:	bf00      	nop
 800c478:	200094f4 	.word	0x200094f4

0800c47c <CanIl_MessageTable_Init>:
}
 800c47c:	4770      	bx	lr
	...

0800c480 <CanIl_StateInit>:
    CanIlState = iTxIsIdle;
 800c480:	4b01      	ldr	r3, [pc, #4]	@ (800c488 <CanIl_StateInit+0x8>)
 800c482:	2200      	movs	r2, #0
 800c484:	701a      	strb	r2, [r3, #0]
}
 800c486:	4770      	bx	lr
 800c488:	200094f2 	.word	0x200094f2

0800c48c <CanIl_RxStart>:
    if (CanIl_Rx_Enabled()!=0)
 800c48c:	4b05      	ldr	r3, [pc, #20]	@ (800c4a4 <CanIl_RxStart+0x18>)
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	f013 0f08 	tst.w	r3, #8
 800c494:	d105      	bne.n	800c4a2 <CanIl_RxStart+0x16>
    CanIl_EnableRx();
 800c496:	f023 030c 	bic.w	r3, r3, #12
 800c49a:	f043 0308 	orr.w	r3, r3, #8
 800c49e:	4a01      	ldr	r2, [pc, #4]	@ (800c4a4 <CanIl_RxStart+0x18>)
 800c4a0:	7013      	strb	r3, [r2, #0]
}
 800c4a2:	4770      	bx	lr
 800c4a4:	200094f2 	.word	0x200094f2

0800c4a8 <CanIl_TxStart>:
{
 800c4a8:	b570      	push	{r4, r5, r6, lr}
    if (CanIl_Tx_Enabled()!=0)
 800c4aa:	4b27      	ldr	r3, [pc, #156]	@ (800c548 <CanIl_TxStart+0xa0>)
 800c4ac:	781d      	ldrb	r5, [r3, #0]
 800c4ae:	f015 0f02 	tst.w	r5, #2
 800c4b2:	d148      	bne.n	800c546 <CanIl_TxStart+0x9e>
    for ( ilTxHnd=0 ; ilTxHnd < iBytesOfTxHandles  ; ilTxHnd++ )
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	e003      	b.n	800c4c0 <CanIl_TxStart+0x18>
        ilTxEventCounter(ilTxHnd)  = 0;
 800c4b8:	2100      	movs	r1, #0
 800c4ba:	7111      	strb	r1, [r2, #4]
    for ( ilTxHnd=0 ; ilTxHnd < iBytesOfTxHandles  ; ilTxHnd++ )
 800c4bc:	3301      	adds	r3, #1
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	4a22      	ldr	r2, [pc, #136]	@ (800c54c <CanIl_TxStart+0xa4>)
 800c4c2:	7812      	ldrb	r2, [r2, #0]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d92a      	bls.n	800c51e <CanIl_TxStart+0x76>
        ilTxState(ilTxHnd) = CanIl_GetTxTypes(ilTxHnd);
 800c4c8:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800c4cc:	0090      	lsls	r0, r2, #2
 800c4ce:	4e20      	ldr	r6, [pc, #128]	@ (800c550 <CanIl_TxStart+0xa8>)
 800c4d0:	6832      	ldr	r2, [r6, #0]
 800c4d2:	eb02 0c00 	add.w	ip, r2, r0
 800c4d6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800c4da:	491e      	ldr	r1, [pc, #120]	@ (800c554 <CanIl_TxStart+0xac>)
 800c4dc:	680c      	ldr	r4, [r1, #0]
 800c4de:	4414      	add	r4, r2
 800c4e0:	f89c c011 	ldrb.w	ip, [ip, #17]
 800c4e4:	f884 c002 	strb.w	ip, [r4, #2]
        ilTxUpdateCounter(ilTxHnd) = 0;
 800c4e8:	680c      	ldr	r4, [r1, #0]
 800c4ea:	4414      	add	r4, r2
 800c4ec:	f04f 0c00 	mov.w	ip, #0
 800c4f0:	f884 c001 	strb.w	ip, [r4, #1]
        ilTxCyclicCounter(ilTxHnd) = IlGetTxStartDelayCycles(ilTxHnd);
 800c4f4:	6834      	ldr	r4, [r6, #0]
 800c4f6:	eb04 0e00 	add.w	lr, r4, r0
 800c4fa:	680c      	ldr	r4, [r1, #0]
 800c4fc:	eb04 0c02 	add.w	ip, r4, r2
 800c500:	f89e 4012 	ldrb.w	r4, [lr, #18]
 800c504:	f88c 4003 	strb.w	r4, [ip, #3]
        if((ilTxState(ilTxHnd) & (iTxCycEveSend))!=0)
 800c508:	6809      	ldr	r1, [r1, #0]
 800c50a:	440a      	add	r2, r1
 800c50c:	7891      	ldrb	r1, [r2, #2]
 800c50e:	f011 0f02 	tst.w	r1, #2
 800c512:	d0d1      	beq.n	800c4b8 <CanIl_TxStart+0x10>
        ilTxEventCounter(ilTxHnd)  = IlGetTxStartDelayCycles(ilTxHnd);
 800c514:	6831      	ldr	r1, [r6, #0]
 800c516:	4401      	add	r1, r0
 800c518:	7c89      	ldrb	r1, [r1, #18]
 800c51a:	7111      	strb	r1, [r2, #4]
 800c51c:	e7ce      	b.n	800c4bc <CanIl_TxStart+0x14>
	for(i=0;i<iBytesOfTxHandles;i++)
 800c51e:	2300      	movs	r3, #0
 800c520:	e007      	b.n	800c532 <CanIl_TxStart+0x8a>
		ilTxConfirmationFlags(i) = 0;
 800c522:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800c526:	490b      	ldr	r1, [pc, #44]	@ (800c554 <CanIl_TxStart+0xac>)
 800c528:	6809      	ldr	r1, [r1, #0]
 800c52a:	2000      	movs	r0, #0
 800c52c:	5488      	strb	r0, [r1, r2]
	for(i=0;i<iBytesOfTxHandles;i++)
 800c52e:	3301      	adds	r3, #1
 800c530:	b29b      	uxth	r3, r3
 800c532:	4a06      	ldr	r2, [pc, #24]	@ (800c54c <CanIl_TxStart+0xa4>)
 800c534:	7812      	ldrb	r2, [r2, #0]
 800c536:	429a      	cmp	r2, r3
 800c538:	d8f3      	bhi.n	800c522 <CanIl_TxStart+0x7a>
    CanIl_EnableTx();
 800c53a:	f025 0503 	bic.w	r5, r5, #3
 800c53e:	f045 0502 	orr.w	r5, r5, #2
 800c542:	4b01      	ldr	r3, [pc, #4]	@ (800c548 <CanIl_TxStart+0xa0>)
 800c544:	701d      	strb	r5, [r3, #0]
}
 800c546:	bd70      	pop	{r4, r5, r6, pc}
 800c548:	200094f2 	.word	0x200094f2
 800c54c:	200094f3 	.word	0x200094f3
 800c550:	200094f4 	.word	0x200094f4
 800c554:	200094f8 	.word	0x200094f8

0800c558 <CanIl_SendEventMsg>:
    if ((CanIl_GetTxTypes(ilTxHnd)!=iTxCycSend)&&(iEventMsgInfo(ilTxHnd).Flag == FALSE))
 800c558:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800c55c:	4b09      	ldr	r3, [pc, #36]	@ (800c584 <CanIl_SendEventMsg+0x2c>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c564:	7c5b      	ldrb	r3, [r3, #17]
 800c566:	2b01      	cmp	r3, #1
 800c568:	d00a      	beq.n	800c580 <CanIl_SendEventMsg+0x28>
 800c56a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800c56e:	4b06      	ldr	r3, [pc, #24]	@ (800c588 <CanIl_SendEventMsg+0x30>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4403      	add	r3, r0
 800c574:	795a      	ldrb	r2, [r3, #5]
 800c576:	b91a      	cbnz	r2, 800c580 <CanIl_SendEventMsg+0x28>
        iEventMsgInfo(ilTxHnd).Counter = 0;
 800c578:	71da      	strb	r2, [r3, #7]
        iEventMsgInfo(ilTxHnd).Time = 0;
 800c57a:	719a      	strb	r2, [r3, #6]
        iEventMsgInfo(ilTxHnd).Flag = TRUE;
 800c57c:	2201      	movs	r2, #1
 800c57e:	715a      	strb	r2, [r3, #5]
}
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop
 800c584:	200094f4 	.word	0x200094f4
 800c588:	200094f8 	.word	0x200094f8

0800c58c <CanStartTransmission>:

uint8_t CanStartTransmission(uint8_t instance,uint32_t ID,uint8_t *pDataBuf, uint8_t dataLen)
{
 800c58c:	b510      	push	{r4, lr}
 800c58e:	4604      	mov	r4, r0
 800c590:	4610      	mov	r0, r2
	uint8_t res = 0;
    if(instance == BCAN_CAN_INSTANCE)
 800c592:	2c01      	cmp	r4, #1
 800c594:	d003      	beq.n	800c59e <CanStartTransmission+0x12>
            res = CAN_TRANSMIT_MSG_FILED;
        }

		// printf("BCAN_SendMsg ID = 0x%x, dataLen = %d\r\n", ID, dataLen);
    }
    else if(instance == CCAN1_CAN_INSTANCE)
 800c596:	2c02      	cmp	r4, #2
 800c598:	d007      	beq.n	800c5aa <CanStartTransmission+0x1e>
	uint8_t res = 0;
 800c59a:	2000      	movs	r0, #0
        }
		// printf("CCAN1_SendMsg ID = 0x%x, dataLen = %d\r\n", ID, dataLen);
    }

	return res;
}
 800c59c:	bd10      	pop	{r4, pc}
        if(CAN2_SendMsg(pDataBuf, ID, dataLen))
 800c59e:	461a      	mov	r2, r3
 800c5a0:	f7fb fcec 	bl	8007f7c <CAN2_SendMsg>
 800c5a4:	b138      	cbz	r0, 800c5b6 <CanStartTransmission+0x2a>
            res = CAN_TRANSMIT_MSG_SUCCS;
 800c5a6:	2000      	movs	r0, #0
 800c5a8:	e7f8      	b.n	800c59c <CanStartTransmission+0x10>
        if(CAN_SendMsg(pDataBuf, ID, dataLen))
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	f7fb fd1e 	bl	8007fec <CAN_SendMsg>
 800c5b0:	b118      	cbz	r0, 800c5ba <CanStartTransmission+0x2e>
            res = CAN_TRANSMIT_MSG_SUCCS;
 800c5b2:	2000      	movs	r0, #0
 800c5b4:	e7f2      	b.n	800c59c <CanStartTransmission+0x10>
            res = CAN_TRANSMIT_MSG_FILED;
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	e7f0      	b.n	800c59c <CanStartTransmission+0x10>
            res = CAN_TRANSMIT_MSG_FILED;
 800c5ba:	2001      	movs	r0, #1
 800c5bc:	e7ee      	b.n	800c59c <CanStartTransmission+0x10>
	...

0800c5c0 <CanCopyDataAndStartTransmission>:
		uint8_t   Data[8];           ///< Data

	} CAN_MSG_INFO;
	static CAN_MSG_INFO g_sendCANMsgInfo;

	ID = CanGetTxId(txHandle);
 800c5c0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800c5c4:	4b1d      	ldr	r3, [pc, #116]	@ (800c63c <CanCopyDataAndStartTransmission+0x7c>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c5cc:	6841      	ldr	r1, [r0, #4]
	if(ID > 0x7FF)
 800c5ce:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800c5d2:	d309      	bcc.n	800c5e8 <CanCopyDataAndStartTransmission+0x28>
	{
		g_sendCANMsgInfo.IDE = kCanIdTypeExt;
 800c5d4:	4a1a      	ldr	r2, [pc, #104]	@ (800c640 <CanCopyDataAndStartTransmission+0x80>)
 800c5d6:	78d3      	ldrb	r3, [r2, #3]
 800c5d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5dc:	70d3      	strb	r3, [r2, #3]
	else
	{
		g_sendCANMsgInfo.IDE = kCanIdTypeStd;
	}

	if(CanGetDstData(txHandle) != NULL)
 800c5de:	68c3      	ldr	r3, [r0, #12]
 800c5e0:	b143      	cbz	r3, 800c5f4 <CanCopyDataAndStartTransmission+0x34>
{
 800c5e2:	b510      	push	{r4, lr}
	{
		//CanPackFunc(txHandle)(g_sendCANMsgInfo.Data,CanGetDstData(txHandle),CanGetMsgLen(txHandle));

		for(i=0; i<CanGetMsgLen(txHandle); i++)
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	e010      	b.n	800c60a <CanCopyDataAndStartTransmission+0x4a>
		g_sendCANMsgInfo.IDE = kCanIdTypeStd;
 800c5e8:	4a15      	ldr	r2, [pc, #84]	@ (800c640 <CanCopyDataAndStartTransmission+0x80>)
 800c5ea:	78d3      	ldrb	r3, [r2, #3]
 800c5ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5f0:	70d3      	strb	r3, [r2, #3]
 800c5f2:	e7f4      	b.n	800c5de <CanCopyDataAndStartTransmission+0x1e>

		return result;
	}
	else
	{
		return CAN_SEND_MSG_FILED;
 800c5f4:	2001      	movs	r0, #1
	}
}
 800c5f6:	4770      	bx	lr
			g_sendCANMsgInfo.Data[i] = CanGetDstData(txHandle)[i];
 800c5f8:	68c3      	ldr	r3, [r0, #12]
 800c5fa:	f813 c002 	ldrb.w	ip, [r3, r2]
 800c5fe:	4b10      	ldr	r3, [pc, #64]	@ (800c640 <CanCopyDataAndStartTransmission+0x80>)
 800c600:	4413      	add	r3, r2
 800c602:	f883 c005 	strb.w	ip, [r3, #5]
		for(i=0; i<CanGetMsgLen(txHandle); i++)
 800c606:	3201      	adds	r2, #1
 800c608:	b2d2      	uxtb	r2, r2
 800c60a:	7a03      	ldrb	r3, [r0, #8]
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d8f3      	bhi.n	800c5f8 <CanCopyDataAndStartTransmission+0x38>
		g_sendCANMsgInfo.ID = ID;
 800c610:	4a0b      	ldr	r2, [pc, #44]	@ (800c640 <CanCopyDataAndStartTransmission+0x80>)
 800c612:	6814      	ldr	r4, [r2, #0]
 800c614:	f361 041c 	bfi	r4, r1, #0, #29
 800c618:	6014      	str	r4, [r2, #0]
		g_sendCANMsgInfo.DLC =  CanGetMsgLen(txHandle);
 800c61a:	f892 c004 	ldrb.w	ip, [r2, #4]
 800c61e:	f363 0c03 	bfi	ip, r3, #0, #4
 800c622:	f882 c004 	strb.w	ip, [r2, #4]
		if(!CanStartTransmission(CanGetTxHwPort(txHandle), g_sendCANMsgInfo.ID, g_sendCANMsgInfo.Data, g_sendCANMsgInfo.DLC))
 800c626:	f003 030f 	and.w	r3, r3, #15
 800c62a:	3205      	adds	r2, #5
 800c62c:	f021 4160 	bic.w	r1, r1, #3758096384	@ 0xe0000000
 800c630:	7d80      	ldrb	r0, [r0, #22]
 800c632:	f7ff ffab 	bl	800c58c <CanStartTransmission>
 800c636:	b100      	cbz	r0, 800c63a <CanCopyDataAndStartTransmission+0x7a>
			result = CAN_SEND_MSG_FILED;
 800c638:	2001      	movs	r0, #1
}
 800c63a:	bd10      	pop	{r4, pc}
 800c63c:	200094f4 	.word	0x200094f4
 800c640:	200094e0 	.word	0x200094e0

0800c644 <CanDrvTransmit>:

static uint8_t CanDrvTransmit(uint16_t txHandle)
{
 800c644:	b510      	push	{r4, lr}
 800c646:	4604      	mov	r4, r0
	uint32_t result = CAN_OK1;
	static uint16_t idle = 0xFF;

	//CurTxHandleIndex = txHandle;
	result = CanCopyDataAndStartTransmission(txHandle);
 800c648:	f7ff ffba 	bl	800c5c0 <CanCopyDataAndStartTransmission>
	if ((idle != txHandle)&& (result != CAN_OK1))
	{
		//DebugMsg("Can Tx Failed! %s\r\n",__FUNCTION__);
	}

	idle = txHandle;
 800c64c:	4b05      	ldr	r3, [pc, #20]	@ (800c664 <CanDrvTransmit+0x20>)
 800c64e:	801c      	strh	r4, [r3, #0]

	if (result == CAN_OK1)
 800c650:	b108      	cbz	r0, 800c656 <CanDrvTransmit+0x12>
    	CanDrv_HLTxConfirm(txHandle);
    	return CANTXOK;
	}
	else
	{
    	return CANTXFAILED;
 800c652:	2000      	movs	r0, #0
	}
}
 800c654:	bd10      	pop	{r4, pc}
    	idle = 0xFF;
 800c656:	22ff      	movs	r2, #255	@ 0xff
 800c658:	801a      	strh	r2, [r3, #0]
    	CanDrv_HLTxConfirm(txHandle);
 800c65a:	4620      	mov	r0, r4
 800c65c:	f7ff ff00 	bl	800c460 <CanDrv_HLTxConfirm>
    	return CANTXOK;
 800c660:	2001      	movs	r0, #1
 800c662:	e7f7      	b.n	800c654 <CanDrvTransmit+0x10>
 800c664:	200094f0 	.word	0x200094f0

0800c668 <CanIl_SendMsg>:
{
 800c668:	b538      	push	{r3, r4, r5, lr}
    ilTxState(ilTxHnd) &= iNotTxReq;
 800c66a:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
 800c66e:	4d12      	ldr	r5, [pc, #72]	@ (800c6b8 <CanIl_SendMsg+0x50>)
 800c670:	682a      	ldr	r2, [r5, #0]
 800c672:	4422      	add	r2, r4
 800c674:	7891      	ldrb	r1, [r2, #2]
 800c676:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800c67a:	7091      	strb	r1, [r2, #2]
    ilTxUpdateCounter(ilTxHnd) = CanIl_GetTxUpdateCycles(ilTxHnd);
 800c67c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 800c680:	4a0e      	ldr	r2, [pc, #56]	@ (800c6bc <CanIl_SendMsg+0x54>)
 800c682:	6812      	ldr	r2, [r2, #0]
 800c684:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c688:	682b      	ldr	r3, [r5, #0]
 800c68a:	4423      	add	r3, r4
 800c68c:	7cd2      	ldrb	r2, [r2, #19]
 800c68e:	705a      	strb	r2, [r3, #1]
    if (CanDrvTransmit( ilTxHnd) == CANTXFAILED)
 800c690:	f7ff ffd8 	bl	800c644 <CanDrvTransmit>
 800c694:	b950      	cbnz	r0, 800c6ac <CanIl_SendMsg+0x44>
        ilTxState(ilTxHnd) |= (iTxReqSend);
 800c696:	682b      	ldr	r3, [r5, #0]
 800c698:	4423      	add	r3, r4
 800c69a:	789a      	ldrb	r2, [r3, #2]
 800c69c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c6a0:	709a      	strb	r2, [r3, #2]
        ilTxUpdateCounter(ilTxHnd) = 0;
 800c6a2:	682b      	ldr	r3, [r5, #0]
 800c6a4:	4423      	add	r3, r4
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	705a      	strb	r2, [r3, #1]
}
 800c6aa:	bd38      	pop	{r3, r4, r5, pc}
    	ilTxConfirmationFlags(ilTxHnd)=0x01;
 800c6ac:	4b02      	ldr	r3, [pc, #8]	@ (800c6b8 <CanIl_SendMsg+0x50>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2201      	movs	r2, #1
 800c6b2:	551a      	strb	r2, [r3, r4]
}
 800c6b4:	e7f9      	b.n	800c6aa <CanIl_SendMsg+0x42>
 800c6b6:	bf00      	nop
 800c6b8:	200094f8 	.word	0x200094f8
 800c6bc:	200094f4 	.word	0x200094f4

0800c6c0 <CanIl_TxTimerTask>:
{
 800c6c0:	b538      	push	{r3, r4, r5, lr}
	if (CanIl_Tx_Enabled()!=0)
 800c6c2:	4b72      	ldr	r3, [pc, #456]	@ (800c88c <CanIl_TxTimerTask+0x1cc>)
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	f013 0f02 	tst.w	r3, #2
 800c6ca:	f000 80de 	beq.w	800c88a <CanIl_TxTimerTask+0x1ca>
		ilTxHnd = iBytesOfTxHandles;
 800c6ce:	4b70      	ldr	r3, [pc, #448]	@ (800c890 <CanIl_TxTimerTask+0x1d0>)
 800c6d0:	781c      	ldrb	r4, [r3, #0]
 800c6d2:	e05b      	b.n	800c78c <CanIl_TxTimerTask+0xcc>
					else if(ilTxEventCounter(ilTxHnd) < CanIl_GetCycEventTx_Interval_Time())
 800c6d4:	4560      	cmp	r0, ip
 800c6d6:	f080 80c4 	bcs.w	800c862 <CanIl_TxTimerTask+0x1a2>
						ilTxEventCounter(ilTxHnd) = CanIl_GetCycEventTx_Interval_Time();
 800c6da:	f882 c004 	strb.w	ip, [r2, #4]
						ilTxState(ilTxHnd) |= iTxReqSend;
 800c6de:	7890      	ldrb	r0, [r2, #2]
 800c6e0:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800c6e4:	7090      	strb	r0, [r2, #2]
						ilTxState(ilTxHnd) &=(~ iTxQuickStart);
 800c6e6:	4a6b      	ldr	r2, [pc, #428]	@ (800c894 <CanIl_TxTimerTask+0x1d4>)
 800c6e8:	6812      	ldr	r2, [r2, #0]
 800c6ea:	441a      	add	r2, r3
 800c6ec:	7890      	ldrb	r0, [r2, #2]
 800c6ee:	f000 00ef 	and.w	r0, r0, #239	@ 0xef
 800c6f2:	7090      	strb	r0, [r2, #2]
				if ((ilTxEventCounter(ilTxHnd)==0)||((ilTxState(ilTxHnd) & iTxReqSend)!=0))
 800c6f4:	4a67      	ldr	r2, [pc, #412]	@ (800c894 <CanIl_TxTimerTask+0x1d4>)
 800c6f6:	6812      	ldr	r2, [r2, #0]
 800c6f8:	441a      	add	r2, r3
 800c6fa:	7910      	ldrb	r0, [r2, #4]
 800c6fc:	b118      	cbz	r0, 800c706 <CanIl_TxTimerTask+0x46>
 800c6fe:	7890      	ldrb	r0, [r2, #2]
 800c700:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800c704:	d016      	beq.n	800c734 <CanIl_TxTimerTask+0x74>
					if((ilTxState(ilTxHnd) & iTxCycEveSend)!=0)
 800c706:	7890      	ldrb	r0, [r2, #2]
 800c708:	f010 0f02 	tst.w	r0, #2
 800c70c:	d00a      	beq.n	800c724 <CanIl_TxTimerTask+0x64>
						ilTxState(ilTxHnd) &=(~ iTxQuickStart);
 800c70e:	7890      	ldrb	r0, [r2, #2]
 800c710:	f000 00ef 	and.w	r0, r0, #239	@ 0xef
 800c714:	7090      	strb	r0, [r2, #2]
						ilTxState(ilTxHnd) |= iTxReqSend;
 800c716:	4a5f      	ldr	r2, [pc, #380]	@ (800c894 <CanIl_TxTimerTask+0x1d4>)
 800c718:	6812      	ldr	r2, [r2, #0]
 800c71a:	441a      	add	r2, r3
 800c71c:	7890      	ldrb	r0, [r2, #2]
 800c71e:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800c722:	7090      	strb	r0, [r2, #2]
					ilTxEventCounter(ilTxHnd) = CanIl_GetTxEventCycles(ilTxHnd);
 800c724:	4a5c      	ldr	r2, [pc, #368]	@ (800c898 <CanIl_TxTimerTask+0x1d8>)
 800c726:	6810      	ldr	r0, [r2, #0]
 800c728:	4408      	add	r0, r1
 800c72a:	4a5a      	ldr	r2, [pc, #360]	@ (800c894 <CanIl_TxTimerTask+0x1d4>)
 800c72c:	6812      	ldr	r2, [r2, #0]
 800c72e:	441a      	add	r2, r3
 800c730:	7d40      	ldrb	r0, [r0, #21]
 800c732:	7110      	strb	r0, [r2, #4]
			if (((ilTxState(ilTxHnd) & (iTxEveSend ))!=0) && ((ilTxState(ilTxHnd) & (iTxQuickStart ))!=0))
 800c734:	4a57      	ldr	r2, [pc, #348]	@ (800c894 <CanIl_TxTimerTask+0x1d4>)
 800c736:	6812      	ldr	r2, [r2, #0]
 800c738:	441a      	add	r2, r3
 800c73a:	7890      	ldrb	r0, [r2, #2]
 800c73c:	f010 0f04 	tst.w	r0, #4
 800c740:	d01b      	beq.n	800c77a <CanIl_TxTimerTask+0xba>
 800c742:	7890      	ldrb	r0, [r2, #2]
 800c744:	f010 0f10 	tst.w	r0, #16
 800c748:	d017      	beq.n	800c77a <CanIl_TxTimerTask+0xba>
				if (ilTxEventCounter(ilTxHnd)!=0)
 800c74a:	7910      	ldrb	r0, [r2, #4]
 800c74c:	b108      	cbz	r0, 800c752 <CanIl_TxTimerTask+0x92>
					ilTxEventCounter(ilTxHnd)--;
 800c74e:	3801      	subs	r0, #1
 800c750:	7110      	strb	r0, [r2, #4]
				if (ilTxEventCounter(ilTxHnd)==0)
 800c752:	7910      	ldrb	r0, [r2, #4]
 800c754:	b988      	cbnz	r0, 800c77a <CanIl_TxTimerTask+0xba>
					ilTxState(ilTxHnd) &=(~ iTxQuickStart);
 800c756:	7890      	ldrb	r0, [r2, #2]
 800c758:	f000 00ef 	and.w	r0, r0, #239	@ 0xef
 800c75c:	7090      	strb	r0, [r2, #2]
					ilTxState(ilTxHnd) |= iTxReqSend;
 800c75e:	4d4d      	ldr	r5, [pc, #308]	@ (800c894 <CanIl_TxTimerTask+0x1d4>)
 800c760:	682a      	ldr	r2, [r5, #0]
 800c762:	441a      	add	r2, r3
 800c764:	7890      	ldrb	r0, [r2, #2]
 800c766:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800c76a:	7090      	strb	r0, [r2, #2]
					ilTxEventCounter(ilTxHnd) = CanIl_GetTxEventCycles(ilTxHnd);
 800c76c:	4a4a      	ldr	r2, [pc, #296]	@ (800c898 <CanIl_TxTimerTask+0x1d8>)
 800c76e:	6812      	ldr	r2, [r2, #0]
 800c770:	4411      	add	r1, r2
 800c772:	682a      	ldr	r2, [r5, #0]
 800c774:	441a      	add	r2, r3
 800c776:	7d49      	ldrb	r1, [r1, #21]
 800c778:	7111      	strb	r1, [r2, #4]
			if (((ilTxState(ilTxHnd) & iTxReqSend)!=0) && (ilTxUpdateCounter(ilTxHnd)==0) )
 800c77a:	4a46      	ldr	r2, [pc, #280]	@ (800c894 <CanIl_TxTimerTask+0x1d4>)
 800c77c:	6812      	ldr	r2, [r2, #0]
 800c77e:	4413      	add	r3, r2
 800c780:	789a      	ldrb	r2, [r3, #2]
 800c782:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800c786:	d179      	bne.n	800c87c <CanIl_TxTimerTask+0x1bc>
		}while ( ilTxHnd != 0 );
 800c788:	2c00      	cmp	r4, #0
 800c78a:	d07e      	beq.n	800c88a <CanIl_TxTimerTask+0x1ca>
			ilTxHnd--;
 800c78c:	3c01      	subs	r4, #1
 800c78e:	b2a4      	uxth	r4, r4
			if(!(CanMsgAttributeSend & CanIl_GetTxAttribute(ilTxHnd)))
 800c790:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800c794:	0099      	lsls	r1, r3, #2
 800c796:	4b40      	ldr	r3, [pc, #256]	@ (800c898 <CanIl_TxTimerTask+0x1d8>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	440b      	add	r3, r1
 800c79c:	7c1a      	ldrb	r2, [r3, #16]
 800c79e:	4b3f      	ldr	r3, [pc, #252]	@ (800c89c <CanIl_TxTimerTask+0x1dc>)
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	421a      	tst	r2, r3
 800c7a4:	d0f0      	beq.n	800c788 <CanIl_TxTimerTask+0xc8>
			if ((ilTxUpdateCounter(ilTxHnd)!= (uint8_t)(iStopUpdateCntVal & 0x00FF)) && (ilTxUpdateCounter(ilTxHnd) > 0))
 800c7a6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800c7aa:	4a3a      	ldr	r2, [pc, #232]	@ (800c894 <CanIl_TxTimerTask+0x1d4>)
 800c7ac:	6810      	ldr	r0, [r2, #0]
 800c7ae:	4418      	add	r0, r3
 800c7b0:	7842      	ldrb	r2, [r0, #1]
 800c7b2:	3a01      	subs	r2, #1
 800c7b4:	b2d2      	uxtb	r2, r2
 800c7b6:	2afd      	cmp	r2, #253	@ 0xfd
 800c7b8:	d800      	bhi.n	800c7bc <CanIl_TxTimerTask+0xfc>
				ilTxUpdateCounter(ilTxHnd)--;
 800c7ba:	7042      	strb	r2, [r0, #1]
			if ((ilTxState(ilTxHnd) & iTxCycSend)!=0)
 800c7bc:	4a35      	ldr	r2, [pc, #212]	@ (800c894 <CanIl_TxTimerTask+0x1d4>)
 800c7be:	6812      	ldr	r2, [r2, #0]
 800c7c0:	441a      	add	r2, r3
 800c7c2:	7890      	ldrb	r0, [r2, #2]
 800c7c4:	f010 0f01 	tst.w	r0, #1
 800c7c8:	d01c      	beq.n	800c804 <CanIl_TxTimerTask+0x144>
				if (ilTxCyclicCounter(ilTxHnd)!=0)
 800c7ca:	78d0      	ldrb	r0, [r2, #3]
 800c7cc:	b108      	cbz	r0, 800c7d2 <CanIl_TxTimerTask+0x112>
					ilTxCyclicCounter(ilTxHnd)--;
 800c7ce:	3801      	subs	r0, #1
 800c7d0:	70d0      	strb	r0, [r2, #3]
				if ((ilTxCyclicCounter(ilTxHnd)==0)||((ilTxState(ilTxHnd) & iTxReqSend)!=0))
 800c7d2:	4a30      	ldr	r2, [pc, #192]	@ (800c894 <CanIl_TxTimerTask+0x1d4>)
 800c7d4:	6812      	ldr	r2, [r2, #0]
 800c7d6:	441a      	add	r2, r3
 800c7d8:	78d0      	ldrb	r0, [r2, #3]
 800c7da:	b118      	cbz	r0, 800c7e4 <CanIl_TxTimerTask+0x124>
 800c7dc:	7890      	ldrb	r0, [r2, #2]
 800c7de:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800c7e2:	d00f      	beq.n	800c804 <CanIl_TxTimerTask+0x144>
					ilTxCyclicCounter(ilTxHnd) = CanIl_GetTxCycCycles(ilTxHnd);
 800c7e4:	482c      	ldr	r0, [pc, #176]	@ (800c898 <CanIl_TxTimerTask+0x1d8>)
 800c7e6:	6800      	ldr	r0, [r0, #0]
 800c7e8:	4408      	add	r0, r1
 800c7ea:	7d00      	ldrb	r0, [r0, #20]
 800c7ec:	70d0      	strb	r0, [r2, #3]
					if ((ilTxState(ilTxHnd) & (iTxCycEveSend | iTxQuickStart))==0)
 800c7ee:	4a29      	ldr	r2, [pc, #164]	@ (800c894 <CanIl_TxTimerTask+0x1d4>)
 800c7f0:	6812      	ldr	r2, [r2, #0]
 800c7f2:	441a      	add	r2, r3
 800c7f4:	7890      	ldrb	r0, [r2, #2]
 800c7f6:	f010 0f12 	tst.w	r0, #18
 800c7fa:	d103      	bne.n	800c804 <CanIl_TxTimerTask+0x144>
						ilTxState(ilTxHnd) |= iTxReqSend;
 800c7fc:	7890      	ldrb	r0, [r2, #2]
 800c7fe:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800c802:	7090      	strb	r0, [r2, #2]
			if	((ilTxState(ilTxHnd) & (iTxCycEveSend | iTxQuickStart))!=0)
 800c804:	4a23      	ldr	r2, [pc, #140]	@ (800c894 <CanIl_TxTimerTask+0x1d4>)
 800c806:	6812      	ldr	r2, [r2, #0]
 800c808:	441a      	add	r2, r3
 800c80a:	7890      	ldrb	r0, [r2, #2]
 800c80c:	f010 0f12 	tst.w	r0, #18
 800c810:	d090      	beq.n	800c734 <CanIl_TxTimerTask+0x74>
				if (ilTxEventCounter(ilTxHnd)!=0) /*iTxCycEveSend*/
 800c812:	7910      	ldrb	r0, [r2, #4]
 800c814:	b108      	cbz	r0, 800c81a <CanIl_TxTimerTask+0x15a>
					ilTxEventCounter(ilTxHnd)--;
 800c816:	3801      	subs	r0, #1
 800c818:	7110      	strb	r0, [r2, #4]
				if(((ilTxState(ilTxHnd) & iTxQuickStart)!=0) && (ilTxEventCounter(ilTxHnd)>0))
 800c81a:	7890      	ldrb	r0, [r2, #2]
 800c81c:	f010 0f10 	tst.w	r0, #16
 800c820:	f43f af68 	beq.w	800c6f4 <CanIl_TxTimerTask+0x34>
 800c824:	7910      	ldrb	r0, [r2, #4]
 800c826:	2800      	cmp	r0, #0
 800c828:	f43f af64 	beq.w	800c6f4 <CanIl_TxTimerTask+0x34>
					if((ilTxEventCounter(ilTxHnd) >= CanIl_GetCycEventTx_Interval_Time())&&((CanIl_GetTxEventCycles(ilTxHnd)-ilTxEventCounter(ilTxHnd)) >= CanIl_GetCycEventTx_Interval_Time()))
 800c82c:	4d1c      	ldr	r5, [pc, #112]	@ (800c8a0 <CanIl_TxTimerTask+0x1e0>)
 800c82e:	682d      	ldr	r5, [r5, #0]
 800c830:	f895 c002 	ldrb.w	ip, [r5, #2]
 800c834:	4560      	cmp	r0, ip
 800c836:	f4ff af4d 	bcc.w	800c6d4 <CanIl_TxTimerTask+0x14>
 800c83a:	4d17      	ldr	r5, [pc, #92]	@ (800c898 <CanIl_TxTimerTask+0x1d8>)
 800c83c:	682d      	ldr	r5, [r5, #0]
 800c83e:	440d      	add	r5, r1
 800c840:	7d6d      	ldrb	r5, [r5, #21]
 800c842:	1a2d      	subs	r5, r5, r0
 800c844:	4565      	cmp	r5, ip
 800c846:	f6ff af45 	blt.w	800c6d4 <CanIl_TxTimerTask+0x14>
						ilTxState(ilTxHnd) |= iTxReqSend;
 800c84a:	7890      	ldrb	r0, [r2, #2]
 800c84c:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800c850:	7090      	strb	r0, [r2, #2]
						ilTxState(ilTxHnd) &=(~ iTxQuickStart);
 800c852:	4a10      	ldr	r2, [pc, #64]	@ (800c894 <CanIl_TxTimerTask+0x1d4>)
 800c854:	6812      	ldr	r2, [r2, #0]
 800c856:	441a      	add	r2, r3
 800c858:	7890      	ldrb	r0, [r2, #2]
 800c85a:	f000 00ef 	and.w	r0, r0, #239	@ 0xef
 800c85e:	7090      	strb	r0, [r2, #2]
 800c860:	e748      	b.n	800c6f4 <CanIl_TxTimerTask+0x34>
					else if((CanIl_GetTxEventCycles(ilTxHnd)-ilTxEventCounter(ilTxHnd)) < CanIl_GetCycEventTx_Interval_Time())
 800c862:	4d0d      	ldr	r5, [pc, #52]	@ (800c898 <CanIl_TxTimerTask+0x1d8>)
 800c864:	682d      	ldr	r5, [r5, #0]
 800c866:	440d      	add	r5, r1
 800c868:	7d6d      	ldrb	r5, [r5, #21]
 800c86a:	1a28      	subs	r0, r5, r0
 800c86c:	4560      	cmp	r0, ip
 800c86e:	f6bf af41 	bge.w	800c6f4 <CanIl_TxTimerTask+0x34>
						ilTxState(ilTxHnd) |= iTxQuickStart;
 800c872:	7890      	ldrb	r0, [r2, #2]
 800c874:	f040 0010 	orr.w	r0, r0, #16
 800c878:	7090      	strb	r0, [r2, #2]
 800c87a:	e73b      	b.n	800c6f4 <CanIl_TxTimerTask+0x34>
			if (((ilTxState(ilTxHnd) & iTxReqSend)!=0) && (ilTxUpdateCounter(ilTxHnd)==0) )
 800c87c:	785b      	ldrb	r3, [r3, #1]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d182      	bne.n	800c788 <CanIl_TxTimerTask+0xc8>
				CanIl_SendMsg(ilTxHnd);
 800c882:	4620      	mov	r0, r4
 800c884:	f7ff fef0 	bl	800c668 <CanIl_SendMsg>
 800c888:	e77e      	b.n	800c788 <CanIl_TxTimerTask+0xc8>
}
 800c88a:	bd38      	pop	{r3, r4, r5, pc}
 800c88c:	200094f2 	.word	0x200094f2
 800c890:	200094f3 	.word	0x200094f3
 800c894:	200094f8 	.word	0x200094f8
 800c898:	200094f4 	.word	0x200094f4
 800c89c:	20004390 	.word	0x20004390
 800c8a0:	20004394 	.word	0x20004394

0800c8a4 <CanIl_TxTask>:
{
 800c8a4:	b508      	push	{r3, lr}
	CanIl_TxStateTask();
 800c8a6:	f7ff fd53 	bl	800c350 <CanIl_TxStateTask>
	CanIl_TxTimerTask();
 800c8aa:	f7ff ff09 	bl	800c6c0 <CanIl_TxTimerTask>
	CanIl_EventMsgCycTxPro();
 800c8ae:	f7ff fd99 	bl	800c3e4 <CanIl_EventMsgCycTxPro>
}
 800c8b2:	bd08      	pop	{r3, pc}

0800c8b4 <UserTimer_CreateDefault>:
*  Parameter   : UserTimer_ID : the No. of the timer defined in enum TIMER_IDS
*  Returns     : void
***********************************************************************/
void UserTimer_CreateDefault(UserTimer_ID_t Timer_ID)
{
	if(Timer_ID < TIMER_MAX) {
 800c8b4:	b9a0      	cbnz	r0, 800c8e0 <UserTimer_CreateDefault+0x2c>
{
 800c8b6:	b410      	push	{r4}
		UserTimer_Status[Timer_ID].Counter = UserTimer_Table[Timer_ID].Period;
 800c8b8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800c8bc:	4909      	ldr	r1, [pc, #36]	@ (800c8e4 <UserTimer_CreateDefault+0x30>)
 800c8be:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c8c2:	684c      	ldr	r4, [r1, #4]
 800c8c4:	4a08      	ldr	r2, [pc, #32]	@ (800c8e8 <UserTimer_CreateDefault+0x34>)
 800c8c6:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 800c8ca:	eb02 008c 	add.w	r0, r2, ip, lsl #2
 800c8ce:	f842 402c 	str.w	r4, [r2, ip, lsl #2]
		UserTimer_Status[Timer_ID].Counter_Backup = UserTimer_Table[Timer_ID].Period;
 800c8d2:	6044      	str	r4, [r0, #4]
		UserTimer_Status[Timer_ID].Type = UserTimer_Table[Timer_ID].Type;
 800c8d4:	7a09      	ldrb	r1, [r1, #8]
 800c8d6:	7201      	strb	r1, [r0, #8]
		UserTimer_Status[Timer_ID].IsActive = 1;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	7243      	strb	r3, [r0, #9]
	}
}
 800c8dc:	bc10      	pop	{r4}
 800c8de:	4770      	bx	lr
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop
 800c8e4:	08012de8 	.word	0x08012de8
 800c8e8:	20009500 	.word	0x20009500

0800c8ec <UserTimer_Initial>:
{
 800c8ec:	b510      	push	{r4, lr}
	for(i = 0x00; i < (uint8_t)TIMER_MAX; i++) {
 800c8ee:	2400      	movs	r4, #0
 800c8f0:	b11c      	cbz	r4, 800c8fa <UserTimer_Initial+0xe>
	UserTimer_TickCounter = 0;
 800c8f2:	4b0f      	ldr	r3, [pc, #60]	@ (800c930 <UserTimer_Initial+0x44>)
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	601a      	str	r2, [r3, #0]
}
 800c8f8:	bd10      	pop	{r4, pc}
		UserTimer_Status[i].Counter = 0;
 800c8fa:	480e      	ldr	r0, [pc, #56]	@ (800c934 <UserTimer_Initial+0x48>)
 800c8fc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800c900:	0099      	lsls	r1, r3, #2
 800c902:	1843      	adds	r3, r0, r1
 800c904:	2200      	movs	r2, #0
 800c906:	5042      	str	r2, [r0, r1]
		UserTimer_Status[i].Counter_Backup = 0;
 800c908:	605a      	str	r2, [r3, #4]
		UserTimer_Status[i].Type = E_UT_TYPE_ONE_SHOT;
 800c90a:	2101      	movs	r1, #1
 800c90c:	7219      	strb	r1, [r3, #8]
		UserTimer_Status[i].IsActive = 0;
 800c90e:	725a      	strb	r2, [r3, #9]
		if (UserTimer_Table[i].DefaultState == DEFAULT_START) {
 800c910:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800c914:	009a      	lsls	r2, r3, #2
 800c916:	4b08      	ldr	r3, [pc, #32]	@ (800c938 <UserTimer_Initial+0x4c>)
 800c918:	4413      	add	r3, r2
 800c91a:	7a5b      	ldrb	r3, [r3, #9]
 800c91c:	428b      	cmp	r3, r1
 800c91e:	d002      	beq.n	800c926 <UserTimer_Initial+0x3a>
	for(i = 0x00; i < (uint8_t)TIMER_MAX; i++) {
 800c920:	3401      	adds	r4, #1
 800c922:	b2e4      	uxtb	r4, r4
 800c924:	e7e4      	b.n	800c8f0 <UserTimer_Initial+0x4>
			UserTimer_CreateDefault((UserTimer_ID_t)i);
 800c926:	4620      	mov	r0, r4
 800c928:	f7ff ffc4 	bl	800c8b4 <UserTimer_CreateDefault>
 800c92c:	e7f8      	b.n	800c920 <UserTimer_Initial+0x34>
 800c92e:	bf00      	nop
 800c930:	200094fc 	.word	0x200094fc
 800c934:	20009500 	.word	0x20009500
 800c938:	08012de8 	.word	0x08012de8

0800c93c <UserTimer_Handler>:
*  Description : run in main(), it will call function if timeout
*  Parameter   : void
*  Returns     : void
***********************************************************************/
void UserTimer_Handler(void)
{
 800c93c:	b510      	push	{r4, lr}
	uint8_t i;

	for(i = 0x00; i < (uint8_t)TIMER_MAX; i++) {
 800c93e:	2400      	movs	r4, #0
 800c940:	b104      	cbz	r4, 800c944 <UserTimer_Handler+0x8>

            UserTimer_Table[i].TimeoutFunc();
            
		}
	}
}
 800c942:	bd10      	pop	{r4, pc}
		if((UserTimer_Status[i].IsActive) && (UserTimer_Status[i].Counter == 0u)) {
 800c944:	4622      	mov	r2, r4
 800c946:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800c94a:	0099      	lsls	r1, r3, #2
 800c94c:	4b15      	ldr	r3, [pc, #84]	@ (800c9a4 <UserTimer_Handler+0x68>)
 800c94e:	440b      	add	r3, r1
 800c950:	7a5b      	ldrb	r3, [r3, #9]
 800c952:	b1cb      	cbz	r3, 800c988 <UserTimer_Handler+0x4c>
 800c954:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800c958:	008b      	lsls	r3, r1, #2
 800c95a:	4912      	ldr	r1, [pc, #72]	@ (800c9a4 <UserTimer_Handler+0x68>)
 800c95c:	58cb      	ldr	r3, [r1, r3]
 800c95e:	b99b      	cbnz	r3, 800c988 <UserTimer_Handler+0x4c>
            if(UserTimer_Status[i].Type == E_UT_TYPE_PERIODIC) {
 800c960:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800c964:	0099      	lsls	r1, r3, #2
 800c966:	4b0f      	ldr	r3, [pc, #60]	@ (800c9a4 <UserTimer_Handler+0x68>)
 800c968:	440b      	add	r3, r1
 800c96a:	7a1b      	ldrb	r3, [r3, #8]
 800c96c:	b97b      	cbnz	r3, 800c98e <UserTimer_Handler+0x52>
                UserTimer_Status[i].Counter = UserTimer_Status[i].Counter_Backup;
 800c96e:	490d      	ldr	r1, [pc, #52]	@ (800c9a4 <UserTimer_Handler+0x68>)
 800c970:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800c974:	0083      	lsls	r3, r0, #2
 800c976:	18c8      	adds	r0, r1, r3
 800c978:	6840      	ldr	r0, [r0, #4]
 800c97a:	50c8      	str	r0, [r1, r3]
            UserTimer_Table[i].TimeoutFunc();
 800c97c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800c980:	0093      	lsls	r3, r2, #2
 800c982:	4a09      	ldr	r2, [pc, #36]	@ (800c9a8 <UserTimer_Handler+0x6c>)
 800c984:	58d3      	ldr	r3, [r2, r3]
 800c986:	4798      	blx	r3
	for(i = 0x00; i < (uint8_t)TIMER_MAX; i++) {
 800c988:	3401      	adds	r4, #1
 800c98a:	b2e4      	uxtb	r4, r4
 800c98c:	e7d8      	b.n	800c940 <UserTimer_Handler+0x4>
                UserTimer_Status[i].Counter = 0;
 800c98e:	4805      	ldr	r0, [pc, #20]	@ (800c9a4 <UserTimer_Handler+0x68>)
 800c990:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800c994:	008b      	lsls	r3, r1, #2
 800c996:	eb00 0c03 	add.w	ip, r0, r3
 800c99a:	2100      	movs	r1, #0
 800c99c:	50c1      	str	r1, [r0, r3]
                UserTimer_Status[i].IsActive = 0;
 800c99e:	f88c 1009 	strb.w	r1, [ip, #9]
 800c9a2:	e7eb      	b.n	800c97c <UserTimer_Handler+0x40>
 800c9a4:	20009500 	.word	0x20009500
 800c9a8:	08012de8 	.word	0x08012de8

0800c9ac <UserTimer_SetPeriod>:
	return (uint32_t)(UserTimer_Status[Timer_ID].Counter_Backup);
}

int UserTimer_SetPeriod(UserTimer_ID_t Timer_ID, uint16_t Period)
{
    if (Timer_ID >= TIMER_MAX) return -1;
 800c9ac:	b928      	cbnz	r0, 800c9ba <UserTimer_SetPeriod+0xe>

    UserTimer_Status[Timer_ID].Counter = Period;
 800c9ae:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800c9b2:	4a03      	ldr	r2, [pc, #12]	@ (800c9c0 <UserTimer_SetPeriod+0x14>)
 800c9b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return 0;
 800c9b8:	4770      	bx	lr
    if (Timer_ID >= TIMER_MAX) return -1;
 800c9ba:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c9be:	4770      	bx	lr
 800c9c0:	20009500 	.word	0x20009500

0800c9c4 <LedHeart_Tick_1000ms_TimeoutFunc>:

/* create timer 2 if timer 1 timeout */
uint8_t cnt = 0,i = 0;
uint16_t heartled_delaytime[] = {1000, 200, 200, 200, 200, 2000 };
void LedHeart_Tick_1000ms_TimeoutFunc(void)
{
 800c9c4:	b538      	push	{r3, r4, r5, lr}
    UserTimer_SetPeriod(E_TIMER_LED_HEART,heartled_delaytime[i++]);
 800c9c6:	4c0f      	ldr	r4, [pc, #60]	@ (800ca04 <LedHeart_Tick_1000ms_TimeoutFunc+0x40>)
 800c9c8:	7823      	ldrb	r3, [r4, #0]
 800c9ca:	1c5a      	adds	r2, r3, #1
 800c9cc:	7022      	strb	r2, [r4, #0]
 800c9ce:	4a0e      	ldr	r2, [pc, #56]	@ (800ca08 <LedHeart_Tick_1000ms_TimeoutFunc+0x44>)
 800c9d0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800c9d4:	2000      	movs	r0, #0
 800c9d6:	f7ff ffe9 	bl	800c9ac <UserTimer_SetPeriod>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, (GPIO_PinState)!cnt);
 800c9da:	4d0c      	ldr	r5, [pc, #48]	@ (800ca0c <LedHeart_Tick_1000ms_TimeoutFunc+0x48>)
 800c9dc:	782a      	ldrb	r2, [r5, #0]
 800c9de:	fab2 f282 	clz	r2, r2
 800c9e2:	0952      	lsrs	r2, r2, #5
 800c9e4:	2108      	movs	r1, #8
 800c9e6:	480a      	ldr	r0, [pc, #40]	@ (800ca10 <LedHeart_Tick_1000ms_TimeoutFunc+0x4c>)
 800c9e8:	f7fd fb07 	bl	8009ffa <HAL_GPIO_WritePin>
    cnt = !cnt;
 800c9ec:	782b      	ldrb	r3, [r5, #0]
 800c9ee:	fab3 f383 	clz	r3, r3
 800c9f2:	095b      	lsrs	r3, r3, #5
 800c9f4:	702b      	strb	r3, [r5, #0]
    if(i> sizeof(heartled_delaytime)/sizeof(uint16_t))
 800c9f6:	7823      	ldrb	r3, [r4, #0]
 800c9f8:	2b06      	cmp	r3, #6
 800c9fa:	d902      	bls.n	800ca02 <LedHeart_Tick_1000ms_TimeoutFunc+0x3e>
    {
        i = 0;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	7023      	strb	r3, [r4, #0]
        cnt = 0;
 800ca00:	702b      	strb	r3, [r5, #0]
    }
}
 800ca02:	bd38      	pop	{r3, r4, r5, pc}
 800ca04:	2000950c 	.word	0x2000950c
 800ca08:	20004398 	.word	0x20004398
 800ca0c:	2000950d 	.word	0x2000950d
 800ca10:	40011000 	.word	0x40011000

0800ca14 <__cvt>:
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca1a:	461d      	mov	r5, r3
 800ca1c:	bfbb      	ittet	lt
 800ca1e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800ca22:	461d      	movlt	r5, r3
 800ca24:	2300      	movge	r3, #0
 800ca26:	232d      	movlt	r3, #45	@ 0x2d
 800ca28:	b088      	sub	sp, #32
 800ca2a:	4614      	mov	r4, r2
 800ca2c:	bfb8      	it	lt
 800ca2e:	4614      	movlt	r4, r2
 800ca30:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ca32:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800ca34:	7013      	strb	r3, [r2, #0]
 800ca36:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ca38:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800ca3c:	f023 0820 	bic.w	r8, r3, #32
 800ca40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ca44:	d005      	beq.n	800ca52 <__cvt+0x3e>
 800ca46:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ca4a:	d100      	bne.n	800ca4e <__cvt+0x3a>
 800ca4c:	3601      	adds	r6, #1
 800ca4e:	2302      	movs	r3, #2
 800ca50:	e000      	b.n	800ca54 <__cvt+0x40>
 800ca52:	2303      	movs	r3, #3
 800ca54:	aa07      	add	r2, sp, #28
 800ca56:	9204      	str	r2, [sp, #16]
 800ca58:	aa06      	add	r2, sp, #24
 800ca5a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800ca5e:	e9cd 3600 	strd	r3, r6, [sp]
 800ca62:	4622      	mov	r2, r4
 800ca64:	462b      	mov	r3, r5
 800ca66:	f001 f97b 	bl	800dd60 <_dtoa_r>
 800ca6a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ca6e:	4607      	mov	r7, r0
 800ca70:	d119      	bne.n	800caa6 <__cvt+0x92>
 800ca72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ca74:	07db      	lsls	r3, r3, #31
 800ca76:	d50e      	bpl.n	800ca96 <__cvt+0x82>
 800ca78:	eb00 0906 	add.w	r9, r0, r6
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	2300      	movs	r3, #0
 800ca80:	4620      	mov	r0, r4
 800ca82:	4629      	mov	r1, r5
 800ca84:	f7f4 f800 	bl	8000a88 <__aeabi_dcmpeq>
 800ca88:	b108      	cbz	r0, 800ca8e <__cvt+0x7a>
 800ca8a:	f8cd 901c 	str.w	r9, [sp, #28]
 800ca8e:	2230      	movs	r2, #48	@ 0x30
 800ca90:	9b07      	ldr	r3, [sp, #28]
 800ca92:	454b      	cmp	r3, r9
 800ca94:	d31e      	bcc.n	800cad4 <__cvt+0xc0>
 800ca96:	4638      	mov	r0, r7
 800ca98:	9b07      	ldr	r3, [sp, #28]
 800ca9a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ca9c:	1bdb      	subs	r3, r3, r7
 800ca9e:	6013      	str	r3, [r2, #0]
 800caa0:	b008      	add	sp, #32
 800caa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caa6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800caaa:	eb00 0906 	add.w	r9, r0, r6
 800caae:	d1e5      	bne.n	800ca7c <__cvt+0x68>
 800cab0:	7803      	ldrb	r3, [r0, #0]
 800cab2:	2b30      	cmp	r3, #48	@ 0x30
 800cab4:	d10a      	bne.n	800cacc <__cvt+0xb8>
 800cab6:	2200      	movs	r2, #0
 800cab8:	2300      	movs	r3, #0
 800caba:	4620      	mov	r0, r4
 800cabc:	4629      	mov	r1, r5
 800cabe:	f7f3 ffe3 	bl	8000a88 <__aeabi_dcmpeq>
 800cac2:	b918      	cbnz	r0, 800cacc <__cvt+0xb8>
 800cac4:	f1c6 0601 	rsb	r6, r6, #1
 800cac8:	f8ca 6000 	str.w	r6, [sl]
 800cacc:	f8da 3000 	ldr.w	r3, [sl]
 800cad0:	4499      	add	r9, r3
 800cad2:	e7d3      	b.n	800ca7c <__cvt+0x68>
 800cad4:	1c59      	adds	r1, r3, #1
 800cad6:	9107      	str	r1, [sp, #28]
 800cad8:	701a      	strb	r2, [r3, #0]
 800cada:	e7d9      	b.n	800ca90 <__cvt+0x7c>

0800cadc <__exponent>:
 800cadc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cade:	2900      	cmp	r1, #0
 800cae0:	bfb6      	itet	lt
 800cae2:	232d      	movlt	r3, #45	@ 0x2d
 800cae4:	232b      	movge	r3, #43	@ 0x2b
 800cae6:	4249      	neglt	r1, r1
 800cae8:	2909      	cmp	r1, #9
 800caea:	7002      	strb	r2, [r0, #0]
 800caec:	7043      	strb	r3, [r0, #1]
 800caee:	dd29      	ble.n	800cb44 <__exponent+0x68>
 800caf0:	f10d 0307 	add.w	r3, sp, #7
 800caf4:	461d      	mov	r5, r3
 800caf6:	270a      	movs	r7, #10
 800caf8:	fbb1 f6f7 	udiv	r6, r1, r7
 800cafc:	461a      	mov	r2, r3
 800cafe:	fb07 1416 	mls	r4, r7, r6, r1
 800cb02:	3430      	adds	r4, #48	@ 0x30
 800cb04:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cb08:	460c      	mov	r4, r1
 800cb0a:	2c63      	cmp	r4, #99	@ 0x63
 800cb0c:	4631      	mov	r1, r6
 800cb0e:	f103 33ff 	add.w	r3, r3, #4294967295
 800cb12:	dcf1      	bgt.n	800caf8 <__exponent+0x1c>
 800cb14:	3130      	adds	r1, #48	@ 0x30
 800cb16:	1e94      	subs	r4, r2, #2
 800cb18:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cb1c:	4623      	mov	r3, r4
 800cb1e:	1c41      	adds	r1, r0, #1
 800cb20:	42ab      	cmp	r3, r5
 800cb22:	d30a      	bcc.n	800cb3a <__exponent+0x5e>
 800cb24:	f10d 0309 	add.w	r3, sp, #9
 800cb28:	1a9b      	subs	r3, r3, r2
 800cb2a:	42ac      	cmp	r4, r5
 800cb2c:	bf88      	it	hi
 800cb2e:	2300      	movhi	r3, #0
 800cb30:	3302      	adds	r3, #2
 800cb32:	4403      	add	r3, r0
 800cb34:	1a18      	subs	r0, r3, r0
 800cb36:	b003      	add	sp, #12
 800cb38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb3a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cb3e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cb42:	e7ed      	b.n	800cb20 <__exponent+0x44>
 800cb44:	2330      	movs	r3, #48	@ 0x30
 800cb46:	3130      	adds	r1, #48	@ 0x30
 800cb48:	7083      	strb	r3, [r0, #2]
 800cb4a:	70c1      	strb	r1, [r0, #3]
 800cb4c:	1d03      	adds	r3, r0, #4
 800cb4e:	e7f1      	b.n	800cb34 <__exponent+0x58>

0800cb50 <_printf_float>:
 800cb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb54:	b091      	sub	sp, #68	@ 0x44
 800cb56:	460c      	mov	r4, r1
 800cb58:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800cb5c:	4616      	mov	r6, r2
 800cb5e:	461f      	mov	r7, r3
 800cb60:	4605      	mov	r5, r0
 800cb62:	f000 ffdd 	bl	800db20 <_localeconv_r>
 800cb66:	6803      	ldr	r3, [r0, #0]
 800cb68:	4618      	mov	r0, r3
 800cb6a:	9308      	str	r3, [sp, #32]
 800cb6c:	f7f3 fb60 	bl	8000230 <strlen>
 800cb70:	2300      	movs	r3, #0
 800cb72:	930e      	str	r3, [sp, #56]	@ 0x38
 800cb74:	f8d8 3000 	ldr.w	r3, [r8]
 800cb78:	9009      	str	r0, [sp, #36]	@ 0x24
 800cb7a:	3307      	adds	r3, #7
 800cb7c:	f023 0307 	bic.w	r3, r3, #7
 800cb80:	f103 0208 	add.w	r2, r3, #8
 800cb84:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cb88:	f8d4 b000 	ldr.w	fp, [r4]
 800cb8c:	f8c8 2000 	str.w	r2, [r8]
 800cb90:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cb98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb9a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800cb9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cba2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cba6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cbaa:	4b9c      	ldr	r3, [pc, #624]	@ (800ce1c <_printf_float+0x2cc>)
 800cbac:	f7f3 ff9e 	bl	8000aec <__aeabi_dcmpun>
 800cbb0:	bb70      	cbnz	r0, 800cc10 <_printf_float+0xc0>
 800cbb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cbb6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbba:	4b98      	ldr	r3, [pc, #608]	@ (800ce1c <_printf_float+0x2cc>)
 800cbbc:	f7f3 ff78 	bl	8000ab0 <__aeabi_dcmple>
 800cbc0:	bb30      	cbnz	r0, 800cc10 <_printf_float+0xc0>
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	4640      	mov	r0, r8
 800cbc8:	4649      	mov	r1, r9
 800cbca:	f7f3 ff67 	bl	8000a9c <__aeabi_dcmplt>
 800cbce:	b110      	cbz	r0, 800cbd6 <_printf_float+0x86>
 800cbd0:	232d      	movs	r3, #45	@ 0x2d
 800cbd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbd6:	4a92      	ldr	r2, [pc, #584]	@ (800ce20 <_printf_float+0x2d0>)
 800cbd8:	4b92      	ldr	r3, [pc, #584]	@ (800ce24 <_printf_float+0x2d4>)
 800cbda:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cbde:	bf8c      	ite	hi
 800cbe0:	4690      	movhi	r8, r2
 800cbe2:	4698      	movls	r8, r3
 800cbe4:	2303      	movs	r3, #3
 800cbe6:	f04f 0900 	mov.w	r9, #0
 800cbea:	6123      	str	r3, [r4, #16]
 800cbec:	f02b 0304 	bic.w	r3, fp, #4
 800cbf0:	6023      	str	r3, [r4, #0]
 800cbf2:	4633      	mov	r3, r6
 800cbf4:	4621      	mov	r1, r4
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	9700      	str	r7, [sp, #0]
 800cbfa:	aa0f      	add	r2, sp, #60	@ 0x3c
 800cbfc:	f000 f9d4 	bl	800cfa8 <_printf_common>
 800cc00:	3001      	adds	r0, #1
 800cc02:	f040 8090 	bne.w	800cd26 <_printf_float+0x1d6>
 800cc06:	f04f 30ff 	mov.w	r0, #4294967295
 800cc0a:	b011      	add	sp, #68	@ 0x44
 800cc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc10:	4642      	mov	r2, r8
 800cc12:	464b      	mov	r3, r9
 800cc14:	4640      	mov	r0, r8
 800cc16:	4649      	mov	r1, r9
 800cc18:	f7f3 ff68 	bl	8000aec <__aeabi_dcmpun>
 800cc1c:	b148      	cbz	r0, 800cc32 <_printf_float+0xe2>
 800cc1e:	464b      	mov	r3, r9
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	bfb8      	it	lt
 800cc24:	232d      	movlt	r3, #45	@ 0x2d
 800cc26:	4a80      	ldr	r2, [pc, #512]	@ (800ce28 <_printf_float+0x2d8>)
 800cc28:	bfb8      	it	lt
 800cc2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cc2e:	4b7f      	ldr	r3, [pc, #508]	@ (800ce2c <_printf_float+0x2dc>)
 800cc30:	e7d3      	b.n	800cbda <_printf_float+0x8a>
 800cc32:	6863      	ldr	r3, [r4, #4]
 800cc34:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800cc38:	1c5a      	adds	r2, r3, #1
 800cc3a:	d13f      	bne.n	800ccbc <_printf_float+0x16c>
 800cc3c:	2306      	movs	r3, #6
 800cc3e:	6063      	str	r3, [r4, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800cc46:	6023      	str	r3, [r4, #0]
 800cc48:	9206      	str	r2, [sp, #24]
 800cc4a:	aa0e      	add	r2, sp, #56	@ 0x38
 800cc4c:	e9cd a204 	strd	sl, r2, [sp, #16]
 800cc50:	aa0d      	add	r2, sp, #52	@ 0x34
 800cc52:	9203      	str	r2, [sp, #12]
 800cc54:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800cc58:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800cc5c:	6863      	ldr	r3, [r4, #4]
 800cc5e:	4642      	mov	r2, r8
 800cc60:	9300      	str	r3, [sp, #0]
 800cc62:	4628      	mov	r0, r5
 800cc64:	464b      	mov	r3, r9
 800cc66:	910a      	str	r1, [sp, #40]	@ 0x28
 800cc68:	f7ff fed4 	bl	800ca14 <__cvt>
 800cc6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cc6e:	4680      	mov	r8, r0
 800cc70:	2947      	cmp	r1, #71	@ 0x47
 800cc72:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800cc74:	d128      	bne.n	800ccc8 <_printf_float+0x178>
 800cc76:	1cc8      	adds	r0, r1, #3
 800cc78:	db02      	blt.n	800cc80 <_printf_float+0x130>
 800cc7a:	6863      	ldr	r3, [r4, #4]
 800cc7c:	4299      	cmp	r1, r3
 800cc7e:	dd40      	ble.n	800cd02 <_printf_float+0x1b2>
 800cc80:	f1aa 0a02 	sub.w	sl, sl, #2
 800cc84:	fa5f fa8a 	uxtb.w	sl, sl
 800cc88:	4652      	mov	r2, sl
 800cc8a:	3901      	subs	r1, #1
 800cc8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cc90:	910d      	str	r1, [sp, #52]	@ 0x34
 800cc92:	f7ff ff23 	bl	800cadc <__exponent>
 800cc96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc98:	4681      	mov	r9, r0
 800cc9a:	1813      	adds	r3, r2, r0
 800cc9c:	2a01      	cmp	r2, #1
 800cc9e:	6123      	str	r3, [r4, #16]
 800cca0:	dc02      	bgt.n	800cca8 <_printf_float+0x158>
 800cca2:	6822      	ldr	r2, [r4, #0]
 800cca4:	07d2      	lsls	r2, r2, #31
 800cca6:	d501      	bpl.n	800ccac <_printf_float+0x15c>
 800cca8:	3301      	adds	r3, #1
 800ccaa:	6123      	str	r3, [r4, #16]
 800ccac:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d09e      	beq.n	800cbf2 <_printf_float+0xa2>
 800ccb4:	232d      	movs	r3, #45	@ 0x2d
 800ccb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccba:	e79a      	b.n	800cbf2 <_printf_float+0xa2>
 800ccbc:	2947      	cmp	r1, #71	@ 0x47
 800ccbe:	d1bf      	bne.n	800cc40 <_printf_float+0xf0>
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d1bd      	bne.n	800cc40 <_printf_float+0xf0>
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e7ba      	b.n	800cc3e <_printf_float+0xee>
 800ccc8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cccc:	d9dc      	bls.n	800cc88 <_printf_float+0x138>
 800ccce:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ccd2:	d118      	bne.n	800cd06 <_printf_float+0x1b6>
 800ccd4:	2900      	cmp	r1, #0
 800ccd6:	6863      	ldr	r3, [r4, #4]
 800ccd8:	dd0b      	ble.n	800ccf2 <_printf_float+0x1a2>
 800ccda:	6121      	str	r1, [r4, #16]
 800ccdc:	b913      	cbnz	r3, 800cce4 <_printf_float+0x194>
 800ccde:	6822      	ldr	r2, [r4, #0]
 800cce0:	07d0      	lsls	r0, r2, #31
 800cce2:	d502      	bpl.n	800ccea <_printf_float+0x19a>
 800cce4:	3301      	adds	r3, #1
 800cce6:	440b      	add	r3, r1
 800cce8:	6123      	str	r3, [r4, #16]
 800ccea:	f04f 0900 	mov.w	r9, #0
 800ccee:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ccf0:	e7dc      	b.n	800ccac <_printf_float+0x15c>
 800ccf2:	b913      	cbnz	r3, 800ccfa <_printf_float+0x1aa>
 800ccf4:	6822      	ldr	r2, [r4, #0]
 800ccf6:	07d2      	lsls	r2, r2, #31
 800ccf8:	d501      	bpl.n	800ccfe <_printf_float+0x1ae>
 800ccfa:	3302      	adds	r3, #2
 800ccfc:	e7f4      	b.n	800cce8 <_printf_float+0x198>
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e7f2      	b.n	800cce8 <_printf_float+0x198>
 800cd02:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cd06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd08:	4299      	cmp	r1, r3
 800cd0a:	db05      	blt.n	800cd18 <_printf_float+0x1c8>
 800cd0c:	6823      	ldr	r3, [r4, #0]
 800cd0e:	6121      	str	r1, [r4, #16]
 800cd10:	07d8      	lsls	r0, r3, #31
 800cd12:	d5ea      	bpl.n	800ccea <_printf_float+0x19a>
 800cd14:	1c4b      	adds	r3, r1, #1
 800cd16:	e7e7      	b.n	800cce8 <_printf_float+0x198>
 800cd18:	2900      	cmp	r1, #0
 800cd1a:	bfcc      	ite	gt
 800cd1c:	2201      	movgt	r2, #1
 800cd1e:	f1c1 0202 	rsble	r2, r1, #2
 800cd22:	4413      	add	r3, r2
 800cd24:	e7e0      	b.n	800cce8 <_printf_float+0x198>
 800cd26:	6823      	ldr	r3, [r4, #0]
 800cd28:	055a      	lsls	r2, r3, #21
 800cd2a:	d407      	bmi.n	800cd3c <_printf_float+0x1ec>
 800cd2c:	6923      	ldr	r3, [r4, #16]
 800cd2e:	4642      	mov	r2, r8
 800cd30:	4631      	mov	r1, r6
 800cd32:	4628      	mov	r0, r5
 800cd34:	47b8      	blx	r7
 800cd36:	3001      	adds	r0, #1
 800cd38:	d12b      	bne.n	800cd92 <_printf_float+0x242>
 800cd3a:	e764      	b.n	800cc06 <_printf_float+0xb6>
 800cd3c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cd40:	f240 80dc 	bls.w	800cefc <_printf_float+0x3ac>
 800cd44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cd48:	2200      	movs	r2, #0
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	f7f3 fe9c 	bl	8000a88 <__aeabi_dcmpeq>
 800cd50:	2800      	cmp	r0, #0
 800cd52:	d033      	beq.n	800cdbc <_printf_float+0x26c>
 800cd54:	2301      	movs	r3, #1
 800cd56:	4631      	mov	r1, r6
 800cd58:	4628      	mov	r0, r5
 800cd5a:	4a35      	ldr	r2, [pc, #212]	@ (800ce30 <_printf_float+0x2e0>)
 800cd5c:	47b8      	blx	r7
 800cd5e:	3001      	adds	r0, #1
 800cd60:	f43f af51 	beq.w	800cc06 <_printf_float+0xb6>
 800cd64:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800cd68:	4543      	cmp	r3, r8
 800cd6a:	db02      	blt.n	800cd72 <_printf_float+0x222>
 800cd6c:	6823      	ldr	r3, [r4, #0]
 800cd6e:	07d8      	lsls	r0, r3, #31
 800cd70:	d50f      	bpl.n	800cd92 <_printf_float+0x242>
 800cd72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cd76:	4631      	mov	r1, r6
 800cd78:	4628      	mov	r0, r5
 800cd7a:	47b8      	blx	r7
 800cd7c:	3001      	adds	r0, #1
 800cd7e:	f43f af42 	beq.w	800cc06 <_printf_float+0xb6>
 800cd82:	f04f 0900 	mov.w	r9, #0
 800cd86:	f108 38ff 	add.w	r8, r8, #4294967295
 800cd8a:	f104 0a1a 	add.w	sl, r4, #26
 800cd8e:	45c8      	cmp	r8, r9
 800cd90:	dc09      	bgt.n	800cda6 <_printf_float+0x256>
 800cd92:	6823      	ldr	r3, [r4, #0]
 800cd94:	079b      	lsls	r3, r3, #30
 800cd96:	f100 8102 	bmi.w	800cf9e <_printf_float+0x44e>
 800cd9a:	68e0      	ldr	r0, [r4, #12]
 800cd9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd9e:	4298      	cmp	r0, r3
 800cda0:	bfb8      	it	lt
 800cda2:	4618      	movlt	r0, r3
 800cda4:	e731      	b.n	800cc0a <_printf_float+0xba>
 800cda6:	2301      	movs	r3, #1
 800cda8:	4652      	mov	r2, sl
 800cdaa:	4631      	mov	r1, r6
 800cdac:	4628      	mov	r0, r5
 800cdae:	47b8      	blx	r7
 800cdb0:	3001      	adds	r0, #1
 800cdb2:	f43f af28 	beq.w	800cc06 <_printf_float+0xb6>
 800cdb6:	f109 0901 	add.w	r9, r9, #1
 800cdba:	e7e8      	b.n	800cd8e <_printf_float+0x23e>
 800cdbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	dc38      	bgt.n	800ce34 <_printf_float+0x2e4>
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	4631      	mov	r1, r6
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	4a19      	ldr	r2, [pc, #100]	@ (800ce30 <_printf_float+0x2e0>)
 800cdca:	47b8      	blx	r7
 800cdcc:	3001      	adds	r0, #1
 800cdce:	f43f af1a 	beq.w	800cc06 <_printf_float+0xb6>
 800cdd2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800cdd6:	ea59 0303 	orrs.w	r3, r9, r3
 800cdda:	d102      	bne.n	800cde2 <_printf_float+0x292>
 800cddc:	6823      	ldr	r3, [r4, #0]
 800cdde:	07d9      	lsls	r1, r3, #31
 800cde0:	d5d7      	bpl.n	800cd92 <_printf_float+0x242>
 800cde2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cde6:	4631      	mov	r1, r6
 800cde8:	4628      	mov	r0, r5
 800cdea:	47b8      	blx	r7
 800cdec:	3001      	adds	r0, #1
 800cdee:	f43f af0a 	beq.w	800cc06 <_printf_float+0xb6>
 800cdf2:	f04f 0a00 	mov.w	sl, #0
 800cdf6:	f104 0b1a 	add.w	fp, r4, #26
 800cdfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cdfc:	425b      	negs	r3, r3
 800cdfe:	4553      	cmp	r3, sl
 800ce00:	dc01      	bgt.n	800ce06 <_printf_float+0x2b6>
 800ce02:	464b      	mov	r3, r9
 800ce04:	e793      	b.n	800cd2e <_printf_float+0x1de>
 800ce06:	2301      	movs	r3, #1
 800ce08:	465a      	mov	r2, fp
 800ce0a:	4631      	mov	r1, r6
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	47b8      	blx	r7
 800ce10:	3001      	adds	r0, #1
 800ce12:	f43f aef8 	beq.w	800cc06 <_printf_float+0xb6>
 800ce16:	f10a 0a01 	add.w	sl, sl, #1
 800ce1a:	e7ee      	b.n	800cdfa <_printf_float+0x2aa>
 800ce1c:	7fefffff 	.word	0x7fefffff
 800ce20:	08012df8 	.word	0x08012df8
 800ce24:	08012df4 	.word	0x08012df4
 800ce28:	08012e00 	.word	0x08012e00
 800ce2c:	08012dfc 	.word	0x08012dfc
 800ce30:	08012e04 	.word	0x08012e04
 800ce34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ce36:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ce3a:	4553      	cmp	r3, sl
 800ce3c:	bfa8      	it	ge
 800ce3e:	4653      	movge	r3, sl
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	4699      	mov	r9, r3
 800ce44:	dc36      	bgt.n	800ceb4 <_printf_float+0x364>
 800ce46:	f04f 0b00 	mov.w	fp, #0
 800ce4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce4e:	f104 021a 	add.w	r2, r4, #26
 800ce52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ce54:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce56:	eba3 0309 	sub.w	r3, r3, r9
 800ce5a:	455b      	cmp	r3, fp
 800ce5c:	dc31      	bgt.n	800cec2 <_printf_float+0x372>
 800ce5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce60:	459a      	cmp	sl, r3
 800ce62:	dc3a      	bgt.n	800ceda <_printf_float+0x38a>
 800ce64:	6823      	ldr	r3, [r4, #0]
 800ce66:	07da      	lsls	r2, r3, #31
 800ce68:	d437      	bmi.n	800ceda <_printf_float+0x38a>
 800ce6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce6c:	ebaa 0903 	sub.w	r9, sl, r3
 800ce70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce72:	ebaa 0303 	sub.w	r3, sl, r3
 800ce76:	4599      	cmp	r9, r3
 800ce78:	bfa8      	it	ge
 800ce7a:	4699      	movge	r9, r3
 800ce7c:	f1b9 0f00 	cmp.w	r9, #0
 800ce80:	dc33      	bgt.n	800ceea <_printf_float+0x39a>
 800ce82:	f04f 0800 	mov.w	r8, #0
 800ce86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce8a:	f104 0b1a 	add.w	fp, r4, #26
 800ce8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce90:	ebaa 0303 	sub.w	r3, sl, r3
 800ce94:	eba3 0309 	sub.w	r3, r3, r9
 800ce98:	4543      	cmp	r3, r8
 800ce9a:	f77f af7a 	ble.w	800cd92 <_printf_float+0x242>
 800ce9e:	2301      	movs	r3, #1
 800cea0:	465a      	mov	r2, fp
 800cea2:	4631      	mov	r1, r6
 800cea4:	4628      	mov	r0, r5
 800cea6:	47b8      	blx	r7
 800cea8:	3001      	adds	r0, #1
 800ceaa:	f43f aeac 	beq.w	800cc06 <_printf_float+0xb6>
 800ceae:	f108 0801 	add.w	r8, r8, #1
 800ceb2:	e7ec      	b.n	800ce8e <_printf_float+0x33e>
 800ceb4:	4642      	mov	r2, r8
 800ceb6:	4631      	mov	r1, r6
 800ceb8:	4628      	mov	r0, r5
 800ceba:	47b8      	blx	r7
 800cebc:	3001      	adds	r0, #1
 800cebe:	d1c2      	bne.n	800ce46 <_printf_float+0x2f6>
 800cec0:	e6a1      	b.n	800cc06 <_printf_float+0xb6>
 800cec2:	2301      	movs	r3, #1
 800cec4:	4631      	mov	r1, r6
 800cec6:	4628      	mov	r0, r5
 800cec8:	920a      	str	r2, [sp, #40]	@ 0x28
 800ceca:	47b8      	blx	r7
 800cecc:	3001      	adds	r0, #1
 800cece:	f43f ae9a 	beq.w	800cc06 <_printf_float+0xb6>
 800ced2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ced4:	f10b 0b01 	add.w	fp, fp, #1
 800ced8:	e7bb      	b.n	800ce52 <_printf_float+0x302>
 800ceda:	4631      	mov	r1, r6
 800cedc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cee0:	4628      	mov	r0, r5
 800cee2:	47b8      	blx	r7
 800cee4:	3001      	adds	r0, #1
 800cee6:	d1c0      	bne.n	800ce6a <_printf_float+0x31a>
 800cee8:	e68d      	b.n	800cc06 <_printf_float+0xb6>
 800ceea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ceec:	464b      	mov	r3, r9
 800ceee:	4631      	mov	r1, r6
 800cef0:	4628      	mov	r0, r5
 800cef2:	4442      	add	r2, r8
 800cef4:	47b8      	blx	r7
 800cef6:	3001      	adds	r0, #1
 800cef8:	d1c3      	bne.n	800ce82 <_printf_float+0x332>
 800cefa:	e684      	b.n	800cc06 <_printf_float+0xb6>
 800cefc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800cf00:	f1ba 0f01 	cmp.w	sl, #1
 800cf04:	dc01      	bgt.n	800cf0a <_printf_float+0x3ba>
 800cf06:	07db      	lsls	r3, r3, #31
 800cf08:	d536      	bpl.n	800cf78 <_printf_float+0x428>
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	4642      	mov	r2, r8
 800cf0e:	4631      	mov	r1, r6
 800cf10:	4628      	mov	r0, r5
 800cf12:	47b8      	blx	r7
 800cf14:	3001      	adds	r0, #1
 800cf16:	f43f ae76 	beq.w	800cc06 <_printf_float+0xb6>
 800cf1a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cf1e:	4631      	mov	r1, r6
 800cf20:	4628      	mov	r0, r5
 800cf22:	47b8      	blx	r7
 800cf24:	3001      	adds	r0, #1
 800cf26:	f43f ae6e 	beq.w	800cc06 <_printf_float+0xb6>
 800cf2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cf2e:	2200      	movs	r2, #0
 800cf30:	2300      	movs	r3, #0
 800cf32:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf36:	f7f3 fda7 	bl	8000a88 <__aeabi_dcmpeq>
 800cf3a:	b9c0      	cbnz	r0, 800cf6e <_printf_float+0x41e>
 800cf3c:	4653      	mov	r3, sl
 800cf3e:	f108 0201 	add.w	r2, r8, #1
 800cf42:	4631      	mov	r1, r6
 800cf44:	4628      	mov	r0, r5
 800cf46:	47b8      	blx	r7
 800cf48:	3001      	adds	r0, #1
 800cf4a:	d10c      	bne.n	800cf66 <_printf_float+0x416>
 800cf4c:	e65b      	b.n	800cc06 <_printf_float+0xb6>
 800cf4e:	2301      	movs	r3, #1
 800cf50:	465a      	mov	r2, fp
 800cf52:	4631      	mov	r1, r6
 800cf54:	4628      	mov	r0, r5
 800cf56:	47b8      	blx	r7
 800cf58:	3001      	adds	r0, #1
 800cf5a:	f43f ae54 	beq.w	800cc06 <_printf_float+0xb6>
 800cf5e:	f108 0801 	add.w	r8, r8, #1
 800cf62:	45d0      	cmp	r8, sl
 800cf64:	dbf3      	blt.n	800cf4e <_printf_float+0x3fe>
 800cf66:	464b      	mov	r3, r9
 800cf68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cf6c:	e6e0      	b.n	800cd30 <_printf_float+0x1e0>
 800cf6e:	f04f 0800 	mov.w	r8, #0
 800cf72:	f104 0b1a 	add.w	fp, r4, #26
 800cf76:	e7f4      	b.n	800cf62 <_printf_float+0x412>
 800cf78:	2301      	movs	r3, #1
 800cf7a:	4642      	mov	r2, r8
 800cf7c:	e7e1      	b.n	800cf42 <_printf_float+0x3f2>
 800cf7e:	2301      	movs	r3, #1
 800cf80:	464a      	mov	r2, r9
 800cf82:	4631      	mov	r1, r6
 800cf84:	4628      	mov	r0, r5
 800cf86:	47b8      	blx	r7
 800cf88:	3001      	adds	r0, #1
 800cf8a:	f43f ae3c 	beq.w	800cc06 <_printf_float+0xb6>
 800cf8e:	f108 0801 	add.w	r8, r8, #1
 800cf92:	68e3      	ldr	r3, [r4, #12]
 800cf94:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cf96:	1a5b      	subs	r3, r3, r1
 800cf98:	4543      	cmp	r3, r8
 800cf9a:	dcf0      	bgt.n	800cf7e <_printf_float+0x42e>
 800cf9c:	e6fd      	b.n	800cd9a <_printf_float+0x24a>
 800cf9e:	f04f 0800 	mov.w	r8, #0
 800cfa2:	f104 0919 	add.w	r9, r4, #25
 800cfa6:	e7f4      	b.n	800cf92 <_printf_float+0x442>

0800cfa8 <_printf_common>:
 800cfa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfac:	4616      	mov	r6, r2
 800cfae:	4698      	mov	r8, r3
 800cfb0:	688a      	ldr	r2, [r1, #8]
 800cfb2:	690b      	ldr	r3, [r1, #16]
 800cfb4:	4607      	mov	r7, r0
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	bfb8      	it	lt
 800cfba:	4613      	movlt	r3, r2
 800cfbc:	6033      	str	r3, [r6, #0]
 800cfbe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cfc2:	460c      	mov	r4, r1
 800cfc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cfc8:	b10a      	cbz	r2, 800cfce <_printf_common+0x26>
 800cfca:	3301      	adds	r3, #1
 800cfcc:	6033      	str	r3, [r6, #0]
 800cfce:	6823      	ldr	r3, [r4, #0]
 800cfd0:	0699      	lsls	r1, r3, #26
 800cfd2:	bf42      	ittt	mi
 800cfd4:	6833      	ldrmi	r3, [r6, #0]
 800cfd6:	3302      	addmi	r3, #2
 800cfd8:	6033      	strmi	r3, [r6, #0]
 800cfda:	6825      	ldr	r5, [r4, #0]
 800cfdc:	f015 0506 	ands.w	r5, r5, #6
 800cfe0:	d106      	bne.n	800cff0 <_printf_common+0x48>
 800cfe2:	f104 0a19 	add.w	sl, r4, #25
 800cfe6:	68e3      	ldr	r3, [r4, #12]
 800cfe8:	6832      	ldr	r2, [r6, #0]
 800cfea:	1a9b      	subs	r3, r3, r2
 800cfec:	42ab      	cmp	r3, r5
 800cfee:	dc2b      	bgt.n	800d048 <_printf_common+0xa0>
 800cff0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cff4:	6822      	ldr	r2, [r4, #0]
 800cff6:	3b00      	subs	r3, #0
 800cff8:	bf18      	it	ne
 800cffa:	2301      	movne	r3, #1
 800cffc:	0692      	lsls	r2, r2, #26
 800cffe:	d430      	bmi.n	800d062 <_printf_common+0xba>
 800d000:	4641      	mov	r1, r8
 800d002:	4638      	mov	r0, r7
 800d004:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d008:	47c8      	blx	r9
 800d00a:	3001      	adds	r0, #1
 800d00c:	d023      	beq.n	800d056 <_printf_common+0xae>
 800d00e:	6823      	ldr	r3, [r4, #0]
 800d010:	6922      	ldr	r2, [r4, #16]
 800d012:	f003 0306 	and.w	r3, r3, #6
 800d016:	2b04      	cmp	r3, #4
 800d018:	bf14      	ite	ne
 800d01a:	2500      	movne	r5, #0
 800d01c:	6833      	ldreq	r3, [r6, #0]
 800d01e:	f04f 0600 	mov.w	r6, #0
 800d022:	bf08      	it	eq
 800d024:	68e5      	ldreq	r5, [r4, #12]
 800d026:	f104 041a 	add.w	r4, r4, #26
 800d02a:	bf08      	it	eq
 800d02c:	1aed      	subeq	r5, r5, r3
 800d02e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d032:	bf08      	it	eq
 800d034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d038:	4293      	cmp	r3, r2
 800d03a:	bfc4      	itt	gt
 800d03c:	1a9b      	subgt	r3, r3, r2
 800d03e:	18ed      	addgt	r5, r5, r3
 800d040:	42b5      	cmp	r5, r6
 800d042:	d11a      	bne.n	800d07a <_printf_common+0xd2>
 800d044:	2000      	movs	r0, #0
 800d046:	e008      	b.n	800d05a <_printf_common+0xb2>
 800d048:	2301      	movs	r3, #1
 800d04a:	4652      	mov	r2, sl
 800d04c:	4641      	mov	r1, r8
 800d04e:	4638      	mov	r0, r7
 800d050:	47c8      	blx	r9
 800d052:	3001      	adds	r0, #1
 800d054:	d103      	bne.n	800d05e <_printf_common+0xb6>
 800d056:	f04f 30ff 	mov.w	r0, #4294967295
 800d05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d05e:	3501      	adds	r5, #1
 800d060:	e7c1      	b.n	800cfe6 <_printf_common+0x3e>
 800d062:	2030      	movs	r0, #48	@ 0x30
 800d064:	18e1      	adds	r1, r4, r3
 800d066:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d06a:	1c5a      	adds	r2, r3, #1
 800d06c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d070:	4422      	add	r2, r4
 800d072:	3302      	adds	r3, #2
 800d074:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d078:	e7c2      	b.n	800d000 <_printf_common+0x58>
 800d07a:	2301      	movs	r3, #1
 800d07c:	4622      	mov	r2, r4
 800d07e:	4641      	mov	r1, r8
 800d080:	4638      	mov	r0, r7
 800d082:	47c8      	blx	r9
 800d084:	3001      	adds	r0, #1
 800d086:	d0e6      	beq.n	800d056 <_printf_common+0xae>
 800d088:	3601      	adds	r6, #1
 800d08a:	e7d9      	b.n	800d040 <_printf_common+0x98>

0800d08c <_printf_i>:
 800d08c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d090:	7e0f      	ldrb	r7, [r1, #24]
 800d092:	4691      	mov	r9, r2
 800d094:	2f78      	cmp	r7, #120	@ 0x78
 800d096:	4680      	mov	r8, r0
 800d098:	460c      	mov	r4, r1
 800d09a:	469a      	mov	sl, r3
 800d09c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d09e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d0a2:	d807      	bhi.n	800d0b4 <_printf_i+0x28>
 800d0a4:	2f62      	cmp	r7, #98	@ 0x62
 800d0a6:	d80a      	bhi.n	800d0be <_printf_i+0x32>
 800d0a8:	2f00      	cmp	r7, #0
 800d0aa:	f000 80d1 	beq.w	800d250 <_printf_i+0x1c4>
 800d0ae:	2f58      	cmp	r7, #88	@ 0x58
 800d0b0:	f000 80b8 	beq.w	800d224 <_printf_i+0x198>
 800d0b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d0b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d0bc:	e03a      	b.n	800d134 <_printf_i+0xa8>
 800d0be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d0c2:	2b15      	cmp	r3, #21
 800d0c4:	d8f6      	bhi.n	800d0b4 <_printf_i+0x28>
 800d0c6:	a101      	add	r1, pc, #4	@ (adr r1, 800d0cc <_printf_i+0x40>)
 800d0c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d0cc:	0800d125 	.word	0x0800d125
 800d0d0:	0800d139 	.word	0x0800d139
 800d0d4:	0800d0b5 	.word	0x0800d0b5
 800d0d8:	0800d0b5 	.word	0x0800d0b5
 800d0dc:	0800d0b5 	.word	0x0800d0b5
 800d0e0:	0800d0b5 	.word	0x0800d0b5
 800d0e4:	0800d139 	.word	0x0800d139
 800d0e8:	0800d0b5 	.word	0x0800d0b5
 800d0ec:	0800d0b5 	.word	0x0800d0b5
 800d0f0:	0800d0b5 	.word	0x0800d0b5
 800d0f4:	0800d0b5 	.word	0x0800d0b5
 800d0f8:	0800d237 	.word	0x0800d237
 800d0fc:	0800d163 	.word	0x0800d163
 800d100:	0800d1f1 	.word	0x0800d1f1
 800d104:	0800d0b5 	.word	0x0800d0b5
 800d108:	0800d0b5 	.word	0x0800d0b5
 800d10c:	0800d259 	.word	0x0800d259
 800d110:	0800d0b5 	.word	0x0800d0b5
 800d114:	0800d163 	.word	0x0800d163
 800d118:	0800d0b5 	.word	0x0800d0b5
 800d11c:	0800d0b5 	.word	0x0800d0b5
 800d120:	0800d1f9 	.word	0x0800d1f9
 800d124:	6833      	ldr	r3, [r6, #0]
 800d126:	1d1a      	adds	r2, r3, #4
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	6032      	str	r2, [r6, #0]
 800d12c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d130:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d134:	2301      	movs	r3, #1
 800d136:	e09c      	b.n	800d272 <_printf_i+0x1e6>
 800d138:	6833      	ldr	r3, [r6, #0]
 800d13a:	6820      	ldr	r0, [r4, #0]
 800d13c:	1d19      	adds	r1, r3, #4
 800d13e:	6031      	str	r1, [r6, #0]
 800d140:	0606      	lsls	r6, r0, #24
 800d142:	d501      	bpl.n	800d148 <_printf_i+0xbc>
 800d144:	681d      	ldr	r5, [r3, #0]
 800d146:	e003      	b.n	800d150 <_printf_i+0xc4>
 800d148:	0645      	lsls	r5, r0, #25
 800d14a:	d5fb      	bpl.n	800d144 <_printf_i+0xb8>
 800d14c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d150:	2d00      	cmp	r5, #0
 800d152:	da03      	bge.n	800d15c <_printf_i+0xd0>
 800d154:	232d      	movs	r3, #45	@ 0x2d
 800d156:	426d      	negs	r5, r5
 800d158:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d15c:	230a      	movs	r3, #10
 800d15e:	4858      	ldr	r0, [pc, #352]	@ (800d2c0 <_printf_i+0x234>)
 800d160:	e011      	b.n	800d186 <_printf_i+0xfa>
 800d162:	6821      	ldr	r1, [r4, #0]
 800d164:	6833      	ldr	r3, [r6, #0]
 800d166:	0608      	lsls	r0, r1, #24
 800d168:	f853 5b04 	ldr.w	r5, [r3], #4
 800d16c:	d402      	bmi.n	800d174 <_printf_i+0xe8>
 800d16e:	0649      	lsls	r1, r1, #25
 800d170:	bf48      	it	mi
 800d172:	b2ad      	uxthmi	r5, r5
 800d174:	2f6f      	cmp	r7, #111	@ 0x6f
 800d176:	6033      	str	r3, [r6, #0]
 800d178:	bf14      	ite	ne
 800d17a:	230a      	movne	r3, #10
 800d17c:	2308      	moveq	r3, #8
 800d17e:	4850      	ldr	r0, [pc, #320]	@ (800d2c0 <_printf_i+0x234>)
 800d180:	2100      	movs	r1, #0
 800d182:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d186:	6866      	ldr	r6, [r4, #4]
 800d188:	2e00      	cmp	r6, #0
 800d18a:	60a6      	str	r6, [r4, #8]
 800d18c:	db05      	blt.n	800d19a <_printf_i+0x10e>
 800d18e:	6821      	ldr	r1, [r4, #0]
 800d190:	432e      	orrs	r6, r5
 800d192:	f021 0104 	bic.w	r1, r1, #4
 800d196:	6021      	str	r1, [r4, #0]
 800d198:	d04b      	beq.n	800d232 <_printf_i+0x1a6>
 800d19a:	4616      	mov	r6, r2
 800d19c:	fbb5 f1f3 	udiv	r1, r5, r3
 800d1a0:	fb03 5711 	mls	r7, r3, r1, r5
 800d1a4:	5dc7      	ldrb	r7, [r0, r7]
 800d1a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d1aa:	462f      	mov	r7, r5
 800d1ac:	42bb      	cmp	r3, r7
 800d1ae:	460d      	mov	r5, r1
 800d1b0:	d9f4      	bls.n	800d19c <_printf_i+0x110>
 800d1b2:	2b08      	cmp	r3, #8
 800d1b4:	d10b      	bne.n	800d1ce <_printf_i+0x142>
 800d1b6:	6823      	ldr	r3, [r4, #0]
 800d1b8:	07df      	lsls	r7, r3, #31
 800d1ba:	d508      	bpl.n	800d1ce <_printf_i+0x142>
 800d1bc:	6923      	ldr	r3, [r4, #16]
 800d1be:	6861      	ldr	r1, [r4, #4]
 800d1c0:	4299      	cmp	r1, r3
 800d1c2:	bfde      	ittt	le
 800d1c4:	2330      	movle	r3, #48	@ 0x30
 800d1c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d1ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d1ce:	1b92      	subs	r2, r2, r6
 800d1d0:	6122      	str	r2, [r4, #16]
 800d1d2:	464b      	mov	r3, r9
 800d1d4:	4621      	mov	r1, r4
 800d1d6:	4640      	mov	r0, r8
 800d1d8:	f8cd a000 	str.w	sl, [sp]
 800d1dc:	aa03      	add	r2, sp, #12
 800d1de:	f7ff fee3 	bl	800cfa8 <_printf_common>
 800d1e2:	3001      	adds	r0, #1
 800d1e4:	d14a      	bne.n	800d27c <_printf_i+0x1f0>
 800d1e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ea:	b004      	add	sp, #16
 800d1ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1f0:	6823      	ldr	r3, [r4, #0]
 800d1f2:	f043 0320 	orr.w	r3, r3, #32
 800d1f6:	6023      	str	r3, [r4, #0]
 800d1f8:	2778      	movs	r7, #120	@ 0x78
 800d1fa:	4832      	ldr	r0, [pc, #200]	@ (800d2c4 <_printf_i+0x238>)
 800d1fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d200:	6823      	ldr	r3, [r4, #0]
 800d202:	6831      	ldr	r1, [r6, #0]
 800d204:	061f      	lsls	r7, r3, #24
 800d206:	f851 5b04 	ldr.w	r5, [r1], #4
 800d20a:	d402      	bmi.n	800d212 <_printf_i+0x186>
 800d20c:	065f      	lsls	r7, r3, #25
 800d20e:	bf48      	it	mi
 800d210:	b2ad      	uxthmi	r5, r5
 800d212:	6031      	str	r1, [r6, #0]
 800d214:	07d9      	lsls	r1, r3, #31
 800d216:	bf44      	itt	mi
 800d218:	f043 0320 	orrmi.w	r3, r3, #32
 800d21c:	6023      	strmi	r3, [r4, #0]
 800d21e:	b11d      	cbz	r5, 800d228 <_printf_i+0x19c>
 800d220:	2310      	movs	r3, #16
 800d222:	e7ad      	b.n	800d180 <_printf_i+0xf4>
 800d224:	4826      	ldr	r0, [pc, #152]	@ (800d2c0 <_printf_i+0x234>)
 800d226:	e7e9      	b.n	800d1fc <_printf_i+0x170>
 800d228:	6823      	ldr	r3, [r4, #0]
 800d22a:	f023 0320 	bic.w	r3, r3, #32
 800d22e:	6023      	str	r3, [r4, #0]
 800d230:	e7f6      	b.n	800d220 <_printf_i+0x194>
 800d232:	4616      	mov	r6, r2
 800d234:	e7bd      	b.n	800d1b2 <_printf_i+0x126>
 800d236:	6833      	ldr	r3, [r6, #0]
 800d238:	6825      	ldr	r5, [r4, #0]
 800d23a:	1d18      	adds	r0, r3, #4
 800d23c:	6961      	ldr	r1, [r4, #20]
 800d23e:	6030      	str	r0, [r6, #0]
 800d240:	062e      	lsls	r6, r5, #24
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	d501      	bpl.n	800d24a <_printf_i+0x1be>
 800d246:	6019      	str	r1, [r3, #0]
 800d248:	e002      	b.n	800d250 <_printf_i+0x1c4>
 800d24a:	0668      	lsls	r0, r5, #25
 800d24c:	d5fb      	bpl.n	800d246 <_printf_i+0x1ba>
 800d24e:	8019      	strh	r1, [r3, #0]
 800d250:	2300      	movs	r3, #0
 800d252:	4616      	mov	r6, r2
 800d254:	6123      	str	r3, [r4, #16]
 800d256:	e7bc      	b.n	800d1d2 <_printf_i+0x146>
 800d258:	6833      	ldr	r3, [r6, #0]
 800d25a:	2100      	movs	r1, #0
 800d25c:	1d1a      	adds	r2, r3, #4
 800d25e:	6032      	str	r2, [r6, #0]
 800d260:	681e      	ldr	r6, [r3, #0]
 800d262:	6862      	ldr	r2, [r4, #4]
 800d264:	4630      	mov	r0, r6
 800d266:	f000 fcd2 	bl	800dc0e <memchr>
 800d26a:	b108      	cbz	r0, 800d270 <_printf_i+0x1e4>
 800d26c:	1b80      	subs	r0, r0, r6
 800d26e:	6060      	str	r0, [r4, #4]
 800d270:	6863      	ldr	r3, [r4, #4]
 800d272:	6123      	str	r3, [r4, #16]
 800d274:	2300      	movs	r3, #0
 800d276:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d27a:	e7aa      	b.n	800d1d2 <_printf_i+0x146>
 800d27c:	4632      	mov	r2, r6
 800d27e:	4649      	mov	r1, r9
 800d280:	4640      	mov	r0, r8
 800d282:	6923      	ldr	r3, [r4, #16]
 800d284:	47d0      	blx	sl
 800d286:	3001      	adds	r0, #1
 800d288:	d0ad      	beq.n	800d1e6 <_printf_i+0x15a>
 800d28a:	6823      	ldr	r3, [r4, #0]
 800d28c:	079b      	lsls	r3, r3, #30
 800d28e:	d413      	bmi.n	800d2b8 <_printf_i+0x22c>
 800d290:	68e0      	ldr	r0, [r4, #12]
 800d292:	9b03      	ldr	r3, [sp, #12]
 800d294:	4298      	cmp	r0, r3
 800d296:	bfb8      	it	lt
 800d298:	4618      	movlt	r0, r3
 800d29a:	e7a6      	b.n	800d1ea <_printf_i+0x15e>
 800d29c:	2301      	movs	r3, #1
 800d29e:	4632      	mov	r2, r6
 800d2a0:	4649      	mov	r1, r9
 800d2a2:	4640      	mov	r0, r8
 800d2a4:	47d0      	blx	sl
 800d2a6:	3001      	adds	r0, #1
 800d2a8:	d09d      	beq.n	800d1e6 <_printf_i+0x15a>
 800d2aa:	3501      	adds	r5, #1
 800d2ac:	68e3      	ldr	r3, [r4, #12]
 800d2ae:	9903      	ldr	r1, [sp, #12]
 800d2b0:	1a5b      	subs	r3, r3, r1
 800d2b2:	42ab      	cmp	r3, r5
 800d2b4:	dcf2      	bgt.n	800d29c <_printf_i+0x210>
 800d2b6:	e7eb      	b.n	800d290 <_printf_i+0x204>
 800d2b8:	2500      	movs	r5, #0
 800d2ba:	f104 0619 	add.w	r6, r4, #25
 800d2be:	e7f5      	b.n	800d2ac <_printf_i+0x220>
 800d2c0:	08012e06 	.word	0x08012e06
 800d2c4:	08012e17 	.word	0x08012e17

0800d2c8 <_scanf_float>:
 800d2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2cc:	b087      	sub	sp, #28
 800d2ce:	9303      	str	r3, [sp, #12]
 800d2d0:	688b      	ldr	r3, [r1, #8]
 800d2d2:	4691      	mov	r9, r2
 800d2d4:	1e5a      	subs	r2, r3, #1
 800d2d6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d2da:	bf82      	ittt	hi
 800d2dc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d2e0:	eb03 0b05 	addhi.w	fp, r3, r5
 800d2e4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d2e8:	460a      	mov	r2, r1
 800d2ea:	f04f 0500 	mov.w	r5, #0
 800d2ee:	bf88      	it	hi
 800d2f0:	608b      	strhi	r3, [r1, #8]
 800d2f2:	680b      	ldr	r3, [r1, #0]
 800d2f4:	4680      	mov	r8, r0
 800d2f6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d2fa:	f842 3b1c 	str.w	r3, [r2], #28
 800d2fe:	460c      	mov	r4, r1
 800d300:	bf98      	it	ls
 800d302:	f04f 0b00 	movls.w	fp, #0
 800d306:	4616      	mov	r6, r2
 800d308:	46aa      	mov	sl, r5
 800d30a:	462f      	mov	r7, r5
 800d30c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d310:	9201      	str	r2, [sp, #4]
 800d312:	9502      	str	r5, [sp, #8]
 800d314:	68a2      	ldr	r2, [r4, #8]
 800d316:	b15a      	cbz	r2, 800d330 <_scanf_float+0x68>
 800d318:	f8d9 3000 	ldr.w	r3, [r9]
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	2b4e      	cmp	r3, #78	@ 0x4e
 800d320:	d862      	bhi.n	800d3e8 <_scanf_float+0x120>
 800d322:	2b40      	cmp	r3, #64	@ 0x40
 800d324:	d83a      	bhi.n	800d39c <_scanf_float+0xd4>
 800d326:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d32a:	b2c8      	uxtb	r0, r1
 800d32c:	280e      	cmp	r0, #14
 800d32e:	d938      	bls.n	800d3a2 <_scanf_float+0xda>
 800d330:	b11f      	cbz	r7, 800d33a <_scanf_float+0x72>
 800d332:	6823      	ldr	r3, [r4, #0]
 800d334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d338:	6023      	str	r3, [r4, #0]
 800d33a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d33e:	f1ba 0f01 	cmp.w	sl, #1
 800d342:	f200 8114 	bhi.w	800d56e <_scanf_float+0x2a6>
 800d346:	9b01      	ldr	r3, [sp, #4]
 800d348:	429e      	cmp	r6, r3
 800d34a:	f200 8105 	bhi.w	800d558 <_scanf_float+0x290>
 800d34e:	2001      	movs	r0, #1
 800d350:	b007      	add	sp, #28
 800d352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d356:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d35a:	2a0d      	cmp	r2, #13
 800d35c:	d8e8      	bhi.n	800d330 <_scanf_float+0x68>
 800d35e:	a101      	add	r1, pc, #4	@ (adr r1, 800d364 <_scanf_float+0x9c>)
 800d360:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d364:	0800d4ad 	.word	0x0800d4ad
 800d368:	0800d331 	.word	0x0800d331
 800d36c:	0800d331 	.word	0x0800d331
 800d370:	0800d331 	.word	0x0800d331
 800d374:	0800d509 	.word	0x0800d509
 800d378:	0800d4e3 	.word	0x0800d4e3
 800d37c:	0800d331 	.word	0x0800d331
 800d380:	0800d331 	.word	0x0800d331
 800d384:	0800d4bb 	.word	0x0800d4bb
 800d388:	0800d331 	.word	0x0800d331
 800d38c:	0800d331 	.word	0x0800d331
 800d390:	0800d331 	.word	0x0800d331
 800d394:	0800d331 	.word	0x0800d331
 800d398:	0800d477 	.word	0x0800d477
 800d39c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d3a0:	e7db      	b.n	800d35a <_scanf_float+0x92>
 800d3a2:	290e      	cmp	r1, #14
 800d3a4:	d8c4      	bhi.n	800d330 <_scanf_float+0x68>
 800d3a6:	a001      	add	r0, pc, #4	@ (adr r0, 800d3ac <_scanf_float+0xe4>)
 800d3a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d3ac:	0800d467 	.word	0x0800d467
 800d3b0:	0800d331 	.word	0x0800d331
 800d3b4:	0800d467 	.word	0x0800d467
 800d3b8:	0800d4f7 	.word	0x0800d4f7
 800d3bc:	0800d331 	.word	0x0800d331
 800d3c0:	0800d409 	.word	0x0800d409
 800d3c4:	0800d44d 	.word	0x0800d44d
 800d3c8:	0800d44d 	.word	0x0800d44d
 800d3cc:	0800d44d 	.word	0x0800d44d
 800d3d0:	0800d44d 	.word	0x0800d44d
 800d3d4:	0800d44d 	.word	0x0800d44d
 800d3d8:	0800d44d 	.word	0x0800d44d
 800d3dc:	0800d44d 	.word	0x0800d44d
 800d3e0:	0800d44d 	.word	0x0800d44d
 800d3e4:	0800d44d 	.word	0x0800d44d
 800d3e8:	2b6e      	cmp	r3, #110	@ 0x6e
 800d3ea:	d809      	bhi.n	800d400 <_scanf_float+0x138>
 800d3ec:	2b60      	cmp	r3, #96	@ 0x60
 800d3ee:	d8b2      	bhi.n	800d356 <_scanf_float+0x8e>
 800d3f0:	2b54      	cmp	r3, #84	@ 0x54
 800d3f2:	d07b      	beq.n	800d4ec <_scanf_float+0x224>
 800d3f4:	2b59      	cmp	r3, #89	@ 0x59
 800d3f6:	d19b      	bne.n	800d330 <_scanf_float+0x68>
 800d3f8:	2d07      	cmp	r5, #7
 800d3fa:	d199      	bne.n	800d330 <_scanf_float+0x68>
 800d3fc:	2508      	movs	r5, #8
 800d3fe:	e02f      	b.n	800d460 <_scanf_float+0x198>
 800d400:	2b74      	cmp	r3, #116	@ 0x74
 800d402:	d073      	beq.n	800d4ec <_scanf_float+0x224>
 800d404:	2b79      	cmp	r3, #121	@ 0x79
 800d406:	e7f6      	b.n	800d3f6 <_scanf_float+0x12e>
 800d408:	6821      	ldr	r1, [r4, #0]
 800d40a:	05c8      	lsls	r0, r1, #23
 800d40c:	d51e      	bpl.n	800d44c <_scanf_float+0x184>
 800d40e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d412:	6021      	str	r1, [r4, #0]
 800d414:	3701      	adds	r7, #1
 800d416:	f1bb 0f00 	cmp.w	fp, #0
 800d41a:	d003      	beq.n	800d424 <_scanf_float+0x15c>
 800d41c:	3201      	adds	r2, #1
 800d41e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d422:	60a2      	str	r2, [r4, #8]
 800d424:	68a3      	ldr	r3, [r4, #8]
 800d426:	3b01      	subs	r3, #1
 800d428:	60a3      	str	r3, [r4, #8]
 800d42a:	6923      	ldr	r3, [r4, #16]
 800d42c:	3301      	adds	r3, #1
 800d42e:	6123      	str	r3, [r4, #16]
 800d430:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d434:	3b01      	subs	r3, #1
 800d436:	2b00      	cmp	r3, #0
 800d438:	f8c9 3004 	str.w	r3, [r9, #4]
 800d43c:	f340 8083 	ble.w	800d546 <_scanf_float+0x27e>
 800d440:	f8d9 3000 	ldr.w	r3, [r9]
 800d444:	3301      	adds	r3, #1
 800d446:	f8c9 3000 	str.w	r3, [r9]
 800d44a:	e763      	b.n	800d314 <_scanf_float+0x4c>
 800d44c:	eb1a 0105 	adds.w	r1, sl, r5
 800d450:	f47f af6e 	bne.w	800d330 <_scanf_float+0x68>
 800d454:	460d      	mov	r5, r1
 800d456:	468a      	mov	sl, r1
 800d458:	6822      	ldr	r2, [r4, #0]
 800d45a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d45e:	6022      	str	r2, [r4, #0]
 800d460:	f806 3b01 	strb.w	r3, [r6], #1
 800d464:	e7de      	b.n	800d424 <_scanf_float+0x15c>
 800d466:	6822      	ldr	r2, [r4, #0]
 800d468:	0610      	lsls	r0, r2, #24
 800d46a:	f57f af61 	bpl.w	800d330 <_scanf_float+0x68>
 800d46e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d472:	6022      	str	r2, [r4, #0]
 800d474:	e7f4      	b.n	800d460 <_scanf_float+0x198>
 800d476:	f1ba 0f00 	cmp.w	sl, #0
 800d47a:	d10c      	bne.n	800d496 <_scanf_float+0x1ce>
 800d47c:	b977      	cbnz	r7, 800d49c <_scanf_float+0x1d4>
 800d47e:	6822      	ldr	r2, [r4, #0]
 800d480:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d484:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d488:	d108      	bne.n	800d49c <_scanf_float+0x1d4>
 800d48a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d48e:	f04f 0a01 	mov.w	sl, #1
 800d492:	6022      	str	r2, [r4, #0]
 800d494:	e7e4      	b.n	800d460 <_scanf_float+0x198>
 800d496:	f1ba 0f02 	cmp.w	sl, #2
 800d49a:	d051      	beq.n	800d540 <_scanf_float+0x278>
 800d49c:	2d01      	cmp	r5, #1
 800d49e:	d002      	beq.n	800d4a6 <_scanf_float+0x1de>
 800d4a0:	2d04      	cmp	r5, #4
 800d4a2:	f47f af45 	bne.w	800d330 <_scanf_float+0x68>
 800d4a6:	3501      	adds	r5, #1
 800d4a8:	b2ed      	uxtb	r5, r5
 800d4aa:	e7d9      	b.n	800d460 <_scanf_float+0x198>
 800d4ac:	f1ba 0f01 	cmp.w	sl, #1
 800d4b0:	f47f af3e 	bne.w	800d330 <_scanf_float+0x68>
 800d4b4:	f04f 0a02 	mov.w	sl, #2
 800d4b8:	e7d2      	b.n	800d460 <_scanf_float+0x198>
 800d4ba:	b975      	cbnz	r5, 800d4da <_scanf_float+0x212>
 800d4bc:	2f00      	cmp	r7, #0
 800d4be:	f47f af38 	bne.w	800d332 <_scanf_float+0x6a>
 800d4c2:	6822      	ldr	r2, [r4, #0]
 800d4c4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d4c8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d4cc:	f040 80ff 	bne.w	800d6ce <_scanf_float+0x406>
 800d4d0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d4d4:	2501      	movs	r5, #1
 800d4d6:	6022      	str	r2, [r4, #0]
 800d4d8:	e7c2      	b.n	800d460 <_scanf_float+0x198>
 800d4da:	2d03      	cmp	r5, #3
 800d4dc:	d0e3      	beq.n	800d4a6 <_scanf_float+0x1de>
 800d4de:	2d05      	cmp	r5, #5
 800d4e0:	e7df      	b.n	800d4a2 <_scanf_float+0x1da>
 800d4e2:	2d02      	cmp	r5, #2
 800d4e4:	f47f af24 	bne.w	800d330 <_scanf_float+0x68>
 800d4e8:	2503      	movs	r5, #3
 800d4ea:	e7b9      	b.n	800d460 <_scanf_float+0x198>
 800d4ec:	2d06      	cmp	r5, #6
 800d4ee:	f47f af1f 	bne.w	800d330 <_scanf_float+0x68>
 800d4f2:	2507      	movs	r5, #7
 800d4f4:	e7b4      	b.n	800d460 <_scanf_float+0x198>
 800d4f6:	6822      	ldr	r2, [r4, #0]
 800d4f8:	0591      	lsls	r1, r2, #22
 800d4fa:	f57f af19 	bpl.w	800d330 <_scanf_float+0x68>
 800d4fe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d502:	6022      	str	r2, [r4, #0]
 800d504:	9702      	str	r7, [sp, #8]
 800d506:	e7ab      	b.n	800d460 <_scanf_float+0x198>
 800d508:	6822      	ldr	r2, [r4, #0]
 800d50a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d50e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d512:	d005      	beq.n	800d520 <_scanf_float+0x258>
 800d514:	0550      	lsls	r0, r2, #21
 800d516:	f57f af0b 	bpl.w	800d330 <_scanf_float+0x68>
 800d51a:	2f00      	cmp	r7, #0
 800d51c:	f000 80d7 	beq.w	800d6ce <_scanf_float+0x406>
 800d520:	0591      	lsls	r1, r2, #22
 800d522:	bf58      	it	pl
 800d524:	9902      	ldrpl	r1, [sp, #8]
 800d526:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d52a:	bf58      	it	pl
 800d52c:	1a79      	subpl	r1, r7, r1
 800d52e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d532:	f04f 0700 	mov.w	r7, #0
 800d536:	bf58      	it	pl
 800d538:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d53c:	6022      	str	r2, [r4, #0]
 800d53e:	e78f      	b.n	800d460 <_scanf_float+0x198>
 800d540:	f04f 0a03 	mov.w	sl, #3
 800d544:	e78c      	b.n	800d460 <_scanf_float+0x198>
 800d546:	4649      	mov	r1, r9
 800d548:	4640      	mov	r0, r8
 800d54a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d54e:	4798      	blx	r3
 800d550:	2800      	cmp	r0, #0
 800d552:	f43f aedf 	beq.w	800d314 <_scanf_float+0x4c>
 800d556:	e6eb      	b.n	800d330 <_scanf_float+0x68>
 800d558:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d55c:	464a      	mov	r2, r9
 800d55e:	4640      	mov	r0, r8
 800d560:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d564:	4798      	blx	r3
 800d566:	6923      	ldr	r3, [r4, #16]
 800d568:	3b01      	subs	r3, #1
 800d56a:	6123      	str	r3, [r4, #16]
 800d56c:	e6eb      	b.n	800d346 <_scanf_float+0x7e>
 800d56e:	1e6b      	subs	r3, r5, #1
 800d570:	2b06      	cmp	r3, #6
 800d572:	d824      	bhi.n	800d5be <_scanf_float+0x2f6>
 800d574:	2d02      	cmp	r5, #2
 800d576:	d836      	bhi.n	800d5e6 <_scanf_float+0x31e>
 800d578:	9b01      	ldr	r3, [sp, #4]
 800d57a:	429e      	cmp	r6, r3
 800d57c:	f67f aee7 	bls.w	800d34e <_scanf_float+0x86>
 800d580:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d584:	464a      	mov	r2, r9
 800d586:	4640      	mov	r0, r8
 800d588:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d58c:	4798      	blx	r3
 800d58e:	6923      	ldr	r3, [r4, #16]
 800d590:	3b01      	subs	r3, #1
 800d592:	6123      	str	r3, [r4, #16]
 800d594:	e7f0      	b.n	800d578 <_scanf_float+0x2b0>
 800d596:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d59a:	464a      	mov	r2, r9
 800d59c:	4640      	mov	r0, r8
 800d59e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d5a2:	4798      	blx	r3
 800d5a4:	6923      	ldr	r3, [r4, #16]
 800d5a6:	3b01      	subs	r3, #1
 800d5a8:	6123      	str	r3, [r4, #16]
 800d5aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d5ae:	fa5f fa8a 	uxtb.w	sl, sl
 800d5b2:	f1ba 0f02 	cmp.w	sl, #2
 800d5b6:	d1ee      	bne.n	800d596 <_scanf_float+0x2ce>
 800d5b8:	3d03      	subs	r5, #3
 800d5ba:	b2ed      	uxtb	r5, r5
 800d5bc:	1b76      	subs	r6, r6, r5
 800d5be:	6823      	ldr	r3, [r4, #0]
 800d5c0:	05da      	lsls	r2, r3, #23
 800d5c2:	d530      	bpl.n	800d626 <_scanf_float+0x35e>
 800d5c4:	055b      	lsls	r3, r3, #21
 800d5c6:	d511      	bpl.n	800d5ec <_scanf_float+0x324>
 800d5c8:	9b01      	ldr	r3, [sp, #4]
 800d5ca:	429e      	cmp	r6, r3
 800d5cc:	f67f aebf 	bls.w	800d34e <_scanf_float+0x86>
 800d5d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d5d4:	464a      	mov	r2, r9
 800d5d6:	4640      	mov	r0, r8
 800d5d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d5dc:	4798      	blx	r3
 800d5de:	6923      	ldr	r3, [r4, #16]
 800d5e0:	3b01      	subs	r3, #1
 800d5e2:	6123      	str	r3, [r4, #16]
 800d5e4:	e7f0      	b.n	800d5c8 <_scanf_float+0x300>
 800d5e6:	46aa      	mov	sl, r5
 800d5e8:	46b3      	mov	fp, r6
 800d5ea:	e7de      	b.n	800d5aa <_scanf_float+0x2e2>
 800d5ec:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d5f0:	6923      	ldr	r3, [r4, #16]
 800d5f2:	2965      	cmp	r1, #101	@ 0x65
 800d5f4:	f103 33ff 	add.w	r3, r3, #4294967295
 800d5f8:	f106 35ff 	add.w	r5, r6, #4294967295
 800d5fc:	6123      	str	r3, [r4, #16]
 800d5fe:	d00c      	beq.n	800d61a <_scanf_float+0x352>
 800d600:	2945      	cmp	r1, #69	@ 0x45
 800d602:	d00a      	beq.n	800d61a <_scanf_float+0x352>
 800d604:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d608:	464a      	mov	r2, r9
 800d60a:	4640      	mov	r0, r8
 800d60c:	4798      	blx	r3
 800d60e:	6923      	ldr	r3, [r4, #16]
 800d610:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d614:	3b01      	subs	r3, #1
 800d616:	1eb5      	subs	r5, r6, #2
 800d618:	6123      	str	r3, [r4, #16]
 800d61a:	464a      	mov	r2, r9
 800d61c:	4640      	mov	r0, r8
 800d61e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d622:	4798      	blx	r3
 800d624:	462e      	mov	r6, r5
 800d626:	6822      	ldr	r2, [r4, #0]
 800d628:	f012 0210 	ands.w	r2, r2, #16
 800d62c:	d001      	beq.n	800d632 <_scanf_float+0x36a>
 800d62e:	2000      	movs	r0, #0
 800d630:	e68e      	b.n	800d350 <_scanf_float+0x88>
 800d632:	7032      	strb	r2, [r6, #0]
 800d634:	6823      	ldr	r3, [r4, #0]
 800d636:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d63a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d63e:	d125      	bne.n	800d68c <_scanf_float+0x3c4>
 800d640:	9b02      	ldr	r3, [sp, #8]
 800d642:	429f      	cmp	r7, r3
 800d644:	d00a      	beq.n	800d65c <_scanf_float+0x394>
 800d646:	1bda      	subs	r2, r3, r7
 800d648:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d64c:	429e      	cmp	r6, r3
 800d64e:	bf28      	it	cs
 800d650:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d654:	4630      	mov	r0, r6
 800d656:	491f      	ldr	r1, [pc, #124]	@ (800d6d4 <_scanf_float+0x40c>)
 800d658:	f000 f960 	bl	800d91c <siprintf>
 800d65c:	2200      	movs	r2, #0
 800d65e:	4640      	mov	r0, r8
 800d660:	9901      	ldr	r1, [sp, #4]
 800d662:	f002 fce9 	bl	8010038 <_strtod_r>
 800d666:	9b03      	ldr	r3, [sp, #12]
 800d668:	6825      	ldr	r5, [r4, #0]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f015 0f02 	tst.w	r5, #2
 800d670:	4606      	mov	r6, r0
 800d672:	460f      	mov	r7, r1
 800d674:	f103 0204 	add.w	r2, r3, #4
 800d678:	d015      	beq.n	800d6a6 <_scanf_float+0x3de>
 800d67a:	9903      	ldr	r1, [sp, #12]
 800d67c:	600a      	str	r2, [r1, #0]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	e9c3 6700 	strd	r6, r7, [r3]
 800d684:	68e3      	ldr	r3, [r4, #12]
 800d686:	3301      	adds	r3, #1
 800d688:	60e3      	str	r3, [r4, #12]
 800d68a:	e7d0      	b.n	800d62e <_scanf_float+0x366>
 800d68c:	9b04      	ldr	r3, [sp, #16]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d0e4      	beq.n	800d65c <_scanf_float+0x394>
 800d692:	9905      	ldr	r1, [sp, #20]
 800d694:	230a      	movs	r3, #10
 800d696:	4640      	mov	r0, r8
 800d698:	3101      	adds	r1, #1
 800d69a:	f002 fd4d 	bl	8010138 <_strtol_r>
 800d69e:	9b04      	ldr	r3, [sp, #16]
 800d6a0:	9e05      	ldr	r6, [sp, #20]
 800d6a2:	1ac2      	subs	r2, r0, r3
 800d6a4:	e7d0      	b.n	800d648 <_scanf_float+0x380>
 800d6a6:	076d      	lsls	r5, r5, #29
 800d6a8:	d4e7      	bmi.n	800d67a <_scanf_float+0x3b2>
 800d6aa:	9d03      	ldr	r5, [sp, #12]
 800d6ac:	602a      	str	r2, [r5, #0]
 800d6ae:	681d      	ldr	r5, [r3, #0]
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	460b      	mov	r3, r1
 800d6b4:	f7f3 fa1a 	bl	8000aec <__aeabi_dcmpun>
 800d6b8:	b120      	cbz	r0, 800d6c4 <_scanf_float+0x3fc>
 800d6ba:	4807      	ldr	r0, [pc, #28]	@ (800d6d8 <_scanf_float+0x410>)
 800d6bc:	f000 fac4 	bl	800dc48 <nanf>
 800d6c0:	6028      	str	r0, [r5, #0]
 800d6c2:	e7df      	b.n	800d684 <_scanf_float+0x3bc>
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	4639      	mov	r1, r7
 800d6c8:	f7f3 fa6e 	bl	8000ba8 <__aeabi_d2f>
 800d6cc:	e7f8      	b.n	800d6c0 <_scanf_float+0x3f8>
 800d6ce:	2700      	movs	r7, #0
 800d6d0:	e633      	b.n	800d33a <_scanf_float+0x72>
 800d6d2:	bf00      	nop
 800d6d4:	08012e28 	.word	0x08012e28
 800d6d8:	08012f69 	.word	0x08012f69

0800d6dc <std>:
 800d6dc:	2300      	movs	r3, #0
 800d6de:	b510      	push	{r4, lr}
 800d6e0:	4604      	mov	r4, r0
 800d6e2:	e9c0 3300 	strd	r3, r3, [r0]
 800d6e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d6ea:	6083      	str	r3, [r0, #8]
 800d6ec:	8181      	strh	r1, [r0, #12]
 800d6ee:	6643      	str	r3, [r0, #100]	@ 0x64
 800d6f0:	81c2      	strh	r2, [r0, #14]
 800d6f2:	6183      	str	r3, [r0, #24]
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	2208      	movs	r2, #8
 800d6f8:	305c      	adds	r0, #92	@ 0x5c
 800d6fa:	f000 fa09 	bl	800db10 <memset>
 800d6fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d734 <std+0x58>)
 800d700:	6224      	str	r4, [r4, #32]
 800d702:	6263      	str	r3, [r4, #36]	@ 0x24
 800d704:	4b0c      	ldr	r3, [pc, #48]	@ (800d738 <std+0x5c>)
 800d706:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d708:	4b0c      	ldr	r3, [pc, #48]	@ (800d73c <std+0x60>)
 800d70a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d70c:	4b0c      	ldr	r3, [pc, #48]	@ (800d740 <std+0x64>)
 800d70e:	6323      	str	r3, [r4, #48]	@ 0x30
 800d710:	4b0c      	ldr	r3, [pc, #48]	@ (800d744 <std+0x68>)
 800d712:	429c      	cmp	r4, r3
 800d714:	d006      	beq.n	800d724 <std+0x48>
 800d716:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d71a:	4294      	cmp	r4, r2
 800d71c:	d002      	beq.n	800d724 <std+0x48>
 800d71e:	33d0      	adds	r3, #208	@ 0xd0
 800d720:	429c      	cmp	r4, r3
 800d722:	d105      	bne.n	800d730 <std+0x54>
 800d724:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d72c:	f000 ba6c 	b.w	800dc08 <__retarget_lock_init_recursive>
 800d730:	bd10      	pop	{r4, pc}
 800d732:	bf00      	nop
 800d734:	0800d961 	.word	0x0800d961
 800d738:	0800d983 	.word	0x0800d983
 800d73c:	0800d9bb 	.word	0x0800d9bb
 800d740:	0800d9df 	.word	0x0800d9df
 800d744:	20009510 	.word	0x20009510

0800d748 <stdio_exit_handler>:
 800d748:	4a02      	ldr	r2, [pc, #8]	@ (800d754 <stdio_exit_handler+0xc>)
 800d74a:	4903      	ldr	r1, [pc, #12]	@ (800d758 <stdio_exit_handler+0x10>)
 800d74c:	4803      	ldr	r0, [pc, #12]	@ (800d75c <stdio_exit_handler+0x14>)
 800d74e:	f000 b869 	b.w	800d824 <_fwalk_sglue>
 800d752:	bf00      	nop
 800d754:	200043a4 	.word	0x200043a4
 800d758:	0801076d 	.word	0x0801076d
 800d75c:	200043b4 	.word	0x200043b4

0800d760 <cleanup_stdio>:
 800d760:	6841      	ldr	r1, [r0, #4]
 800d762:	4b0c      	ldr	r3, [pc, #48]	@ (800d794 <cleanup_stdio+0x34>)
 800d764:	b510      	push	{r4, lr}
 800d766:	4299      	cmp	r1, r3
 800d768:	4604      	mov	r4, r0
 800d76a:	d001      	beq.n	800d770 <cleanup_stdio+0x10>
 800d76c:	f002 fffe 	bl	801076c <_fflush_r>
 800d770:	68a1      	ldr	r1, [r4, #8]
 800d772:	4b09      	ldr	r3, [pc, #36]	@ (800d798 <cleanup_stdio+0x38>)
 800d774:	4299      	cmp	r1, r3
 800d776:	d002      	beq.n	800d77e <cleanup_stdio+0x1e>
 800d778:	4620      	mov	r0, r4
 800d77a:	f002 fff7 	bl	801076c <_fflush_r>
 800d77e:	68e1      	ldr	r1, [r4, #12]
 800d780:	4b06      	ldr	r3, [pc, #24]	@ (800d79c <cleanup_stdio+0x3c>)
 800d782:	4299      	cmp	r1, r3
 800d784:	d004      	beq.n	800d790 <cleanup_stdio+0x30>
 800d786:	4620      	mov	r0, r4
 800d788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d78c:	f002 bfee 	b.w	801076c <_fflush_r>
 800d790:	bd10      	pop	{r4, pc}
 800d792:	bf00      	nop
 800d794:	20009510 	.word	0x20009510
 800d798:	20009578 	.word	0x20009578
 800d79c:	200095e0 	.word	0x200095e0

0800d7a0 <global_stdio_init.part.0>:
 800d7a0:	b510      	push	{r4, lr}
 800d7a2:	4b0b      	ldr	r3, [pc, #44]	@ (800d7d0 <global_stdio_init.part.0+0x30>)
 800d7a4:	4c0b      	ldr	r4, [pc, #44]	@ (800d7d4 <global_stdio_init.part.0+0x34>)
 800d7a6:	4a0c      	ldr	r2, [pc, #48]	@ (800d7d8 <global_stdio_init.part.0+0x38>)
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	601a      	str	r2, [r3, #0]
 800d7ac:	2104      	movs	r1, #4
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	f7ff ff94 	bl	800d6dc <std>
 800d7b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d7b8:	2201      	movs	r2, #1
 800d7ba:	2109      	movs	r1, #9
 800d7bc:	f7ff ff8e 	bl	800d6dc <std>
 800d7c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d7c4:	2202      	movs	r2, #2
 800d7c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7ca:	2112      	movs	r1, #18
 800d7cc:	f7ff bf86 	b.w	800d6dc <std>
 800d7d0:	20009648 	.word	0x20009648
 800d7d4:	20009510 	.word	0x20009510
 800d7d8:	0800d749 	.word	0x0800d749

0800d7dc <__sfp_lock_acquire>:
 800d7dc:	4801      	ldr	r0, [pc, #4]	@ (800d7e4 <__sfp_lock_acquire+0x8>)
 800d7de:	f000 ba14 	b.w	800dc0a <__retarget_lock_acquire_recursive>
 800d7e2:	bf00      	nop
 800d7e4:	20009651 	.word	0x20009651

0800d7e8 <__sfp_lock_release>:
 800d7e8:	4801      	ldr	r0, [pc, #4]	@ (800d7f0 <__sfp_lock_release+0x8>)
 800d7ea:	f000 ba0f 	b.w	800dc0c <__retarget_lock_release_recursive>
 800d7ee:	bf00      	nop
 800d7f0:	20009651 	.word	0x20009651

0800d7f4 <__sinit>:
 800d7f4:	b510      	push	{r4, lr}
 800d7f6:	4604      	mov	r4, r0
 800d7f8:	f7ff fff0 	bl	800d7dc <__sfp_lock_acquire>
 800d7fc:	6a23      	ldr	r3, [r4, #32]
 800d7fe:	b11b      	cbz	r3, 800d808 <__sinit+0x14>
 800d800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d804:	f7ff bff0 	b.w	800d7e8 <__sfp_lock_release>
 800d808:	4b04      	ldr	r3, [pc, #16]	@ (800d81c <__sinit+0x28>)
 800d80a:	6223      	str	r3, [r4, #32]
 800d80c:	4b04      	ldr	r3, [pc, #16]	@ (800d820 <__sinit+0x2c>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d1f5      	bne.n	800d800 <__sinit+0xc>
 800d814:	f7ff ffc4 	bl	800d7a0 <global_stdio_init.part.0>
 800d818:	e7f2      	b.n	800d800 <__sinit+0xc>
 800d81a:	bf00      	nop
 800d81c:	0800d761 	.word	0x0800d761
 800d820:	20009648 	.word	0x20009648

0800d824 <_fwalk_sglue>:
 800d824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d828:	4607      	mov	r7, r0
 800d82a:	4688      	mov	r8, r1
 800d82c:	4614      	mov	r4, r2
 800d82e:	2600      	movs	r6, #0
 800d830:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d834:	f1b9 0901 	subs.w	r9, r9, #1
 800d838:	d505      	bpl.n	800d846 <_fwalk_sglue+0x22>
 800d83a:	6824      	ldr	r4, [r4, #0]
 800d83c:	2c00      	cmp	r4, #0
 800d83e:	d1f7      	bne.n	800d830 <_fwalk_sglue+0xc>
 800d840:	4630      	mov	r0, r6
 800d842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d846:	89ab      	ldrh	r3, [r5, #12]
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d907      	bls.n	800d85c <_fwalk_sglue+0x38>
 800d84c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d850:	3301      	adds	r3, #1
 800d852:	d003      	beq.n	800d85c <_fwalk_sglue+0x38>
 800d854:	4629      	mov	r1, r5
 800d856:	4638      	mov	r0, r7
 800d858:	47c0      	blx	r8
 800d85a:	4306      	orrs	r6, r0
 800d85c:	3568      	adds	r5, #104	@ 0x68
 800d85e:	e7e9      	b.n	800d834 <_fwalk_sglue+0x10>

0800d860 <_puts_r>:
 800d860:	6a03      	ldr	r3, [r0, #32]
 800d862:	b570      	push	{r4, r5, r6, lr}
 800d864:	4605      	mov	r5, r0
 800d866:	460e      	mov	r6, r1
 800d868:	6884      	ldr	r4, [r0, #8]
 800d86a:	b90b      	cbnz	r3, 800d870 <_puts_r+0x10>
 800d86c:	f7ff ffc2 	bl	800d7f4 <__sinit>
 800d870:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d872:	07db      	lsls	r3, r3, #31
 800d874:	d405      	bmi.n	800d882 <_puts_r+0x22>
 800d876:	89a3      	ldrh	r3, [r4, #12]
 800d878:	0598      	lsls	r0, r3, #22
 800d87a:	d402      	bmi.n	800d882 <_puts_r+0x22>
 800d87c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d87e:	f000 f9c4 	bl	800dc0a <__retarget_lock_acquire_recursive>
 800d882:	89a3      	ldrh	r3, [r4, #12]
 800d884:	0719      	lsls	r1, r3, #28
 800d886:	d502      	bpl.n	800d88e <_puts_r+0x2e>
 800d888:	6923      	ldr	r3, [r4, #16]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d135      	bne.n	800d8fa <_puts_r+0x9a>
 800d88e:	4621      	mov	r1, r4
 800d890:	4628      	mov	r0, r5
 800d892:	f000 f8e7 	bl	800da64 <__swsetup_r>
 800d896:	b380      	cbz	r0, 800d8fa <_puts_r+0x9a>
 800d898:	f04f 35ff 	mov.w	r5, #4294967295
 800d89c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d89e:	07da      	lsls	r2, r3, #31
 800d8a0:	d405      	bmi.n	800d8ae <_puts_r+0x4e>
 800d8a2:	89a3      	ldrh	r3, [r4, #12]
 800d8a4:	059b      	lsls	r3, r3, #22
 800d8a6:	d402      	bmi.n	800d8ae <_puts_r+0x4e>
 800d8a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8aa:	f000 f9af 	bl	800dc0c <__retarget_lock_release_recursive>
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	bd70      	pop	{r4, r5, r6, pc}
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	da04      	bge.n	800d8c0 <_puts_r+0x60>
 800d8b6:	69a2      	ldr	r2, [r4, #24]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	dc17      	bgt.n	800d8ec <_puts_r+0x8c>
 800d8bc:	290a      	cmp	r1, #10
 800d8be:	d015      	beq.n	800d8ec <_puts_r+0x8c>
 800d8c0:	6823      	ldr	r3, [r4, #0]
 800d8c2:	1c5a      	adds	r2, r3, #1
 800d8c4:	6022      	str	r2, [r4, #0]
 800d8c6:	7019      	strb	r1, [r3, #0]
 800d8c8:	68a3      	ldr	r3, [r4, #8]
 800d8ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d8ce:	3b01      	subs	r3, #1
 800d8d0:	60a3      	str	r3, [r4, #8]
 800d8d2:	2900      	cmp	r1, #0
 800d8d4:	d1ed      	bne.n	800d8b2 <_puts_r+0x52>
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	da11      	bge.n	800d8fe <_puts_r+0x9e>
 800d8da:	4622      	mov	r2, r4
 800d8dc:	210a      	movs	r1, #10
 800d8de:	4628      	mov	r0, r5
 800d8e0:	f000 f881 	bl	800d9e6 <__swbuf_r>
 800d8e4:	3001      	adds	r0, #1
 800d8e6:	d0d7      	beq.n	800d898 <_puts_r+0x38>
 800d8e8:	250a      	movs	r5, #10
 800d8ea:	e7d7      	b.n	800d89c <_puts_r+0x3c>
 800d8ec:	4622      	mov	r2, r4
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	f000 f879 	bl	800d9e6 <__swbuf_r>
 800d8f4:	3001      	adds	r0, #1
 800d8f6:	d1e7      	bne.n	800d8c8 <_puts_r+0x68>
 800d8f8:	e7ce      	b.n	800d898 <_puts_r+0x38>
 800d8fa:	3e01      	subs	r6, #1
 800d8fc:	e7e4      	b.n	800d8c8 <_puts_r+0x68>
 800d8fe:	6823      	ldr	r3, [r4, #0]
 800d900:	1c5a      	adds	r2, r3, #1
 800d902:	6022      	str	r2, [r4, #0]
 800d904:	220a      	movs	r2, #10
 800d906:	701a      	strb	r2, [r3, #0]
 800d908:	e7ee      	b.n	800d8e8 <_puts_r+0x88>
	...

0800d90c <puts>:
 800d90c:	4b02      	ldr	r3, [pc, #8]	@ (800d918 <puts+0xc>)
 800d90e:	4601      	mov	r1, r0
 800d910:	6818      	ldr	r0, [r3, #0]
 800d912:	f7ff bfa5 	b.w	800d860 <_puts_r>
 800d916:	bf00      	nop
 800d918:	200043b0 	.word	0x200043b0

0800d91c <siprintf>:
 800d91c:	b40e      	push	{r1, r2, r3}
 800d91e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d922:	b510      	push	{r4, lr}
 800d924:	2400      	movs	r4, #0
 800d926:	b09d      	sub	sp, #116	@ 0x74
 800d928:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d92a:	9002      	str	r0, [sp, #8]
 800d92c:	9006      	str	r0, [sp, #24]
 800d92e:	9107      	str	r1, [sp, #28]
 800d930:	9104      	str	r1, [sp, #16]
 800d932:	4809      	ldr	r0, [pc, #36]	@ (800d958 <siprintf+0x3c>)
 800d934:	4909      	ldr	r1, [pc, #36]	@ (800d95c <siprintf+0x40>)
 800d936:	f853 2b04 	ldr.w	r2, [r3], #4
 800d93a:	9105      	str	r1, [sp, #20]
 800d93c:	6800      	ldr	r0, [r0, #0]
 800d93e:	a902      	add	r1, sp, #8
 800d940:	9301      	str	r3, [sp, #4]
 800d942:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d944:	f002 fc56 	bl	80101f4 <_svfiprintf_r>
 800d948:	9b02      	ldr	r3, [sp, #8]
 800d94a:	701c      	strb	r4, [r3, #0]
 800d94c:	b01d      	add	sp, #116	@ 0x74
 800d94e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d952:	b003      	add	sp, #12
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop
 800d958:	200043b0 	.word	0x200043b0
 800d95c:	ffff0208 	.word	0xffff0208

0800d960 <__sread>:
 800d960:	b510      	push	{r4, lr}
 800d962:	460c      	mov	r4, r1
 800d964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d968:	f000 f900 	bl	800db6c <_read_r>
 800d96c:	2800      	cmp	r0, #0
 800d96e:	bfab      	itete	ge
 800d970:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d972:	89a3      	ldrhlt	r3, [r4, #12]
 800d974:	181b      	addge	r3, r3, r0
 800d976:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d97a:	bfac      	ite	ge
 800d97c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d97e:	81a3      	strhlt	r3, [r4, #12]
 800d980:	bd10      	pop	{r4, pc}

0800d982 <__swrite>:
 800d982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d986:	461f      	mov	r7, r3
 800d988:	898b      	ldrh	r3, [r1, #12]
 800d98a:	4605      	mov	r5, r0
 800d98c:	05db      	lsls	r3, r3, #23
 800d98e:	460c      	mov	r4, r1
 800d990:	4616      	mov	r6, r2
 800d992:	d505      	bpl.n	800d9a0 <__swrite+0x1e>
 800d994:	2302      	movs	r3, #2
 800d996:	2200      	movs	r2, #0
 800d998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d99c:	f000 f8d4 	bl	800db48 <_lseek_r>
 800d9a0:	89a3      	ldrh	r3, [r4, #12]
 800d9a2:	4632      	mov	r2, r6
 800d9a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d9a8:	81a3      	strh	r3, [r4, #12]
 800d9aa:	4628      	mov	r0, r5
 800d9ac:	463b      	mov	r3, r7
 800d9ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9b6:	f000 b8eb 	b.w	800db90 <_write_r>

0800d9ba <__sseek>:
 800d9ba:	b510      	push	{r4, lr}
 800d9bc:	460c      	mov	r4, r1
 800d9be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9c2:	f000 f8c1 	bl	800db48 <_lseek_r>
 800d9c6:	1c43      	adds	r3, r0, #1
 800d9c8:	89a3      	ldrh	r3, [r4, #12]
 800d9ca:	bf15      	itete	ne
 800d9cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d9ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d9d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d9d6:	81a3      	strheq	r3, [r4, #12]
 800d9d8:	bf18      	it	ne
 800d9da:	81a3      	strhne	r3, [r4, #12]
 800d9dc:	bd10      	pop	{r4, pc}

0800d9de <__sclose>:
 800d9de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9e2:	f000 b8a1 	b.w	800db28 <_close_r>

0800d9e6 <__swbuf_r>:
 800d9e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9e8:	460e      	mov	r6, r1
 800d9ea:	4614      	mov	r4, r2
 800d9ec:	4605      	mov	r5, r0
 800d9ee:	b118      	cbz	r0, 800d9f8 <__swbuf_r+0x12>
 800d9f0:	6a03      	ldr	r3, [r0, #32]
 800d9f2:	b90b      	cbnz	r3, 800d9f8 <__swbuf_r+0x12>
 800d9f4:	f7ff fefe 	bl	800d7f4 <__sinit>
 800d9f8:	69a3      	ldr	r3, [r4, #24]
 800d9fa:	60a3      	str	r3, [r4, #8]
 800d9fc:	89a3      	ldrh	r3, [r4, #12]
 800d9fe:	071a      	lsls	r2, r3, #28
 800da00:	d501      	bpl.n	800da06 <__swbuf_r+0x20>
 800da02:	6923      	ldr	r3, [r4, #16]
 800da04:	b943      	cbnz	r3, 800da18 <__swbuf_r+0x32>
 800da06:	4621      	mov	r1, r4
 800da08:	4628      	mov	r0, r5
 800da0a:	f000 f82b 	bl	800da64 <__swsetup_r>
 800da0e:	b118      	cbz	r0, 800da18 <__swbuf_r+0x32>
 800da10:	f04f 37ff 	mov.w	r7, #4294967295
 800da14:	4638      	mov	r0, r7
 800da16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da18:	6823      	ldr	r3, [r4, #0]
 800da1a:	6922      	ldr	r2, [r4, #16]
 800da1c:	b2f6      	uxtb	r6, r6
 800da1e:	1a98      	subs	r0, r3, r2
 800da20:	6963      	ldr	r3, [r4, #20]
 800da22:	4637      	mov	r7, r6
 800da24:	4283      	cmp	r3, r0
 800da26:	dc05      	bgt.n	800da34 <__swbuf_r+0x4e>
 800da28:	4621      	mov	r1, r4
 800da2a:	4628      	mov	r0, r5
 800da2c:	f002 fe9e 	bl	801076c <_fflush_r>
 800da30:	2800      	cmp	r0, #0
 800da32:	d1ed      	bne.n	800da10 <__swbuf_r+0x2a>
 800da34:	68a3      	ldr	r3, [r4, #8]
 800da36:	3b01      	subs	r3, #1
 800da38:	60a3      	str	r3, [r4, #8]
 800da3a:	6823      	ldr	r3, [r4, #0]
 800da3c:	1c5a      	adds	r2, r3, #1
 800da3e:	6022      	str	r2, [r4, #0]
 800da40:	701e      	strb	r6, [r3, #0]
 800da42:	6962      	ldr	r2, [r4, #20]
 800da44:	1c43      	adds	r3, r0, #1
 800da46:	429a      	cmp	r2, r3
 800da48:	d004      	beq.n	800da54 <__swbuf_r+0x6e>
 800da4a:	89a3      	ldrh	r3, [r4, #12]
 800da4c:	07db      	lsls	r3, r3, #31
 800da4e:	d5e1      	bpl.n	800da14 <__swbuf_r+0x2e>
 800da50:	2e0a      	cmp	r6, #10
 800da52:	d1df      	bne.n	800da14 <__swbuf_r+0x2e>
 800da54:	4621      	mov	r1, r4
 800da56:	4628      	mov	r0, r5
 800da58:	f002 fe88 	bl	801076c <_fflush_r>
 800da5c:	2800      	cmp	r0, #0
 800da5e:	d0d9      	beq.n	800da14 <__swbuf_r+0x2e>
 800da60:	e7d6      	b.n	800da10 <__swbuf_r+0x2a>
	...

0800da64 <__swsetup_r>:
 800da64:	b538      	push	{r3, r4, r5, lr}
 800da66:	4b29      	ldr	r3, [pc, #164]	@ (800db0c <__swsetup_r+0xa8>)
 800da68:	4605      	mov	r5, r0
 800da6a:	6818      	ldr	r0, [r3, #0]
 800da6c:	460c      	mov	r4, r1
 800da6e:	b118      	cbz	r0, 800da78 <__swsetup_r+0x14>
 800da70:	6a03      	ldr	r3, [r0, #32]
 800da72:	b90b      	cbnz	r3, 800da78 <__swsetup_r+0x14>
 800da74:	f7ff febe 	bl	800d7f4 <__sinit>
 800da78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da7c:	0719      	lsls	r1, r3, #28
 800da7e:	d422      	bmi.n	800dac6 <__swsetup_r+0x62>
 800da80:	06da      	lsls	r2, r3, #27
 800da82:	d407      	bmi.n	800da94 <__swsetup_r+0x30>
 800da84:	2209      	movs	r2, #9
 800da86:	602a      	str	r2, [r5, #0]
 800da88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da8c:	f04f 30ff 	mov.w	r0, #4294967295
 800da90:	81a3      	strh	r3, [r4, #12]
 800da92:	e033      	b.n	800dafc <__swsetup_r+0x98>
 800da94:	0758      	lsls	r0, r3, #29
 800da96:	d512      	bpl.n	800dabe <__swsetup_r+0x5a>
 800da98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da9a:	b141      	cbz	r1, 800daae <__swsetup_r+0x4a>
 800da9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800daa0:	4299      	cmp	r1, r3
 800daa2:	d002      	beq.n	800daaa <__swsetup_r+0x46>
 800daa4:	4628      	mov	r0, r5
 800daa6:	f000 ff2f 	bl	800e908 <_free_r>
 800daaa:	2300      	movs	r3, #0
 800daac:	6363      	str	r3, [r4, #52]	@ 0x34
 800daae:	89a3      	ldrh	r3, [r4, #12]
 800dab0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dab4:	81a3      	strh	r3, [r4, #12]
 800dab6:	2300      	movs	r3, #0
 800dab8:	6063      	str	r3, [r4, #4]
 800daba:	6923      	ldr	r3, [r4, #16]
 800dabc:	6023      	str	r3, [r4, #0]
 800dabe:	89a3      	ldrh	r3, [r4, #12]
 800dac0:	f043 0308 	orr.w	r3, r3, #8
 800dac4:	81a3      	strh	r3, [r4, #12]
 800dac6:	6923      	ldr	r3, [r4, #16]
 800dac8:	b94b      	cbnz	r3, 800dade <__swsetup_r+0x7a>
 800daca:	89a3      	ldrh	r3, [r4, #12]
 800dacc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dad4:	d003      	beq.n	800dade <__swsetup_r+0x7a>
 800dad6:	4621      	mov	r1, r4
 800dad8:	4628      	mov	r0, r5
 800dada:	f002 fe94 	bl	8010806 <__smakebuf_r>
 800dade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dae2:	f013 0201 	ands.w	r2, r3, #1
 800dae6:	d00a      	beq.n	800dafe <__swsetup_r+0x9a>
 800dae8:	2200      	movs	r2, #0
 800daea:	60a2      	str	r2, [r4, #8]
 800daec:	6962      	ldr	r2, [r4, #20]
 800daee:	4252      	negs	r2, r2
 800daf0:	61a2      	str	r2, [r4, #24]
 800daf2:	6922      	ldr	r2, [r4, #16]
 800daf4:	b942      	cbnz	r2, 800db08 <__swsetup_r+0xa4>
 800daf6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dafa:	d1c5      	bne.n	800da88 <__swsetup_r+0x24>
 800dafc:	bd38      	pop	{r3, r4, r5, pc}
 800dafe:	0799      	lsls	r1, r3, #30
 800db00:	bf58      	it	pl
 800db02:	6962      	ldrpl	r2, [r4, #20]
 800db04:	60a2      	str	r2, [r4, #8]
 800db06:	e7f4      	b.n	800daf2 <__swsetup_r+0x8e>
 800db08:	2000      	movs	r0, #0
 800db0a:	e7f7      	b.n	800dafc <__swsetup_r+0x98>
 800db0c:	200043b0 	.word	0x200043b0

0800db10 <memset>:
 800db10:	4603      	mov	r3, r0
 800db12:	4402      	add	r2, r0
 800db14:	4293      	cmp	r3, r2
 800db16:	d100      	bne.n	800db1a <memset+0xa>
 800db18:	4770      	bx	lr
 800db1a:	f803 1b01 	strb.w	r1, [r3], #1
 800db1e:	e7f9      	b.n	800db14 <memset+0x4>

0800db20 <_localeconv_r>:
 800db20:	4800      	ldr	r0, [pc, #0]	@ (800db24 <_localeconv_r+0x4>)
 800db22:	4770      	bx	lr
 800db24:	200044f0 	.word	0x200044f0

0800db28 <_close_r>:
 800db28:	b538      	push	{r3, r4, r5, lr}
 800db2a:	2300      	movs	r3, #0
 800db2c:	4d05      	ldr	r5, [pc, #20]	@ (800db44 <_close_r+0x1c>)
 800db2e:	4604      	mov	r4, r0
 800db30:	4608      	mov	r0, r1
 800db32:	602b      	str	r3, [r5, #0]
 800db34:	f7fa fe0e 	bl	8008754 <_close>
 800db38:	1c43      	adds	r3, r0, #1
 800db3a:	d102      	bne.n	800db42 <_close_r+0x1a>
 800db3c:	682b      	ldr	r3, [r5, #0]
 800db3e:	b103      	cbz	r3, 800db42 <_close_r+0x1a>
 800db40:	6023      	str	r3, [r4, #0]
 800db42:	bd38      	pop	{r3, r4, r5, pc}
 800db44:	2000964c 	.word	0x2000964c

0800db48 <_lseek_r>:
 800db48:	b538      	push	{r3, r4, r5, lr}
 800db4a:	4604      	mov	r4, r0
 800db4c:	4608      	mov	r0, r1
 800db4e:	4611      	mov	r1, r2
 800db50:	2200      	movs	r2, #0
 800db52:	4d05      	ldr	r5, [pc, #20]	@ (800db68 <_lseek_r+0x20>)
 800db54:	602a      	str	r2, [r5, #0]
 800db56:	461a      	mov	r2, r3
 800db58:	f7fa fe06 	bl	8008768 <_lseek>
 800db5c:	1c43      	adds	r3, r0, #1
 800db5e:	d102      	bne.n	800db66 <_lseek_r+0x1e>
 800db60:	682b      	ldr	r3, [r5, #0]
 800db62:	b103      	cbz	r3, 800db66 <_lseek_r+0x1e>
 800db64:	6023      	str	r3, [r4, #0]
 800db66:	bd38      	pop	{r3, r4, r5, pc}
 800db68:	2000964c 	.word	0x2000964c

0800db6c <_read_r>:
 800db6c:	b538      	push	{r3, r4, r5, lr}
 800db6e:	4604      	mov	r4, r0
 800db70:	4608      	mov	r0, r1
 800db72:	4611      	mov	r1, r2
 800db74:	2200      	movs	r2, #0
 800db76:	4d05      	ldr	r5, [pc, #20]	@ (800db8c <_read_r+0x20>)
 800db78:	602a      	str	r2, [r5, #0]
 800db7a:	461a      	mov	r2, r3
 800db7c:	f7fa fdcc 	bl	8008718 <_read>
 800db80:	1c43      	adds	r3, r0, #1
 800db82:	d102      	bne.n	800db8a <_read_r+0x1e>
 800db84:	682b      	ldr	r3, [r5, #0]
 800db86:	b103      	cbz	r3, 800db8a <_read_r+0x1e>
 800db88:	6023      	str	r3, [r4, #0]
 800db8a:	bd38      	pop	{r3, r4, r5, pc}
 800db8c:	2000964c 	.word	0x2000964c

0800db90 <_write_r>:
 800db90:	b538      	push	{r3, r4, r5, lr}
 800db92:	4604      	mov	r4, r0
 800db94:	4608      	mov	r0, r1
 800db96:	4611      	mov	r1, r2
 800db98:	2200      	movs	r2, #0
 800db9a:	4d05      	ldr	r5, [pc, #20]	@ (800dbb0 <_write_r+0x20>)
 800db9c:	602a      	str	r2, [r5, #0]
 800db9e:	461a      	mov	r2, r3
 800dba0:	f7fa fdca 	bl	8008738 <_write>
 800dba4:	1c43      	adds	r3, r0, #1
 800dba6:	d102      	bne.n	800dbae <_write_r+0x1e>
 800dba8:	682b      	ldr	r3, [r5, #0]
 800dbaa:	b103      	cbz	r3, 800dbae <_write_r+0x1e>
 800dbac:	6023      	str	r3, [r4, #0]
 800dbae:	bd38      	pop	{r3, r4, r5, pc}
 800dbb0:	2000964c 	.word	0x2000964c

0800dbb4 <__errno>:
 800dbb4:	4b01      	ldr	r3, [pc, #4]	@ (800dbbc <__errno+0x8>)
 800dbb6:	6818      	ldr	r0, [r3, #0]
 800dbb8:	4770      	bx	lr
 800dbba:	bf00      	nop
 800dbbc:	200043b0 	.word	0x200043b0

0800dbc0 <__libc_init_array>:
 800dbc0:	b570      	push	{r4, r5, r6, lr}
 800dbc2:	2600      	movs	r6, #0
 800dbc4:	4d0c      	ldr	r5, [pc, #48]	@ (800dbf8 <__libc_init_array+0x38>)
 800dbc6:	4c0d      	ldr	r4, [pc, #52]	@ (800dbfc <__libc_init_array+0x3c>)
 800dbc8:	1b64      	subs	r4, r4, r5
 800dbca:	10a4      	asrs	r4, r4, #2
 800dbcc:	42a6      	cmp	r6, r4
 800dbce:	d109      	bne.n	800dbe4 <__libc_init_array+0x24>
 800dbd0:	f003 fad8 	bl	8011184 <_init>
 800dbd4:	2600      	movs	r6, #0
 800dbd6:	4d0a      	ldr	r5, [pc, #40]	@ (800dc00 <__libc_init_array+0x40>)
 800dbd8:	4c0a      	ldr	r4, [pc, #40]	@ (800dc04 <__libc_init_array+0x44>)
 800dbda:	1b64      	subs	r4, r4, r5
 800dbdc:	10a4      	asrs	r4, r4, #2
 800dbde:	42a6      	cmp	r6, r4
 800dbe0:	d105      	bne.n	800dbee <__libc_init_array+0x2e>
 800dbe2:	bd70      	pop	{r4, r5, r6, pc}
 800dbe4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbe8:	4798      	blx	r3
 800dbea:	3601      	adds	r6, #1
 800dbec:	e7ee      	b.n	800dbcc <__libc_init_array+0xc>
 800dbee:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbf2:	4798      	blx	r3
 800dbf4:	3601      	adds	r6, #1
 800dbf6:	e7f2      	b.n	800dbde <__libc_init_array+0x1e>
 800dbf8:	08013224 	.word	0x08013224
 800dbfc:	08013224 	.word	0x08013224
 800dc00:	08013224 	.word	0x08013224
 800dc04:	08013228 	.word	0x08013228

0800dc08 <__retarget_lock_init_recursive>:
 800dc08:	4770      	bx	lr

0800dc0a <__retarget_lock_acquire_recursive>:
 800dc0a:	4770      	bx	lr

0800dc0c <__retarget_lock_release_recursive>:
 800dc0c:	4770      	bx	lr

0800dc0e <memchr>:
 800dc0e:	4603      	mov	r3, r0
 800dc10:	b510      	push	{r4, lr}
 800dc12:	b2c9      	uxtb	r1, r1
 800dc14:	4402      	add	r2, r0
 800dc16:	4293      	cmp	r3, r2
 800dc18:	4618      	mov	r0, r3
 800dc1a:	d101      	bne.n	800dc20 <memchr+0x12>
 800dc1c:	2000      	movs	r0, #0
 800dc1e:	e003      	b.n	800dc28 <memchr+0x1a>
 800dc20:	7804      	ldrb	r4, [r0, #0]
 800dc22:	3301      	adds	r3, #1
 800dc24:	428c      	cmp	r4, r1
 800dc26:	d1f6      	bne.n	800dc16 <memchr+0x8>
 800dc28:	bd10      	pop	{r4, pc}

0800dc2a <memcpy>:
 800dc2a:	440a      	add	r2, r1
 800dc2c:	4291      	cmp	r1, r2
 800dc2e:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc32:	d100      	bne.n	800dc36 <memcpy+0xc>
 800dc34:	4770      	bx	lr
 800dc36:	b510      	push	{r4, lr}
 800dc38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc3c:	4291      	cmp	r1, r2
 800dc3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc42:	d1f9      	bne.n	800dc38 <memcpy+0xe>
 800dc44:	bd10      	pop	{r4, pc}
	...

0800dc48 <nanf>:
 800dc48:	4800      	ldr	r0, [pc, #0]	@ (800dc4c <nanf+0x4>)
 800dc4a:	4770      	bx	lr
 800dc4c:	7fc00000 	.word	0x7fc00000

0800dc50 <quorem>:
 800dc50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc54:	6903      	ldr	r3, [r0, #16]
 800dc56:	690c      	ldr	r4, [r1, #16]
 800dc58:	4607      	mov	r7, r0
 800dc5a:	42a3      	cmp	r3, r4
 800dc5c:	db7e      	blt.n	800dd5c <quorem+0x10c>
 800dc5e:	3c01      	subs	r4, #1
 800dc60:	00a3      	lsls	r3, r4, #2
 800dc62:	f100 0514 	add.w	r5, r0, #20
 800dc66:	f101 0814 	add.w	r8, r1, #20
 800dc6a:	9300      	str	r3, [sp, #0]
 800dc6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc70:	9301      	str	r3, [sp, #4]
 800dc72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc86:	d32e      	bcc.n	800dce6 <quorem+0x96>
 800dc88:	f04f 0a00 	mov.w	sl, #0
 800dc8c:	46c4      	mov	ip, r8
 800dc8e:	46ae      	mov	lr, r5
 800dc90:	46d3      	mov	fp, sl
 800dc92:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dc96:	b298      	uxth	r0, r3
 800dc98:	fb06 a000 	mla	r0, r6, r0, sl
 800dc9c:	0c1b      	lsrs	r3, r3, #16
 800dc9e:	0c02      	lsrs	r2, r0, #16
 800dca0:	fb06 2303 	mla	r3, r6, r3, r2
 800dca4:	f8de 2000 	ldr.w	r2, [lr]
 800dca8:	b280      	uxth	r0, r0
 800dcaa:	b292      	uxth	r2, r2
 800dcac:	1a12      	subs	r2, r2, r0
 800dcae:	445a      	add	r2, fp
 800dcb0:	f8de 0000 	ldr.w	r0, [lr]
 800dcb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dcbe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dcc2:	b292      	uxth	r2, r2
 800dcc4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dcc8:	45e1      	cmp	r9, ip
 800dcca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dcce:	f84e 2b04 	str.w	r2, [lr], #4
 800dcd2:	d2de      	bcs.n	800dc92 <quorem+0x42>
 800dcd4:	9b00      	ldr	r3, [sp, #0]
 800dcd6:	58eb      	ldr	r3, [r5, r3]
 800dcd8:	b92b      	cbnz	r3, 800dce6 <quorem+0x96>
 800dcda:	9b01      	ldr	r3, [sp, #4]
 800dcdc:	3b04      	subs	r3, #4
 800dcde:	429d      	cmp	r5, r3
 800dce0:	461a      	mov	r2, r3
 800dce2:	d32f      	bcc.n	800dd44 <quorem+0xf4>
 800dce4:	613c      	str	r4, [r7, #16]
 800dce6:	4638      	mov	r0, r7
 800dce8:	f001 f9c8 	bl	800f07c <__mcmp>
 800dcec:	2800      	cmp	r0, #0
 800dcee:	db25      	blt.n	800dd3c <quorem+0xec>
 800dcf0:	4629      	mov	r1, r5
 800dcf2:	2000      	movs	r0, #0
 800dcf4:	f858 2b04 	ldr.w	r2, [r8], #4
 800dcf8:	f8d1 c000 	ldr.w	ip, [r1]
 800dcfc:	fa1f fe82 	uxth.w	lr, r2
 800dd00:	fa1f f38c 	uxth.w	r3, ip
 800dd04:	eba3 030e 	sub.w	r3, r3, lr
 800dd08:	4403      	add	r3, r0
 800dd0a:	0c12      	lsrs	r2, r2, #16
 800dd0c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dd10:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dd14:	b29b      	uxth	r3, r3
 800dd16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd1a:	45c1      	cmp	r9, r8
 800dd1c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dd20:	f841 3b04 	str.w	r3, [r1], #4
 800dd24:	d2e6      	bcs.n	800dcf4 <quorem+0xa4>
 800dd26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd2e:	b922      	cbnz	r2, 800dd3a <quorem+0xea>
 800dd30:	3b04      	subs	r3, #4
 800dd32:	429d      	cmp	r5, r3
 800dd34:	461a      	mov	r2, r3
 800dd36:	d30b      	bcc.n	800dd50 <quorem+0x100>
 800dd38:	613c      	str	r4, [r7, #16]
 800dd3a:	3601      	adds	r6, #1
 800dd3c:	4630      	mov	r0, r6
 800dd3e:	b003      	add	sp, #12
 800dd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd44:	6812      	ldr	r2, [r2, #0]
 800dd46:	3b04      	subs	r3, #4
 800dd48:	2a00      	cmp	r2, #0
 800dd4a:	d1cb      	bne.n	800dce4 <quorem+0x94>
 800dd4c:	3c01      	subs	r4, #1
 800dd4e:	e7c6      	b.n	800dcde <quorem+0x8e>
 800dd50:	6812      	ldr	r2, [r2, #0]
 800dd52:	3b04      	subs	r3, #4
 800dd54:	2a00      	cmp	r2, #0
 800dd56:	d1ef      	bne.n	800dd38 <quorem+0xe8>
 800dd58:	3c01      	subs	r4, #1
 800dd5a:	e7ea      	b.n	800dd32 <quorem+0xe2>
 800dd5c:	2000      	movs	r0, #0
 800dd5e:	e7ee      	b.n	800dd3e <quorem+0xee>

0800dd60 <_dtoa_r>:
 800dd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd64:	4614      	mov	r4, r2
 800dd66:	461d      	mov	r5, r3
 800dd68:	69c7      	ldr	r7, [r0, #28]
 800dd6a:	b097      	sub	sp, #92	@ 0x5c
 800dd6c:	4681      	mov	r9, r0
 800dd6e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800dd72:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800dd74:	b97f      	cbnz	r7, 800dd96 <_dtoa_r+0x36>
 800dd76:	2010      	movs	r0, #16
 800dd78:	f000 fe0e 	bl	800e998 <malloc>
 800dd7c:	4602      	mov	r2, r0
 800dd7e:	f8c9 001c 	str.w	r0, [r9, #28]
 800dd82:	b920      	cbnz	r0, 800dd8e <_dtoa_r+0x2e>
 800dd84:	21ef      	movs	r1, #239	@ 0xef
 800dd86:	4bac      	ldr	r3, [pc, #688]	@ (800e038 <_dtoa_r+0x2d8>)
 800dd88:	48ac      	ldr	r0, [pc, #688]	@ (800e03c <_dtoa_r+0x2dc>)
 800dd8a:	f002 fddd 	bl	8010948 <__assert_func>
 800dd8e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dd92:	6007      	str	r7, [r0, #0]
 800dd94:	60c7      	str	r7, [r0, #12]
 800dd96:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dd9a:	6819      	ldr	r1, [r3, #0]
 800dd9c:	b159      	cbz	r1, 800ddb6 <_dtoa_r+0x56>
 800dd9e:	685a      	ldr	r2, [r3, #4]
 800dda0:	2301      	movs	r3, #1
 800dda2:	4093      	lsls	r3, r2
 800dda4:	604a      	str	r2, [r1, #4]
 800dda6:	608b      	str	r3, [r1, #8]
 800dda8:	4648      	mov	r0, r9
 800ddaa:	f000 feeb 	bl	800eb84 <_Bfree>
 800ddae:	2200      	movs	r2, #0
 800ddb0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ddb4:	601a      	str	r2, [r3, #0]
 800ddb6:	1e2b      	subs	r3, r5, #0
 800ddb8:	bfaf      	iteee	ge
 800ddba:	2300      	movge	r3, #0
 800ddbc:	2201      	movlt	r2, #1
 800ddbe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ddc2:	9307      	strlt	r3, [sp, #28]
 800ddc4:	bfa8      	it	ge
 800ddc6:	6033      	strge	r3, [r6, #0]
 800ddc8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800ddcc:	4b9c      	ldr	r3, [pc, #624]	@ (800e040 <_dtoa_r+0x2e0>)
 800ddce:	bfb8      	it	lt
 800ddd0:	6032      	strlt	r2, [r6, #0]
 800ddd2:	ea33 0308 	bics.w	r3, r3, r8
 800ddd6:	d112      	bne.n	800ddfe <_dtoa_r+0x9e>
 800ddd8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dddc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ddde:	6013      	str	r3, [r2, #0]
 800dde0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800dde4:	4323      	orrs	r3, r4
 800dde6:	f000 855e 	beq.w	800e8a6 <_dtoa_r+0xb46>
 800ddea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ddec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e044 <_dtoa_r+0x2e4>
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	f000 8560 	beq.w	800e8b6 <_dtoa_r+0xb56>
 800ddf6:	f10a 0303 	add.w	r3, sl, #3
 800ddfa:	f000 bd5a 	b.w	800e8b2 <_dtoa_r+0xb52>
 800ddfe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de02:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800de06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de0a:	2200      	movs	r2, #0
 800de0c:	2300      	movs	r3, #0
 800de0e:	f7f2 fe3b 	bl	8000a88 <__aeabi_dcmpeq>
 800de12:	4607      	mov	r7, r0
 800de14:	b158      	cbz	r0, 800de2e <_dtoa_r+0xce>
 800de16:	2301      	movs	r3, #1
 800de18:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800de1a:	6013      	str	r3, [r2, #0]
 800de1c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800de1e:	b113      	cbz	r3, 800de26 <_dtoa_r+0xc6>
 800de20:	4b89      	ldr	r3, [pc, #548]	@ (800e048 <_dtoa_r+0x2e8>)
 800de22:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800de24:	6013      	str	r3, [r2, #0]
 800de26:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800e04c <_dtoa_r+0x2ec>
 800de2a:	f000 bd44 	b.w	800e8b6 <_dtoa_r+0xb56>
 800de2e:	ab14      	add	r3, sp, #80	@ 0x50
 800de30:	9301      	str	r3, [sp, #4]
 800de32:	ab15      	add	r3, sp, #84	@ 0x54
 800de34:	9300      	str	r3, [sp, #0]
 800de36:	4648      	mov	r0, r9
 800de38:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800de3c:	f001 fa36 	bl	800f2ac <__d2b>
 800de40:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800de44:	9003      	str	r0, [sp, #12]
 800de46:	2e00      	cmp	r6, #0
 800de48:	d078      	beq.n	800df3c <_dtoa_r+0x1dc>
 800de4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800de50:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800de54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de58:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800de5c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800de60:	9712      	str	r7, [sp, #72]	@ 0x48
 800de62:	4619      	mov	r1, r3
 800de64:	2200      	movs	r2, #0
 800de66:	4b7a      	ldr	r3, [pc, #488]	@ (800e050 <_dtoa_r+0x2f0>)
 800de68:	f7f2 f9ee 	bl	8000248 <__aeabi_dsub>
 800de6c:	a36c      	add	r3, pc, #432	@ (adr r3, 800e020 <_dtoa_r+0x2c0>)
 800de6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de72:	f7f2 fba1 	bl	80005b8 <__aeabi_dmul>
 800de76:	a36c      	add	r3, pc, #432	@ (adr r3, 800e028 <_dtoa_r+0x2c8>)
 800de78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7c:	f7f2 f9e6 	bl	800024c <__adddf3>
 800de80:	4604      	mov	r4, r0
 800de82:	4630      	mov	r0, r6
 800de84:	460d      	mov	r5, r1
 800de86:	f7f2 fb2d 	bl	80004e4 <__aeabi_i2d>
 800de8a:	a369      	add	r3, pc, #420	@ (adr r3, 800e030 <_dtoa_r+0x2d0>)
 800de8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de90:	f7f2 fb92 	bl	80005b8 <__aeabi_dmul>
 800de94:	4602      	mov	r2, r0
 800de96:	460b      	mov	r3, r1
 800de98:	4620      	mov	r0, r4
 800de9a:	4629      	mov	r1, r5
 800de9c:	f7f2 f9d6 	bl	800024c <__adddf3>
 800dea0:	4604      	mov	r4, r0
 800dea2:	460d      	mov	r5, r1
 800dea4:	f7f2 fe38 	bl	8000b18 <__aeabi_d2iz>
 800dea8:	2200      	movs	r2, #0
 800deaa:	4607      	mov	r7, r0
 800deac:	2300      	movs	r3, #0
 800deae:	4620      	mov	r0, r4
 800deb0:	4629      	mov	r1, r5
 800deb2:	f7f2 fdf3 	bl	8000a9c <__aeabi_dcmplt>
 800deb6:	b140      	cbz	r0, 800deca <_dtoa_r+0x16a>
 800deb8:	4638      	mov	r0, r7
 800deba:	f7f2 fb13 	bl	80004e4 <__aeabi_i2d>
 800debe:	4622      	mov	r2, r4
 800dec0:	462b      	mov	r3, r5
 800dec2:	f7f2 fde1 	bl	8000a88 <__aeabi_dcmpeq>
 800dec6:	b900      	cbnz	r0, 800deca <_dtoa_r+0x16a>
 800dec8:	3f01      	subs	r7, #1
 800deca:	2f16      	cmp	r7, #22
 800decc:	d854      	bhi.n	800df78 <_dtoa_r+0x218>
 800dece:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ded2:	4b60      	ldr	r3, [pc, #384]	@ (800e054 <_dtoa_r+0x2f4>)
 800ded4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ded8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dedc:	f7f2 fdde 	bl	8000a9c <__aeabi_dcmplt>
 800dee0:	2800      	cmp	r0, #0
 800dee2:	d04b      	beq.n	800df7c <_dtoa_r+0x21c>
 800dee4:	2300      	movs	r3, #0
 800dee6:	3f01      	subs	r7, #1
 800dee8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800deea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800deec:	1b9b      	subs	r3, r3, r6
 800deee:	1e5a      	subs	r2, r3, #1
 800def0:	bf49      	itett	mi
 800def2:	f1c3 0301 	rsbmi	r3, r3, #1
 800def6:	2300      	movpl	r3, #0
 800def8:	9304      	strmi	r3, [sp, #16]
 800defa:	2300      	movmi	r3, #0
 800defc:	9209      	str	r2, [sp, #36]	@ 0x24
 800defe:	bf54      	ite	pl
 800df00:	9304      	strpl	r3, [sp, #16]
 800df02:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800df04:	2f00      	cmp	r7, #0
 800df06:	db3b      	blt.n	800df80 <_dtoa_r+0x220>
 800df08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df0a:	970e      	str	r7, [sp, #56]	@ 0x38
 800df0c:	443b      	add	r3, r7
 800df0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800df10:	2300      	movs	r3, #0
 800df12:	930a      	str	r3, [sp, #40]	@ 0x28
 800df14:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800df16:	2b09      	cmp	r3, #9
 800df18:	d865      	bhi.n	800dfe6 <_dtoa_r+0x286>
 800df1a:	2b05      	cmp	r3, #5
 800df1c:	bfc4      	itt	gt
 800df1e:	3b04      	subgt	r3, #4
 800df20:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800df22:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800df24:	bfc8      	it	gt
 800df26:	2400      	movgt	r4, #0
 800df28:	f1a3 0302 	sub.w	r3, r3, #2
 800df2c:	bfd8      	it	le
 800df2e:	2401      	movle	r4, #1
 800df30:	2b03      	cmp	r3, #3
 800df32:	d864      	bhi.n	800dffe <_dtoa_r+0x29e>
 800df34:	e8df f003 	tbb	[pc, r3]
 800df38:	2c385553 	.word	0x2c385553
 800df3c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800df40:	441e      	add	r6, r3
 800df42:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800df46:	2b20      	cmp	r3, #32
 800df48:	bfc1      	itttt	gt
 800df4a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800df4e:	fa08 f803 	lslgt.w	r8, r8, r3
 800df52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800df56:	fa24 f303 	lsrgt.w	r3, r4, r3
 800df5a:	bfd6      	itet	le
 800df5c:	f1c3 0320 	rsble	r3, r3, #32
 800df60:	ea48 0003 	orrgt.w	r0, r8, r3
 800df64:	fa04 f003 	lslle.w	r0, r4, r3
 800df68:	f7f2 faac 	bl	80004c4 <__aeabi_ui2d>
 800df6c:	2201      	movs	r2, #1
 800df6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800df72:	3e01      	subs	r6, #1
 800df74:	9212      	str	r2, [sp, #72]	@ 0x48
 800df76:	e774      	b.n	800de62 <_dtoa_r+0x102>
 800df78:	2301      	movs	r3, #1
 800df7a:	e7b5      	b.n	800dee8 <_dtoa_r+0x188>
 800df7c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800df7e:	e7b4      	b.n	800deea <_dtoa_r+0x18a>
 800df80:	9b04      	ldr	r3, [sp, #16]
 800df82:	1bdb      	subs	r3, r3, r7
 800df84:	9304      	str	r3, [sp, #16]
 800df86:	427b      	negs	r3, r7
 800df88:	930a      	str	r3, [sp, #40]	@ 0x28
 800df8a:	2300      	movs	r3, #0
 800df8c:	930e      	str	r3, [sp, #56]	@ 0x38
 800df8e:	e7c1      	b.n	800df14 <_dtoa_r+0x1b4>
 800df90:	2301      	movs	r3, #1
 800df92:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800df96:	eb07 0b03 	add.w	fp, r7, r3
 800df9a:	f10b 0301 	add.w	r3, fp, #1
 800df9e:	2b01      	cmp	r3, #1
 800dfa0:	9308      	str	r3, [sp, #32]
 800dfa2:	bfb8      	it	lt
 800dfa4:	2301      	movlt	r3, #1
 800dfa6:	e006      	b.n	800dfb6 <_dtoa_r+0x256>
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dfac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	dd28      	ble.n	800e004 <_dtoa_r+0x2a4>
 800dfb2:	469b      	mov	fp, r3
 800dfb4:	9308      	str	r3, [sp, #32]
 800dfb6:	2100      	movs	r1, #0
 800dfb8:	2204      	movs	r2, #4
 800dfba:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800dfbe:	f102 0514 	add.w	r5, r2, #20
 800dfc2:	429d      	cmp	r5, r3
 800dfc4:	d926      	bls.n	800e014 <_dtoa_r+0x2b4>
 800dfc6:	6041      	str	r1, [r0, #4]
 800dfc8:	4648      	mov	r0, r9
 800dfca:	f000 fd9b 	bl	800eb04 <_Balloc>
 800dfce:	4682      	mov	sl, r0
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	d143      	bne.n	800e05c <_dtoa_r+0x2fc>
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	f240 11af 	movw	r1, #431	@ 0x1af
 800dfda:	4b1f      	ldr	r3, [pc, #124]	@ (800e058 <_dtoa_r+0x2f8>)
 800dfdc:	e6d4      	b.n	800dd88 <_dtoa_r+0x28>
 800dfde:	2300      	movs	r3, #0
 800dfe0:	e7e3      	b.n	800dfaa <_dtoa_r+0x24a>
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	e7d5      	b.n	800df92 <_dtoa_r+0x232>
 800dfe6:	2401      	movs	r4, #1
 800dfe8:	2300      	movs	r3, #0
 800dfea:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dfec:	9320      	str	r3, [sp, #128]	@ 0x80
 800dfee:	f04f 3bff 	mov.w	fp, #4294967295
 800dff2:	2200      	movs	r2, #0
 800dff4:	2312      	movs	r3, #18
 800dff6:	f8cd b020 	str.w	fp, [sp, #32]
 800dffa:	9221      	str	r2, [sp, #132]	@ 0x84
 800dffc:	e7db      	b.n	800dfb6 <_dtoa_r+0x256>
 800dffe:	2301      	movs	r3, #1
 800e000:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e002:	e7f4      	b.n	800dfee <_dtoa_r+0x28e>
 800e004:	f04f 0b01 	mov.w	fp, #1
 800e008:	465b      	mov	r3, fp
 800e00a:	f8cd b020 	str.w	fp, [sp, #32]
 800e00e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800e012:	e7d0      	b.n	800dfb6 <_dtoa_r+0x256>
 800e014:	3101      	adds	r1, #1
 800e016:	0052      	lsls	r2, r2, #1
 800e018:	e7d1      	b.n	800dfbe <_dtoa_r+0x25e>
 800e01a:	bf00      	nop
 800e01c:	f3af 8000 	nop.w
 800e020:	636f4361 	.word	0x636f4361
 800e024:	3fd287a7 	.word	0x3fd287a7
 800e028:	8b60c8b3 	.word	0x8b60c8b3
 800e02c:	3fc68a28 	.word	0x3fc68a28
 800e030:	509f79fb 	.word	0x509f79fb
 800e034:	3fd34413 	.word	0x3fd34413
 800e038:	08012e3a 	.word	0x08012e3a
 800e03c:	08012e51 	.word	0x08012e51
 800e040:	7ff00000 	.word	0x7ff00000
 800e044:	08012e36 	.word	0x08012e36
 800e048:	08012e05 	.word	0x08012e05
 800e04c:	08012e04 	.word	0x08012e04
 800e050:	3ff80000 	.word	0x3ff80000
 800e054:	08013000 	.word	0x08013000
 800e058:	08012ea9 	.word	0x08012ea9
 800e05c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e060:	6018      	str	r0, [r3, #0]
 800e062:	9b08      	ldr	r3, [sp, #32]
 800e064:	2b0e      	cmp	r3, #14
 800e066:	f200 80a1 	bhi.w	800e1ac <_dtoa_r+0x44c>
 800e06a:	2c00      	cmp	r4, #0
 800e06c:	f000 809e 	beq.w	800e1ac <_dtoa_r+0x44c>
 800e070:	2f00      	cmp	r7, #0
 800e072:	dd33      	ble.n	800e0dc <_dtoa_r+0x37c>
 800e074:	4b9c      	ldr	r3, [pc, #624]	@ (800e2e8 <_dtoa_r+0x588>)
 800e076:	f007 020f 	and.w	r2, r7, #15
 800e07a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e07e:	05f8      	lsls	r0, r7, #23
 800e080:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e084:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800e088:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e08c:	d516      	bpl.n	800e0bc <_dtoa_r+0x35c>
 800e08e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e092:	4b96      	ldr	r3, [pc, #600]	@ (800e2ec <_dtoa_r+0x58c>)
 800e094:	2603      	movs	r6, #3
 800e096:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e09a:	f7f2 fbb7 	bl	800080c <__aeabi_ddiv>
 800e09e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e0a2:	f004 040f 	and.w	r4, r4, #15
 800e0a6:	4d91      	ldr	r5, [pc, #580]	@ (800e2ec <_dtoa_r+0x58c>)
 800e0a8:	b954      	cbnz	r4, 800e0c0 <_dtoa_r+0x360>
 800e0aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e0ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0b2:	f7f2 fbab 	bl	800080c <__aeabi_ddiv>
 800e0b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e0ba:	e028      	b.n	800e10e <_dtoa_r+0x3ae>
 800e0bc:	2602      	movs	r6, #2
 800e0be:	e7f2      	b.n	800e0a6 <_dtoa_r+0x346>
 800e0c0:	07e1      	lsls	r1, r4, #31
 800e0c2:	d508      	bpl.n	800e0d6 <_dtoa_r+0x376>
 800e0c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e0c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e0cc:	f7f2 fa74 	bl	80005b8 <__aeabi_dmul>
 800e0d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e0d4:	3601      	adds	r6, #1
 800e0d6:	1064      	asrs	r4, r4, #1
 800e0d8:	3508      	adds	r5, #8
 800e0da:	e7e5      	b.n	800e0a8 <_dtoa_r+0x348>
 800e0dc:	f000 80af 	beq.w	800e23e <_dtoa_r+0x4de>
 800e0e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0e4:	427c      	negs	r4, r7
 800e0e6:	4b80      	ldr	r3, [pc, #512]	@ (800e2e8 <_dtoa_r+0x588>)
 800e0e8:	f004 020f 	and.w	r2, r4, #15
 800e0ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f4:	f7f2 fa60 	bl	80005b8 <__aeabi_dmul>
 800e0f8:	2602      	movs	r6, #2
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e100:	4d7a      	ldr	r5, [pc, #488]	@ (800e2ec <_dtoa_r+0x58c>)
 800e102:	1124      	asrs	r4, r4, #4
 800e104:	2c00      	cmp	r4, #0
 800e106:	f040 808f 	bne.w	800e228 <_dtoa_r+0x4c8>
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d1d3      	bne.n	800e0b6 <_dtoa_r+0x356>
 800e10e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800e112:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e114:	2b00      	cmp	r3, #0
 800e116:	f000 8094 	beq.w	800e242 <_dtoa_r+0x4e2>
 800e11a:	2200      	movs	r2, #0
 800e11c:	4620      	mov	r0, r4
 800e11e:	4629      	mov	r1, r5
 800e120:	4b73      	ldr	r3, [pc, #460]	@ (800e2f0 <_dtoa_r+0x590>)
 800e122:	f7f2 fcbb 	bl	8000a9c <__aeabi_dcmplt>
 800e126:	2800      	cmp	r0, #0
 800e128:	f000 808b 	beq.w	800e242 <_dtoa_r+0x4e2>
 800e12c:	9b08      	ldr	r3, [sp, #32]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	f000 8087 	beq.w	800e242 <_dtoa_r+0x4e2>
 800e134:	f1bb 0f00 	cmp.w	fp, #0
 800e138:	dd34      	ble.n	800e1a4 <_dtoa_r+0x444>
 800e13a:	4620      	mov	r0, r4
 800e13c:	2200      	movs	r2, #0
 800e13e:	4629      	mov	r1, r5
 800e140:	4b6c      	ldr	r3, [pc, #432]	@ (800e2f4 <_dtoa_r+0x594>)
 800e142:	f7f2 fa39 	bl	80005b8 <__aeabi_dmul>
 800e146:	465c      	mov	r4, fp
 800e148:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e14c:	f107 38ff 	add.w	r8, r7, #4294967295
 800e150:	3601      	adds	r6, #1
 800e152:	4630      	mov	r0, r6
 800e154:	f7f2 f9c6 	bl	80004e4 <__aeabi_i2d>
 800e158:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e15c:	f7f2 fa2c 	bl	80005b8 <__aeabi_dmul>
 800e160:	2200      	movs	r2, #0
 800e162:	4b65      	ldr	r3, [pc, #404]	@ (800e2f8 <_dtoa_r+0x598>)
 800e164:	f7f2 f872 	bl	800024c <__adddf3>
 800e168:	4605      	mov	r5, r0
 800e16a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e16e:	2c00      	cmp	r4, #0
 800e170:	d16a      	bne.n	800e248 <_dtoa_r+0x4e8>
 800e172:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e176:	2200      	movs	r2, #0
 800e178:	4b60      	ldr	r3, [pc, #384]	@ (800e2fc <_dtoa_r+0x59c>)
 800e17a:	f7f2 f865 	bl	8000248 <__aeabi_dsub>
 800e17e:	4602      	mov	r2, r0
 800e180:	460b      	mov	r3, r1
 800e182:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e186:	462a      	mov	r2, r5
 800e188:	4633      	mov	r3, r6
 800e18a:	f7f2 fca5 	bl	8000ad8 <__aeabi_dcmpgt>
 800e18e:	2800      	cmp	r0, #0
 800e190:	f040 8298 	bne.w	800e6c4 <_dtoa_r+0x964>
 800e194:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e198:	462a      	mov	r2, r5
 800e19a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e19e:	f7f2 fc7d 	bl	8000a9c <__aeabi_dcmplt>
 800e1a2:	bb38      	cbnz	r0, 800e1f4 <_dtoa_r+0x494>
 800e1a4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e1a8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800e1ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	f2c0 8157 	blt.w	800e462 <_dtoa_r+0x702>
 800e1b4:	2f0e      	cmp	r7, #14
 800e1b6:	f300 8154 	bgt.w	800e462 <_dtoa_r+0x702>
 800e1ba:	4b4b      	ldr	r3, [pc, #300]	@ (800e2e8 <_dtoa_r+0x588>)
 800e1bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e1c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e1c4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e1c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	f280 80e5 	bge.w	800e39a <_dtoa_r+0x63a>
 800e1d0:	9b08      	ldr	r3, [sp, #32]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	f300 80e1 	bgt.w	800e39a <_dtoa_r+0x63a>
 800e1d8:	d10c      	bne.n	800e1f4 <_dtoa_r+0x494>
 800e1da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	4b46      	ldr	r3, [pc, #280]	@ (800e2fc <_dtoa_r+0x59c>)
 800e1e2:	f7f2 f9e9 	bl	80005b8 <__aeabi_dmul>
 800e1e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1ea:	f7f2 fc6b 	bl	8000ac4 <__aeabi_dcmpge>
 800e1ee:	2800      	cmp	r0, #0
 800e1f0:	f000 8266 	beq.w	800e6c0 <_dtoa_r+0x960>
 800e1f4:	2400      	movs	r4, #0
 800e1f6:	4625      	mov	r5, r4
 800e1f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e1fa:	4656      	mov	r6, sl
 800e1fc:	ea6f 0803 	mvn.w	r8, r3
 800e200:	2700      	movs	r7, #0
 800e202:	4621      	mov	r1, r4
 800e204:	4648      	mov	r0, r9
 800e206:	f000 fcbd 	bl	800eb84 <_Bfree>
 800e20a:	2d00      	cmp	r5, #0
 800e20c:	f000 80bd 	beq.w	800e38a <_dtoa_r+0x62a>
 800e210:	b12f      	cbz	r7, 800e21e <_dtoa_r+0x4be>
 800e212:	42af      	cmp	r7, r5
 800e214:	d003      	beq.n	800e21e <_dtoa_r+0x4be>
 800e216:	4639      	mov	r1, r7
 800e218:	4648      	mov	r0, r9
 800e21a:	f000 fcb3 	bl	800eb84 <_Bfree>
 800e21e:	4629      	mov	r1, r5
 800e220:	4648      	mov	r0, r9
 800e222:	f000 fcaf 	bl	800eb84 <_Bfree>
 800e226:	e0b0      	b.n	800e38a <_dtoa_r+0x62a>
 800e228:	07e2      	lsls	r2, r4, #31
 800e22a:	d505      	bpl.n	800e238 <_dtoa_r+0x4d8>
 800e22c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e230:	f7f2 f9c2 	bl	80005b8 <__aeabi_dmul>
 800e234:	2301      	movs	r3, #1
 800e236:	3601      	adds	r6, #1
 800e238:	1064      	asrs	r4, r4, #1
 800e23a:	3508      	adds	r5, #8
 800e23c:	e762      	b.n	800e104 <_dtoa_r+0x3a4>
 800e23e:	2602      	movs	r6, #2
 800e240:	e765      	b.n	800e10e <_dtoa_r+0x3ae>
 800e242:	46b8      	mov	r8, r7
 800e244:	9c08      	ldr	r4, [sp, #32]
 800e246:	e784      	b.n	800e152 <_dtoa_r+0x3f2>
 800e248:	4b27      	ldr	r3, [pc, #156]	@ (800e2e8 <_dtoa_r+0x588>)
 800e24a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e24c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e250:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e254:	4454      	add	r4, sl
 800e256:	2900      	cmp	r1, #0
 800e258:	d054      	beq.n	800e304 <_dtoa_r+0x5a4>
 800e25a:	2000      	movs	r0, #0
 800e25c:	4928      	ldr	r1, [pc, #160]	@ (800e300 <_dtoa_r+0x5a0>)
 800e25e:	f7f2 fad5 	bl	800080c <__aeabi_ddiv>
 800e262:	4633      	mov	r3, r6
 800e264:	462a      	mov	r2, r5
 800e266:	f7f1 ffef 	bl	8000248 <__aeabi_dsub>
 800e26a:	4656      	mov	r6, sl
 800e26c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e270:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e274:	f7f2 fc50 	bl	8000b18 <__aeabi_d2iz>
 800e278:	4605      	mov	r5, r0
 800e27a:	f7f2 f933 	bl	80004e4 <__aeabi_i2d>
 800e27e:	4602      	mov	r2, r0
 800e280:	460b      	mov	r3, r1
 800e282:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e286:	f7f1 ffdf 	bl	8000248 <__aeabi_dsub>
 800e28a:	4602      	mov	r2, r0
 800e28c:	460b      	mov	r3, r1
 800e28e:	3530      	adds	r5, #48	@ 0x30
 800e290:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e294:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e298:	f806 5b01 	strb.w	r5, [r6], #1
 800e29c:	f7f2 fbfe 	bl	8000a9c <__aeabi_dcmplt>
 800e2a0:	2800      	cmp	r0, #0
 800e2a2:	d172      	bne.n	800e38a <_dtoa_r+0x62a>
 800e2a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e2a8:	2000      	movs	r0, #0
 800e2aa:	4911      	ldr	r1, [pc, #68]	@ (800e2f0 <_dtoa_r+0x590>)
 800e2ac:	f7f1 ffcc 	bl	8000248 <__aeabi_dsub>
 800e2b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e2b4:	f7f2 fbf2 	bl	8000a9c <__aeabi_dcmplt>
 800e2b8:	2800      	cmp	r0, #0
 800e2ba:	f040 80b4 	bne.w	800e426 <_dtoa_r+0x6c6>
 800e2be:	42a6      	cmp	r6, r4
 800e2c0:	f43f af70 	beq.w	800e1a4 <_dtoa_r+0x444>
 800e2c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	4b0a      	ldr	r3, [pc, #40]	@ (800e2f4 <_dtoa_r+0x594>)
 800e2cc:	f7f2 f974 	bl	80005b8 <__aeabi_dmul>
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e2d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e2da:	4b06      	ldr	r3, [pc, #24]	@ (800e2f4 <_dtoa_r+0x594>)
 800e2dc:	f7f2 f96c 	bl	80005b8 <__aeabi_dmul>
 800e2e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e2e4:	e7c4      	b.n	800e270 <_dtoa_r+0x510>
 800e2e6:	bf00      	nop
 800e2e8:	08013000 	.word	0x08013000
 800e2ec:	08012fd8 	.word	0x08012fd8
 800e2f0:	3ff00000 	.word	0x3ff00000
 800e2f4:	40240000 	.word	0x40240000
 800e2f8:	401c0000 	.word	0x401c0000
 800e2fc:	40140000 	.word	0x40140000
 800e300:	3fe00000 	.word	0x3fe00000
 800e304:	4631      	mov	r1, r6
 800e306:	4628      	mov	r0, r5
 800e308:	f7f2 f956 	bl	80005b8 <__aeabi_dmul>
 800e30c:	4656      	mov	r6, sl
 800e30e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e312:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e314:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e318:	f7f2 fbfe 	bl	8000b18 <__aeabi_d2iz>
 800e31c:	4605      	mov	r5, r0
 800e31e:	f7f2 f8e1 	bl	80004e4 <__aeabi_i2d>
 800e322:	4602      	mov	r2, r0
 800e324:	460b      	mov	r3, r1
 800e326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e32a:	f7f1 ff8d 	bl	8000248 <__aeabi_dsub>
 800e32e:	4602      	mov	r2, r0
 800e330:	460b      	mov	r3, r1
 800e332:	3530      	adds	r5, #48	@ 0x30
 800e334:	f806 5b01 	strb.w	r5, [r6], #1
 800e338:	42a6      	cmp	r6, r4
 800e33a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e33e:	f04f 0200 	mov.w	r2, #0
 800e342:	d124      	bne.n	800e38e <_dtoa_r+0x62e>
 800e344:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e348:	4bae      	ldr	r3, [pc, #696]	@ (800e604 <_dtoa_r+0x8a4>)
 800e34a:	f7f1 ff7f 	bl	800024c <__adddf3>
 800e34e:	4602      	mov	r2, r0
 800e350:	460b      	mov	r3, r1
 800e352:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e356:	f7f2 fbbf 	bl	8000ad8 <__aeabi_dcmpgt>
 800e35a:	2800      	cmp	r0, #0
 800e35c:	d163      	bne.n	800e426 <_dtoa_r+0x6c6>
 800e35e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e362:	2000      	movs	r0, #0
 800e364:	49a7      	ldr	r1, [pc, #668]	@ (800e604 <_dtoa_r+0x8a4>)
 800e366:	f7f1 ff6f 	bl	8000248 <__aeabi_dsub>
 800e36a:	4602      	mov	r2, r0
 800e36c:	460b      	mov	r3, r1
 800e36e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e372:	f7f2 fb93 	bl	8000a9c <__aeabi_dcmplt>
 800e376:	2800      	cmp	r0, #0
 800e378:	f43f af14 	beq.w	800e1a4 <_dtoa_r+0x444>
 800e37c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e37e:	1e73      	subs	r3, r6, #1
 800e380:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e382:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e386:	2b30      	cmp	r3, #48	@ 0x30
 800e388:	d0f8      	beq.n	800e37c <_dtoa_r+0x61c>
 800e38a:	4647      	mov	r7, r8
 800e38c:	e03b      	b.n	800e406 <_dtoa_r+0x6a6>
 800e38e:	4b9e      	ldr	r3, [pc, #632]	@ (800e608 <_dtoa_r+0x8a8>)
 800e390:	f7f2 f912 	bl	80005b8 <__aeabi_dmul>
 800e394:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e398:	e7bc      	b.n	800e314 <_dtoa_r+0x5b4>
 800e39a:	4656      	mov	r6, sl
 800e39c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800e3a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	4629      	mov	r1, r5
 800e3a8:	f7f2 fa30 	bl	800080c <__aeabi_ddiv>
 800e3ac:	f7f2 fbb4 	bl	8000b18 <__aeabi_d2iz>
 800e3b0:	4680      	mov	r8, r0
 800e3b2:	f7f2 f897 	bl	80004e4 <__aeabi_i2d>
 800e3b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3ba:	f7f2 f8fd 	bl	80005b8 <__aeabi_dmul>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	460b      	mov	r3, r1
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	4629      	mov	r1, r5
 800e3c6:	f7f1 ff3f 	bl	8000248 <__aeabi_dsub>
 800e3ca:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e3ce:	9d08      	ldr	r5, [sp, #32]
 800e3d0:	f806 4b01 	strb.w	r4, [r6], #1
 800e3d4:	eba6 040a 	sub.w	r4, r6, sl
 800e3d8:	42a5      	cmp	r5, r4
 800e3da:	4602      	mov	r2, r0
 800e3dc:	460b      	mov	r3, r1
 800e3de:	d133      	bne.n	800e448 <_dtoa_r+0x6e8>
 800e3e0:	f7f1 ff34 	bl	800024c <__adddf3>
 800e3e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3e8:	4604      	mov	r4, r0
 800e3ea:	460d      	mov	r5, r1
 800e3ec:	f7f2 fb74 	bl	8000ad8 <__aeabi_dcmpgt>
 800e3f0:	b9c0      	cbnz	r0, 800e424 <_dtoa_r+0x6c4>
 800e3f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3f6:	4620      	mov	r0, r4
 800e3f8:	4629      	mov	r1, r5
 800e3fa:	f7f2 fb45 	bl	8000a88 <__aeabi_dcmpeq>
 800e3fe:	b110      	cbz	r0, 800e406 <_dtoa_r+0x6a6>
 800e400:	f018 0f01 	tst.w	r8, #1
 800e404:	d10e      	bne.n	800e424 <_dtoa_r+0x6c4>
 800e406:	4648      	mov	r0, r9
 800e408:	9903      	ldr	r1, [sp, #12]
 800e40a:	f000 fbbb 	bl	800eb84 <_Bfree>
 800e40e:	2300      	movs	r3, #0
 800e410:	7033      	strb	r3, [r6, #0]
 800e412:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e414:	3701      	adds	r7, #1
 800e416:	601f      	str	r7, [r3, #0]
 800e418:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	f000 824b 	beq.w	800e8b6 <_dtoa_r+0xb56>
 800e420:	601e      	str	r6, [r3, #0]
 800e422:	e248      	b.n	800e8b6 <_dtoa_r+0xb56>
 800e424:	46b8      	mov	r8, r7
 800e426:	4633      	mov	r3, r6
 800e428:	461e      	mov	r6, r3
 800e42a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e42e:	2a39      	cmp	r2, #57	@ 0x39
 800e430:	d106      	bne.n	800e440 <_dtoa_r+0x6e0>
 800e432:	459a      	cmp	sl, r3
 800e434:	d1f8      	bne.n	800e428 <_dtoa_r+0x6c8>
 800e436:	2230      	movs	r2, #48	@ 0x30
 800e438:	f108 0801 	add.w	r8, r8, #1
 800e43c:	f88a 2000 	strb.w	r2, [sl]
 800e440:	781a      	ldrb	r2, [r3, #0]
 800e442:	3201      	adds	r2, #1
 800e444:	701a      	strb	r2, [r3, #0]
 800e446:	e7a0      	b.n	800e38a <_dtoa_r+0x62a>
 800e448:	2200      	movs	r2, #0
 800e44a:	4b6f      	ldr	r3, [pc, #444]	@ (800e608 <_dtoa_r+0x8a8>)
 800e44c:	f7f2 f8b4 	bl	80005b8 <__aeabi_dmul>
 800e450:	2200      	movs	r2, #0
 800e452:	2300      	movs	r3, #0
 800e454:	4604      	mov	r4, r0
 800e456:	460d      	mov	r5, r1
 800e458:	f7f2 fb16 	bl	8000a88 <__aeabi_dcmpeq>
 800e45c:	2800      	cmp	r0, #0
 800e45e:	d09f      	beq.n	800e3a0 <_dtoa_r+0x640>
 800e460:	e7d1      	b.n	800e406 <_dtoa_r+0x6a6>
 800e462:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e464:	2a00      	cmp	r2, #0
 800e466:	f000 80ea 	beq.w	800e63e <_dtoa_r+0x8de>
 800e46a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e46c:	2a01      	cmp	r2, #1
 800e46e:	f300 80cd 	bgt.w	800e60c <_dtoa_r+0x8ac>
 800e472:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e474:	2a00      	cmp	r2, #0
 800e476:	f000 80c1 	beq.w	800e5fc <_dtoa_r+0x89c>
 800e47a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e47e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e480:	9e04      	ldr	r6, [sp, #16]
 800e482:	9a04      	ldr	r2, [sp, #16]
 800e484:	2101      	movs	r1, #1
 800e486:	441a      	add	r2, r3
 800e488:	9204      	str	r2, [sp, #16]
 800e48a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e48c:	4648      	mov	r0, r9
 800e48e:	441a      	add	r2, r3
 800e490:	9209      	str	r2, [sp, #36]	@ 0x24
 800e492:	f000 fc75 	bl	800ed80 <__i2b>
 800e496:	4605      	mov	r5, r0
 800e498:	b166      	cbz	r6, 800e4b4 <_dtoa_r+0x754>
 800e49a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	dd09      	ble.n	800e4b4 <_dtoa_r+0x754>
 800e4a0:	42b3      	cmp	r3, r6
 800e4a2:	bfa8      	it	ge
 800e4a4:	4633      	movge	r3, r6
 800e4a6:	9a04      	ldr	r2, [sp, #16]
 800e4a8:	1af6      	subs	r6, r6, r3
 800e4aa:	1ad2      	subs	r2, r2, r3
 800e4ac:	9204      	str	r2, [sp, #16]
 800e4ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4b0:	1ad3      	subs	r3, r2, r3
 800e4b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4b6:	b30b      	cbz	r3, 800e4fc <_dtoa_r+0x79c>
 800e4b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	f000 80c6 	beq.w	800e64c <_dtoa_r+0x8ec>
 800e4c0:	2c00      	cmp	r4, #0
 800e4c2:	f000 80c0 	beq.w	800e646 <_dtoa_r+0x8e6>
 800e4c6:	4629      	mov	r1, r5
 800e4c8:	4622      	mov	r2, r4
 800e4ca:	4648      	mov	r0, r9
 800e4cc:	f000 fd10 	bl	800eef0 <__pow5mult>
 800e4d0:	9a03      	ldr	r2, [sp, #12]
 800e4d2:	4601      	mov	r1, r0
 800e4d4:	4605      	mov	r5, r0
 800e4d6:	4648      	mov	r0, r9
 800e4d8:	f000 fc68 	bl	800edac <__multiply>
 800e4dc:	9903      	ldr	r1, [sp, #12]
 800e4de:	4680      	mov	r8, r0
 800e4e0:	4648      	mov	r0, r9
 800e4e2:	f000 fb4f 	bl	800eb84 <_Bfree>
 800e4e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4e8:	1b1b      	subs	r3, r3, r4
 800e4ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4ec:	f000 80b1 	beq.w	800e652 <_dtoa_r+0x8f2>
 800e4f0:	4641      	mov	r1, r8
 800e4f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4f4:	4648      	mov	r0, r9
 800e4f6:	f000 fcfb 	bl	800eef0 <__pow5mult>
 800e4fa:	9003      	str	r0, [sp, #12]
 800e4fc:	2101      	movs	r1, #1
 800e4fe:	4648      	mov	r0, r9
 800e500:	f000 fc3e 	bl	800ed80 <__i2b>
 800e504:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e506:	4604      	mov	r4, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	f000 81d8 	beq.w	800e8be <_dtoa_r+0xb5e>
 800e50e:	461a      	mov	r2, r3
 800e510:	4601      	mov	r1, r0
 800e512:	4648      	mov	r0, r9
 800e514:	f000 fcec 	bl	800eef0 <__pow5mult>
 800e518:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e51a:	4604      	mov	r4, r0
 800e51c:	2b01      	cmp	r3, #1
 800e51e:	f300 809f 	bgt.w	800e660 <_dtoa_r+0x900>
 800e522:	9b06      	ldr	r3, [sp, #24]
 800e524:	2b00      	cmp	r3, #0
 800e526:	f040 8097 	bne.w	800e658 <_dtoa_r+0x8f8>
 800e52a:	9b07      	ldr	r3, [sp, #28]
 800e52c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e530:	2b00      	cmp	r3, #0
 800e532:	f040 8093 	bne.w	800e65c <_dtoa_r+0x8fc>
 800e536:	9b07      	ldr	r3, [sp, #28]
 800e538:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e53c:	0d1b      	lsrs	r3, r3, #20
 800e53e:	051b      	lsls	r3, r3, #20
 800e540:	b133      	cbz	r3, 800e550 <_dtoa_r+0x7f0>
 800e542:	9b04      	ldr	r3, [sp, #16]
 800e544:	3301      	adds	r3, #1
 800e546:	9304      	str	r3, [sp, #16]
 800e548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e54a:	3301      	adds	r3, #1
 800e54c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e54e:	2301      	movs	r3, #1
 800e550:	930a      	str	r3, [sp, #40]	@ 0x28
 800e552:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e554:	2b00      	cmp	r3, #0
 800e556:	f000 81b8 	beq.w	800e8ca <_dtoa_r+0xb6a>
 800e55a:	6923      	ldr	r3, [r4, #16]
 800e55c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e560:	6918      	ldr	r0, [r3, #16]
 800e562:	f000 fbc1 	bl	800ece8 <__hi0bits>
 800e566:	f1c0 0020 	rsb	r0, r0, #32
 800e56a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e56c:	4418      	add	r0, r3
 800e56e:	f010 001f 	ands.w	r0, r0, #31
 800e572:	f000 8082 	beq.w	800e67a <_dtoa_r+0x91a>
 800e576:	f1c0 0320 	rsb	r3, r0, #32
 800e57a:	2b04      	cmp	r3, #4
 800e57c:	dd73      	ble.n	800e666 <_dtoa_r+0x906>
 800e57e:	9b04      	ldr	r3, [sp, #16]
 800e580:	f1c0 001c 	rsb	r0, r0, #28
 800e584:	4403      	add	r3, r0
 800e586:	9304      	str	r3, [sp, #16]
 800e588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e58a:	4406      	add	r6, r0
 800e58c:	4403      	add	r3, r0
 800e58e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e590:	9b04      	ldr	r3, [sp, #16]
 800e592:	2b00      	cmp	r3, #0
 800e594:	dd05      	ble.n	800e5a2 <_dtoa_r+0x842>
 800e596:	461a      	mov	r2, r3
 800e598:	4648      	mov	r0, r9
 800e59a:	9903      	ldr	r1, [sp, #12]
 800e59c:	f000 fd02 	bl	800efa4 <__lshift>
 800e5a0:	9003      	str	r0, [sp, #12]
 800e5a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	dd05      	ble.n	800e5b4 <_dtoa_r+0x854>
 800e5a8:	4621      	mov	r1, r4
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	4648      	mov	r0, r9
 800e5ae:	f000 fcf9 	bl	800efa4 <__lshift>
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d061      	beq.n	800e67e <_dtoa_r+0x91e>
 800e5ba:	4621      	mov	r1, r4
 800e5bc:	9803      	ldr	r0, [sp, #12]
 800e5be:	f000 fd5d 	bl	800f07c <__mcmp>
 800e5c2:	2800      	cmp	r0, #0
 800e5c4:	da5b      	bge.n	800e67e <_dtoa_r+0x91e>
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	220a      	movs	r2, #10
 800e5ca:	4648      	mov	r0, r9
 800e5cc:	9903      	ldr	r1, [sp, #12]
 800e5ce:	f000 fafb 	bl	800ebc8 <__multadd>
 800e5d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5d4:	f107 38ff 	add.w	r8, r7, #4294967295
 800e5d8:	9003      	str	r0, [sp, #12]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	f000 8177 	beq.w	800e8ce <_dtoa_r+0xb6e>
 800e5e0:	4629      	mov	r1, r5
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	220a      	movs	r2, #10
 800e5e6:	4648      	mov	r0, r9
 800e5e8:	f000 faee 	bl	800ebc8 <__multadd>
 800e5ec:	f1bb 0f00 	cmp.w	fp, #0
 800e5f0:	4605      	mov	r5, r0
 800e5f2:	dc6f      	bgt.n	800e6d4 <_dtoa_r+0x974>
 800e5f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e5f6:	2b02      	cmp	r3, #2
 800e5f8:	dc49      	bgt.n	800e68e <_dtoa_r+0x92e>
 800e5fa:	e06b      	b.n	800e6d4 <_dtoa_r+0x974>
 800e5fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e5fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e602:	e73c      	b.n	800e47e <_dtoa_r+0x71e>
 800e604:	3fe00000 	.word	0x3fe00000
 800e608:	40240000 	.word	0x40240000
 800e60c:	9b08      	ldr	r3, [sp, #32]
 800e60e:	1e5c      	subs	r4, r3, #1
 800e610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e612:	42a3      	cmp	r3, r4
 800e614:	db09      	blt.n	800e62a <_dtoa_r+0x8ca>
 800e616:	1b1c      	subs	r4, r3, r4
 800e618:	9b08      	ldr	r3, [sp, #32]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	f6bf af30 	bge.w	800e480 <_dtoa_r+0x720>
 800e620:	9b04      	ldr	r3, [sp, #16]
 800e622:	9a08      	ldr	r2, [sp, #32]
 800e624:	1a9e      	subs	r6, r3, r2
 800e626:	2300      	movs	r3, #0
 800e628:	e72b      	b.n	800e482 <_dtoa_r+0x722>
 800e62a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e62c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e62e:	1ae3      	subs	r3, r4, r3
 800e630:	441a      	add	r2, r3
 800e632:	940a      	str	r4, [sp, #40]	@ 0x28
 800e634:	9e04      	ldr	r6, [sp, #16]
 800e636:	2400      	movs	r4, #0
 800e638:	9b08      	ldr	r3, [sp, #32]
 800e63a:	920e      	str	r2, [sp, #56]	@ 0x38
 800e63c:	e721      	b.n	800e482 <_dtoa_r+0x722>
 800e63e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e640:	9e04      	ldr	r6, [sp, #16]
 800e642:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e644:	e728      	b.n	800e498 <_dtoa_r+0x738>
 800e646:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e64a:	e751      	b.n	800e4f0 <_dtoa_r+0x790>
 800e64c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e64e:	9903      	ldr	r1, [sp, #12]
 800e650:	e750      	b.n	800e4f4 <_dtoa_r+0x794>
 800e652:	f8cd 800c 	str.w	r8, [sp, #12]
 800e656:	e751      	b.n	800e4fc <_dtoa_r+0x79c>
 800e658:	2300      	movs	r3, #0
 800e65a:	e779      	b.n	800e550 <_dtoa_r+0x7f0>
 800e65c:	9b06      	ldr	r3, [sp, #24]
 800e65e:	e777      	b.n	800e550 <_dtoa_r+0x7f0>
 800e660:	2300      	movs	r3, #0
 800e662:	930a      	str	r3, [sp, #40]	@ 0x28
 800e664:	e779      	b.n	800e55a <_dtoa_r+0x7fa>
 800e666:	d093      	beq.n	800e590 <_dtoa_r+0x830>
 800e668:	9a04      	ldr	r2, [sp, #16]
 800e66a:	331c      	adds	r3, #28
 800e66c:	441a      	add	r2, r3
 800e66e:	9204      	str	r2, [sp, #16]
 800e670:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e672:	441e      	add	r6, r3
 800e674:	441a      	add	r2, r3
 800e676:	9209      	str	r2, [sp, #36]	@ 0x24
 800e678:	e78a      	b.n	800e590 <_dtoa_r+0x830>
 800e67a:	4603      	mov	r3, r0
 800e67c:	e7f4      	b.n	800e668 <_dtoa_r+0x908>
 800e67e:	9b08      	ldr	r3, [sp, #32]
 800e680:	46b8      	mov	r8, r7
 800e682:	2b00      	cmp	r3, #0
 800e684:	dc20      	bgt.n	800e6c8 <_dtoa_r+0x968>
 800e686:	469b      	mov	fp, r3
 800e688:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e68a:	2b02      	cmp	r3, #2
 800e68c:	dd1e      	ble.n	800e6cc <_dtoa_r+0x96c>
 800e68e:	f1bb 0f00 	cmp.w	fp, #0
 800e692:	f47f adb1 	bne.w	800e1f8 <_dtoa_r+0x498>
 800e696:	4621      	mov	r1, r4
 800e698:	465b      	mov	r3, fp
 800e69a:	2205      	movs	r2, #5
 800e69c:	4648      	mov	r0, r9
 800e69e:	f000 fa93 	bl	800ebc8 <__multadd>
 800e6a2:	4601      	mov	r1, r0
 800e6a4:	4604      	mov	r4, r0
 800e6a6:	9803      	ldr	r0, [sp, #12]
 800e6a8:	f000 fce8 	bl	800f07c <__mcmp>
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	f77f ada3 	ble.w	800e1f8 <_dtoa_r+0x498>
 800e6b2:	4656      	mov	r6, sl
 800e6b4:	2331      	movs	r3, #49	@ 0x31
 800e6b6:	f108 0801 	add.w	r8, r8, #1
 800e6ba:	f806 3b01 	strb.w	r3, [r6], #1
 800e6be:	e59f      	b.n	800e200 <_dtoa_r+0x4a0>
 800e6c0:	46b8      	mov	r8, r7
 800e6c2:	9c08      	ldr	r4, [sp, #32]
 800e6c4:	4625      	mov	r5, r4
 800e6c6:	e7f4      	b.n	800e6b2 <_dtoa_r+0x952>
 800e6c8:	f8dd b020 	ldr.w	fp, [sp, #32]
 800e6cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	f000 8101 	beq.w	800e8d6 <_dtoa_r+0xb76>
 800e6d4:	2e00      	cmp	r6, #0
 800e6d6:	dd05      	ble.n	800e6e4 <_dtoa_r+0x984>
 800e6d8:	4629      	mov	r1, r5
 800e6da:	4632      	mov	r2, r6
 800e6dc:	4648      	mov	r0, r9
 800e6de:	f000 fc61 	bl	800efa4 <__lshift>
 800e6e2:	4605      	mov	r5, r0
 800e6e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d05c      	beq.n	800e7a4 <_dtoa_r+0xa44>
 800e6ea:	4648      	mov	r0, r9
 800e6ec:	6869      	ldr	r1, [r5, #4]
 800e6ee:	f000 fa09 	bl	800eb04 <_Balloc>
 800e6f2:	4606      	mov	r6, r0
 800e6f4:	b928      	cbnz	r0, 800e702 <_dtoa_r+0x9a2>
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e6fc:	4b80      	ldr	r3, [pc, #512]	@ (800e900 <_dtoa_r+0xba0>)
 800e6fe:	f7ff bb43 	b.w	800dd88 <_dtoa_r+0x28>
 800e702:	692a      	ldr	r2, [r5, #16]
 800e704:	f105 010c 	add.w	r1, r5, #12
 800e708:	3202      	adds	r2, #2
 800e70a:	0092      	lsls	r2, r2, #2
 800e70c:	300c      	adds	r0, #12
 800e70e:	f7ff fa8c 	bl	800dc2a <memcpy>
 800e712:	2201      	movs	r2, #1
 800e714:	4631      	mov	r1, r6
 800e716:	4648      	mov	r0, r9
 800e718:	f000 fc44 	bl	800efa4 <__lshift>
 800e71c:	462f      	mov	r7, r5
 800e71e:	4605      	mov	r5, r0
 800e720:	f10a 0301 	add.w	r3, sl, #1
 800e724:	9304      	str	r3, [sp, #16]
 800e726:	eb0a 030b 	add.w	r3, sl, fp
 800e72a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e72c:	9b06      	ldr	r3, [sp, #24]
 800e72e:	f003 0301 	and.w	r3, r3, #1
 800e732:	9309      	str	r3, [sp, #36]	@ 0x24
 800e734:	9b04      	ldr	r3, [sp, #16]
 800e736:	4621      	mov	r1, r4
 800e738:	9803      	ldr	r0, [sp, #12]
 800e73a:	f103 3bff 	add.w	fp, r3, #4294967295
 800e73e:	f7ff fa87 	bl	800dc50 <quorem>
 800e742:	4603      	mov	r3, r0
 800e744:	4639      	mov	r1, r7
 800e746:	3330      	adds	r3, #48	@ 0x30
 800e748:	9006      	str	r0, [sp, #24]
 800e74a:	9803      	ldr	r0, [sp, #12]
 800e74c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e74e:	f000 fc95 	bl	800f07c <__mcmp>
 800e752:	462a      	mov	r2, r5
 800e754:	9008      	str	r0, [sp, #32]
 800e756:	4621      	mov	r1, r4
 800e758:	4648      	mov	r0, r9
 800e75a:	f000 fcab 	bl	800f0b4 <__mdiff>
 800e75e:	68c2      	ldr	r2, [r0, #12]
 800e760:	4606      	mov	r6, r0
 800e762:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e764:	bb02      	cbnz	r2, 800e7a8 <_dtoa_r+0xa48>
 800e766:	4601      	mov	r1, r0
 800e768:	9803      	ldr	r0, [sp, #12]
 800e76a:	f000 fc87 	bl	800f07c <__mcmp>
 800e76e:	4602      	mov	r2, r0
 800e770:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e772:	4631      	mov	r1, r6
 800e774:	4648      	mov	r0, r9
 800e776:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800e77a:	f000 fa03 	bl	800eb84 <_Bfree>
 800e77e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e780:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e782:	9e04      	ldr	r6, [sp, #16]
 800e784:	ea42 0103 	orr.w	r1, r2, r3
 800e788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e78a:	4319      	orrs	r1, r3
 800e78c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e78e:	d10d      	bne.n	800e7ac <_dtoa_r+0xa4c>
 800e790:	2b39      	cmp	r3, #57	@ 0x39
 800e792:	d027      	beq.n	800e7e4 <_dtoa_r+0xa84>
 800e794:	9a08      	ldr	r2, [sp, #32]
 800e796:	2a00      	cmp	r2, #0
 800e798:	dd01      	ble.n	800e79e <_dtoa_r+0xa3e>
 800e79a:	9b06      	ldr	r3, [sp, #24]
 800e79c:	3331      	adds	r3, #49	@ 0x31
 800e79e:	f88b 3000 	strb.w	r3, [fp]
 800e7a2:	e52e      	b.n	800e202 <_dtoa_r+0x4a2>
 800e7a4:	4628      	mov	r0, r5
 800e7a6:	e7b9      	b.n	800e71c <_dtoa_r+0x9bc>
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	e7e2      	b.n	800e772 <_dtoa_r+0xa12>
 800e7ac:	9908      	ldr	r1, [sp, #32]
 800e7ae:	2900      	cmp	r1, #0
 800e7b0:	db04      	blt.n	800e7bc <_dtoa_r+0xa5c>
 800e7b2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800e7b4:	4301      	orrs	r1, r0
 800e7b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e7b8:	4301      	orrs	r1, r0
 800e7ba:	d120      	bne.n	800e7fe <_dtoa_r+0xa9e>
 800e7bc:	2a00      	cmp	r2, #0
 800e7be:	ddee      	ble.n	800e79e <_dtoa_r+0xa3e>
 800e7c0:	2201      	movs	r2, #1
 800e7c2:	9903      	ldr	r1, [sp, #12]
 800e7c4:	4648      	mov	r0, r9
 800e7c6:	9304      	str	r3, [sp, #16]
 800e7c8:	f000 fbec 	bl	800efa4 <__lshift>
 800e7cc:	4621      	mov	r1, r4
 800e7ce:	9003      	str	r0, [sp, #12]
 800e7d0:	f000 fc54 	bl	800f07c <__mcmp>
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	9b04      	ldr	r3, [sp, #16]
 800e7d8:	dc02      	bgt.n	800e7e0 <_dtoa_r+0xa80>
 800e7da:	d1e0      	bne.n	800e79e <_dtoa_r+0xa3e>
 800e7dc:	07da      	lsls	r2, r3, #31
 800e7de:	d5de      	bpl.n	800e79e <_dtoa_r+0xa3e>
 800e7e0:	2b39      	cmp	r3, #57	@ 0x39
 800e7e2:	d1da      	bne.n	800e79a <_dtoa_r+0xa3a>
 800e7e4:	2339      	movs	r3, #57	@ 0x39
 800e7e6:	f88b 3000 	strb.w	r3, [fp]
 800e7ea:	4633      	mov	r3, r6
 800e7ec:	461e      	mov	r6, r3
 800e7ee:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e7f2:	3b01      	subs	r3, #1
 800e7f4:	2a39      	cmp	r2, #57	@ 0x39
 800e7f6:	d04e      	beq.n	800e896 <_dtoa_r+0xb36>
 800e7f8:	3201      	adds	r2, #1
 800e7fa:	701a      	strb	r2, [r3, #0]
 800e7fc:	e501      	b.n	800e202 <_dtoa_r+0x4a2>
 800e7fe:	2a00      	cmp	r2, #0
 800e800:	dd03      	ble.n	800e80a <_dtoa_r+0xaaa>
 800e802:	2b39      	cmp	r3, #57	@ 0x39
 800e804:	d0ee      	beq.n	800e7e4 <_dtoa_r+0xa84>
 800e806:	3301      	adds	r3, #1
 800e808:	e7c9      	b.n	800e79e <_dtoa_r+0xa3e>
 800e80a:	9a04      	ldr	r2, [sp, #16]
 800e80c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e80e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e812:	428a      	cmp	r2, r1
 800e814:	d028      	beq.n	800e868 <_dtoa_r+0xb08>
 800e816:	2300      	movs	r3, #0
 800e818:	220a      	movs	r2, #10
 800e81a:	9903      	ldr	r1, [sp, #12]
 800e81c:	4648      	mov	r0, r9
 800e81e:	f000 f9d3 	bl	800ebc8 <__multadd>
 800e822:	42af      	cmp	r7, r5
 800e824:	9003      	str	r0, [sp, #12]
 800e826:	f04f 0300 	mov.w	r3, #0
 800e82a:	f04f 020a 	mov.w	r2, #10
 800e82e:	4639      	mov	r1, r7
 800e830:	4648      	mov	r0, r9
 800e832:	d107      	bne.n	800e844 <_dtoa_r+0xae4>
 800e834:	f000 f9c8 	bl	800ebc8 <__multadd>
 800e838:	4607      	mov	r7, r0
 800e83a:	4605      	mov	r5, r0
 800e83c:	9b04      	ldr	r3, [sp, #16]
 800e83e:	3301      	adds	r3, #1
 800e840:	9304      	str	r3, [sp, #16]
 800e842:	e777      	b.n	800e734 <_dtoa_r+0x9d4>
 800e844:	f000 f9c0 	bl	800ebc8 <__multadd>
 800e848:	4629      	mov	r1, r5
 800e84a:	4607      	mov	r7, r0
 800e84c:	2300      	movs	r3, #0
 800e84e:	220a      	movs	r2, #10
 800e850:	4648      	mov	r0, r9
 800e852:	f000 f9b9 	bl	800ebc8 <__multadd>
 800e856:	4605      	mov	r5, r0
 800e858:	e7f0      	b.n	800e83c <_dtoa_r+0xadc>
 800e85a:	f1bb 0f00 	cmp.w	fp, #0
 800e85e:	bfcc      	ite	gt
 800e860:	465e      	movgt	r6, fp
 800e862:	2601      	movle	r6, #1
 800e864:	2700      	movs	r7, #0
 800e866:	4456      	add	r6, sl
 800e868:	2201      	movs	r2, #1
 800e86a:	9903      	ldr	r1, [sp, #12]
 800e86c:	4648      	mov	r0, r9
 800e86e:	9304      	str	r3, [sp, #16]
 800e870:	f000 fb98 	bl	800efa4 <__lshift>
 800e874:	4621      	mov	r1, r4
 800e876:	9003      	str	r0, [sp, #12]
 800e878:	f000 fc00 	bl	800f07c <__mcmp>
 800e87c:	2800      	cmp	r0, #0
 800e87e:	dcb4      	bgt.n	800e7ea <_dtoa_r+0xa8a>
 800e880:	d102      	bne.n	800e888 <_dtoa_r+0xb28>
 800e882:	9b04      	ldr	r3, [sp, #16]
 800e884:	07db      	lsls	r3, r3, #31
 800e886:	d4b0      	bmi.n	800e7ea <_dtoa_r+0xa8a>
 800e888:	4633      	mov	r3, r6
 800e88a:	461e      	mov	r6, r3
 800e88c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e890:	2a30      	cmp	r2, #48	@ 0x30
 800e892:	d0fa      	beq.n	800e88a <_dtoa_r+0xb2a>
 800e894:	e4b5      	b.n	800e202 <_dtoa_r+0x4a2>
 800e896:	459a      	cmp	sl, r3
 800e898:	d1a8      	bne.n	800e7ec <_dtoa_r+0xa8c>
 800e89a:	2331      	movs	r3, #49	@ 0x31
 800e89c:	f108 0801 	add.w	r8, r8, #1
 800e8a0:	f88a 3000 	strb.w	r3, [sl]
 800e8a4:	e4ad      	b.n	800e202 <_dtoa_r+0x4a2>
 800e8a6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e8a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e904 <_dtoa_r+0xba4>
 800e8ac:	b11b      	cbz	r3, 800e8b6 <_dtoa_r+0xb56>
 800e8ae:	f10a 0308 	add.w	r3, sl, #8
 800e8b2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e8b4:	6013      	str	r3, [r2, #0]
 800e8b6:	4650      	mov	r0, sl
 800e8b8:	b017      	add	sp, #92	@ 0x5c
 800e8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	f77f ae2e 	ble.w	800e522 <_dtoa_r+0x7c2>
 800e8c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8ca:	2001      	movs	r0, #1
 800e8cc:	e64d      	b.n	800e56a <_dtoa_r+0x80a>
 800e8ce:	f1bb 0f00 	cmp.w	fp, #0
 800e8d2:	f77f aed9 	ble.w	800e688 <_dtoa_r+0x928>
 800e8d6:	4656      	mov	r6, sl
 800e8d8:	4621      	mov	r1, r4
 800e8da:	9803      	ldr	r0, [sp, #12]
 800e8dc:	f7ff f9b8 	bl	800dc50 <quorem>
 800e8e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e8e4:	f806 3b01 	strb.w	r3, [r6], #1
 800e8e8:	eba6 020a 	sub.w	r2, r6, sl
 800e8ec:	4593      	cmp	fp, r2
 800e8ee:	ddb4      	ble.n	800e85a <_dtoa_r+0xafa>
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	220a      	movs	r2, #10
 800e8f4:	4648      	mov	r0, r9
 800e8f6:	9903      	ldr	r1, [sp, #12]
 800e8f8:	f000 f966 	bl	800ebc8 <__multadd>
 800e8fc:	9003      	str	r0, [sp, #12]
 800e8fe:	e7eb      	b.n	800e8d8 <_dtoa_r+0xb78>
 800e900:	08012ea9 	.word	0x08012ea9
 800e904:	08012e2d 	.word	0x08012e2d

0800e908 <_free_r>:
 800e908:	b538      	push	{r3, r4, r5, lr}
 800e90a:	4605      	mov	r5, r0
 800e90c:	2900      	cmp	r1, #0
 800e90e:	d040      	beq.n	800e992 <_free_r+0x8a>
 800e910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e914:	1f0c      	subs	r4, r1, #4
 800e916:	2b00      	cmp	r3, #0
 800e918:	bfb8      	it	lt
 800e91a:	18e4      	addlt	r4, r4, r3
 800e91c:	f000 f8e6 	bl	800eaec <__malloc_lock>
 800e920:	4a1c      	ldr	r2, [pc, #112]	@ (800e994 <_free_r+0x8c>)
 800e922:	6813      	ldr	r3, [r2, #0]
 800e924:	b933      	cbnz	r3, 800e934 <_free_r+0x2c>
 800e926:	6063      	str	r3, [r4, #4]
 800e928:	6014      	str	r4, [r2, #0]
 800e92a:	4628      	mov	r0, r5
 800e92c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e930:	f000 b8e2 	b.w	800eaf8 <__malloc_unlock>
 800e934:	42a3      	cmp	r3, r4
 800e936:	d908      	bls.n	800e94a <_free_r+0x42>
 800e938:	6820      	ldr	r0, [r4, #0]
 800e93a:	1821      	adds	r1, r4, r0
 800e93c:	428b      	cmp	r3, r1
 800e93e:	bf01      	itttt	eq
 800e940:	6819      	ldreq	r1, [r3, #0]
 800e942:	685b      	ldreq	r3, [r3, #4]
 800e944:	1809      	addeq	r1, r1, r0
 800e946:	6021      	streq	r1, [r4, #0]
 800e948:	e7ed      	b.n	800e926 <_free_r+0x1e>
 800e94a:	461a      	mov	r2, r3
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	b10b      	cbz	r3, 800e954 <_free_r+0x4c>
 800e950:	42a3      	cmp	r3, r4
 800e952:	d9fa      	bls.n	800e94a <_free_r+0x42>
 800e954:	6811      	ldr	r1, [r2, #0]
 800e956:	1850      	adds	r0, r2, r1
 800e958:	42a0      	cmp	r0, r4
 800e95a:	d10b      	bne.n	800e974 <_free_r+0x6c>
 800e95c:	6820      	ldr	r0, [r4, #0]
 800e95e:	4401      	add	r1, r0
 800e960:	1850      	adds	r0, r2, r1
 800e962:	4283      	cmp	r3, r0
 800e964:	6011      	str	r1, [r2, #0]
 800e966:	d1e0      	bne.n	800e92a <_free_r+0x22>
 800e968:	6818      	ldr	r0, [r3, #0]
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	4408      	add	r0, r1
 800e96e:	6010      	str	r0, [r2, #0]
 800e970:	6053      	str	r3, [r2, #4]
 800e972:	e7da      	b.n	800e92a <_free_r+0x22>
 800e974:	d902      	bls.n	800e97c <_free_r+0x74>
 800e976:	230c      	movs	r3, #12
 800e978:	602b      	str	r3, [r5, #0]
 800e97a:	e7d6      	b.n	800e92a <_free_r+0x22>
 800e97c:	6820      	ldr	r0, [r4, #0]
 800e97e:	1821      	adds	r1, r4, r0
 800e980:	428b      	cmp	r3, r1
 800e982:	bf01      	itttt	eq
 800e984:	6819      	ldreq	r1, [r3, #0]
 800e986:	685b      	ldreq	r3, [r3, #4]
 800e988:	1809      	addeq	r1, r1, r0
 800e98a:	6021      	streq	r1, [r4, #0]
 800e98c:	6063      	str	r3, [r4, #4]
 800e98e:	6054      	str	r4, [r2, #4]
 800e990:	e7cb      	b.n	800e92a <_free_r+0x22>
 800e992:	bd38      	pop	{r3, r4, r5, pc}
 800e994:	20009658 	.word	0x20009658

0800e998 <malloc>:
 800e998:	4b02      	ldr	r3, [pc, #8]	@ (800e9a4 <malloc+0xc>)
 800e99a:	4601      	mov	r1, r0
 800e99c:	6818      	ldr	r0, [r3, #0]
 800e99e:	f000 b825 	b.w	800e9ec <_malloc_r>
 800e9a2:	bf00      	nop
 800e9a4:	200043b0 	.word	0x200043b0

0800e9a8 <sbrk_aligned>:
 800e9a8:	b570      	push	{r4, r5, r6, lr}
 800e9aa:	4e0f      	ldr	r6, [pc, #60]	@ (800e9e8 <sbrk_aligned+0x40>)
 800e9ac:	460c      	mov	r4, r1
 800e9ae:	6831      	ldr	r1, [r6, #0]
 800e9b0:	4605      	mov	r5, r0
 800e9b2:	b911      	cbnz	r1, 800e9ba <sbrk_aligned+0x12>
 800e9b4:	f001 ffb2 	bl	801091c <_sbrk_r>
 800e9b8:	6030      	str	r0, [r6, #0]
 800e9ba:	4621      	mov	r1, r4
 800e9bc:	4628      	mov	r0, r5
 800e9be:	f001 ffad 	bl	801091c <_sbrk_r>
 800e9c2:	1c43      	adds	r3, r0, #1
 800e9c4:	d103      	bne.n	800e9ce <sbrk_aligned+0x26>
 800e9c6:	f04f 34ff 	mov.w	r4, #4294967295
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	bd70      	pop	{r4, r5, r6, pc}
 800e9ce:	1cc4      	adds	r4, r0, #3
 800e9d0:	f024 0403 	bic.w	r4, r4, #3
 800e9d4:	42a0      	cmp	r0, r4
 800e9d6:	d0f8      	beq.n	800e9ca <sbrk_aligned+0x22>
 800e9d8:	1a21      	subs	r1, r4, r0
 800e9da:	4628      	mov	r0, r5
 800e9dc:	f001 ff9e 	bl	801091c <_sbrk_r>
 800e9e0:	3001      	adds	r0, #1
 800e9e2:	d1f2      	bne.n	800e9ca <sbrk_aligned+0x22>
 800e9e4:	e7ef      	b.n	800e9c6 <sbrk_aligned+0x1e>
 800e9e6:	bf00      	nop
 800e9e8:	20009654 	.word	0x20009654

0800e9ec <_malloc_r>:
 800e9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9f0:	1ccd      	adds	r5, r1, #3
 800e9f2:	f025 0503 	bic.w	r5, r5, #3
 800e9f6:	3508      	adds	r5, #8
 800e9f8:	2d0c      	cmp	r5, #12
 800e9fa:	bf38      	it	cc
 800e9fc:	250c      	movcc	r5, #12
 800e9fe:	2d00      	cmp	r5, #0
 800ea00:	4606      	mov	r6, r0
 800ea02:	db01      	blt.n	800ea08 <_malloc_r+0x1c>
 800ea04:	42a9      	cmp	r1, r5
 800ea06:	d904      	bls.n	800ea12 <_malloc_r+0x26>
 800ea08:	230c      	movs	r3, #12
 800ea0a:	6033      	str	r3, [r6, #0]
 800ea0c:	2000      	movs	r0, #0
 800ea0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eae8 <_malloc_r+0xfc>
 800ea16:	f000 f869 	bl	800eaec <__malloc_lock>
 800ea1a:	f8d8 3000 	ldr.w	r3, [r8]
 800ea1e:	461c      	mov	r4, r3
 800ea20:	bb44      	cbnz	r4, 800ea74 <_malloc_r+0x88>
 800ea22:	4629      	mov	r1, r5
 800ea24:	4630      	mov	r0, r6
 800ea26:	f7ff ffbf 	bl	800e9a8 <sbrk_aligned>
 800ea2a:	1c43      	adds	r3, r0, #1
 800ea2c:	4604      	mov	r4, r0
 800ea2e:	d158      	bne.n	800eae2 <_malloc_r+0xf6>
 800ea30:	f8d8 4000 	ldr.w	r4, [r8]
 800ea34:	4627      	mov	r7, r4
 800ea36:	2f00      	cmp	r7, #0
 800ea38:	d143      	bne.n	800eac2 <_malloc_r+0xd6>
 800ea3a:	2c00      	cmp	r4, #0
 800ea3c:	d04b      	beq.n	800ead6 <_malloc_r+0xea>
 800ea3e:	6823      	ldr	r3, [r4, #0]
 800ea40:	4639      	mov	r1, r7
 800ea42:	4630      	mov	r0, r6
 800ea44:	eb04 0903 	add.w	r9, r4, r3
 800ea48:	f001 ff68 	bl	801091c <_sbrk_r>
 800ea4c:	4581      	cmp	r9, r0
 800ea4e:	d142      	bne.n	800ead6 <_malloc_r+0xea>
 800ea50:	6821      	ldr	r1, [r4, #0]
 800ea52:	4630      	mov	r0, r6
 800ea54:	1a6d      	subs	r5, r5, r1
 800ea56:	4629      	mov	r1, r5
 800ea58:	f7ff ffa6 	bl	800e9a8 <sbrk_aligned>
 800ea5c:	3001      	adds	r0, #1
 800ea5e:	d03a      	beq.n	800ead6 <_malloc_r+0xea>
 800ea60:	6823      	ldr	r3, [r4, #0]
 800ea62:	442b      	add	r3, r5
 800ea64:	6023      	str	r3, [r4, #0]
 800ea66:	f8d8 3000 	ldr.w	r3, [r8]
 800ea6a:	685a      	ldr	r2, [r3, #4]
 800ea6c:	bb62      	cbnz	r2, 800eac8 <_malloc_r+0xdc>
 800ea6e:	f8c8 7000 	str.w	r7, [r8]
 800ea72:	e00f      	b.n	800ea94 <_malloc_r+0xa8>
 800ea74:	6822      	ldr	r2, [r4, #0]
 800ea76:	1b52      	subs	r2, r2, r5
 800ea78:	d420      	bmi.n	800eabc <_malloc_r+0xd0>
 800ea7a:	2a0b      	cmp	r2, #11
 800ea7c:	d917      	bls.n	800eaae <_malloc_r+0xc2>
 800ea7e:	1961      	adds	r1, r4, r5
 800ea80:	42a3      	cmp	r3, r4
 800ea82:	6025      	str	r5, [r4, #0]
 800ea84:	bf18      	it	ne
 800ea86:	6059      	strne	r1, [r3, #4]
 800ea88:	6863      	ldr	r3, [r4, #4]
 800ea8a:	bf08      	it	eq
 800ea8c:	f8c8 1000 	streq.w	r1, [r8]
 800ea90:	5162      	str	r2, [r4, r5]
 800ea92:	604b      	str	r3, [r1, #4]
 800ea94:	4630      	mov	r0, r6
 800ea96:	f000 f82f 	bl	800eaf8 <__malloc_unlock>
 800ea9a:	f104 000b 	add.w	r0, r4, #11
 800ea9e:	1d23      	adds	r3, r4, #4
 800eaa0:	f020 0007 	bic.w	r0, r0, #7
 800eaa4:	1ac2      	subs	r2, r0, r3
 800eaa6:	bf1c      	itt	ne
 800eaa8:	1a1b      	subne	r3, r3, r0
 800eaaa:	50a3      	strne	r3, [r4, r2]
 800eaac:	e7af      	b.n	800ea0e <_malloc_r+0x22>
 800eaae:	6862      	ldr	r2, [r4, #4]
 800eab0:	42a3      	cmp	r3, r4
 800eab2:	bf0c      	ite	eq
 800eab4:	f8c8 2000 	streq.w	r2, [r8]
 800eab8:	605a      	strne	r2, [r3, #4]
 800eaba:	e7eb      	b.n	800ea94 <_malloc_r+0xa8>
 800eabc:	4623      	mov	r3, r4
 800eabe:	6864      	ldr	r4, [r4, #4]
 800eac0:	e7ae      	b.n	800ea20 <_malloc_r+0x34>
 800eac2:	463c      	mov	r4, r7
 800eac4:	687f      	ldr	r7, [r7, #4]
 800eac6:	e7b6      	b.n	800ea36 <_malloc_r+0x4a>
 800eac8:	461a      	mov	r2, r3
 800eaca:	685b      	ldr	r3, [r3, #4]
 800eacc:	42a3      	cmp	r3, r4
 800eace:	d1fb      	bne.n	800eac8 <_malloc_r+0xdc>
 800ead0:	2300      	movs	r3, #0
 800ead2:	6053      	str	r3, [r2, #4]
 800ead4:	e7de      	b.n	800ea94 <_malloc_r+0xa8>
 800ead6:	230c      	movs	r3, #12
 800ead8:	4630      	mov	r0, r6
 800eada:	6033      	str	r3, [r6, #0]
 800eadc:	f000 f80c 	bl	800eaf8 <__malloc_unlock>
 800eae0:	e794      	b.n	800ea0c <_malloc_r+0x20>
 800eae2:	6005      	str	r5, [r0, #0]
 800eae4:	e7d6      	b.n	800ea94 <_malloc_r+0xa8>
 800eae6:	bf00      	nop
 800eae8:	20009658 	.word	0x20009658

0800eaec <__malloc_lock>:
 800eaec:	4801      	ldr	r0, [pc, #4]	@ (800eaf4 <__malloc_lock+0x8>)
 800eaee:	f7ff b88c 	b.w	800dc0a <__retarget_lock_acquire_recursive>
 800eaf2:	bf00      	nop
 800eaf4:	20009650 	.word	0x20009650

0800eaf8 <__malloc_unlock>:
 800eaf8:	4801      	ldr	r0, [pc, #4]	@ (800eb00 <__malloc_unlock+0x8>)
 800eafa:	f7ff b887 	b.w	800dc0c <__retarget_lock_release_recursive>
 800eafe:	bf00      	nop
 800eb00:	20009650 	.word	0x20009650

0800eb04 <_Balloc>:
 800eb04:	b570      	push	{r4, r5, r6, lr}
 800eb06:	69c6      	ldr	r6, [r0, #28]
 800eb08:	4604      	mov	r4, r0
 800eb0a:	460d      	mov	r5, r1
 800eb0c:	b976      	cbnz	r6, 800eb2c <_Balloc+0x28>
 800eb0e:	2010      	movs	r0, #16
 800eb10:	f7ff ff42 	bl	800e998 <malloc>
 800eb14:	4602      	mov	r2, r0
 800eb16:	61e0      	str	r0, [r4, #28]
 800eb18:	b920      	cbnz	r0, 800eb24 <_Balloc+0x20>
 800eb1a:	216b      	movs	r1, #107	@ 0x6b
 800eb1c:	4b17      	ldr	r3, [pc, #92]	@ (800eb7c <_Balloc+0x78>)
 800eb1e:	4818      	ldr	r0, [pc, #96]	@ (800eb80 <_Balloc+0x7c>)
 800eb20:	f001 ff12 	bl	8010948 <__assert_func>
 800eb24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb28:	6006      	str	r6, [r0, #0]
 800eb2a:	60c6      	str	r6, [r0, #12]
 800eb2c:	69e6      	ldr	r6, [r4, #28]
 800eb2e:	68f3      	ldr	r3, [r6, #12]
 800eb30:	b183      	cbz	r3, 800eb54 <_Balloc+0x50>
 800eb32:	69e3      	ldr	r3, [r4, #28]
 800eb34:	68db      	ldr	r3, [r3, #12]
 800eb36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eb3a:	b9b8      	cbnz	r0, 800eb6c <_Balloc+0x68>
 800eb3c:	2101      	movs	r1, #1
 800eb3e:	fa01 f605 	lsl.w	r6, r1, r5
 800eb42:	1d72      	adds	r2, r6, #5
 800eb44:	4620      	mov	r0, r4
 800eb46:	0092      	lsls	r2, r2, #2
 800eb48:	f001 ff1c 	bl	8010984 <_calloc_r>
 800eb4c:	b160      	cbz	r0, 800eb68 <_Balloc+0x64>
 800eb4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eb52:	e00e      	b.n	800eb72 <_Balloc+0x6e>
 800eb54:	2221      	movs	r2, #33	@ 0x21
 800eb56:	2104      	movs	r1, #4
 800eb58:	4620      	mov	r0, r4
 800eb5a:	f001 ff13 	bl	8010984 <_calloc_r>
 800eb5e:	69e3      	ldr	r3, [r4, #28]
 800eb60:	60f0      	str	r0, [r6, #12]
 800eb62:	68db      	ldr	r3, [r3, #12]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d1e4      	bne.n	800eb32 <_Balloc+0x2e>
 800eb68:	2000      	movs	r0, #0
 800eb6a:	bd70      	pop	{r4, r5, r6, pc}
 800eb6c:	6802      	ldr	r2, [r0, #0]
 800eb6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eb72:	2300      	movs	r3, #0
 800eb74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eb78:	e7f7      	b.n	800eb6a <_Balloc+0x66>
 800eb7a:	bf00      	nop
 800eb7c:	08012e3a 	.word	0x08012e3a
 800eb80:	08012eba 	.word	0x08012eba

0800eb84 <_Bfree>:
 800eb84:	b570      	push	{r4, r5, r6, lr}
 800eb86:	69c6      	ldr	r6, [r0, #28]
 800eb88:	4605      	mov	r5, r0
 800eb8a:	460c      	mov	r4, r1
 800eb8c:	b976      	cbnz	r6, 800ebac <_Bfree+0x28>
 800eb8e:	2010      	movs	r0, #16
 800eb90:	f7ff ff02 	bl	800e998 <malloc>
 800eb94:	4602      	mov	r2, r0
 800eb96:	61e8      	str	r0, [r5, #28]
 800eb98:	b920      	cbnz	r0, 800eba4 <_Bfree+0x20>
 800eb9a:	218f      	movs	r1, #143	@ 0x8f
 800eb9c:	4b08      	ldr	r3, [pc, #32]	@ (800ebc0 <_Bfree+0x3c>)
 800eb9e:	4809      	ldr	r0, [pc, #36]	@ (800ebc4 <_Bfree+0x40>)
 800eba0:	f001 fed2 	bl	8010948 <__assert_func>
 800eba4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eba8:	6006      	str	r6, [r0, #0]
 800ebaa:	60c6      	str	r6, [r0, #12]
 800ebac:	b13c      	cbz	r4, 800ebbe <_Bfree+0x3a>
 800ebae:	69eb      	ldr	r3, [r5, #28]
 800ebb0:	6862      	ldr	r2, [r4, #4]
 800ebb2:	68db      	ldr	r3, [r3, #12]
 800ebb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ebb8:	6021      	str	r1, [r4, #0]
 800ebba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ebbe:	bd70      	pop	{r4, r5, r6, pc}
 800ebc0:	08012e3a 	.word	0x08012e3a
 800ebc4:	08012eba 	.word	0x08012eba

0800ebc8 <__multadd>:
 800ebc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebcc:	4607      	mov	r7, r0
 800ebce:	460c      	mov	r4, r1
 800ebd0:	461e      	mov	r6, r3
 800ebd2:	2000      	movs	r0, #0
 800ebd4:	690d      	ldr	r5, [r1, #16]
 800ebd6:	f101 0c14 	add.w	ip, r1, #20
 800ebda:	f8dc 3000 	ldr.w	r3, [ip]
 800ebde:	3001      	adds	r0, #1
 800ebe0:	b299      	uxth	r1, r3
 800ebe2:	fb02 6101 	mla	r1, r2, r1, r6
 800ebe6:	0c1e      	lsrs	r6, r3, #16
 800ebe8:	0c0b      	lsrs	r3, r1, #16
 800ebea:	fb02 3306 	mla	r3, r2, r6, r3
 800ebee:	b289      	uxth	r1, r1
 800ebf0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ebf4:	4285      	cmp	r5, r0
 800ebf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ebfa:	f84c 1b04 	str.w	r1, [ip], #4
 800ebfe:	dcec      	bgt.n	800ebda <__multadd+0x12>
 800ec00:	b30e      	cbz	r6, 800ec46 <__multadd+0x7e>
 800ec02:	68a3      	ldr	r3, [r4, #8]
 800ec04:	42ab      	cmp	r3, r5
 800ec06:	dc19      	bgt.n	800ec3c <__multadd+0x74>
 800ec08:	6861      	ldr	r1, [r4, #4]
 800ec0a:	4638      	mov	r0, r7
 800ec0c:	3101      	adds	r1, #1
 800ec0e:	f7ff ff79 	bl	800eb04 <_Balloc>
 800ec12:	4680      	mov	r8, r0
 800ec14:	b928      	cbnz	r0, 800ec22 <__multadd+0x5a>
 800ec16:	4602      	mov	r2, r0
 800ec18:	21ba      	movs	r1, #186	@ 0xba
 800ec1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ec4c <__multadd+0x84>)
 800ec1c:	480c      	ldr	r0, [pc, #48]	@ (800ec50 <__multadd+0x88>)
 800ec1e:	f001 fe93 	bl	8010948 <__assert_func>
 800ec22:	6922      	ldr	r2, [r4, #16]
 800ec24:	f104 010c 	add.w	r1, r4, #12
 800ec28:	3202      	adds	r2, #2
 800ec2a:	0092      	lsls	r2, r2, #2
 800ec2c:	300c      	adds	r0, #12
 800ec2e:	f7fe fffc 	bl	800dc2a <memcpy>
 800ec32:	4621      	mov	r1, r4
 800ec34:	4638      	mov	r0, r7
 800ec36:	f7ff ffa5 	bl	800eb84 <_Bfree>
 800ec3a:	4644      	mov	r4, r8
 800ec3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ec40:	3501      	adds	r5, #1
 800ec42:	615e      	str	r6, [r3, #20]
 800ec44:	6125      	str	r5, [r4, #16]
 800ec46:	4620      	mov	r0, r4
 800ec48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec4c:	08012ea9 	.word	0x08012ea9
 800ec50:	08012eba 	.word	0x08012eba

0800ec54 <__s2b>:
 800ec54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec58:	4615      	mov	r5, r2
 800ec5a:	2209      	movs	r2, #9
 800ec5c:	461f      	mov	r7, r3
 800ec5e:	3308      	adds	r3, #8
 800ec60:	460c      	mov	r4, r1
 800ec62:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec66:	4606      	mov	r6, r0
 800ec68:	2201      	movs	r2, #1
 800ec6a:	2100      	movs	r1, #0
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	db09      	blt.n	800ec84 <__s2b+0x30>
 800ec70:	4630      	mov	r0, r6
 800ec72:	f7ff ff47 	bl	800eb04 <_Balloc>
 800ec76:	b940      	cbnz	r0, 800ec8a <__s2b+0x36>
 800ec78:	4602      	mov	r2, r0
 800ec7a:	21d3      	movs	r1, #211	@ 0xd3
 800ec7c:	4b18      	ldr	r3, [pc, #96]	@ (800ece0 <__s2b+0x8c>)
 800ec7e:	4819      	ldr	r0, [pc, #100]	@ (800ece4 <__s2b+0x90>)
 800ec80:	f001 fe62 	bl	8010948 <__assert_func>
 800ec84:	0052      	lsls	r2, r2, #1
 800ec86:	3101      	adds	r1, #1
 800ec88:	e7f0      	b.n	800ec6c <__s2b+0x18>
 800ec8a:	9b08      	ldr	r3, [sp, #32]
 800ec8c:	2d09      	cmp	r5, #9
 800ec8e:	6143      	str	r3, [r0, #20]
 800ec90:	f04f 0301 	mov.w	r3, #1
 800ec94:	6103      	str	r3, [r0, #16]
 800ec96:	dd16      	ble.n	800ecc6 <__s2b+0x72>
 800ec98:	f104 0909 	add.w	r9, r4, #9
 800ec9c:	46c8      	mov	r8, r9
 800ec9e:	442c      	add	r4, r5
 800eca0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eca4:	4601      	mov	r1, r0
 800eca6:	220a      	movs	r2, #10
 800eca8:	4630      	mov	r0, r6
 800ecaa:	3b30      	subs	r3, #48	@ 0x30
 800ecac:	f7ff ff8c 	bl	800ebc8 <__multadd>
 800ecb0:	45a0      	cmp	r8, r4
 800ecb2:	d1f5      	bne.n	800eca0 <__s2b+0x4c>
 800ecb4:	f1a5 0408 	sub.w	r4, r5, #8
 800ecb8:	444c      	add	r4, r9
 800ecba:	1b2d      	subs	r5, r5, r4
 800ecbc:	1963      	adds	r3, r4, r5
 800ecbe:	42bb      	cmp	r3, r7
 800ecc0:	db04      	blt.n	800eccc <__s2b+0x78>
 800ecc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecc6:	2509      	movs	r5, #9
 800ecc8:	340a      	adds	r4, #10
 800ecca:	e7f6      	b.n	800ecba <__s2b+0x66>
 800eccc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ecd0:	4601      	mov	r1, r0
 800ecd2:	220a      	movs	r2, #10
 800ecd4:	4630      	mov	r0, r6
 800ecd6:	3b30      	subs	r3, #48	@ 0x30
 800ecd8:	f7ff ff76 	bl	800ebc8 <__multadd>
 800ecdc:	e7ee      	b.n	800ecbc <__s2b+0x68>
 800ecde:	bf00      	nop
 800ece0:	08012ea9 	.word	0x08012ea9
 800ece4:	08012eba 	.word	0x08012eba

0800ece8 <__hi0bits>:
 800ece8:	4603      	mov	r3, r0
 800ecea:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ecee:	bf3a      	itte	cc
 800ecf0:	0403      	lslcc	r3, r0, #16
 800ecf2:	2010      	movcc	r0, #16
 800ecf4:	2000      	movcs	r0, #0
 800ecf6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ecfa:	bf3c      	itt	cc
 800ecfc:	021b      	lslcc	r3, r3, #8
 800ecfe:	3008      	addcc	r0, #8
 800ed00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed04:	bf3c      	itt	cc
 800ed06:	011b      	lslcc	r3, r3, #4
 800ed08:	3004      	addcc	r0, #4
 800ed0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed0e:	bf3c      	itt	cc
 800ed10:	009b      	lslcc	r3, r3, #2
 800ed12:	3002      	addcc	r0, #2
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	db05      	blt.n	800ed24 <__hi0bits+0x3c>
 800ed18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ed1c:	f100 0001 	add.w	r0, r0, #1
 800ed20:	bf08      	it	eq
 800ed22:	2020      	moveq	r0, #32
 800ed24:	4770      	bx	lr

0800ed26 <__lo0bits>:
 800ed26:	6803      	ldr	r3, [r0, #0]
 800ed28:	4602      	mov	r2, r0
 800ed2a:	f013 0007 	ands.w	r0, r3, #7
 800ed2e:	d00b      	beq.n	800ed48 <__lo0bits+0x22>
 800ed30:	07d9      	lsls	r1, r3, #31
 800ed32:	d421      	bmi.n	800ed78 <__lo0bits+0x52>
 800ed34:	0798      	lsls	r0, r3, #30
 800ed36:	bf49      	itett	mi
 800ed38:	085b      	lsrmi	r3, r3, #1
 800ed3a:	089b      	lsrpl	r3, r3, #2
 800ed3c:	2001      	movmi	r0, #1
 800ed3e:	6013      	strmi	r3, [r2, #0]
 800ed40:	bf5c      	itt	pl
 800ed42:	2002      	movpl	r0, #2
 800ed44:	6013      	strpl	r3, [r2, #0]
 800ed46:	4770      	bx	lr
 800ed48:	b299      	uxth	r1, r3
 800ed4a:	b909      	cbnz	r1, 800ed50 <__lo0bits+0x2a>
 800ed4c:	2010      	movs	r0, #16
 800ed4e:	0c1b      	lsrs	r3, r3, #16
 800ed50:	b2d9      	uxtb	r1, r3
 800ed52:	b909      	cbnz	r1, 800ed58 <__lo0bits+0x32>
 800ed54:	3008      	adds	r0, #8
 800ed56:	0a1b      	lsrs	r3, r3, #8
 800ed58:	0719      	lsls	r1, r3, #28
 800ed5a:	bf04      	itt	eq
 800ed5c:	091b      	lsreq	r3, r3, #4
 800ed5e:	3004      	addeq	r0, #4
 800ed60:	0799      	lsls	r1, r3, #30
 800ed62:	bf04      	itt	eq
 800ed64:	089b      	lsreq	r3, r3, #2
 800ed66:	3002      	addeq	r0, #2
 800ed68:	07d9      	lsls	r1, r3, #31
 800ed6a:	d403      	bmi.n	800ed74 <__lo0bits+0x4e>
 800ed6c:	085b      	lsrs	r3, r3, #1
 800ed6e:	f100 0001 	add.w	r0, r0, #1
 800ed72:	d003      	beq.n	800ed7c <__lo0bits+0x56>
 800ed74:	6013      	str	r3, [r2, #0]
 800ed76:	4770      	bx	lr
 800ed78:	2000      	movs	r0, #0
 800ed7a:	4770      	bx	lr
 800ed7c:	2020      	movs	r0, #32
 800ed7e:	4770      	bx	lr

0800ed80 <__i2b>:
 800ed80:	b510      	push	{r4, lr}
 800ed82:	460c      	mov	r4, r1
 800ed84:	2101      	movs	r1, #1
 800ed86:	f7ff febd 	bl	800eb04 <_Balloc>
 800ed8a:	4602      	mov	r2, r0
 800ed8c:	b928      	cbnz	r0, 800ed9a <__i2b+0x1a>
 800ed8e:	f240 1145 	movw	r1, #325	@ 0x145
 800ed92:	4b04      	ldr	r3, [pc, #16]	@ (800eda4 <__i2b+0x24>)
 800ed94:	4804      	ldr	r0, [pc, #16]	@ (800eda8 <__i2b+0x28>)
 800ed96:	f001 fdd7 	bl	8010948 <__assert_func>
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	6144      	str	r4, [r0, #20]
 800ed9e:	6103      	str	r3, [r0, #16]
 800eda0:	bd10      	pop	{r4, pc}
 800eda2:	bf00      	nop
 800eda4:	08012ea9 	.word	0x08012ea9
 800eda8:	08012eba 	.word	0x08012eba

0800edac <__multiply>:
 800edac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edb0:	4617      	mov	r7, r2
 800edb2:	690a      	ldr	r2, [r1, #16]
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	4689      	mov	r9, r1
 800edb8:	429a      	cmp	r2, r3
 800edba:	bfa2      	ittt	ge
 800edbc:	463b      	movge	r3, r7
 800edbe:	460f      	movge	r7, r1
 800edc0:	4699      	movge	r9, r3
 800edc2:	693d      	ldr	r5, [r7, #16]
 800edc4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	6879      	ldr	r1, [r7, #4]
 800edcc:	eb05 060a 	add.w	r6, r5, sl
 800edd0:	42b3      	cmp	r3, r6
 800edd2:	b085      	sub	sp, #20
 800edd4:	bfb8      	it	lt
 800edd6:	3101      	addlt	r1, #1
 800edd8:	f7ff fe94 	bl	800eb04 <_Balloc>
 800eddc:	b930      	cbnz	r0, 800edec <__multiply+0x40>
 800edde:	4602      	mov	r2, r0
 800ede0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ede4:	4b40      	ldr	r3, [pc, #256]	@ (800eee8 <__multiply+0x13c>)
 800ede6:	4841      	ldr	r0, [pc, #260]	@ (800eeec <__multiply+0x140>)
 800ede8:	f001 fdae 	bl	8010948 <__assert_func>
 800edec:	f100 0414 	add.w	r4, r0, #20
 800edf0:	4623      	mov	r3, r4
 800edf2:	2200      	movs	r2, #0
 800edf4:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800edf8:	4573      	cmp	r3, lr
 800edfa:	d320      	bcc.n	800ee3e <__multiply+0x92>
 800edfc:	f107 0814 	add.w	r8, r7, #20
 800ee00:	f109 0114 	add.w	r1, r9, #20
 800ee04:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ee08:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ee0c:	9302      	str	r3, [sp, #8]
 800ee0e:	1beb      	subs	r3, r5, r7
 800ee10:	3b15      	subs	r3, #21
 800ee12:	f023 0303 	bic.w	r3, r3, #3
 800ee16:	3304      	adds	r3, #4
 800ee18:	3715      	adds	r7, #21
 800ee1a:	42bd      	cmp	r5, r7
 800ee1c:	bf38      	it	cc
 800ee1e:	2304      	movcc	r3, #4
 800ee20:	9301      	str	r3, [sp, #4]
 800ee22:	9b02      	ldr	r3, [sp, #8]
 800ee24:	9103      	str	r1, [sp, #12]
 800ee26:	428b      	cmp	r3, r1
 800ee28:	d80c      	bhi.n	800ee44 <__multiply+0x98>
 800ee2a:	2e00      	cmp	r6, #0
 800ee2c:	dd03      	ble.n	800ee36 <__multiply+0x8a>
 800ee2e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d055      	beq.n	800eee2 <__multiply+0x136>
 800ee36:	6106      	str	r6, [r0, #16]
 800ee38:	b005      	add	sp, #20
 800ee3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee3e:	f843 2b04 	str.w	r2, [r3], #4
 800ee42:	e7d9      	b.n	800edf8 <__multiply+0x4c>
 800ee44:	f8b1 a000 	ldrh.w	sl, [r1]
 800ee48:	f1ba 0f00 	cmp.w	sl, #0
 800ee4c:	d01f      	beq.n	800ee8e <__multiply+0xe2>
 800ee4e:	46c4      	mov	ip, r8
 800ee50:	46a1      	mov	r9, r4
 800ee52:	2700      	movs	r7, #0
 800ee54:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ee58:	f8d9 3000 	ldr.w	r3, [r9]
 800ee5c:	fa1f fb82 	uxth.w	fp, r2
 800ee60:	b29b      	uxth	r3, r3
 800ee62:	fb0a 330b 	mla	r3, sl, fp, r3
 800ee66:	443b      	add	r3, r7
 800ee68:	f8d9 7000 	ldr.w	r7, [r9]
 800ee6c:	0c12      	lsrs	r2, r2, #16
 800ee6e:	0c3f      	lsrs	r7, r7, #16
 800ee70:	fb0a 7202 	mla	r2, sl, r2, r7
 800ee74:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ee78:	b29b      	uxth	r3, r3
 800ee7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee7e:	4565      	cmp	r5, ip
 800ee80:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ee84:	f849 3b04 	str.w	r3, [r9], #4
 800ee88:	d8e4      	bhi.n	800ee54 <__multiply+0xa8>
 800ee8a:	9b01      	ldr	r3, [sp, #4]
 800ee8c:	50e7      	str	r7, [r4, r3]
 800ee8e:	9b03      	ldr	r3, [sp, #12]
 800ee90:	3104      	adds	r1, #4
 800ee92:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ee96:	f1b9 0f00 	cmp.w	r9, #0
 800ee9a:	d020      	beq.n	800eede <__multiply+0x132>
 800ee9c:	4647      	mov	r7, r8
 800ee9e:	46a4      	mov	ip, r4
 800eea0:	f04f 0a00 	mov.w	sl, #0
 800eea4:	6823      	ldr	r3, [r4, #0]
 800eea6:	f8b7 b000 	ldrh.w	fp, [r7]
 800eeaa:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800eeae:	b29b      	uxth	r3, r3
 800eeb0:	fb09 220b 	mla	r2, r9, fp, r2
 800eeb4:	4452      	add	r2, sl
 800eeb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eeba:	f84c 3b04 	str.w	r3, [ip], #4
 800eebe:	f857 3b04 	ldr.w	r3, [r7], #4
 800eec2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eec6:	f8bc 3000 	ldrh.w	r3, [ip]
 800eeca:	42bd      	cmp	r5, r7
 800eecc:	fb09 330a 	mla	r3, r9, sl, r3
 800eed0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800eed4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eed8:	d8e5      	bhi.n	800eea6 <__multiply+0xfa>
 800eeda:	9a01      	ldr	r2, [sp, #4]
 800eedc:	50a3      	str	r3, [r4, r2]
 800eede:	3404      	adds	r4, #4
 800eee0:	e79f      	b.n	800ee22 <__multiply+0x76>
 800eee2:	3e01      	subs	r6, #1
 800eee4:	e7a1      	b.n	800ee2a <__multiply+0x7e>
 800eee6:	bf00      	nop
 800eee8:	08012ea9 	.word	0x08012ea9
 800eeec:	08012eba 	.word	0x08012eba

0800eef0 <__pow5mult>:
 800eef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eef4:	4615      	mov	r5, r2
 800eef6:	f012 0203 	ands.w	r2, r2, #3
 800eefa:	4607      	mov	r7, r0
 800eefc:	460e      	mov	r6, r1
 800eefe:	d007      	beq.n	800ef10 <__pow5mult+0x20>
 800ef00:	4c25      	ldr	r4, [pc, #148]	@ (800ef98 <__pow5mult+0xa8>)
 800ef02:	3a01      	subs	r2, #1
 800ef04:	2300      	movs	r3, #0
 800ef06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ef0a:	f7ff fe5d 	bl	800ebc8 <__multadd>
 800ef0e:	4606      	mov	r6, r0
 800ef10:	10ad      	asrs	r5, r5, #2
 800ef12:	d03d      	beq.n	800ef90 <__pow5mult+0xa0>
 800ef14:	69fc      	ldr	r4, [r7, #28]
 800ef16:	b97c      	cbnz	r4, 800ef38 <__pow5mult+0x48>
 800ef18:	2010      	movs	r0, #16
 800ef1a:	f7ff fd3d 	bl	800e998 <malloc>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	61f8      	str	r0, [r7, #28]
 800ef22:	b928      	cbnz	r0, 800ef30 <__pow5mult+0x40>
 800ef24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ef28:	4b1c      	ldr	r3, [pc, #112]	@ (800ef9c <__pow5mult+0xac>)
 800ef2a:	481d      	ldr	r0, [pc, #116]	@ (800efa0 <__pow5mult+0xb0>)
 800ef2c:	f001 fd0c 	bl	8010948 <__assert_func>
 800ef30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ef34:	6004      	str	r4, [r0, #0]
 800ef36:	60c4      	str	r4, [r0, #12]
 800ef38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ef3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ef40:	b94c      	cbnz	r4, 800ef56 <__pow5mult+0x66>
 800ef42:	f240 2171 	movw	r1, #625	@ 0x271
 800ef46:	4638      	mov	r0, r7
 800ef48:	f7ff ff1a 	bl	800ed80 <__i2b>
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	4604      	mov	r4, r0
 800ef50:	f8c8 0008 	str.w	r0, [r8, #8]
 800ef54:	6003      	str	r3, [r0, #0]
 800ef56:	f04f 0900 	mov.w	r9, #0
 800ef5a:	07eb      	lsls	r3, r5, #31
 800ef5c:	d50a      	bpl.n	800ef74 <__pow5mult+0x84>
 800ef5e:	4631      	mov	r1, r6
 800ef60:	4622      	mov	r2, r4
 800ef62:	4638      	mov	r0, r7
 800ef64:	f7ff ff22 	bl	800edac <__multiply>
 800ef68:	4680      	mov	r8, r0
 800ef6a:	4631      	mov	r1, r6
 800ef6c:	4638      	mov	r0, r7
 800ef6e:	f7ff fe09 	bl	800eb84 <_Bfree>
 800ef72:	4646      	mov	r6, r8
 800ef74:	106d      	asrs	r5, r5, #1
 800ef76:	d00b      	beq.n	800ef90 <__pow5mult+0xa0>
 800ef78:	6820      	ldr	r0, [r4, #0]
 800ef7a:	b938      	cbnz	r0, 800ef8c <__pow5mult+0x9c>
 800ef7c:	4622      	mov	r2, r4
 800ef7e:	4621      	mov	r1, r4
 800ef80:	4638      	mov	r0, r7
 800ef82:	f7ff ff13 	bl	800edac <__multiply>
 800ef86:	6020      	str	r0, [r4, #0]
 800ef88:	f8c0 9000 	str.w	r9, [r0]
 800ef8c:	4604      	mov	r4, r0
 800ef8e:	e7e4      	b.n	800ef5a <__pow5mult+0x6a>
 800ef90:	4630      	mov	r0, r6
 800ef92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef96:	bf00      	nop
 800ef98:	08012fcc 	.word	0x08012fcc
 800ef9c:	08012e3a 	.word	0x08012e3a
 800efa0:	08012eba 	.word	0x08012eba

0800efa4 <__lshift>:
 800efa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efa8:	460c      	mov	r4, r1
 800efaa:	4607      	mov	r7, r0
 800efac:	4691      	mov	r9, r2
 800efae:	6923      	ldr	r3, [r4, #16]
 800efb0:	6849      	ldr	r1, [r1, #4]
 800efb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800efb6:	68a3      	ldr	r3, [r4, #8]
 800efb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800efbc:	f108 0601 	add.w	r6, r8, #1
 800efc0:	42b3      	cmp	r3, r6
 800efc2:	db0b      	blt.n	800efdc <__lshift+0x38>
 800efc4:	4638      	mov	r0, r7
 800efc6:	f7ff fd9d 	bl	800eb04 <_Balloc>
 800efca:	4605      	mov	r5, r0
 800efcc:	b948      	cbnz	r0, 800efe2 <__lshift+0x3e>
 800efce:	4602      	mov	r2, r0
 800efd0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800efd4:	4b27      	ldr	r3, [pc, #156]	@ (800f074 <__lshift+0xd0>)
 800efd6:	4828      	ldr	r0, [pc, #160]	@ (800f078 <__lshift+0xd4>)
 800efd8:	f001 fcb6 	bl	8010948 <__assert_func>
 800efdc:	3101      	adds	r1, #1
 800efde:	005b      	lsls	r3, r3, #1
 800efe0:	e7ee      	b.n	800efc0 <__lshift+0x1c>
 800efe2:	2300      	movs	r3, #0
 800efe4:	f100 0114 	add.w	r1, r0, #20
 800efe8:	f100 0210 	add.w	r2, r0, #16
 800efec:	4618      	mov	r0, r3
 800efee:	4553      	cmp	r3, sl
 800eff0:	db33      	blt.n	800f05a <__lshift+0xb6>
 800eff2:	6920      	ldr	r0, [r4, #16]
 800eff4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eff8:	f104 0314 	add.w	r3, r4, #20
 800effc:	f019 091f 	ands.w	r9, r9, #31
 800f000:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f004:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f008:	d02b      	beq.n	800f062 <__lshift+0xbe>
 800f00a:	468a      	mov	sl, r1
 800f00c:	2200      	movs	r2, #0
 800f00e:	f1c9 0e20 	rsb	lr, r9, #32
 800f012:	6818      	ldr	r0, [r3, #0]
 800f014:	fa00 f009 	lsl.w	r0, r0, r9
 800f018:	4310      	orrs	r0, r2
 800f01a:	f84a 0b04 	str.w	r0, [sl], #4
 800f01e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f022:	459c      	cmp	ip, r3
 800f024:	fa22 f20e 	lsr.w	r2, r2, lr
 800f028:	d8f3      	bhi.n	800f012 <__lshift+0x6e>
 800f02a:	ebac 0304 	sub.w	r3, ip, r4
 800f02e:	3b15      	subs	r3, #21
 800f030:	f023 0303 	bic.w	r3, r3, #3
 800f034:	3304      	adds	r3, #4
 800f036:	f104 0015 	add.w	r0, r4, #21
 800f03a:	4560      	cmp	r0, ip
 800f03c:	bf88      	it	hi
 800f03e:	2304      	movhi	r3, #4
 800f040:	50ca      	str	r2, [r1, r3]
 800f042:	b10a      	cbz	r2, 800f048 <__lshift+0xa4>
 800f044:	f108 0602 	add.w	r6, r8, #2
 800f048:	3e01      	subs	r6, #1
 800f04a:	4638      	mov	r0, r7
 800f04c:	4621      	mov	r1, r4
 800f04e:	612e      	str	r6, [r5, #16]
 800f050:	f7ff fd98 	bl	800eb84 <_Bfree>
 800f054:	4628      	mov	r0, r5
 800f056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f05a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f05e:	3301      	adds	r3, #1
 800f060:	e7c5      	b.n	800efee <__lshift+0x4a>
 800f062:	3904      	subs	r1, #4
 800f064:	f853 2b04 	ldr.w	r2, [r3], #4
 800f068:	459c      	cmp	ip, r3
 800f06a:	f841 2f04 	str.w	r2, [r1, #4]!
 800f06e:	d8f9      	bhi.n	800f064 <__lshift+0xc0>
 800f070:	e7ea      	b.n	800f048 <__lshift+0xa4>
 800f072:	bf00      	nop
 800f074:	08012ea9 	.word	0x08012ea9
 800f078:	08012eba 	.word	0x08012eba

0800f07c <__mcmp>:
 800f07c:	4603      	mov	r3, r0
 800f07e:	690a      	ldr	r2, [r1, #16]
 800f080:	6900      	ldr	r0, [r0, #16]
 800f082:	b530      	push	{r4, r5, lr}
 800f084:	1a80      	subs	r0, r0, r2
 800f086:	d10e      	bne.n	800f0a6 <__mcmp+0x2a>
 800f088:	3314      	adds	r3, #20
 800f08a:	3114      	adds	r1, #20
 800f08c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f090:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f094:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f098:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f09c:	4295      	cmp	r5, r2
 800f09e:	d003      	beq.n	800f0a8 <__mcmp+0x2c>
 800f0a0:	d205      	bcs.n	800f0ae <__mcmp+0x32>
 800f0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f0a6:	bd30      	pop	{r4, r5, pc}
 800f0a8:	42a3      	cmp	r3, r4
 800f0aa:	d3f3      	bcc.n	800f094 <__mcmp+0x18>
 800f0ac:	e7fb      	b.n	800f0a6 <__mcmp+0x2a>
 800f0ae:	2001      	movs	r0, #1
 800f0b0:	e7f9      	b.n	800f0a6 <__mcmp+0x2a>
	...

0800f0b4 <__mdiff>:
 800f0b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0b8:	4689      	mov	r9, r1
 800f0ba:	4606      	mov	r6, r0
 800f0bc:	4611      	mov	r1, r2
 800f0be:	4648      	mov	r0, r9
 800f0c0:	4614      	mov	r4, r2
 800f0c2:	f7ff ffdb 	bl	800f07c <__mcmp>
 800f0c6:	1e05      	subs	r5, r0, #0
 800f0c8:	d112      	bne.n	800f0f0 <__mdiff+0x3c>
 800f0ca:	4629      	mov	r1, r5
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	f7ff fd19 	bl	800eb04 <_Balloc>
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	b928      	cbnz	r0, 800f0e2 <__mdiff+0x2e>
 800f0d6:	f240 2137 	movw	r1, #567	@ 0x237
 800f0da:	4b3e      	ldr	r3, [pc, #248]	@ (800f1d4 <__mdiff+0x120>)
 800f0dc:	483e      	ldr	r0, [pc, #248]	@ (800f1d8 <__mdiff+0x124>)
 800f0de:	f001 fc33 	bl	8010948 <__assert_func>
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f0e8:	4610      	mov	r0, r2
 800f0ea:	b003      	add	sp, #12
 800f0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0f0:	bfbc      	itt	lt
 800f0f2:	464b      	movlt	r3, r9
 800f0f4:	46a1      	movlt	r9, r4
 800f0f6:	4630      	mov	r0, r6
 800f0f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f0fc:	bfba      	itte	lt
 800f0fe:	461c      	movlt	r4, r3
 800f100:	2501      	movlt	r5, #1
 800f102:	2500      	movge	r5, #0
 800f104:	f7ff fcfe 	bl	800eb04 <_Balloc>
 800f108:	4602      	mov	r2, r0
 800f10a:	b918      	cbnz	r0, 800f114 <__mdiff+0x60>
 800f10c:	f240 2145 	movw	r1, #581	@ 0x245
 800f110:	4b30      	ldr	r3, [pc, #192]	@ (800f1d4 <__mdiff+0x120>)
 800f112:	e7e3      	b.n	800f0dc <__mdiff+0x28>
 800f114:	f100 0b14 	add.w	fp, r0, #20
 800f118:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f11c:	f109 0310 	add.w	r3, r9, #16
 800f120:	60c5      	str	r5, [r0, #12]
 800f122:	f04f 0c00 	mov.w	ip, #0
 800f126:	f109 0514 	add.w	r5, r9, #20
 800f12a:	46d9      	mov	r9, fp
 800f12c:	6926      	ldr	r6, [r4, #16]
 800f12e:	f104 0e14 	add.w	lr, r4, #20
 800f132:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f136:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f13a:	9301      	str	r3, [sp, #4]
 800f13c:	9b01      	ldr	r3, [sp, #4]
 800f13e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f142:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f146:	b281      	uxth	r1, r0
 800f148:	9301      	str	r3, [sp, #4]
 800f14a:	fa1f f38a 	uxth.w	r3, sl
 800f14e:	1a5b      	subs	r3, r3, r1
 800f150:	0c00      	lsrs	r0, r0, #16
 800f152:	4463      	add	r3, ip
 800f154:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f158:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f15c:	b29b      	uxth	r3, r3
 800f15e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f162:	4576      	cmp	r6, lr
 800f164:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f168:	f849 3b04 	str.w	r3, [r9], #4
 800f16c:	d8e6      	bhi.n	800f13c <__mdiff+0x88>
 800f16e:	1b33      	subs	r3, r6, r4
 800f170:	3b15      	subs	r3, #21
 800f172:	f023 0303 	bic.w	r3, r3, #3
 800f176:	3415      	adds	r4, #21
 800f178:	3304      	adds	r3, #4
 800f17a:	42a6      	cmp	r6, r4
 800f17c:	bf38      	it	cc
 800f17e:	2304      	movcc	r3, #4
 800f180:	441d      	add	r5, r3
 800f182:	445b      	add	r3, fp
 800f184:	461e      	mov	r6, r3
 800f186:	462c      	mov	r4, r5
 800f188:	4544      	cmp	r4, r8
 800f18a:	d30e      	bcc.n	800f1aa <__mdiff+0xf6>
 800f18c:	f108 0103 	add.w	r1, r8, #3
 800f190:	1b49      	subs	r1, r1, r5
 800f192:	f021 0103 	bic.w	r1, r1, #3
 800f196:	3d03      	subs	r5, #3
 800f198:	45a8      	cmp	r8, r5
 800f19a:	bf38      	it	cc
 800f19c:	2100      	movcc	r1, #0
 800f19e:	440b      	add	r3, r1
 800f1a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f1a4:	b199      	cbz	r1, 800f1ce <__mdiff+0x11a>
 800f1a6:	6117      	str	r7, [r2, #16]
 800f1a8:	e79e      	b.n	800f0e8 <__mdiff+0x34>
 800f1aa:	46e6      	mov	lr, ip
 800f1ac:	f854 1b04 	ldr.w	r1, [r4], #4
 800f1b0:	fa1f fc81 	uxth.w	ip, r1
 800f1b4:	44f4      	add	ip, lr
 800f1b6:	0c08      	lsrs	r0, r1, #16
 800f1b8:	4471      	add	r1, lr
 800f1ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f1be:	b289      	uxth	r1, r1
 800f1c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f1c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f1c8:	f846 1b04 	str.w	r1, [r6], #4
 800f1cc:	e7dc      	b.n	800f188 <__mdiff+0xd4>
 800f1ce:	3f01      	subs	r7, #1
 800f1d0:	e7e6      	b.n	800f1a0 <__mdiff+0xec>
 800f1d2:	bf00      	nop
 800f1d4:	08012ea9 	.word	0x08012ea9
 800f1d8:	08012eba 	.word	0x08012eba

0800f1dc <__ulp>:
 800f1dc:	4b0e      	ldr	r3, [pc, #56]	@ (800f218 <__ulp+0x3c>)
 800f1de:	400b      	ands	r3, r1
 800f1e0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	dc08      	bgt.n	800f1fa <__ulp+0x1e>
 800f1e8:	425b      	negs	r3, r3
 800f1ea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f1ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f1f2:	da04      	bge.n	800f1fe <__ulp+0x22>
 800f1f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f1f8:	4113      	asrs	r3, r2
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	e008      	b.n	800f210 <__ulp+0x34>
 800f1fe:	f1a2 0314 	sub.w	r3, r2, #20
 800f202:	2b1e      	cmp	r3, #30
 800f204:	bfd6      	itet	le
 800f206:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f20a:	2201      	movgt	r2, #1
 800f20c:	40da      	lsrle	r2, r3
 800f20e:	2300      	movs	r3, #0
 800f210:	4619      	mov	r1, r3
 800f212:	4610      	mov	r0, r2
 800f214:	4770      	bx	lr
 800f216:	bf00      	nop
 800f218:	7ff00000 	.word	0x7ff00000

0800f21c <__b2d>:
 800f21c:	6902      	ldr	r2, [r0, #16]
 800f21e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f220:	f100 0614 	add.w	r6, r0, #20
 800f224:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800f228:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800f22c:	4f1e      	ldr	r7, [pc, #120]	@ (800f2a8 <__b2d+0x8c>)
 800f22e:	4620      	mov	r0, r4
 800f230:	f7ff fd5a 	bl	800ece8 <__hi0bits>
 800f234:	4603      	mov	r3, r0
 800f236:	f1c0 0020 	rsb	r0, r0, #32
 800f23a:	2b0a      	cmp	r3, #10
 800f23c:	f1a2 0504 	sub.w	r5, r2, #4
 800f240:	6008      	str	r0, [r1, #0]
 800f242:	dc12      	bgt.n	800f26a <__b2d+0x4e>
 800f244:	42ae      	cmp	r6, r5
 800f246:	bf2c      	ite	cs
 800f248:	2200      	movcs	r2, #0
 800f24a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800f24e:	f1c3 0c0b 	rsb	ip, r3, #11
 800f252:	3315      	adds	r3, #21
 800f254:	fa24 fe0c 	lsr.w	lr, r4, ip
 800f258:	fa04 f303 	lsl.w	r3, r4, r3
 800f25c:	fa22 f20c 	lsr.w	r2, r2, ip
 800f260:	ea4e 0107 	orr.w	r1, lr, r7
 800f264:	431a      	orrs	r2, r3
 800f266:	4610      	mov	r0, r2
 800f268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f26a:	42ae      	cmp	r6, r5
 800f26c:	bf36      	itet	cc
 800f26e:	f1a2 0508 	subcc.w	r5, r2, #8
 800f272:	2200      	movcs	r2, #0
 800f274:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800f278:	3b0b      	subs	r3, #11
 800f27a:	d012      	beq.n	800f2a2 <__b2d+0x86>
 800f27c:	f1c3 0720 	rsb	r7, r3, #32
 800f280:	fa22 f107 	lsr.w	r1, r2, r7
 800f284:	409c      	lsls	r4, r3
 800f286:	430c      	orrs	r4, r1
 800f288:	42b5      	cmp	r5, r6
 800f28a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800f28e:	bf94      	ite	ls
 800f290:	2400      	movls	r4, #0
 800f292:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800f296:	409a      	lsls	r2, r3
 800f298:	40fc      	lsrs	r4, r7
 800f29a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800f29e:	4322      	orrs	r2, r4
 800f2a0:	e7e1      	b.n	800f266 <__b2d+0x4a>
 800f2a2:	ea44 0107 	orr.w	r1, r4, r7
 800f2a6:	e7de      	b.n	800f266 <__b2d+0x4a>
 800f2a8:	3ff00000 	.word	0x3ff00000

0800f2ac <__d2b>:
 800f2ac:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800f2b0:	2101      	movs	r1, #1
 800f2b2:	4690      	mov	r8, r2
 800f2b4:	4699      	mov	r9, r3
 800f2b6:	9e08      	ldr	r6, [sp, #32]
 800f2b8:	f7ff fc24 	bl	800eb04 <_Balloc>
 800f2bc:	4604      	mov	r4, r0
 800f2be:	b930      	cbnz	r0, 800f2ce <__d2b+0x22>
 800f2c0:	4602      	mov	r2, r0
 800f2c2:	f240 310f 	movw	r1, #783	@ 0x30f
 800f2c6:	4b23      	ldr	r3, [pc, #140]	@ (800f354 <__d2b+0xa8>)
 800f2c8:	4823      	ldr	r0, [pc, #140]	@ (800f358 <__d2b+0xac>)
 800f2ca:	f001 fb3d 	bl	8010948 <__assert_func>
 800f2ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f2d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f2d6:	b10d      	cbz	r5, 800f2dc <__d2b+0x30>
 800f2d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f2dc:	9301      	str	r3, [sp, #4]
 800f2de:	f1b8 0300 	subs.w	r3, r8, #0
 800f2e2:	d024      	beq.n	800f32e <__d2b+0x82>
 800f2e4:	4668      	mov	r0, sp
 800f2e6:	9300      	str	r3, [sp, #0]
 800f2e8:	f7ff fd1d 	bl	800ed26 <__lo0bits>
 800f2ec:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f2f0:	b1d8      	cbz	r0, 800f32a <__d2b+0x7e>
 800f2f2:	f1c0 0320 	rsb	r3, r0, #32
 800f2f6:	fa02 f303 	lsl.w	r3, r2, r3
 800f2fa:	430b      	orrs	r3, r1
 800f2fc:	40c2      	lsrs	r2, r0
 800f2fe:	6163      	str	r3, [r4, #20]
 800f300:	9201      	str	r2, [sp, #4]
 800f302:	9b01      	ldr	r3, [sp, #4]
 800f304:	2b00      	cmp	r3, #0
 800f306:	bf0c      	ite	eq
 800f308:	2201      	moveq	r2, #1
 800f30a:	2202      	movne	r2, #2
 800f30c:	61a3      	str	r3, [r4, #24]
 800f30e:	6122      	str	r2, [r4, #16]
 800f310:	b1ad      	cbz	r5, 800f33e <__d2b+0x92>
 800f312:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f316:	4405      	add	r5, r0
 800f318:	6035      	str	r5, [r6, #0]
 800f31a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f320:	6018      	str	r0, [r3, #0]
 800f322:	4620      	mov	r0, r4
 800f324:	b002      	add	sp, #8
 800f326:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800f32a:	6161      	str	r1, [r4, #20]
 800f32c:	e7e9      	b.n	800f302 <__d2b+0x56>
 800f32e:	a801      	add	r0, sp, #4
 800f330:	f7ff fcf9 	bl	800ed26 <__lo0bits>
 800f334:	9b01      	ldr	r3, [sp, #4]
 800f336:	2201      	movs	r2, #1
 800f338:	6163      	str	r3, [r4, #20]
 800f33a:	3020      	adds	r0, #32
 800f33c:	e7e7      	b.n	800f30e <__d2b+0x62>
 800f33e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f342:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f346:	6030      	str	r0, [r6, #0]
 800f348:	6918      	ldr	r0, [r3, #16]
 800f34a:	f7ff fccd 	bl	800ece8 <__hi0bits>
 800f34e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f352:	e7e4      	b.n	800f31e <__d2b+0x72>
 800f354:	08012ea9 	.word	0x08012ea9
 800f358:	08012eba 	.word	0x08012eba

0800f35c <__ratio>:
 800f35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f360:	b085      	sub	sp, #20
 800f362:	e9cd 1000 	strd	r1, r0, [sp]
 800f366:	a902      	add	r1, sp, #8
 800f368:	f7ff ff58 	bl	800f21c <__b2d>
 800f36c:	468b      	mov	fp, r1
 800f36e:	4606      	mov	r6, r0
 800f370:	460f      	mov	r7, r1
 800f372:	9800      	ldr	r0, [sp, #0]
 800f374:	a903      	add	r1, sp, #12
 800f376:	f7ff ff51 	bl	800f21c <__b2d>
 800f37a:	460d      	mov	r5, r1
 800f37c:	9b01      	ldr	r3, [sp, #4]
 800f37e:	4689      	mov	r9, r1
 800f380:	6919      	ldr	r1, [r3, #16]
 800f382:	9b00      	ldr	r3, [sp, #0]
 800f384:	4604      	mov	r4, r0
 800f386:	691b      	ldr	r3, [r3, #16]
 800f388:	4630      	mov	r0, r6
 800f38a:	1ac9      	subs	r1, r1, r3
 800f38c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f390:	1a9b      	subs	r3, r3, r2
 800f392:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f396:	2b00      	cmp	r3, #0
 800f398:	bfcd      	iteet	gt
 800f39a:	463a      	movgt	r2, r7
 800f39c:	462a      	movle	r2, r5
 800f39e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f3a2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800f3a6:	bfd8      	it	le
 800f3a8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f3ac:	464b      	mov	r3, r9
 800f3ae:	4622      	mov	r2, r4
 800f3b0:	4659      	mov	r1, fp
 800f3b2:	f7f1 fa2b 	bl	800080c <__aeabi_ddiv>
 800f3b6:	b005      	add	sp, #20
 800f3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f3bc <__copybits>:
 800f3bc:	3901      	subs	r1, #1
 800f3be:	b570      	push	{r4, r5, r6, lr}
 800f3c0:	1149      	asrs	r1, r1, #5
 800f3c2:	6914      	ldr	r4, [r2, #16]
 800f3c4:	3101      	adds	r1, #1
 800f3c6:	f102 0314 	add.w	r3, r2, #20
 800f3ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f3ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f3d2:	1f05      	subs	r5, r0, #4
 800f3d4:	42a3      	cmp	r3, r4
 800f3d6:	d30c      	bcc.n	800f3f2 <__copybits+0x36>
 800f3d8:	1aa3      	subs	r3, r4, r2
 800f3da:	3b11      	subs	r3, #17
 800f3dc:	f023 0303 	bic.w	r3, r3, #3
 800f3e0:	3211      	adds	r2, #17
 800f3e2:	42a2      	cmp	r2, r4
 800f3e4:	bf88      	it	hi
 800f3e6:	2300      	movhi	r3, #0
 800f3e8:	4418      	add	r0, r3
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	4288      	cmp	r0, r1
 800f3ee:	d305      	bcc.n	800f3fc <__copybits+0x40>
 800f3f0:	bd70      	pop	{r4, r5, r6, pc}
 800f3f2:	f853 6b04 	ldr.w	r6, [r3], #4
 800f3f6:	f845 6f04 	str.w	r6, [r5, #4]!
 800f3fa:	e7eb      	b.n	800f3d4 <__copybits+0x18>
 800f3fc:	f840 3b04 	str.w	r3, [r0], #4
 800f400:	e7f4      	b.n	800f3ec <__copybits+0x30>

0800f402 <__any_on>:
 800f402:	f100 0214 	add.w	r2, r0, #20
 800f406:	6900      	ldr	r0, [r0, #16]
 800f408:	114b      	asrs	r3, r1, #5
 800f40a:	4298      	cmp	r0, r3
 800f40c:	b510      	push	{r4, lr}
 800f40e:	db11      	blt.n	800f434 <__any_on+0x32>
 800f410:	dd0a      	ble.n	800f428 <__any_on+0x26>
 800f412:	f011 011f 	ands.w	r1, r1, #31
 800f416:	d007      	beq.n	800f428 <__any_on+0x26>
 800f418:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f41c:	fa24 f001 	lsr.w	r0, r4, r1
 800f420:	fa00 f101 	lsl.w	r1, r0, r1
 800f424:	428c      	cmp	r4, r1
 800f426:	d10b      	bne.n	800f440 <__any_on+0x3e>
 800f428:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f42c:	4293      	cmp	r3, r2
 800f42e:	d803      	bhi.n	800f438 <__any_on+0x36>
 800f430:	2000      	movs	r0, #0
 800f432:	bd10      	pop	{r4, pc}
 800f434:	4603      	mov	r3, r0
 800f436:	e7f7      	b.n	800f428 <__any_on+0x26>
 800f438:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f43c:	2900      	cmp	r1, #0
 800f43e:	d0f5      	beq.n	800f42c <__any_on+0x2a>
 800f440:	2001      	movs	r0, #1
 800f442:	e7f6      	b.n	800f432 <__any_on+0x30>

0800f444 <sulp>:
 800f444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f448:	460f      	mov	r7, r1
 800f44a:	4690      	mov	r8, r2
 800f44c:	f7ff fec6 	bl	800f1dc <__ulp>
 800f450:	4604      	mov	r4, r0
 800f452:	460d      	mov	r5, r1
 800f454:	f1b8 0f00 	cmp.w	r8, #0
 800f458:	d011      	beq.n	800f47e <sulp+0x3a>
 800f45a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800f45e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f462:	2b00      	cmp	r3, #0
 800f464:	dd0b      	ble.n	800f47e <sulp+0x3a>
 800f466:	2400      	movs	r4, #0
 800f468:	051b      	lsls	r3, r3, #20
 800f46a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f46e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f472:	4622      	mov	r2, r4
 800f474:	462b      	mov	r3, r5
 800f476:	f7f1 f89f 	bl	80005b8 <__aeabi_dmul>
 800f47a:	4604      	mov	r4, r0
 800f47c:	460d      	mov	r5, r1
 800f47e:	4620      	mov	r0, r4
 800f480:	4629      	mov	r1, r5
 800f482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800f488 <_strtod_l>:
 800f488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f48c:	b09f      	sub	sp, #124	@ 0x7c
 800f48e:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f490:	2200      	movs	r2, #0
 800f492:	460c      	mov	r4, r1
 800f494:	921a      	str	r2, [sp, #104]	@ 0x68
 800f496:	f04f 0a00 	mov.w	sl, #0
 800f49a:	f04f 0b00 	mov.w	fp, #0
 800f49e:	460a      	mov	r2, r1
 800f4a0:	9005      	str	r0, [sp, #20]
 800f4a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800f4a4:	7811      	ldrb	r1, [r2, #0]
 800f4a6:	292b      	cmp	r1, #43	@ 0x2b
 800f4a8:	d048      	beq.n	800f53c <_strtod_l+0xb4>
 800f4aa:	d836      	bhi.n	800f51a <_strtod_l+0x92>
 800f4ac:	290d      	cmp	r1, #13
 800f4ae:	d830      	bhi.n	800f512 <_strtod_l+0x8a>
 800f4b0:	2908      	cmp	r1, #8
 800f4b2:	d830      	bhi.n	800f516 <_strtod_l+0x8e>
 800f4b4:	2900      	cmp	r1, #0
 800f4b6:	d039      	beq.n	800f52c <_strtod_l+0xa4>
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	920e      	str	r2, [sp, #56]	@ 0x38
 800f4bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f4be:	782a      	ldrb	r2, [r5, #0]
 800f4c0:	2a30      	cmp	r2, #48	@ 0x30
 800f4c2:	f040 80b0 	bne.w	800f626 <_strtod_l+0x19e>
 800f4c6:	786a      	ldrb	r2, [r5, #1]
 800f4c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f4cc:	2a58      	cmp	r2, #88	@ 0x58
 800f4ce:	d16c      	bne.n	800f5aa <_strtod_l+0x122>
 800f4d0:	9302      	str	r3, [sp, #8]
 800f4d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4d4:	4a8f      	ldr	r2, [pc, #572]	@ (800f714 <_strtod_l+0x28c>)
 800f4d6:	9301      	str	r3, [sp, #4]
 800f4d8:	ab1a      	add	r3, sp, #104	@ 0x68
 800f4da:	9300      	str	r3, [sp, #0]
 800f4dc:	9805      	ldr	r0, [sp, #20]
 800f4de:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f4e0:	a919      	add	r1, sp, #100	@ 0x64
 800f4e2:	f001 facb 	bl	8010a7c <__gethex>
 800f4e6:	f010 060f 	ands.w	r6, r0, #15
 800f4ea:	4604      	mov	r4, r0
 800f4ec:	d005      	beq.n	800f4fa <_strtod_l+0x72>
 800f4ee:	2e06      	cmp	r6, #6
 800f4f0:	d126      	bne.n	800f540 <_strtod_l+0xb8>
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	3501      	adds	r5, #1
 800f4f6:	9519      	str	r5, [sp, #100]	@ 0x64
 800f4f8:	930e      	str	r3, [sp, #56]	@ 0x38
 800f4fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	f040 8582 	bne.w	8010006 <_strtod_l+0xb7e>
 800f502:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f504:	b1bb      	cbz	r3, 800f536 <_strtod_l+0xae>
 800f506:	4650      	mov	r0, sl
 800f508:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800f50c:	b01f      	add	sp, #124	@ 0x7c
 800f50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f512:	2920      	cmp	r1, #32
 800f514:	d1d0      	bne.n	800f4b8 <_strtod_l+0x30>
 800f516:	3201      	adds	r2, #1
 800f518:	e7c3      	b.n	800f4a2 <_strtod_l+0x1a>
 800f51a:	292d      	cmp	r1, #45	@ 0x2d
 800f51c:	d1cc      	bne.n	800f4b8 <_strtod_l+0x30>
 800f51e:	2101      	movs	r1, #1
 800f520:	910e      	str	r1, [sp, #56]	@ 0x38
 800f522:	1c51      	adds	r1, r2, #1
 800f524:	9119      	str	r1, [sp, #100]	@ 0x64
 800f526:	7852      	ldrb	r2, [r2, #1]
 800f528:	2a00      	cmp	r2, #0
 800f52a:	d1c7      	bne.n	800f4bc <_strtod_l+0x34>
 800f52c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f52e:	9419      	str	r4, [sp, #100]	@ 0x64
 800f530:	2b00      	cmp	r3, #0
 800f532:	f040 8566 	bne.w	8010002 <_strtod_l+0xb7a>
 800f536:	4650      	mov	r0, sl
 800f538:	4659      	mov	r1, fp
 800f53a:	e7e7      	b.n	800f50c <_strtod_l+0x84>
 800f53c:	2100      	movs	r1, #0
 800f53e:	e7ef      	b.n	800f520 <_strtod_l+0x98>
 800f540:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f542:	b13a      	cbz	r2, 800f554 <_strtod_l+0xcc>
 800f544:	2135      	movs	r1, #53	@ 0x35
 800f546:	a81c      	add	r0, sp, #112	@ 0x70
 800f548:	f7ff ff38 	bl	800f3bc <__copybits>
 800f54c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f54e:	9805      	ldr	r0, [sp, #20]
 800f550:	f7ff fb18 	bl	800eb84 <_Bfree>
 800f554:	3e01      	subs	r6, #1
 800f556:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f558:	2e04      	cmp	r6, #4
 800f55a:	d806      	bhi.n	800f56a <_strtod_l+0xe2>
 800f55c:	e8df f006 	tbb	[pc, r6]
 800f560:	201d0314 	.word	0x201d0314
 800f564:	14          	.byte	0x14
 800f565:	00          	.byte	0x00
 800f566:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f56a:	05e1      	lsls	r1, r4, #23
 800f56c:	bf48      	it	mi
 800f56e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f572:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f576:	0d1b      	lsrs	r3, r3, #20
 800f578:	051b      	lsls	r3, r3, #20
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d1bd      	bne.n	800f4fa <_strtod_l+0x72>
 800f57e:	f7fe fb19 	bl	800dbb4 <__errno>
 800f582:	2322      	movs	r3, #34	@ 0x22
 800f584:	6003      	str	r3, [r0, #0]
 800f586:	e7b8      	b.n	800f4fa <_strtod_l+0x72>
 800f588:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f58c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f590:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f594:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f598:	e7e7      	b.n	800f56a <_strtod_l+0xe2>
 800f59a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f718 <_strtod_l+0x290>
 800f59e:	e7e4      	b.n	800f56a <_strtod_l+0xe2>
 800f5a0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f5a4:	f04f 3aff 	mov.w	sl, #4294967295
 800f5a8:	e7df      	b.n	800f56a <_strtod_l+0xe2>
 800f5aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f5ac:	1c5a      	adds	r2, r3, #1
 800f5ae:	9219      	str	r2, [sp, #100]	@ 0x64
 800f5b0:	785b      	ldrb	r3, [r3, #1]
 800f5b2:	2b30      	cmp	r3, #48	@ 0x30
 800f5b4:	d0f9      	beq.n	800f5aa <_strtod_l+0x122>
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d09f      	beq.n	800f4fa <_strtod_l+0x72>
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	2700      	movs	r7, #0
 800f5be:	220a      	movs	r2, #10
 800f5c0:	46b9      	mov	r9, r7
 800f5c2:	9308      	str	r3, [sp, #32]
 800f5c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f5c6:	970b      	str	r7, [sp, #44]	@ 0x2c
 800f5c8:	930c      	str	r3, [sp, #48]	@ 0x30
 800f5ca:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f5cc:	7805      	ldrb	r5, [r0, #0]
 800f5ce:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f5d2:	b2d9      	uxtb	r1, r3
 800f5d4:	2909      	cmp	r1, #9
 800f5d6:	d928      	bls.n	800f62a <_strtod_l+0x1a2>
 800f5d8:	2201      	movs	r2, #1
 800f5da:	4950      	ldr	r1, [pc, #320]	@ (800f71c <_strtod_l+0x294>)
 800f5dc:	f001 f969 	bl	80108b2 <strncmp>
 800f5e0:	2800      	cmp	r0, #0
 800f5e2:	d032      	beq.n	800f64a <_strtod_l+0x1c2>
 800f5e4:	2000      	movs	r0, #0
 800f5e6:	462a      	mov	r2, r5
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	464d      	mov	r5, r9
 800f5ec:	900a      	str	r0, [sp, #40]	@ 0x28
 800f5ee:	2a65      	cmp	r2, #101	@ 0x65
 800f5f0:	d001      	beq.n	800f5f6 <_strtod_l+0x16e>
 800f5f2:	2a45      	cmp	r2, #69	@ 0x45
 800f5f4:	d114      	bne.n	800f620 <_strtod_l+0x198>
 800f5f6:	b91d      	cbnz	r5, 800f600 <_strtod_l+0x178>
 800f5f8:	9a08      	ldr	r2, [sp, #32]
 800f5fa:	4302      	orrs	r2, r0
 800f5fc:	d096      	beq.n	800f52c <_strtod_l+0xa4>
 800f5fe:	2500      	movs	r5, #0
 800f600:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f602:	1c62      	adds	r2, r4, #1
 800f604:	9219      	str	r2, [sp, #100]	@ 0x64
 800f606:	7862      	ldrb	r2, [r4, #1]
 800f608:	2a2b      	cmp	r2, #43	@ 0x2b
 800f60a:	d07a      	beq.n	800f702 <_strtod_l+0x27a>
 800f60c:	2a2d      	cmp	r2, #45	@ 0x2d
 800f60e:	d07e      	beq.n	800f70e <_strtod_l+0x286>
 800f610:	f04f 0c00 	mov.w	ip, #0
 800f614:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f618:	2909      	cmp	r1, #9
 800f61a:	f240 8085 	bls.w	800f728 <_strtod_l+0x2a0>
 800f61e:	9419      	str	r4, [sp, #100]	@ 0x64
 800f620:	f04f 0800 	mov.w	r8, #0
 800f624:	e0a5      	b.n	800f772 <_strtod_l+0x2ea>
 800f626:	2300      	movs	r3, #0
 800f628:	e7c8      	b.n	800f5bc <_strtod_l+0x134>
 800f62a:	f1b9 0f08 	cmp.w	r9, #8
 800f62e:	bfd8      	it	le
 800f630:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800f632:	f100 0001 	add.w	r0, r0, #1
 800f636:	bfd6      	itet	le
 800f638:	fb02 3301 	mlale	r3, r2, r1, r3
 800f63c:	fb02 3707 	mlagt	r7, r2, r7, r3
 800f640:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800f642:	f109 0901 	add.w	r9, r9, #1
 800f646:	9019      	str	r0, [sp, #100]	@ 0x64
 800f648:	e7bf      	b.n	800f5ca <_strtod_l+0x142>
 800f64a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f64c:	1c5a      	adds	r2, r3, #1
 800f64e:	9219      	str	r2, [sp, #100]	@ 0x64
 800f650:	785a      	ldrb	r2, [r3, #1]
 800f652:	f1b9 0f00 	cmp.w	r9, #0
 800f656:	d03b      	beq.n	800f6d0 <_strtod_l+0x248>
 800f658:	464d      	mov	r5, r9
 800f65a:	900a      	str	r0, [sp, #40]	@ 0x28
 800f65c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f660:	2b09      	cmp	r3, #9
 800f662:	d912      	bls.n	800f68a <_strtod_l+0x202>
 800f664:	2301      	movs	r3, #1
 800f666:	e7c2      	b.n	800f5ee <_strtod_l+0x166>
 800f668:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f66a:	3001      	adds	r0, #1
 800f66c:	1c5a      	adds	r2, r3, #1
 800f66e:	9219      	str	r2, [sp, #100]	@ 0x64
 800f670:	785a      	ldrb	r2, [r3, #1]
 800f672:	2a30      	cmp	r2, #48	@ 0x30
 800f674:	d0f8      	beq.n	800f668 <_strtod_l+0x1e0>
 800f676:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f67a:	2b08      	cmp	r3, #8
 800f67c:	f200 84c8 	bhi.w	8010010 <_strtod_l+0xb88>
 800f680:	900a      	str	r0, [sp, #40]	@ 0x28
 800f682:	2000      	movs	r0, #0
 800f684:	4605      	mov	r5, r0
 800f686:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f688:	930c      	str	r3, [sp, #48]	@ 0x30
 800f68a:	3a30      	subs	r2, #48	@ 0x30
 800f68c:	f100 0301 	add.w	r3, r0, #1
 800f690:	d018      	beq.n	800f6c4 <_strtod_l+0x23c>
 800f692:	462e      	mov	r6, r5
 800f694:	f04f 0e0a 	mov.w	lr, #10
 800f698:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f69a:	4419      	add	r1, r3
 800f69c:	910a      	str	r1, [sp, #40]	@ 0x28
 800f69e:	1c71      	adds	r1, r6, #1
 800f6a0:	eba1 0c05 	sub.w	ip, r1, r5
 800f6a4:	4563      	cmp	r3, ip
 800f6a6:	dc15      	bgt.n	800f6d4 <_strtod_l+0x24c>
 800f6a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800f6ac:	182b      	adds	r3, r5, r0
 800f6ae:	2b08      	cmp	r3, #8
 800f6b0:	f105 0501 	add.w	r5, r5, #1
 800f6b4:	4405      	add	r5, r0
 800f6b6:	dc1a      	bgt.n	800f6ee <_strtod_l+0x266>
 800f6b8:	230a      	movs	r3, #10
 800f6ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f6bc:	fb03 2301 	mla	r3, r3, r1, r2
 800f6c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	1c51      	adds	r1, r2, #1
 800f6ca:	9119      	str	r1, [sp, #100]	@ 0x64
 800f6cc:	7852      	ldrb	r2, [r2, #1]
 800f6ce:	e7c5      	b.n	800f65c <_strtod_l+0x1d4>
 800f6d0:	4648      	mov	r0, r9
 800f6d2:	e7ce      	b.n	800f672 <_strtod_l+0x1ea>
 800f6d4:	2e08      	cmp	r6, #8
 800f6d6:	dc05      	bgt.n	800f6e4 <_strtod_l+0x25c>
 800f6d8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f6da:	fb0e f606 	mul.w	r6, lr, r6
 800f6de:	960b      	str	r6, [sp, #44]	@ 0x2c
 800f6e0:	460e      	mov	r6, r1
 800f6e2:	e7dc      	b.n	800f69e <_strtod_l+0x216>
 800f6e4:	2910      	cmp	r1, #16
 800f6e6:	bfd8      	it	le
 800f6e8:	fb0e f707 	mulle.w	r7, lr, r7
 800f6ec:	e7f8      	b.n	800f6e0 <_strtod_l+0x258>
 800f6ee:	2b0f      	cmp	r3, #15
 800f6f0:	bfdc      	itt	le
 800f6f2:	230a      	movle	r3, #10
 800f6f4:	fb03 2707 	mlale	r7, r3, r7, r2
 800f6f8:	e7e3      	b.n	800f6c2 <_strtod_l+0x23a>
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6fe:	2301      	movs	r3, #1
 800f700:	e77a      	b.n	800f5f8 <_strtod_l+0x170>
 800f702:	f04f 0c00 	mov.w	ip, #0
 800f706:	1ca2      	adds	r2, r4, #2
 800f708:	9219      	str	r2, [sp, #100]	@ 0x64
 800f70a:	78a2      	ldrb	r2, [r4, #2]
 800f70c:	e782      	b.n	800f614 <_strtod_l+0x18c>
 800f70e:	f04f 0c01 	mov.w	ip, #1
 800f712:	e7f8      	b.n	800f706 <_strtod_l+0x27e>
 800f714:	080130dc 	.word	0x080130dc
 800f718:	7ff00000 	.word	0x7ff00000
 800f71c:	08012f13 	.word	0x08012f13
 800f720:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f722:	1c51      	adds	r1, r2, #1
 800f724:	9119      	str	r1, [sp, #100]	@ 0x64
 800f726:	7852      	ldrb	r2, [r2, #1]
 800f728:	2a30      	cmp	r2, #48	@ 0x30
 800f72a:	d0f9      	beq.n	800f720 <_strtod_l+0x298>
 800f72c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f730:	2908      	cmp	r1, #8
 800f732:	f63f af75 	bhi.w	800f620 <_strtod_l+0x198>
 800f736:	f04f 080a 	mov.w	r8, #10
 800f73a:	3a30      	subs	r2, #48	@ 0x30
 800f73c:	9209      	str	r2, [sp, #36]	@ 0x24
 800f73e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f740:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f742:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f744:	1c56      	adds	r6, r2, #1
 800f746:	9619      	str	r6, [sp, #100]	@ 0x64
 800f748:	7852      	ldrb	r2, [r2, #1]
 800f74a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f74e:	f1be 0f09 	cmp.w	lr, #9
 800f752:	d939      	bls.n	800f7c8 <_strtod_l+0x340>
 800f754:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f756:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f75a:	1a76      	subs	r6, r6, r1
 800f75c:	2e08      	cmp	r6, #8
 800f75e:	dc03      	bgt.n	800f768 <_strtod_l+0x2e0>
 800f760:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f762:	4588      	cmp	r8, r1
 800f764:	bfa8      	it	ge
 800f766:	4688      	movge	r8, r1
 800f768:	f1bc 0f00 	cmp.w	ip, #0
 800f76c:	d001      	beq.n	800f772 <_strtod_l+0x2ea>
 800f76e:	f1c8 0800 	rsb	r8, r8, #0
 800f772:	2d00      	cmp	r5, #0
 800f774:	d14e      	bne.n	800f814 <_strtod_l+0x38c>
 800f776:	9908      	ldr	r1, [sp, #32]
 800f778:	4308      	orrs	r0, r1
 800f77a:	f47f aebe 	bne.w	800f4fa <_strtod_l+0x72>
 800f77e:	2b00      	cmp	r3, #0
 800f780:	f47f aed4 	bne.w	800f52c <_strtod_l+0xa4>
 800f784:	2a69      	cmp	r2, #105	@ 0x69
 800f786:	d028      	beq.n	800f7da <_strtod_l+0x352>
 800f788:	dc25      	bgt.n	800f7d6 <_strtod_l+0x34e>
 800f78a:	2a49      	cmp	r2, #73	@ 0x49
 800f78c:	d025      	beq.n	800f7da <_strtod_l+0x352>
 800f78e:	2a4e      	cmp	r2, #78	@ 0x4e
 800f790:	f47f aecc 	bne.w	800f52c <_strtod_l+0xa4>
 800f794:	4999      	ldr	r1, [pc, #612]	@ (800f9fc <_strtod_l+0x574>)
 800f796:	a819      	add	r0, sp, #100	@ 0x64
 800f798:	f001 fb92 	bl	8010ec0 <__match>
 800f79c:	2800      	cmp	r0, #0
 800f79e:	f43f aec5 	beq.w	800f52c <_strtod_l+0xa4>
 800f7a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f7a4:	781b      	ldrb	r3, [r3, #0]
 800f7a6:	2b28      	cmp	r3, #40	@ 0x28
 800f7a8:	d12e      	bne.n	800f808 <_strtod_l+0x380>
 800f7aa:	4995      	ldr	r1, [pc, #596]	@ (800fa00 <_strtod_l+0x578>)
 800f7ac:	aa1c      	add	r2, sp, #112	@ 0x70
 800f7ae:	a819      	add	r0, sp, #100	@ 0x64
 800f7b0:	f001 fb9a 	bl	8010ee8 <__hexnan>
 800f7b4:	2805      	cmp	r0, #5
 800f7b6:	d127      	bne.n	800f808 <_strtod_l+0x380>
 800f7b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f7ba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f7be:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f7c2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f7c6:	e698      	b.n	800f4fa <_strtod_l+0x72>
 800f7c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f7ca:	fb08 2101 	mla	r1, r8, r1, r2
 800f7ce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f7d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800f7d4:	e7b5      	b.n	800f742 <_strtod_l+0x2ba>
 800f7d6:	2a6e      	cmp	r2, #110	@ 0x6e
 800f7d8:	e7da      	b.n	800f790 <_strtod_l+0x308>
 800f7da:	498a      	ldr	r1, [pc, #552]	@ (800fa04 <_strtod_l+0x57c>)
 800f7dc:	a819      	add	r0, sp, #100	@ 0x64
 800f7de:	f001 fb6f 	bl	8010ec0 <__match>
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	f43f aea2 	beq.w	800f52c <_strtod_l+0xa4>
 800f7e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f7ea:	4987      	ldr	r1, [pc, #540]	@ (800fa08 <_strtod_l+0x580>)
 800f7ec:	3b01      	subs	r3, #1
 800f7ee:	a819      	add	r0, sp, #100	@ 0x64
 800f7f0:	9319      	str	r3, [sp, #100]	@ 0x64
 800f7f2:	f001 fb65 	bl	8010ec0 <__match>
 800f7f6:	b910      	cbnz	r0, 800f7fe <_strtod_l+0x376>
 800f7f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f7fa:	3301      	adds	r3, #1
 800f7fc:	9319      	str	r3, [sp, #100]	@ 0x64
 800f7fe:	f04f 0a00 	mov.w	sl, #0
 800f802:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800fa0c <_strtod_l+0x584>
 800f806:	e678      	b.n	800f4fa <_strtod_l+0x72>
 800f808:	4881      	ldr	r0, [pc, #516]	@ (800fa10 <_strtod_l+0x588>)
 800f80a:	f001 f897 	bl	801093c <nan>
 800f80e:	4682      	mov	sl, r0
 800f810:	468b      	mov	fp, r1
 800f812:	e672      	b.n	800f4fa <_strtod_l+0x72>
 800f814:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f816:	f1b9 0f00 	cmp.w	r9, #0
 800f81a:	bf08      	it	eq
 800f81c:	46a9      	moveq	r9, r5
 800f81e:	eba8 0303 	sub.w	r3, r8, r3
 800f822:	2d10      	cmp	r5, #16
 800f824:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f826:	462c      	mov	r4, r5
 800f828:	9309      	str	r3, [sp, #36]	@ 0x24
 800f82a:	bfa8      	it	ge
 800f82c:	2410      	movge	r4, #16
 800f82e:	f7f0 fe49 	bl	80004c4 <__aeabi_ui2d>
 800f832:	2d09      	cmp	r5, #9
 800f834:	4682      	mov	sl, r0
 800f836:	468b      	mov	fp, r1
 800f838:	dc11      	bgt.n	800f85e <_strtod_l+0x3d6>
 800f83a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	f43f ae5c 	beq.w	800f4fa <_strtod_l+0x72>
 800f842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f844:	dd76      	ble.n	800f934 <_strtod_l+0x4ac>
 800f846:	2b16      	cmp	r3, #22
 800f848:	dc5d      	bgt.n	800f906 <_strtod_l+0x47e>
 800f84a:	4972      	ldr	r1, [pc, #456]	@ (800fa14 <_strtod_l+0x58c>)
 800f84c:	4652      	mov	r2, sl
 800f84e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f852:	465b      	mov	r3, fp
 800f854:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f858:	f7f0 feae 	bl	80005b8 <__aeabi_dmul>
 800f85c:	e7d7      	b.n	800f80e <_strtod_l+0x386>
 800f85e:	4b6d      	ldr	r3, [pc, #436]	@ (800fa14 <_strtod_l+0x58c>)
 800f860:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f864:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f868:	f7f0 fea6 	bl	80005b8 <__aeabi_dmul>
 800f86c:	4682      	mov	sl, r0
 800f86e:	4638      	mov	r0, r7
 800f870:	468b      	mov	fp, r1
 800f872:	f7f0 fe27 	bl	80004c4 <__aeabi_ui2d>
 800f876:	4602      	mov	r2, r0
 800f878:	460b      	mov	r3, r1
 800f87a:	4650      	mov	r0, sl
 800f87c:	4659      	mov	r1, fp
 800f87e:	f7f0 fce5 	bl	800024c <__adddf3>
 800f882:	2d0f      	cmp	r5, #15
 800f884:	4682      	mov	sl, r0
 800f886:	468b      	mov	fp, r1
 800f888:	ddd7      	ble.n	800f83a <_strtod_l+0x3b2>
 800f88a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f88c:	1b2c      	subs	r4, r5, r4
 800f88e:	441c      	add	r4, r3
 800f890:	2c00      	cmp	r4, #0
 800f892:	f340 8093 	ble.w	800f9bc <_strtod_l+0x534>
 800f896:	f014 030f 	ands.w	r3, r4, #15
 800f89a:	d00a      	beq.n	800f8b2 <_strtod_l+0x42a>
 800f89c:	495d      	ldr	r1, [pc, #372]	@ (800fa14 <_strtod_l+0x58c>)
 800f89e:	4652      	mov	r2, sl
 800f8a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f8a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8a8:	465b      	mov	r3, fp
 800f8aa:	f7f0 fe85 	bl	80005b8 <__aeabi_dmul>
 800f8ae:	4682      	mov	sl, r0
 800f8b0:	468b      	mov	fp, r1
 800f8b2:	f034 040f 	bics.w	r4, r4, #15
 800f8b6:	d073      	beq.n	800f9a0 <_strtod_l+0x518>
 800f8b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f8bc:	dd49      	ble.n	800f952 <_strtod_l+0x4ca>
 800f8be:	2400      	movs	r4, #0
 800f8c0:	46a0      	mov	r8, r4
 800f8c2:	46a1      	mov	r9, r4
 800f8c4:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f8c6:	2322      	movs	r3, #34	@ 0x22
 800f8c8:	f04f 0a00 	mov.w	sl, #0
 800f8cc:	9a05      	ldr	r2, [sp, #20]
 800f8ce:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800fa0c <_strtod_l+0x584>
 800f8d2:	6013      	str	r3, [r2, #0]
 800f8d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	f43f ae0f 	beq.w	800f4fa <_strtod_l+0x72>
 800f8dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f8de:	9805      	ldr	r0, [sp, #20]
 800f8e0:	f7ff f950 	bl	800eb84 <_Bfree>
 800f8e4:	4649      	mov	r1, r9
 800f8e6:	9805      	ldr	r0, [sp, #20]
 800f8e8:	f7ff f94c 	bl	800eb84 <_Bfree>
 800f8ec:	4641      	mov	r1, r8
 800f8ee:	9805      	ldr	r0, [sp, #20]
 800f8f0:	f7ff f948 	bl	800eb84 <_Bfree>
 800f8f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f8f6:	9805      	ldr	r0, [sp, #20]
 800f8f8:	f7ff f944 	bl	800eb84 <_Bfree>
 800f8fc:	4621      	mov	r1, r4
 800f8fe:	9805      	ldr	r0, [sp, #20]
 800f900:	f7ff f940 	bl	800eb84 <_Bfree>
 800f904:	e5f9      	b.n	800f4fa <_strtod_l+0x72>
 800f906:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f908:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f90c:	4293      	cmp	r3, r2
 800f90e:	dbbc      	blt.n	800f88a <_strtod_l+0x402>
 800f910:	4c40      	ldr	r4, [pc, #256]	@ (800fa14 <_strtod_l+0x58c>)
 800f912:	f1c5 050f 	rsb	r5, r5, #15
 800f916:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f91a:	4652      	mov	r2, sl
 800f91c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f920:	465b      	mov	r3, fp
 800f922:	f7f0 fe49 	bl	80005b8 <__aeabi_dmul>
 800f926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f928:	1b5d      	subs	r5, r3, r5
 800f92a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f92e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f932:	e791      	b.n	800f858 <_strtod_l+0x3d0>
 800f934:	3316      	adds	r3, #22
 800f936:	dba8      	blt.n	800f88a <_strtod_l+0x402>
 800f938:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f93a:	4650      	mov	r0, sl
 800f93c:	eba3 0808 	sub.w	r8, r3, r8
 800f940:	4b34      	ldr	r3, [pc, #208]	@ (800fa14 <_strtod_l+0x58c>)
 800f942:	4659      	mov	r1, fp
 800f944:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f948:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f94c:	f7f0 ff5e 	bl	800080c <__aeabi_ddiv>
 800f950:	e75d      	b.n	800f80e <_strtod_l+0x386>
 800f952:	2300      	movs	r3, #0
 800f954:	4650      	mov	r0, sl
 800f956:	4659      	mov	r1, fp
 800f958:	461e      	mov	r6, r3
 800f95a:	4f2f      	ldr	r7, [pc, #188]	@ (800fa18 <_strtod_l+0x590>)
 800f95c:	1124      	asrs	r4, r4, #4
 800f95e:	2c01      	cmp	r4, #1
 800f960:	dc21      	bgt.n	800f9a6 <_strtod_l+0x51e>
 800f962:	b10b      	cbz	r3, 800f968 <_strtod_l+0x4e0>
 800f964:	4682      	mov	sl, r0
 800f966:	468b      	mov	fp, r1
 800f968:	492b      	ldr	r1, [pc, #172]	@ (800fa18 <_strtod_l+0x590>)
 800f96a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f96e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f972:	4652      	mov	r2, sl
 800f974:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f978:	465b      	mov	r3, fp
 800f97a:	f7f0 fe1d 	bl	80005b8 <__aeabi_dmul>
 800f97e:	4b23      	ldr	r3, [pc, #140]	@ (800fa0c <_strtod_l+0x584>)
 800f980:	460a      	mov	r2, r1
 800f982:	400b      	ands	r3, r1
 800f984:	4925      	ldr	r1, [pc, #148]	@ (800fa1c <_strtod_l+0x594>)
 800f986:	4682      	mov	sl, r0
 800f988:	428b      	cmp	r3, r1
 800f98a:	d898      	bhi.n	800f8be <_strtod_l+0x436>
 800f98c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f990:	428b      	cmp	r3, r1
 800f992:	bf86      	itte	hi
 800f994:	f04f 3aff 	movhi.w	sl, #4294967295
 800f998:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800fa20 <_strtod_l+0x598>
 800f99c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	9308      	str	r3, [sp, #32]
 800f9a4:	e076      	b.n	800fa94 <_strtod_l+0x60c>
 800f9a6:	07e2      	lsls	r2, r4, #31
 800f9a8:	d504      	bpl.n	800f9b4 <_strtod_l+0x52c>
 800f9aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9ae:	f7f0 fe03 	bl	80005b8 <__aeabi_dmul>
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	3601      	adds	r6, #1
 800f9b6:	1064      	asrs	r4, r4, #1
 800f9b8:	3708      	adds	r7, #8
 800f9ba:	e7d0      	b.n	800f95e <_strtod_l+0x4d6>
 800f9bc:	d0f0      	beq.n	800f9a0 <_strtod_l+0x518>
 800f9be:	4264      	negs	r4, r4
 800f9c0:	f014 020f 	ands.w	r2, r4, #15
 800f9c4:	d00a      	beq.n	800f9dc <_strtod_l+0x554>
 800f9c6:	4b13      	ldr	r3, [pc, #76]	@ (800fa14 <_strtod_l+0x58c>)
 800f9c8:	4650      	mov	r0, sl
 800f9ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f9ce:	4659      	mov	r1, fp
 800f9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d4:	f7f0 ff1a 	bl	800080c <__aeabi_ddiv>
 800f9d8:	4682      	mov	sl, r0
 800f9da:	468b      	mov	fp, r1
 800f9dc:	1124      	asrs	r4, r4, #4
 800f9de:	d0df      	beq.n	800f9a0 <_strtod_l+0x518>
 800f9e0:	2c1f      	cmp	r4, #31
 800f9e2:	dd1f      	ble.n	800fa24 <_strtod_l+0x59c>
 800f9e4:	2400      	movs	r4, #0
 800f9e6:	46a0      	mov	r8, r4
 800f9e8:	46a1      	mov	r9, r4
 800f9ea:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f9ec:	2322      	movs	r3, #34	@ 0x22
 800f9ee:	9a05      	ldr	r2, [sp, #20]
 800f9f0:	f04f 0a00 	mov.w	sl, #0
 800f9f4:	f04f 0b00 	mov.w	fp, #0
 800f9f8:	6013      	str	r3, [r2, #0]
 800f9fa:	e76b      	b.n	800f8d4 <_strtod_l+0x44c>
 800f9fc:	08012e01 	.word	0x08012e01
 800fa00:	080130c8 	.word	0x080130c8
 800fa04:	08012df9 	.word	0x08012df9
 800fa08:	08012e30 	.word	0x08012e30
 800fa0c:	7ff00000 	.word	0x7ff00000
 800fa10:	08012f69 	.word	0x08012f69
 800fa14:	08013000 	.word	0x08013000
 800fa18:	08012fd8 	.word	0x08012fd8
 800fa1c:	7ca00000 	.word	0x7ca00000
 800fa20:	7fefffff 	.word	0x7fefffff
 800fa24:	f014 0310 	ands.w	r3, r4, #16
 800fa28:	bf18      	it	ne
 800fa2a:	236a      	movne	r3, #106	@ 0x6a
 800fa2c:	4650      	mov	r0, sl
 800fa2e:	9308      	str	r3, [sp, #32]
 800fa30:	4659      	mov	r1, fp
 800fa32:	2300      	movs	r3, #0
 800fa34:	4e77      	ldr	r6, [pc, #476]	@ (800fc14 <_strtod_l+0x78c>)
 800fa36:	07e7      	lsls	r7, r4, #31
 800fa38:	d504      	bpl.n	800fa44 <_strtod_l+0x5bc>
 800fa3a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fa3e:	f7f0 fdbb 	bl	80005b8 <__aeabi_dmul>
 800fa42:	2301      	movs	r3, #1
 800fa44:	1064      	asrs	r4, r4, #1
 800fa46:	f106 0608 	add.w	r6, r6, #8
 800fa4a:	d1f4      	bne.n	800fa36 <_strtod_l+0x5ae>
 800fa4c:	b10b      	cbz	r3, 800fa52 <_strtod_l+0x5ca>
 800fa4e:	4682      	mov	sl, r0
 800fa50:	468b      	mov	fp, r1
 800fa52:	9b08      	ldr	r3, [sp, #32]
 800fa54:	b1b3      	cbz	r3, 800fa84 <_strtod_l+0x5fc>
 800fa56:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fa5a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	4659      	mov	r1, fp
 800fa62:	dd0f      	ble.n	800fa84 <_strtod_l+0x5fc>
 800fa64:	2b1f      	cmp	r3, #31
 800fa66:	dd58      	ble.n	800fb1a <_strtod_l+0x692>
 800fa68:	2b34      	cmp	r3, #52	@ 0x34
 800fa6a:	bfd8      	it	le
 800fa6c:	f04f 33ff 	movle.w	r3, #4294967295
 800fa70:	f04f 0a00 	mov.w	sl, #0
 800fa74:	bfcf      	iteee	gt
 800fa76:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800fa7a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800fa7e:	4093      	lslle	r3, r2
 800fa80:	ea03 0b01 	andle.w	fp, r3, r1
 800fa84:	2200      	movs	r2, #0
 800fa86:	2300      	movs	r3, #0
 800fa88:	4650      	mov	r0, sl
 800fa8a:	4659      	mov	r1, fp
 800fa8c:	f7f0 fffc 	bl	8000a88 <__aeabi_dcmpeq>
 800fa90:	2800      	cmp	r0, #0
 800fa92:	d1a7      	bne.n	800f9e4 <_strtod_l+0x55c>
 800fa94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa96:	464a      	mov	r2, r9
 800fa98:	9300      	str	r3, [sp, #0]
 800fa9a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fa9c:	462b      	mov	r3, r5
 800fa9e:	9805      	ldr	r0, [sp, #20]
 800faa0:	f7ff f8d8 	bl	800ec54 <__s2b>
 800faa4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800faa6:	2800      	cmp	r0, #0
 800faa8:	f43f af09 	beq.w	800f8be <_strtod_l+0x436>
 800faac:	2400      	movs	r4, #0
 800faae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fab0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fab2:	2a00      	cmp	r2, #0
 800fab4:	eba3 0308 	sub.w	r3, r3, r8
 800fab8:	bfa8      	it	ge
 800faba:	2300      	movge	r3, #0
 800fabc:	46a0      	mov	r8, r4
 800fabe:	9312      	str	r3, [sp, #72]	@ 0x48
 800fac0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800fac4:	9316      	str	r3, [sp, #88]	@ 0x58
 800fac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fac8:	9805      	ldr	r0, [sp, #20]
 800faca:	6859      	ldr	r1, [r3, #4]
 800facc:	f7ff f81a 	bl	800eb04 <_Balloc>
 800fad0:	4681      	mov	r9, r0
 800fad2:	2800      	cmp	r0, #0
 800fad4:	f43f aef7 	beq.w	800f8c6 <_strtod_l+0x43e>
 800fad8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fada:	300c      	adds	r0, #12
 800fadc:	691a      	ldr	r2, [r3, #16]
 800fade:	f103 010c 	add.w	r1, r3, #12
 800fae2:	3202      	adds	r2, #2
 800fae4:	0092      	lsls	r2, r2, #2
 800fae6:	f7fe f8a0 	bl	800dc2a <memcpy>
 800faea:	ab1c      	add	r3, sp, #112	@ 0x70
 800faec:	9301      	str	r3, [sp, #4]
 800faee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800faf0:	9300      	str	r3, [sp, #0]
 800faf2:	4652      	mov	r2, sl
 800faf4:	465b      	mov	r3, fp
 800faf6:	9805      	ldr	r0, [sp, #20]
 800faf8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800fafc:	f7ff fbd6 	bl	800f2ac <__d2b>
 800fb00:	901a      	str	r0, [sp, #104]	@ 0x68
 800fb02:	2800      	cmp	r0, #0
 800fb04:	f43f aedf 	beq.w	800f8c6 <_strtod_l+0x43e>
 800fb08:	2101      	movs	r1, #1
 800fb0a:	9805      	ldr	r0, [sp, #20]
 800fb0c:	f7ff f938 	bl	800ed80 <__i2b>
 800fb10:	4680      	mov	r8, r0
 800fb12:	b948      	cbnz	r0, 800fb28 <_strtod_l+0x6a0>
 800fb14:	f04f 0800 	mov.w	r8, #0
 800fb18:	e6d5      	b.n	800f8c6 <_strtod_l+0x43e>
 800fb1a:	f04f 32ff 	mov.w	r2, #4294967295
 800fb1e:	fa02 f303 	lsl.w	r3, r2, r3
 800fb22:	ea03 0a0a 	and.w	sl, r3, sl
 800fb26:	e7ad      	b.n	800fa84 <_strtod_l+0x5fc>
 800fb28:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800fb2a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fb2c:	2d00      	cmp	r5, #0
 800fb2e:	bfab      	itete	ge
 800fb30:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800fb32:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800fb34:	18ef      	addge	r7, r5, r3
 800fb36:	1b5e      	sublt	r6, r3, r5
 800fb38:	9b08      	ldr	r3, [sp, #32]
 800fb3a:	bfa8      	it	ge
 800fb3c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800fb3e:	eba5 0503 	sub.w	r5, r5, r3
 800fb42:	4415      	add	r5, r2
 800fb44:	4b34      	ldr	r3, [pc, #208]	@ (800fc18 <_strtod_l+0x790>)
 800fb46:	f105 35ff 	add.w	r5, r5, #4294967295
 800fb4a:	bfb8      	it	lt
 800fb4c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800fb4e:	429d      	cmp	r5, r3
 800fb50:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fb54:	da50      	bge.n	800fbf8 <_strtod_l+0x770>
 800fb56:	1b5b      	subs	r3, r3, r5
 800fb58:	2b1f      	cmp	r3, #31
 800fb5a:	f04f 0101 	mov.w	r1, #1
 800fb5e:	eba2 0203 	sub.w	r2, r2, r3
 800fb62:	dc3d      	bgt.n	800fbe0 <_strtod_l+0x758>
 800fb64:	fa01 f303 	lsl.w	r3, r1, r3
 800fb68:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	9310      	str	r3, [sp, #64]	@ 0x40
 800fb6e:	18bd      	adds	r5, r7, r2
 800fb70:	9b08      	ldr	r3, [sp, #32]
 800fb72:	42af      	cmp	r7, r5
 800fb74:	4416      	add	r6, r2
 800fb76:	441e      	add	r6, r3
 800fb78:	463b      	mov	r3, r7
 800fb7a:	bfa8      	it	ge
 800fb7c:	462b      	movge	r3, r5
 800fb7e:	42b3      	cmp	r3, r6
 800fb80:	bfa8      	it	ge
 800fb82:	4633      	movge	r3, r6
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	bfc2      	ittt	gt
 800fb88:	1aed      	subgt	r5, r5, r3
 800fb8a:	1af6      	subgt	r6, r6, r3
 800fb8c:	1aff      	subgt	r7, r7, r3
 800fb8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	dd16      	ble.n	800fbc2 <_strtod_l+0x73a>
 800fb94:	4641      	mov	r1, r8
 800fb96:	461a      	mov	r2, r3
 800fb98:	9805      	ldr	r0, [sp, #20]
 800fb9a:	f7ff f9a9 	bl	800eef0 <__pow5mult>
 800fb9e:	4680      	mov	r8, r0
 800fba0:	2800      	cmp	r0, #0
 800fba2:	d0b7      	beq.n	800fb14 <_strtod_l+0x68c>
 800fba4:	4601      	mov	r1, r0
 800fba6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fba8:	9805      	ldr	r0, [sp, #20]
 800fbaa:	f7ff f8ff 	bl	800edac <__multiply>
 800fbae:	900a      	str	r0, [sp, #40]	@ 0x28
 800fbb0:	2800      	cmp	r0, #0
 800fbb2:	f43f ae88 	beq.w	800f8c6 <_strtod_l+0x43e>
 800fbb6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fbb8:	9805      	ldr	r0, [sp, #20]
 800fbba:	f7fe ffe3 	bl	800eb84 <_Bfree>
 800fbbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbc0:	931a      	str	r3, [sp, #104]	@ 0x68
 800fbc2:	2d00      	cmp	r5, #0
 800fbc4:	dc1d      	bgt.n	800fc02 <_strtod_l+0x77a>
 800fbc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	dd27      	ble.n	800fc1c <_strtod_l+0x794>
 800fbcc:	4649      	mov	r1, r9
 800fbce:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800fbd0:	9805      	ldr	r0, [sp, #20]
 800fbd2:	f7ff f98d 	bl	800eef0 <__pow5mult>
 800fbd6:	4681      	mov	r9, r0
 800fbd8:	bb00      	cbnz	r0, 800fc1c <_strtod_l+0x794>
 800fbda:	f04f 0900 	mov.w	r9, #0
 800fbde:	e672      	b.n	800f8c6 <_strtod_l+0x43e>
 800fbe0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800fbe4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800fbe8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800fbec:	35e2      	adds	r5, #226	@ 0xe2
 800fbee:	fa01 f305 	lsl.w	r3, r1, r5
 800fbf2:	9310      	str	r3, [sp, #64]	@ 0x40
 800fbf4:	9113      	str	r1, [sp, #76]	@ 0x4c
 800fbf6:	e7ba      	b.n	800fb6e <_strtod_l+0x6e6>
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	9310      	str	r3, [sp, #64]	@ 0x40
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fc00:	e7b5      	b.n	800fb6e <_strtod_l+0x6e6>
 800fc02:	462a      	mov	r2, r5
 800fc04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fc06:	9805      	ldr	r0, [sp, #20]
 800fc08:	f7ff f9cc 	bl	800efa4 <__lshift>
 800fc0c:	901a      	str	r0, [sp, #104]	@ 0x68
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	d1d9      	bne.n	800fbc6 <_strtod_l+0x73e>
 800fc12:	e658      	b.n	800f8c6 <_strtod_l+0x43e>
 800fc14:	080130f0 	.word	0x080130f0
 800fc18:	fffffc02 	.word	0xfffffc02
 800fc1c:	2e00      	cmp	r6, #0
 800fc1e:	dd07      	ble.n	800fc30 <_strtod_l+0x7a8>
 800fc20:	4649      	mov	r1, r9
 800fc22:	4632      	mov	r2, r6
 800fc24:	9805      	ldr	r0, [sp, #20]
 800fc26:	f7ff f9bd 	bl	800efa4 <__lshift>
 800fc2a:	4681      	mov	r9, r0
 800fc2c:	2800      	cmp	r0, #0
 800fc2e:	d0d4      	beq.n	800fbda <_strtod_l+0x752>
 800fc30:	2f00      	cmp	r7, #0
 800fc32:	dd08      	ble.n	800fc46 <_strtod_l+0x7be>
 800fc34:	4641      	mov	r1, r8
 800fc36:	463a      	mov	r2, r7
 800fc38:	9805      	ldr	r0, [sp, #20]
 800fc3a:	f7ff f9b3 	bl	800efa4 <__lshift>
 800fc3e:	4680      	mov	r8, r0
 800fc40:	2800      	cmp	r0, #0
 800fc42:	f43f ae40 	beq.w	800f8c6 <_strtod_l+0x43e>
 800fc46:	464a      	mov	r2, r9
 800fc48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fc4a:	9805      	ldr	r0, [sp, #20]
 800fc4c:	f7ff fa32 	bl	800f0b4 <__mdiff>
 800fc50:	4604      	mov	r4, r0
 800fc52:	2800      	cmp	r0, #0
 800fc54:	f43f ae37 	beq.w	800f8c6 <_strtod_l+0x43e>
 800fc58:	68c3      	ldr	r3, [r0, #12]
 800fc5a:	4641      	mov	r1, r8
 800fc5c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fc5e:	2300      	movs	r3, #0
 800fc60:	60c3      	str	r3, [r0, #12]
 800fc62:	f7ff fa0b 	bl	800f07c <__mcmp>
 800fc66:	2800      	cmp	r0, #0
 800fc68:	da3d      	bge.n	800fce6 <_strtod_l+0x85e>
 800fc6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc6c:	ea53 030a 	orrs.w	r3, r3, sl
 800fc70:	d163      	bne.n	800fd3a <_strtod_l+0x8b2>
 800fc72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d15f      	bne.n	800fd3a <_strtod_l+0x8b2>
 800fc7a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fc7e:	0d1b      	lsrs	r3, r3, #20
 800fc80:	051b      	lsls	r3, r3, #20
 800fc82:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fc86:	d958      	bls.n	800fd3a <_strtod_l+0x8b2>
 800fc88:	6963      	ldr	r3, [r4, #20]
 800fc8a:	b913      	cbnz	r3, 800fc92 <_strtod_l+0x80a>
 800fc8c:	6923      	ldr	r3, [r4, #16]
 800fc8e:	2b01      	cmp	r3, #1
 800fc90:	dd53      	ble.n	800fd3a <_strtod_l+0x8b2>
 800fc92:	4621      	mov	r1, r4
 800fc94:	2201      	movs	r2, #1
 800fc96:	9805      	ldr	r0, [sp, #20]
 800fc98:	f7ff f984 	bl	800efa4 <__lshift>
 800fc9c:	4641      	mov	r1, r8
 800fc9e:	4604      	mov	r4, r0
 800fca0:	f7ff f9ec 	bl	800f07c <__mcmp>
 800fca4:	2800      	cmp	r0, #0
 800fca6:	dd48      	ble.n	800fd3a <_strtod_l+0x8b2>
 800fca8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fcac:	9a08      	ldr	r2, [sp, #32]
 800fcae:	0d1b      	lsrs	r3, r3, #20
 800fcb0:	051b      	lsls	r3, r3, #20
 800fcb2:	2a00      	cmp	r2, #0
 800fcb4:	d062      	beq.n	800fd7c <_strtod_l+0x8f4>
 800fcb6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fcba:	d85f      	bhi.n	800fd7c <_strtod_l+0x8f4>
 800fcbc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800fcc0:	f67f ae94 	bls.w	800f9ec <_strtod_l+0x564>
 800fcc4:	4650      	mov	r0, sl
 800fcc6:	4659      	mov	r1, fp
 800fcc8:	4ba3      	ldr	r3, [pc, #652]	@ (800ff58 <_strtod_l+0xad0>)
 800fcca:	2200      	movs	r2, #0
 800fccc:	f7f0 fc74 	bl	80005b8 <__aeabi_dmul>
 800fcd0:	4ba2      	ldr	r3, [pc, #648]	@ (800ff5c <_strtod_l+0xad4>)
 800fcd2:	4682      	mov	sl, r0
 800fcd4:	400b      	ands	r3, r1
 800fcd6:	468b      	mov	fp, r1
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	f47f adff 	bne.w	800f8dc <_strtod_l+0x454>
 800fcde:	2322      	movs	r3, #34	@ 0x22
 800fce0:	9a05      	ldr	r2, [sp, #20]
 800fce2:	6013      	str	r3, [r2, #0]
 800fce4:	e5fa      	b.n	800f8dc <_strtod_l+0x454>
 800fce6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800fcea:	d165      	bne.n	800fdb8 <_strtod_l+0x930>
 800fcec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fcee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fcf2:	b35a      	cbz	r2, 800fd4c <_strtod_l+0x8c4>
 800fcf4:	4a9a      	ldr	r2, [pc, #616]	@ (800ff60 <_strtod_l+0xad8>)
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d12b      	bne.n	800fd52 <_strtod_l+0x8ca>
 800fcfa:	9b08      	ldr	r3, [sp, #32]
 800fcfc:	4651      	mov	r1, sl
 800fcfe:	b303      	cbz	r3, 800fd42 <_strtod_l+0x8ba>
 800fd00:	465a      	mov	r2, fp
 800fd02:	4b96      	ldr	r3, [pc, #600]	@ (800ff5c <_strtod_l+0xad4>)
 800fd04:	4013      	ands	r3, r2
 800fd06:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800fd0a:	f04f 32ff 	mov.w	r2, #4294967295
 800fd0e:	d81b      	bhi.n	800fd48 <_strtod_l+0x8c0>
 800fd10:	0d1b      	lsrs	r3, r3, #20
 800fd12:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fd16:	fa02 f303 	lsl.w	r3, r2, r3
 800fd1a:	4299      	cmp	r1, r3
 800fd1c:	d119      	bne.n	800fd52 <_strtod_l+0x8ca>
 800fd1e:	4b91      	ldr	r3, [pc, #580]	@ (800ff64 <_strtod_l+0xadc>)
 800fd20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d102      	bne.n	800fd2c <_strtod_l+0x8a4>
 800fd26:	3101      	adds	r1, #1
 800fd28:	f43f adcd 	beq.w	800f8c6 <_strtod_l+0x43e>
 800fd2c:	f04f 0a00 	mov.w	sl, #0
 800fd30:	4b8a      	ldr	r3, [pc, #552]	@ (800ff5c <_strtod_l+0xad4>)
 800fd32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fd34:	401a      	ands	r2, r3
 800fd36:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800fd3a:	9b08      	ldr	r3, [sp, #32]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d1c1      	bne.n	800fcc4 <_strtod_l+0x83c>
 800fd40:	e5cc      	b.n	800f8dc <_strtod_l+0x454>
 800fd42:	f04f 33ff 	mov.w	r3, #4294967295
 800fd46:	e7e8      	b.n	800fd1a <_strtod_l+0x892>
 800fd48:	4613      	mov	r3, r2
 800fd4a:	e7e6      	b.n	800fd1a <_strtod_l+0x892>
 800fd4c:	ea53 030a 	orrs.w	r3, r3, sl
 800fd50:	d0aa      	beq.n	800fca8 <_strtod_l+0x820>
 800fd52:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fd54:	b1db      	cbz	r3, 800fd8e <_strtod_l+0x906>
 800fd56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fd58:	4213      	tst	r3, r2
 800fd5a:	d0ee      	beq.n	800fd3a <_strtod_l+0x8b2>
 800fd5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd5e:	4650      	mov	r0, sl
 800fd60:	4659      	mov	r1, fp
 800fd62:	9a08      	ldr	r2, [sp, #32]
 800fd64:	b1bb      	cbz	r3, 800fd96 <_strtod_l+0x90e>
 800fd66:	f7ff fb6d 	bl	800f444 <sulp>
 800fd6a:	4602      	mov	r2, r0
 800fd6c:	460b      	mov	r3, r1
 800fd6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd72:	f7f0 fa6b 	bl	800024c <__adddf3>
 800fd76:	4682      	mov	sl, r0
 800fd78:	468b      	mov	fp, r1
 800fd7a:	e7de      	b.n	800fd3a <_strtod_l+0x8b2>
 800fd7c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800fd80:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fd84:	f04f 3aff 	mov.w	sl, #4294967295
 800fd88:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fd8c:	e7d5      	b.n	800fd3a <_strtod_l+0x8b2>
 800fd8e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fd90:	ea13 0f0a 	tst.w	r3, sl
 800fd94:	e7e1      	b.n	800fd5a <_strtod_l+0x8d2>
 800fd96:	f7ff fb55 	bl	800f444 <sulp>
 800fd9a:	4602      	mov	r2, r0
 800fd9c:	460b      	mov	r3, r1
 800fd9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fda2:	f7f0 fa51 	bl	8000248 <__aeabi_dsub>
 800fda6:	2200      	movs	r2, #0
 800fda8:	2300      	movs	r3, #0
 800fdaa:	4682      	mov	sl, r0
 800fdac:	468b      	mov	fp, r1
 800fdae:	f7f0 fe6b 	bl	8000a88 <__aeabi_dcmpeq>
 800fdb2:	2800      	cmp	r0, #0
 800fdb4:	d0c1      	beq.n	800fd3a <_strtod_l+0x8b2>
 800fdb6:	e619      	b.n	800f9ec <_strtod_l+0x564>
 800fdb8:	4641      	mov	r1, r8
 800fdba:	4620      	mov	r0, r4
 800fdbc:	f7ff face 	bl	800f35c <__ratio>
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fdc6:	4606      	mov	r6, r0
 800fdc8:	460f      	mov	r7, r1
 800fdca:	f7f0 fe71 	bl	8000ab0 <__aeabi_dcmple>
 800fdce:	2800      	cmp	r0, #0
 800fdd0:	d06d      	beq.n	800feae <_strtod_l+0xa26>
 800fdd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d178      	bne.n	800feca <_strtod_l+0xa42>
 800fdd8:	f1ba 0f00 	cmp.w	sl, #0
 800fddc:	d156      	bne.n	800fe8c <_strtod_l+0xa04>
 800fdde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fde0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d158      	bne.n	800fe9a <_strtod_l+0xa12>
 800fde8:	2200      	movs	r2, #0
 800fdea:	4630      	mov	r0, r6
 800fdec:	4639      	mov	r1, r7
 800fdee:	4b5e      	ldr	r3, [pc, #376]	@ (800ff68 <_strtod_l+0xae0>)
 800fdf0:	f7f0 fe54 	bl	8000a9c <__aeabi_dcmplt>
 800fdf4:	2800      	cmp	r0, #0
 800fdf6:	d157      	bne.n	800fea8 <_strtod_l+0xa20>
 800fdf8:	4630      	mov	r0, r6
 800fdfa:	4639      	mov	r1, r7
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	4b5b      	ldr	r3, [pc, #364]	@ (800ff6c <_strtod_l+0xae4>)
 800fe00:	f7f0 fbda 	bl	80005b8 <__aeabi_dmul>
 800fe04:	4606      	mov	r6, r0
 800fe06:	460f      	mov	r7, r1
 800fe08:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800fe0c:	9606      	str	r6, [sp, #24]
 800fe0e:	9307      	str	r3, [sp, #28]
 800fe10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fe14:	4d51      	ldr	r5, [pc, #324]	@ (800ff5c <_strtod_l+0xad4>)
 800fe16:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fe1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe1c:	401d      	ands	r5, r3
 800fe1e:	4b54      	ldr	r3, [pc, #336]	@ (800ff70 <_strtod_l+0xae8>)
 800fe20:	429d      	cmp	r5, r3
 800fe22:	f040 80ab 	bne.w	800ff7c <_strtod_l+0xaf4>
 800fe26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe28:	4650      	mov	r0, sl
 800fe2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800fe2e:	4659      	mov	r1, fp
 800fe30:	f7ff f9d4 	bl	800f1dc <__ulp>
 800fe34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fe38:	f7f0 fbbe 	bl	80005b8 <__aeabi_dmul>
 800fe3c:	4652      	mov	r2, sl
 800fe3e:	465b      	mov	r3, fp
 800fe40:	f7f0 fa04 	bl	800024c <__adddf3>
 800fe44:	460b      	mov	r3, r1
 800fe46:	4945      	ldr	r1, [pc, #276]	@ (800ff5c <_strtod_l+0xad4>)
 800fe48:	4a4a      	ldr	r2, [pc, #296]	@ (800ff74 <_strtod_l+0xaec>)
 800fe4a:	4019      	ands	r1, r3
 800fe4c:	4291      	cmp	r1, r2
 800fe4e:	4682      	mov	sl, r0
 800fe50:	d942      	bls.n	800fed8 <_strtod_l+0xa50>
 800fe52:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fe54:	4b43      	ldr	r3, [pc, #268]	@ (800ff64 <_strtod_l+0xadc>)
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d103      	bne.n	800fe62 <_strtod_l+0x9da>
 800fe5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe5c:	3301      	adds	r3, #1
 800fe5e:	f43f ad32 	beq.w	800f8c6 <_strtod_l+0x43e>
 800fe62:	f04f 3aff 	mov.w	sl, #4294967295
 800fe66:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800ff64 <_strtod_l+0xadc>
 800fe6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fe6c:	9805      	ldr	r0, [sp, #20]
 800fe6e:	f7fe fe89 	bl	800eb84 <_Bfree>
 800fe72:	4649      	mov	r1, r9
 800fe74:	9805      	ldr	r0, [sp, #20]
 800fe76:	f7fe fe85 	bl	800eb84 <_Bfree>
 800fe7a:	4641      	mov	r1, r8
 800fe7c:	9805      	ldr	r0, [sp, #20]
 800fe7e:	f7fe fe81 	bl	800eb84 <_Bfree>
 800fe82:	4621      	mov	r1, r4
 800fe84:	9805      	ldr	r0, [sp, #20]
 800fe86:	f7fe fe7d 	bl	800eb84 <_Bfree>
 800fe8a:	e61c      	b.n	800fac6 <_strtod_l+0x63e>
 800fe8c:	f1ba 0f01 	cmp.w	sl, #1
 800fe90:	d103      	bne.n	800fe9a <_strtod_l+0xa12>
 800fe92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	f43f ada9 	beq.w	800f9ec <_strtod_l+0x564>
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	4b36      	ldr	r3, [pc, #216]	@ (800ff78 <_strtod_l+0xaf0>)
 800fe9e:	2600      	movs	r6, #0
 800fea0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fea4:	4f30      	ldr	r7, [pc, #192]	@ (800ff68 <_strtod_l+0xae0>)
 800fea6:	e7b3      	b.n	800fe10 <_strtod_l+0x988>
 800fea8:	2600      	movs	r6, #0
 800feaa:	4f30      	ldr	r7, [pc, #192]	@ (800ff6c <_strtod_l+0xae4>)
 800feac:	e7ac      	b.n	800fe08 <_strtod_l+0x980>
 800feae:	4630      	mov	r0, r6
 800feb0:	4639      	mov	r1, r7
 800feb2:	4b2e      	ldr	r3, [pc, #184]	@ (800ff6c <_strtod_l+0xae4>)
 800feb4:	2200      	movs	r2, #0
 800feb6:	f7f0 fb7f 	bl	80005b8 <__aeabi_dmul>
 800feba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800febc:	4606      	mov	r6, r0
 800febe:	460f      	mov	r7, r1
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d0a1      	beq.n	800fe08 <_strtod_l+0x980>
 800fec4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fec8:	e7a2      	b.n	800fe10 <_strtod_l+0x988>
 800feca:	2200      	movs	r2, #0
 800fecc:	4b26      	ldr	r3, [pc, #152]	@ (800ff68 <_strtod_l+0xae0>)
 800fece:	4616      	mov	r6, r2
 800fed0:	461f      	mov	r7, r3
 800fed2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fed6:	e79b      	b.n	800fe10 <_strtod_l+0x988>
 800fed8:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800fedc:	9b08      	ldr	r3, [sp, #32]
 800fede:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d1c1      	bne.n	800fe6a <_strtod_l+0x9e2>
 800fee6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800feea:	0d1b      	lsrs	r3, r3, #20
 800feec:	051b      	lsls	r3, r3, #20
 800feee:	429d      	cmp	r5, r3
 800fef0:	d1bb      	bne.n	800fe6a <_strtod_l+0x9e2>
 800fef2:	4630      	mov	r0, r6
 800fef4:	4639      	mov	r1, r7
 800fef6:	f7f0 febf 	bl	8000c78 <__aeabi_d2lz>
 800fefa:	f7f0 fb2f 	bl	800055c <__aeabi_l2d>
 800fefe:	4602      	mov	r2, r0
 800ff00:	460b      	mov	r3, r1
 800ff02:	4630      	mov	r0, r6
 800ff04:	4639      	mov	r1, r7
 800ff06:	f7f0 f99f 	bl	8000248 <__aeabi_dsub>
 800ff0a:	460b      	mov	r3, r1
 800ff0c:	4602      	mov	r2, r0
 800ff0e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ff12:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ff16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff18:	ea46 060a 	orr.w	r6, r6, sl
 800ff1c:	431e      	orrs	r6, r3
 800ff1e:	d06a      	beq.n	800fff6 <_strtod_l+0xb6e>
 800ff20:	a309      	add	r3, pc, #36	@ (adr r3, 800ff48 <_strtod_l+0xac0>)
 800ff22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff26:	f7f0 fdb9 	bl	8000a9c <__aeabi_dcmplt>
 800ff2a:	2800      	cmp	r0, #0
 800ff2c:	f47f acd6 	bne.w	800f8dc <_strtod_l+0x454>
 800ff30:	a307      	add	r3, pc, #28	@ (adr r3, 800ff50 <_strtod_l+0xac8>)
 800ff32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff3a:	f7f0 fdcd 	bl	8000ad8 <__aeabi_dcmpgt>
 800ff3e:	2800      	cmp	r0, #0
 800ff40:	d093      	beq.n	800fe6a <_strtod_l+0x9e2>
 800ff42:	e4cb      	b.n	800f8dc <_strtod_l+0x454>
 800ff44:	f3af 8000 	nop.w
 800ff48:	94a03595 	.word	0x94a03595
 800ff4c:	3fdfffff 	.word	0x3fdfffff
 800ff50:	35afe535 	.word	0x35afe535
 800ff54:	3fe00000 	.word	0x3fe00000
 800ff58:	39500000 	.word	0x39500000
 800ff5c:	7ff00000 	.word	0x7ff00000
 800ff60:	000fffff 	.word	0x000fffff
 800ff64:	7fefffff 	.word	0x7fefffff
 800ff68:	3ff00000 	.word	0x3ff00000
 800ff6c:	3fe00000 	.word	0x3fe00000
 800ff70:	7fe00000 	.word	0x7fe00000
 800ff74:	7c9fffff 	.word	0x7c9fffff
 800ff78:	bff00000 	.word	0xbff00000
 800ff7c:	9b08      	ldr	r3, [sp, #32]
 800ff7e:	b323      	cbz	r3, 800ffca <_strtod_l+0xb42>
 800ff80:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ff84:	d821      	bhi.n	800ffca <_strtod_l+0xb42>
 800ff86:	a328      	add	r3, pc, #160	@ (adr r3, 8010028 <_strtod_l+0xba0>)
 800ff88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff8c:	4630      	mov	r0, r6
 800ff8e:	4639      	mov	r1, r7
 800ff90:	f7f0 fd8e 	bl	8000ab0 <__aeabi_dcmple>
 800ff94:	b1a0      	cbz	r0, 800ffc0 <_strtod_l+0xb38>
 800ff96:	4639      	mov	r1, r7
 800ff98:	4630      	mov	r0, r6
 800ff9a:	f7f0 fde5 	bl	8000b68 <__aeabi_d2uiz>
 800ff9e:	2801      	cmp	r0, #1
 800ffa0:	bf38      	it	cc
 800ffa2:	2001      	movcc	r0, #1
 800ffa4:	f7f0 fa8e 	bl	80004c4 <__aeabi_ui2d>
 800ffa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffaa:	4606      	mov	r6, r0
 800ffac:	460f      	mov	r7, r1
 800ffae:	b9fb      	cbnz	r3, 800fff0 <_strtod_l+0xb68>
 800ffb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ffb4:	9014      	str	r0, [sp, #80]	@ 0x50
 800ffb6:	9315      	str	r3, [sp, #84]	@ 0x54
 800ffb8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ffbc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ffc0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ffc2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ffc6:	1b5b      	subs	r3, r3, r5
 800ffc8:	9311      	str	r3, [sp, #68]	@ 0x44
 800ffca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ffce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ffd2:	f7ff f903 	bl	800f1dc <__ulp>
 800ffd6:	4602      	mov	r2, r0
 800ffd8:	460b      	mov	r3, r1
 800ffda:	4650      	mov	r0, sl
 800ffdc:	4659      	mov	r1, fp
 800ffde:	f7f0 faeb 	bl	80005b8 <__aeabi_dmul>
 800ffe2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ffe6:	f7f0 f931 	bl	800024c <__adddf3>
 800ffea:	4682      	mov	sl, r0
 800ffec:	468b      	mov	fp, r1
 800ffee:	e775      	b.n	800fedc <_strtod_l+0xa54>
 800fff0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800fff4:	e7e0      	b.n	800ffb8 <_strtod_l+0xb30>
 800fff6:	a30e      	add	r3, pc, #56	@ (adr r3, 8010030 <_strtod_l+0xba8>)
 800fff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fffc:	f7f0 fd4e 	bl	8000a9c <__aeabi_dcmplt>
 8010000:	e79d      	b.n	800ff3e <_strtod_l+0xab6>
 8010002:	2300      	movs	r3, #0
 8010004:	930e      	str	r3, [sp, #56]	@ 0x38
 8010006:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010008:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801000a:	6013      	str	r3, [r2, #0]
 801000c:	f7ff ba79 	b.w	800f502 <_strtod_l+0x7a>
 8010010:	2a65      	cmp	r2, #101	@ 0x65
 8010012:	f43f ab72 	beq.w	800f6fa <_strtod_l+0x272>
 8010016:	2a45      	cmp	r2, #69	@ 0x45
 8010018:	f43f ab6f 	beq.w	800f6fa <_strtod_l+0x272>
 801001c:	2301      	movs	r3, #1
 801001e:	f7ff bbaa 	b.w	800f776 <_strtod_l+0x2ee>
 8010022:	bf00      	nop
 8010024:	f3af 8000 	nop.w
 8010028:	ffc00000 	.word	0xffc00000
 801002c:	41dfffff 	.word	0x41dfffff
 8010030:	94a03595 	.word	0x94a03595
 8010034:	3fcfffff 	.word	0x3fcfffff

08010038 <_strtod_r>:
 8010038:	4b01      	ldr	r3, [pc, #4]	@ (8010040 <_strtod_r+0x8>)
 801003a:	f7ff ba25 	b.w	800f488 <_strtod_l>
 801003e:	bf00      	nop
 8010040:	20004400 	.word	0x20004400

08010044 <_strtol_l.isra.0>:
 8010044:	2b24      	cmp	r3, #36	@ 0x24
 8010046:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801004a:	4686      	mov	lr, r0
 801004c:	4690      	mov	r8, r2
 801004e:	d801      	bhi.n	8010054 <_strtol_l.isra.0+0x10>
 8010050:	2b01      	cmp	r3, #1
 8010052:	d106      	bne.n	8010062 <_strtol_l.isra.0+0x1e>
 8010054:	f7fd fdae 	bl	800dbb4 <__errno>
 8010058:	2316      	movs	r3, #22
 801005a:	6003      	str	r3, [r0, #0]
 801005c:	2000      	movs	r0, #0
 801005e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010062:	460d      	mov	r5, r1
 8010064:	4833      	ldr	r0, [pc, #204]	@ (8010134 <_strtol_l.isra.0+0xf0>)
 8010066:	462a      	mov	r2, r5
 8010068:	f815 4b01 	ldrb.w	r4, [r5], #1
 801006c:	5d06      	ldrb	r6, [r0, r4]
 801006e:	f016 0608 	ands.w	r6, r6, #8
 8010072:	d1f8      	bne.n	8010066 <_strtol_l.isra.0+0x22>
 8010074:	2c2d      	cmp	r4, #45	@ 0x2d
 8010076:	d110      	bne.n	801009a <_strtol_l.isra.0+0x56>
 8010078:	2601      	movs	r6, #1
 801007a:	782c      	ldrb	r4, [r5, #0]
 801007c:	1c95      	adds	r5, r2, #2
 801007e:	f033 0210 	bics.w	r2, r3, #16
 8010082:	d115      	bne.n	80100b0 <_strtol_l.isra.0+0x6c>
 8010084:	2c30      	cmp	r4, #48	@ 0x30
 8010086:	d10d      	bne.n	80100a4 <_strtol_l.isra.0+0x60>
 8010088:	782a      	ldrb	r2, [r5, #0]
 801008a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801008e:	2a58      	cmp	r2, #88	@ 0x58
 8010090:	d108      	bne.n	80100a4 <_strtol_l.isra.0+0x60>
 8010092:	786c      	ldrb	r4, [r5, #1]
 8010094:	3502      	adds	r5, #2
 8010096:	2310      	movs	r3, #16
 8010098:	e00a      	b.n	80100b0 <_strtol_l.isra.0+0x6c>
 801009a:	2c2b      	cmp	r4, #43	@ 0x2b
 801009c:	bf04      	itt	eq
 801009e:	782c      	ldrbeq	r4, [r5, #0]
 80100a0:	1c95      	addeq	r5, r2, #2
 80100a2:	e7ec      	b.n	801007e <_strtol_l.isra.0+0x3a>
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d1f6      	bne.n	8010096 <_strtol_l.isra.0+0x52>
 80100a8:	2c30      	cmp	r4, #48	@ 0x30
 80100aa:	bf14      	ite	ne
 80100ac:	230a      	movne	r3, #10
 80100ae:	2308      	moveq	r3, #8
 80100b0:	2200      	movs	r2, #0
 80100b2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80100b6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80100ba:	fbbc f9f3 	udiv	r9, ip, r3
 80100be:	4610      	mov	r0, r2
 80100c0:	fb03 ca19 	mls	sl, r3, r9, ip
 80100c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80100c8:	2f09      	cmp	r7, #9
 80100ca:	d80f      	bhi.n	80100ec <_strtol_l.isra.0+0xa8>
 80100cc:	463c      	mov	r4, r7
 80100ce:	42a3      	cmp	r3, r4
 80100d0:	dd1b      	ble.n	801010a <_strtol_l.isra.0+0xc6>
 80100d2:	1c57      	adds	r7, r2, #1
 80100d4:	d007      	beq.n	80100e6 <_strtol_l.isra.0+0xa2>
 80100d6:	4581      	cmp	r9, r0
 80100d8:	d314      	bcc.n	8010104 <_strtol_l.isra.0+0xc0>
 80100da:	d101      	bne.n	80100e0 <_strtol_l.isra.0+0x9c>
 80100dc:	45a2      	cmp	sl, r4
 80100de:	db11      	blt.n	8010104 <_strtol_l.isra.0+0xc0>
 80100e0:	2201      	movs	r2, #1
 80100e2:	fb00 4003 	mla	r0, r0, r3, r4
 80100e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80100ea:	e7eb      	b.n	80100c4 <_strtol_l.isra.0+0x80>
 80100ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80100f0:	2f19      	cmp	r7, #25
 80100f2:	d801      	bhi.n	80100f8 <_strtol_l.isra.0+0xb4>
 80100f4:	3c37      	subs	r4, #55	@ 0x37
 80100f6:	e7ea      	b.n	80100ce <_strtol_l.isra.0+0x8a>
 80100f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80100fc:	2f19      	cmp	r7, #25
 80100fe:	d804      	bhi.n	801010a <_strtol_l.isra.0+0xc6>
 8010100:	3c57      	subs	r4, #87	@ 0x57
 8010102:	e7e4      	b.n	80100ce <_strtol_l.isra.0+0x8a>
 8010104:	f04f 32ff 	mov.w	r2, #4294967295
 8010108:	e7ed      	b.n	80100e6 <_strtol_l.isra.0+0xa2>
 801010a:	1c53      	adds	r3, r2, #1
 801010c:	d108      	bne.n	8010120 <_strtol_l.isra.0+0xdc>
 801010e:	2322      	movs	r3, #34	@ 0x22
 8010110:	4660      	mov	r0, ip
 8010112:	f8ce 3000 	str.w	r3, [lr]
 8010116:	f1b8 0f00 	cmp.w	r8, #0
 801011a:	d0a0      	beq.n	801005e <_strtol_l.isra.0+0x1a>
 801011c:	1e69      	subs	r1, r5, #1
 801011e:	e006      	b.n	801012e <_strtol_l.isra.0+0xea>
 8010120:	b106      	cbz	r6, 8010124 <_strtol_l.isra.0+0xe0>
 8010122:	4240      	negs	r0, r0
 8010124:	f1b8 0f00 	cmp.w	r8, #0
 8010128:	d099      	beq.n	801005e <_strtol_l.isra.0+0x1a>
 801012a:	2a00      	cmp	r2, #0
 801012c:	d1f6      	bne.n	801011c <_strtol_l.isra.0+0xd8>
 801012e:	f8c8 1000 	str.w	r1, [r8]
 8010132:	e794      	b.n	801005e <_strtol_l.isra.0+0x1a>
 8010134:	08013119 	.word	0x08013119

08010138 <_strtol_r>:
 8010138:	f7ff bf84 	b.w	8010044 <_strtol_l.isra.0>

0801013c <__ssputs_r>:
 801013c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010140:	461f      	mov	r7, r3
 8010142:	688e      	ldr	r6, [r1, #8]
 8010144:	4682      	mov	sl, r0
 8010146:	42be      	cmp	r6, r7
 8010148:	460c      	mov	r4, r1
 801014a:	4690      	mov	r8, r2
 801014c:	680b      	ldr	r3, [r1, #0]
 801014e:	d82d      	bhi.n	80101ac <__ssputs_r+0x70>
 8010150:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010154:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010158:	d026      	beq.n	80101a8 <__ssputs_r+0x6c>
 801015a:	6965      	ldr	r5, [r4, #20]
 801015c:	6909      	ldr	r1, [r1, #16]
 801015e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010162:	eba3 0901 	sub.w	r9, r3, r1
 8010166:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801016a:	1c7b      	adds	r3, r7, #1
 801016c:	444b      	add	r3, r9
 801016e:	106d      	asrs	r5, r5, #1
 8010170:	429d      	cmp	r5, r3
 8010172:	bf38      	it	cc
 8010174:	461d      	movcc	r5, r3
 8010176:	0553      	lsls	r3, r2, #21
 8010178:	d527      	bpl.n	80101ca <__ssputs_r+0x8e>
 801017a:	4629      	mov	r1, r5
 801017c:	f7fe fc36 	bl	800e9ec <_malloc_r>
 8010180:	4606      	mov	r6, r0
 8010182:	b360      	cbz	r0, 80101de <__ssputs_r+0xa2>
 8010184:	464a      	mov	r2, r9
 8010186:	6921      	ldr	r1, [r4, #16]
 8010188:	f7fd fd4f 	bl	800dc2a <memcpy>
 801018c:	89a3      	ldrh	r3, [r4, #12]
 801018e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010196:	81a3      	strh	r3, [r4, #12]
 8010198:	6126      	str	r6, [r4, #16]
 801019a:	444e      	add	r6, r9
 801019c:	6026      	str	r6, [r4, #0]
 801019e:	463e      	mov	r6, r7
 80101a0:	6165      	str	r5, [r4, #20]
 80101a2:	eba5 0509 	sub.w	r5, r5, r9
 80101a6:	60a5      	str	r5, [r4, #8]
 80101a8:	42be      	cmp	r6, r7
 80101aa:	d900      	bls.n	80101ae <__ssputs_r+0x72>
 80101ac:	463e      	mov	r6, r7
 80101ae:	4632      	mov	r2, r6
 80101b0:	4641      	mov	r1, r8
 80101b2:	6820      	ldr	r0, [r4, #0]
 80101b4:	f000 fb63 	bl	801087e <memmove>
 80101b8:	2000      	movs	r0, #0
 80101ba:	68a3      	ldr	r3, [r4, #8]
 80101bc:	1b9b      	subs	r3, r3, r6
 80101be:	60a3      	str	r3, [r4, #8]
 80101c0:	6823      	ldr	r3, [r4, #0]
 80101c2:	4433      	add	r3, r6
 80101c4:	6023      	str	r3, [r4, #0]
 80101c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101ca:	462a      	mov	r2, r5
 80101cc:	f000 ff39 	bl	8011042 <_realloc_r>
 80101d0:	4606      	mov	r6, r0
 80101d2:	2800      	cmp	r0, #0
 80101d4:	d1e0      	bne.n	8010198 <__ssputs_r+0x5c>
 80101d6:	4650      	mov	r0, sl
 80101d8:	6921      	ldr	r1, [r4, #16]
 80101da:	f7fe fb95 	bl	800e908 <_free_r>
 80101de:	230c      	movs	r3, #12
 80101e0:	f8ca 3000 	str.w	r3, [sl]
 80101e4:	89a3      	ldrh	r3, [r4, #12]
 80101e6:	f04f 30ff 	mov.w	r0, #4294967295
 80101ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101ee:	81a3      	strh	r3, [r4, #12]
 80101f0:	e7e9      	b.n	80101c6 <__ssputs_r+0x8a>
	...

080101f4 <_svfiprintf_r>:
 80101f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f8:	4698      	mov	r8, r3
 80101fa:	898b      	ldrh	r3, [r1, #12]
 80101fc:	4607      	mov	r7, r0
 80101fe:	061b      	lsls	r3, r3, #24
 8010200:	460d      	mov	r5, r1
 8010202:	4614      	mov	r4, r2
 8010204:	b09d      	sub	sp, #116	@ 0x74
 8010206:	d510      	bpl.n	801022a <_svfiprintf_r+0x36>
 8010208:	690b      	ldr	r3, [r1, #16]
 801020a:	b973      	cbnz	r3, 801022a <_svfiprintf_r+0x36>
 801020c:	2140      	movs	r1, #64	@ 0x40
 801020e:	f7fe fbed 	bl	800e9ec <_malloc_r>
 8010212:	6028      	str	r0, [r5, #0]
 8010214:	6128      	str	r0, [r5, #16]
 8010216:	b930      	cbnz	r0, 8010226 <_svfiprintf_r+0x32>
 8010218:	230c      	movs	r3, #12
 801021a:	603b      	str	r3, [r7, #0]
 801021c:	f04f 30ff 	mov.w	r0, #4294967295
 8010220:	b01d      	add	sp, #116	@ 0x74
 8010222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010226:	2340      	movs	r3, #64	@ 0x40
 8010228:	616b      	str	r3, [r5, #20]
 801022a:	2300      	movs	r3, #0
 801022c:	9309      	str	r3, [sp, #36]	@ 0x24
 801022e:	2320      	movs	r3, #32
 8010230:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010234:	2330      	movs	r3, #48	@ 0x30
 8010236:	f04f 0901 	mov.w	r9, #1
 801023a:	f8cd 800c 	str.w	r8, [sp, #12]
 801023e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80103d8 <_svfiprintf_r+0x1e4>
 8010242:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010246:	4623      	mov	r3, r4
 8010248:	469a      	mov	sl, r3
 801024a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801024e:	b10a      	cbz	r2, 8010254 <_svfiprintf_r+0x60>
 8010250:	2a25      	cmp	r2, #37	@ 0x25
 8010252:	d1f9      	bne.n	8010248 <_svfiprintf_r+0x54>
 8010254:	ebba 0b04 	subs.w	fp, sl, r4
 8010258:	d00b      	beq.n	8010272 <_svfiprintf_r+0x7e>
 801025a:	465b      	mov	r3, fp
 801025c:	4622      	mov	r2, r4
 801025e:	4629      	mov	r1, r5
 8010260:	4638      	mov	r0, r7
 8010262:	f7ff ff6b 	bl	801013c <__ssputs_r>
 8010266:	3001      	adds	r0, #1
 8010268:	f000 80a7 	beq.w	80103ba <_svfiprintf_r+0x1c6>
 801026c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801026e:	445a      	add	r2, fp
 8010270:	9209      	str	r2, [sp, #36]	@ 0x24
 8010272:	f89a 3000 	ldrb.w	r3, [sl]
 8010276:	2b00      	cmp	r3, #0
 8010278:	f000 809f 	beq.w	80103ba <_svfiprintf_r+0x1c6>
 801027c:	2300      	movs	r3, #0
 801027e:	f04f 32ff 	mov.w	r2, #4294967295
 8010282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010286:	f10a 0a01 	add.w	sl, sl, #1
 801028a:	9304      	str	r3, [sp, #16]
 801028c:	9307      	str	r3, [sp, #28]
 801028e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010292:	931a      	str	r3, [sp, #104]	@ 0x68
 8010294:	4654      	mov	r4, sl
 8010296:	2205      	movs	r2, #5
 8010298:	f814 1b01 	ldrb.w	r1, [r4], #1
 801029c:	484e      	ldr	r0, [pc, #312]	@ (80103d8 <_svfiprintf_r+0x1e4>)
 801029e:	f7fd fcb6 	bl	800dc0e <memchr>
 80102a2:	9a04      	ldr	r2, [sp, #16]
 80102a4:	b9d8      	cbnz	r0, 80102de <_svfiprintf_r+0xea>
 80102a6:	06d0      	lsls	r0, r2, #27
 80102a8:	bf44      	itt	mi
 80102aa:	2320      	movmi	r3, #32
 80102ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102b0:	0711      	lsls	r1, r2, #28
 80102b2:	bf44      	itt	mi
 80102b4:	232b      	movmi	r3, #43	@ 0x2b
 80102b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102ba:	f89a 3000 	ldrb.w	r3, [sl]
 80102be:	2b2a      	cmp	r3, #42	@ 0x2a
 80102c0:	d015      	beq.n	80102ee <_svfiprintf_r+0xfa>
 80102c2:	4654      	mov	r4, sl
 80102c4:	2000      	movs	r0, #0
 80102c6:	f04f 0c0a 	mov.w	ip, #10
 80102ca:	9a07      	ldr	r2, [sp, #28]
 80102cc:	4621      	mov	r1, r4
 80102ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102d2:	3b30      	subs	r3, #48	@ 0x30
 80102d4:	2b09      	cmp	r3, #9
 80102d6:	d94b      	bls.n	8010370 <_svfiprintf_r+0x17c>
 80102d8:	b1b0      	cbz	r0, 8010308 <_svfiprintf_r+0x114>
 80102da:	9207      	str	r2, [sp, #28]
 80102dc:	e014      	b.n	8010308 <_svfiprintf_r+0x114>
 80102de:	eba0 0308 	sub.w	r3, r0, r8
 80102e2:	fa09 f303 	lsl.w	r3, r9, r3
 80102e6:	4313      	orrs	r3, r2
 80102e8:	46a2      	mov	sl, r4
 80102ea:	9304      	str	r3, [sp, #16]
 80102ec:	e7d2      	b.n	8010294 <_svfiprintf_r+0xa0>
 80102ee:	9b03      	ldr	r3, [sp, #12]
 80102f0:	1d19      	adds	r1, r3, #4
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	9103      	str	r1, [sp, #12]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	bfbb      	ittet	lt
 80102fa:	425b      	neglt	r3, r3
 80102fc:	f042 0202 	orrlt.w	r2, r2, #2
 8010300:	9307      	strge	r3, [sp, #28]
 8010302:	9307      	strlt	r3, [sp, #28]
 8010304:	bfb8      	it	lt
 8010306:	9204      	strlt	r2, [sp, #16]
 8010308:	7823      	ldrb	r3, [r4, #0]
 801030a:	2b2e      	cmp	r3, #46	@ 0x2e
 801030c:	d10a      	bne.n	8010324 <_svfiprintf_r+0x130>
 801030e:	7863      	ldrb	r3, [r4, #1]
 8010310:	2b2a      	cmp	r3, #42	@ 0x2a
 8010312:	d132      	bne.n	801037a <_svfiprintf_r+0x186>
 8010314:	9b03      	ldr	r3, [sp, #12]
 8010316:	3402      	adds	r4, #2
 8010318:	1d1a      	adds	r2, r3, #4
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	9203      	str	r2, [sp, #12]
 801031e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010322:	9305      	str	r3, [sp, #20]
 8010324:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80103dc <_svfiprintf_r+0x1e8>
 8010328:	2203      	movs	r2, #3
 801032a:	4650      	mov	r0, sl
 801032c:	7821      	ldrb	r1, [r4, #0]
 801032e:	f7fd fc6e 	bl	800dc0e <memchr>
 8010332:	b138      	cbz	r0, 8010344 <_svfiprintf_r+0x150>
 8010334:	2240      	movs	r2, #64	@ 0x40
 8010336:	9b04      	ldr	r3, [sp, #16]
 8010338:	eba0 000a 	sub.w	r0, r0, sl
 801033c:	4082      	lsls	r2, r0
 801033e:	4313      	orrs	r3, r2
 8010340:	3401      	adds	r4, #1
 8010342:	9304      	str	r3, [sp, #16]
 8010344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010348:	2206      	movs	r2, #6
 801034a:	4825      	ldr	r0, [pc, #148]	@ (80103e0 <_svfiprintf_r+0x1ec>)
 801034c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010350:	f7fd fc5d 	bl	800dc0e <memchr>
 8010354:	2800      	cmp	r0, #0
 8010356:	d036      	beq.n	80103c6 <_svfiprintf_r+0x1d2>
 8010358:	4b22      	ldr	r3, [pc, #136]	@ (80103e4 <_svfiprintf_r+0x1f0>)
 801035a:	bb1b      	cbnz	r3, 80103a4 <_svfiprintf_r+0x1b0>
 801035c:	9b03      	ldr	r3, [sp, #12]
 801035e:	3307      	adds	r3, #7
 8010360:	f023 0307 	bic.w	r3, r3, #7
 8010364:	3308      	adds	r3, #8
 8010366:	9303      	str	r3, [sp, #12]
 8010368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801036a:	4433      	add	r3, r6
 801036c:	9309      	str	r3, [sp, #36]	@ 0x24
 801036e:	e76a      	b.n	8010246 <_svfiprintf_r+0x52>
 8010370:	460c      	mov	r4, r1
 8010372:	2001      	movs	r0, #1
 8010374:	fb0c 3202 	mla	r2, ip, r2, r3
 8010378:	e7a8      	b.n	80102cc <_svfiprintf_r+0xd8>
 801037a:	2300      	movs	r3, #0
 801037c:	f04f 0c0a 	mov.w	ip, #10
 8010380:	4619      	mov	r1, r3
 8010382:	3401      	adds	r4, #1
 8010384:	9305      	str	r3, [sp, #20]
 8010386:	4620      	mov	r0, r4
 8010388:	f810 2b01 	ldrb.w	r2, [r0], #1
 801038c:	3a30      	subs	r2, #48	@ 0x30
 801038e:	2a09      	cmp	r2, #9
 8010390:	d903      	bls.n	801039a <_svfiprintf_r+0x1a6>
 8010392:	2b00      	cmp	r3, #0
 8010394:	d0c6      	beq.n	8010324 <_svfiprintf_r+0x130>
 8010396:	9105      	str	r1, [sp, #20]
 8010398:	e7c4      	b.n	8010324 <_svfiprintf_r+0x130>
 801039a:	4604      	mov	r4, r0
 801039c:	2301      	movs	r3, #1
 801039e:	fb0c 2101 	mla	r1, ip, r1, r2
 80103a2:	e7f0      	b.n	8010386 <_svfiprintf_r+0x192>
 80103a4:	ab03      	add	r3, sp, #12
 80103a6:	9300      	str	r3, [sp, #0]
 80103a8:	462a      	mov	r2, r5
 80103aa:	4638      	mov	r0, r7
 80103ac:	4b0e      	ldr	r3, [pc, #56]	@ (80103e8 <_svfiprintf_r+0x1f4>)
 80103ae:	a904      	add	r1, sp, #16
 80103b0:	f7fc fbce 	bl	800cb50 <_printf_float>
 80103b4:	1c42      	adds	r2, r0, #1
 80103b6:	4606      	mov	r6, r0
 80103b8:	d1d6      	bne.n	8010368 <_svfiprintf_r+0x174>
 80103ba:	89ab      	ldrh	r3, [r5, #12]
 80103bc:	065b      	lsls	r3, r3, #25
 80103be:	f53f af2d 	bmi.w	801021c <_svfiprintf_r+0x28>
 80103c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80103c4:	e72c      	b.n	8010220 <_svfiprintf_r+0x2c>
 80103c6:	ab03      	add	r3, sp, #12
 80103c8:	9300      	str	r3, [sp, #0]
 80103ca:	462a      	mov	r2, r5
 80103cc:	4638      	mov	r0, r7
 80103ce:	4b06      	ldr	r3, [pc, #24]	@ (80103e8 <_svfiprintf_r+0x1f4>)
 80103d0:	a904      	add	r1, sp, #16
 80103d2:	f7fc fe5b 	bl	800d08c <_printf_i>
 80103d6:	e7ed      	b.n	80103b4 <_svfiprintf_r+0x1c0>
 80103d8:	08012f15 	.word	0x08012f15
 80103dc:	08012f1b 	.word	0x08012f1b
 80103e0:	08012f1f 	.word	0x08012f1f
 80103e4:	0800cb51 	.word	0x0800cb51
 80103e8:	0801013d 	.word	0x0801013d

080103ec <__sfputc_r>:
 80103ec:	6893      	ldr	r3, [r2, #8]
 80103ee:	b410      	push	{r4}
 80103f0:	3b01      	subs	r3, #1
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	6093      	str	r3, [r2, #8]
 80103f6:	da07      	bge.n	8010408 <__sfputc_r+0x1c>
 80103f8:	6994      	ldr	r4, [r2, #24]
 80103fa:	42a3      	cmp	r3, r4
 80103fc:	db01      	blt.n	8010402 <__sfputc_r+0x16>
 80103fe:	290a      	cmp	r1, #10
 8010400:	d102      	bne.n	8010408 <__sfputc_r+0x1c>
 8010402:	bc10      	pop	{r4}
 8010404:	f7fd baef 	b.w	800d9e6 <__swbuf_r>
 8010408:	6813      	ldr	r3, [r2, #0]
 801040a:	1c58      	adds	r0, r3, #1
 801040c:	6010      	str	r0, [r2, #0]
 801040e:	7019      	strb	r1, [r3, #0]
 8010410:	4608      	mov	r0, r1
 8010412:	bc10      	pop	{r4}
 8010414:	4770      	bx	lr

08010416 <__sfputs_r>:
 8010416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010418:	4606      	mov	r6, r0
 801041a:	460f      	mov	r7, r1
 801041c:	4614      	mov	r4, r2
 801041e:	18d5      	adds	r5, r2, r3
 8010420:	42ac      	cmp	r4, r5
 8010422:	d101      	bne.n	8010428 <__sfputs_r+0x12>
 8010424:	2000      	movs	r0, #0
 8010426:	e007      	b.n	8010438 <__sfputs_r+0x22>
 8010428:	463a      	mov	r2, r7
 801042a:	4630      	mov	r0, r6
 801042c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010430:	f7ff ffdc 	bl	80103ec <__sfputc_r>
 8010434:	1c43      	adds	r3, r0, #1
 8010436:	d1f3      	bne.n	8010420 <__sfputs_r+0xa>
 8010438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801043c <_vfiprintf_r>:
 801043c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010440:	460d      	mov	r5, r1
 8010442:	4614      	mov	r4, r2
 8010444:	4698      	mov	r8, r3
 8010446:	4606      	mov	r6, r0
 8010448:	b09d      	sub	sp, #116	@ 0x74
 801044a:	b118      	cbz	r0, 8010454 <_vfiprintf_r+0x18>
 801044c:	6a03      	ldr	r3, [r0, #32]
 801044e:	b90b      	cbnz	r3, 8010454 <_vfiprintf_r+0x18>
 8010450:	f7fd f9d0 	bl	800d7f4 <__sinit>
 8010454:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010456:	07d9      	lsls	r1, r3, #31
 8010458:	d405      	bmi.n	8010466 <_vfiprintf_r+0x2a>
 801045a:	89ab      	ldrh	r3, [r5, #12]
 801045c:	059a      	lsls	r2, r3, #22
 801045e:	d402      	bmi.n	8010466 <_vfiprintf_r+0x2a>
 8010460:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010462:	f7fd fbd2 	bl	800dc0a <__retarget_lock_acquire_recursive>
 8010466:	89ab      	ldrh	r3, [r5, #12]
 8010468:	071b      	lsls	r3, r3, #28
 801046a:	d501      	bpl.n	8010470 <_vfiprintf_r+0x34>
 801046c:	692b      	ldr	r3, [r5, #16]
 801046e:	b99b      	cbnz	r3, 8010498 <_vfiprintf_r+0x5c>
 8010470:	4629      	mov	r1, r5
 8010472:	4630      	mov	r0, r6
 8010474:	f7fd faf6 	bl	800da64 <__swsetup_r>
 8010478:	b170      	cbz	r0, 8010498 <_vfiprintf_r+0x5c>
 801047a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801047c:	07dc      	lsls	r4, r3, #31
 801047e:	d504      	bpl.n	801048a <_vfiprintf_r+0x4e>
 8010480:	f04f 30ff 	mov.w	r0, #4294967295
 8010484:	b01d      	add	sp, #116	@ 0x74
 8010486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801048a:	89ab      	ldrh	r3, [r5, #12]
 801048c:	0598      	lsls	r0, r3, #22
 801048e:	d4f7      	bmi.n	8010480 <_vfiprintf_r+0x44>
 8010490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010492:	f7fd fbbb 	bl	800dc0c <__retarget_lock_release_recursive>
 8010496:	e7f3      	b.n	8010480 <_vfiprintf_r+0x44>
 8010498:	2300      	movs	r3, #0
 801049a:	9309      	str	r3, [sp, #36]	@ 0x24
 801049c:	2320      	movs	r3, #32
 801049e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80104a2:	2330      	movs	r3, #48	@ 0x30
 80104a4:	f04f 0901 	mov.w	r9, #1
 80104a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80104ac:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8010658 <_vfiprintf_r+0x21c>
 80104b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80104b4:	4623      	mov	r3, r4
 80104b6:	469a      	mov	sl, r3
 80104b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104bc:	b10a      	cbz	r2, 80104c2 <_vfiprintf_r+0x86>
 80104be:	2a25      	cmp	r2, #37	@ 0x25
 80104c0:	d1f9      	bne.n	80104b6 <_vfiprintf_r+0x7a>
 80104c2:	ebba 0b04 	subs.w	fp, sl, r4
 80104c6:	d00b      	beq.n	80104e0 <_vfiprintf_r+0xa4>
 80104c8:	465b      	mov	r3, fp
 80104ca:	4622      	mov	r2, r4
 80104cc:	4629      	mov	r1, r5
 80104ce:	4630      	mov	r0, r6
 80104d0:	f7ff ffa1 	bl	8010416 <__sfputs_r>
 80104d4:	3001      	adds	r0, #1
 80104d6:	f000 80a7 	beq.w	8010628 <_vfiprintf_r+0x1ec>
 80104da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104dc:	445a      	add	r2, fp
 80104de:	9209      	str	r2, [sp, #36]	@ 0x24
 80104e0:	f89a 3000 	ldrb.w	r3, [sl]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	f000 809f 	beq.w	8010628 <_vfiprintf_r+0x1ec>
 80104ea:	2300      	movs	r3, #0
 80104ec:	f04f 32ff 	mov.w	r2, #4294967295
 80104f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104f4:	f10a 0a01 	add.w	sl, sl, #1
 80104f8:	9304      	str	r3, [sp, #16]
 80104fa:	9307      	str	r3, [sp, #28]
 80104fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010500:	931a      	str	r3, [sp, #104]	@ 0x68
 8010502:	4654      	mov	r4, sl
 8010504:	2205      	movs	r2, #5
 8010506:	f814 1b01 	ldrb.w	r1, [r4], #1
 801050a:	4853      	ldr	r0, [pc, #332]	@ (8010658 <_vfiprintf_r+0x21c>)
 801050c:	f7fd fb7f 	bl	800dc0e <memchr>
 8010510:	9a04      	ldr	r2, [sp, #16]
 8010512:	b9d8      	cbnz	r0, 801054c <_vfiprintf_r+0x110>
 8010514:	06d1      	lsls	r1, r2, #27
 8010516:	bf44      	itt	mi
 8010518:	2320      	movmi	r3, #32
 801051a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801051e:	0713      	lsls	r3, r2, #28
 8010520:	bf44      	itt	mi
 8010522:	232b      	movmi	r3, #43	@ 0x2b
 8010524:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010528:	f89a 3000 	ldrb.w	r3, [sl]
 801052c:	2b2a      	cmp	r3, #42	@ 0x2a
 801052e:	d015      	beq.n	801055c <_vfiprintf_r+0x120>
 8010530:	4654      	mov	r4, sl
 8010532:	2000      	movs	r0, #0
 8010534:	f04f 0c0a 	mov.w	ip, #10
 8010538:	9a07      	ldr	r2, [sp, #28]
 801053a:	4621      	mov	r1, r4
 801053c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010540:	3b30      	subs	r3, #48	@ 0x30
 8010542:	2b09      	cmp	r3, #9
 8010544:	d94b      	bls.n	80105de <_vfiprintf_r+0x1a2>
 8010546:	b1b0      	cbz	r0, 8010576 <_vfiprintf_r+0x13a>
 8010548:	9207      	str	r2, [sp, #28]
 801054a:	e014      	b.n	8010576 <_vfiprintf_r+0x13a>
 801054c:	eba0 0308 	sub.w	r3, r0, r8
 8010550:	fa09 f303 	lsl.w	r3, r9, r3
 8010554:	4313      	orrs	r3, r2
 8010556:	46a2      	mov	sl, r4
 8010558:	9304      	str	r3, [sp, #16]
 801055a:	e7d2      	b.n	8010502 <_vfiprintf_r+0xc6>
 801055c:	9b03      	ldr	r3, [sp, #12]
 801055e:	1d19      	adds	r1, r3, #4
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	9103      	str	r1, [sp, #12]
 8010564:	2b00      	cmp	r3, #0
 8010566:	bfbb      	ittet	lt
 8010568:	425b      	neglt	r3, r3
 801056a:	f042 0202 	orrlt.w	r2, r2, #2
 801056e:	9307      	strge	r3, [sp, #28]
 8010570:	9307      	strlt	r3, [sp, #28]
 8010572:	bfb8      	it	lt
 8010574:	9204      	strlt	r2, [sp, #16]
 8010576:	7823      	ldrb	r3, [r4, #0]
 8010578:	2b2e      	cmp	r3, #46	@ 0x2e
 801057a:	d10a      	bne.n	8010592 <_vfiprintf_r+0x156>
 801057c:	7863      	ldrb	r3, [r4, #1]
 801057e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010580:	d132      	bne.n	80105e8 <_vfiprintf_r+0x1ac>
 8010582:	9b03      	ldr	r3, [sp, #12]
 8010584:	3402      	adds	r4, #2
 8010586:	1d1a      	adds	r2, r3, #4
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	9203      	str	r2, [sp, #12]
 801058c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010590:	9305      	str	r3, [sp, #20]
 8010592:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 801065c <_vfiprintf_r+0x220>
 8010596:	2203      	movs	r2, #3
 8010598:	4650      	mov	r0, sl
 801059a:	7821      	ldrb	r1, [r4, #0]
 801059c:	f7fd fb37 	bl	800dc0e <memchr>
 80105a0:	b138      	cbz	r0, 80105b2 <_vfiprintf_r+0x176>
 80105a2:	2240      	movs	r2, #64	@ 0x40
 80105a4:	9b04      	ldr	r3, [sp, #16]
 80105a6:	eba0 000a 	sub.w	r0, r0, sl
 80105aa:	4082      	lsls	r2, r0
 80105ac:	4313      	orrs	r3, r2
 80105ae:	3401      	adds	r4, #1
 80105b0:	9304      	str	r3, [sp, #16]
 80105b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105b6:	2206      	movs	r2, #6
 80105b8:	4829      	ldr	r0, [pc, #164]	@ (8010660 <_vfiprintf_r+0x224>)
 80105ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80105be:	f7fd fb26 	bl	800dc0e <memchr>
 80105c2:	2800      	cmp	r0, #0
 80105c4:	d03f      	beq.n	8010646 <_vfiprintf_r+0x20a>
 80105c6:	4b27      	ldr	r3, [pc, #156]	@ (8010664 <_vfiprintf_r+0x228>)
 80105c8:	bb1b      	cbnz	r3, 8010612 <_vfiprintf_r+0x1d6>
 80105ca:	9b03      	ldr	r3, [sp, #12]
 80105cc:	3307      	adds	r3, #7
 80105ce:	f023 0307 	bic.w	r3, r3, #7
 80105d2:	3308      	adds	r3, #8
 80105d4:	9303      	str	r3, [sp, #12]
 80105d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105d8:	443b      	add	r3, r7
 80105da:	9309      	str	r3, [sp, #36]	@ 0x24
 80105dc:	e76a      	b.n	80104b4 <_vfiprintf_r+0x78>
 80105de:	460c      	mov	r4, r1
 80105e0:	2001      	movs	r0, #1
 80105e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80105e6:	e7a8      	b.n	801053a <_vfiprintf_r+0xfe>
 80105e8:	2300      	movs	r3, #0
 80105ea:	f04f 0c0a 	mov.w	ip, #10
 80105ee:	4619      	mov	r1, r3
 80105f0:	3401      	adds	r4, #1
 80105f2:	9305      	str	r3, [sp, #20]
 80105f4:	4620      	mov	r0, r4
 80105f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105fa:	3a30      	subs	r2, #48	@ 0x30
 80105fc:	2a09      	cmp	r2, #9
 80105fe:	d903      	bls.n	8010608 <_vfiprintf_r+0x1cc>
 8010600:	2b00      	cmp	r3, #0
 8010602:	d0c6      	beq.n	8010592 <_vfiprintf_r+0x156>
 8010604:	9105      	str	r1, [sp, #20]
 8010606:	e7c4      	b.n	8010592 <_vfiprintf_r+0x156>
 8010608:	4604      	mov	r4, r0
 801060a:	2301      	movs	r3, #1
 801060c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010610:	e7f0      	b.n	80105f4 <_vfiprintf_r+0x1b8>
 8010612:	ab03      	add	r3, sp, #12
 8010614:	9300      	str	r3, [sp, #0]
 8010616:	462a      	mov	r2, r5
 8010618:	4630      	mov	r0, r6
 801061a:	4b13      	ldr	r3, [pc, #76]	@ (8010668 <_vfiprintf_r+0x22c>)
 801061c:	a904      	add	r1, sp, #16
 801061e:	f7fc fa97 	bl	800cb50 <_printf_float>
 8010622:	4607      	mov	r7, r0
 8010624:	1c78      	adds	r0, r7, #1
 8010626:	d1d6      	bne.n	80105d6 <_vfiprintf_r+0x19a>
 8010628:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801062a:	07d9      	lsls	r1, r3, #31
 801062c:	d405      	bmi.n	801063a <_vfiprintf_r+0x1fe>
 801062e:	89ab      	ldrh	r3, [r5, #12]
 8010630:	059a      	lsls	r2, r3, #22
 8010632:	d402      	bmi.n	801063a <_vfiprintf_r+0x1fe>
 8010634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010636:	f7fd fae9 	bl	800dc0c <__retarget_lock_release_recursive>
 801063a:	89ab      	ldrh	r3, [r5, #12]
 801063c:	065b      	lsls	r3, r3, #25
 801063e:	f53f af1f 	bmi.w	8010480 <_vfiprintf_r+0x44>
 8010642:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010644:	e71e      	b.n	8010484 <_vfiprintf_r+0x48>
 8010646:	ab03      	add	r3, sp, #12
 8010648:	9300      	str	r3, [sp, #0]
 801064a:	462a      	mov	r2, r5
 801064c:	4630      	mov	r0, r6
 801064e:	4b06      	ldr	r3, [pc, #24]	@ (8010668 <_vfiprintf_r+0x22c>)
 8010650:	a904      	add	r1, sp, #16
 8010652:	f7fc fd1b 	bl	800d08c <_printf_i>
 8010656:	e7e4      	b.n	8010622 <_vfiprintf_r+0x1e6>
 8010658:	08012f15 	.word	0x08012f15
 801065c:	08012f1b 	.word	0x08012f1b
 8010660:	08012f1f 	.word	0x08012f1f
 8010664:	0800cb51 	.word	0x0800cb51
 8010668:	08010417 	.word	0x08010417

0801066c <__sflush_r>:
 801066c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010672:	0716      	lsls	r6, r2, #28
 8010674:	4605      	mov	r5, r0
 8010676:	460c      	mov	r4, r1
 8010678:	d454      	bmi.n	8010724 <__sflush_r+0xb8>
 801067a:	684b      	ldr	r3, [r1, #4]
 801067c:	2b00      	cmp	r3, #0
 801067e:	dc02      	bgt.n	8010686 <__sflush_r+0x1a>
 8010680:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010682:	2b00      	cmp	r3, #0
 8010684:	dd48      	ble.n	8010718 <__sflush_r+0xac>
 8010686:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010688:	2e00      	cmp	r6, #0
 801068a:	d045      	beq.n	8010718 <__sflush_r+0xac>
 801068c:	2300      	movs	r3, #0
 801068e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010692:	682f      	ldr	r7, [r5, #0]
 8010694:	6a21      	ldr	r1, [r4, #32]
 8010696:	602b      	str	r3, [r5, #0]
 8010698:	d030      	beq.n	80106fc <__sflush_r+0x90>
 801069a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801069c:	89a3      	ldrh	r3, [r4, #12]
 801069e:	0759      	lsls	r1, r3, #29
 80106a0:	d505      	bpl.n	80106ae <__sflush_r+0x42>
 80106a2:	6863      	ldr	r3, [r4, #4]
 80106a4:	1ad2      	subs	r2, r2, r3
 80106a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80106a8:	b10b      	cbz	r3, 80106ae <__sflush_r+0x42>
 80106aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80106ac:	1ad2      	subs	r2, r2, r3
 80106ae:	2300      	movs	r3, #0
 80106b0:	4628      	mov	r0, r5
 80106b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80106b4:	6a21      	ldr	r1, [r4, #32]
 80106b6:	47b0      	blx	r6
 80106b8:	1c43      	adds	r3, r0, #1
 80106ba:	89a3      	ldrh	r3, [r4, #12]
 80106bc:	d106      	bne.n	80106cc <__sflush_r+0x60>
 80106be:	6829      	ldr	r1, [r5, #0]
 80106c0:	291d      	cmp	r1, #29
 80106c2:	d82b      	bhi.n	801071c <__sflush_r+0xb0>
 80106c4:	4a28      	ldr	r2, [pc, #160]	@ (8010768 <__sflush_r+0xfc>)
 80106c6:	40ca      	lsrs	r2, r1
 80106c8:	07d6      	lsls	r6, r2, #31
 80106ca:	d527      	bpl.n	801071c <__sflush_r+0xb0>
 80106cc:	2200      	movs	r2, #0
 80106ce:	6062      	str	r2, [r4, #4]
 80106d0:	6922      	ldr	r2, [r4, #16]
 80106d2:	04d9      	lsls	r1, r3, #19
 80106d4:	6022      	str	r2, [r4, #0]
 80106d6:	d504      	bpl.n	80106e2 <__sflush_r+0x76>
 80106d8:	1c42      	adds	r2, r0, #1
 80106da:	d101      	bne.n	80106e0 <__sflush_r+0x74>
 80106dc:	682b      	ldr	r3, [r5, #0]
 80106de:	b903      	cbnz	r3, 80106e2 <__sflush_r+0x76>
 80106e0:	6560      	str	r0, [r4, #84]	@ 0x54
 80106e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80106e4:	602f      	str	r7, [r5, #0]
 80106e6:	b1b9      	cbz	r1, 8010718 <__sflush_r+0xac>
 80106e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80106ec:	4299      	cmp	r1, r3
 80106ee:	d002      	beq.n	80106f6 <__sflush_r+0x8a>
 80106f0:	4628      	mov	r0, r5
 80106f2:	f7fe f909 	bl	800e908 <_free_r>
 80106f6:	2300      	movs	r3, #0
 80106f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80106fa:	e00d      	b.n	8010718 <__sflush_r+0xac>
 80106fc:	2301      	movs	r3, #1
 80106fe:	4628      	mov	r0, r5
 8010700:	47b0      	blx	r6
 8010702:	4602      	mov	r2, r0
 8010704:	1c50      	adds	r0, r2, #1
 8010706:	d1c9      	bne.n	801069c <__sflush_r+0x30>
 8010708:	682b      	ldr	r3, [r5, #0]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d0c6      	beq.n	801069c <__sflush_r+0x30>
 801070e:	2b1d      	cmp	r3, #29
 8010710:	d001      	beq.n	8010716 <__sflush_r+0xaa>
 8010712:	2b16      	cmp	r3, #22
 8010714:	d11d      	bne.n	8010752 <__sflush_r+0xe6>
 8010716:	602f      	str	r7, [r5, #0]
 8010718:	2000      	movs	r0, #0
 801071a:	e021      	b.n	8010760 <__sflush_r+0xf4>
 801071c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010720:	b21b      	sxth	r3, r3
 8010722:	e01a      	b.n	801075a <__sflush_r+0xee>
 8010724:	690f      	ldr	r7, [r1, #16]
 8010726:	2f00      	cmp	r7, #0
 8010728:	d0f6      	beq.n	8010718 <__sflush_r+0xac>
 801072a:	0793      	lsls	r3, r2, #30
 801072c:	bf18      	it	ne
 801072e:	2300      	movne	r3, #0
 8010730:	680e      	ldr	r6, [r1, #0]
 8010732:	bf08      	it	eq
 8010734:	694b      	ldreq	r3, [r1, #20]
 8010736:	1bf6      	subs	r6, r6, r7
 8010738:	600f      	str	r7, [r1, #0]
 801073a:	608b      	str	r3, [r1, #8]
 801073c:	2e00      	cmp	r6, #0
 801073e:	ddeb      	ble.n	8010718 <__sflush_r+0xac>
 8010740:	4633      	mov	r3, r6
 8010742:	463a      	mov	r2, r7
 8010744:	4628      	mov	r0, r5
 8010746:	6a21      	ldr	r1, [r4, #32]
 8010748:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 801074c:	47e0      	blx	ip
 801074e:	2800      	cmp	r0, #0
 8010750:	dc07      	bgt.n	8010762 <__sflush_r+0xf6>
 8010752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801075a:	f04f 30ff 	mov.w	r0, #4294967295
 801075e:	81a3      	strh	r3, [r4, #12]
 8010760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010762:	4407      	add	r7, r0
 8010764:	1a36      	subs	r6, r6, r0
 8010766:	e7e9      	b.n	801073c <__sflush_r+0xd0>
 8010768:	20400001 	.word	0x20400001

0801076c <_fflush_r>:
 801076c:	b538      	push	{r3, r4, r5, lr}
 801076e:	690b      	ldr	r3, [r1, #16]
 8010770:	4605      	mov	r5, r0
 8010772:	460c      	mov	r4, r1
 8010774:	b913      	cbnz	r3, 801077c <_fflush_r+0x10>
 8010776:	2500      	movs	r5, #0
 8010778:	4628      	mov	r0, r5
 801077a:	bd38      	pop	{r3, r4, r5, pc}
 801077c:	b118      	cbz	r0, 8010786 <_fflush_r+0x1a>
 801077e:	6a03      	ldr	r3, [r0, #32]
 8010780:	b90b      	cbnz	r3, 8010786 <_fflush_r+0x1a>
 8010782:	f7fd f837 	bl	800d7f4 <__sinit>
 8010786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d0f3      	beq.n	8010776 <_fflush_r+0xa>
 801078e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010790:	07d0      	lsls	r0, r2, #31
 8010792:	d404      	bmi.n	801079e <_fflush_r+0x32>
 8010794:	0599      	lsls	r1, r3, #22
 8010796:	d402      	bmi.n	801079e <_fflush_r+0x32>
 8010798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801079a:	f7fd fa36 	bl	800dc0a <__retarget_lock_acquire_recursive>
 801079e:	4628      	mov	r0, r5
 80107a0:	4621      	mov	r1, r4
 80107a2:	f7ff ff63 	bl	801066c <__sflush_r>
 80107a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80107a8:	4605      	mov	r5, r0
 80107aa:	07da      	lsls	r2, r3, #31
 80107ac:	d4e4      	bmi.n	8010778 <_fflush_r+0xc>
 80107ae:	89a3      	ldrh	r3, [r4, #12]
 80107b0:	059b      	lsls	r3, r3, #22
 80107b2:	d4e1      	bmi.n	8010778 <_fflush_r+0xc>
 80107b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80107b6:	f7fd fa29 	bl	800dc0c <__retarget_lock_release_recursive>
 80107ba:	e7dd      	b.n	8010778 <_fflush_r+0xc>

080107bc <__swhatbuf_r>:
 80107bc:	b570      	push	{r4, r5, r6, lr}
 80107be:	460c      	mov	r4, r1
 80107c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107c4:	4615      	mov	r5, r2
 80107c6:	2900      	cmp	r1, #0
 80107c8:	461e      	mov	r6, r3
 80107ca:	b096      	sub	sp, #88	@ 0x58
 80107cc:	da0c      	bge.n	80107e8 <__swhatbuf_r+0x2c>
 80107ce:	89a3      	ldrh	r3, [r4, #12]
 80107d0:	2100      	movs	r1, #0
 80107d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80107d6:	bf14      	ite	ne
 80107d8:	2340      	movne	r3, #64	@ 0x40
 80107da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80107de:	2000      	movs	r0, #0
 80107e0:	6031      	str	r1, [r6, #0]
 80107e2:	602b      	str	r3, [r5, #0]
 80107e4:	b016      	add	sp, #88	@ 0x58
 80107e6:	bd70      	pop	{r4, r5, r6, pc}
 80107e8:	466a      	mov	r2, sp
 80107ea:	f000 f875 	bl	80108d8 <_fstat_r>
 80107ee:	2800      	cmp	r0, #0
 80107f0:	dbed      	blt.n	80107ce <__swhatbuf_r+0x12>
 80107f2:	9901      	ldr	r1, [sp, #4]
 80107f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80107f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80107fc:	4259      	negs	r1, r3
 80107fe:	4159      	adcs	r1, r3
 8010800:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010804:	e7eb      	b.n	80107de <__swhatbuf_r+0x22>

08010806 <__smakebuf_r>:
 8010806:	898b      	ldrh	r3, [r1, #12]
 8010808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801080a:	079d      	lsls	r5, r3, #30
 801080c:	4606      	mov	r6, r0
 801080e:	460c      	mov	r4, r1
 8010810:	d507      	bpl.n	8010822 <__smakebuf_r+0x1c>
 8010812:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010816:	6023      	str	r3, [r4, #0]
 8010818:	6123      	str	r3, [r4, #16]
 801081a:	2301      	movs	r3, #1
 801081c:	6163      	str	r3, [r4, #20]
 801081e:	b003      	add	sp, #12
 8010820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010822:	466a      	mov	r2, sp
 8010824:	ab01      	add	r3, sp, #4
 8010826:	f7ff ffc9 	bl	80107bc <__swhatbuf_r>
 801082a:	9f00      	ldr	r7, [sp, #0]
 801082c:	4605      	mov	r5, r0
 801082e:	4639      	mov	r1, r7
 8010830:	4630      	mov	r0, r6
 8010832:	f7fe f8db 	bl	800e9ec <_malloc_r>
 8010836:	b948      	cbnz	r0, 801084c <__smakebuf_r+0x46>
 8010838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801083c:	059a      	lsls	r2, r3, #22
 801083e:	d4ee      	bmi.n	801081e <__smakebuf_r+0x18>
 8010840:	f023 0303 	bic.w	r3, r3, #3
 8010844:	f043 0302 	orr.w	r3, r3, #2
 8010848:	81a3      	strh	r3, [r4, #12]
 801084a:	e7e2      	b.n	8010812 <__smakebuf_r+0xc>
 801084c:	89a3      	ldrh	r3, [r4, #12]
 801084e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010856:	81a3      	strh	r3, [r4, #12]
 8010858:	9b01      	ldr	r3, [sp, #4]
 801085a:	6020      	str	r0, [r4, #0]
 801085c:	b15b      	cbz	r3, 8010876 <__smakebuf_r+0x70>
 801085e:	4630      	mov	r0, r6
 8010860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010864:	f000 f84a 	bl	80108fc <_isatty_r>
 8010868:	b128      	cbz	r0, 8010876 <__smakebuf_r+0x70>
 801086a:	89a3      	ldrh	r3, [r4, #12]
 801086c:	f023 0303 	bic.w	r3, r3, #3
 8010870:	f043 0301 	orr.w	r3, r3, #1
 8010874:	81a3      	strh	r3, [r4, #12]
 8010876:	89a3      	ldrh	r3, [r4, #12]
 8010878:	431d      	orrs	r5, r3
 801087a:	81a5      	strh	r5, [r4, #12]
 801087c:	e7cf      	b.n	801081e <__smakebuf_r+0x18>

0801087e <memmove>:
 801087e:	4288      	cmp	r0, r1
 8010880:	b510      	push	{r4, lr}
 8010882:	eb01 0402 	add.w	r4, r1, r2
 8010886:	d902      	bls.n	801088e <memmove+0x10>
 8010888:	4284      	cmp	r4, r0
 801088a:	4623      	mov	r3, r4
 801088c:	d807      	bhi.n	801089e <memmove+0x20>
 801088e:	1e43      	subs	r3, r0, #1
 8010890:	42a1      	cmp	r1, r4
 8010892:	d008      	beq.n	80108a6 <memmove+0x28>
 8010894:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010898:	f803 2f01 	strb.w	r2, [r3, #1]!
 801089c:	e7f8      	b.n	8010890 <memmove+0x12>
 801089e:	4601      	mov	r1, r0
 80108a0:	4402      	add	r2, r0
 80108a2:	428a      	cmp	r2, r1
 80108a4:	d100      	bne.n	80108a8 <memmove+0x2a>
 80108a6:	bd10      	pop	{r4, pc}
 80108a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80108ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80108b0:	e7f7      	b.n	80108a2 <memmove+0x24>

080108b2 <strncmp>:
 80108b2:	b510      	push	{r4, lr}
 80108b4:	b16a      	cbz	r2, 80108d2 <strncmp+0x20>
 80108b6:	3901      	subs	r1, #1
 80108b8:	1884      	adds	r4, r0, r2
 80108ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108be:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80108c2:	429a      	cmp	r2, r3
 80108c4:	d103      	bne.n	80108ce <strncmp+0x1c>
 80108c6:	42a0      	cmp	r0, r4
 80108c8:	d001      	beq.n	80108ce <strncmp+0x1c>
 80108ca:	2a00      	cmp	r2, #0
 80108cc:	d1f5      	bne.n	80108ba <strncmp+0x8>
 80108ce:	1ad0      	subs	r0, r2, r3
 80108d0:	bd10      	pop	{r4, pc}
 80108d2:	4610      	mov	r0, r2
 80108d4:	e7fc      	b.n	80108d0 <strncmp+0x1e>
	...

080108d8 <_fstat_r>:
 80108d8:	b538      	push	{r3, r4, r5, lr}
 80108da:	2300      	movs	r3, #0
 80108dc:	4d06      	ldr	r5, [pc, #24]	@ (80108f8 <_fstat_r+0x20>)
 80108de:	4604      	mov	r4, r0
 80108e0:	4608      	mov	r0, r1
 80108e2:	4611      	mov	r1, r2
 80108e4:	602b      	str	r3, [r5, #0]
 80108e6:	f7f7 ff38 	bl	800875a <_fstat>
 80108ea:	1c43      	adds	r3, r0, #1
 80108ec:	d102      	bne.n	80108f4 <_fstat_r+0x1c>
 80108ee:	682b      	ldr	r3, [r5, #0]
 80108f0:	b103      	cbz	r3, 80108f4 <_fstat_r+0x1c>
 80108f2:	6023      	str	r3, [r4, #0]
 80108f4:	bd38      	pop	{r3, r4, r5, pc}
 80108f6:	bf00      	nop
 80108f8:	2000964c 	.word	0x2000964c

080108fc <_isatty_r>:
 80108fc:	b538      	push	{r3, r4, r5, lr}
 80108fe:	2300      	movs	r3, #0
 8010900:	4d05      	ldr	r5, [pc, #20]	@ (8010918 <_isatty_r+0x1c>)
 8010902:	4604      	mov	r4, r0
 8010904:	4608      	mov	r0, r1
 8010906:	602b      	str	r3, [r5, #0]
 8010908:	f7f7 ff2c 	bl	8008764 <_isatty>
 801090c:	1c43      	adds	r3, r0, #1
 801090e:	d102      	bne.n	8010916 <_isatty_r+0x1a>
 8010910:	682b      	ldr	r3, [r5, #0]
 8010912:	b103      	cbz	r3, 8010916 <_isatty_r+0x1a>
 8010914:	6023      	str	r3, [r4, #0]
 8010916:	bd38      	pop	{r3, r4, r5, pc}
 8010918:	2000964c 	.word	0x2000964c

0801091c <_sbrk_r>:
 801091c:	b538      	push	{r3, r4, r5, lr}
 801091e:	2300      	movs	r3, #0
 8010920:	4d05      	ldr	r5, [pc, #20]	@ (8010938 <_sbrk_r+0x1c>)
 8010922:	4604      	mov	r4, r0
 8010924:	4608      	mov	r0, r1
 8010926:	602b      	str	r3, [r5, #0]
 8010928:	f7f7 ff20 	bl	800876c <_sbrk>
 801092c:	1c43      	adds	r3, r0, #1
 801092e:	d102      	bne.n	8010936 <_sbrk_r+0x1a>
 8010930:	682b      	ldr	r3, [r5, #0]
 8010932:	b103      	cbz	r3, 8010936 <_sbrk_r+0x1a>
 8010934:	6023      	str	r3, [r4, #0]
 8010936:	bd38      	pop	{r3, r4, r5, pc}
 8010938:	2000964c 	.word	0x2000964c

0801093c <nan>:
 801093c:	2000      	movs	r0, #0
 801093e:	4901      	ldr	r1, [pc, #4]	@ (8010944 <nan+0x8>)
 8010940:	4770      	bx	lr
 8010942:	bf00      	nop
 8010944:	7ff80000 	.word	0x7ff80000

08010948 <__assert_func>:
 8010948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801094a:	4614      	mov	r4, r2
 801094c:	461a      	mov	r2, r3
 801094e:	4b09      	ldr	r3, [pc, #36]	@ (8010974 <__assert_func+0x2c>)
 8010950:	4605      	mov	r5, r0
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	68d8      	ldr	r0, [r3, #12]
 8010956:	b14c      	cbz	r4, 801096c <__assert_func+0x24>
 8010958:	4b07      	ldr	r3, [pc, #28]	@ (8010978 <__assert_func+0x30>)
 801095a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801095e:	9100      	str	r1, [sp, #0]
 8010960:	462b      	mov	r3, r5
 8010962:	4906      	ldr	r1, [pc, #24]	@ (801097c <__assert_func+0x34>)
 8010964:	f000 fba8 	bl	80110b8 <fiprintf>
 8010968:	f000 fbb8 	bl	80110dc <abort>
 801096c:	4b04      	ldr	r3, [pc, #16]	@ (8010980 <__assert_func+0x38>)
 801096e:	461c      	mov	r4, r3
 8010970:	e7f3      	b.n	801095a <__assert_func+0x12>
 8010972:	bf00      	nop
 8010974:	200043b0 	.word	0x200043b0
 8010978:	08012f2e 	.word	0x08012f2e
 801097c:	08012f3b 	.word	0x08012f3b
 8010980:	08012f69 	.word	0x08012f69

08010984 <_calloc_r>:
 8010984:	b570      	push	{r4, r5, r6, lr}
 8010986:	fba1 5402 	umull	r5, r4, r1, r2
 801098a:	b934      	cbnz	r4, 801099a <_calloc_r+0x16>
 801098c:	4629      	mov	r1, r5
 801098e:	f7fe f82d 	bl	800e9ec <_malloc_r>
 8010992:	4606      	mov	r6, r0
 8010994:	b928      	cbnz	r0, 80109a2 <_calloc_r+0x1e>
 8010996:	4630      	mov	r0, r6
 8010998:	bd70      	pop	{r4, r5, r6, pc}
 801099a:	220c      	movs	r2, #12
 801099c:	2600      	movs	r6, #0
 801099e:	6002      	str	r2, [r0, #0]
 80109a0:	e7f9      	b.n	8010996 <_calloc_r+0x12>
 80109a2:	462a      	mov	r2, r5
 80109a4:	4621      	mov	r1, r4
 80109a6:	f7fd f8b3 	bl	800db10 <memset>
 80109aa:	e7f4      	b.n	8010996 <_calloc_r+0x12>

080109ac <rshift>:
 80109ac:	6903      	ldr	r3, [r0, #16]
 80109ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80109b6:	f100 0414 	add.w	r4, r0, #20
 80109ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 80109be:	dd46      	ble.n	8010a4e <rshift+0xa2>
 80109c0:	f011 011f 	ands.w	r1, r1, #31
 80109c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80109c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80109cc:	d10c      	bne.n	80109e8 <rshift+0x3c>
 80109ce:	4629      	mov	r1, r5
 80109d0:	f100 0710 	add.w	r7, r0, #16
 80109d4:	42b1      	cmp	r1, r6
 80109d6:	d335      	bcc.n	8010a44 <rshift+0x98>
 80109d8:	1a9b      	subs	r3, r3, r2
 80109da:	009b      	lsls	r3, r3, #2
 80109dc:	1eea      	subs	r2, r5, #3
 80109de:	4296      	cmp	r6, r2
 80109e0:	bf38      	it	cc
 80109e2:	2300      	movcc	r3, #0
 80109e4:	4423      	add	r3, r4
 80109e6:	e015      	b.n	8010a14 <rshift+0x68>
 80109e8:	46a1      	mov	r9, r4
 80109ea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80109ee:	f1c1 0820 	rsb	r8, r1, #32
 80109f2:	40cf      	lsrs	r7, r1
 80109f4:	f105 0e04 	add.w	lr, r5, #4
 80109f8:	4576      	cmp	r6, lr
 80109fa:	46f4      	mov	ip, lr
 80109fc:	d816      	bhi.n	8010a2c <rshift+0x80>
 80109fe:	1a9a      	subs	r2, r3, r2
 8010a00:	0092      	lsls	r2, r2, #2
 8010a02:	3a04      	subs	r2, #4
 8010a04:	3501      	adds	r5, #1
 8010a06:	42ae      	cmp	r6, r5
 8010a08:	bf38      	it	cc
 8010a0a:	2200      	movcc	r2, #0
 8010a0c:	18a3      	adds	r3, r4, r2
 8010a0e:	50a7      	str	r7, [r4, r2]
 8010a10:	b107      	cbz	r7, 8010a14 <rshift+0x68>
 8010a12:	3304      	adds	r3, #4
 8010a14:	42a3      	cmp	r3, r4
 8010a16:	eba3 0204 	sub.w	r2, r3, r4
 8010a1a:	bf08      	it	eq
 8010a1c:	2300      	moveq	r3, #0
 8010a1e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010a22:	6102      	str	r2, [r0, #16]
 8010a24:	bf08      	it	eq
 8010a26:	6143      	streq	r3, [r0, #20]
 8010a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a2c:	f8dc c000 	ldr.w	ip, [ip]
 8010a30:	fa0c fc08 	lsl.w	ip, ip, r8
 8010a34:	ea4c 0707 	orr.w	r7, ip, r7
 8010a38:	f849 7b04 	str.w	r7, [r9], #4
 8010a3c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010a40:	40cf      	lsrs	r7, r1
 8010a42:	e7d9      	b.n	80109f8 <rshift+0x4c>
 8010a44:	f851 cb04 	ldr.w	ip, [r1], #4
 8010a48:	f847 cf04 	str.w	ip, [r7, #4]!
 8010a4c:	e7c2      	b.n	80109d4 <rshift+0x28>
 8010a4e:	4623      	mov	r3, r4
 8010a50:	e7e0      	b.n	8010a14 <rshift+0x68>

08010a52 <__hexdig_fun>:
 8010a52:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010a56:	2b09      	cmp	r3, #9
 8010a58:	d802      	bhi.n	8010a60 <__hexdig_fun+0xe>
 8010a5a:	3820      	subs	r0, #32
 8010a5c:	b2c0      	uxtb	r0, r0
 8010a5e:	4770      	bx	lr
 8010a60:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010a64:	2b05      	cmp	r3, #5
 8010a66:	d801      	bhi.n	8010a6c <__hexdig_fun+0x1a>
 8010a68:	3847      	subs	r0, #71	@ 0x47
 8010a6a:	e7f7      	b.n	8010a5c <__hexdig_fun+0xa>
 8010a6c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010a70:	2b05      	cmp	r3, #5
 8010a72:	d801      	bhi.n	8010a78 <__hexdig_fun+0x26>
 8010a74:	3827      	subs	r0, #39	@ 0x27
 8010a76:	e7f1      	b.n	8010a5c <__hexdig_fun+0xa>
 8010a78:	2000      	movs	r0, #0
 8010a7a:	4770      	bx	lr

08010a7c <__gethex>:
 8010a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a80:	468a      	mov	sl, r1
 8010a82:	4690      	mov	r8, r2
 8010a84:	b085      	sub	sp, #20
 8010a86:	9302      	str	r3, [sp, #8]
 8010a88:	680b      	ldr	r3, [r1, #0]
 8010a8a:	9001      	str	r0, [sp, #4]
 8010a8c:	1c9c      	adds	r4, r3, #2
 8010a8e:	46a1      	mov	r9, r4
 8010a90:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010a94:	2830      	cmp	r0, #48	@ 0x30
 8010a96:	d0fa      	beq.n	8010a8e <__gethex+0x12>
 8010a98:	eba9 0303 	sub.w	r3, r9, r3
 8010a9c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010aa0:	f7ff ffd7 	bl	8010a52 <__hexdig_fun>
 8010aa4:	4605      	mov	r5, r0
 8010aa6:	2800      	cmp	r0, #0
 8010aa8:	d168      	bne.n	8010b7c <__gethex+0x100>
 8010aaa:	2201      	movs	r2, #1
 8010aac:	4648      	mov	r0, r9
 8010aae:	499f      	ldr	r1, [pc, #636]	@ (8010d2c <__gethex+0x2b0>)
 8010ab0:	f7ff feff 	bl	80108b2 <strncmp>
 8010ab4:	4607      	mov	r7, r0
 8010ab6:	2800      	cmp	r0, #0
 8010ab8:	d167      	bne.n	8010b8a <__gethex+0x10e>
 8010aba:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010abe:	4626      	mov	r6, r4
 8010ac0:	f7ff ffc7 	bl	8010a52 <__hexdig_fun>
 8010ac4:	2800      	cmp	r0, #0
 8010ac6:	d062      	beq.n	8010b8e <__gethex+0x112>
 8010ac8:	4623      	mov	r3, r4
 8010aca:	7818      	ldrb	r0, [r3, #0]
 8010acc:	4699      	mov	r9, r3
 8010ace:	2830      	cmp	r0, #48	@ 0x30
 8010ad0:	f103 0301 	add.w	r3, r3, #1
 8010ad4:	d0f9      	beq.n	8010aca <__gethex+0x4e>
 8010ad6:	f7ff ffbc 	bl	8010a52 <__hexdig_fun>
 8010ada:	fab0 f580 	clz	r5, r0
 8010ade:	f04f 0b01 	mov.w	fp, #1
 8010ae2:	096d      	lsrs	r5, r5, #5
 8010ae4:	464a      	mov	r2, r9
 8010ae6:	4616      	mov	r6, r2
 8010ae8:	7830      	ldrb	r0, [r6, #0]
 8010aea:	3201      	adds	r2, #1
 8010aec:	f7ff ffb1 	bl	8010a52 <__hexdig_fun>
 8010af0:	2800      	cmp	r0, #0
 8010af2:	d1f8      	bne.n	8010ae6 <__gethex+0x6a>
 8010af4:	2201      	movs	r2, #1
 8010af6:	4630      	mov	r0, r6
 8010af8:	498c      	ldr	r1, [pc, #560]	@ (8010d2c <__gethex+0x2b0>)
 8010afa:	f7ff feda 	bl	80108b2 <strncmp>
 8010afe:	2800      	cmp	r0, #0
 8010b00:	d13f      	bne.n	8010b82 <__gethex+0x106>
 8010b02:	b944      	cbnz	r4, 8010b16 <__gethex+0x9a>
 8010b04:	1c74      	adds	r4, r6, #1
 8010b06:	4622      	mov	r2, r4
 8010b08:	4616      	mov	r6, r2
 8010b0a:	7830      	ldrb	r0, [r6, #0]
 8010b0c:	3201      	adds	r2, #1
 8010b0e:	f7ff ffa0 	bl	8010a52 <__hexdig_fun>
 8010b12:	2800      	cmp	r0, #0
 8010b14:	d1f8      	bne.n	8010b08 <__gethex+0x8c>
 8010b16:	1ba4      	subs	r4, r4, r6
 8010b18:	00a7      	lsls	r7, r4, #2
 8010b1a:	7833      	ldrb	r3, [r6, #0]
 8010b1c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010b20:	2b50      	cmp	r3, #80	@ 0x50
 8010b22:	d13e      	bne.n	8010ba2 <__gethex+0x126>
 8010b24:	7873      	ldrb	r3, [r6, #1]
 8010b26:	2b2b      	cmp	r3, #43	@ 0x2b
 8010b28:	d033      	beq.n	8010b92 <__gethex+0x116>
 8010b2a:	2b2d      	cmp	r3, #45	@ 0x2d
 8010b2c:	d034      	beq.n	8010b98 <__gethex+0x11c>
 8010b2e:	2400      	movs	r4, #0
 8010b30:	1c71      	adds	r1, r6, #1
 8010b32:	7808      	ldrb	r0, [r1, #0]
 8010b34:	f7ff ff8d 	bl	8010a52 <__hexdig_fun>
 8010b38:	1e43      	subs	r3, r0, #1
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	2b18      	cmp	r3, #24
 8010b3e:	d830      	bhi.n	8010ba2 <__gethex+0x126>
 8010b40:	f1a0 0210 	sub.w	r2, r0, #16
 8010b44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010b48:	f7ff ff83 	bl	8010a52 <__hexdig_fun>
 8010b4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8010b50:	fa5f fc8c 	uxtb.w	ip, ip
 8010b54:	f1bc 0f18 	cmp.w	ip, #24
 8010b58:	f04f 030a 	mov.w	r3, #10
 8010b5c:	d91e      	bls.n	8010b9c <__gethex+0x120>
 8010b5e:	b104      	cbz	r4, 8010b62 <__gethex+0xe6>
 8010b60:	4252      	negs	r2, r2
 8010b62:	4417      	add	r7, r2
 8010b64:	f8ca 1000 	str.w	r1, [sl]
 8010b68:	b1ed      	cbz	r5, 8010ba6 <__gethex+0x12a>
 8010b6a:	f1bb 0f00 	cmp.w	fp, #0
 8010b6e:	bf0c      	ite	eq
 8010b70:	2506      	moveq	r5, #6
 8010b72:	2500      	movne	r5, #0
 8010b74:	4628      	mov	r0, r5
 8010b76:	b005      	add	sp, #20
 8010b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b7c:	2500      	movs	r5, #0
 8010b7e:	462c      	mov	r4, r5
 8010b80:	e7b0      	b.n	8010ae4 <__gethex+0x68>
 8010b82:	2c00      	cmp	r4, #0
 8010b84:	d1c7      	bne.n	8010b16 <__gethex+0x9a>
 8010b86:	4627      	mov	r7, r4
 8010b88:	e7c7      	b.n	8010b1a <__gethex+0x9e>
 8010b8a:	464e      	mov	r6, r9
 8010b8c:	462f      	mov	r7, r5
 8010b8e:	2501      	movs	r5, #1
 8010b90:	e7c3      	b.n	8010b1a <__gethex+0x9e>
 8010b92:	2400      	movs	r4, #0
 8010b94:	1cb1      	adds	r1, r6, #2
 8010b96:	e7cc      	b.n	8010b32 <__gethex+0xb6>
 8010b98:	2401      	movs	r4, #1
 8010b9a:	e7fb      	b.n	8010b94 <__gethex+0x118>
 8010b9c:	fb03 0002 	mla	r0, r3, r2, r0
 8010ba0:	e7ce      	b.n	8010b40 <__gethex+0xc4>
 8010ba2:	4631      	mov	r1, r6
 8010ba4:	e7de      	b.n	8010b64 <__gethex+0xe8>
 8010ba6:	4629      	mov	r1, r5
 8010ba8:	eba6 0309 	sub.w	r3, r6, r9
 8010bac:	3b01      	subs	r3, #1
 8010bae:	2b07      	cmp	r3, #7
 8010bb0:	dc0a      	bgt.n	8010bc8 <__gethex+0x14c>
 8010bb2:	9801      	ldr	r0, [sp, #4]
 8010bb4:	f7fd ffa6 	bl	800eb04 <_Balloc>
 8010bb8:	4604      	mov	r4, r0
 8010bba:	b940      	cbnz	r0, 8010bce <__gethex+0x152>
 8010bbc:	4602      	mov	r2, r0
 8010bbe:	21e4      	movs	r1, #228	@ 0xe4
 8010bc0:	4b5b      	ldr	r3, [pc, #364]	@ (8010d30 <__gethex+0x2b4>)
 8010bc2:	485c      	ldr	r0, [pc, #368]	@ (8010d34 <__gethex+0x2b8>)
 8010bc4:	f7ff fec0 	bl	8010948 <__assert_func>
 8010bc8:	3101      	adds	r1, #1
 8010bca:	105b      	asrs	r3, r3, #1
 8010bcc:	e7ef      	b.n	8010bae <__gethex+0x132>
 8010bce:	2300      	movs	r3, #0
 8010bd0:	f100 0a14 	add.w	sl, r0, #20
 8010bd4:	4655      	mov	r5, sl
 8010bd6:	469b      	mov	fp, r3
 8010bd8:	45b1      	cmp	r9, r6
 8010bda:	d337      	bcc.n	8010c4c <__gethex+0x1d0>
 8010bdc:	f845 bb04 	str.w	fp, [r5], #4
 8010be0:	eba5 050a 	sub.w	r5, r5, sl
 8010be4:	10ad      	asrs	r5, r5, #2
 8010be6:	6125      	str	r5, [r4, #16]
 8010be8:	4658      	mov	r0, fp
 8010bea:	f7fe f87d 	bl	800ece8 <__hi0bits>
 8010bee:	016d      	lsls	r5, r5, #5
 8010bf0:	f8d8 6000 	ldr.w	r6, [r8]
 8010bf4:	1a2d      	subs	r5, r5, r0
 8010bf6:	42b5      	cmp	r5, r6
 8010bf8:	dd54      	ble.n	8010ca4 <__gethex+0x228>
 8010bfa:	1bad      	subs	r5, r5, r6
 8010bfc:	4629      	mov	r1, r5
 8010bfe:	4620      	mov	r0, r4
 8010c00:	f7fe fbff 	bl	800f402 <__any_on>
 8010c04:	4681      	mov	r9, r0
 8010c06:	b178      	cbz	r0, 8010c28 <__gethex+0x1ac>
 8010c08:	f04f 0901 	mov.w	r9, #1
 8010c0c:	1e6b      	subs	r3, r5, #1
 8010c0e:	1159      	asrs	r1, r3, #5
 8010c10:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010c14:	f003 021f 	and.w	r2, r3, #31
 8010c18:	fa09 f202 	lsl.w	r2, r9, r2
 8010c1c:	420a      	tst	r2, r1
 8010c1e:	d003      	beq.n	8010c28 <__gethex+0x1ac>
 8010c20:	454b      	cmp	r3, r9
 8010c22:	dc36      	bgt.n	8010c92 <__gethex+0x216>
 8010c24:	f04f 0902 	mov.w	r9, #2
 8010c28:	4629      	mov	r1, r5
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	f7ff febe 	bl	80109ac <rshift>
 8010c30:	442f      	add	r7, r5
 8010c32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010c36:	42bb      	cmp	r3, r7
 8010c38:	da42      	bge.n	8010cc0 <__gethex+0x244>
 8010c3a:	4621      	mov	r1, r4
 8010c3c:	9801      	ldr	r0, [sp, #4]
 8010c3e:	f7fd ffa1 	bl	800eb84 <_Bfree>
 8010c42:	2300      	movs	r3, #0
 8010c44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c46:	25a3      	movs	r5, #163	@ 0xa3
 8010c48:	6013      	str	r3, [r2, #0]
 8010c4a:	e793      	b.n	8010b74 <__gethex+0xf8>
 8010c4c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010c50:	2a2e      	cmp	r2, #46	@ 0x2e
 8010c52:	d012      	beq.n	8010c7a <__gethex+0x1fe>
 8010c54:	2b20      	cmp	r3, #32
 8010c56:	d104      	bne.n	8010c62 <__gethex+0x1e6>
 8010c58:	f845 bb04 	str.w	fp, [r5], #4
 8010c5c:	f04f 0b00 	mov.w	fp, #0
 8010c60:	465b      	mov	r3, fp
 8010c62:	7830      	ldrb	r0, [r6, #0]
 8010c64:	9303      	str	r3, [sp, #12]
 8010c66:	f7ff fef4 	bl	8010a52 <__hexdig_fun>
 8010c6a:	9b03      	ldr	r3, [sp, #12]
 8010c6c:	f000 000f 	and.w	r0, r0, #15
 8010c70:	4098      	lsls	r0, r3
 8010c72:	ea4b 0b00 	orr.w	fp, fp, r0
 8010c76:	3304      	adds	r3, #4
 8010c78:	e7ae      	b.n	8010bd8 <__gethex+0x15c>
 8010c7a:	45b1      	cmp	r9, r6
 8010c7c:	d8ea      	bhi.n	8010c54 <__gethex+0x1d8>
 8010c7e:	2201      	movs	r2, #1
 8010c80:	4630      	mov	r0, r6
 8010c82:	492a      	ldr	r1, [pc, #168]	@ (8010d2c <__gethex+0x2b0>)
 8010c84:	9303      	str	r3, [sp, #12]
 8010c86:	f7ff fe14 	bl	80108b2 <strncmp>
 8010c8a:	9b03      	ldr	r3, [sp, #12]
 8010c8c:	2800      	cmp	r0, #0
 8010c8e:	d1e1      	bne.n	8010c54 <__gethex+0x1d8>
 8010c90:	e7a2      	b.n	8010bd8 <__gethex+0x15c>
 8010c92:	4620      	mov	r0, r4
 8010c94:	1ea9      	subs	r1, r5, #2
 8010c96:	f7fe fbb4 	bl	800f402 <__any_on>
 8010c9a:	2800      	cmp	r0, #0
 8010c9c:	d0c2      	beq.n	8010c24 <__gethex+0x1a8>
 8010c9e:	f04f 0903 	mov.w	r9, #3
 8010ca2:	e7c1      	b.n	8010c28 <__gethex+0x1ac>
 8010ca4:	da09      	bge.n	8010cba <__gethex+0x23e>
 8010ca6:	1b75      	subs	r5, r6, r5
 8010ca8:	4621      	mov	r1, r4
 8010caa:	462a      	mov	r2, r5
 8010cac:	9801      	ldr	r0, [sp, #4]
 8010cae:	f7fe f979 	bl	800efa4 <__lshift>
 8010cb2:	4604      	mov	r4, r0
 8010cb4:	1b7f      	subs	r7, r7, r5
 8010cb6:	f100 0a14 	add.w	sl, r0, #20
 8010cba:	f04f 0900 	mov.w	r9, #0
 8010cbe:	e7b8      	b.n	8010c32 <__gethex+0x1b6>
 8010cc0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010cc4:	42bd      	cmp	r5, r7
 8010cc6:	dd6f      	ble.n	8010da8 <__gethex+0x32c>
 8010cc8:	1bed      	subs	r5, r5, r7
 8010cca:	42ae      	cmp	r6, r5
 8010ccc:	dc34      	bgt.n	8010d38 <__gethex+0x2bc>
 8010cce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010cd2:	2b02      	cmp	r3, #2
 8010cd4:	d022      	beq.n	8010d1c <__gethex+0x2a0>
 8010cd6:	2b03      	cmp	r3, #3
 8010cd8:	d024      	beq.n	8010d24 <__gethex+0x2a8>
 8010cda:	2b01      	cmp	r3, #1
 8010cdc:	d115      	bne.n	8010d0a <__gethex+0x28e>
 8010cde:	42ae      	cmp	r6, r5
 8010ce0:	d113      	bne.n	8010d0a <__gethex+0x28e>
 8010ce2:	2e01      	cmp	r6, #1
 8010ce4:	d10b      	bne.n	8010cfe <__gethex+0x282>
 8010ce6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010cea:	9a02      	ldr	r2, [sp, #8]
 8010cec:	2562      	movs	r5, #98	@ 0x62
 8010cee:	6013      	str	r3, [r2, #0]
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	6123      	str	r3, [r4, #16]
 8010cf4:	f8ca 3000 	str.w	r3, [sl]
 8010cf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cfa:	601c      	str	r4, [r3, #0]
 8010cfc:	e73a      	b.n	8010b74 <__gethex+0xf8>
 8010cfe:	4620      	mov	r0, r4
 8010d00:	1e71      	subs	r1, r6, #1
 8010d02:	f7fe fb7e 	bl	800f402 <__any_on>
 8010d06:	2800      	cmp	r0, #0
 8010d08:	d1ed      	bne.n	8010ce6 <__gethex+0x26a>
 8010d0a:	4621      	mov	r1, r4
 8010d0c:	9801      	ldr	r0, [sp, #4]
 8010d0e:	f7fd ff39 	bl	800eb84 <_Bfree>
 8010d12:	2300      	movs	r3, #0
 8010d14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010d16:	2550      	movs	r5, #80	@ 0x50
 8010d18:	6013      	str	r3, [r2, #0]
 8010d1a:	e72b      	b.n	8010b74 <__gethex+0xf8>
 8010d1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d1f3      	bne.n	8010d0a <__gethex+0x28e>
 8010d22:	e7e0      	b.n	8010ce6 <__gethex+0x26a>
 8010d24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d1dd      	bne.n	8010ce6 <__gethex+0x26a>
 8010d2a:	e7ee      	b.n	8010d0a <__gethex+0x28e>
 8010d2c:	08012f13 	.word	0x08012f13
 8010d30:	08012ea9 	.word	0x08012ea9
 8010d34:	08012f6a 	.word	0x08012f6a
 8010d38:	1e6f      	subs	r7, r5, #1
 8010d3a:	f1b9 0f00 	cmp.w	r9, #0
 8010d3e:	d130      	bne.n	8010da2 <__gethex+0x326>
 8010d40:	b127      	cbz	r7, 8010d4c <__gethex+0x2d0>
 8010d42:	4639      	mov	r1, r7
 8010d44:	4620      	mov	r0, r4
 8010d46:	f7fe fb5c 	bl	800f402 <__any_on>
 8010d4a:	4681      	mov	r9, r0
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	4629      	mov	r1, r5
 8010d50:	1b76      	subs	r6, r6, r5
 8010d52:	2502      	movs	r5, #2
 8010d54:	117a      	asrs	r2, r7, #5
 8010d56:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010d5a:	f007 071f 	and.w	r7, r7, #31
 8010d5e:	40bb      	lsls	r3, r7
 8010d60:	4213      	tst	r3, r2
 8010d62:	4620      	mov	r0, r4
 8010d64:	bf18      	it	ne
 8010d66:	f049 0902 	orrne.w	r9, r9, #2
 8010d6a:	f7ff fe1f 	bl	80109ac <rshift>
 8010d6e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010d72:	f1b9 0f00 	cmp.w	r9, #0
 8010d76:	d047      	beq.n	8010e08 <__gethex+0x38c>
 8010d78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010d7c:	2b02      	cmp	r3, #2
 8010d7e:	d015      	beq.n	8010dac <__gethex+0x330>
 8010d80:	2b03      	cmp	r3, #3
 8010d82:	d017      	beq.n	8010db4 <__gethex+0x338>
 8010d84:	2b01      	cmp	r3, #1
 8010d86:	d109      	bne.n	8010d9c <__gethex+0x320>
 8010d88:	f019 0f02 	tst.w	r9, #2
 8010d8c:	d006      	beq.n	8010d9c <__gethex+0x320>
 8010d8e:	f8da 3000 	ldr.w	r3, [sl]
 8010d92:	ea49 0903 	orr.w	r9, r9, r3
 8010d96:	f019 0f01 	tst.w	r9, #1
 8010d9a:	d10e      	bne.n	8010dba <__gethex+0x33e>
 8010d9c:	f045 0510 	orr.w	r5, r5, #16
 8010da0:	e032      	b.n	8010e08 <__gethex+0x38c>
 8010da2:	f04f 0901 	mov.w	r9, #1
 8010da6:	e7d1      	b.n	8010d4c <__gethex+0x2d0>
 8010da8:	2501      	movs	r5, #1
 8010daa:	e7e2      	b.n	8010d72 <__gethex+0x2f6>
 8010dac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010dae:	f1c3 0301 	rsb	r3, r3, #1
 8010db2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010db4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d0f0      	beq.n	8010d9c <__gethex+0x320>
 8010dba:	f04f 0c00 	mov.w	ip, #0
 8010dbe:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010dc2:	f104 0314 	add.w	r3, r4, #20
 8010dc6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010dca:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010dd4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010dd8:	d01b      	beq.n	8010e12 <__gethex+0x396>
 8010dda:	3201      	adds	r2, #1
 8010ddc:	6002      	str	r2, [r0, #0]
 8010dde:	2d02      	cmp	r5, #2
 8010de0:	f104 0314 	add.w	r3, r4, #20
 8010de4:	d13c      	bne.n	8010e60 <__gethex+0x3e4>
 8010de6:	f8d8 2000 	ldr.w	r2, [r8]
 8010dea:	3a01      	subs	r2, #1
 8010dec:	42b2      	cmp	r2, r6
 8010dee:	d109      	bne.n	8010e04 <__gethex+0x388>
 8010df0:	2201      	movs	r2, #1
 8010df2:	1171      	asrs	r1, r6, #5
 8010df4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010df8:	f006 061f 	and.w	r6, r6, #31
 8010dfc:	fa02 f606 	lsl.w	r6, r2, r6
 8010e00:	421e      	tst	r6, r3
 8010e02:	d13a      	bne.n	8010e7a <__gethex+0x3fe>
 8010e04:	f045 0520 	orr.w	r5, r5, #32
 8010e08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e0a:	601c      	str	r4, [r3, #0]
 8010e0c:	9b02      	ldr	r3, [sp, #8]
 8010e0e:	601f      	str	r7, [r3, #0]
 8010e10:	e6b0      	b.n	8010b74 <__gethex+0xf8>
 8010e12:	4299      	cmp	r1, r3
 8010e14:	f843 cc04 	str.w	ip, [r3, #-4]
 8010e18:	d8d9      	bhi.n	8010dce <__gethex+0x352>
 8010e1a:	68a3      	ldr	r3, [r4, #8]
 8010e1c:	459b      	cmp	fp, r3
 8010e1e:	db17      	blt.n	8010e50 <__gethex+0x3d4>
 8010e20:	6861      	ldr	r1, [r4, #4]
 8010e22:	9801      	ldr	r0, [sp, #4]
 8010e24:	3101      	adds	r1, #1
 8010e26:	f7fd fe6d 	bl	800eb04 <_Balloc>
 8010e2a:	4681      	mov	r9, r0
 8010e2c:	b918      	cbnz	r0, 8010e36 <__gethex+0x3ba>
 8010e2e:	4602      	mov	r2, r0
 8010e30:	2184      	movs	r1, #132	@ 0x84
 8010e32:	4b19      	ldr	r3, [pc, #100]	@ (8010e98 <__gethex+0x41c>)
 8010e34:	e6c5      	b.n	8010bc2 <__gethex+0x146>
 8010e36:	6922      	ldr	r2, [r4, #16]
 8010e38:	f104 010c 	add.w	r1, r4, #12
 8010e3c:	3202      	adds	r2, #2
 8010e3e:	0092      	lsls	r2, r2, #2
 8010e40:	300c      	adds	r0, #12
 8010e42:	f7fc fef2 	bl	800dc2a <memcpy>
 8010e46:	4621      	mov	r1, r4
 8010e48:	9801      	ldr	r0, [sp, #4]
 8010e4a:	f7fd fe9b 	bl	800eb84 <_Bfree>
 8010e4e:	464c      	mov	r4, r9
 8010e50:	6923      	ldr	r3, [r4, #16]
 8010e52:	1c5a      	adds	r2, r3, #1
 8010e54:	6122      	str	r2, [r4, #16]
 8010e56:	2201      	movs	r2, #1
 8010e58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010e5c:	615a      	str	r2, [r3, #20]
 8010e5e:	e7be      	b.n	8010dde <__gethex+0x362>
 8010e60:	6922      	ldr	r2, [r4, #16]
 8010e62:	455a      	cmp	r2, fp
 8010e64:	dd0b      	ble.n	8010e7e <__gethex+0x402>
 8010e66:	2101      	movs	r1, #1
 8010e68:	4620      	mov	r0, r4
 8010e6a:	f7ff fd9f 	bl	80109ac <rshift>
 8010e6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010e72:	3701      	adds	r7, #1
 8010e74:	42bb      	cmp	r3, r7
 8010e76:	f6ff aee0 	blt.w	8010c3a <__gethex+0x1be>
 8010e7a:	2501      	movs	r5, #1
 8010e7c:	e7c2      	b.n	8010e04 <__gethex+0x388>
 8010e7e:	f016 061f 	ands.w	r6, r6, #31
 8010e82:	d0fa      	beq.n	8010e7a <__gethex+0x3fe>
 8010e84:	4453      	add	r3, sl
 8010e86:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010e8a:	f7fd ff2d 	bl	800ece8 <__hi0bits>
 8010e8e:	f1c6 0620 	rsb	r6, r6, #32
 8010e92:	42b0      	cmp	r0, r6
 8010e94:	dbe7      	blt.n	8010e66 <__gethex+0x3ea>
 8010e96:	e7f0      	b.n	8010e7a <__gethex+0x3fe>
 8010e98:	08012ea9 	.word	0x08012ea9

08010e9c <L_shift>:
 8010e9c:	f1c2 0208 	rsb	r2, r2, #8
 8010ea0:	0092      	lsls	r2, r2, #2
 8010ea2:	b570      	push	{r4, r5, r6, lr}
 8010ea4:	f1c2 0620 	rsb	r6, r2, #32
 8010ea8:	6843      	ldr	r3, [r0, #4]
 8010eaa:	6804      	ldr	r4, [r0, #0]
 8010eac:	fa03 f506 	lsl.w	r5, r3, r6
 8010eb0:	432c      	orrs	r4, r5
 8010eb2:	40d3      	lsrs	r3, r2
 8010eb4:	6004      	str	r4, [r0, #0]
 8010eb6:	f840 3f04 	str.w	r3, [r0, #4]!
 8010eba:	4288      	cmp	r0, r1
 8010ebc:	d3f4      	bcc.n	8010ea8 <L_shift+0xc>
 8010ebe:	bd70      	pop	{r4, r5, r6, pc}

08010ec0 <__match>:
 8010ec0:	b530      	push	{r4, r5, lr}
 8010ec2:	6803      	ldr	r3, [r0, #0]
 8010ec4:	3301      	adds	r3, #1
 8010ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010eca:	b914      	cbnz	r4, 8010ed2 <__match+0x12>
 8010ecc:	6003      	str	r3, [r0, #0]
 8010ece:	2001      	movs	r0, #1
 8010ed0:	bd30      	pop	{r4, r5, pc}
 8010ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ed6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010eda:	2d19      	cmp	r5, #25
 8010edc:	bf98      	it	ls
 8010ede:	3220      	addls	r2, #32
 8010ee0:	42a2      	cmp	r2, r4
 8010ee2:	d0f0      	beq.n	8010ec6 <__match+0x6>
 8010ee4:	2000      	movs	r0, #0
 8010ee6:	e7f3      	b.n	8010ed0 <__match+0x10>

08010ee8 <__hexnan>:
 8010ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eec:	2500      	movs	r5, #0
 8010eee:	680b      	ldr	r3, [r1, #0]
 8010ef0:	4682      	mov	sl, r0
 8010ef2:	115e      	asrs	r6, r3, #5
 8010ef4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010ef8:	f013 031f 	ands.w	r3, r3, #31
 8010efc:	bf18      	it	ne
 8010efe:	3604      	addne	r6, #4
 8010f00:	1f37      	subs	r7, r6, #4
 8010f02:	4690      	mov	r8, r2
 8010f04:	46b9      	mov	r9, r7
 8010f06:	463c      	mov	r4, r7
 8010f08:	46ab      	mov	fp, r5
 8010f0a:	b087      	sub	sp, #28
 8010f0c:	6801      	ldr	r1, [r0, #0]
 8010f0e:	9301      	str	r3, [sp, #4]
 8010f10:	f846 5c04 	str.w	r5, [r6, #-4]
 8010f14:	9502      	str	r5, [sp, #8]
 8010f16:	784a      	ldrb	r2, [r1, #1]
 8010f18:	1c4b      	adds	r3, r1, #1
 8010f1a:	9303      	str	r3, [sp, #12]
 8010f1c:	b342      	cbz	r2, 8010f70 <__hexnan+0x88>
 8010f1e:	4610      	mov	r0, r2
 8010f20:	9105      	str	r1, [sp, #20]
 8010f22:	9204      	str	r2, [sp, #16]
 8010f24:	f7ff fd95 	bl	8010a52 <__hexdig_fun>
 8010f28:	2800      	cmp	r0, #0
 8010f2a:	d151      	bne.n	8010fd0 <__hexnan+0xe8>
 8010f2c:	9a04      	ldr	r2, [sp, #16]
 8010f2e:	9905      	ldr	r1, [sp, #20]
 8010f30:	2a20      	cmp	r2, #32
 8010f32:	d818      	bhi.n	8010f66 <__hexnan+0x7e>
 8010f34:	9b02      	ldr	r3, [sp, #8]
 8010f36:	459b      	cmp	fp, r3
 8010f38:	dd13      	ble.n	8010f62 <__hexnan+0x7a>
 8010f3a:	454c      	cmp	r4, r9
 8010f3c:	d206      	bcs.n	8010f4c <__hexnan+0x64>
 8010f3e:	2d07      	cmp	r5, #7
 8010f40:	dc04      	bgt.n	8010f4c <__hexnan+0x64>
 8010f42:	462a      	mov	r2, r5
 8010f44:	4649      	mov	r1, r9
 8010f46:	4620      	mov	r0, r4
 8010f48:	f7ff ffa8 	bl	8010e9c <L_shift>
 8010f4c:	4544      	cmp	r4, r8
 8010f4e:	d952      	bls.n	8010ff6 <__hexnan+0x10e>
 8010f50:	2300      	movs	r3, #0
 8010f52:	f1a4 0904 	sub.w	r9, r4, #4
 8010f56:	f844 3c04 	str.w	r3, [r4, #-4]
 8010f5a:	461d      	mov	r5, r3
 8010f5c:	464c      	mov	r4, r9
 8010f5e:	f8cd b008 	str.w	fp, [sp, #8]
 8010f62:	9903      	ldr	r1, [sp, #12]
 8010f64:	e7d7      	b.n	8010f16 <__hexnan+0x2e>
 8010f66:	2a29      	cmp	r2, #41	@ 0x29
 8010f68:	d157      	bne.n	801101a <__hexnan+0x132>
 8010f6a:	3102      	adds	r1, #2
 8010f6c:	f8ca 1000 	str.w	r1, [sl]
 8010f70:	f1bb 0f00 	cmp.w	fp, #0
 8010f74:	d051      	beq.n	801101a <__hexnan+0x132>
 8010f76:	454c      	cmp	r4, r9
 8010f78:	d206      	bcs.n	8010f88 <__hexnan+0xa0>
 8010f7a:	2d07      	cmp	r5, #7
 8010f7c:	dc04      	bgt.n	8010f88 <__hexnan+0xa0>
 8010f7e:	462a      	mov	r2, r5
 8010f80:	4649      	mov	r1, r9
 8010f82:	4620      	mov	r0, r4
 8010f84:	f7ff ff8a 	bl	8010e9c <L_shift>
 8010f88:	4544      	cmp	r4, r8
 8010f8a:	d936      	bls.n	8010ffa <__hexnan+0x112>
 8010f8c:	4623      	mov	r3, r4
 8010f8e:	f1a8 0204 	sub.w	r2, r8, #4
 8010f92:	f853 1b04 	ldr.w	r1, [r3], #4
 8010f96:	429f      	cmp	r7, r3
 8010f98:	f842 1f04 	str.w	r1, [r2, #4]!
 8010f9c:	d2f9      	bcs.n	8010f92 <__hexnan+0xaa>
 8010f9e:	1b3b      	subs	r3, r7, r4
 8010fa0:	f023 0303 	bic.w	r3, r3, #3
 8010fa4:	3304      	adds	r3, #4
 8010fa6:	3401      	adds	r4, #1
 8010fa8:	3e03      	subs	r6, #3
 8010faa:	42b4      	cmp	r4, r6
 8010fac:	bf88      	it	hi
 8010fae:	2304      	movhi	r3, #4
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	4443      	add	r3, r8
 8010fb4:	f843 2b04 	str.w	r2, [r3], #4
 8010fb8:	429f      	cmp	r7, r3
 8010fba:	d2fb      	bcs.n	8010fb4 <__hexnan+0xcc>
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	b91b      	cbnz	r3, 8010fc8 <__hexnan+0xe0>
 8010fc0:	4547      	cmp	r7, r8
 8010fc2:	d128      	bne.n	8011016 <__hexnan+0x12e>
 8010fc4:	2301      	movs	r3, #1
 8010fc6:	603b      	str	r3, [r7, #0]
 8010fc8:	2005      	movs	r0, #5
 8010fca:	b007      	add	sp, #28
 8010fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fd0:	3501      	adds	r5, #1
 8010fd2:	2d08      	cmp	r5, #8
 8010fd4:	f10b 0b01 	add.w	fp, fp, #1
 8010fd8:	dd06      	ble.n	8010fe8 <__hexnan+0x100>
 8010fda:	4544      	cmp	r4, r8
 8010fdc:	d9c1      	bls.n	8010f62 <__hexnan+0x7a>
 8010fde:	2300      	movs	r3, #0
 8010fe0:	2501      	movs	r5, #1
 8010fe2:	f844 3c04 	str.w	r3, [r4, #-4]
 8010fe6:	3c04      	subs	r4, #4
 8010fe8:	6822      	ldr	r2, [r4, #0]
 8010fea:	f000 000f 	and.w	r0, r0, #15
 8010fee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010ff2:	6020      	str	r0, [r4, #0]
 8010ff4:	e7b5      	b.n	8010f62 <__hexnan+0x7a>
 8010ff6:	2508      	movs	r5, #8
 8010ff8:	e7b3      	b.n	8010f62 <__hexnan+0x7a>
 8010ffa:	9b01      	ldr	r3, [sp, #4]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d0dd      	beq.n	8010fbc <__hexnan+0xd4>
 8011000:	f04f 32ff 	mov.w	r2, #4294967295
 8011004:	f1c3 0320 	rsb	r3, r3, #32
 8011008:	40da      	lsrs	r2, r3
 801100a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801100e:	4013      	ands	r3, r2
 8011010:	f846 3c04 	str.w	r3, [r6, #-4]
 8011014:	e7d2      	b.n	8010fbc <__hexnan+0xd4>
 8011016:	3f04      	subs	r7, #4
 8011018:	e7d0      	b.n	8010fbc <__hexnan+0xd4>
 801101a:	2004      	movs	r0, #4
 801101c:	e7d5      	b.n	8010fca <__hexnan+0xe2>

0801101e <__ascii_mbtowc>:
 801101e:	b082      	sub	sp, #8
 8011020:	b901      	cbnz	r1, 8011024 <__ascii_mbtowc+0x6>
 8011022:	a901      	add	r1, sp, #4
 8011024:	b142      	cbz	r2, 8011038 <__ascii_mbtowc+0x1a>
 8011026:	b14b      	cbz	r3, 801103c <__ascii_mbtowc+0x1e>
 8011028:	7813      	ldrb	r3, [r2, #0]
 801102a:	600b      	str	r3, [r1, #0]
 801102c:	7812      	ldrb	r2, [r2, #0]
 801102e:	1e10      	subs	r0, r2, #0
 8011030:	bf18      	it	ne
 8011032:	2001      	movne	r0, #1
 8011034:	b002      	add	sp, #8
 8011036:	4770      	bx	lr
 8011038:	4610      	mov	r0, r2
 801103a:	e7fb      	b.n	8011034 <__ascii_mbtowc+0x16>
 801103c:	f06f 0001 	mvn.w	r0, #1
 8011040:	e7f8      	b.n	8011034 <__ascii_mbtowc+0x16>

08011042 <_realloc_r>:
 8011042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011046:	4607      	mov	r7, r0
 8011048:	4614      	mov	r4, r2
 801104a:	460d      	mov	r5, r1
 801104c:	b921      	cbnz	r1, 8011058 <_realloc_r+0x16>
 801104e:	4611      	mov	r1, r2
 8011050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011054:	f7fd bcca 	b.w	800e9ec <_malloc_r>
 8011058:	b92a      	cbnz	r2, 8011066 <_realloc_r+0x24>
 801105a:	f7fd fc55 	bl	800e908 <_free_r>
 801105e:	4625      	mov	r5, r4
 8011060:	4628      	mov	r0, r5
 8011062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011066:	f000 f840 	bl	80110ea <_malloc_usable_size_r>
 801106a:	4284      	cmp	r4, r0
 801106c:	4606      	mov	r6, r0
 801106e:	d802      	bhi.n	8011076 <_realloc_r+0x34>
 8011070:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011074:	d8f4      	bhi.n	8011060 <_realloc_r+0x1e>
 8011076:	4621      	mov	r1, r4
 8011078:	4638      	mov	r0, r7
 801107a:	f7fd fcb7 	bl	800e9ec <_malloc_r>
 801107e:	4680      	mov	r8, r0
 8011080:	b908      	cbnz	r0, 8011086 <_realloc_r+0x44>
 8011082:	4645      	mov	r5, r8
 8011084:	e7ec      	b.n	8011060 <_realloc_r+0x1e>
 8011086:	42b4      	cmp	r4, r6
 8011088:	4622      	mov	r2, r4
 801108a:	4629      	mov	r1, r5
 801108c:	bf28      	it	cs
 801108e:	4632      	movcs	r2, r6
 8011090:	f7fc fdcb 	bl	800dc2a <memcpy>
 8011094:	4629      	mov	r1, r5
 8011096:	4638      	mov	r0, r7
 8011098:	f7fd fc36 	bl	800e908 <_free_r>
 801109c:	e7f1      	b.n	8011082 <_realloc_r+0x40>

0801109e <__ascii_wctomb>:
 801109e:	4603      	mov	r3, r0
 80110a0:	4608      	mov	r0, r1
 80110a2:	b141      	cbz	r1, 80110b6 <__ascii_wctomb+0x18>
 80110a4:	2aff      	cmp	r2, #255	@ 0xff
 80110a6:	d904      	bls.n	80110b2 <__ascii_wctomb+0x14>
 80110a8:	228a      	movs	r2, #138	@ 0x8a
 80110aa:	f04f 30ff 	mov.w	r0, #4294967295
 80110ae:	601a      	str	r2, [r3, #0]
 80110b0:	4770      	bx	lr
 80110b2:	2001      	movs	r0, #1
 80110b4:	700a      	strb	r2, [r1, #0]
 80110b6:	4770      	bx	lr

080110b8 <fiprintf>:
 80110b8:	b40e      	push	{r1, r2, r3}
 80110ba:	b503      	push	{r0, r1, lr}
 80110bc:	4601      	mov	r1, r0
 80110be:	ab03      	add	r3, sp, #12
 80110c0:	4805      	ldr	r0, [pc, #20]	@ (80110d8 <fiprintf+0x20>)
 80110c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80110c6:	6800      	ldr	r0, [r0, #0]
 80110c8:	9301      	str	r3, [sp, #4]
 80110ca:	f7ff f9b7 	bl	801043c <_vfiprintf_r>
 80110ce:	b002      	add	sp, #8
 80110d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80110d4:	b003      	add	sp, #12
 80110d6:	4770      	bx	lr
 80110d8:	200043b0 	.word	0x200043b0

080110dc <abort>:
 80110dc:	2006      	movs	r0, #6
 80110de:	b508      	push	{r3, lr}
 80110e0:	f000 f834 	bl	801114c <raise>
 80110e4:	2001      	movs	r0, #1
 80110e6:	f7f7 fb11 	bl	800870c <_exit>

080110ea <_malloc_usable_size_r>:
 80110ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110ee:	1f18      	subs	r0, r3, #4
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	bfbc      	itt	lt
 80110f4:	580b      	ldrlt	r3, [r1, r0]
 80110f6:	18c0      	addlt	r0, r0, r3
 80110f8:	4770      	bx	lr

080110fa <_raise_r>:
 80110fa:	291f      	cmp	r1, #31
 80110fc:	b538      	push	{r3, r4, r5, lr}
 80110fe:	4605      	mov	r5, r0
 8011100:	460c      	mov	r4, r1
 8011102:	d904      	bls.n	801110e <_raise_r+0x14>
 8011104:	2316      	movs	r3, #22
 8011106:	6003      	str	r3, [r0, #0]
 8011108:	f04f 30ff 	mov.w	r0, #4294967295
 801110c:	bd38      	pop	{r3, r4, r5, pc}
 801110e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011110:	b112      	cbz	r2, 8011118 <_raise_r+0x1e>
 8011112:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011116:	b94b      	cbnz	r3, 801112c <_raise_r+0x32>
 8011118:	4628      	mov	r0, r5
 801111a:	f000 f831 	bl	8011180 <_getpid_r>
 801111e:	4622      	mov	r2, r4
 8011120:	4601      	mov	r1, r0
 8011122:	4628      	mov	r0, r5
 8011124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011128:	f000 b818 	b.w	801115c <_kill_r>
 801112c:	2b01      	cmp	r3, #1
 801112e:	d00a      	beq.n	8011146 <_raise_r+0x4c>
 8011130:	1c59      	adds	r1, r3, #1
 8011132:	d103      	bne.n	801113c <_raise_r+0x42>
 8011134:	2316      	movs	r3, #22
 8011136:	6003      	str	r3, [r0, #0]
 8011138:	2001      	movs	r0, #1
 801113a:	e7e7      	b.n	801110c <_raise_r+0x12>
 801113c:	2100      	movs	r1, #0
 801113e:	4620      	mov	r0, r4
 8011140:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011144:	4798      	blx	r3
 8011146:	2000      	movs	r0, #0
 8011148:	e7e0      	b.n	801110c <_raise_r+0x12>
	...

0801114c <raise>:
 801114c:	4b02      	ldr	r3, [pc, #8]	@ (8011158 <raise+0xc>)
 801114e:	4601      	mov	r1, r0
 8011150:	6818      	ldr	r0, [r3, #0]
 8011152:	f7ff bfd2 	b.w	80110fa <_raise_r>
 8011156:	bf00      	nop
 8011158:	200043b0 	.word	0x200043b0

0801115c <_kill_r>:
 801115c:	b538      	push	{r3, r4, r5, lr}
 801115e:	2300      	movs	r3, #0
 8011160:	4d06      	ldr	r5, [pc, #24]	@ (801117c <_kill_r+0x20>)
 8011162:	4604      	mov	r4, r0
 8011164:	4608      	mov	r0, r1
 8011166:	4611      	mov	r1, r2
 8011168:	602b      	str	r3, [r5, #0]
 801116a:	f7f7 fac7 	bl	80086fc <_kill>
 801116e:	1c43      	adds	r3, r0, #1
 8011170:	d102      	bne.n	8011178 <_kill_r+0x1c>
 8011172:	682b      	ldr	r3, [r5, #0]
 8011174:	b103      	cbz	r3, 8011178 <_kill_r+0x1c>
 8011176:	6023      	str	r3, [r4, #0]
 8011178:	bd38      	pop	{r3, r4, r5, pc}
 801117a:	bf00      	nop
 801117c:	2000964c 	.word	0x2000964c

08011180 <_getpid_r>:
 8011180:	f7f7 baba 	b.w	80086f8 <_getpid>

08011184 <_init>:
 8011184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011186:	bf00      	nop
 8011188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801118a:	bc08      	pop	{r3}
 801118c:	469e      	mov	lr, r3
 801118e:	4770      	bx	lr

08011190 <_fini>:
 8011190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011192:	bf00      	nop
 8011194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011196:	bc08      	pop	{r3}
 8011198:	469e      	mov	lr, r3
 801119a:	4770      	bx	lr
