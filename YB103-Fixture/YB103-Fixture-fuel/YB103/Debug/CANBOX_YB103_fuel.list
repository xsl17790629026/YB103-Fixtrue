
CANBOX_YB103_fuel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8ec  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ed4  0800fae0  0800fae0  00010ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119b4  080119b4  0001b268  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080119b4  080119b4  000129b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080119bc  080119bc  0001b268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080119bc  080119bc  000129bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080119c0  080119c0  000129c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00008268  20000000  080119c4  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037c8  20008268  08019c2c  0001b268  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ba30  08019c2c  0001ba30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001b268  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069b2  00000000  00000000  0001b291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000172d  00000000  00000000  00021c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  00023370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000150f  00000000  00000000  00024ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000ef65  00000000  00000000  00025fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003ce5  00000000  00000000  00034f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00038c31  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005174  00000000  00000000  00038c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005d  00000000  00000000  0003dde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20008268 	.word	0x20008268
 800020c:	00000000 	.word	0x00000000
 8000210:	0800fac4 	.word	0x0800fac4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000826c 	.word	0x2000826c
 800022c:	0800fac4 	.word	0x0800fac4

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	@ 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9c2 	b.w	8000fe4 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff0b 	bl	8000a9c <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <__aeabi_d2ulz+0x34>)
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fc81 	bl	80005b8 <__aeabi_dmul>
 8000cb6:	f7ff ff57 	bl	8000b68 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc02 	bl	80004c4 <__aeabi_ui2d>
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc4:	f7ff fc78 	bl	80005b8 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff faba 	bl	8000248 <__aeabi_dsub>
 8000cd4:	f7ff ff48 	bl	8000b68 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9d08      	ldr	r5, [sp, #32]
 8000cea:	468e      	mov	lr, r1
 8000cec:	4604      	mov	r4, r0
 8000cee:	4688      	mov	r8, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14a      	bne.n	8000d8a <__udivmoddi4+0xa6>
 8000cf4:	428a      	cmp	r2, r1
 8000cf6:	4617      	mov	r7, r2
 8000cf8:	d962      	bls.n	8000dc0 <__udivmoddi4+0xdc>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	b14e      	cbz	r6, 8000d14 <__udivmoddi4+0x30>
 8000d00:	f1c6 0320 	rsb	r3, r6, #32
 8000d04:	fa01 f806 	lsl.w	r8, r1, r6
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	40b7      	lsls	r7, r6
 8000d0e:	ea43 0808 	orr.w	r8, r3, r8
 8000d12:	40b4      	lsls	r4, r6
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d1c:	fa1f fc87 	uxth.w	ip, r7
 8000d20:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d24:	fb01 f20c 	mul.w	r2, r1, ip
 8000d28:	0c23      	lsrs	r3, r4, #16
 8000d2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x62>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d38:	f080 80eb 	bcs.w	8000f12 <__udivmoddi4+0x22e>
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	f240 80e8 	bls.w	8000f12 <__udivmoddi4+0x22e>
 8000d42:	3902      	subs	r1, #2
 8000d44:	443b      	add	r3, r7
 8000d46:	1a9a      	subs	r2, r3, r2
 8000d48:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d4c:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d50:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d54:	b2a3      	uxth	r3, r4
 8000d56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d5a:	459c      	cmp	ip, r3
 8000d5c:	d909      	bls.n	8000d72 <__udivmoddi4+0x8e>
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d64:	f080 80d7 	bcs.w	8000f16 <__udivmoddi4+0x232>
 8000d68:	459c      	cmp	ip, r3
 8000d6a:	f240 80d4 	bls.w	8000f16 <__udivmoddi4+0x232>
 8000d6e:	443b      	add	r3, r7
 8000d70:	3802      	subs	r0, #2
 8000d72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d76:	2100      	movs	r1, #0
 8000d78:	eba3 030c 	sub.w	r3, r3, ip
 8000d7c:	b11d      	cbz	r5, 8000d86 <__udivmoddi4+0xa2>
 8000d7e:	2200      	movs	r2, #0
 8000d80:	40f3      	lsrs	r3, r6
 8000d82:	e9c5 3200 	strd	r3, r2, [r5]
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d905      	bls.n	8000d9a <__udivmoddi4+0xb6>
 8000d8e:	b10d      	cbz	r5, 8000d94 <__udivmoddi4+0xb0>
 8000d90:	e9c5 0100 	strd	r0, r1, [r5]
 8000d94:	2100      	movs	r1, #0
 8000d96:	4608      	mov	r0, r1
 8000d98:	e7f5      	b.n	8000d86 <__udivmoddi4+0xa2>
 8000d9a:	fab3 f183 	clz	r1, r3
 8000d9e:	2900      	cmp	r1, #0
 8000da0:	d146      	bne.n	8000e30 <__udivmoddi4+0x14c>
 8000da2:	4573      	cmp	r3, lr
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xc8>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 8108 	bhi.w	8000fbc <__udivmoddi4+0x2d8>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb6e 0203 	sbc.w	r2, lr, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	4690      	mov	r8, r2
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0e5      	beq.n	8000d86 <__udivmoddi4+0xa2>
 8000dba:	e9c5 4800 	strd	r4, r8, [r5]
 8000dbe:	e7e2      	b.n	8000d86 <__udivmoddi4+0xa2>
 8000dc0:	2a00      	cmp	r2, #0
 8000dc2:	f000 8091 	beq.w	8000ee8 <__udivmoddi4+0x204>
 8000dc6:	fab2 f682 	clz	r6, r2
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	f040 80a5 	bne.w	8000f1a <__udivmoddi4+0x236>
 8000dd0:	1a8a      	subs	r2, r1, r2
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	0c03      	lsrs	r3, r0, #16
 8000dd6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dda:	b280      	uxth	r0, r0
 8000ddc:	b2bc      	uxth	r4, r7
 8000dde:	fbb2 fcfe 	udiv	ip, r2, lr
 8000de2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dea:	fb04 f20c 	mul.w	r2, r4, ip
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x11e>
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000df8:	d202      	bcs.n	8000e00 <__udivmoddi4+0x11c>
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	f200 80e3 	bhi.w	8000fc6 <__udivmoddi4+0x2e2>
 8000e00:	46c4      	mov	ip, r8
 8000e02:	1a9b      	subs	r3, r3, r2
 8000e04:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e08:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e0c:	fb02 f404 	mul.w	r4, r2, r4
 8000e10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e14:	429c      	cmp	r4, r3
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0x144>
 8000e18:	18fb      	adds	r3, r7, r3
 8000e1a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0x142>
 8000e20:	429c      	cmp	r4, r3
 8000e22:	f200 80cd 	bhi.w	8000fc0 <__udivmoddi4+0x2dc>
 8000e26:	4602      	mov	r2, r0
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e2e:	e7a5      	b.n	8000d7c <__udivmoddi4+0x98>
 8000e30:	f1c1 0620 	rsb	r6, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 f706 	lsr.w	r7, r2, r6
 8000e3a:	431f      	orrs	r7, r3
 8000e3c:	fa2e fa06 	lsr.w	sl, lr, r6
 8000e40:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e44:	fbba f8f9 	udiv	r8, sl, r9
 8000e48:	fa0e fe01 	lsl.w	lr, lr, r1
 8000e4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000e50:	fb09 aa18 	mls	sl, r9, r8, sl
 8000e54:	fa1f fc87 	uxth.w	ip, r7
 8000e58:	ea43 030e 	orr.w	r3, r3, lr
 8000e5c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000e60:	fb08 f00c 	mul.w	r0, r8, ip
 8000e64:	0c1c      	lsrs	r4, r3, #16
 8000e66:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000e6a:	42a0      	cmp	r0, r4
 8000e6c:	fa02 f201 	lsl.w	r2, r2, r1
 8000e70:	d90a      	bls.n	8000e88 <__udivmoddi4+0x1a4>
 8000e72:	193c      	adds	r4, r7, r4
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e78:	f080 809e 	bcs.w	8000fb8 <__udivmoddi4+0x2d4>
 8000e7c:	42a0      	cmp	r0, r4
 8000e7e:	f240 809b 	bls.w	8000fb8 <__udivmoddi4+0x2d4>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	443c      	add	r4, r7
 8000e88:	1a24      	subs	r4, r4, r0
 8000e8a:	b298      	uxth	r0, r3
 8000e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e90:	fb09 4413 	mls	r4, r9, r3, r4
 8000e94:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e98:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000e9c:	45a4      	cmp	ip, r4
 8000e9e:	d909      	bls.n	8000eb4 <__udivmoddi4+0x1d0>
 8000ea0:	193c      	adds	r4, r7, r4
 8000ea2:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea6:	f080 8085 	bcs.w	8000fb4 <__udivmoddi4+0x2d0>
 8000eaa:	45a4      	cmp	ip, r4
 8000eac:	f240 8082 	bls.w	8000fb4 <__udivmoddi4+0x2d0>
 8000eb0:	3b02      	subs	r3, #2
 8000eb2:	443c      	add	r4, r7
 8000eb4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000eb8:	eba4 040c 	sub.w	r4, r4, ip
 8000ebc:	fba0 8c02 	umull	r8, ip, r0, r2
 8000ec0:	4564      	cmp	r4, ip
 8000ec2:	4643      	mov	r3, r8
 8000ec4:	46e1      	mov	r9, ip
 8000ec6:	d364      	bcc.n	8000f92 <__udivmoddi4+0x2ae>
 8000ec8:	d061      	beq.n	8000f8e <__udivmoddi4+0x2aa>
 8000eca:	b15d      	cbz	r5, 8000ee4 <__udivmoddi4+0x200>
 8000ecc:	ebbe 0203 	subs.w	r2, lr, r3
 8000ed0:	eb64 0409 	sbc.w	r4, r4, r9
 8000ed4:	fa04 f606 	lsl.w	r6, r4, r6
 8000ed8:	fa22 f301 	lsr.w	r3, r2, r1
 8000edc:	431e      	orrs	r6, r3
 8000ede:	40cc      	lsrs	r4, r1
 8000ee0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	e74e      	b.n	8000d86 <__udivmoddi4+0xa2>
 8000ee8:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eec:	0c01      	lsrs	r1, r0, #16
 8000eee:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ef2:	b280      	uxth	r0, r0
 8000ef4:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ef8:	463b      	mov	r3, r7
 8000efa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000efe:	4638      	mov	r0, r7
 8000f00:	463c      	mov	r4, r7
 8000f02:	46b8      	mov	r8, r7
 8000f04:	46be      	mov	lr, r7
 8000f06:	2620      	movs	r6, #32
 8000f08:	eba2 0208 	sub.w	r2, r2, r8
 8000f0c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f10:	e765      	b.n	8000dde <__udivmoddi4+0xfa>
 8000f12:	4601      	mov	r1, r0
 8000f14:	e717      	b.n	8000d46 <__udivmoddi4+0x62>
 8000f16:	4610      	mov	r0, r2
 8000f18:	e72b      	b.n	8000d72 <__udivmoddi4+0x8e>
 8000f1a:	f1c6 0120 	rsb	r1, r6, #32
 8000f1e:	fa2e fc01 	lsr.w	ip, lr, r1
 8000f22:	40b7      	lsls	r7, r6
 8000f24:	fa0e fe06 	lsl.w	lr, lr, r6
 8000f28:	fa20 f101 	lsr.w	r1, r0, r1
 8000f2c:	ea41 010e 	orr.w	r1, r1, lr
 8000f30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f34:	fbbc f8fe 	udiv	r8, ip, lr
 8000f38:	b2bc      	uxth	r4, r7
 8000f3a:	fb0e cc18 	mls	ip, lr, r8, ip
 8000f3e:	fb08 f904 	mul.w	r9, r8, r4
 8000f42:	0c0a      	lsrs	r2, r1, #16
 8000f44:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000f48:	40b0      	lsls	r0, r6
 8000f4a:	4591      	cmp	r9, r2
 8000f4c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	d93e      	bls.n	8000fd2 <__udivmoddi4+0x2ee>
 8000f54:	18ba      	adds	r2, r7, r2
 8000f56:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f5a:	d201      	bcs.n	8000f60 <__udivmoddi4+0x27c>
 8000f5c:	4591      	cmp	r9, r2
 8000f5e:	d81f      	bhi.n	8000fa0 <__udivmoddi4+0x2bc>
 8000f60:	eba2 0209 	sub.w	r2, r2, r9
 8000f64:	fbb2 f9fe 	udiv	r9, r2, lr
 8000f68:	fb09 f804 	mul.w	r8, r9, r4
 8000f6c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000f70:	b28a      	uxth	r2, r1
 8000f72:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000f76:	4542      	cmp	r2, r8
 8000f78:	d229      	bcs.n	8000fce <__udivmoddi4+0x2ea>
 8000f7a:	18ba      	adds	r2, r7, r2
 8000f7c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f80:	d2c2      	bcs.n	8000f08 <__udivmoddi4+0x224>
 8000f82:	4542      	cmp	r2, r8
 8000f84:	d2c0      	bcs.n	8000f08 <__udivmoddi4+0x224>
 8000f86:	f1a9 0102 	sub.w	r1, r9, #2
 8000f8a:	443a      	add	r2, r7
 8000f8c:	e7bc      	b.n	8000f08 <__udivmoddi4+0x224>
 8000f8e:	45c6      	cmp	lr, r8
 8000f90:	d29b      	bcs.n	8000eca <__udivmoddi4+0x1e6>
 8000f92:	ebb8 0302 	subs.w	r3, r8, r2
 8000f96:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	46e1      	mov	r9, ip
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e6>
 8000fa0:	eba7 0909 	sub.w	r9, r7, r9
 8000fa4:	444a      	add	r2, r9
 8000fa6:	fbb2 f9fe 	udiv	r9, r2, lr
 8000faa:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fae:	fb09 f804 	mul.w	r8, r9, r4
 8000fb2:	e7db      	b.n	8000f6c <__udivmoddi4+0x288>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	e77d      	b.n	8000eb4 <__udivmoddi4+0x1d0>
 8000fb8:	46d0      	mov	r8, sl
 8000fba:	e765      	b.n	8000e88 <__udivmoddi4+0x1a4>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e6fa      	b.n	8000db6 <__udivmoddi4+0xd2>
 8000fc0:	443b      	add	r3, r7
 8000fc2:	3a02      	subs	r2, #2
 8000fc4:	e730      	b.n	8000e28 <__udivmoddi4+0x144>
 8000fc6:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fca:	443b      	add	r3, r7
 8000fcc:	e719      	b.n	8000e02 <__udivmoddi4+0x11e>
 8000fce:	4649      	mov	r1, r9
 8000fd0:	e79a      	b.n	8000f08 <__udivmoddi4+0x224>
 8000fd2:	eba2 0209 	sub.w	r2, r2, r9
 8000fd6:	fbb2 f9fe 	udiv	r9, r2, lr
 8000fda:	46c4      	mov	ip, r8
 8000fdc:	fb09 f804 	mul.w	r8, r9, r4
 8000fe0:	e7c4      	b.n	8000f6c <__udivmoddi4+0x288>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <Adc_SetCoverChl>:
* Input 		 : None
* Output		 : None
* Return		 : None
******************************************************/
static void Adc_SetCoverChl(uint8_t LcChl)
{
 8000fe8:	b510      	push	{r4, lr}
 8000fea:	b084      	sub	sp, #16
	
	ADC_ChannelConfTypeDef AdcChlConfig;
	AdcChlConfig.Channel = LcChl;
 8000fec:	9001      	str	r0, [sp, #4]
	AdcChlConfig.Rank = ADC_REGULAR_RANK_1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	9302      	str	r3, [sp, #8]
	AdcChlConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	9303      	str	r3, [sp, #12]
	HAL_ADC_ConfigChannel(&hadc1,&AdcChlConfig);
 8000ff6:	4c05      	ldr	r4, [pc, #20]	@ (800100c <Adc_SetCoverChl+0x24>)
 8000ff8:	a901      	add	r1, sp, #4
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f006 fa2a 	bl	8007454 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001000:	4620      	mov	r0, r4
 8001002:	f006 fb0b 	bl	800761c <HAL_ADC_Start>
}
 8001006:	b004      	add	sp, #16
 8001008:	bd10      	pop	{r4, pc}
 800100a:	bf00      	nop
 800100c:	20008984 	.word	0x20008984

08001010 <ADC_SamplingProcess>:
* Output		 : None
* Return		 : None
******************************************************/

void ADC_SamplingProcess(void)
{
 8001010:	b530      	push	{r4, r5, lr}
 8001012:	b085      	sub	sp, #20
	uint8_t LcChlNum[CHANNEL_NUM] = {ADC_CHANNEL_15,ADC_CHANNEL_14,ADC_CHANNEL_8};
 8001014:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <ADC_SamplingProcess+0x68>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f8ad 300c 	strh.w	r3, [sp, #12]
 800101c:	0c1b      	lsrs	r3, r3, #16
 800101e:	f88d 300e 	strb.w	r3, [sp, #14]

	uint32_t LcAdcData[CHANNEL_NUM] = {0u};
 8001022:	2300      	movs	r3, #0
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	9302      	str	r3, [sp, #8]
	
	if(GcChlNumIdx >= (CHANNEL_NUM - 1u))
 800102a:	4b14      	ldr	r3, [pc, #80]	@ (800107c <ADC_SamplingProcess+0x6c>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d91e      	bls.n	8001070 <ADC_SamplingProcess+0x60>
	{
		GcChlNumIdx = 0x00u;
 8001032:	4b12      	ldr	r3, [pc, #72]	@ (800107c <ADC_SamplingProcess+0x6c>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
	}
	else
	{
	    GcChlNumIdx++;
	}
	Adc_SetCoverChl(LcChlNum[GcChlNumIdx]);
 8001038:	4c10      	ldr	r4, [pc, #64]	@ (800107c <ADC_SamplingProcess+0x6c>)
 800103a:	7823      	ldrb	r3, [r4, #0]
 800103c:	3310      	adds	r3, #16
 800103e:	446b      	add	r3, sp
 8001040:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 8001044:	f7ff ffd0 	bl	8000fe8 <Adc_SetCoverChl>
	LcAdcData[GcChlNumIdx] = HAL_ADC_GetValue(&hadc1);
 8001048:	7825      	ldrb	r5, [r4, #0]
 800104a:	480d      	ldr	r0, [pc, #52]	@ (8001080 <ADC_SamplingProcess+0x70>)
 800104c:	f006 f9fe 	bl	800744c <HAL_ADC_GetValue>
 8001050:	ab04      	add	r3, sp, #16
 8001052:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001056:	f845 0c10 	str.w	r0, [r5, #-16]
	Adc_DebouncingInfo[GcChlNumIdx].ResValue = LcAdcData[GcChlNumIdx];
 800105a:	7822      	ldrb	r2, [r4, #0]
 800105c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001060:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8001064:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <ADC_SamplingProcess+0x74>)
 8001066:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800106a:	60d9      	str	r1, [r3, #12]
}
 800106c:	b005      	add	sp, #20
 800106e:	bd30      	pop	{r4, r5, pc}
	    GcChlNumIdx++;
 8001070:	3301      	adds	r3, #1
 8001072:	4a02      	ldr	r2, [pc, #8]	@ (800107c <ADC_SamplingProcess+0x6c>)
 8001074:	7013      	strb	r3, [r2, #0]
 8001076:	e7df      	b.n	8001038 <ADC_SamplingProcess+0x28>
 8001078:	0800fba4 	.word	0x0800fba4
 800107c:	200082b4 	.word	0x200082b4
 8001080:	20008984 	.word	0x20008984
 8001084:	20008284 	.word	0x20008284

08001088 <ADC_GetResValue>:
* Output		 : None
* Return		 : None
******************************************************/
uint32_t ADC_GetResValue(uint8_t Lu8Chl)
{
	return Adc_DebouncingInfo[Lu8Chl].ResValue;
 8001088:	4b02      	ldr	r3, [pc, #8]	@ (8001094 <ADC_GetResValue+0xc>)
 800108a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800108e:	68d8      	ldr	r0, [r3, #12]
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20008284 	.word	0x20008284

08001098 <Svc_CanCommUpInf_TxConfigTableInit>:
extern const CanTransmitConfig_t *ilTxTable;
extern uint8_t iBytesOfTxHandles;
extern CanMsgTxStateBuffer_Struct * CanMsgTxStateBufferPtr;
static uint8_t Svc_CanCommUpInf_TxConfigTableInit(CanTransmitConfig_t *p_TxTable)
{
   if(p_TxTable != NULL)
 8001098:	b118      	cbz	r0, 80010a2 <Svc_CanCommUpInf_TxConfigTableInit+0xa>
   {
      ilTxTable = p_TxTable;
 800109a:	4a03      	ldr	r2, [pc, #12]	@ (80010a8 <Svc_CanCommUpInf_TxConfigTableInit+0x10>)
 800109c:	6010      	str	r0, [r2, #0]
      return TRUE;
 800109e:	2001      	movs	r0, #1
 80010a0:	4770      	bx	lr
   }
   else
   {
      return FALSE;
 80010a2:	2000      	movs	r0, #0
   }
}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	2000b8c8 	.word	0x2000b8c8

080010ac <Svc_CanCommUpInf_TxConfigTableLenInit>:

static uint8_t Svc_CanCommUpInf_TxConfigTableLenInit(uint8_t TxTableLen)
{
   if(TxTableLen != 0)
 80010ac:	4603      	mov	r3, r0
 80010ae:	b110      	cbz	r0, 80010b6 <Svc_CanCommUpInf_TxConfigTableLenInit+0xa>
   {
      iBytesOfTxHandles = TxTableLen;
 80010b0:	4a02      	ldr	r2, [pc, #8]	@ (80010bc <Svc_CanCommUpInf_TxConfigTableLenInit+0x10>)
 80010b2:	7010      	strb	r0, [r2, #0]
      return TRUE;
 80010b4:	2301      	movs	r3, #1
   }
   else
   {
      return FALSE;
   }
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	2000b8c7 	.word	0x2000b8c7

080010c0 <Service_CanComm_CanMsgTxStateBufferInit>:

static uint8_t Service_CanComm_CanMsgTxStateBufferInit(CanMsgTxStateBuffer_Struct * p_StateBuffer)
{
   if(p_StateBuffer != NULL)
 80010c0:	b118      	cbz	r0, 80010ca <Service_CanComm_CanMsgTxStateBufferInit+0xa>
   {
      CanMsgTxStateBufferPtr = p_StateBuffer;
 80010c2:	4a03      	ldr	r2, [pc, #12]	@ (80010d0 <Service_CanComm_CanMsgTxStateBufferInit+0x10>)
 80010c4:	6010      	str	r0, [r2, #0]
      return TRUE;
 80010c6:	2001      	movs	r0, #1
 80010c8:	4770      	bx	lr
   }
   else
   {
      return FALSE;
 80010ca:	2000      	movs	r0, #0
   }
}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	2000b8cc 	.word	0x2000b8cc

080010d4 <Can_SendSts_Control>:

void Can_SendSts_Control(uint8_t CanSendSts)
{
 80010d4:	b508      	push	{r3, lr}
    if(E_CANSEND_OPEN == CanSendSts)
 80010d6:	b970      	cbnz	r0, 80010f6 <Can_SendSts_Control+0x22>
    {
        // Set_CanEventType_Cycle();
        HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2140      	movs	r1, #64	@ 0x40
 80010dc:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 80010e0:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 80010e4:	f007 fc2a 	bl	800893c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010ee:	4809      	ldr	r0, [pc, #36]	@ (8001114 <Can_SendSts_Control+0x40>)
 80010f0:	f007 fc24 	bl	800893c <HAL_GPIO_WritePin>
        // Set_CanCycleType_Event();
        HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_RESET);
        delay_us(100);
        HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_RESET);
    }
}
 80010f4:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2140      	movs	r1, #64	@ 0x40
 80010fa:	4807      	ldr	r0, [pc, #28]	@ (8001118 <Can_SendSts_Control+0x44>)
 80010fc:	f007 fc1e 	bl	800893c <HAL_GPIO_WritePin>
        delay_us(100);
 8001100:	2064      	movs	r0, #100	@ 0x64
 8001102:	f002 fa01 	bl	8003508 <delay_us>
        HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800110c:	4801      	ldr	r0, [pc, #4]	@ (8001114 <Can_SendSts_Control+0x40>)
 800110e:	f007 fc15 	bl	800893c <HAL_GPIO_WritePin>
}
 8001112:	e7ef      	b.n	80010f4 <Can_SendSts_Control+0x20>
 8001114:	40010c00 	.word	0x40010c00
 8001118:	40011000 	.word	0x40011000

0800111c <App_Init>:

void App_Init(void)
{
 800111c:	b508      	push	{r3, lr}
    Svc_CanCommUpInf_TxConfigTableInit(CanTransmitConfig_Table);
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <App_Init+0x18>)
 8001120:	f7ff ffba 	bl	8001098 <Svc_CanCommUpInf_TxConfigTableInit>
    Svc_CanCommUpInf_TxConfigTableLenInit(CanTxMsgIndex_Max);
 8001124:	2027      	movs	r0, #39	@ 0x27
 8001126:	f7ff ffc1 	bl	80010ac <Svc_CanCommUpInf_TxConfigTableLenInit>
    Service_CanComm_CanMsgTxStateBufferInit(&CanMsgTxStateBuffer[0]);
 800112a:	4803      	ldr	r0, [pc, #12]	@ (8001138 <App_Init+0x1c>)
 800112c:	f7ff ffc8 	bl	80010c0 <Service_CanComm_CanMsgTxStateBufferInit>
}
 8001130:	bd08      	pop	{r3, pc}
 8001132:	bf00      	nop
 8001134:	080110fc 	.word	0x080110fc
 8001138:	200082b8 	.word	0x200082b8

0800113c <CanGetMsgSignal>:

void CanGetMsgSignal(void)
{
 800113c:	b510      	push	{r4, lr}
    CanTx_SigSet_0x90_IHU_LDWWarnVoiceSwtSet(GetIHU_3Value(IHU_LDWWarnVoiceSwtSet));
 800113e:	2000      	movs	r0, #0
 8001140:	f005 f80e 	bl	8006160 <GetIHU_3Value>
 8001144:	4cde      	ldr	r4, [pc, #888]	@ (80014c0 <CanGetMsgSignal+0x384>)
 8001146:	7823      	ldrb	r3, [r4, #0]
 8001148:	f360 1387 	bfi	r3, r0, #6, #2
 800114c:	7023      	strb	r3, [r4, #0]
    CanTx_SigSet_0x90_IHU_FCWSwtSet(GetIHU_3Value(IHU_FCWSwtSet));
 800114e:	2001      	movs	r0, #1
 8001150:	f005 f806 	bl	8006160 <GetIHU_3Value>
 8001154:	7823      	ldrb	r3, [r4, #0]
 8001156:	f360 1305 	bfi	r3, r0, #4, #2
 800115a:	7023      	strb	r3, [r4, #0]
    CanTx_SigSet_0x90_IHU_FCWSnvtySet(GetIHU_3Value(IHU_FCWSnvtySet));
 800115c:	2002      	movs	r0, #2
 800115e:	f004 ffff 	bl	8006160 <GetIHU_3Value>
 8001162:	7823      	ldrb	r3, [r4, #0]
 8001164:	f360 0383 	bfi	r3, r0, #2, #2
 8001168:	7023      	strb	r3, [r4, #0]
    CanTx_SigSet_0x90_IHU_AEBSwtSet(GetIHU_3Value(IHU_AEBSwtSet));
 800116a:	2003      	movs	r0, #3
 800116c:	f004 fff8 	bl	8006160 <GetIHU_3Value>
 8001170:	7823      	ldrb	r3, [r4, #0]
 8001172:	f360 0301 	bfi	r3, r0, #0, #2
 8001176:	7023      	strb	r3, [r4, #0]
    CanTx_SigSet_0x90_IHU_IHBCSwtSet(GetIHU_3Value(IHU_IHBCSwtSet));
 8001178:	2004      	movs	r0, #4
 800117a:	f004 fff1 	bl	8006160 <GetIHU_3Value>
 800117e:	7863      	ldrb	r3, [r4, #1]
 8001180:	f360 1387 	bfi	r3, r0, #6, #2
 8001184:	7063      	strb	r3, [r4, #1]
    CanTx_SigSet_0x90_IHU_TSRSwtSet(GetIHU_3Value(IHU_TSRSwtSet));
 8001186:	2005      	movs	r0, #5
 8001188:	f004 ffea 	bl	8006160 <GetIHU_3Value>
 800118c:	7863      	ldrb	r3, [r4, #1]
 800118e:	f360 1305 	bfi	r3, r0, #4, #2
 8001192:	7063      	strb	r3, [r4, #1]
    CanTx_SigSet_0x90_IHU_LDWLDPSnvtySet(GetIHU_3Value(IHU_LDWLDPSnvtySet));
 8001194:	2006      	movs	r0, #6
 8001196:	f004 ffe3 	bl	8006160 <GetIHU_3Value>
 800119a:	7863      	ldrb	r3, [r4, #1]
 800119c:	f360 0383 	bfi	r3, r0, #2, #2
 80011a0:	7063      	strb	r3, [r4, #1]
    CanTx_SigSet_0x90_IHU_LDWSwtSet(GetIHU_3Value(IHU_LDWSwtSet));
 80011a2:	2007      	movs	r0, #7
 80011a4:	f004 ffdc 	bl	8006160 <GetIHU_3Value>
 80011a8:	7863      	ldrb	r3, [r4, #1]
 80011aa:	f360 0301 	bfi	r3, r0, #0, #2
 80011ae:	7063      	strb	r3, [r4, #1]
    CanTx_SigSet_0x90_IHU_AutoWshWipSet(GetIHU_3Value(IHU_AutoWshWipSet));
 80011b0:	2008      	movs	r0, #8
 80011b2:	f004 ffd5 	bl	8006160 <GetIHU_3Value>
 80011b6:	78a3      	ldrb	r3, [r4, #2]
 80011b8:	f360 1387 	bfi	r3, r0, #6, #2
 80011bc:	70a3      	strb	r3, [r4, #2]
    CanTx_SigSet_0x90_IHU_FlaoutUnlockSet(GetIHU_3Value(IHU_FlaoutUnlockSet));
 80011be:	2009      	movs	r0, #9
 80011c0:	f004 ffce 	bl	8006160 <GetIHU_3Value>
 80011c4:	78a3      	ldrb	r3, [r4, #2]
 80011c6:	f360 1305 	bfi	r3, r0, #4, #2
 80011ca:	70a3      	strb	r3, [r4, #2]
    CanTx_SigSet_0x90_IHU_TSROverSpeedAcousticSwSet(GetIHU_3Value(IHU_TSROverSpeedAcousticSwSet));
 80011cc:	200a      	movs	r0, #10
 80011ce:	f004 ffc7 	bl	8006160 <GetIHU_3Value>
 80011d2:	78a3      	ldrb	r3, [r4, #2]
 80011d4:	f360 0383 	bfi	r3, r0, #2, #2
 80011d8:	70a3      	strb	r3, [r4, #2]
    CanTx_SigSet_0x90_IHU_TSROverSpeedSwSet(GetIHU_3Value(IHU_TSROverSpeedSwSet));
 80011da:	200b      	movs	r0, #11
 80011dc:	f004 ffc0 	bl	8006160 <GetIHU_3Value>
 80011e0:	78a3      	ldrb	r3, [r4, #2]
 80011e2:	f360 0301 	bfi	r3, r0, #0, #2
 80011e6:	70a3      	strb	r3, [r4, #2]
    CanTx_SigSet_0x90_IHU_WindowRemoteAutoDownSet(GetIHU_3Value(IHU_WindowRemoteAutoDownSet));
 80011e8:	200c      	movs	r0, #12
 80011ea:	f004 ffb9 	bl	8006160 <GetIHU_3Value>
 80011ee:	78e3      	ldrb	r3, [r4, #3]
 80011f0:	f360 1387 	bfi	r3, r0, #6, #2
 80011f4:	70e3      	strb	r3, [r4, #3]
    CanTx_SigSet_0x90_IHU_HornAlertVolumeSet(GetIHU_3Value(IHU_HornAlertVolumeSet));
 80011f6:	200d      	movs	r0, #13
 80011f8:	f004 ffb2 	bl	8006160 <GetIHU_3Value>
 80011fc:	78e3      	ldrb	r3, [r4, #3]
 80011fe:	f360 03c5 	bfi	r3, r0, #3, #3
 8001202:	70e3      	strb	r3, [r4, #3]
    CanTx_SigSet_0x90_IHU_SpeedLockSet(GetIHU_3Value(IHU_SpeedLockSet));
 8001204:	200e      	movs	r0, #14
 8001206:	f004 ffab 	bl	8006160 <GetIHU_3Value>
 800120a:	78e3      	ldrb	r3, [r4, #3]
 800120c:	f360 0302 	bfi	r3, r0, #0, #3
 8001210:	70e3      	strb	r3, [r4, #3]
    CanTx_SigSet_0x90_IHU_SearchCarWarnModSet(GetIHU_3Value(IHU_SearchCarWarnModSet));
 8001212:	200f      	movs	r0, #15
 8001214:	f004 ffa4 	bl	8006160 <GetIHU_3Value>
 8001218:	7923      	ldrb	r3, [r4, #4]
 800121a:	f360 1387 	bfi	r3, r0, #6, #2
 800121e:	7123      	strb	r3, [r4, #4]
    CanTx_SigSet_0x90_IHU_WindowAutoUPbyLockSet(GetIHU_3Value(IHU_WindowAutoUPbyLockSet));
 8001220:	2010      	movs	r0, #16
 8001222:	f004 ff9d 	bl	8006160 <GetIHU_3Value>
 8001226:	7923      	ldrb	r3, [r4, #4]
 8001228:	f360 1305 	bfi	r3, r0, #4, #2
 800122c:	7123      	strb	r3, [r4, #4]
    CanTx_SigSet_0x90_IHU_exRearMirrorAutoFoldSet(GetIHU_3Value(IHU_exRearMirrorAutoFoldSet));
 800122e:	2011      	movs	r0, #17
 8001230:	f004 ff96 	bl	8006160 <GetIHU_3Value>
 8001234:	7923      	ldrb	r3, [r4, #4]
 8001236:	f360 0383 	bfi	r3, r0, #2, #2
 800123a:	7123      	strb	r3, [r4, #4]
    CanTx_SigSet_0x90_IHU_AssistIlluminationSet(GetIHU_3Value(IHU_AssistIlluminationSet));
 800123c:	2012      	movs	r0, #18
 800123e:	f004 ff8f 	bl	8006160 <GetIHU_3Value>
 8001242:	7923      	ldrb	r3, [r4, #4]
 8001244:	f360 0301 	bfi	r3, r0, #0, #2
 8001248:	7123      	strb	r3, [r4, #4]
    CanTx_SigSet_0x90_IHU_FRSeatHeatLvlSet(GetIHU_3Value(IHU_FRSeatHeatLvlSet));
 800124a:	2013      	movs	r0, #19
 800124c:	f004 ff88 	bl	8006160 <GetIHU_3Value>
 8001250:	7963      	ldrb	r3, [r4, #5]
 8001252:	f360 1307 	bfi	r3, r0, #4, #4
 8001256:	7163      	strb	r3, [r4, #5]
    CanTx_SigSet_0x90_IHU_FLSeatHeatLvlSet(GetIHU_3Value(IHU_FLSeatHeatLvlSet));
 8001258:	2014      	movs	r0, #20
 800125a:	f004 ff81 	bl	8006160 <GetIHU_3Value>
 800125e:	7963      	ldrb	r3, [r4, #5]
 8001260:	f360 0303 	bfi	r3, r0, #0, #4
 8001264:	7163      	strb	r3, [r4, #5]
    CanTx_SigSet_0x90_IHU_FLSeatMassgModSet(GetIHU_3Value(IHU_FLSeatMassgModSet));
 8001266:	2015      	movs	r0, #21
 8001268:	f004 ff7a 	bl	8006160 <GetIHU_3Value>
 800126c:	79a3      	ldrb	r3, [r4, #6]
 800126e:	f360 1307 	bfi	r3, r0, #4, #4
 8001272:	71a3      	strb	r3, [r4, #6]
    CanTx_SigSet_0x90_IHU_FLSeatMassgLvlSet(GetIHU_3Value(IHU_FLSeatMassgLvlSet));
 8001274:	2016      	movs	r0, #22
 8001276:	f004 ff73 	bl	8006160 <GetIHU_3Value>
 800127a:	79a3      	ldrb	r3, [r4, #6]
 800127c:	f360 0302 	bfi	r3, r0, #0, #3
 8001280:	71a3      	strb	r3, [r4, #6]
    CanTx_SigSet_0x90_IHU_Nozzleheatingset(GetIHU_3Value(IHU_Nozzleheatingset));
 8001282:	2017      	movs	r0, #23
 8001284:	f004 ff6c 	bl	8006160 <GetIHU_3Value>
 8001288:	79e3      	ldrb	r3, [r4, #7]
 800128a:	f360 1346 	bfi	r3, r0, #5, #2
 800128e:	71e3      	strb	r3, [r4, #7]
    CanTx_SigSet_0x90_IHU_Frontwindshieldheatingtset(GetIHU_3Value(IHU_Frontwindshieldheatingtset));
 8001290:	2018      	movs	r0, #24
 8001292:	f004 ff65 	bl	8006160 <GetIHU_3Value>
 8001296:	79e3      	ldrb	r3, [r4, #7]
 8001298:	f360 03c4 	bfi	r3, r0, #3, #2
 800129c:	71e3      	strb	r3, [r4, #7]
    CanTx_SigSet_0x90_IHU_ClsWinSpdSet(GetIHU_3Value(IHU_ClsWinSpdSet));
 800129e:	2019      	movs	r0, #25
 80012a0:	f004 ff5e 	bl	8006160 <GetIHU_3Value>
 80012a4:	79e3      	ldrb	r3, [r4, #7]
 80012a6:	f360 0302 	bfi	r3, r0, #0, #3
 80012aa:	71e3      	strb	r3, [r4, #7]

    CanTx_SigSet_0x91_IHU_WindowPosFLCmd(GetIHU_6Value(IHU_WindowPosFLCmd));
 80012ac:	2000      	movs	r0, #0
 80012ae:	f004 ff61 	bl	8006174 <GetIHU_6Value>
 80012b2:	7a23      	ldrb	r3, [r4, #8]
 80012b4:	f360 0306 	bfi	r3, r0, #0, #7
 80012b8:	7223      	strb	r3, [r4, #8]
    CanTx_SigSet_0x91_IHU_WindowPosFRCmd(GetIHU_6Value(IHU_WindowPosFRCmd));
 80012ba:	2001      	movs	r0, #1
 80012bc:	f004 ff5a 	bl	8006174 <GetIHU_6Value>
 80012c0:	7a63      	ldrb	r3, [r4, #9]
 80012c2:	f360 0306 	bfi	r3, r0, #0, #7
 80012c6:	7263      	strb	r3, [r4, #9]
    CanTx_SigSet_0x91_IHU_WindowPosRLCmd(GetIHU_6Value(IHU_WindowPosRLCmd));
 80012c8:	2002      	movs	r0, #2
 80012ca:	f004 ff53 	bl	8006174 <GetIHU_6Value>
 80012ce:	7aa3      	ldrb	r3, [r4, #10]
 80012d0:	f360 0306 	bfi	r3, r0, #0, #7
 80012d4:	72a3      	strb	r3, [r4, #10]
    CanTx_SigSet_0x91_IHU_WindowPosRRCmd(GetIHU_6Value(IHU_WindowPosRRCmd));
 80012d6:	2003      	movs	r0, #3
 80012d8:	f004 ff4c 	bl	8006174 <GetIHU_6Value>
 80012dc:	7ae3      	ldrb	r3, [r4, #11]
 80012de:	f360 0306 	bfi	r3, r0, #0, #7
 80012e2:	72e3      	strb	r3, [r4, #11]
    CanTx_SigSet_0x91_IHU_BackMirrorFoldCmd(GetIHU_6Value(IHU_BackMirrorFoldCmd));
 80012e4:	2004      	movs	r0, #4
 80012e6:	f004 ff45 	bl	8006174 <GetIHU_6Value>
 80012ea:	7b23      	ldrb	r3, [r4, #12]
 80012ec:	f360 1305 	bfi	r3, r0, #4, #2
 80012f0:	7323      	strb	r3, [r4, #12]
    CanTx_SigSet_0x91_IHU_SunroofCmd(GetIHU_6Value(IHU_SunroofCmd));
 80012f2:	2005      	movs	r0, #5
 80012f4:	f004 ff3e 	bl	8006174 <GetIHU_6Value>
 80012f8:	7b23      	ldrb	r3, [r4, #12]
 80012fa:	f360 0303 	bfi	r3, r0, #0, #4
 80012fe:	7323      	strb	r3, [r4, #12]

    CanTx_SigSet_0x92_IHU_AmbientLightLvlSet(GetIHU_10Value(IHU_AmbientLightLvlSet));
 8001300:	2000      	movs	r0, #0
 8001302:	f004 ff41 	bl	8006188 <GetIHU_10Value>
 8001306:	7c23      	ldrb	r3, [r4, #16]
 8001308:	f360 0385 	bfi	r3, r0, #2, #4
 800130c:	7423      	strb	r3, [r4, #16]
    CanTx_SigSet_0x92_IHU_AmbientLightSwtSet(GetIHU_10Value(IHU_AmbientLightSwtSet));
 800130e:	2001      	movs	r0, #1
 8001310:	f004 ff3a 	bl	8006188 <GetIHU_10Value>
 8001314:	7c23      	ldrb	r3, [r4, #16]
 8001316:	f360 0301 	bfi	r3, r0, #0, #2
 800131a:	7423      	strb	r3, [r4, #16]
    CanTx_SigSet_0x92_IHU_SteeringWheelHeatingSWSet(GetIHU_10Value(IHU_SteeringWheelHeatingSWSet));
 800131c:	2002      	movs	r0, #2
 800131e:	f004 ff33 	bl	8006188 <GetIHU_10Value>
 8001322:	7c63      	ldrb	r3, [r4, #17]
 8001324:	f360 0301 	bfi	r3, r0, #0, #2
 8001328:	7463      	strb	r3, [r4, #17]

    CanTx_SigSet_0x250_ESP_1_HDCControl(GetGW_PC_2Value(ESP_1_HDCControl));
 800132a:	2010      	movs	r0, #16
 800132c:	f004 ff38 	bl	80061a0 <GetGW_PC_2Value>
 8001330:	7e23      	ldrb	r3, [r4, #24]
 8001332:	f360 1387 	bfi	r3, r0, #6, #2
 8001336:	7623      	strb	r3, [r4, #24]
    CanTx_SigSet_0x250_ESP_1_DVTSessionFlag(GetGW_PC_2Value(ESP_1_DVTSessionFlag));
 8001338:	200e      	movs	r0, #14
 800133a:	f004 ff31 	bl	80061a0 <GetGW_PC_2Value>
 800133e:	7e23      	ldrb	r3, [r4, #24]
 8001340:	f360 1345 	bfi	r3, r0, #5, #1
 8001344:	7623      	strb	r3, [r4, #24]
    CanTx_SigSet_0x250_ESP_1_TCSFault(GetGW_PC_2Value(ESP_1_TCSFault));
 8001346:	2019      	movs	r0, #25
 8001348:	f004 ff2a 	bl	80061a0 <GetGW_PC_2Value>
 800134c:	7e23      	ldrb	r3, [r4, #24]
 800134e:	f360 1304 	bfi	r3, r0, #4, #1
 8001352:	7623      	strb	r3, [r4, #24]
    CanTx_SigSet_0x250_ESP_1_ESPFault(GetGW_PC_2Value(ESP_1_ESPFault));
 8001354:	2003      	movs	r0, #3
 8001356:	f004 ff23 	bl	80061a0 <GetGW_PC_2Value>
 800135a:	7e23      	ldrb	r3, [r4, #24]
 800135c:	f360 03c3 	bfi	r3, r0, #3, #1
 8001360:	7623      	strb	r3, [r4, #24]
    CanTx_SigSet_0x250_ESP_1_TCSActive(GetGW_PC_2Value(ESP_1_TCSActive));
 8001362:	2004      	movs	r0, #4
 8001364:	f004 ff1c 	bl	80061a0 <GetGW_PC_2Value>
 8001368:	7e23      	ldrb	r3, [r4, #24]
 800136a:	f360 0382 	bfi	r3, r0, #2, #1
 800136e:	7623      	strb	r3, [r4, #24]
    CanTx_SigSet_0x250_ESP_1_ESPActive(GetGW_PC_2Value(ESP_1_ESPActive));
 8001370:	2005      	movs	r0, #5
 8001372:	f004 ff15 	bl	80061a0 <GetGW_PC_2Value>
 8001376:	7e23      	ldrb	r3, [r4, #24]
 8001378:	f360 0341 	bfi	r3, r0, #1, #1
 800137c:	7623      	strb	r3, [r4, #24]
    CanTx_SigSet_0x250_ESP_1_ESPOff(GetGW_PC_2Value(ESP_1_ESPOff));
 800137e:	2006      	movs	r0, #6
 8001380:	f004 ff0e 	bl	80061a0 <GetGW_PC_2Value>
 8001384:	7e23      	ldrb	r3, [r4, #24]
 8001386:	f360 0300 	bfi	r3, r0, #0, #1
 800138a:	7623      	strb	r3, [r4, #24]
    CanTx_SigSet_0x250_ABS_3_AbsActive(GetGW_PC_2Value(ABS_3_AbsActive));
 800138c:	2007      	movs	r0, #7
 800138e:	f004 ff07 	bl	80061a0 <GetGW_PC_2Value>
 8001392:	7e63      	ldrb	r3, [r4, #25]
 8001394:	f360 13c7 	bfi	r3, r0, #7, #1
 8001398:	7663      	strb	r3, [r4, #25]
    CanTx_SigSet_0x250_EPB_1_AutoholdValid(GetGW_PC_2Value(EPB_1_AutoholdValid));
 800139a:	2008      	movs	r0, #8
 800139c:	f004 ff00 	bl	80061a0 <GetGW_PC_2Value>
 80013a0:	7e63      	ldrb	r3, [r4, #25]
 80013a2:	f360 1386 	bfi	r3, r0, #6, #1
 80013a6:	7663      	strb	r3, [r4, #25]
    CanTx_SigSet_0x250_EPB_1_AutoholdActive(GetGW_PC_2Value(EPB_1_AutoholdActive));
 80013a8:	2009      	movs	r0, #9
 80013aa:	f004 fef9 	bl	80061a0 <GetGW_PC_2Value>
 80013ae:	7e63      	ldrb	r3, [r4, #25]
 80013b0:	f360 1345 	bfi	r3, r0, #5, #1
 80013b4:	7663      	strb	r3, [r4, #25]
    CanTx_SigSet_0x250_EPB_1_ActiveLamp(GetGW_PC_2Value(EPB_1_ActiveLamp));
 80013b6:	200a      	movs	r0, #10
 80013b8:	f004 fef2 	bl	80061a0 <GetGW_PC_2Value>
 80013bc:	7e63      	ldrb	r3, [r4, #25]
 80013be:	f360 03c4 	bfi	r3, r0, #3, #2
 80013c2:	7663      	strb	r3, [r4, #25]
    CanTx_SigSet_0x250_EPB_1_WarningLamp(GetGW_PC_2Value(EPB_1_WarningLamp));
 80013c4:	200b      	movs	r0, #11
 80013c6:	f004 feeb 	bl	80061a0 <GetGW_PC_2Value>
 80013ca:	7e63      	ldrb	r3, [r4, #25]
 80013cc:	f360 0382 	bfi	r3, r0, #2, #1
 80013d0:	7663      	strb	r3, [r4, #25]
    CanTx_SigSet_0x250_EPB_1_AutoHold_Standby(GetGW_PC_2Value(EPB_1_AutoHold_Standby));
 80013d2:	200c      	movs	r0, #12
 80013d4:	f004 fee4 	bl	80061a0 <GetGW_PC_2Value>
 80013d8:	7e63      	ldrb	r3, [r4, #25]
 80013da:	f360 0341 	bfi	r3, r0, #1, #1
 80013de:	7663      	strb	r3, [r4, #25]
    CanTx_SigSet_0x250_ESP_1_HDCFault(GetGW_PC_2Value(ESP_1_HDCFault));
 80013e0:	200d      	movs	r0, #13
 80013e2:	f004 fedd 	bl	80061a0 <GetGW_PC_2Value>
 80013e6:	7e63      	ldrb	r3, [r4, #25]
 80013e8:	f360 0300 	bfi	r3, r0, #0, #1
 80013ec:	7663      	strb	r3, [r4, #25]
    CanTx_SigSet_0x250_ABS_3_VehicleSpeedValid(GetGW_PC_2Value(ABS_3_VehicleSpeedValid));
 80013ee:	2001      	movs	r0, #1
 80013f0:	f004 fed6 	bl	80061a0 <GetGW_PC_2Value>
 80013f4:	7ea3      	ldrb	r3, [r4, #26]
 80013f6:	f360 1386 	bfi	r3, r0, #6, #1
 80013fa:	76a3      	strb	r3, [r4, #26]
    CanTx_SigSet_0x250_ABS_3_AbsFault(GetGW_PC_2Value(ABS_3_AbsFault));
 80013fc:	200f      	movs	r0, #15
 80013fe:	f004 fecf 	bl	80061a0 <GetGW_PC_2Value>
 8001402:	7ea3      	ldrb	r3, [r4, #26]
 8001404:	f360 1345 	bfi	r3, r0, #5, #1
 8001408:	76a3      	strb	r3, [r4, #26]
    CanTx_SigSet_0x250_ABS_3_VehicleSpeed(GetGW_PC_2Value(ABS_3_VehicleSpeed));
 800140a:	2000      	movs	r0, #0
 800140c:	f004 fec8 	bl	80061a0 <GetGW_PC_2Value>
 8001410:	76e0      	strb	r0, [r4, #27]
 8001412:	2000      	movs	r0, #0
 8001414:	f004 fec4 	bl	80061a0 <GetGW_PC_2Value>
 8001418:	f3c0 2004 	ubfx	r0, r0, #8, #5
 800141c:	7ea3      	ldrb	r3, [r4, #26]
 800141e:	f360 0304 	bfi	r3, r0, #0, #5
 8001422:	76a3      	strb	r3, [r4, #26]
    CanTx_SigSet_0x250_SAS_1_CalibratedSt(GetGW_PC_2Value(SAS_1_CalibratedSt));
 8001424:	2011      	movs	r0, #17
 8001426:	f004 febb 	bl	80061a0 <GetGW_PC_2Value>
 800142a:	7f23      	ldrb	r3, [r4, #28]
 800142c:	f360 1304 	bfi	r3, r0, #4, #1
 8001430:	7723      	strb	r3, [r4, #28]
    CanTx_SigSet_0x250_SAS_1_FailureSts(GetGW_PC_2Value(SAS_1_FailureSts));
 8001432:	2012      	movs	r0, #18
 8001434:	f004 feb4 	bl	80061a0 <GetGW_PC_2Value>
 8001438:	7f23      	ldrb	r3, [r4, #28]
 800143a:	f360 03c3 	bfi	r3, r0, #3, #1
 800143e:	7723      	strb	r3, [r4, #28]
    CanTx_SigSet_0x250_SAS_1_SteeringAngleValid(GetGW_PC_2Value(SAS_1_SteeringAngleValid));
 8001440:	2013      	movs	r0, #19
 8001442:	f004 fead 	bl	80061a0 <GetGW_PC_2Value>
 8001446:	7f23      	ldrb	r3, [r4, #28]
 8001448:	f360 0382 	bfi	r3, r0, #2, #1
 800144c:	7723      	strb	r3, [r4, #28]
    CanTx_SigSet_0x250_ABS_3_EbdFault(GetGW_PC_2Value(ABS_3_EbdFault));
 800144e:	2014      	movs	r0, #20
 8001450:	f004 fea6 	bl	80061a0 <GetGW_PC_2Value>
 8001454:	7f23      	ldrb	r3, [r4, #28]
 8001456:	f360 0341 	bfi	r3, r0, #1, #1
 800145a:	7723      	strb	r3, [r4, #28]
    CanTx_SigSet_0x250_ABS_3_EbdActive(GetGW_PC_2Value(ABS_3_EbdActive));
 800145c:	2015      	movs	r0, #21
 800145e:	f004 fe9f 	bl	80061a0 <GetGW_PC_2Value>
 8001462:	7f23      	ldrb	r3, [r4, #28]
 8001464:	f360 0300 	bfi	r3, r0, #0, #1
 8001468:	7723      	strb	r3, [r4, #28]
    CanTx_SigSet_0x250_SAS_1_SteeringAngle(GetGW_PC_2Value(SAS_1_SteeringAngle));
 800146a:	2016      	movs	r0, #22
 800146c:	f004 fe98 	bl	80061a0 <GetGW_PC_2Value>
 8001470:	77a0      	strb	r0, [r4, #30]
 8001472:	2016      	movs	r0, #22
 8001474:	f004 fe94 	bl	80061a0 <GetGW_PC_2Value>
 8001478:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800147c:	7760      	strb	r0, [r4, #29]
    CanTx_SigSet_0x250_EPB_1_InhibitDriveOffNotice(GetGW_PC_2Value(EPB_1_InhibitDriveOffNotice));
 800147e:	2017      	movs	r0, #23
 8001480:	f004 fe8e 	bl	80061a0 <GetGW_PC_2Value>
 8001484:	7fe3      	ldrb	r3, [r4, #31]
 8001486:	f360 1304 	bfi	r3, r0, #4, #1
 800148a:	77e3      	strb	r3, [r4, #31]
    CanTx_SigSet_0x250_SAS_1_Timeout_Flag(GetGW_PC_2Value(SAS_1_Timeout_Flag));
 800148c:	2018      	movs	r0, #24
 800148e:	f004 fe87 	bl	80061a0 <GetGW_PC_2Value>
 8001492:	7fe3      	ldrb	r3, [r4, #31]
 8001494:	f360 03c3 	bfi	r3, r0, #3, #1
 8001498:	77e3      	strb	r3, [r4, #31]
    CanTx_SigSet_0x250_ABS_3_Timeout_Flag(GetGW_PC_2Value(ABS_3_Timeout_Flag));
 800149a:	2002      	movs	r0, #2
 800149c:	f004 fe80 	bl	80061a0 <GetGW_PC_2Value>
 80014a0:	7fe3      	ldrb	r3, [r4, #31]
 80014a2:	f360 0382 	bfi	r3, r0, #2, #1
 80014a6:	77e3      	strb	r3, [r4, #31]
    CanTx_SigSet_0x250_EPB_1_Timeout_Flag(GetGW_PC_2Value(EPB_1_Timeout_Flag));
 80014a8:	201a      	movs	r0, #26
 80014aa:	f004 fe79 	bl	80061a0 <GetGW_PC_2Value>
 80014ae:	7fe3      	ldrb	r3, [r4, #31]
 80014b0:	f360 0341 	bfi	r3, r0, #1, #1
 80014b4:	77e3      	strb	r3, [r4, #31]
    CanTx_SigSet_0x250_ESP_1_Timeout_Flag(GetGW_PC_2Value(ESP_1_Timeout_Flag));
 80014b6:	201b      	movs	r0, #27
 80014b8:	f004 fe72 	bl	80061a0 <GetGW_PC_2Value>
 80014bc:	7fe3      	ldrb	r3, [r4, #31]
 80014be:	e001      	b.n	80014c4 <CanGetMsgSignal+0x388>
 80014c0:	20008418 	.word	0x20008418
 80014c4:	f360 0300 	bfi	r3, r0, #0, #1
 80014c8:	77e3      	strb	r3, [r4, #31]

    CanTx_SigSet_0x255_AWD_1_DiagnosticLampRequest(GetGW_PC_7Value(AWD_1_DiagnosticLampRequest));
 80014ca:	2000      	movs	r0, #0
 80014cc:	f004 fe82 	bl	80061d4 <GetGW_PC_7Value>
 80014d0:	f894 3020 	ldrb.w	r3, [r4, #32]
 80014d4:	f360 13c7 	bfi	r3, r0, #7, #1
 80014d8:	f884 3020 	strb.w	r3, [r4, #32]
    CanTx_SigSet_0x255_AWD_1_ShiftSystemEncoderFault(GetGW_PC_7Value(AWD_1_ShiftSystemEncoderFault));
 80014dc:	2001      	movs	r0, #1
 80014de:	f004 fe79 	bl	80061d4 <GetGW_PC_7Value>
 80014e2:	f894 3020 	ldrb.w	r3, [r4, #32]
 80014e6:	f360 1386 	bfi	r3, r0, #6, #1
 80014ea:	f884 3020 	strb.w	r3, [r4, #32]
    CanTx_SigSet_0x255_AWD_1_ShiftSystemStuckinLow(GetGW_PC_7Value(AWD_1_ShiftSystemStuckinLow));
 80014ee:	2002      	movs	r0, #2
 80014f0:	f004 fe70 	bl	80061d4 <GetGW_PC_7Value>
 80014f4:	f894 3020 	ldrb.w	r3, [r4, #32]
 80014f8:	f360 1345 	bfi	r3, r0, #5, #1
 80014fc:	f884 3020 	strb.w	r3, [r4, #32]
    CanTx_SigSet_0x255_AWD_1_ShiftSystemActuatorFault(GetGW_PC_7Value(AWD_1_ShiftSystemActuatorFault));
 8001500:	2003      	movs	r0, #3
 8001502:	f004 fe67 	bl	80061d4 <GetGW_PC_7Value>
 8001506:	f894 3020 	ldrb.w	r3, [r4, #32]
 800150a:	f360 1304 	bfi	r3, r0, #4, #1
 800150e:	f884 3020 	strb.w	r3, [r4, #32]
    CanTx_SigSet_0x255_AWD_1_SystemOperatingMode(GetGW_PC_7Value(AWD_1_SystemOperatingMode));
 8001512:	2004      	movs	r0, #4
 8001514:	f004 fe5e 	bl	80061d4 <GetGW_PC_7Value>
 8001518:	f894 3020 	ldrb.w	r3, [r4, #32]
 800151c:	f360 0303 	bfi	r3, r0, #0, #4
 8001520:	f884 3020 	strb.w	r3, [r4, #32]
    CanTx_SigSet_0x255_AWD_1_Lamp4WDLow(GetGW_PC_7Value(AWD_1_Lamp4WDLow));
 8001524:	2005      	movs	r0, #5
 8001526:	f004 fe55 	bl	80061d4 <GetGW_PC_7Value>
 800152a:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 800152e:	f360 1387 	bfi	r3, r0, #6, #2
 8001532:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
    CanTx_SigSet_0x255_AWD_1_Lamp4WDLock(GetGW_PC_7Value(AWD_1_Lamp4WDLock));
 8001536:	2006      	movs	r0, #6
 8001538:	f004 fe4c 	bl	80061d4 <GetGW_PC_7Value>
 800153c:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8001540:	f360 1305 	bfi	r3, r0, #4, #2
 8001544:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
    CanTx_SigSet_0x255_AWD_1_Lamp2WD(GetGW_PC_7Value(AWD_1_Lamp2WD));
 8001548:	2007      	movs	r0, #7
 800154a:	f004 fe43 	bl	80061d4 <GetGW_PC_7Value>
 800154e:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8001552:	f360 0383 	bfi	r3, r0, #2, #2
 8001556:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
    CanTx_SigSet_0x255_AWD_1_ClutchCircuitFaultStatus(GetGW_PC_7Value(AWD_1_ClutchCircuitFaultStatus));
 800155a:	2008      	movs	r0, #8
 800155c:	f004 fe3a 	bl	80061d4 <GetGW_PC_7Value>
 8001560:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8001564:	f360 0301 	bfi	r3, r0, #0, #2
 8001568:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
    CanTx_SigSet_0x255_EDL_1_FrontDiffLockYellowLamp(GetGW_PC_7Value(EDL_1_FrontDiffLockYellowLamp));
 800156c:	2009      	movs	r0, #9
 800156e:	f004 fe31 	bl	80061d4 <GetGW_PC_7Value>
 8001572:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8001576:	f360 1387 	bfi	r3, r0, #6, #2
 800157a:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
    CanTx_SigSet_0x255_EDL_1_FrontDiffLockGreenLamp(GetGW_PC_7Value(EDL_1_FrontDiffLockGreenLamp));
 800157e:	200a      	movs	r0, #10
 8001580:	f004 fe28 	bl	80061d4 <GetGW_PC_7Value>
 8001584:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8001588:	f360 1305 	bfi	r3, r0, #4, #2
 800158c:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
    CanTx_SigSet_0x255_AWD_1_OpreationNotice(GetGW_PC_7Value(AWD_1_OpreationNotice));
 8001590:	200b      	movs	r0, #11
 8001592:	f004 fe1f 	bl	80061d4 <GetGW_PC_7Value>
 8001596:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 800159a:	f360 0303 	bfi	r3, r0, #0, #4
 800159e:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
    CanTx_SigSet_0x255_EDL_1_StatusNotice(GetGW_PC_7Value(EDL_1_StatusNotice));
 80015a2:	200c      	movs	r0, #12
 80015a4:	f004 fe16 	bl	80061d4 <GetGW_PC_7Value>
 80015a8:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80015ac:	f360 1307 	bfi	r3, r0, #4, #4
 80015b0:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
    CanTx_SigSet_0x255_EDL_1_RearDiffLockYellowLamp(GetGW_PC_7Value(EDL_1_RearDiffLockYellowLamp));
 80015b4:	200d      	movs	r0, #13
 80015b6:	f004 fe0d 	bl	80061d4 <GetGW_PC_7Value>
 80015ba:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80015be:	f360 0383 	bfi	r3, r0, #2, #2
 80015c2:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
    CanTx_SigSet_0x255_EDL_1_RearDiffLockGreenLamp(GetGW_PC_7Value(EDL_1_RearDiffLockGreenLamp));
 80015c6:	200e      	movs	r0, #14
 80015c8:	f004 fe04 	bl	80061d4 <GetGW_PC_7Value>
 80015cc:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80015d0:	f360 0301 	bfi	r3, r0, #0, #2
 80015d4:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
    CanTx_SigSet_0x255_EDL_1_Timeout_Flag(GetGW_PC_7Value(EDL_1_Timeout_Flag));
 80015d8:	200f      	movs	r0, #15
 80015da:	f004 fdfb 	bl	80061d4 <GetGW_PC_7Value>
 80015de:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 80015e2:	f360 0341 	bfi	r3, r0, #1, #1
 80015e6:	f884 3027 	strb.w	r3, [r4, #39]	@ 0x27
    CanTx_SigSet_0x255_AWD_1_Timeout_Flag(GetGW_PC_7Value(AWD_1_Timeout_Flag));
 80015ea:	2010      	movs	r0, #16
 80015ec:	f004 fdf2 	bl	80061d4 <GetGW_PC_7Value>
 80015f0:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 80015f4:	f360 0300 	bfi	r3, r0, #0, #1
 80015f8:	f884 3027 	strb.w	r3, [r4, #39]	@ 0x27

    CanTx_SigSet_0x268_PEPS_ESCL_LearningStatus(GetPEPS_1Value(PEPS_ESCL_LearningStatus));
 80015fc:	2000      	movs	r0, #0
 80015fe:	f004 fdf3 	bl	80061e8 <GetPEPS_1Value>
 8001602:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8001606:	f360 0301 	bfi	r3, r0, #0, #2
 800160a:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
    CanTx_SigSet_0x268_PEPS_ESCL_FailStatus(GetPEPS_1Value(PEPS_ESCL_FailStatus));
 800160e:	2001      	movs	r0, #1
 8001610:	f004 fdea 	bl	80061e8 <GetPEPS_1Value>
 8001614:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8001618:	f360 13c7 	bfi	r3, r0, #7, #1
 800161c:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
    CanTx_SigSet_0x268_PEPS_SSB_FailStatus(GetPEPS_1Value(PEPS_SSB_FailStatus));
 8001620:	2002      	movs	r0, #2
 8001622:	f004 fde1 	bl	80061e8 <GetPEPS_1Value>
 8001626:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 800162a:	f360 1386 	bfi	r3, r0, #6, #1
 800162e:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
    CanTx_SigSet_0x268_PEPS_PIN_LearningStatus(GetPEPS_1Value(PEPS_PIN_LearningStatus));
 8001632:	2003      	movs	r0, #3
 8001634:	f004 fdd8 	bl	80061e8 <GetPEPS_1Value>
 8001638:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 800163c:	f360 0341 	bfi	r3, r0, #1, #1
 8001640:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
    CanTx_SigSet_0x268_PEPS_PowerRelayOutputFail(GetPEPS_1Value(PEPS_PowerRelayOutputFail));
 8001644:	2004      	movs	r0, #4
 8001646:	f004 fdcf 	bl	80061e8 <GetPEPS_1Value>
 800164a:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 800164e:	f360 0300 	bfi	r3, r0, #0, #1
 8001652:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
    CanTx_SigSet_0x268_PEPS_FailStatus(GetPEPS_1Value(PEPS_FailStatus));
 8001656:	2005      	movs	r0, #5
 8001658:	f004 fdc6 	bl	80061e8 <GetPEPS_1Value>
 800165c:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 8001660:	f360 0300 	bfi	r3, r0, #0, #1
 8001664:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
    CanTx_SigSet_0x268_PEPS_NotPNWarning(GetPEPS_1Value(PEPS_NotPNWarning));
 8001668:	2006      	movs	r0, #6
 800166a:	f004 fdbd 	bl	80061e8 <GetPEPS_1Value>
 800166e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8001672:	f360 13c7 	bfi	r3, r0, #7, #1
 8001676:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    CanTx_SigSet_0x268_PEPS_ESCL_NotLockWarning(GetPEPS_1Value(PEPS_ESCL_NotLockWarning));
 800167a:	2007      	movs	r0, #7
 800167c:	f004 fdb4 	bl	80061e8 <GetPEPS_1Value>
 8001680:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8001684:	f360 1304 	bfi	r3, r0, #4, #1
 8001688:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    CanTx_SigSet_0x268_PEPS_ESCL_NotUnlockWarning(GetPEPS_1Value(PEPS_ESCL_NotUnlockWarning));
 800168c:	2008      	movs	r0, #8
 800168e:	f004 fdab 	bl	80061e8 <GetPEPS_1Value>
 8001692:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8001696:	f360 03c3 	bfi	r3, r0, #3, #1
 800169a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    CanTx_SigSet_0x268_PEPS_LockNotOFFWarning(GetPEPS_1Value(PEPS_LockNotOFFWarning));
 800169e:	2009      	movs	r0, #9
 80016a0:	f004 fda2 	bl	80061e8 <GetPEPS_1Value>
 80016a4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80016a8:	f360 13c7 	bfi	r3, r0, #7, #1
 80016ac:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    CanTx_SigSet_0x268_PEPS_KeyIntWarning1(GetPEPS_1Value(PEPS_KeyIntWarning1));
 80016b0:	200a      	movs	r0, #10
 80016b2:	f004 fd99 	bl	80061e8 <GetPEPS_1Value>
 80016b6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80016ba:	f360 1386 	bfi	r3, r0, #6, #1
 80016be:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    CanTx_SigSet_0x268_PEPS_KeyBatteryWarning(GetPEPS_1Value(PEPS_KeyBatteryWarning));
 80016c2:	200b      	movs	r0, #11
 80016c4:	f004 fd90 	bl	80061e8 <GetPEPS_1Value>
 80016c8:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80016cc:	f360 1345 	bfi	r3, r0, #5, #1
 80016d0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    CanTx_SigSet_0x268_PEPS_KeyOutWarning1(GetPEPS_1Value(PEPS_KeyOutWarning1));
 80016d4:	200c      	movs	r0, #12
 80016d6:	f004 fd87 	bl	80061e8 <GetPEPS_1Value>
 80016da:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80016de:	f360 1304 	bfi	r3, r0, #4, #1
 80016e2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    CanTx_SigSet_0x268_PEPS_NoKeyFoundWarning(GetPEPS_1Value(PEPS_NoKeyFoundWarning));
 80016e6:	200d      	movs	r0, #13
 80016e8:	f004 fd7e 	bl	80061e8 <GetPEPS_1Value>
 80016ec:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80016f0:	f360 03c3 	bfi	r3, r0, #3, #1
 80016f4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    CanTx_SigSet_0x268_PEPS_KeyReminderWarning(GetPEPS_1Value(PEPS_KeyReminderWarning));
 80016f8:	200e      	movs	r0, #14
 80016fa:	f004 fd75 	bl	80061e8 <GetPEPS_1Value>
 80016fe:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8001702:	f360 0382 	bfi	r3, r0, #2, #1
 8001706:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    CanTx_SigSet_0x268_PEPS_ClutchIndicationWarning(GetPEPS_1Value(PEPS_ClutchIndicationWarning));
 800170a:	200f      	movs	r0, #15
 800170c:	f004 fd6c 	bl	80061e8 <GetPEPS_1Value>
 8001710:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8001714:	f360 0341 	bfi	r3, r0, #1, #1
 8001718:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    CanTx_SigSet_0x268_PEPS_BrakeIndicationWarning(GetPEPS_1Value(PEPS_BrakeIndicationWarning));
 800171c:	2010      	movs	r0, #16
 800171e:	f004 fd63 	bl	80061e8 <GetPEPS_1Value>
 8001722:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8001726:	f360 0300 	bfi	r3, r0, #0, #1
 800172a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d

    CanTx_SigSet_0x269_PEPS_RemoteControlSt(GetPEPS_3Value(PEPS_RemoteControlSt));
 800172e:	2000      	movs	r0, #0
 8001730:	f004 fd64 	bl	80061fc <GetPEPS_3Value>
 8001734:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8001738:	f360 0300 	bfi	r3, r0, #0, #1
 800173c:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    CanTx_SigSet_0x269_PEPS_3_RollingCounter(GetPEPS_3Value(PEPS_3_RollingCounter));
 8001740:	2001      	movs	r0, #1
 8001742:	f004 fd5b 	bl	80061fc <GetPEPS_3Value>
 8001746:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 800174a:	f360 0303 	bfi	r3, r0, #0, #4
 800174e:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
    CanTx_SigSet_0x269_PEPS_3_Checksum(GetPEPS_3Value(PEPS_3_Checksum));
 8001752:	2002      	movs	r0, #2
 8001754:	f004 fd52 	bl	80061fc <GetPEPS_3Value>
 8001758:	f884 0037 	strb.w	r0, [r4, #55]	@ 0x37

    CanTx_SigSet_0x300_IHU_RearDefrostButtonSts(GetIHU_1Value(IHU_RearDefrostButtonSts));
 800175c:	2000      	movs	r0, #0
 800175e:	f004 fd57 	bl	8006210 <GetIHU_1Value>
 8001762:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8001766:	f360 1387 	bfi	r3, r0, #6, #2
 800176a:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
    CanTx_SigSet_0x300_IHU_FrontDefrostButtonSts(GetIHU_1Value(IHU_FrontDefrostButtonSts));
 800176e:	2001      	movs	r0, #1
 8001770:	f004 fd4e 	bl	8006210 <GetIHU_1Value>
 8001774:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8001778:	f360 1305 	bfi	r3, r0, #4, #2
 800177c:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
    CanTx_SigSet_0x300_IHU_ACSelfCleanModeSet(GetIHU_1Value(IHU_ACSelfCleanModeSet));
 8001780:	2002      	movs	r0, #2
 8001782:	f004 fd45 	bl	8006210 <GetIHU_1Value>
 8001786:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800178a:	f360 0383 	bfi	r3, r0, #2, #2
 800178e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
    CanTx_SigSet_0x300_IHU_EPMModSet(GetIHU_1Value(IHU_EPMModSet));
 8001792:	2003      	movs	r0, #3
 8001794:	f004 fd3c 	bl	8006210 <GetIHU_1Value>
 8001798:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800179c:	f360 0301 	bfi	r3, r0, #0, #2
 80017a0:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
    CanTx_SigSet_0x300_IHU_ACButtonSts(GetIHU_1Value(IHU_ACButtonSts));
 80017a4:	2004      	movs	r0, #4
 80017a6:	f004 fd33 	bl	8006210 <GetIHU_1Value>
 80017aa:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 80017ae:	f360 1387 	bfi	r3, r0, #6, #2
 80017b2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
    CanTx_SigSet_0x300_IHU_LeaveHome_Time(GetIHU_1Value(IHU_LeaveHome_Time));
 80017b6:	2005      	movs	r0, #5
 80017b8:	f004 fd2a 	bl	8006210 <GetIHU_1Value>
 80017bc:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 80017c0:	f360 03c5 	bfi	r3, r0, #3, #3
 80017c4:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
    CanTx_SigSet_0x300_IHU_FollowMeHome_Time(GetIHU_1Value(IHU_FollowMeHome_Time));
 80017c8:	2006      	movs	r0, #6
 80017ca:	f004 fd21 	bl	8006210 <GetIHU_1Value>
 80017ce:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 80017d2:	f360 0302 	bfi	r3, r0, #0, #3
 80017d6:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
    CanTx_SigSet_0x300_IHU_ACSystemOff(GetIHU_1Value(IHU_ACSystemOff));
 80017da:	2007      	movs	r0, #7
 80017dc:	f004 fd18 	bl	8006210 <GetIHU_1Value>
 80017e0:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 80017e4:	f360 13c7 	bfi	r3, r0, #7, #1
 80017e8:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
    CanTx_SigSet_0x300_IHU_TemperatureAjust(GetIHU_1Value(IHU_TemperatureAjust));
 80017ec:	2008      	movs	r0, #8
 80017ee:	f004 fd0f 	bl	8006210 <GetIHU_1Value>
 80017f2:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 80017f6:	f360 03c6 	bfi	r3, r0, #3, #4
 80017fa:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
    CanTx_SigSet_0x300_IHU_InteriorLightTimeAjust(GetIHU_1Value(IHU_InteriorLightTimeAjust));
 80017fe:	2009      	movs	r0, #9
 8001800:	f004 fd06 	bl	8006210 <GetIHU_1Value>
 8001804:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 8001808:	f360 0302 	bfi	r3, r0, #0, #3
 800180c:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
    CanTx_SigSet_0x300_IHU_AirCirculationMode(GetIHU_1Value(IHU_AirCirculationMode));
 8001810:	200a      	movs	r0, #10
 8001812:	f004 fcfd 	bl	8006210 <GetIHU_1Value>
 8001816:	f894 303b 	ldrb.w	r3, [r4, #59]	@ 0x3b
 800181a:	f360 1387 	bfi	r3, r0, #6, #2
 800181e:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
    CanTx_SigSet_0x300_IHU_AirDistributeMode(GetIHU_1Value(IHU_AirDistributeMode));
 8001822:	200b      	movs	r0, #11
 8001824:	f004 fcf4 	bl	8006210 <GetIHU_1Value>
 8001828:	f894 303b 	ldrb.w	r3, [r4, #59]	@ 0x3b
 800182c:	f360 03c5 	bfi	r3, r0, #3, #3
 8001830:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
    CanTx_SigSet_0x300_IHU_BlowerSpeedAjust(GetIHU_1Value(IHU_BlowerSpeedAjust));
 8001834:	200c      	movs	r0, #12
 8001836:	f004 fceb 	bl	8006210 <GetIHU_1Value>
 800183a:	f894 303b 	ldrb.w	r3, [r4, #59]	@ 0x3b
 800183e:	f360 0302 	bfi	r3, r0, #0, #3
 8001842:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
    CanTx_SigSet_0x300_IHU_AUTOPassengerButtonSts(GetIHU_1Value(IHU_AUTOPassengerButtonSts));
 8001846:	200d      	movs	r0, #13
 8001848:	f004 fce2 	bl	8006210 <GetIHU_1Value>
 800184c:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001850:	f360 1346 	bfi	r3, r0, #5, #2
 8001854:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    CanTx_SigSet_0x300_IHU_AUTOButtonSts(GetIHU_1Value(IHU_AUTOButtonSts));
 8001858:	200e      	movs	r0, #14
 800185a:	f004 fcd9 	bl	8006210 <GetIHU_1Value>
 800185e:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001862:	f360 03c4 	bfi	r3, r0, #3, #2
 8001866:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    CanTx_SigSet_0x300_IHU_PTCButtonSts(GetIHU_1Value(IHU_PTCButtonSts));
 800186a:	200f      	movs	r0, #15
 800186c:	f004 fcd0 	bl	8006210 <GetIHU_1Value>
 8001870:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001874:	f360 0342 	bfi	r3, r0, #1, #2
 8001878:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    CanTx_SigSet_0x300_IHU_DriverSetTemperature(GetIHU_1Value(IHU_DriverSetTemperature));
 800187c:	2010      	movs	r0, #16
 800187e:	f004 fcc7 	bl	8006210 <GetIHU_1Value>
 8001882:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8001886:	f360 0387 	bfi	r3, r0, #2, #6
 800188a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    CanTx_SigSet_0x300_IHU_DualButtonSts(GetIHU_1Value(IHU_DualButtonSts));
 800188e:	2011      	movs	r0, #17
 8001890:	f004 fcbe 	bl	8006210 <GetIHU_1Value>
 8001894:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8001898:	f360 0301 	bfi	r3, r0, #0, #2
 800189c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    CanTx_SigSet_0x300_IHU_SS_Set(GetIHU_1Value(IHU_SS_Set));
 80018a0:	2012      	movs	r0, #18
 80018a2:	f004 fcb5 	bl	8006210 <GetIHU_1Value>
 80018a6:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80018aa:	f360 1387 	bfi	r3, r0, #6, #2
 80018ae:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    CanTx_SigSet_0x300_IHU_PngSetTemperature(GetIHU_1Value(IHU_PngSetTemperature));
 80018b2:	2013      	movs	r0, #19
 80018b4:	f004 fcac 	bl	8006210 <GetIHU_1Value>
 80018b8:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80018bc:	f360 0305 	bfi	r3, r0, #0, #6
 80018c0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    CanTx_SigSet_0x300_IHU_WirelessChargeSwtSet(GetIHU_1Value(IHU_WirelessChargeSwtSet));
 80018c4:	2014      	movs	r0, #20
 80018c6:	f004 fca3 	bl	8006210 <GetIHU_1Value>
 80018ca:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80018ce:	f360 1387 	bfi	r3, r0, #6, #2
 80018d2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
    CanTx_SigSet_0x300_IHU_DrivemodeSet(GetIHU_1Value(IHU_DrivemodeSet));
 80018d6:	2015      	movs	r0, #21
 80018d8:	f004 fc9a 	bl	8006210 <GetIHU_1Value>
 80018dc:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80018e0:	f360 0305 	bfi	r3, r0, #0, #6
 80018e4:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f

    CanTx_SigSet_0x302_FCM_FCWONOFFSts(GetFCM_3Value(FCM_FCWONOFFSts));
 80018e8:	2000      	movs	r0, #0
 80018ea:	f004 fc9b 	bl	8006224 <GetFCM_3Value>
 80018ee:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80018f2:	f360 1346 	bfi	r3, r0, #5, #2
 80018f6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    CanTx_SigSet_0x302_FCM_AEBMode(GetFCM_3Value(FCM_AEBMode));
 80018fa:	2001      	movs	r0, #1
 80018fc:	f004 fc92 	bl	8006224 <GetFCM_3Value>
 8001900:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8001904:	f360 0384 	bfi	r3, r0, #2, #3
 8001908:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    CanTx_SigSet_0x302_FCM_AEBONOFFSts(GetFCM_3Value(FCM_AEBONOFFSts));
 800190c:	2002      	movs	r0, #2
 800190e:	f004 fc89 	bl	8006224 <GetFCM_3Value>
 8001912:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8001916:	f360 0301 	bfi	r3, r0, #0, #2
 800191a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    CanTx_SigSet_0x302_FCM_FCWpreWarning(GetFCM_3Value(FCM_FCWpreWarning));
 800191e:	2003      	movs	r0, #3
 8001920:	f004 fc80 	bl	8006224 <GetFCM_3Value>
 8001924:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001928:	f360 1386 	bfi	r3, r0, #6, #1
 800192c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    CanTx_SigSet_0x302_FCM_DistanceWarning(GetFCM_3Value(FCM_DistanceWarning));
 8001930:	2004      	movs	r0, #4
 8001932:	f004 fc77 	bl	8006224 <GetFCM_3Value>
 8001936:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800193a:	f360 1345 	bfi	r3, r0, #5, #1
 800193e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    CanTx_SigSet_0x302_FCM_FCWSnvtySts(GetFCM_3Value(FCM_FCWSnvtySts));
 8001942:	2005      	movs	r0, #5
 8001944:	f004 fc6e 	bl	8006224 <GetFCM_3Value>
 8001948:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800194c:	f360 03c4 	bfi	r3, r0, #3, #2
 8001950:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    CanTx_SigSet_0x302_FCM_FCWMode(GetFCM_3Value(FCM_FCWMode));
 8001954:	2006      	movs	r0, #6
 8001956:	f004 fc65 	bl	8006224 <GetFCM_3Value>
 800195a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800195e:	f360 0302 	bfi	r3, r0, #0, #3
 8001962:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    CanTx_SigSet_0x302_FCM_ACCTakeOverReq(GetFCM_3Value(FCM_ACCTakeOverReq));
 8001966:	2007      	movs	r0, #7
 8001968:	f004 fc5c 	bl	8006224 <GetFCM_3Value>
 800196c:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8001970:	f360 13c7 	bfi	r3, r0, #7, #1
 8001974:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    CanTx_SigSet_0x302_FCM_ACCMode(GetFCM_3Value(FCM_ACCMode));
 8001978:	2008      	movs	r0, #8
 800197a:	f004 fc53 	bl	8006224 <GetFCM_3Value>
 800197e:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8001982:	f360 1306 	bfi	r3, r0, #4, #3
 8001986:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    CanTx_SigSet_0x302_FCM_TimeGapSetICM(GetFCM_3Value(FCM_TimeGapSetICM));
 800198a:	2009      	movs	r0, #9
 800198c:	f004 fc4a 	bl	8006224 <GetFCM_3Value>
 8001990:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8001994:	f360 0343 	bfi	r3, r0, #1, #3
 8001998:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    CanTx_SigSet_0x302_FCM_ACCVSetDis(GetFCM_3Value(FCM_ACCVSetDis));
 800199c:	200a      	movs	r0, #10
 800199e:	f004 fc41 	bl	8006224 <GetFCM_3Value>
 80019a2:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 80019a6:	200a      	movs	r0, #10
 80019a8:	f004 fc3c 	bl	8006224 <GetFCM_3Value>
 80019ac:	f3c0 2000 	ubfx	r0, r0, #8, #1
 80019b0:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 80019b4:	f360 0300 	bfi	r3, r0, #0, #1
 80019b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    CanTx_SigSet_0x302_FCM_ACCTextInfo(GetFCM_3Value(FCM_ACCTextInfo));
 80019bc:	200b      	movs	r0, #11
 80019be:	f004 fc31 	bl	8006224 <GetFCM_3Value>
 80019c2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80019c6:	f360 1307 	bfi	r3, r0, #4, #4
 80019ca:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    CanTx_SigSet_0x302_FCM_AEBTextInfo(GetFCM_3Value(FCM_AEBTextInfo));
 80019ce:	200c      	movs	r0, #12
 80019d0:	f004 fc28 	bl	8006224 <GetFCM_3Value>
 80019d4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80019d8:	f360 0303 	bfi	r3, r0, #0, #4
 80019dc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
    CanTx_SigSet_0x302_FCM_DVMode(GetFCM_3Value(FCM_DVMode));
 80019e0:	200d      	movs	r0, #13
 80019e2:	f004 fc1f 	bl	8006224 <GetFCM_3Value>
 80019e6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80019ea:	f360 0383 	bfi	r3, r0, #2, #2
 80019ee:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    CanTx_SigSet_0x302_FCM_CameraTextInfo(GetFCM_3Value(FCM_CameraTextInfo));
 80019f2:	200e      	movs	r0, #14
 80019f4:	f004 fc16 	bl	8006224 <GetFCM_3Value>
 80019f8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80019fc:	f360 0301 	bfi	r3, r0, #0, #2
 8001a00:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45

    CanTx_SigSet_0x303_FCM_LDWLKATypefeedback(GetFCM_4Value(FCM_LDWLKATypefeedback));
 8001a04:	2000      	movs	r0, #0
 8001a06:	f004 fc17 	bl	8006238 <GetFCM_4Value>
 8001a0a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8001a0e:	f360 1346 	bfi	r3, r0, #5, #2
 8001a12:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    CanTx_SigSet_0x303_FCM_LDWSysSts(GetFCM_4Value(FCM_LDWSysSts));
 8001a16:	2001      	movs	r0, #1
 8001a18:	f004 fc0e 	bl	8006238 <GetFCM_4Value>
 8001a1c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8001a20:	f360 0384 	bfi	r3, r0, #2, #3
 8001a24:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    CanTx_SigSet_0x303_FCM_LDWONOFFSts(GetFCM_4Value(FCM_LDWONOFFSts));
 8001a28:	2002      	movs	r0, #2
 8001a2a:	f004 fc05 	bl	8006238 <GetFCM_4Value>
 8001a2e:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8001a32:	f360 0301 	bfi	r3, r0, #0, #2
 8001a36:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    CanTx_SigSet_0x303_FCM_LDW_ELK_TJA_LDPLeftVisuali(GetFCM_4Value(FCM_LDW_ELK_TJA_LDPLeftVisuali));
 8001a3a:	2003      	movs	r0, #3
 8001a3c:	f004 fbfc 	bl	8006238 <GetFCM_4Value>
 8001a40:	f894 3049 	ldrb.w	r3, [r4, #73]	@ 0x49
 8001a44:	f360 1387 	bfi	r3, r0, #6, #2
 8001a48:	f884 3049 	strb.w	r3, [r4, #73]	@ 0x49
    CanTx_SigSet_0x303_FCM_LDP_TJA_ELKTakeoverReq(GetFCM_4Value(FCM_LDP_TJA_ELKTakeoverReq));
 8001a4c:	2004      	movs	r0, #4
 8001a4e:	f004 fbf3 	bl	8006238 <GetFCM_4Value>
 8001a52:	f894 3049 	ldrb.w	r3, [r4, #73]	@ 0x49
 8001a56:	f360 1305 	bfi	r3, r0, #4, #2
 8001a5a:	f884 3049 	strb.w	r3, [r4, #73]	@ 0x49
    CanTx_SigSet_0x303_FCM_LDWWarnModSts(GetFCM_4Value(FCM_LDWWarnModSts));
 8001a5e:	2005      	movs	r0, #5
 8001a60:	f004 fbea 	bl	8006238 <GetFCM_4Value>
 8001a64:	f894 3049 	ldrb.w	r3, [r4, #73]	@ 0x49
 8001a68:	f360 0383 	bfi	r3, r0, #2, #2
 8001a6c:	f884 3049 	strb.w	r3, [r4, #73]	@ 0x49
    CanTx_SigSet_0x303_FCM_LDWLDPSnvtySts(GetFCM_4Value(FCM_LDWLDPSnvtySts));
 8001a70:	2006      	movs	r0, #6
 8001a72:	f004 fbe1 	bl	8006238 <GetFCM_4Value>
 8001a76:	f894 3049 	ldrb.w	r3, [r4, #73]	@ 0x49
 8001a7a:	f360 0301 	bfi	r3, r0, #0, #2
 8001a7e:	f884 3049 	strb.w	r3, [r4, #73]	@ 0x49
    CanTx_SigSet_0x303_FCM_TSRState(GetFCM_4Value(FCM_TSRState));
 8001a82:	2007      	movs	r0, #7
 8001a84:	f004 fbd8 	bl	8006238 <GetFCM_4Value>
 8001a88:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8001a8c:	f360 1347 	bfi	r3, r0, #5, #3
 8001a90:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
    CanTx_SigSet_0x303_FCM_TSROverSpeedAcousticONOFFSts(GetFCM_4Value(FCM_TSROverSpeedAcousticONOFFSts));
 8001a94:	2008      	movs	r0, #8
 8001a96:	f004 fbcf 	bl	8006238 <GetFCM_4Value>
 8001a9a:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8001a9e:	f360 1304 	bfi	r3, r0, #4, #1
 8001aa2:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
    CanTx_SigSet_0x303_FCM_TSROverSpeedONOFFSts(GetFCM_4Value(FCM_TSROverSpeedONOFFSts));
 8001aa6:	2009      	movs	r0, #9
 8001aa8:	f004 fbc6 	bl	8006238 <GetFCM_4Value>
 8001aac:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8001ab0:	f360 03c3 	bfi	r3, r0, #3, #1
 8001ab4:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
    CanTx_SigSet_0x303_FCM_TSRONOFFSts(GetFCM_4Value(FCM_TSRONOFFSts));
 8001ab8:	200a      	movs	r0, #10
 8001aba:	f004 fbbd 	bl	8006238 <GetFCM_4Value>
 8001abe:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8001ac2:	f360 0382 	bfi	r3, r0, #2, #1
 8001ac6:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
    CanTx_SigSet_0x303_FCM_LDW_ELK_TJA_LDPRightVisuali(GetFCM_4Value(FCM_LDW_ELK_TJA_LDPRightVisuali));
 8001aca:	200b      	movs	r0, #11
 8001acc:	f004 fbb4 	bl	8006238 <GetFCM_4Value>
 8001ad0:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8001ad4:	f360 0301 	bfi	r3, r0, #0, #2
 8001ad8:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
    CanTx_SigSet_0x303_FCM_TSRDisplay(GetFCM_4Value(FCM_TSRDisplay));
 8001adc:	200c      	movs	r0, #12
 8001ade:	f004 fbab 	bl	8006238 <GetFCM_4Value>
 8001ae2:	f884 004b 	strb.w	r0, [r4, #75]	@ 0x4b
    CanTx_SigSet_0x303_FCM_IHBCStatus(GetFCM_4Value(FCM_IHBCStatus));
 8001ae6:	200d      	movs	r0, #13
 8001ae8:	f004 fba6 	bl	8006238 <GetFCM_4Value>
 8001aec:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 8001af0:	f360 1347 	bfi	r3, r0, #5, #3
 8001af4:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
    CanTx_SigSet_0x303_FCM_IHBCONOFFSts(GetFCM_4Value(FCM_IHBCONOFFSts));
 8001af8:	200e      	movs	r0, #14
 8001afa:	f004 fb9d 	bl	8006238 <GetFCM_4Value>
 8001afe:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 8001b02:	f360 03c4 	bfi	r3, r0, #3, #2
 8001b06:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
    CanTx_SigSet_0x303_FCM_TSROverSpdWarning(GetFCM_4Value(FCM_TSROverSpdWarning));
 8001b0a:	200f      	movs	r0, #15
 8001b0c:	f004 fb94 	bl	8006238 <GetFCM_4Value>
 8001b10:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 8001b14:	f360 0382 	bfi	r3, r0, #2, #1
 8001b18:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
    CanTx_SigSet_0x303_FCM_SLASpdlimitUnits(GetFCM_4Value(FCM_SLASpdlimitUnits));
 8001b1c:	2010      	movs	r0, #16
 8001b1e:	f004 fb8b 	bl	8006238 <GetFCM_4Value>
 8001b22:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 8001b26:	f360 0301 	bfi	r3, r0, #0, #2
 8001b2a:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
    CanTx_SigSet_0x303_FCM_IHBCTextInfo(GetFCM_4Value(FCM_IHBCTextInfo));
 8001b2e:	2011      	movs	r0, #17
 8001b30:	f004 fb82 	bl	8006238 <GetFCM_4Value>
 8001b34:	f894 304d 	ldrb.w	r3, [r4, #77]	@ 0x4d
 8001b38:	f360 1387 	bfi	r3, r0, #6, #2
 8001b3c:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    CanTx_SigSet_0x303_FCM_TSRTextInfo(GetFCM_4Value(FCM_TSRTextInfo));
 8001b40:	2012      	movs	r0, #18
 8001b42:	f004 fb79 	bl	8006238 <GetFCM_4Value>
 8001b46:	f894 304d 	ldrb.w	r3, [r4, #77]	@ 0x4d
 8001b4a:	f360 1305 	bfi	r3, r0, #4, #2
 8001b4e:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    CanTx_SigSet_0x303_FCM_LDWTextInfo(GetFCM_4Value(FCM_LDWTextInfo));
 8001b52:	2013      	movs	r0, #19
 8001b54:	f004 fb70 	bl	8006238 <GetFCM_4Value>
 8001b58:	f894 304d 	ldrb.w	r3, [r4, #77]	@ 0x4d
 8001b5c:	f360 0383 	bfi	r3, r0, #2, #2
 8001b60:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    CanTx_SigSet_0x303_FCM_LDWVoiceWarning(GetFCM_4Value(FCM_LDWVoiceWarning));
 8001b64:	2014      	movs	r0, #20
 8001b66:	f004 fb67 	bl	8006238 <GetFCM_4Value>
 8001b6a:	f894 304e 	ldrb.w	r3, [r4, #78]	@ 0x4e
 8001b6e:	f360 1304 	bfi	r3, r0, #4, #1
 8001b72:	f884 304e 	strb.w	r3, [r4, #78]	@ 0x4e

    CanTx_SigSet_0x304_FCM_EgoLeLineID(GetFCM_5Value(FCM_EgoLeLineID));
 8001b76:	2000      	movs	r0, #0
 8001b78:	f004 fb68 	bl	800624c <GetFCM_5Value>
 8001b7c:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8001b80:	f360 13c7 	bfi	r3, r0, #7, #1
 8001b84:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    CanTx_SigSet_0x304_FCM_EgoLeLineColor(GetFCM_5Value(FCM_EgoLeLineColor));
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f004 fb5f 	bl	800624c <GetFCM_5Value>
 8001b8e:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8001b92:	f360 1346 	bfi	r3, r0, #5, #2
 8001b96:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    CanTx_SigSet_0x304_FCM_EgoLeLineTyp(GetFCM_5Value(FCM_EgoLeLineTyp));
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	f004 fb56 	bl	800624c <GetFCM_5Value>
 8001ba0:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8001ba4:	f360 03c4 	bfi	r3, r0, #3, #2
 8001ba8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    CanTx_SigSet_0x304_FCM_EgoLeLineHozlDst(GetFCM_5Value(FCM_EgoLeLineHozlDst));
 8001bac:	2003      	movs	r0, #3
 8001bae:	f004 fb4d 	bl	800624c <GetFCM_5Value>
 8001bb2:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8001bb6:	f360 0387 	bfi	r3, r0, #2, #6
 8001bba:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
 8001bbe:	2003      	movs	r0, #3
 8001bc0:	f004 fb44 	bl	800624c <GetFCM_5Value>
 8001bc4:	f3c0 1082 	ubfx	r0, r0, #6, #3
 8001bc8:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8001bcc:	f360 0302 	bfi	r3, r0, #0, #3
 8001bd0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    CanTx_SigSet_0x304_FCM_EgoLeLineCrvt(GetFCM_5Value(FCM_EgoLeLineCrvt));
 8001bd4:	2004      	movs	r0, #4
 8001bd6:	f004 fb39 	bl	800624c <GetFCM_5Value>
 8001bda:	f884 0052 	strb.w	r0, [r4, #82]	@ 0x52
 8001bde:	2004      	movs	r0, #4
 8001be0:	f004 fb34 	bl	800624c <GetFCM_5Value>
 8001be4:	f3c0 2001 	ubfx	r0, r0, #8, #2
 8001be8:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8001bec:	f360 0301 	bfi	r3, r0, #0, #2
 8001bf0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
    CanTx_SigSet_0x304_FCM_EgoRiLineID(GetFCM_5Value(FCM_EgoRiLineID));
 8001bf4:	2005      	movs	r0, #5
 8001bf6:	f004 fb29 	bl	800624c <GetFCM_5Value>
 8001bfa:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 8001bfe:	f360 13c7 	bfi	r3, r0, #7, #1
 8001c02:	f884 3053 	strb.w	r3, [r4, #83]	@ 0x53
    CanTx_SigSet_0x304_FCM_EgoRiLineColor(GetFCM_5Value(FCM_EgoRiLineColor));
 8001c06:	2006      	movs	r0, #6
 8001c08:	f004 fb20 	bl	800624c <GetFCM_5Value>
 8001c0c:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 8001c10:	f360 1346 	bfi	r3, r0, #5, #2
 8001c14:	f884 3053 	strb.w	r3, [r4, #83]	@ 0x53
    CanTx_SigSet_0x304_FCM_EgoRiLineTyp(GetFCM_5Value(FCM_EgoRiLineTyp));
 8001c18:	2007      	movs	r0, #7
 8001c1a:	f004 fb17 	bl	800624c <GetFCM_5Value>
 8001c1e:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 8001c22:	f360 03c4 	bfi	r3, r0, #3, #2
 8001c26:	f884 3053 	strb.w	r3, [r4, #83]	@ 0x53
    CanTx_SigSet_0x304_FCM_EgoRiLineHozlDst(GetFCM_5Value(FCM_EgoRiLineHozlDst));
 8001c2a:	2008      	movs	r0, #8
 8001c2c:	f004 fb0e 	bl	800624c <GetFCM_5Value>
 8001c30:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8001c34:	f360 0387 	bfi	r3, r0, #2, #6
 8001c38:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8001c3c:	2008      	movs	r0, #8
 8001c3e:	f004 fb05 	bl	800624c <GetFCM_5Value>
 8001c42:	f3c0 1082 	ubfx	r0, r0, #6, #3
 8001c46:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 8001c4a:	f360 0302 	bfi	r3, r0, #0, #3
 8001c4e:	f884 3053 	strb.w	r3, [r4, #83]	@ 0x53
    CanTx_SigSet_0x304_FCM_EgoRiLineCrvt(GetFCM_5Value(FCM_EgoRiLineCrvt));
 8001c52:	2009      	movs	r0, #9
 8001c54:	f004 fafa 	bl	800624c <GetFCM_5Value>
 8001c58:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8001c5c:	2009      	movs	r0, #9
 8001c5e:	f004 faf5 	bl	800624c <GetFCM_5Value>
 8001c62:	f3c0 2001 	ubfx	r0, r0, #8, #2
 8001c66:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8001c6a:	f360 0301 	bfi	r3, r0, #0, #2
 8001c6e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
    CanTx_SigSet_0x304_FCM_5_RollingCounter(GetFCM_5Value(FCM_5_RollingCounter));
 8001c72:	200a      	movs	r0, #10
 8001c74:	f004 faea 	bl	800624c <GetFCM_5Value>
 8001c78:	f894 3056 	ldrb.w	r3, [r4, #86]	@ 0x56
 8001c7c:	f360 0303 	bfi	r3, r0, #0, #4
 8001c80:	f884 3056 	strb.w	r3, [r4, #86]	@ 0x56
    CanTx_SigSet_0x304_FCM_5_Checksum(GetFCM_5Value(FCM_5_Checksum));
 8001c84:	200b      	movs	r0, #11
 8001c86:	f004 fae1 	bl	800624c <GetFCM_5Value>
 8001c8a:	f884 0057 	strb.w	r0, [r4, #87]	@ 0x57

    CanTx_SigSet_0x305_FCM_NeborLeLineID(GetFCM_6Value(FCM_NeborLeLineID));
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f004 fae6 	bl	8006260 <GetFCM_6Value>
 8001c94:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8001c98:	f360 13c7 	bfi	r3, r0, #7, #1
 8001c9c:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
    CanTx_SigSet_0x305_FCM_NeborLeLineColor(GetFCM_6Value(FCM_NeborLeLineColor));
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f004 fadd 	bl	8006260 <GetFCM_6Value>
 8001ca6:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8001caa:	f360 1346 	bfi	r3, r0, #5, #2
 8001cae:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
    CanTx_SigSet_0x305_FCM_NeborLeLineTyp(GetFCM_6Value(FCM_NeborLeLineTyp));
 8001cb2:	2002      	movs	r0, #2
 8001cb4:	f004 fad4 	bl	8006260 <GetFCM_6Value>
 8001cb8:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8001cbc:	f360 03c4 	bfi	r3, r0, #3, #2
 8001cc0:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
    CanTx_SigSet_0x305_FCM_NeborLeLineHozlDst(GetFCM_6Value(FCM_NeborLeLineHozlDst));
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	f004 facb 	bl	8006260 <GetFCM_6Value>
 8001cca:	f894 3059 	ldrb.w	r3, [r4, #89]	@ 0x59
 8001cce:	f360 0387 	bfi	r3, r0, #2, #6
 8001cd2:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8001cd6:	2003      	movs	r0, #3
 8001cd8:	f004 fac2 	bl	8006260 <GetFCM_6Value>
 8001cdc:	f3c0 1082 	ubfx	r0, r0, #6, #3
 8001ce0:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8001ce4:	f360 0302 	bfi	r3, r0, #0, #3
 8001ce8:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
    CanTx_SigSet_0x305_FCM_NeborLeLineCrvt(GetFCM_6Value(FCM_NeborLeLineCrvt));
 8001cec:	2004      	movs	r0, #4
 8001cee:	f004 fab7 	bl	8006260 <GetFCM_6Value>
 8001cf2:	f884 005a 	strb.w	r0, [r4, #90]	@ 0x5a
 8001cf6:	2004      	movs	r0, #4
 8001cf8:	f004 fab2 	bl	8006260 <GetFCM_6Value>
 8001cfc:	f3c0 2001 	ubfx	r0, r0, #8, #2
 8001d00:	f894 3059 	ldrb.w	r3, [r4, #89]	@ 0x59
 8001d04:	f360 0301 	bfi	r3, r0, #0, #2
 8001d08:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
    CanTx_SigSet_0x305_FCM_NeborRiLineID(GetFCM_6Value(FCM_NeborRiLineID));
 8001d0c:	2005      	movs	r0, #5
 8001d0e:	f004 faa7 	bl	8006260 <GetFCM_6Value>
 8001d12:	f894 305b 	ldrb.w	r3, [r4, #91]	@ 0x5b
 8001d16:	f360 13c7 	bfi	r3, r0, #7, #1
 8001d1a:	f884 305b 	strb.w	r3, [r4, #91]	@ 0x5b
    CanTx_SigSet_0x305_FCM_NeborRiLineColor(GetFCM_6Value(FCM_NeborRiLineColor));
 8001d1e:	2006      	movs	r0, #6
 8001d20:	f004 fa9e 	bl	8006260 <GetFCM_6Value>
 8001d24:	f894 305b 	ldrb.w	r3, [r4, #91]	@ 0x5b
 8001d28:	f360 1346 	bfi	r3, r0, #5, #2
 8001d2c:	f884 305b 	strb.w	r3, [r4, #91]	@ 0x5b
    CanTx_SigSet_0x305_FCM_NeborRiLineTyp(GetFCM_6Value(FCM_NeborRiLineTyp));
 8001d30:	2007      	movs	r0, #7
 8001d32:	f004 fa95 	bl	8006260 <GetFCM_6Value>
 8001d36:	f894 305b 	ldrb.w	r3, [r4, #91]	@ 0x5b
 8001d3a:	f360 03c4 	bfi	r3, r0, #3, #2
 8001d3e:	f884 305b 	strb.w	r3, [r4, #91]	@ 0x5b
    CanTx_SigSet_0x305_FCM_NeborRiLineHozlDst(GetFCM_6Value(FCM_NeborRiLineHozlDst));
 8001d42:	2008      	movs	r0, #8
 8001d44:	f004 fa8c 	bl	8006260 <GetFCM_6Value>
 8001d48:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8001d4c:	f360 0387 	bfi	r3, r0, #2, #6
 8001d50:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8001d54:	2008      	movs	r0, #8
 8001d56:	f004 fa83 	bl	8006260 <GetFCM_6Value>
 8001d5a:	f3c0 1082 	ubfx	r0, r0, #6, #3
 8001d5e:	f894 305b 	ldrb.w	r3, [r4, #91]	@ 0x5b
 8001d62:	f360 0302 	bfi	r3, r0, #0, #3
 8001d66:	f884 305b 	strb.w	r3, [r4, #91]	@ 0x5b
    CanTx_SigSet_0x305_FCM_NeborRiLineCrvt(GetFCM_6Value(FCM_NeborRiLineCrvt));
 8001d6a:	2009      	movs	r0, #9
 8001d6c:	f004 fa78 	bl	8006260 <GetFCM_6Value>
 8001d70:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
 8001d74:	2009      	movs	r0, #9
 8001d76:	f004 fa73 	bl	8006260 <GetFCM_6Value>
 8001d7a:	f3c0 2001 	ubfx	r0, r0, #8, #2
 8001d7e:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8001d82:	f360 0301 	bfi	r3, r0, #0, #2
 8001d86:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    CanTx_SigSet_0x305_FCM_6_RollingCounter(GetFCM_6Value(FCM_6_RollingCounter));
 8001d8a:	200a      	movs	r0, #10
 8001d8c:	f004 fa68 	bl	8006260 <GetFCM_6Value>
 8001d90:	f894 305e 	ldrb.w	r3, [r4, #94]	@ 0x5e
 8001d94:	f360 0303 	bfi	r3, r0, #0, #4
 8001d98:	f884 305e 	strb.w	r3, [r4, #94]	@ 0x5e
    CanTx_SigSet_0x305_FCM_6_Checksum(GetFCM_6Value(FCM_6_Checksum));
 8001d9c:	200b      	movs	r0, #11
 8001d9e:	f004 fa5f 	bl	8006260 <GetFCM_6Value>
 8001da2:	f884 005f 	strb.w	r0, [r4, #95]	@ 0x5f

    CanTx_SigSet_0x306_FCM_ACCObjID(GetFCM_7Value(FCM_ACCObjID));
 8001da6:	2000      	movs	r0, #0
 8001da8:	f004 fa64 	bl	8006274 <GetFCM_7Value>
 8001dac:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8001db0:	f360 13c7 	bfi	r3, r0, #7, #1
 8001db4:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    CanTx_SigSet_0x306_FCM_ACCObjTyp(GetFCM_7Value(FCM_ACCObjTyp));
 8001db8:	2001      	movs	r0, #1
 8001dba:	f004 fa5b 	bl	8006274 <GetFCM_7Value>
 8001dbe:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8001dc2:	f360 1306 	bfi	r3, r0, #4, #3
 8001dc6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    CanTx_SigSet_0x306_FCM_ACC_TargetVehicleSubType(GetFCM_7Value(FCM_ACC_TargetVehicleSubType));
 8001dca:	2002      	movs	r0, #2
 8001dcc:	f004 fa52 	bl	8006274 <GetFCM_7Value>
 8001dd0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8001dd4:	f360 0343 	bfi	r3, r0, #1, #3
 8001dd8:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    CanTx_SigSet_0x306_FCM_dxTarObjcolor(GetFCM_7Value(FCM_dxTarObjcolor));
 8001ddc:	2003      	movs	r0, #3
 8001dde:	f004 fa49 	bl	8006274 <GetFCM_7Value>
 8001de2:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8001de6:	f360 1347 	bfi	r3, r0, #5, #3
 8001dea:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
    CanTx_SigSet_0x306_FCM_ACCObjLgtDstX(GetFCM_7Value(FCM_ACCObjLgtDstX));
 8001dee:	2004      	movs	r0, #4
 8001df0:	f004 fa40 	bl	8006274 <GetFCM_7Value>
 8001df4:	f894 3062 	ldrb.w	r3, [r4, #98]	@ 0x62
 8001df8:	f360 1347 	bfi	r3, r0, #5, #3
 8001dfc:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8001e00:	2004      	movs	r0, #4
 8001e02:	f004 fa37 	bl	8006274 <GetFCM_7Value>
 8001e06:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8001e0a:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8001e0e:	f360 0304 	bfi	r3, r0, #0, #5
 8001e12:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
    CanTx_SigSet_0x306_FCM_ACCObjHozDstY(GetFCM_7Value(FCM_ACCObjHozDstY));
 8001e16:	2005      	movs	r0, #5
 8001e18:	f004 fa2c 	bl	8006274 <GetFCM_7Value>
 8001e1c:	f894 3063 	ldrb.w	r3, [r4, #99]	@ 0x63
 8001e20:	f360 03c7 	bfi	r3, r0, #3, #5
 8001e24:	f884 3063 	strb.w	r3, [r4, #99]	@ 0x63
 8001e28:	2005      	movs	r0, #5
 8001e2a:	f004 fa23 	bl	8006274 <GetFCM_7Value>
 8001e2e:	f3c0 1044 	ubfx	r0, r0, #5, #5
 8001e32:	f894 3062 	ldrb.w	r3, [r4, #98]	@ 0x62
 8001e36:	f360 0304 	bfi	r3, r0, #0, #5
 8001e3a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
    CanTx_SigSet_0x306_FCM_FrntFarObjID(GetFCM_7Value(FCM_FrntFarObjID));
 8001e3e:	2006      	movs	r0, #6
 8001e40:	f004 fa18 	bl	8006274 <GetFCM_7Value>
 8001e44:	f894 3063 	ldrb.w	r3, [r4, #99]	@ 0x63
 8001e48:	f360 0382 	bfi	r3, r0, #2, #1
 8001e4c:	f884 3063 	strb.w	r3, [r4, #99]	@ 0x63
    CanTx_SigSet_0x306_FCM_FrntFarObjTyp(GetFCM_7Value(FCM_FrntFarObjTyp));
 8001e50:	2007      	movs	r0, #7
 8001e52:	f004 fa0f 	bl	8006274 <GetFCM_7Value>
 8001e56:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 8001e5a:	f360 1387 	bfi	r3, r0, #6, #2
 8001e5e:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8001e62:	2007      	movs	r0, #7
 8001e64:	f004 fa06 	bl	8006274 <GetFCM_7Value>
 8001e68:	f3c0 0081 	ubfx	r0, r0, #2, #2
 8001e6c:	f894 3063 	ldrb.w	r3, [r4, #99]	@ 0x63
 8001e70:	f360 0301 	bfi	r3, r0, #0, #2
 8001e74:	f884 3063 	strb.w	r3, [r4, #99]	@ 0x63
    CanTx_SigSet_0x306_FCM_FrntFarObjLgtDstX(GetFCM_7Value(FCM_FrntFarObjLgtDstX));
 8001e78:	2008      	movs	r0, #8
 8001e7a:	f004 f9fb 	bl	8006274 <GetFCM_7Value>
 8001e7e:	f894 3065 	ldrb.w	r3, [r4, #101]	@ 0x65
 8001e82:	f360 1387 	bfi	r3, r0, #6, #2
 8001e86:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
 8001e8a:	2008      	movs	r0, #8
 8001e8c:	f004 f9f2 	bl	8006274 <GetFCM_7Value>
 8001e90:	f3c0 0085 	ubfx	r0, r0, #2, #6
 8001e94:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 8001e98:	f360 0305 	bfi	r3, r0, #0, #6
 8001e9c:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
    CanTx_SigSet_0x306_FCM_FrntFarObjHozDstY(GetFCM_7Value(FCM_FrntFarObjHozDstY));
 8001ea0:	2009      	movs	r0, #9
 8001ea2:	f004 f9e7 	bl	8006274 <GetFCM_7Value>
 8001ea6:	f894 3066 	ldrb.w	r3, [r4, #102]	@ 0x66
 8001eaa:	f360 1307 	bfi	r3, r0, #4, #4
 8001eae:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8001eb2:	2009      	movs	r0, #9
 8001eb4:	f004 f9de 	bl	8006274 <GetFCM_7Value>
 8001eb8:	f3c0 1005 	ubfx	r0, r0, #4, #6
 8001ebc:	f894 3065 	ldrb.w	r3, [r4, #101]	@ 0x65
 8001ec0:	f360 0305 	bfi	r3, r0, #0, #6
 8001ec4:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
    CanTx_SigSet_0x306_FCM_7_RollingCounter(GetFCM_7Value(FCM_7_RollingCounter));
 8001ec8:	200a      	movs	r0, #10
 8001eca:	f004 f9d3 	bl	8006274 <GetFCM_7Value>
 8001ece:	f894 3066 	ldrb.w	r3, [r4, #102]	@ 0x66
 8001ed2:	f360 0303 	bfi	r3, r0, #0, #4
 8001ed6:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
    CanTx_SigSet_0x306_FCM_7_Checksum(GetFCM_7Value(FCM_7_Checksum));
 8001eda:	200b      	movs	r0, #11
 8001edc:	f004 f9ca 	bl	8006274 <GetFCM_7Value>
 8001ee0:	f884 0067 	strb.w	r0, [r4, #103]	@ 0x67

    CanTx_SigSet_0x307_FCM_RiObjID(GetFCM_8Value(FCM_RiObjID));
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f004 f9cf 	bl	8006288 <GetFCM_8Value>
 8001eea:	f894 3068 	ldrb.w	r3, [r4, #104]	@ 0x68
 8001eee:	f360 13c7 	bfi	r3, r0, #7, #1
 8001ef2:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
    CanTx_SigSet_0x307_FCM_LeObjID(GetFCM_8Value(FCM_LeObjID));
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f004 f9c6 	bl	8006288 <GetFCM_8Value>
 8001efc:	f894 3068 	ldrb.w	r3, [r4, #104]	@ 0x68
 8001f00:	f360 1386 	bfi	r3, r0, #6, #1
 8001f04:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
    CanTx_SigSet_0x307_FCM_LeObjTyp(GetFCM_8Value(FCM_LeObjTyp));
 8001f08:	2002      	movs	r0, #2
 8001f0a:	f004 f9bd 	bl	8006288 <GetFCM_8Value>
 8001f0e:	f894 3068 	ldrb.w	r3, [r4, #104]	@ 0x68
 8001f12:	f360 03c5 	bfi	r3, r0, #3, #3
 8001f16:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
    CanTx_SigSet_0x307_FCM_ACC_LeftTargetVehicleSubType(GetFCM_8Value(FCM_ACC_LeftTargetVehicleSubType));
 8001f1a:	2003      	movs	r0, #3
 8001f1c:	f004 f9b4 	bl	8006288 <GetFCM_8Value>
 8001f20:	f894 3068 	ldrb.w	r3, [r4, #104]	@ 0x68
 8001f24:	f360 0302 	bfi	r3, r0, #0, #3
 8001f28:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
    CanTx_SigSet_0x307_FCM_LeObjLgtDstX(GetFCM_8Value(FCM_LeObjLgtDstX));
 8001f2c:	2004      	movs	r0, #4
 8001f2e:	f004 f9ab 	bl	8006288 <GetFCM_8Value>
 8001f32:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
    CanTx_SigSet_0x307_FCM_LeObjHozDstY(GetFCM_8Value(FCM_LeObjHozDstY));
 8001f36:	2005      	movs	r0, #5
 8001f38:	f004 f9a6 	bl	8006288 <GetFCM_8Value>
 8001f3c:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8001f40:	f360 1387 	bfi	r3, r0, #6, #2
 8001f44:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8001f48:	2005      	movs	r0, #5
 8001f4a:	f004 f99d 	bl	8006288 <GetFCM_8Value>
 8001f4e:	f3c0 0087 	ubfx	r0, r0, #2, #8
 8001f52:	f884 006a 	strb.w	r0, [r4, #106]	@ 0x6a
    CanTx_SigSet_0x307_FCM_RiObjTyp(GetFCM_8Value(FCM_RiObjTyp));
 8001f56:	2006      	movs	r0, #6
 8001f58:	f004 f996 	bl	8006288 <GetFCM_8Value>
 8001f5c:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8001f60:	f360 03c5 	bfi	r3, r0, #3, #3
 8001f64:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
    CanTx_SigSet_0x307_FCM_ACC_RightTargetVehicleSubTyp(GetFCM_8Value(FCM_ACC_RightTargetVehicleSubTyp));
 8001f68:	2007      	movs	r0, #7
 8001f6a:	f004 f98d 	bl	8006288 <GetFCM_8Value>
 8001f6e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8001f72:	f360 0302 	bfi	r3, r0, #0, #3
 8001f76:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
    CanTx_SigSet_0x307_FCM_RiObjLgtDstX(GetFCM_8Value(FCM_RiObjLgtDstX));
 8001f7a:	2008      	movs	r0, #8
 8001f7c:	f004 f984 	bl	8006288 <GetFCM_8Value>
 8001f80:	f884 006c 	strb.w	r0, [r4, #108]	@ 0x6c
    CanTx_SigSet_0x307_FCM_RiObjHozDstY(GetFCM_8Value(FCM_RiObjHozDstY));
 8001f84:	2009      	movs	r0, #9
 8001f86:	f004 f97f 	bl	8006288 <GetFCM_8Value>
 8001f8a:	f894 306e 	ldrb.w	r3, [r4, #110]	@ 0x6e
 8001f8e:	f360 1387 	bfi	r3, r0, #6, #2
 8001f92:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8001f96:	2009      	movs	r0, #9
 8001f98:	f004 f976 	bl	8006288 <GetFCM_8Value>
 8001f9c:	f3c0 0087 	ubfx	r0, r0, #2, #8
 8001fa0:	f884 006d 	strb.w	r0, [r4, #109]	@ 0x6d
    CanTx_SigSet_0x307_FCM_8_RollingCounter(GetFCM_8Value(FCM_8_RollingCounter));
 8001fa4:	200a      	movs	r0, #10
 8001fa6:	f004 f96f 	bl	8006288 <GetFCM_8Value>
 8001faa:	f894 306e 	ldrb.w	r3, [r4, #110]	@ 0x6e
 8001fae:	f360 0303 	bfi	r3, r0, #0, #4
 8001fb2:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
    CanTx_SigSet_0x307_FCM_8_Checksum(GetFCM_8Value(FCM_8_Checksum));
 8001fb6:	200b      	movs	r0, #11
 8001fb8:	f004 f966 	bl	8006288 <GetFCM_8Value>
 8001fbc:	f884 006f 	strb.w	r0, [r4, #111]	@ 0x6f

    CanTx_SigSet_0x312_BCM_SRF_PosStatus(GetBCM_5Value(BCM_SRF_PosStatus));
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f004 f96b 	bl	800629c <GetBCM_5Value>
 8001fc6:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8001fca:	f360 1307 	bfi	r3, r0, #4, #4
 8001fce:	f884 3072 	strb.w	r3, [r4, #114]	@ 0x72
    CanTx_SigSet_0x312_BCM_SRF_ECU_Fault(GetBCM_5Value(BCM_SRF_ECU_Fault));
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f004 f962 	bl	800629c <GetBCM_5Value>
 8001fd8:	f894 3073 	ldrb.w	r3, [r4, #115]	@ 0x73
 8001fdc:	f360 13c7 	bfi	r3, r0, #7, #1
 8001fe0:	f884 3073 	strb.w	r3, [r4, #115]	@ 0x73
    CanTx_SigSet_0x312_BCM_SRF_Motor_Circuit_Fault(GetBCM_5Value(BCM_SRF_Motor_Circuit_Fault));
 8001fe4:	2002      	movs	r0, #2
 8001fe6:	f004 f959 	bl	800629c <GetBCM_5Value>
 8001fea:	f894 3073 	ldrb.w	r3, [r4, #115]	@ 0x73
 8001fee:	f360 1386 	bfi	r3, r0, #6, #1
 8001ff2:	f884 3073 	strb.w	r3, [r4, #115]	@ 0x73
    CanTx_SigSet_0x312_BCM_SRF_SW_Fault(GetBCM_5Value(BCM_SRF_SW_Fault));
 8001ff6:	2003      	movs	r0, #3
 8001ff8:	f004 f950 	bl	800629c <GetBCM_5Value>
 8001ffc:	f894 3073 	ldrb.w	r3, [r4, #115]	@ 0x73
 8002000:	f360 1345 	bfi	r3, r0, #5, #1
 8002004:	f884 3073 	strb.w	r3, [r4, #115]	@ 0x73
    CanTx_SigSet_0x312_BCM_SRF_InitializeStatus(GetBCM_5Value(BCM_SRF_InitializeStatus));
 8002008:	2004      	movs	r0, #4
 800200a:	f004 f947 	bl	800629c <GetBCM_5Value>
 800200e:	f894 3073 	ldrb.w	r3, [r4, #115]	@ 0x73
 8002012:	f360 1304 	bfi	r3, r0, #4, #1
 8002016:	f884 3073 	strb.w	r3, [r4, #115]	@ 0x73
    CanTx_SigSet_0x312_BCM_RLS_REP_Error(GetBCM_5Value(BCM_RLS_REP_Error));
 800201a:	2005      	movs	r0, #5
 800201c:	f004 f93e 	bl	800629c <GetBCM_5Value>
 8002020:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 8002024:	f360 13c7 	bfi	r3, r0, #7, #1
 8002028:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
    CanTx_SigSet_0x312_BCM_RLS_Fault_Light(GetBCM_5Value(BCM_RLS_Fault_Light));
 800202c:	2006      	movs	r0, #6
 800202e:	f004 f935 	bl	800629c <GetBCM_5Value>
 8002032:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 8002036:	f360 1386 	bfi	r3, r0, #6, #1
 800203a:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
    CanTx_SigSet_0x312_BCM_RLS_Fault_Rain(GetBCM_5Value(BCM_RLS_Fault_Rain));
 800203e:	2007      	movs	r0, #7
 8002040:	f004 f92c 	bl	800629c <GetBCM_5Value>
 8002044:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 8002048:	f360 1345 	bfi	r3, r0, #5, #1
 800204c:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
    CanTx_SigSet_0x312_BCM_SRF_Alarm(GetBCM_5Value(BCM_SRF_Alarm));
 8002050:	2008      	movs	r0, #8
 8002052:	f004 f923 	bl	800629c <GetBCM_5Value>
 8002056:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 800205a:	f360 0300 	bfi	r3, r0, #0, #1
 800205e:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
    CanTx_SigSet_0x312_BCM_RLS_VOLT_Error(GetBCM_5Value(BCM_RLS_VOLT_Error));
 8002062:	2009      	movs	r0, #9
 8002064:	f004 f91a 	bl	800629c <GetBCM_5Value>
 8002068:	f894 3075 	ldrb.w	r3, [r4, #117]	@ 0x75
 800206c:	f360 0301 	bfi	r3, r0, #0, #2
 8002070:	f884 3075 	strb.w	r3, [r4, #117]	@ 0x75

    CanTx_SigSet_0x317_TBOX_AudioMuteRequest(GetTBOX_4Value(TBOX_AudioMuteRequest));
 8002074:	2000      	movs	r0, #0
 8002076:	f004 f91b 	bl	80062b0 <GetTBOX_4Value>
 800207a:	f894 3078 	ldrb.w	r3, [r4, #120]	@ 0x78
 800207e:	f360 0300 	bfi	r3, r0, #0, #1
 8002082:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78

    CanTx_SigSet_0x350_ACU_CrashOutputSts(GetACU_1Value(ACU_CrashOutputSts));
 8002086:	2000      	movs	r0, #0
 8002088:	f004 f91c 	bl	80062c4 <GetACU_1Value>
 800208c:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
    CanTx_SigSet_0x350_ACU_AirbagWarningStatus(GetACU_1Value(ACU_AirbagWarningStatus));
 8002090:	2001      	movs	r0, #1
 8002092:	f004 f917 	bl	80062c4 <GetACU_1Value>
 8002096:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 800209a:	f360 13c7 	bfi	r3, r0, #7, #1
 800209e:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
    CanTx_SigSet_0x350_ACU_AirbagInhibitWarning(GetACU_1Value(ACU_AirbagInhibitWarning));
 80020a2:	2002      	movs	r0, #2
 80020a4:	f004 f90e 	bl	80062c4 <GetACU_1Value>
 80020a8:	f894 3082 	ldrb.w	r3, [r4, #130]	@ 0x82
 80020ac:	f360 0300 	bfi	r3, r0, #0, #1
 80020b0:	f884 3082 	strb.w	r3, [r4, #130]	@ 0x82

    CanTx_SigSet_0x360_BCM_LeftTurnLightSts(GetBCM_1Value(BCM_LeftTurnLightSts));
 80020b4:	2000      	movs	r0, #0
 80020b6:	f004 f919 	bl	80062ec <GetBCM_1Value>
 80020ba:	f894 3088 	ldrb.w	r3, [r4, #136]	@ 0x88
 80020be:	f360 1387 	bfi	r3, r0, #6, #2
 80020c2:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
    CanTx_SigSet_0x360_BCM_EmergencyLightSts(GetBCM_1Value(BCM_EmergencyLightSts));
 80020c6:	2001      	movs	r0, #1
 80020c8:	f004 f910 	bl	80062ec <GetBCM_1Value>
 80020cc:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 80020d0:	f360 1305 	bfi	r3, r0, #4, #2
 80020d4:	f884 3089 	strb.w	r3, [r4, #137]	@ 0x89
    CanTx_SigSet_0x360_BCM_RightTurnLightSts(GetBCM_1Value(BCM_RightTurnLightSts));
 80020d8:	2002      	movs	r0, #2
 80020da:	f004 f907 	bl	80062ec <GetBCM_1Value>
 80020de:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 80020e2:	f360 0301 	bfi	r3, r0, #0, #2
 80020e6:	f884 3089 	strb.w	r3, [r4, #137]	@ 0x89

    CanTx_SigSet_0x362_BCM_AssistIlluminationSetSts(GetBCM_4Value(BCM_AssistIlluminationSetSts));
 80020ea:	2000      	movs	r0, #0
 80020ec:	f004 f908 	bl	8006300 <GetBCM_4Value>
 80020f0:	f894 3090 	ldrb.w	r3, [r4, #144]	@ 0x90
 80020f4:	f360 13c7 	bfi	r3, r0, #7, #1
 80020f8:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
    CanTx_SigSet_0x362_BCM_WindowRemoteAutoDownSetSts(GetBCM_4Value(BCM_WindowRemoteAutoDownSetSts));
 80020fc:	2001      	movs	r0, #1
 80020fe:	f004 f8ff 	bl	8006300 <GetBCM_4Value>
 8002102:	f894 3090 	ldrb.w	r3, [r4, #144]	@ 0x90
 8002106:	f360 1386 	bfi	r3, r0, #6, #1
 800210a:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
    CanTx_SigSet_0x362_BCM_LeaveHomeTimeSetSts(GetBCM_4Value(BCM_LeaveHomeTimeSetSts));
 800210e:	2002      	movs	r0, #2
 8002110:	f004 f8f6 	bl	8006300 <GetBCM_4Value>
 8002114:	f894 3090 	ldrb.w	r3, [r4, #144]	@ 0x90
 8002118:	f360 03c5 	bfi	r3, r0, #3, #3
 800211c:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
    CanTx_SigSet_0x362_BCM_FollowMeHomeTimeSetSts(GetBCM_4Value(BCM_FollowMeHomeTimeSetSts));
 8002120:	2003      	movs	r0, #3
 8002122:	f004 f8ed 	bl	8006300 <GetBCM_4Value>
 8002126:	f894 3090 	ldrb.w	r3, [r4, #144]	@ 0x90
 800212a:	f360 0302 	bfi	r3, r0, #0, #3
 800212e:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
    CanTx_SigSet_0x362_BCM_exRearMirrorAutoFoldSetSts(GetBCM_4Value(BCM_exRearMirrorAutoFoldSetSts));
 8002132:	2004      	movs	r0, #4
 8002134:	f004 f8e4 	bl	8006300 <GetBCM_4Value>
 8002138:	f894 3091 	ldrb.w	r3, [r4, #145]	@ 0x91
 800213c:	f360 1386 	bfi	r3, r0, #6, #1
 8002140:	f884 3091 	strb.w	r3, [r4, #145]	@ 0x91
    CanTx_SigSet_0x362_BCM_SpeedLockSetSts(GetBCM_4Value(BCM_SpeedLockSetSts));
 8002144:	2005      	movs	r0, #5
 8002146:	f004 f8db 	bl	8006300 <GetBCM_4Value>
 800214a:	f894 3091 	ldrb.w	r3, [r4, #145]	@ 0x91
 800214e:	f360 03c5 	bfi	r3, r0, #3, #3
 8002152:	f884 3091 	strb.w	r3, [r4, #145]	@ 0x91
    CanTx_SigSet_0x362_BCM_InteriorLightTimeSetSts(GetBCM_4Value(BCM_InteriorLightTimeSetSts));
 8002156:	2006      	movs	r0, #6
 8002158:	f004 f8d2 	bl	8006300 <GetBCM_4Value>
 800215c:	f894 3091 	ldrb.w	r3, [r4, #145]	@ 0x91
 8002160:	f360 0302 	bfi	r3, r0, #0, #3
 8002164:	f884 3091 	strb.w	r3, [r4, #145]	@ 0x91
    CanTx_SigSet_0x362_BCM_AutoWshWipSetSts(GetBCM_4Value(BCM_AutoWshWipSetSts));
 8002168:	2007      	movs	r0, #7
 800216a:	f004 f8c9 	bl	8006300 <GetBCM_4Value>
 800216e:	f894 3092 	ldrb.w	r3, [r4, #146]	@ 0x92
 8002172:	f360 1387 	bfi	r3, r0, #6, #2
 8002176:	f884 3092 	strb.w	r3, [r4, #146]	@ 0x92
    CanTx_SigSet_0x362_BCM_SearchCarWarnModSetSts(GetBCM_4Value(BCM_SearchCarWarnModSetSts));
 800217a:	2008      	movs	r0, #8
 800217c:	f004 f8c0 	bl	8006300 <GetBCM_4Value>
 8002180:	f894 3092 	ldrb.w	r3, [r4, #146]	@ 0x92
 8002184:	f360 1305 	bfi	r3, r0, #4, #2
 8002188:	f884 3092 	strb.w	r3, [r4, #146]	@ 0x92
    CanTx_SigSet_0x362_BCM_WindowAutoUPbyLockSetSts(GetBCM_4Value(BCM_WindowAutoUPbyLockSetSts));
 800218c:	2009      	movs	r0, #9
 800218e:	f004 f8b7 	bl	8006300 <GetBCM_4Value>
 8002192:	f894 3092 	ldrb.w	r3, [r4, #146]	@ 0x92
 8002196:	f360 03c3 	bfi	r3, r0, #3, #1
 800219a:	f884 3092 	strb.w	r3, [r4, #146]	@ 0x92
    CanTx_SigSet_0x362_BCM_HornAlertVolumeSetSts(GetBCM_4Value(BCM_HornAlertVolumeSetSts));
 800219e:	200a      	movs	r0, #10
 80021a0:	f004 f8ae 	bl	8006300 <GetBCM_4Value>
 80021a4:	f894 3092 	ldrb.w	r3, [r4, #146]	@ 0x92
 80021a8:	f360 0302 	bfi	r3, r0, #0, #3
 80021ac:	f884 3092 	strb.w	r3, [r4, #146]	@ 0x92
    CanTx_SigSet_0x362_BCM_AmbientLightLvl(GetBCM_4Value(BCM_AmbientLightLvl));
 80021b0:	200b      	movs	r0, #11
 80021b2:	f004 f8a5 	bl	8006300 <GetBCM_4Value>
 80021b6:	f894 3093 	ldrb.w	r3, [r4, #147]	@ 0x93
 80021ba:	f360 1307 	bfi	r3, r0, #4, #4
 80021be:	f884 3093 	strb.w	r3, [r4, #147]	@ 0x93
    CanTx_SigSet_0x362_BCM_AmbientLightSwtSts(GetBCM_4Value(BCM_AmbientLightSwtSts));
 80021c2:	200c      	movs	r0, #12
 80021c4:	f004 f89c 	bl	8006300 <GetBCM_4Value>
 80021c8:	f894 3093 	ldrb.w	r3, [r4, #147]	@ 0x93
 80021cc:	f360 03c3 	bfi	r3, r0, #3, #1
 80021d0:	f884 3093 	strb.w	r3, [r4, #147]	@ 0x93
    CanTx_SigSet_0x362_BCM_ClsWinSpdSetSts(GetBCM_4Value(BCM_ClsWinSpdSetSts));
 80021d4:	200d      	movs	r0, #13
 80021d6:	f004 f893 	bl	8006300 <GetBCM_4Value>
 80021da:	f894 3093 	ldrb.w	r3, [r4, #147]	@ 0x93
 80021de:	f360 0342 	bfi	r3, r0, #1, #2
 80021e2:	f884 3093 	strb.w	r3, [r4, #147]	@ 0x93
    CanTx_SigSet_0x362_BCM_FlaoutUnlockSetSts(GetBCM_4Value(BCM_FlaoutUnlockSetSts));
 80021e6:	200e      	movs	r0, #14
 80021e8:	f004 f88a 	bl	8006300 <GetBCM_4Value>
 80021ec:	f894 3093 	ldrb.w	r3, [r4, #147]	@ 0x93
 80021f0:	f360 0300 	bfi	r3, r0, #0, #1
 80021f4:	f884 3093 	strb.w	r3, [r4, #147]	@ 0x93
    CanTx_SigSet_0x362_BCM_SteeringwheelheatingSts(GetBCM_4Value(BCM_SteeringwheelheatingSts));
 80021f8:	200f      	movs	r0, #15
 80021fa:	f004 f881 	bl	8006300 <GetBCM_4Value>
 80021fe:	f894 3094 	ldrb.w	r3, [r4, #148]	@ 0x94
 8002202:	f360 03c3 	bfi	r3, r0, #3, #1
 8002206:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
    CanTx_SigSet_0x362_BCM_NozzleheatingSts(GetBCM_4Value(BCM_NozzleheatingSts));
 800220a:	2010      	movs	r0, #16
 800220c:	f004 f878 	bl	8006300 <GetBCM_4Value>
 8002210:	f894 3094 	ldrb.w	r3, [r4, #148]	@ 0x94
 8002214:	f360 0382 	bfi	r3, r0, #2, #1
 8002218:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
    CanTx_SigSet_0x362_BCM_FrontwindshieldheatingSts(GetBCM_4Value(BCM_FrontwindshieldheatingSts));
 800221c:	2011      	movs	r0, #17
 800221e:	f004 f86f 	bl	8006300 <GetBCM_4Value>
 8002222:	f894 3094 	ldrb.w	r3, [r4, #148]	@ 0x94
 8002226:	f360 0341 	bfi	r3, r0, #1, #1
 800222a:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
    CanTx_SigSet_0x362_BCM_AAL_ONOFFSts(GetBCM_4Value(BCM_AAL_ONOFFSts));
 800222e:	2012      	movs	r0, #18
 8002230:	f004 f866 	bl	8006300 <GetBCM_4Value>
 8002234:	f894 3095 	ldrb.w	r3, [r4, #149]	@ 0x95
 8002238:	f360 13c7 	bfi	r3, r0, #7, #1
 800223c:	f884 3095 	strb.w	r3, [r4, #149]	@ 0x95
    CanTx_SigSet_0x362_BCM_AAL_PitchAngle(GetBCM_4Value(BCM_AAL_PitchAngle));
 8002240:	2013      	movs	r0, #19
 8002242:	f004 f85d 	bl	8006300 <GetBCM_4Value>
 8002246:	f884 0096 	strb.w	r0, [r4, #150]	@ 0x96
    CanTx_SigSet_0x362_BCM_AAL_YawAngle(GetBCM_4Value(BCM_AAL_YawAngle));
 800224a:	2014      	movs	r0, #20
 800224c:	f004 f858 	bl	8006300 <GetBCM_4Value>
 8002250:	f884 0097 	strb.w	r0, [r4, #151]	@ 0x97

    CanTx_SigSet_0x365_TPMS_LearningStatus(GetTPMS_1Value(TPMS_LearningStatus));
 8002254:	2000      	movs	r0, #0
 8002256:	f004 f85d 	bl	8006314 <GetTPMS_1Value>
 800225a:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 800225e:	f360 1387 	bfi	r3, r0, #6, #2
 8002262:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
    CanTx_SigSet_0x365_TPMS_TireLeakage(GetTPMS_1Value(TPMS_TireLeakage));
 8002266:	2001      	movs	r0, #1
 8002268:	f004 f854 	bl	8006314 <GetTPMS_1Value>
 800226c:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8002270:	f360 1345 	bfi	r3, r0, #5, #1
 8002274:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
    CanTx_SigSet_0x365_TPMS_SensorLost(GetTPMS_1Value(TPMS_SensorLost));
 8002278:	2002      	movs	r0, #2
 800227a:	f004 f84b 	bl	8006314 <GetTPMS_1Value>
 800227e:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8002282:	f360 1304 	bfi	r3, r0, #4, #1
 8002286:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
    CanTx_SigSet_0x365_TPMS_TireID(GetTPMS_1Value(TPMS_TireID));
 800228a:	2003      	movs	r0, #3
 800228c:	f004 f842 	bl	8006314 <GetTPMS_1Value>
 8002290:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8002294:	f360 0383 	bfi	r3, r0, #2, #2
 8002298:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
    CanTx_SigSet_0x365_TPMS_SystemStatus(GetTPMS_1Value(TPMS_SystemStatus));
 800229c:	2004      	movs	r0, #4
 800229e:	f004 f839 	bl	8006314 <GetTPMS_1Value>
 80022a2:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 80022a6:	f360 0301 	bfi	r3, r0, #0, #2
 80022aa:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
    CanTx_SigSet_0x365_TPMS_TireBatteryPowerSts(GetTPMS_1Value(TPMS_TireBatteryPowerSts));
 80022ae:	2005      	movs	r0, #5
 80022b0:	f004 f830 	bl	8006314 <GetTPMS_1Value>
 80022b4:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 80022b8:	f360 13c7 	bfi	r3, r0, #7, #1
 80022bc:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
    CanTx_SigSet_0x365_TPMS_TireTemperatureSts(GetTPMS_1Value(TPMS_TireTemperatureSts));
 80022c0:	2006      	movs	r0, #6
 80022c2:	f004 f827 	bl	8006314 <GetTPMS_1Value>
 80022c6:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 80022ca:	f360 1386 	bfi	r3, r0, #6, #1
 80022ce:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
    CanTx_SigSet_0x365_TPMS_TirePressureStatus(GetTPMS_1Value(TPMS_TirePressureStatus));
 80022d2:	2007      	movs	r0, #7
 80022d4:	f004 f81e 	bl	8006314 <GetTPMS_1Value>
 80022d8:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 80022dc:	f360 1305 	bfi	r3, r0, #4, #2
 80022e0:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
    CanTx_SigSet_0x365_TPMS_TirePressure(GetTPMS_1Value(TPMS_TirePressure));
 80022e4:	2008      	movs	r0, #8
 80022e6:	f004 f815 	bl	8006314 <GetTPMS_1Value>
 80022ea:	f884 009a 	strb.w	r0, [r4, #154]	@ 0x9a
    CanTx_SigSet_0x365_TPMS_TireTemperature(GetTPMS_1Value(TPMS_TireTemperature));
 80022ee:	2009      	movs	r0, #9
 80022f0:	f004 f810 	bl	8006314 <GetTPMS_1Value>
 80022f4:	f884 009b 	strb.w	r0, [r4, #155]	@ 0x9b
    CanTx_SigSet_0x365_TPMS_TireBatteryPower(GetTPMS_1Value(TPMS_TireBatteryPower));
 80022f8:	200a      	movs	r0, #10
 80022fa:	f004 f80b 	bl	8006314 <GetTPMS_1Value>
 80022fe:	f884 009c 	strb.w	r0, [r4, #156]	@ 0x9c

    CanTx_SigSet_0x375_IC_ParkingBrakeIndication(GetIC_1Value(IC_ParkingBrakeIndication));
 8002302:	2000      	movs	r0, #0
 8002304:	f004 f810 	bl	8006328 <GetIC_1Value>
 8002308:	f894 30a0 	ldrb.w	r3, [r4, #160]	@ 0xa0
 800230c:	f360 13c7 	bfi	r3, r0, #7, #1
 8002310:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    CanTx_SigSet_0x375_IC_SurplusFuel(GetIC_1Value(IC_SurplusFuel));
 8002314:	2001      	movs	r0, #1
 8002316:	f004 f807 	bl	8006328 <GetIC_1Value>
 800231a:	f894 30a0 	ldrb.w	r3, [r4, #160]	@ 0xa0
 800231e:	f360 0306 	bfi	r3, r0, #0, #7
 8002322:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    CanTx_SigSet_0x375_IC_BrakeSysFailIndication(GetIC_1Value(IC_BrakeSysFailIndication));
 8002326:	2002      	movs	r0, #2
 8002328:	f003 fffe 	bl	8006328 <GetIC_1Value>
 800232c:	f894 30a1 	ldrb.w	r3, [r4, #161]	@ 0xa1
 8002330:	f360 13c7 	bfi	r3, r0, #7, #1
 8002334:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    CanTx_SigSet_0x375_IC_EngineOilLowPressure(GetIC_1Value(IC_EngineOilLowPressure));
 8002338:	2003      	movs	r0, #3
 800233a:	f003 fff5 	bl	8006328 <GetIC_1Value>
 800233e:	f894 30a1 	ldrb.w	r3, [r4, #161]	@ 0xa1
 8002342:	f360 1386 	bfi	r3, r0, #6, #1
 8002346:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    CanTx_SigSet_0x375_IC_FuelSignalOpen(GetIC_1Value(IC_FuelSignalOpen));
 800234a:	2004      	movs	r0, #4
 800234c:	f003 ffec 	bl	8006328 <GetIC_1Value>
 8002350:	f894 30a1 	ldrb.w	r3, [r4, #161]	@ 0xa1
 8002354:	f360 1345 	bfi	r3, r0, #5, #1
 8002358:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    CanTx_SigSet_0x375_IC_FuelSignalShortToBattery(GetIC_1Value(IC_FuelSignalShortToBattery));
 800235c:	2005      	movs	r0, #5
 800235e:	f003 ffe3 	bl	8006328 <GetIC_1Value>
 8002362:	f894 30a1 	ldrb.w	r3, [r4, #161]	@ 0xa1
 8002366:	f360 1304 	bfi	r3, r0, #4, #1
 800236a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    CanTx_SigSet_0x375_IC_FuelSignalShortToGND(GetIC_1Value(IC_FuelSignalShortToGND));
 800236e:	2006      	movs	r0, #6
 8002370:	f003 ffda 	bl	8006328 <GetIC_1Value>
 8002374:	f894 30a1 	ldrb.w	r3, [r4, #161]	@ 0xa1
 8002378:	f360 03c3 	bfi	r3, r0, #3, #1
 800237c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    CanTx_SigSet_0x375_IC_BrakeFluidLevelIndication(GetIC_1Value(IC_BrakeFluidLevelIndication));
 8002380:	2007      	movs	r0, #7
 8002382:	f003 ffd1 	bl	8006328 <GetIC_1Value>
 8002386:	f894 30a1 	ldrb.w	r3, [r4, #161]	@ 0xa1
 800238a:	f360 0382 	bfi	r3, r0, #2, #1
 800238e:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    CanTx_SigSet_0x375_IC_SurplusMileage(GetIC_1Value(IC_SurplusMileage));
 8002392:	2008      	movs	r0, #8
 8002394:	f003 ffc8 	bl	8006328 <GetIC_1Value>
 8002398:	f884 00a2 	strb.w	r0, [r4, #162]	@ 0xa2
 800239c:	2008      	movs	r0, #8
 800239e:	f003 ffc3 	bl	8006328 <GetIC_1Value>
 80023a2:	f3c0 2001 	ubfx	r0, r0, #8, #2
 80023a6:	f894 30a1 	ldrb.w	r3, [r4, #161]	@ 0xa1
 80023aa:	f360 0301 	bfi	r3, r0, #0, #2
 80023ae:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    CanTx_SigSet_0x375_IC_DrvSeatbeltBucklestatus(GetIC_1Value(IC_DrvSeatbeltBucklestatus));
 80023b2:	2009      	movs	r0, #9
 80023b4:	f003 ffb8 	bl	8006328 <GetIC_1Value>
 80023b8:	f894 30a3 	ldrb.w	r3, [r4, #163]	@ 0xa3
 80023bc:	f360 13c7 	bfi	r3, r0, #7, #1
 80023c0:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
    CanTx_SigSet_0x375_IC_PassSeatbeltBucklestatus(GetIC_1Value(IC_PassSeatbeltBucklestatus));
 80023c4:	200a      	movs	r0, #10
 80023c6:	f003 ffaf 	bl	8006328 <GetIC_1Value>
 80023ca:	f894 30a3 	ldrb.w	r3, [r4, #163]	@ 0xa3
 80023ce:	f360 1386 	bfi	r3, r0, #6, #1
 80023d2:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
    CanTx_SigSet_0x375_IC_SurplusFuelValid(GetIC_1Value(IC_SurplusFuelValid));
 80023d6:	200b      	movs	r0, #11
 80023d8:	f003 ffa6 	bl	8006328 <GetIC_1Value>
 80023dc:	f894 30a3 	ldrb.w	r3, [r4, #163]	@ 0xa3
 80023e0:	f360 1304 	bfi	r3, r0, #4, #1
 80023e4:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
    CanTx_SigSet_0x375_IC_OdoMeter(GetIC_1Value(IC_OdoMeter));
 80023e8:	200c      	movs	r0, #12
 80023ea:	f003 ff9d 	bl	8006328 <GetIC_1Value>
 80023ee:	f884 00a5 	strb.w	r0, [r4, #165]	@ 0xa5
 80023f2:	200c      	movs	r0, #12
 80023f4:	f003 ff98 	bl	8006328 <GetIC_1Value>
 80023f8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80023fc:	f884 00a4 	strb.w	r0, [r4, #164]	@ 0xa4
 8002400:	200c      	movs	r0, #12
 8002402:	f003 ff91 	bl	8006328 <GetIC_1Value>
 8002406:	f3c0 4003 	ubfx	r0, r0, #16, #4
 800240a:	f894 30a3 	ldrb.w	r3, [r4, #163]	@ 0xa3
 800240e:	f360 0303 	bfi	r3, r0, #0, #4
 8002412:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
    CanTx_SigSet_0x375_IC_ICFaultSts(GetIC_1Value(IC_ICFaultSts));
 8002416:	200d      	movs	r0, #13
 8002418:	f003 ff86 	bl	8006328 <GetIC_1Value>
 800241c:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 8002420:	f360 1304 	bfi	r3, r0, #4, #1
 8002424:	f884 30a6 	strb.w	r3, [r4, #166]	@ 0xa6
    CanTx_SigSet_0x375_IC_DisplayVehicleSpeedValue(GetIC_1Value(IC_DisplayVehicleSpeedValue));
 8002428:	200e      	movs	r0, #14
 800242a:	f003 ff7d 	bl	8006328 <GetIC_1Value>
 800242e:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 8002432:	f360 03c7 	bfi	r3, r0, #3, #5
 8002436:	f884 30a7 	strb.w	r3, [r4, #167]	@ 0xa7
 800243a:	200e      	movs	r0, #14
 800243c:	f003 ff74 	bl	8006328 <GetIC_1Value>
 8002440:	f3c0 1043 	ubfx	r0, r0, #5, #4
 8002444:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 8002448:	f360 0303 	bfi	r3, r0, #0, #4
 800244c:	f884 30a6 	strb.w	r3, [r4, #166]	@ 0xa6
    CanTx_SigSet_0x375_IC_DisplayVehicleSpeedUnit(GetIC_1Value(IC_DisplayVehicleSpeedUnit));
 8002450:	200f      	movs	r0, #15
 8002452:	f003 ff69 	bl	8006328 <GetIC_1Value>
 8002456:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 800245a:	f360 0382 	bfi	r3, r0, #2, #1
 800245e:	f884 30a7 	strb.w	r3, [r4, #167]	@ 0xa7
    CanTx_SigSet_0x375_IC_AirbagInhibitWarning(GetIC_1Value(IC_AirbagInhibitWarning));
 8002462:	2010      	movs	r0, #16
 8002464:	f003 ff60 	bl	8006328 <GetIC_1Value>
 8002468:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 800246c:	f360 0301 	bfi	r3, r0, #0, #2
 8002470:	f884 30a7 	strb.w	r3, [r4, #167]	@ 0xa7

    CanTx_SigSet_0x376_IC_TripAvgFuelConsRate(GetIC_2Value(IC_TripAvgFuelConsRate));
 8002474:	2000      	movs	r0, #0
 8002476:	f003 ff61 	bl	800633c <GetIC_2Value>
 800247a:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 800247e:	f360 13c7 	bfi	r3, r0, #7, #1
 8002482:	f884 30a9 	strb.w	r3, [r4, #169]	@ 0xa9
 8002486:	2000      	movs	r0, #0
 8002488:	f003 ff58 	bl	800633c <GetIC_2Value>
 800248c:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8002490:	f884 00a8 	strb.w	r0, [r4, #168]	@ 0xa8
    CanTx_SigSet_0x376_IC_LifeTimeAvgFuelConsRate(GetIC_2Value(IC_LifeTimeAvgFuelConsRate));
 8002494:	2001      	movs	r0, #1
 8002496:	f003 ff51 	bl	800633c <GetIC_2Value>
 800249a:	f894 30aa 	ldrb.w	r3, [r4, #170]	@ 0xaa
 800249e:	f360 1387 	bfi	r3, r0, #6, #2
 80024a2:	f884 30aa 	strb.w	r3, [r4, #170]	@ 0xaa
 80024a6:	2001      	movs	r0, #1
 80024a8:	f003 ff48 	bl	800633c <GetIC_2Value>
 80024ac:	f3c0 0086 	ubfx	r0, r0, #2, #7
 80024b0:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 80024b4:	f360 0306 	bfi	r3, r0, #0, #7
 80024b8:	f884 30a9 	strb.w	r3, [r4, #169]	@ 0xa9

    CanTx_SigSet_0x3A0_Swaybar_1_FrontSwaybarYellowLamp(GetGW_PC_4Value(Swaybar_1_FrontSwaybarYellowLamp));
 80024bc:	2000      	movs	r0, #0
 80024be:	f003 ff47 	bl	8006350 <GetGW_PC_4Value>
 80024c2:	f894 30b0 	ldrb.w	r3, [r4, #176]	@ 0xb0
 80024c6:	f360 1305 	bfi	r3, r0, #4, #2
 80024ca:	f884 30b0 	strb.w	r3, [r4, #176]	@ 0xb0
    CanTx_SigSet_0x3A0_Swaybar_1_FrontSwaybarGreenLamp(GetGW_PC_4Value(Swaybar_1_FrontSwaybarGreenLamp));
 80024ce:	2001      	movs	r0, #1
 80024d0:	f003 ff3e 	bl	8006350 <GetGW_PC_4Value>
 80024d4:	f894 30b0 	ldrb.w	r3, [r4, #176]	@ 0xb0
 80024d8:	f360 0383 	bfi	r3, r0, #2, #2
 80024dc:	f884 30b0 	strb.w	r3, [r4, #176]	@ 0xb0
    CanTx_SigSet_0x3A0_EHPS_1_FaultStatus(GetGW_PC_4Value(EHPS_1_FaultStatus));
 80024e0:	2002      	movs	r0, #2
 80024e2:	f003 ff35 	bl	8006350 <GetGW_PC_4Value>
 80024e6:	f894 30b0 	ldrb.w	r3, [r4, #176]	@ 0xb0
 80024ea:	f360 0341 	bfi	r3, r0, #1, #1
 80024ee:	f884 30b0 	strb.w	r3, [r4, #176]	@ 0xb0
    CanTx_SigSet_0x3A0_Swaybar_1_StatusNotice(GetGW_PC_4Value(Swaybar_1_StatusNotice));
 80024f2:	2003      	movs	r0, #3
 80024f4:	f003 ff2c 	bl	8006350 <GetGW_PC_4Value>
 80024f8:	f894 30b1 	ldrb.w	r3, [r4, #177]	@ 0xb1
 80024fc:	f360 0303 	bfi	r3, r0, #0, #4
 8002500:	f884 30b1 	strb.w	r3, [r4, #177]	@ 0xb1
    CanTx_SigSet_0x3A0_Swaybar_1_Timeout_Flag(GetGW_PC_4Value(Swaybar_1_Timeout_Flag));
 8002504:	2004      	movs	r0, #4
 8002506:	f003 ff23 	bl	8006350 <GetGW_PC_4Value>
 800250a:	f894 30b7 	ldrb.w	r3, [r4, #183]	@ 0xb7
 800250e:	f360 0341 	bfi	r3, r0, #1, #1
 8002512:	f884 30b7 	strb.w	r3, [r4, #183]	@ 0xb7

    CanTx_SigSet_0x3AC_AC_1_AirCirculationMode(GetGW_BD_14Value(AC_1_AirCirculationMode));
 8002516:	2000      	movs	r0, #0
 8002518:	f003 ff24 	bl	8006364 <GetGW_BD_14Value>
 800251c:	f894 30b8 	ldrb.w	r3, [r4, #184]	@ 0xb8
 8002520:	f360 13c7 	bfi	r3, r0, #7, #1
 8002524:	f884 30b8 	strb.w	r3, [r4, #184]	@ 0xb8
    CanTx_SigSet_0x3AC_AC_1_AirDistributeMode(GetGW_BD_14Value(AC_1_AirDistributeMode));
 8002528:	2001      	movs	r0, #1
 800252a:	f003 ff1b 	bl	8006364 <GetGW_BD_14Value>
 800252e:	f894 30b8 	ldrb.w	r3, [r4, #184]	@ 0xb8
 8002532:	f360 1306 	bfi	r3, r0, #4, #3
 8002536:	f884 30b8 	strb.w	r3, [r4, #184]	@ 0xb8
    CanTx_SigSet_0x3AC_AC_1_TemperatureLevel(GetGW_BD_14Value(AC_1_TemperatureLevel));
 800253a:	2002      	movs	r0, #2
 800253c:	f003 ff12 	bl	8006364 <GetGW_BD_14Value>
 8002540:	f894 30b8 	ldrb.w	r3, [r4, #184]	@ 0xb8
 8002544:	f360 0303 	bfi	r3, r0, #0, #4
 8002548:	f884 30b8 	strb.w	r3, [r4, #184]	@ 0xb8
    CanTx_SigSet_0x3AC_AC_1_PTCButtonSts(GetGW_BD_14Value(AC_1_PTCButtonSts));
 800254c:	2003      	movs	r0, #3
 800254e:	f003 ff09 	bl	8006364 <GetGW_BD_14Value>
 8002552:	f894 30b9 	ldrb.w	r3, [r4, #185]	@ 0xb9
 8002556:	f360 13c7 	bfi	r3, r0, #7, #1
 800255a:	f884 30b9 	strb.w	r3, [r4, #185]	@ 0xb9
    CanTx_SigSet_0x3AC_AC_1_ACSystemSts(GetGW_BD_14Value(AC_1_ACSystemSts));
 800255e:	2004      	movs	r0, #4
 8002560:	f003 ff00 	bl	8006364 <GetGW_BD_14Value>
 8002564:	f894 30b9 	ldrb.w	r3, [r4, #185]	@ 0xb9
 8002568:	f360 1386 	bfi	r3, r0, #6, #1
 800256c:	f884 30b9 	strb.w	r3, [r4, #185]	@ 0xb9
    CanTx_SigSet_0x3AC_AC_1_RearDefrostButtonSts(GetGW_BD_14Value(AC_1_RearDefrostButtonSts));
 8002570:	2005      	movs	r0, #5
 8002572:	f003 fef7 	bl	8006364 <GetGW_BD_14Value>
 8002576:	f894 30b9 	ldrb.w	r3, [r4, #185]	@ 0xb9
 800257a:	f360 1345 	bfi	r3, r0, #5, #1
 800257e:	f884 30b9 	strb.w	r3, [r4, #185]	@ 0xb9
    CanTx_SigSet_0x3AC_AC_1_FrontDefrostButtonSts(GetGW_BD_14Value(AC_1_FrontDefrostButtonSts));
 8002582:	2006      	movs	r0, #6
 8002584:	f003 feee 	bl	8006364 <GetGW_BD_14Value>
 8002588:	f894 30b9 	ldrb.w	r3, [r4, #185]	@ 0xb9
 800258c:	f360 1304 	bfi	r3, r0, #4, #1
 8002590:	f884 30b9 	strb.w	r3, [r4, #185]	@ 0xb9
    CanTx_SigSet_0x3AC_AC_1_ACButtonSts(GetGW_BD_14Value(AC_1_ACButtonSts));
 8002594:	2007      	movs	r0, #7
 8002596:	f003 fee5 	bl	8006364 <GetGW_BD_14Value>
 800259a:	f894 30b9 	ldrb.w	r3, [r4, #185]	@ 0xb9
 800259e:	f360 03c3 	bfi	r3, r0, #3, #1
 80025a2:	f884 30b9 	strb.w	r3, [r4, #185]	@ 0xb9
    CanTx_SigSet_0x3AC_AC_1_BlowerSpeedLevel(GetGW_BD_14Value(AC_1_BlowerSpeedLevel));
 80025a6:	2008      	movs	r0, #8
 80025a8:	f003 fedc 	bl	8006364 <GetGW_BD_14Value>
 80025ac:	f894 30b9 	ldrb.w	r3, [r4, #185]	@ 0xb9
 80025b0:	f360 0302 	bfi	r3, r0, #0, #3
 80025b4:	f884 30b9 	strb.w	r3, [r4, #185]	@ 0xb9
    CanTx_SigSet_0x3AC_AC_1_RearModeSts(GetGW_BD_14Value(AC_1_RearModeSts));
 80025b8:	2009      	movs	r0, #9
 80025ba:	f003 fed3 	bl	8006364 <GetGW_BD_14Value>
 80025be:	f894 30ba 	ldrb.w	r3, [r4, #186]	@ 0xba
 80025c2:	f360 13c7 	bfi	r3, r0, #7, #1
 80025c6:	f884 30ba 	strb.w	r3, [r4, #186]	@ 0xba
    CanTx_SigSet_0x3AC_AC_1_ButtonTriggerStatus(GetGW_BD_14Value(AC_1_ButtonTriggerStatus));
 80025ca:	200a      	movs	r0, #10
 80025cc:	f003 feca 	bl	8006364 <GetGW_BD_14Value>
 80025d0:	f894 30ba 	ldrb.w	r3, [r4, #186]	@ 0xba
 80025d4:	f360 1386 	bfi	r3, r0, #6, #1
 80025d8:	f884 30ba 	strb.w	r3, [r4, #186]	@ 0xba
    CanTx_SigSet_0x3AC_AC_1_BlowerSpeedLevelRear(GetGW_BD_14Value(AC_1_BlowerSpeedLevelRear));
 80025dc:	200b      	movs	r0, #11
 80025de:	f003 fec1 	bl	8006364 <GetGW_BD_14Value>
 80025e2:	f894 30ba 	ldrb.w	r3, [r4, #186]	@ 0xba
 80025e6:	f360 1305 	bfi	r3, r0, #4, #2
 80025ea:	f884 30ba 	strb.w	r3, [r4, #186]	@ 0xba
    CanTx_SigSet_0x3AC_AC_2_PngSetTemperature(GetGW_BD_14Value(AC_2_PngSetTemperature));
 80025ee:	200c      	movs	r0, #12
 80025f0:	f003 feb8 	bl	8006364 <GetGW_BD_14Value>
 80025f4:	f894 30bb 	ldrb.w	r3, [r4, #187]	@ 0xbb
 80025f8:	f360 1387 	bfi	r3, r0, #6, #2
 80025fc:	f884 30bb 	strb.w	r3, [r4, #187]	@ 0xbb
 8002600:	200c      	movs	r0, #12
 8002602:	f003 feaf 	bl	8006364 <GetGW_BD_14Value>
 8002606:	f3c0 0083 	ubfx	r0, r0, #2, #4
 800260a:	f894 30ba 	ldrb.w	r3, [r4, #186]	@ 0xba
 800260e:	f360 0303 	bfi	r3, r0, #0, #4
 8002612:	f884 30ba 	strb.w	r3, [r4, #186]	@ 0xba
    CanTx_SigSet_0x3AC_AC_2_DriverSetTemperature(GetGW_BD_14Value(AC_2_DriverSetTemperature));
 8002616:	200d      	movs	r0, #13
 8002618:	f003 fea4 	bl	8006364 <GetGW_BD_14Value>
 800261c:	f894 30bb 	ldrb.w	r3, [r4, #187]	@ 0xbb
 8002620:	f360 0305 	bfi	r3, r0, #0, #6
 8002624:	f884 30bb 	strb.w	r3, [r4, #187]	@ 0xbb
    CanTx_SigSet_0x3AC_AC_2_OutsideTemperature(GetGW_BD_14Value(AC_2_OutsideTemperature));
 8002628:	200e      	movs	r0, #14
 800262a:	f003 fe9b 	bl	8006364 <GetGW_BD_14Value>
 800262e:	f884 00bc 	strb.w	r0, [r4, #188]	@ 0xbc
    CanTx_SigSet_0x3AC_AC_1_ACSelfCleanModeSts(GetGW_BD_14Value(AC_1_ACSelfCleanModeSts));
 8002632:	200f      	movs	r0, #15
 8002634:	f003 fe96 	bl	8006364 <GetGW_BD_14Value>
 8002638:	f894 30bd 	ldrb.w	r3, [r4, #189]	@ 0xbd
 800263c:	f360 1345 	bfi	r3, r0, #5, #1
 8002640:	f884 30bd 	strb.w	r3, [r4, #189]	@ 0xbd
    CanTx_SigSet_0x3AC_AC_2_DualButtonSts(GetGW_BD_14Value(AC_2_DualButtonSts));
 8002644:	2010      	movs	r0, #16
 8002646:	f003 fe8d 	bl	8006364 <GetGW_BD_14Value>
 800264a:	f894 30bd 	ldrb.w	r3, [r4, #189]	@ 0xbd
 800264e:	f360 1304 	bfi	r3, r0, #4, #1
 8002652:	f884 30bd 	strb.w	r3, [r4, #189]	@ 0xbd
    CanTx_SigSet_0x3AC_AC_2_AUTOPassengerButtonSts(GetGW_BD_14Value(AC_2_AUTOPassengerButtonSts));
 8002656:	2011      	movs	r0, #17
 8002658:	f003 fe84 	bl	8006364 <GetGW_BD_14Value>
 800265c:	f894 30bd 	ldrb.w	r3, [r4, #189]	@ 0xbd
 8002660:	f360 03c3 	bfi	r3, r0, #3, #1
 8002664:	f884 30bd 	strb.w	r3, [r4, #189]	@ 0xbd
    CanTx_SigSet_0x3AC_AC_2_AUTOButtonSts(GetGW_BD_14Value(AC_2_AUTOButtonSts));
 8002668:	2012      	movs	r0, #18
 800266a:	f003 fe7b 	bl	8006364 <GetGW_BD_14Value>
 800266e:	f894 30bd 	ldrb.w	r3, [r4, #189]	@ 0xbd
 8002672:	f360 0382 	bfi	r3, r0, #2, #1
 8002676:	f884 30bd 	strb.w	r3, [r4, #189]	@ 0xbd
    CanTx_SigSet_0x3AC_AC_2_DualMode(GetGW_BD_14Value(AC_2_DualMode));
 800267a:	2013      	movs	r0, #19
 800267c:	f003 fe72 	bl	8006364 <GetGW_BD_14Value>
 8002680:	f894 30bd 	ldrb.w	r3, [r4, #189]	@ 0xbd
 8002684:	f360 0341 	bfi	r3, r0, #1, #1
 8002688:	f884 30bd 	strb.w	r3, [r4, #189]	@ 0xbd
    CanTx_SigSet_0x3AC_AC_2_OutsideTemperatureValid(GetGW_BD_14Value(AC_2_OutsideTemperatureValid));
 800268c:	2014      	movs	r0, #20
 800268e:	f003 fe69 	bl	8006364 <GetGW_BD_14Value>
 8002692:	f894 30bd 	ldrb.w	r3, [r4, #189]	@ 0xbd
 8002696:	f360 0300 	bfi	r3, r0, #0, #1
 800269a:	f884 30bd 	strb.w	r3, [r4, #189]	@ 0xbd
    CanTx_SigSet_0x3AC_AC_2_Timeout_Flag(GetGW_BD_14Value(AC_2_Timeout_Flag));
 800269e:	2015      	movs	r0, #21
 80026a0:	f003 fe60 	bl	8006364 <GetGW_BD_14Value>
 80026a4:	f894 30bf 	ldrb.w	r3, [r4, #191]	@ 0xbf
 80026a8:	f360 0341 	bfi	r3, r0, #1, #1
 80026ac:	f884 30bf 	strb.w	r3, [r4, #191]	@ 0xbf
    CanTx_SigSet_0x3AC_AC_1_Timeout_Flag(GetGW_BD_14Value(AC_1_Timeout_Flag));
 80026b0:	2016      	movs	r0, #22
 80026b2:	f003 fe57 	bl	8006364 <GetGW_BD_14Value>
 80026b6:	f894 30bf 	ldrb.w	r3, [r4, #191]	@ 0xbf
 80026ba:	f360 0300 	bfi	r3, r0, #0, #1
 80026be:	f884 30bf 	strb.w	r3, [r4, #191]	@ 0xbf

    CanTx_SigSet_0x3B0_IHU_NavSpeedLimit(GetIHU_4Value(IHU_NavSpeedLimit));
 80026c2:	2000      	movs	r0, #0
 80026c4:	f003 fe58 	bl	8006378 <GetIHU_4Value>
 80026c8:	f894 30c0 	ldrb.w	r3, [r4, #192]	@ 0xc0
 80026cc:	f360 0387 	bfi	r3, r0, #2, #6
 80026d0:	f884 30c0 	strb.w	r3, [r4, #192]	@ 0xc0
    CanTx_SigSet_0x3B0_IHU_NavSpeedLimitStatus(GetIHU_4Value(IHU_NavSpeedLimitStatus));
 80026d4:	2001      	movs	r0, #1
 80026d6:	f003 fe4f 	bl	8006378 <GetIHU_4Value>
 80026da:	f894 30c0 	ldrb.w	r3, [r4, #192]	@ 0xc0
 80026de:	f360 0301 	bfi	r3, r0, #0, #2
 80026e2:	f884 30c0 	strb.w	r3, [r4, #192]	@ 0xc0
    CanTx_SigSet_0x3B0_IHU_NavCurrRoadType(GetIHU_4Value(IHU_NavCurrRoadType));
 80026e6:	2002      	movs	r0, #2
 80026e8:	f003 fe46 	bl	8006378 <GetIHU_4Value>
 80026ec:	f894 30c1 	ldrb.w	r3, [r4, #193]	@ 0xc1
 80026f0:	f360 0385 	bfi	r3, r0, #2, #4
 80026f4:	f884 30c1 	strb.w	r3, [r4, #193]	@ 0xc1
    CanTx_SigSet_0x3B0_IHU_NavSpeedLimitUnits(GetIHU_4Value(IHU_NavSpeedLimitUnits));
 80026f8:	2003      	movs	r0, #3
 80026fa:	f003 fe3d 	bl	8006378 <GetIHU_4Value>
 80026fe:	f894 30c1 	ldrb.w	r3, [r4, #193]	@ 0xc1
 8002702:	f360 0301 	bfi	r3, r0, #0, #2
 8002706:	f884 30c1 	strb.w	r3, [r4, #193]	@ 0xc1

    CanTx_SigSet_0x3B1_IHU_BrightnessLevel(GetIHU_5Value(IHU_BrightnessLevel));
 800270a:	2000      	movs	r0, #0
 800270c:	f003 fe3e 	bl	800638c <GetIHU_5Value>
 8002710:	f894 30c8 	ldrb.w	r3, [r4, #200]	@ 0xc8
 8002714:	f360 0303 	bfi	r3, r0, #0, #4
 8002718:	f884 30c8 	strb.w	r3, [r4, #200]	@ 0xc8
    CanTx_SigSet_0x3B1_IHU_VehiclePitchAngle(GetIHU_5Value(IHU_VehiclePitchAngle));
 800271c:	2001      	movs	r0, #1
 800271e:	f003 fe35 	bl	800638c <GetIHU_5Value>
 8002722:	f894 30ca 	ldrb.w	r3, [r4, #202]	@ 0xca
 8002726:	f360 1307 	bfi	r3, r0, #4, #4
 800272a:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
 800272e:	2001      	movs	r0, #1
 8002730:	f003 fe2c 	bl	800638c <GetIHU_5Value>
 8002734:	f3c0 1007 	ubfx	r0, r0, #4, #8
 8002738:	f884 00c9 	strb.w	r0, [r4, #201]	@ 0xc9
    CanTx_SigSet_0x3B1_IHU_VehicleRollAngle(GetIHU_5Value(IHU_VehicleRollAngle));
 800273c:	2002      	movs	r0, #2
 800273e:	f003 fe25 	bl	800638c <GetIHU_5Value>
 8002742:	f884 00cb 	strb.w	r0, [r4, #203]	@ 0xcb
 8002746:	2002      	movs	r0, #2
 8002748:	f003 fe20 	bl	800638c <GetIHU_5Value>
 800274c:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8002750:	f894 30ca 	ldrb.w	r3, [r4, #202]	@ 0xca
 8002754:	f360 0303 	bfi	r3, r0, #0, #4
 8002758:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
    CanTx_SigSet_0x3B1_IHU_GPSAntennaTurnOff(GetIHU_5Value(IHU_GPSAntennaTurnOff));
 800275c:	2003      	movs	r0, #3
 800275e:	f003 fe15 	bl	800638c <GetIHU_5Value>
 8002762:	f894 30cc 	ldrb.w	r3, [r4, #204]	@ 0xcc
 8002766:	f360 1304 	bfi	r3, r0, #4, #1
 800276a:	f884 30cc 	strb.w	r3, [r4, #204]	@ 0xcc
    CanTx_SigSet_0x3B1_IHU_GPSAntennaShortCircuit(GetIHU_5Value(IHU_GPSAntennaShortCircuit));
 800276e:	2004      	movs	r0, #4
 8002770:	f003 fe0c 	bl	800638c <GetIHU_5Value>
 8002774:	f894 30cc 	ldrb.w	r3, [r4, #204]	@ 0xcc
 8002778:	f360 03c3 	bfi	r3, r0, #3, #1
 800277c:	f884 30cc 	strb.w	r3, [r4, #204]	@ 0xcc
    CanTx_SigSet_0x3B1_IHU_GPSErr(GetIHU_5Value(IHU_GPSErr));
 8002780:	2005      	movs	r0, #5
 8002782:	f003 fe03 	bl	800638c <GetIHU_5Value>
 8002786:	f894 30cc 	ldrb.w	r3, [r4, #204]	@ 0xcc
 800278a:	f360 0382 	bfi	r3, r0, #2, #1
 800278e:	f884 30cc 	strb.w	r3, [r4, #204]	@ 0xcc
    CanTx_SigSet_0x3B1_IHU_VideoSts(GetIHU_5Value(IHU_VideoSts));
 8002792:	2006      	movs	r0, #6
 8002794:	f003 fdfa 	bl	800638c <GetIHU_5Value>
 8002798:	f894 30cc 	ldrb.w	r3, [r4, #204]	@ 0xcc
 800279c:	f360 0341 	bfi	r3, r0, #1, #1
 80027a0:	f884 30cc 	strb.w	r3, [r4, #204]	@ 0xcc
    CanTx_SigSet_0x3B1_IHU_DVSts(GetIHU_5Value(IHU_DVSts));
 80027a4:	2007      	movs	r0, #7
 80027a6:	f003 fdf1 	bl	800638c <GetIHU_5Value>
 80027aa:	f894 30cc 	ldrb.w	r3, [r4, #204]	@ 0xcc
 80027ae:	f360 0300 	bfi	r3, r0, #0, #1
 80027b2:	f884 30cc 	strb.w	r3, [r4, #204]	@ 0xcc
    CanTx_SigSet_0x3B1_IHU_GPSSatelliteNum(GetIHU_5Value(IHU_GPSSatelliteNum));
 80027b6:	2008      	movs	r0, #8
 80027b8:	f003 fde8 	bl	800638c <GetIHU_5Value>
 80027bc:	f884 00cd 	strb.w	r0, [r4, #205]	@ 0xcd
    CanTx_SigSet_0x3B1_IHU_USBtoTboxConnectSts(GetIHU_5Value(IHU_USBtoTboxConnectSts));
 80027c0:	2009      	movs	r0, #9
 80027c2:	f003 fde3 	bl	800638c <GetIHU_5Value>
 80027c6:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 80027ca:	f360 0382 	bfi	r3, r0, #2, #1
 80027ce:	f884 30ce 	strb.w	r3, [r4, #206]	@ 0xce
    CanTx_SigSet_0x3B1_IHU_IHUFaultSts(GetIHU_5Value(IHU_IHUFaultSts));
 80027d2:	200a      	movs	r0, #10
 80027d4:	f003 fdda 	bl	800638c <GetIHU_5Value>
 80027d8:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 80027dc:	f360 0341 	bfi	r3, r0, #1, #1
 80027e0:	f884 30ce 	strb.w	r3, [r4, #206]	@ 0xce
    CanTx_SigSet_0x3B1_IHU_AudioMuteSts(GetIHU_5Value(IHU_AudioMuteSts));
 80027e4:	200b      	movs	r0, #11
 80027e6:	f003 fdd1 	bl	800638c <GetIHU_5Value>
 80027ea:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 80027ee:	f360 0300 	bfi	r3, r0, #0, #1
 80027f2:	f884 30ce 	strb.w	r3, [r4, #206]	@ 0xce

    CanTx_SigSet_0x3CC_SCU_1_FRSeatHeatLvlSts(GetGW_BD_29Value(SCU_1_FRSeatHeatLvlSts));
 80027f6:	2000      	movs	r0, #0
 80027f8:	f003 fdd2 	bl	80063a0 <GetGW_BD_29Value>
 80027fc:	f894 30d0 	ldrb.w	r3, [r4, #208]	@ 0xd0
 8002800:	f360 1307 	bfi	r3, r0, #4, #4
 8002804:	f884 30d0 	strb.w	r3, [r4, #208]	@ 0xd0
    CanTx_SigSet_0x3CC_SCU_1_FLSeatHeatLvlSts(GetGW_BD_29Value(SCU_1_FLSeatHeatLvlSts));
 8002808:	2001      	movs	r0, #1
 800280a:	f003 fdc9 	bl	80063a0 <GetGW_BD_29Value>
 800280e:	f894 30d0 	ldrb.w	r3, [r4, #208]	@ 0xd0
 8002812:	f360 0303 	bfi	r3, r0, #0, #4
 8002816:	f884 30d0 	strb.w	r3, [r4, #208]	@ 0xd0
    CanTx_SigSet_0x3CC_SCU_1_FLSeatMassgModSts(GetGW_BD_29Value(SCU_1_FLSeatMassgModSts));
 800281a:	2002      	movs	r0, #2
 800281c:	f003 fdc0 	bl	80063a0 <GetGW_BD_29Value>
 8002820:	f894 30d1 	ldrb.w	r3, [r4, #209]	@ 0xd1
 8002824:	f360 1307 	bfi	r3, r0, #4, #4
 8002828:	f884 30d1 	strb.w	r3, [r4, #209]	@ 0xd1
    CanTx_SigSet_0x3CC_SCU_1_FLSeatMassgLvlSts(GetGW_BD_29Value(SCU_1_FLSeatMassgLvlSts));
 800282c:	2003      	movs	r0, #3
 800282e:	f003 fdb7 	bl	80063a0 <GetGW_BD_29Value>
 8002832:	f894 30d1 	ldrb.w	r3, [r4, #209]	@ 0xd1
 8002836:	f360 0302 	bfi	r3, r0, #0, #3
 800283a:	f884 30d1 	strb.w	r3, [r4, #209]	@ 0xd1
    CanTx_SigSet_0x3CC_SCU_1_FaultsStatus(GetGW_BD_29Value(SCU_1_FaultsStatus));
 800283e:	2004      	movs	r0, #4
 8002840:	f003 fdae 	bl	80063a0 <GetGW_BD_29Value>
 8002844:	f884 00d2 	strb.w	r0, [r4, #210]	@ 0xd2
    CanTx_SigSet_0x3CC_WCM_1_WirelessChargeSwtSts(GetGW_BD_29Value(WCM_1_WirelessChargeSwtSts));
 8002848:	2005      	movs	r0, #5
 800284a:	f003 fda9 	bl	80063a0 <GetGW_BD_29Value>
 800284e:	f894 30d3 	ldrb.w	r3, [r4, #211]	@ 0xd3
 8002852:	f360 1387 	bfi	r3, r0, #6, #2
 8002856:	f884 30d3 	strb.w	r3, [r4, #211]	@ 0xd3
    CanTx_SigSet_0x3CC_WCM_1_FailureSts(GetGW_BD_29Value(WCM_1_FailureSts));
 800285a:	2006      	movs	r0, #6
 800285c:	f003 fda0 	bl	80063a0 <GetGW_BD_29Value>
 8002860:	f894 30d3 	ldrb.w	r3, [r4, #211]	@ 0xd3
 8002864:	f360 03c5 	bfi	r3, r0, #3, #3
 8002868:	f884 30d3 	strb.w	r3, [r4, #211]	@ 0xd3
    CanTx_SigSet_0x3CC_WCM_1_ChargingSts(GetGW_BD_29Value(WCM_1_ChargingSts));
 800286c:	2007      	movs	r0, #7
 800286e:	f003 fd97 	bl	80063a0 <GetGW_BD_29Value>
 8002872:	f894 30d3 	ldrb.w	r3, [r4, #211]	@ 0xd3
 8002876:	f360 0301 	bfi	r3, r0, #0, #2
 800287a:	f884 30d3 	strb.w	r3, [r4, #211]	@ 0xd3
    CanTx_SigSet_0x3CC_EPM_1_EPMModSts(GetGW_BD_29Value(EPM_1_EPMModSts));
 800287e:	2008      	movs	r0, #8
 8002880:	f003 fd8e 	bl	80063a0 <GetGW_BD_29Value>
 8002884:	f894 30d4 	ldrb.w	r3, [r4, #212]	@ 0xd4
 8002888:	f360 0342 	bfi	r3, r0, #1, #2
 800288c:	f884 30d4 	strb.w	r3, [r4, #212]	@ 0xd4
    CanTx_SigSet_0x3CC_WCM_1_PhoneReminder(GetGW_BD_29Value(WCM_1_PhoneReminder));
 8002890:	2009      	movs	r0, #9
 8002892:	f003 fd85 	bl	80063a0 <GetGW_BD_29Value>
 8002896:	f894 30d4 	ldrb.w	r3, [r4, #212]	@ 0xd4
 800289a:	f360 0300 	bfi	r3, r0, #0, #1
 800289e:	f884 30d4 	strb.w	r3, [r4, #212]	@ 0xd4
    CanTx_SigSet_0x3CC_EPM_1_Timeout_Flag(GetGW_BD_29Value(EPM_1_Timeout_Flag));
 80028a2:	200a      	movs	r0, #10
 80028a4:	f003 fd7c 	bl	80063a0 <GetGW_BD_29Value>
 80028a8:	f894 30d7 	ldrb.w	r3, [r4, #215]	@ 0xd7
 80028ac:	f360 0382 	bfi	r3, r0, #2, #1
 80028b0:	f884 30d7 	strb.w	r3, [r4, #215]	@ 0xd7
    CanTx_SigSet_0x3CC_WCM_1_Timeout_Flag(GetGW_BD_29Value(WCM_1_Timeout_Flag));
 80028b4:	200b      	movs	r0, #11
 80028b6:	f003 fd73 	bl	80063a0 <GetGW_BD_29Value>
 80028ba:	f894 30d7 	ldrb.w	r3, [r4, #215]	@ 0xd7
 80028be:	f360 0341 	bfi	r3, r0, #1, #1
 80028c2:	f884 30d7 	strb.w	r3, [r4, #215]	@ 0xd7
    CanTx_SigSet_0x3CC_SCU_1_Timeout_Flag(GetGW_BD_29Value(SCU_1_Timeout_Flag));
 80028c6:	200c      	movs	r0, #12
 80028c8:	f003 fd6a 	bl	80063a0 <GetGW_BD_29Value>
 80028cc:	f894 30d7 	ldrb.w	r3, [r4, #215]	@ 0xd7
 80028d0:	f360 0300 	bfi	r3, r0, #0, #1
 80028d4:	f884 30d7 	strb.w	r3, [r4, #215]	@ 0xd7

    CanTx_SigSet_0x542_IHU_DateTimeSecond(GetIHU_2Value(IHU_DateTimeSecond));
 80028d8:	2000      	movs	r0, #0
 80028da:	f003 fd6b 	bl	80063b4 <GetIHU_2Value>
 80028de:	f894 30d8 	ldrb.w	r3, [r4, #216]	@ 0xd8
 80028e2:	f360 0305 	bfi	r3, r0, #0, #6
 80028e6:	f884 30d8 	strb.w	r3, [r4, #216]	@ 0xd8
    CanTx_SigSet_0x542_IHU_DateTimeMinute(GetIHU_2Value(IHU_DateTimeMinute));
 80028ea:	2001      	movs	r0, #1
 80028ec:	f003 fd62 	bl	80063b4 <GetIHU_2Value>
 80028f0:	f894 30d9 	ldrb.w	r3, [r4, #217]	@ 0xd9
 80028f4:	f360 0305 	bfi	r3, r0, #0, #6
 80028f8:	f884 30d9 	strb.w	r3, [r4, #217]	@ 0xd9
    CanTx_SigSet_0x542_IHU_DateTimeHour(GetIHU_2Value(IHU_DateTimeHour));
 80028fc:	2002      	movs	r0, #2
 80028fe:	f003 fd59 	bl	80063b4 <GetIHU_2Value>
 8002902:	f894 30da 	ldrb.w	r3, [r4, #218]	@ 0xda
 8002906:	f360 0304 	bfi	r3, r0, #0, #5
 800290a:	f884 30da 	strb.w	r3, [r4, #218]	@ 0xda
    CanTx_SigSet_0x542_IHU_DateTimeDay(GetIHU_2Value(IHU_DateTimeDay));
 800290e:	2003      	movs	r0, #3
 8002910:	f003 fd50 	bl	80063b4 <GetIHU_2Value>
 8002914:	f894 30db 	ldrb.w	r3, [r4, #219]	@ 0xdb
 8002918:	f360 0304 	bfi	r3, r0, #0, #5
 800291c:	f884 30db 	strb.w	r3, [r4, #219]	@ 0xdb
    CanTx_SigSet_0x542_IHU_DateTimeMonth(GetIHU_2Value(IHU_DateTimeMonth));
 8002920:	2004      	movs	r0, #4
 8002922:	f003 fd47 	bl	80063b4 <GetIHU_2Value>
 8002926:	f894 30dc 	ldrb.w	r3, [r4, #220]	@ 0xdc
 800292a:	f360 0303 	bfi	r3, r0, #0, #4
 800292e:	f884 30dc 	strb.w	r3, [r4, #220]	@ 0xdc
    CanTx_SigSet_0x542_IHU_DateTimeYear(GetIHU_2Value(IHU_DateTimeYear));
 8002932:	2005      	movs	r0, #5
 8002934:	f003 fd3e 	bl	80063b4 <GetIHU_2Value>
 8002938:	f894 30dd 	ldrb.w	r3, [r4, #221]	@ 0xdd
 800293c:	f360 0306 	bfi	r3, r0, #0, #7
 8002940:	f884 30dd 	strb.w	r3, [r4, #221]	@ 0xdd

    CanTx_SigSet_0x580_IHU_GPSPositioningSts(GetIHU_7Value(IHU_GPSPositioningSts));
 8002944:	2000      	movs	r0, #0
 8002946:	f003 fd3f 	bl	80063c8 <GetIHU_7Value>
 800294a:	f894 30e0 	ldrb.w	r3, [r4, #224]	@ 0xe0
 800294e:	f360 1387 	bfi	r3, r0, #6, #2
 8002952:	f884 30e0 	strb.w	r3, [r4, #224]	@ 0xe0
    CanTx_SigSet_0x580_IHU_GPSDataType(GetIHU_7Value(IHU7_GPSDataType));
 8002956:	2001      	movs	r0, #1
 8002958:	f003 fd36 	bl	80063c8 <GetIHU_7Value>
 800295c:	f894 30e0 	ldrb.w	r3, [r4, #224]	@ 0xe0
 8002960:	f360 1305 	bfi	r3, r0, #4, #2
 8002964:	f884 30e0 	strb.w	r3, [r4, #224]	@ 0xe0
    CanTx_SigSet_0x580_IHU_GPSDataGroup(GetIHU_7Value(IHU7_GPSDataGroup));
 8002968:	2002      	movs	r0, #2
 800296a:	f003 fd2d 	bl	80063c8 <GetIHU_7Value>
 800296e:	f894 30e0 	ldrb.w	r3, [r4, #224]	@ 0xe0
 8002972:	f360 0303 	bfi	r3, r0, #0, #4
 8002976:	f884 30e0 	strb.w	r3, [r4, #224]	@ 0xe0
    CanTx_SigSet_0x580_IHU_GPSviaGALILEO(GetIHU_7Value(IHU_GPSviaGALILEO));
 800297a:	2003      	movs	r0, #3
 800297c:	f003 fd24 	bl	80063c8 <GetIHU_7Value>
 8002980:	f894 30e1 	ldrb.w	r3, [r4, #225]	@ 0xe1
 8002984:	f360 1387 	bfi	r3, r0, #6, #2
 8002988:	f884 30e1 	strb.w	r3, [r4, #225]	@ 0xe1
    CanTx_SigSet_0x580_IHU_GPSviaGLONASS(GetIHU_7Value(IHU_GPSviaGLONASS));
 800298c:	2004      	movs	r0, #4
 800298e:	f003 fd1b 	bl	80063c8 <GetIHU_7Value>
 8002992:	f894 30e1 	ldrb.w	r3, [r4, #225]	@ 0xe1
 8002996:	f360 1305 	bfi	r3, r0, #4, #2
 800299a:	f884 30e1 	strb.w	r3, [r4, #225]	@ 0xe1
    CanTx_SigSet_0x580_IHU_GPSviaBeidou(GetIHU_7Value(IHU_GPSviaBeidou));
 800299e:	2005      	movs	r0, #5
 80029a0:	f003 fd12 	bl	80063c8 <GetIHU_7Value>
 80029a4:	f894 30e1 	ldrb.w	r3, [r4, #225]	@ 0xe1
 80029a8:	f360 0383 	bfi	r3, r0, #2, #2
 80029ac:	f884 30e1 	strb.w	r3, [r4, #225]	@ 0xe1
    CanTx_SigSet_0x580_IHU_GPSviaGPS(GetIHU_7Value(IHU_GPSviaGPS));
 80029b0:	2006      	movs	r0, #6
 80029b2:	f003 fd09 	bl	80063c8 <GetIHU_7Value>
 80029b6:	f894 30e1 	ldrb.w	r3, [r4, #225]	@ 0xe1
 80029ba:	f360 0301 	bfi	r3, r0, #0, #2
 80029be:	f884 30e1 	strb.w	r3, [r4, #225]	@ 0xe1
    CanTx_SigSet_0x580_IHU_GPSAltitude(GetIHU_7Value(IHU_GPSAltitude));
 80029c2:	2007      	movs	r0, #7
 80029c4:	f003 fd00 	bl	80063c8 <GetIHU_7Value>
 80029c8:	f884 00e3 	strb.w	r0, [r4, #227]	@ 0xe3
 80029cc:	2007      	movs	r0, #7
 80029ce:	f003 fcfb 	bl	80063c8 <GetIHU_7Value>
 80029d2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80029d6:	f884 00e2 	strb.w	r0, [r4, #226]	@ 0xe2
    CanTx_SigSet_0x580_IHU_GPSLatitude(GetIHU_7Value(IHU_GPSLatitude));
 80029da:	2008      	movs	r0, #8
 80029dc:	f003 fcf4 	bl	80063c8 <GetIHU_7Value>
 80029e0:	f894 30e7 	ldrb.w	r3, [r4, #231]	@ 0xe7
 80029e4:	f360 0387 	bfi	r3, r0, #2, #6
 80029e8:	f884 30e7 	strb.w	r3, [r4, #231]	@ 0xe7
 80029ec:	2008      	movs	r0, #8
 80029ee:	f003 fceb 	bl	80063c8 <GetIHU_7Value>
 80029f2:	f3c0 1087 	ubfx	r0, r0, #6, #8
 80029f6:	f884 00e6 	strb.w	r0, [r4, #230]	@ 0xe6
 80029fa:	2008      	movs	r0, #8
 80029fc:	f003 fce4 	bl	80063c8 <GetIHU_7Value>
 8002a00:	f3c0 3087 	ubfx	r0, r0, #14, #8
 8002a04:	f884 00e5 	strb.w	r0, [r4, #229]	@ 0xe5
 8002a08:	2008      	movs	r0, #8
 8002a0a:	f003 fcdd 	bl	80063c8 <GetIHU_7Value>
 8002a0e:	f3c0 5087 	ubfx	r0, r0, #22, #8
 8002a12:	f884 00e4 	strb.w	r0, [r4, #228]	@ 0xe4
    CanTx_SigSet_0x580_IHU_GPSLatitudeDirection(GetIHU_7Value(IHU_GPSLatitudeDirection));
 8002a16:	2009      	movs	r0, #9
 8002a18:	f003 fcd6 	bl	80063c8 <GetIHU_7Value>
 8002a1c:	f894 30e7 	ldrb.w	r3, [r4, #231]	@ 0xe7
 8002a20:	f360 0301 	bfi	r3, r0, #0, #2
 8002a24:	f884 30e7 	strb.w	r3, [r4, #231]	@ 0xe7

    CanTx_SigSet_0x581_IHU_GPSLongitudeDirection(GetIHU_8Value(IHU_GPSLongitudeDirection));
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f003 fcd7 	bl	80063dc <GetIHU_8Value>
 8002a2e:	f894 30e8 	ldrb.w	r3, [r4, #232]	@ 0xe8
 8002a32:	f360 1387 	bfi	r3, r0, #6, #2
 8002a36:	f884 30e8 	strb.w	r3, [r4, #232]	@ 0xe8
    CanTx_SigSet_0x581_IHU_GPSDataType(GetIHU_8Value(IHU8_GPSDataType));
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f003 fcce 	bl	80063dc <GetIHU_8Value>
 8002a40:	f894 30e8 	ldrb.w	r3, [r4, #232]	@ 0xe8
 8002a44:	f360 1305 	bfi	r3, r0, #4, #2
 8002a48:	f884 30e8 	strb.w	r3, [r4, #232]	@ 0xe8
    CanTx_SigSet_0x581_IHU_GPSDataGroup(GetIHU_8Value(IHU8_GPSDataGroup));
 8002a4c:	2002      	movs	r0, #2
 8002a4e:	f003 fcc5 	bl	80063dc <GetIHU_8Value>
 8002a52:	f894 30e8 	ldrb.w	r3, [r4, #232]	@ 0xe8
 8002a56:	f360 0303 	bfi	r3, r0, #0, #4
 8002a5a:	f884 30e8 	strb.w	r3, [r4, #232]	@ 0xe8
    CanTx_SigSet_0x581_IHU_GPSLongitude(GetIHU_8Value(IHU_GPSLongitude));
 8002a5e:	2003      	movs	r0, #3
 8002a60:	f003 fcbc 	bl	80063dc <GetIHU_8Value>
 8002a64:	f894 30ec 	ldrb.w	r3, [r4, #236]	@ 0xec
 8002a68:	f360 0387 	bfi	r3, r0, #2, #6
 8002a6c:	f884 30ec 	strb.w	r3, [r4, #236]	@ 0xec
 8002a70:	2003      	movs	r0, #3
 8002a72:	f003 fcb3 	bl	80063dc <GetIHU_8Value>
 8002a76:	f3c0 1087 	ubfx	r0, r0, #6, #8
 8002a7a:	f884 00eb 	strb.w	r0, [r4, #235]	@ 0xeb
 8002a7e:	2003      	movs	r0, #3
 8002a80:	f003 fcac 	bl	80063dc <GetIHU_8Value>
 8002a84:	f3c0 3087 	ubfx	r0, r0, #14, #8
 8002a88:	f884 00ea 	strb.w	r0, [r4, #234]	@ 0xea
 8002a8c:	2003      	movs	r0, #3
 8002a8e:	f003 fca5 	bl	80063dc <GetIHU_8Value>
 8002a92:	f3c0 5087 	ubfx	r0, r0, #22, #8
 8002a96:	f884 00e9 	strb.w	r0, [r4, #233]	@ 0xe9
    CanTx_SigSet_0x581_IHU_GPSVehicleDirection(GetIHU_8Value(IHU_GPSVehicleDirection));
 8002a9a:	2004      	movs	r0, #4
 8002a9c:	f003 fc9e 	bl	80063dc <GetIHU_8Value>
 8002aa0:	f884 00ed 	strb.w	r0, [r4, #237]	@ 0xed
 8002aa4:	2004      	movs	r0, #4
 8002aa6:	f003 fc99 	bl	80063dc <GetIHU_8Value>
 8002aaa:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8002aae:	f894 30ec 	ldrb.w	r3, [r4, #236]	@ 0xec
 8002ab2:	f360 0300 	bfi	r3, r0, #0, #1
 8002ab6:	f884 30ec 	strb.w	r3, [r4, #236]	@ 0xec
    CanTx_SigSet_0x581_IHU_GPSVehicleSpeed(GetIHU_8Value(IHU_GPSVehicleSpeed));
 8002aba:	2005      	movs	r0, #5
 8002abc:	f003 fc8e 	bl	80063dc <GetIHU_8Value>
 8002ac0:	f884 00ef 	strb.w	r0, [r4, #239]	@ 0xef
 8002ac4:	2005      	movs	r0, #5
 8002ac6:	f003 fc89 	bl	80063dc <GetIHU_8Value>
 8002aca:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002ace:	f884 00ee 	strb.w	r0, [r4, #238]	@ 0xee

    CanTx_SigSet_0x582_IHU_GPSDataType(GetIHU_9Value(IHU9_GPSDataType));
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f003 fc8c 	bl	80063f0 <GetIHU_9Value>
 8002ad8:	f894 30f0 	ldrb.w	r3, [r4, #240]	@ 0xf0
 8002adc:	f360 1305 	bfi	r3, r0, #4, #2
 8002ae0:	f884 30f0 	strb.w	r3, [r4, #240]	@ 0xf0
    CanTx_SigSet_0x582_IHU_GPSDataGroup(GetIHU_9Value(IHU9_GPSDataGroup));
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	f003 fc83 	bl	80063f0 <GetIHU_9Value>
 8002aea:	f894 30f0 	ldrb.w	r3, [r4, #240]	@ 0xf0
 8002aee:	f360 0303 	bfi	r3, r0, #0, #4
 8002af2:	f884 30f0 	strb.w	r3, [r4, #240]	@ 0xf0
    CanTx_SigSet_0x582_IHU_GPSTime(GetIHU_9Value(IHU_GPSTime));
 8002af6:	2002      	movs	r0, #2
 8002af8:	f003 fc7a 	bl	80063f0 <GetIHU_9Value>
 8002afc:	f884 00f4 	strb.w	r0, [r4, #244]	@ 0xf4
 8002b00:	2002      	movs	r0, #2
 8002b02:	f003 fc75 	bl	80063f0 <GetIHU_9Value>
 8002b06:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002b0a:	f884 00f3 	strb.w	r0, [r4, #243]	@ 0xf3
 8002b0e:	2002      	movs	r0, #2
 8002b10:	f003 fc6e 	bl	80063f0 <GetIHU_9Value>
 8002b14:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8002b18:	f884 00f2 	strb.w	r0, [r4, #242]	@ 0xf2
 8002b1c:	2002      	movs	r0, #2
 8002b1e:	f003 fc67 	bl	80063f0 <GetIHU_9Value>
 8002b22:	0e00      	lsrs	r0, r0, #24
 8002b24:	f884 00f1 	strb.w	r0, [r4, #241]	@ 0xf1

    CanTx_SigSet_0x598_TBOX_DateTimeSecond(GetTBOX_1Value(TBOX_DateTimeSecond));
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f003 fc6b 	bl	8006404 <GetTBOX_1Value>
 8002b2e:	f894 30f8 	ldrb.w	r3, [r4, #248]	@ 0xf8
 8002b32:	f360 0305 	bfi	r3, r0, #0, #6
 8002b36:	f884 30f8 	strb.w	r3, [r4, #248]	@ 0xf8
    CanTx_SigSet_0x598_TBOX_DateTimeMinute(GetTBOX_1Value(TBOX_DateTimeMinute));
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	f003 fc62 	bl	8006404 <GetTBOX_1Value>
 8002b40:	f894 30f9 	ldrb.w	r3, [r4, #249]	@ 0xf9
 8002b44:	f360 0305 	bfi	r3, r0, #0, #6
 8002b48:	f884 30f9 	strb.w	r3, [r4, #249]	@ 0xf9
    CanTx_SigSet_0x598_TBOX_DateTimeHour(GetTBOX_1Value(TBOX_DateTimeHour));
 8002b4c:	2002      	movs	r0, #2
 8002b4e:	f003 fc59 	bl	8006404 <GetTBOX_1Value>
 8002b52:	f894 30fa 	ldrb.w	r3, [r4, #250]	@ 0xfa
 8002b56:	f360 0304 	bfi	r3, r0, #0, #5
 8002b5a:	f884 30fa 	strb.w	r3, [r4, #250]	@ 0xfa
    CanTx_SigSet_0x598_TBOX_DateTimeDay(GetTBOX_1Value(TBOX_DateTimeDay));
 8002b5e:	2003      	movs	r0, #3
 8002b60:	f003 fc50 	bl	8006404 <GetTBOX_1Value>
 8002b64:	f894 30fb 	ldrb.w	r3, [r4, #251]	@ 0xfb
 8002b68:	f360 0304 	bfi	r3, r0, #0, #5
 8002b6c:	f884 30fb 	strb.w	r3, [r4, #251]	@ 0xfb
    CanTx_SigSet_0x598_TBOX_DateTimeMonth(GetTBOX_1Value(TBOX_DateTimeMonth));
 8002b70:	2004      	movs	r0, #4
 8002b72:	f003 fc47 	bl	8006404 <GetTBOX_1Value>
 8002b76:	f894 30fc 	ldrb.w	r3, [r4, #252]	@ 0xfc
 8002b7a:	f360 0303 	bfi	r3, r0, #0, #4
 8002b7e:	f884 30fc 	strb.w	r3, [r4, #252]	@ 0xfc
    CanTx_SigSet_0x598_TBOX_DateTimeYear(GetTBOX_1Value(TBOX_DateTimeYear));
 8002b82:	2005      	movs	r0, #5
 8002b84:	f003 fc3e 	bl	8006404 <GetTBOX_1Value>
 8002b88:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 8002b8c:	f360 0306 	bfi	r3, r0, #0, #7
 8002b90:	f884 30fd 	strb.w	r3, [r4, #253]	@ 0xfd
    CanTx_SigSet_0x598_TBOX_GPSAntennaShortCircuit(GetTBOX_1Value(TBOX_GPSAntennaShortCircuit));
 8002b94:	2006      	movs	r0, #6
 8002b96:	f003 fc35 	bl	8006404 <GetTBOX_1Value>
 8002b9a:	f894 30fe 	ldrb.w	r3, [r4, #254]	@ 0xfe
 8002b9e:	f360 13c7 	bfi	r3, r0, #7, #1
 8002ba2:	f884 30fe 	strb.w	r3, [r4, #254]	@ 0xfe
    CanTx_SigSet_0x598_TBOX_GPSErr(GetTBOX_1Value(TBOX_GPSErr));
 8002ba6:	2007      	movs	r0, #7
 8002ba8:	f003 fc2c 	bl	8006404 <GetTBOX_1Value>
 8002bac:	f894 30fe 	ldrb.w	r3, [r4, #254]	@ 0xfe
 8002bb0:	f360 1386 	bfi	r3, r0, #6, #1
 8002bb4:	f884 30fe 	strb.w	r3, [r4, #254]	@ 0xfe
    CanTx_SigSet_0x598_TBOX_SIMErr(GetTBOX_1Value(TBOX_SIMErr));
 8002bb8:	2008      	movs	r0, #8
 8002bba:	f003 fc23 	bl	8006404 <GetTBOX_1Value>
 8002bbe:	f894 30fe 	ldrb.w	r3, [r4, #254]	@ 0xfe
 8002bc2:	f360 1345 	bfi	r3, r0, #5, #1
 8002bc6:	f884 30fe 	strb.w	r3, [r4, #254]	@ 0xfe
    CanTx_SigSet_0x598_TBOX_GSMErr(GetTBOX_1Value(TBOX_GSMErr));
 8002bca:	2009      	movs	r0, #9
 8002bcc:	f003 fc1a 	bl	8006404 <GetTBOX_1Value>
 8002bd0:	f894 30fe 	ldrb.w	r3, [r4, #254]	@ 0xfe
 8002bd4:	f360 1304 	bfi	r3, r0, #4, #1
 8002bd8:	f884 30fe 	strb.w	r3, [r4, #254]	@ 0xfe
    CanTx_SigSet_0x598_TBOX_BatteryUseUp(GetTBOX_1Value(TBOX_BatteryUseUp));
 8002bdc:	200a      	movs	r0, #10
 8002bde:	f003 fc11 	bl	8006404 <GetTBOX_1Value>
 8002be2:	f894 30fe 	ldrb.w	r3, [r4, #254]	@ 0xfe
 8002be6:	f360 03c3 	bfi	r3, r0, #3, #1
 8002bea:	f884 30fe 	strb.w	r3, [r4, #254]	@ 0xfe
    CanTx_SigSet_0x598_TBOX_PowerOverSuply(GetTBOX_1Value(TBOX_PowerOverSuply));
 8002bee:	200b      	movs	r0, #11
 8002bf0:	f003 fc08 	bl	8006404 <GetTBOX_1Value>
 8002bf4:	f894 30fe 	ldrb.w	r3, [r4, #254]	@ 0xfe
 8002bf8:	f360 0382 	bfi	r3, r0, #2, #1
 8002bfc:	f884 30fe 	strb.w	r3, [r4, #254]	@ 0xfe
    CanTx_SigSet_0x598_TBOX_BatteryErr(GetTBOX_1Value(TBOX_BatteryErr));
 8002c00:	200c      	movs	r0, #12
 8002c02:	f003 fbff 	bl	8006404 <GetTBOX_1Value>
 8002c06:	f894 30fe 	ldrb.w	r3, [r4, #254]	@ 0xfe
 8002c0a:	f360 0341 	bfi	r3, r0, #1, #1
 8002c0e:	f884 30fe 	strb.w	r3, [r4, #254]	@ 0xfe
    CanTx_SigSet_0x598_TBOX_CANErr(GetTBOX_1Value(TBOX_CANErr));
 8002c12:	200d      	movs	r0, #13
 8002c14:	f003 fbf6 	bl	8006404 <GetTBOX_1Value>
 8002c18:	f894 30ff 	ldrb.w	r3, [r4, #255]	@ 0xff
 8002c1c:	f360 03c3 	bfi	r3, r0, #3, #1
 8002c20:	f884 30ff 	strb.w	r3, [r4, #255]	@ 0xff
    CanTx_SigSet_0x598_TBOX_TempretureHigh(GetTBOX_1Value(TBOX_TempretureHigh));
 8002c24:	200e      	movs	r0, #14
 8002c26:	f003 fbed 	bl	8006404 <GetTBOX_1Value>
 8002c2a:	f894 30ff 	ldrb.w	r3, [r4, #255]	@ 0xff
 8002c2e:	f360 0382 	bfi	r3, r0, #2, #1
 8002c32:	f884 30ff 	strb.w	r3, [r4, #255]	@ 0xff
    CanTx_SigSet_0x598_TBOX_ExternalMemoryErr(GetTBOX_1Value(TBOX_ExternalMemoryErr));
 8002c36:	200f      	movs	r0, #15
 8002c38:	f003 fbe4 	bl	8006404 <GetTBOX_1Value>
 8002c3c:	f894 30ff 	ldrb.w	r3, [r4, #255]	@ 0xff
 8002c40:	f360 0341 	bfi	r3, r0, #1, #1
 8002c44:	f884 30ff 	strb.w	r3, [r4, #255]	@ 0xff
    CanTx_SigSet_0x598_TBOX_GPSAntennaTurnOff(GetTBOX_1Value(TBOX_GPSAntennaTurnOff));
 8002c48:	2010      	movs	r0, #16
 8002c4a:	f003 fbdb 	bl	8006404 <GetTBOX_1Value>
 8002c4e:	f894 30ff 	ldrb.w	r3, [r4, #255]	@ 0xff
 8002c52:	f360 0300 	bfi	r3, r0, #0, #1
 8002c56:	f884 30ff 	strb.w	r3, [r4, #255]	@ 0xff

    CanTx_SigSet_0x599_TBOX_CommSignalVail(GetTBOX_2Value(TBOX_CommSignalVail));
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f003 fbdc 	bl	8006418 <GetTBOX_2Value>
 8002c60:	f884 0100 	strb.w	r0, [r4, #256]	@ 0x100
    CanTx_SigSet_0x599_TBOX_EcallErr(GetTBOX_2Value(TBOX_EcallErr));
 8002c64:	2001      	movs	r0, #1
 8002c66:	f003 fbd7 	bl	8006418 <GetTBOX_2Value>
 8002c6a:	f894 3107 	ldrb.w	r3, [r4, #263]	@ 0x107
 8002c6e:	f360 03c3 	bfi	r3, r0, #3, #1
 8002c72:	f884 3107 	strb.w	r3, [r4, #263]	@ 0x107
    CanTx_SigSet_0x599_TBOX_EcallStatus(GetTBOX_2Value(TBOX_EcallStatus));
 8002c76:	2002      	movs	r0, #2
 8002c78:	f003 fbce 	bl	8006418 <GetTBOX_2Value>
 8002c7c:	f894 3107 	ldrb.w	r3, [r4, #263]	@ 0x107
 8002c80:	f360 0382 	bfi	r3, r0, #2, #1
 8002c84:	f884 3107 	strb.w	r3, [r4, #263]	@ 0x107

    CanTx_SigSet_0x150_EMS_2_EngineSpeed(GetGW_PC_1Value(EMS_2_EngineSpeed));
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f003 fbcf 	bl	800642c <GetGW_PC_1Value>
 8002c8e:	f884 0109 	strb.w	r0, [r4, #265]	@ 0x109
 8002c92:	2000      	movs	r0, #0
 8002c94:	f003 fbca 	bl	800642c <GetGW_PC_1Value>
 8002c98:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002c9c:	f884 0108 	strb.w	r0, [r4, #264]	@ 0x108
    CanTx_SigSet_0x150_EMS_3_SS_SetSts(GetGW_PC_1Value(EMS_3_SS_SetSts));
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	f003 fbc3 	bl	800642c <GetGW_PC_1Value>
 8002ca6:	f894 310a 	ldrb.w	r3, [r4, #266]	@ 0x10a
 8002caa:	f360 13c7 	bfi	r3, r0, #7, #1
 8002cae:	f884 310a 	strb.w	r3, [r4, #266]	@ 0x10a
    CanTx_SigSet_0x150_TCU_1_TcuFaultLamp(GetGW_PC_1Value(TCU_1_TcuFaultLamp));
 8002cb2:	2002      	movs	r0, #2
 8002cb4:	f003 fbba 	bl	800642c <GetGW_PC_1Value>
 8002cb8:	f894 310a 	ldrb.w	r3, [r4, #266]	@ 0x10a
 8002cbc:	f360 1386 	bfi	r3, r0, #6, #1
 8002cc0:	f884 310a 	strb.w	r3, [r4, #266]	@ 0x10a
    CanTx_SigSet_0x150_EMS_3_SS_Fault_Lamp(GetGW_PC_1Value(EMS_3_SS_Fault_Lamp));
 8002cc4:	2003      	movs	r0, #3
 8002cc6:	f003 fbb1 	bl	800642c <GetGW_PC_1Value>
 8002cca:	f894 310a 	ldrb.w	r3, [r4, #266]	@ 0x10a
 8002cce:	f360 1345 	bfi	r3, r0, #5, #1
 8002cd2:	f884 310a 	strb.w	r3, [r4, #266]	@ 0x10a
    CanTx_SigSet_0x150_EMS_3_SS_Active_Lamp(GetGW_PC_1Value(EMS_3_SS_Active_Lamp));
 8002cd6:	2004      	movs	r0, #4
 8002cd8:	f003 fba8 	bl	800642c <GetGW_PC_1Value>
 8002cdc:	f894 310a 	ldrb.w	r3, [r4, #266]	@ 0x10a
 8002ce0:	f360 1304 	bfi	r3, r0, #4, #1
 8002ce4:	f884 310a 	strb.w	r3, [r4, #266]	@ 0x10a
    CanTx_SigSet_0x150_EMS_3_SS_Screen_tip(GetGW_PC_1Value(EMS_3_SS_Screen_tip));
 8002ce8:	2005      	movs	r0, #5
 8002cea:	f003 fb9f 	bl	800642c <GetGW_PC_1Value>
 8002cee:	f894 310a 	ldrb.w	r3, [r4, #266]	@ 0x10a
 8002cf2:	f360 03c3 	bfi	r3, r0, #3, #1
 8002cf6:	f884 310a 	strb.w	r3, [r4, #266]	@ 0x10a
    CanTx_SigSet_0x150_EMS_3_EngineReleaseSig(GetGW_PC_1Value(EMS_3_EngineReleaseSig));
 8002cfa:	2006      	movs	r0, #6
 8002cfc:	f003 fb96 	bl	800642c <GetGW_PC_1Value>
 8002d00:	f894 310a 	ldrb.w	r3, [r4, #266]	@ 0x10a
 8002d04:	f360 0342 	bfi	r3, r0, #1, #2
 8002d08:	f884 310a 	strb.w	r3, [r4, #266]	@ 0x10a
    CanTx_SigSet_0x150_EMS_2_EngineSpeedValid(GetGW_PC_1Value(EMS_2_EngineSpeedValid));
 8002d0c:	2007      	movs	r0, #7
 8002d0e:	f003 fb8d 	bl	800642c <GetGW_PC_1Value>
 8002d12:	f894 310a 	ldrb.w	r3, [r4, #266]	@ 0x10a
 8002d16:	f360 0300 	bfi	r3, r0, #0, #1
 8002d1a:	f884 310a 	strb.w	r3, [r4, #266]	@ 0x10a
    CanTx_SigSet_0x150_TCU_1_ActualGearValid(GetGW_PC_1Value(TCU_1_ActualGearValid));
 8002d1e:	2008      	movs	r0, #8
 8002d20:	f003 fb84 	bl	800642c <GetGW_PC_1Value>
 8002d24:	f894 310b 	ldrb.w	r3, [r4, #267]	@ 0x10b
 8002d28:	f360 13c7 	bfi	r3, r0, #7, #1
 8002d2c:	f884 310b 	strb.w	r3, [r4, #267]	@ 0x10b
    CanTx_SigSet_0x150_TCU_1_TransOilWrnLmpReq(GetGW_PC_1Value(TCU_1_TransOilWrnLmpReq));
 8002d30:	2009      	movs	r0, #9
 8002d32:	f003 fb7b 	bl	800642c <GetGW_PC_1Value>
 8002d36:	f894 310b 	ldrb.w	r3, [r4, #267]	@ 0x10b
 8002d3a:	f360 1386 	bfi	r3, r0, #6, #1
 8002d3e:	f884 310b 	strb.w	r3, [r4, #267]	@ 0x10b
    CanTx_SigSet_0x150_TCU_3_Drivemode(GetGW_PC_1Value(TCU_3_Drivemode));
 8002d42:	200a      	movs	r0, #10
 8002d44:	f003 fb72 	bl	800642c <GetGW_PC_1Value>
 8002d48:	f894 310b 	ldrb.w	r3, [r4, #267]	@ 0x10b
 8002d4c:	f360 0305 	bfi	r3, r0, #0, #6
 8002d50:	f884 310b 	strb.w	r3, [r4, #267]	@ 0x10b
    CanTx_SigSet_0x150_TCU_1_ActualGear(GetGW_PC_1Value(TCU_1_ActualGear));
 8002d54:	200b      	movs	r0, #11
 8002d56:	f003 fb69 	bl	800642c <GetGW_PC_1Value>
 8002d5a:	f894 310c 	ldrb.w	r3, [r4, #268]	@ 0x10c
 8002d5e:	f360 1307 	bfi	r3, r0, #4, #4
 8002d62:	f884 310c 	strb.w	r3, [r4, #268]	@ 0x10c
    CanTx_SigSet_0x150_TCU_1_ShiftRecommendation(GetGW_PC_1Value(TCU_1_ShiftRecommendation));
 8002d66:	200c      	movs	r0, #12
 8002d68:	f003 fb60 	bl	800642c <GetGW_PC_1Value>
 8002d6c:	f894 310c 	ldrb.w	r3, [r4, #268]	@ 0x10c
 8002d70:	f360 0383 	bfi	r3, r0, #2, #2
 8002d74:	f884 310c 	strb.w	r3, [r4, #268]	@ 0x10c
    CanTx_SigSet_0x150_TCU_1_GearShiftPositionValid(GetGW_PC_1Value(TCU_1_GearShiftPositionValid));
 8002d78:	200d      	movs	r0, #13
 8002d7a:	f003 fb57 	bl	800642c <GetGW_PC_1Value>
 8002d7e:	f894 310c 	ldrb.w	r3, [r4, #268]	@ 0x10c
 8002d82:	f360 0300 	bfi	r3, r0, #0, #1
 8002d86:	f884 310c 	strb.w	r3, [r4, #268]	@ 0x10c
    CanTx_SigSet_0x150_TCU_1_GearShiftPosition(GetGW_PC_1Value(TCU_1_GearShiftPosition));
 8002d8a:	200e      	movs	r0, #14
 8002d8c:	f003 fb4e 	bl	800642c <GetGW_PC_1Value>
 8002d90:	f894 310d 	ldrb.w	r3, [r4, #269]	@ 0x10d
 8002d94:	f360 1307 	bfi	r3, r0, #4, #4
 8002d98:	f884 310d 	strb.w	r3, [r4, #269]	@ 0x10d
    CanTx_SigSet_0x150_TCU_1_IcInformaition(GetGW_PC_1Value(TCU_1_IcInformaition));
 8002d9c:	200f      	movs	r0, #15
 8002d9e:	f003 fb45 	bl	800642c <GetGW_PC_1Value>
 8002da2:	f894 310d 	ldrb.w	r3, [r4, #269]	@ 0x10d
 8002da6:	f360 0303 	bfi	r3, r0, #0, #4
 8002daa:	f884 310d 	strb.w	r3, [r4, #269]	@ 0x10d
    CanTx_SigSet_0x150_EMS_3_EngineStatus(GetGW_PC_1Value(EMS_3_EngineStatus));
 8002dae:	2010      	movs	r0, #16
 8002db0:	f003 fb3c 	bl	800642c <GetGW_PC_1Value>
 8002db4:	f894 310f 	ldrb.w	r3, [r4, #271]	@ 0x10f
 8002db8:	f360 1305 	bfi	r3, r0, #4, #2
 8002dbc:	f884 310f 	strb.w	r3, [r4, #271]	@ 0x10f
    CanTx_SigSet_0x150_TCU_3_Timeout_Flag(GetGW_PC_1Value(TCU_3_Timeout_Flag));
 8002dc0:	2011      	movs	r0, #17
 8002dc2:	f003 fb33 	bl	800642c <GetGW_PC_1Value>
 8002dc6:	f894 310f 	ldrb.w	r3, [r4, #271]	@ 0x10f
 8002dca:	f360 03c3 	bfi	r3, r0, #3, #1
 8002dce:	f884 310f 	strb.w	r3, [r4, #271]	@ 0x10f
    CanTx_SigSet_0x150_TCU_1_Timeout_Flag(GetGW_PC_1Value(TCU_1_Timeout_Flag));
 8002dd2:	2012      	movs	r0, #18
 8002dd4:	f003 fb2a 	bl	800642c <GetGW_PC_1Value>
 8002dd8:	f894 310f 	ldrb.w	r3, [r4, #271]	@ 0x10f
 8002ddc:	f360 0382 	bfi	r3, r0, #2, #1
 8002de0:	f884 310f 	strb.w	r3, [r4, #271]	@ 0x10f
    CanTx_SigSet_0x150_EMS_3_Timeout_Flag(GetGW_PC_1Value(EMS_3_Timeout_Flag));
 8002de4:	2013      	movs	r0, #19
 8002de6:	f003 fb21 	bl	800642c <GetGW_PC_1Value>
 8002dea:	f894 310f 	ldrb.w	r3, [r4, #271]	@ 0x10f
 8002dee:	f360 0341 	bfi	r3, r0, #1, #1
 8002df2:	f884 310f 	strb.w	r3, [r4, #271]	@ 0x10f
    CanTx_SigSet_0x150_EMS_2_Timeout_Flag(GetGW_PC_1Value(EMS_2_Timeout_Flag));
 8002df6:	2014      	movs	r0, #20
 8002df8:	f003 fb18 	bl	800642c <GetGW_PC_1Value>
 8002dfc:	f894 310f 	ldrb.w	r3, [r4, #271]	@ 0x10f
 8002e00:	f360 0300 	bfi	r3, r0, #0, #1
 8002e04:	f884 310f 	strb.w	r3, [r4, #271]	@ 0x10f

    CanTx_SigSet_0x155_EMS_4_EngineCoolantTemp(GetGW_PC_6Value(EMS_4_EngineCoolantTemp));
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f003 fb19 	bl	8006440 <GetGW_PC_6Value>
 8002e0e:	f884 0110 	strb.w	r0, [r4, #272]	@ 0x110
    CanTx_SigSet_0x155_EMS_4_FuelConsumption(GetGW_PC_6Value(EMS_4_FuelConsumption));
 8002e12:	2001      	movs	r0, #1
 8002e14:	f003 fb14 	bl	8006440 <GetGW_PC_6Value>
 8002e18:	f884 0111 	strb.w	r0, [r4, #273]	@ 0x111
    CanTx_SigSet_0x155_EMS_4_CruiseActiveStatus(GetGW_PC_6Value(EMS_4_CruiseActiveStatus));
 8002e1c:	2002      	movs	r0, #2
 8002e1e:	f003 fb0f 	bl	8006440 <GetGW_PC_6Value>
 8002e22:	f894 3112 	ldrb.w	r3, [r4, #274]	@ 0x112
 8002e26:	f360 13c7 	bfi	r3, r0, #7, #1
 8002e2a:	f884 3112 	strb.w	r3, [r4, #274]	@ 0x112
    CanTx_SigSet_0x155_EMS_4_EngineCoolantTempValid(GetGW_PC_6Value(EMS_4_EngineCoolantTempValid));
 8002e2e:	2003      	movs	r0, #3
 8002e30:	f003 fb06 	bl	8006440 <GetGW_PC_6Value>
 8002e34:	f894 3112 	ldrb.w	r3, [r4, #274]	@ 0x112
 8002e38:	f360 1386 	bfi	r3, r0, #6, #1
 8002e3c:	f884 3112 	strb.w	r3, [r4, #274]	@ 0x112
    CanTx_SigSet_0x155_EMS_4_CruiseControlStatus(GetGW_PC_6Value(EMS_4_CruiseControlStatus));
 8002e40:	2004      	movs	r0, #4
 8002e42:	f003 fafd 	bl	8006440 <GetGW_PC_6Value>
 8002e46:	f894 3112 	ldrb.w	r3, [r4, #274]	@ 0x112
 8002e4a:	f360 0385 	bfi	r3, r0, #2, #4
 8002e4e:	f884 3112 	strb.w	r3, [r4, #274]	@ 0x112
    CanTx_SigSet_0x155_EMS_4_MIL(GetGW_PC_6Value(EMS_4_MIL));
 8002e52:	2005      	movs	r0, #5
 8002e54:	f003 faf4 	bl	8006440 <GetGW_PC_6Value>
 8002e58:	f894 3112 	ldrb.w	r3, [r4, #274]	@ 0x112
 8002e5c:	f360 0341 	bfi	r3, r0, #1, #1
 8002e60:	f884 3112 	strb.w	r3, [r4, #274]	@ 0x112
    CanTx_SigSet_0x155_EMS_4_SVS(GetGW_PC_6Value(EMS_4_SVS));
 8002e64:	2006      	movs	r0, #6
 8002e66:	f003 faeb 	bl	8006440 <GetGW_PC_6Value>
 8002e6a:	f894 3112 	ldrb.w	r3, [r4, #274]	@ 0x112
 8002e6e:	f360 0300 	bfi	r3, r0, #0, #1
 8002e72:	f884 3112 	strb.w	r3, [r4, #274]	@ 0x112
    CanTx_SigSet_0x155_TCU_3_TargetGearValid(GetGW_PC_6Value(TCU_3_TargetGearValid));
 8002e76:	2007      	movs	r0, #7
 8002e78:	f003 fae2 	bl	8006440 <GetGW_PC_6Value>
 8002e7c:	f894 3113 	ldrb.w	r3, [r4, #275]	@ 0x113
 8002e80:	f360 1386 	bfi	r3, r0, #6, #1
 8002e84:	f884 3113 	strb.w	r3, [r4, #275]	@ 0x113
    CanTx_SigSet_0x155_EMS_4_CruiseMainLamp(GetGW_PC_6Value(EMS_4_CruiseMainLamp));
 8002e88:	2008      	movs	r0, #8
 8002e8a:	f003 fad9 	bl	8006440 <GetGW_PC_6Value>
 8002e8e:	f894 3113 	ldrb.w	r3, [r4, #275]	@ 0x113
 8002e92:	f360 1345 	bfi	r3, r0, #5, #1
 8002e96:	f884 3113 	strb.w	r3, [r4, #275]	@ 0x113
    CanTx_SigSet_0x155_EMS_4_CruiseTargetSpeed(GetGW_PC_6Value(EMS_4_CruiseTargetSpeed));
 8002e9a:	2009      	movs	r0, #9
 8002e9c:	f003 fad0 	bl	8006440 <GetGW_PC_6Value>
 8002ea0:	f884 0114 	strb.w	r0, [r4, #276]	@ 0x114
 8002ea4:	2009      	movs	r0, #9
 8002ea6:	f003 facb 	bl	8006440 <GetGW_PC_6Value>
 8002eaa:	f3c0 2004 	ubfx	r0, r0, #8, #5
 8002eae:	f894 3113 	ldrb.w	r3, [r4, #275]	@ 0x113
 8002eb2:	f360 0304 	bfi	r3, r0, #0, #5
 8002eb6:	f884 3113 	strb.w	r3, [r4, #275]	@ 0x113
    CanTx_SigSet_0x155_TCU_3_TargetGear(GetGW_PC_6Value(TCU_3_TargetGear));
 8002eba:	200a      	movs	r0, #10
 8002ebc:	f003 fac0 	bl	8006440 <GetGW_PC_6Value>
 8002ec0:	f894 3115 	ldrb.w	r3, [r4, #277]	@ 0x115
 8002ec4:	f360 1307 	bfi	r3, r0, #4, #4
 8002ec8:	f884 3115 	strb.w	r3, [r4, #277]	@ 0x115
    CanTx_SigSet_0x155_TCU_3_DrivemodeOprationNotice(GetGW_PC_6Value(TCU_3_DrivemodeOprationNotice));
 8002ecc:	200b      	movs	r0, #11
 8002ece:	f003 fab7 	bl	8006440 <GetGW_PC_6Value>
 8002ed2:	f894 3115 	ldrb.w	r3, [r4, #277]	@ 0x115
 8002ed6:	f360 0303 	bfi	r3, r0, #0, #4
 8002eda:	f884 3115 	strb.w	r3, [r4, #277]	@ 0x115
    CanTx_SigSet_0x155_EMS_6_OilPressure(GetGW_PC_6Value(EMS_6_OilPressure));
 8002ede:	200c      	movs	r0, #12
 8002ee0:	f003 faae 	bl	8006440 <GetGW_PC_6Value>
 8002ee4:	f884 0116 	strb.w	r0, [r4, #278]	@ 0x116
    CanTx_SigSet_0x155_EMS_6_OilPressureLamp(GetGW_PC_6Value(EMS_6_OilPressureLamp));
 8002ee8:	200d      	movs	r0, #13
 8002eea:	f003 faa9 	bl	8006440 <GetGW_PC_6Value>
 8002eee:	f894 3117 	ldrb.w	r3, [r4, #279]	@ 0x117
 8002ef2:	f360 13c7 	bfi	r3, r0, #7, #1
 8002ef6:	f884 3117 	strb.w	r3, [r4, #279]	@ 0x117
    CanTx_SigSet_0x155_EMS_6_GeneratorFaultLamp(GetGW_PC_6Value(EMS_6_GeneratorFaultLamp));
 8002efa:	200e      	movs	r0, #14
 8002efc:	f003 faa0 	bl	8006440 <GetGW_PC_6Value>
 8002f00:	f894 3117 	ldrb.w	r3, [r4, #279]	@ 0x117
 8002f04:	f360 1386 	bfi	r3, r0, #6, #1
 8002f08:	f884 3117 	strb.w	r3, [r4, #279]	@ 0x117
    CanTx_SigSet_0x155_EMS_6_GPFState(GetGW_PC_6Value(EMS_6_GPFState));
 8002f0c:	200f      	movs	r0, #15
 8002f0e:	f003 fa97 	bl	8006440 <GetGW_PC_6Value>
 8002f12:	f894 3117 	ldrb.w	r3, [r4, #279]	@ 0x117
 8002f16:	f360 03c5 	bfi	r3, r0, #3, #3
 8002f1a:	f884 3117 	strb.w	r3, [r4, #279]	@ 0x117
    CanTx_SigSet_0x155_TCU_3_Timeout_Flag1(GetGW_PC_6Value(TCU_3_Timeout_Flag1));
 8002f1e:	2010      	movs	r0, #16
 8002f20:	f003 fa8e 	bl	8006440 <GetGW_PC_6Value>
 8002f24:	f894 3117 	ldrb.w	r3, [r4, #279]	@ 0x117
 8002f28:	f360 0382 	bfi	r3, r0, #2, #1
 8002f2c:	f884 3117 	strb.w	r3, [r4, #279]	@ 0x117
    CanTx_SigSet_0x155_EMS_6_Timeout_Flag(GetGW_PC_6Value(EMS_6_Timeout_Flag));
 8002f30:	2011      	movs	r0, #17
 8002f32:	f003 fa85 	bl	8006440 <GetGW_PC_6Value>
 8002f36:	f894 3117 	ldrb.w	r3, [r4, #279]	@ 0x117
 8002f3a:	f360 0341 	bfi	r3, r0, #1, #1
 8002f3e:	f884 3117 	strb.w	r3, [r4, #279]	@ 0x117
    CanTx_SigSet_0x155_EMS_4_Timeout_Flag(GetGW_PC_6Value(EMS_4_Timeout_Flag));
 8002f42:	2012      	movs	r0, #18
 8002f44:	f003 fa7c 	bl	8006440 <GetGW_PC_6Value>
 8002f48:	f894 3117 	ldrb.w	r3, [r4, #279]	@ 0x117
 8002f4c:	f360 0300 	bfi	r3, r0, #0, #1
 8002f50:	f884 3117 	strb.w	r3, [r4, #279]	@ 0x117

    CanTx_SigSet_0x211_ESP_LongitAccel(GetESP_2Value(ESP_LongitAccel));
 8002f54:	2000      	movs	r0, #0
 8002f56:	f003 fa7d 	bl	8006454 <GetESP_2Value>
 8002f5a:	f884 0119 	strb.w	r0, [r4, #281]	@ 0x119
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f003 fa78 	bl	8006454 <GetESP_2Value>
 8002f64:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002f68:	f884 0118 	strb.w	r0, [r4, #280]	@ 0x118
    CanTx_SigSet_0x211_ESP_LateralAccel(GetESP_2Value(ESP_LateralAccel));
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	f003 fa71 	bl	8006454 <GetESP_2Value>
 8002f72:	f884 011b 	strb.w	r0, [r4, #283]	@ 0x11b
 8002f76:	2001      	movs	r0, #1
 8002f78:	f003 fa6c 	bl	8006454 <GetESP_2Value>
 8002f7c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002f80:	f884 011a 	strb.w	r0, [r4, #282]	@ 0x11a
    CanTx_SigSet_0x211_ESP_YawRate(GetESP_2Value(ESP_YawRate));
 8002f84:	2002      	movs	r0, #2
 8002f86:	f003 fa65 	bl	8006454 <GetESP_2Value>
 8002f8a:	f884 011d 	strb.w	r0, [r4, #285]	@ 0x11d
 8002f8e:	2002      	movs	r0, #2
 8002f90:	f003 fa60 	bl	8006454 <GetESP_2Value>
 8002f94:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002f98:	f884 011c 	strb.w	r0, [r4, #284]	@ 0x11c
    CanTx_SigSet_0x211_ESP_YawRateSensorValid(GetESP_2Value(ESP_YawRateSensorValid));
 8002f9c:	2003      	movs	r0, #3
 8002f9e:	f003 fa59 	bl	8006454 <GetESP_2Value>
 8002fa2:	f894 311e 	ldrb.w	r3, [r4, #286]	@ 0x11e
 8002fa6:	f360 1386 	bfi	r3, r0, #6, #1
 8002faa:	f884 311e 	strb.w	r3, [r4, #286]	@ 0x11e
    CanTx_SigSet_0x211_ESP_LateralSensorValid(GetESP_2Value(ESP_LateralSensorValid));
 8002fae:	2004      	movs	r0, #4
 8002fb0:	f003 fa50 	bl	8006454 <GetESP_2Value>
 8002fb4:	f894 311e 	ldrb.w	r3, [r4, #286]	@ 0x11e
 8002fb8:	f360 1345 	bfi	r3, r0, #5, #1
 8002fbc:	f884 311e 	strb.w	r3, [r4, #286]	@ 0x11e
    CanTx_SigSet_0x211_ESP_LongitSensorValid(GetESP_2Value(ESP_LongitSensorValid));
 8002fc0:	2005      	movs	r0, #5
 8002fc2:	f003 fa47 	bl	8006454 <GetESP_2Value>
 8002fc6:	f894 311e 	ldrb.w	r3, [r4, #286]	@ 0x11e
 8002fca:	f360 1304 	bfi	r3, r0, #4, #1
 8002fce:	f884 311e 	strb.w	r3, [r4, #286]	@ 0x11e

    CanTx_SigSet_0x311_BCM_ConsoleBtn1TriggerSts(GetBCM_3Value(BCM_ConsoleBtn1TriggerSts));
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f003 fa48 	bl	8006468 <GetBCM_3Value>
 8002fd8:	f894 3121 	ldrb.w	r3, [r4, #289]	@ 0x121
 8002fdc:	f360 1386 	bfi	r3, r0, #6, #1
 8002fe0:	f884 3121 	strb.w	r3, [r4, #289]	@ 0x121
    CanTx_SigSet_0x311_BCM_3_RollingCounter(GetBCM_3Value(BCM_3_RollingCounter));
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f003 fa3f 	bl	8006468 <GetBCM_3Value>
 8002fea:	f894 3126 	ldrb.w	r3, [r4, #294]	@ 0x126
 8002fee:	f360 0303 	bfi	r3, r0, #0, #4
 8002ff2:	f884 3126 	strb.w	r3, [r4, #294]	@ 0x126
    CanTx_SigSet_0x311_BCM_3_Checksum(GetBCM_3Value(BCM_3_Checksum));
 8002ff6:	2002      	movs	r0, #2
 8002ff8:	f003 fa36 	bl	8006468 <GetBCM_3Value>
 8002ffc:	f884 0127 	strb.w	r0, [r4, #295]	@ 0x127

    CanTx_SigSet_0x3A7_BCM_1_LeftTurnLightSts(GetGW_BD_9Value(BCM_1_LeftTurnLightSts));
 8003000:	2000      	movs	r0, #0
 8003002:	f003 fa3b 	bl	800647c <GetGW_BD_9Value>
 8003006:	f894 3128 	ldrb.w	r3, [r4, #296]	@ 0x128
 800300a:	f360 1387 	bfi	r3, r0, #6, #2
 800300e:	f884 3128 	strb.w	r3, [r4, #296]	@ 0x128
    CanTx_SigSet_0x3A7_BCM_1_HighBeamSts(GetGW_BD_9Value(BCM_1_HighBeamSts));
 8003012:	2001      	movs	r0, #1
 8003014:	f003 fa32 	bl	800647c <GetGW_BD_9Value>
 8003018:	f894 3128 	ldrb.w	r3, [r4, #296]	@ 0x128
 800301c:	f360 1305 	bfi	r3, r0, #4, #2
 8003020:	f884 3128 	strb.w	r3, [r4, #296]	@ 0x128
    CanTx_SigSet_0x3A7_BCM_1_LowBeamSts(GetGW_BD_9Value(BCM_1_LowBeamSts));
 8003024:	2002      	movs	r0, #2
 8003026:	f003 fa29 	bl	800647c <GetGW_BD_9Value>
 800302a:	f894 3128 	ldrb.w	r3, [r4, #296]	@ 0x128
 800302e:	f360 0383 	bfi	r3, r0, #2, #2
 8003032:	f884 3128 	strb.w	r3, [r4, #296]	@ 0x128
    CanTx_SigSet_0x3A7_BCM_1_PowerMode(GetGW_BD_9Value(BCM_1_PowerMode));
 8003036:	2003      	movs	r0, #3
 8003038:	f003 fa20 	bl	800647c <GetGW_BD_9Value>
 800303c:	f894 3128 	ldrb.w	r3, [r4, #296]	@ 0x128
 8003040:	f360 0301 	bfi	r3, r0, #0, #2
 8003044:	f884 3128 	strb.w	r3, [r4, #296]	@ 0x128
    CanTx_SigSet_0x3A7_BCM_1_RearFogLightSts(GetGW_BD_9Value(BCM_1_RearFogLightSts));
 8003048:	2004      	movs	r0, #4
 800304a:	f003 fa17 	bl	800647c <GetGW_BD_9Value>
 800304e:	f894 3129 	ldrb.w	r3, [r4, #297]	@ 0x129
 8003052:	f360 1387 	bfi	r3, r0, #6, #2
 8003056:	f884 3129 	strb.w	r3, [r4, #297]	@ 0x129
    CanTx_SigSet_0x3A7_BCM_1_EmergencyLightSts(GetGW_BD_9Value(BCM_1_EmergencyLightSts));
 800305a:	2005      	movs	r0, #5
 800305c:	f003 fa0e 	bl	800647c <GetGW_BD_9Value>
 8003060:	f894 3129 	ldrb.w	r3, [r4, #297]	@ 0x129
 8003064:	f360 1305 	bfi	r3, r0, #4, #2
 8003068:	f884 3129 	strb.w	r3, [r4, #297]	@ 0x129
    CanTx_SigSet_0x3A7_BCM_1_PositionLightSts(GetGW_BD_9Value(BCM_1_PositionLightSts));
 800306c:	2006      	movs	r0, #6
 800306e:	f003 fa05 	bl	800647c <GetGW_BD_9Value>
 8003072:	f894 3129 	ldrb.w	r3, [r4, #297]	@ 0x129
 8003076:	f360 0383 	bfi	r3, r0, #2, #2
 800307a:	f884 3129 	strb.w	r3, [r4, #297]	@ 0x129
    CanTx_SigSet_0x3A7_BCM_1_RightTurnLightSts(GetGW_BD_9Value(BCM_1_RightTurnLightSts));
 800307e:	2007      	movs	r0, #7
 8003080:	f003 f9fc 	bl	800647c <GetGW_BD_9Value>
 8003084:	f894 3129 	ldrb.w	r3, [r4, #297]	@ 0x129
 8003088:	f360 0301 	bfi	r3, r0, #0, #2
 800308c:	f884 3129 	strb.w	r3, [r4, #297]	@ 0x129
    CanTx_SigSet_0x3A7_BCM_1_RearLeftDoorSts(GetGW_BD_9Value(BCM_1_RearLeftDoorSts));
 8003090:	2008      	movs	r0, #8
 8003092:	f003 f9f3 	bl	800647c <GetGW_BD_9Value>
 8003096:	f894 312a 	ldrb.w	r3, [r4, #298]	@ 0x12a
 800309a:	f360 13c7 	bfi	r3, r0, #7, #1
 800309e:	f884 312a 	strb.w	r3, [r4, #298]	@ 0x12a
    CanTx_SigSet_0x3A7_BCM_1_FrontRightDoorSts(GetGW_BD_9Value(BCM_1_FrontRightDoorSts));
 80030a2:	2009      	movs	r0, #9
 80030a4:	f003 f9ea 	bl	800647c <GetGW_BD_9Value>
 80030a8:	f894 312a 	ldrb.w	r3, [r4, #298]	@ 0x12a
 80030ac:	f360 1386 	bfi	r3, r0, #6, #1
 80030b0:	f884 312a 	strb.w	r3, [r4, #298]	@ 0x12a
    CanTx_SigSet_0x3A7_BCM_1_FrontLeftDoorSts(GetGW_BD_9Value(BCM_1_FrontLeftDoorSts));
 80030b4:	200a      	movs	r0, #10
 80030b6:	f003 f9e1 	bl	800647c <GetGW_BD_9Value>
 80030ba:	f894 312a 	ldrb.w	r3, [r4, #298]	@ 0x12a
 80030be:	f360 1345 	bfi	r3, r0, #5, #1
 80030c2:	f884 312a 	strb.w	r3, [r4, #298]	@ 0x12a
    CanTx_SigSet_0x3A7_BCM_1_DaytimeRunningLightSts(GetGW_BD_9Value(BCM_1_DaytimeRunningLightSts));
 80030c6:	200b      	movs	r0, #11
 80030c8:	f003 f9d8 	bl	800647c <GetGW_BD_9Value>
 80030cc:	f894 312a 	ldrb.w	r3, [r4, #298]	@ 0x12a
 80030d0:	f360 0383 	bfi	r3, r0, #2, #2
 80030d4:	f884 312a 	strb.w	r3, [r4, #298]	@ 0x12a
    CanTx_SigSet_0x3A7_BCM_1_FrontFogLightSts(GetGW_BD_9Value(BCM_1_FrontFogLightSts));
 80030d8:	200c      	movs	r0, #12
 80030da:	f003 f9cf 	bl	800647c <GetGW_BD_9Value>
 80030de:	f894 312a 	ldrb.w	r3, [r4, #298]	@ 0x12a
 80030e2:	f360 0301 	bfi	r3, r0, #0, #2
 80030e6:	f884 312a 	strb.w	r3, [r4, #298]	@ 0x12a
    CanTx_SigSet_0x3A7_BCM_1_ReverseGearInfo(GetGW_BD_9Value(BCM_1_ReverseGearInfo));
 80030ea:	200d      	movs	r0, #13
 80030ec:	f003 f9c6 	bl	800647c <GetGW_BD_9Value>
 80030f0:	f894 312b 	ldrb.w	r3, [r4, #299]	@ 0x12b
 80030f4:	f360 13c7 	bfi	r3, r0, #7, #1
 80030f8:	f884 312b 	strb.w	r3, [r4, #299]	@ 0x12b
    CanTx_SigSet_0x3A7_BCM_1_ACRearFrostSts(GetGW_BD_9Value(BCM_1_ACRearFrostSts));
 80030fc:	200e      	movs	r0, #14
 80030fe:	f003 f9bd 	bl	800647c <GetGW_BD_9Value>
 8003102:	f894 312b 	ldrb.w	r3, [r4, #299]	@ 0x12b
 8003106:	f360 1386 	bfi	r3, r0, #6, #1
 800310a:	f884 312b 	strb.w	r3, [r4, #299]	@ 0x12b
    CanTx_SigSet_0x3A7_BCM_1_TailGateOpenSts(GetGW_BD_9Value(BCM_1_TailGateOpenSts));
 800310e:	200f      	movs	r0, #15
 8003110:	f003 f9b4 	bl	800647c <GetGW_BD_9Value>
 8003114:	f894 312b 	ldrb.w	r3, [r4, #299]	@ 0x12b
 8003118:	f360 0341 	bfi	r3, r0, #1, #1
 800311c:	f884 312b 	strb.w	r3, [r4, #299]	@ 0x12b
    CanTx_SigSet_0x3A7_BCM_1_RearRightDoorSts(GetGW_BD_9Value(BCM_1_RearRightDoorSts));
 8003120:	2010      	movs	r0, #16
 8003122:	f003 f9ab 	bl	800647c <GetGW_BD_9Value>
 8003126:	f894 312b 	ldrb.w	r3, [r4, #299]	@ 0x12b
 800312a:	f360 0300 	bfi	r3, r0, #0, #1
 800312e:	f884 312b 	strb.w	r3, [r4, #299]	@ 0x12b
    CanTx_SigSet_0x3A7_TCM_1_FlashLightSWStsValid(GetGW_BD_9Value(TCM_1_FlashLightSWStsValid));
 8003132:	2011      	movs	r0, #17
 8003134:	f003 f9a2 	bl	800647c <GetGW_BD_9Value>
 8003138:	f894 312c 	ldrb.w	r3, [r4, #300]	@ 0x12c
 800313c:	f360 13c7 	bfi	r3, r0, #7, #1
 8003140:	f884 312c 	strb.w	r3, [r4, #300]	@ 0x12c
    CanTx_SigSet_0x3A7_TCM_1_FlashLightSWSts(GetGW_BD_9Value(TCM_1_FlashLightSWSts));
 8003144:	2012      	movs	r0, #18
 8003146:	f003 f999 	bl	800647c <GetGW_BD_9Value>
 800314a:	f894 312c 	ldrb.w	r3, [r4, #300]	@ 0x12c
 800314e:	f360 1386 	bfi	r3, r0, #6, #1
 8003152:	f884 312c 	strb.w	r3, [r4, #300]	@ 0x12c
    CanTx_SigSet_0x3A7_TCM_1_HighBeamSWStsValid(GetGW_BD_9Value(TCM_1_HighBeamSWStsValid));
 8003156:	2013      	movs	r0, #19
 8003158:	f003 f990 	bl	800647c <GetGW_BD_9Value>
 800315c:	f894 312c 	ldrb.w	r3, [r4, #300]	@ 0x12c
 8003160:	f360 1345 	bfi	r3, r0, #5, #1
 8003164:	f884 312c 	strb.w	r3, [r4, #300]	@ 0x12c
    CanTx_SigSet_0x3A7_TCM_1_HighBeamSWSts(GetGW_BD_9Value(TCM_1_HighBeamSWSts));
 8003168:	2014      	movs	r0, #20
 800316a:	f003 f987 	bl	800647c <GetGW_BD_9Value>
 800316e:	f894 312c 	ldrb.w	r3, [r4, #300]	@ 0x12c
 8003172:	f360 1304 	bfi	r3, r0, #4, #1
 8003176:	f884 312c 	strb.w	r3, [r4, #300]	@ 0x12c
    CanTx_SigSet_0x3A7_BCM_1_BackMirrorFolderSts(GetGW_BD_9Value(BCM_1_BackMirrorFolderSts));
 800317a:	2015      	movs	r0, #21
 800317c:	f003 f97e 	bl	800647c <GetGW_BD_9Value>
 8003180:	f894 312c 	ldrb.w	r3, [r4, #300]	@ 0x12c
 8003184:	f360 0382 	bfi	r3, r0, #2, #1
 8003188:	f884 312c 	strb.w	r3, [r4, #300]	@ 0x12c
    CanTx_SigSet_0x3A7_BCM_1_HoodSts(GetGW_BD_9Value(BCM_1_HoodSts));
 800318c:	2016      	movs	r0, #22
 800318e:	f003 f975 	bl	800647c <GetGW_BD_9Value>
 8003192:	f894 312c 	ldrb.w	r3, [r4, #300]	@ 0x12c
 8003196:	f360 0300 	bfi	r3, r0, #0, #1
 800319a:	f884 312c 	strb.w	r3, [r4, #300]	@ 0x12c
    CanTx_SigSet_0x3A7_TCM_1_LeftTurnLightSWSts(GetGW_BD_9Value(TCM_1_LeftTurnLightSWSts));
 800319e:	2017      	movs	r0, #23
 80031a0:	f003 f96c 	bl	800647c <GetGW_BD_9Value>
 80031a4:	f894 312f 	ldrb.w	r3, [r4, #303]	@ 0x12f
 80031a8:	f360 1386 	bfi	r3, r0, #6, #1
 80031ac:	f884 312f 	strb.w	r3, [r4, #303]	@ 0x12f
    CanTx_SigSet_0x3A7_TCM_1_LeftTurnLightSWStsValid(GetGW_BD_9Value(TCM_1_LeftTurnLightSWStsValid));
 80031b0:	2018      	movs	r0, #24
 80031b2:	f003 f963 	bl	800647c <GetGW_BD_9Value>
 80031b6:	f894 312f 	ldrb.w	r3, [r4, #303]	@ 0x12f
 80031ba:	f360 1345 	bfi	r3, r0, #5, #1
 80031be:	f884 312f 	strb.w	r3, [r4, #303]	@ 0x12f
    CanTx_SigSet_0x3A7_TCM_1_RightTurnLightSWSts(GetGW_BD_9Value(TCM_1_RightTurnLightSWSts));
 80031c2:	2019      	movs	r0, #25
 80031c4:	f003 f95a 	bl	800647c <GetGW_BD_9Value>
 80031c8:	f894 312f 	ldrb.w	r3, [r4, #303]	@ 0x12f
 80031cc:	f360 1304 	bfi	r3, r0, #4, #1
 80031d0:	f884 312f 	strb.w	r3, [r4, #303]	@ 0x12f
    CanTx_SigSet_0x3A7_TCM_1_RightTurnLightSWStsValid(GetGW_BD_9Value(TCM_1_RightTurnLightSWStsValid));
 80031d4:	201a      	movs	r0, #26
 80031d6:	f003 f951 	bl	800647c <GetGW_BD_9Value>
 80031da:	f894 312f 	ldrb.w	r3, [r4, #303]	@ 0x12f
 80031de:	f360 03c3 	bfi	r3, r0, #3, #1
 80031e2:	f884 312f 	strb.w	r3, [r4, #303]	@ 0x12f
    CanTx_SigSet_0x3A7_TCM_1_Timeout_Flag(GetGW_BD_9Value(TCM_1_Timeout_Flag));
 80031e6:	201b      	movs	r0, #27
 80031e8:	f003 f948 	bl	800647c <GetGW_BD_9Value>
 80031ec:	f894 312f 	ldrb.w	r3, [r4, #303]	@ 0x12f
 80031f0:	f360 0341 	bfi	r3, r0, #1, #1
 80031f4:	f884 312f 	strb.w	r3, [r4, #303]	@ 0x12f
    CanTx_SigSet_0x3A7_BCM_1_Timeout_Flag(GetGW_BD_9Value(BCM_1_Timeout_Flag));
 80031f8:	201c      	movs	r0, #28
 80031fa:	f003 f93f 	bl	800647c <GetGW_BD_9Value>
 80031fe:	f894 312f 	ldrb.w	r3, [r4, #303]	@ 0x12f
 8003202:	f360 0300 	bfi	r3, r0, #0, #1
 8003206:	f884 312f 	strb.w	r3, [r4, #303]	@ 0x12f

    CanTx_SigSet_0x3C7_BCM_2_WindowRunningStatusRR(GetGW_BD_24Value(BCM_2_WindowRunningStatusRR));
 800320a:	2000      	movs	r0, #0
 800320c:	f003 f940 	bl	8006490 <GetGW_BD_24Value>
 8003210:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 8003214:	f360 1387 	bfi	r3, r0, #6, #2
 8003218:	f884 3130 	strb.w	r3, [r4, #304]	@ 0x130
    CanTx_SigSet_0x3C7_BCM_2_WindowRunningStatusRL(GetGW_BD_24Value(BCM_2_WindowRunningStatusRL));
 800321c:	2001      	movs	r0, #1
 800321e:	f003 f937 	bl	8006490 <GetGW_BD_24Value>
 8003222:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 8003226:	f360 1305 	bfi	r3, r0, #4, #2
 800322a:	f884 3130 	strb.w	r3, [r4, #304]	@ 0x130
    CanTx_SigSet_0x3C7_BCM_2_WindowRunningStatusFR(GetGW_BD_24Value(BCM_2_WindowRunningStatusFR));
 800322e:	2002      	movs	r0, #2
 8003230:	f003 f92e 	bl	8006490 <GetGW_BD_24Value>
 8003234:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 8003238:	f360 0383 	bfi	r3, r0, #2, #2
 800323c:	f884 3130 	strb.w	r3, [r4, #304]	@ 0x130
    CanTx_SigSet_0x3C7_BCM_2_WindowRunningStatusFL(GetGW_BD_24Value(BCM_2_WindowRunningStatusFL));
 8003240:	2003      	movs	r0, #3
 8003242:	f003 f925 	bl	8006490 <GetGW_BD_24Value>
 8003246:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 800324a:	f360 0301 	bfi	r3, r0, #0, #2
 800324e:	f884 3130 	strb.w	r3, [r4, #304]	@ 0x130
    CanTx_SigSet_0x3C7_BCM_2_WindowPosFL(GetGW_BD_24Value(BCM_2_WindowPosFL));
 8003252:	2004      	movs	r0, #4
 8003254:	f003 f91c 	bl	8006490 <GetGW_BD_24Value>
 8003258:	f894 3131 	ldrb.w	r3, [r4, #305]	@ 0x131
 800325c:	f360 0306 	bfi	r3, r0, #0, #7
 8003260:	f884 3131 	strb.w	r3, [r4, #305]	@ 0x131
    CanTx_SigSet_0x3C7_BCM_2_WindowPosFR(GetGW_BD_24Value(BCM_2_WindowPosFR));
 8003264:	2005      	movs	r0, #5
 8003266:	f003 f913 	bl	8006490 <GetGW_BD_24Value>
 800326a:	f894 3132 	ldrb.w	r3, [r4, #306]	@ 0x132
 800326e:	f360 0306 	bfi	r3, r0, #0, #7
 8003272:	f884 3132 	strb.w	r3, [r4, #306]	@ 0x132
    CanTx_SigSet_0x3C7_BCM_2_WindowPosRL(GetGW_BD_24Value(BCM_2_WindowPosRL));
 8003276:	2006      	movs	r0, #6
 8003278:	f003 f90a 	bl	8006490 <GetGW_BD_24Value>
 800327c:	f894 3133 	ldrb.w	r3, [r4, #307]	@ 0x133
 8003280:	f360 0306 	bfi	r3, r0, #0, #7
 8003284:	f884 3133 	strb.w	r3, [r4, #307]	@ 0x133
    CanTx_SigSet_0x3C7_BCM_2_WindowPosRR(GetGW_BD_24Value(BCM_2_WindowPosRR));
 8003288:	2007      	movs	r0, #7
 800328a:	f003 f901 	bl	8006490 <GetGW_BD_24Value>
 800328e:	f894 3134 	ldrb.w	r3, [r4, #308]	@ 0x134
 8003292:	f360 0306 	bfi	r3, r0, #0, #7
 8003296:	f884 3134 	strb.w	r3, [r4, #308]	@ 0x134
    CanTx_SigSet_0x3C7_BCM_2_Timeout_Flag(GetGW_BD_24Value(BCM_2_Timeout_Flag));
 800329a:	2008      	movs	r0, #8
 800329c:	f003 f8f8 	bl	8006490 <GetGW_BD_24Value>
 80032a0:	f894 3137 	ldrb.w	r3, [r4, #311]	@ 0x137
 80032a4:	f360 0300 	bfi	r3, r0, #0, #1
 80032a8:	f884 3137 	strb.w	r3, [r4, #311]	@ 0x137

}
 80032ac:	bd10      	pop	{r4, pc}
 80032ae:	bf00      	nop

080032b0 <CanTransmitFunction>:

void CanTransmitFunction(void const *pvParameters)
{
 80032b0:	b508      	push	{r3, lr}
	(void)pvParameters;
   // printf("CanTransmitFunction\r\n");
	for(;;)
	{
      CanGetMsgSignal();
 80032b2:	f7fd ff43 	bl	800113c <CanGetMsgSignal>
      CanCcl_TickCntHnadler();
 80032b6:	f007 fce7 	bl	800ac88 <CanCcl_TickCntHnadler>
		// CanDbc_TxHandler();
		vTaskDelay(pdMS_TO_TICKS(5));
 80032ba:	2005      	movs	r0, #5
 80032bc:	f007 f90a 	bl	800a4d4 <vTaskDelay>
 80032c0:	e7f7      	b.n	80032b2 <CanTransmitFunction+0x2>
	...

080032c4 <volencode_polling>:
	}

}

void volencode_polling(uint8_t key_number)
{
 80032c4:	b538      	push	{r3, r4, r5, lr}
 80032c6:	4604      	mov	r4, r0

	int VolADValueFliter;
	static uint8_t count[KEY_MAX] = {0};
	static uint8_t lastcount[KEY_MAX] = {0};

    VolADValueFliter = ADC_GetResValue(stKeyValue[key_number].channel);
 80032c8:	4b23      	ldr	r3, [pc, #140]	@ (8003358 <volencode_polling+0x94>)
 80032ca:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80032ce:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 80032d2:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80032d6:	f7fd fed7 	bl	8001088 <ADC_GetResValue>

    if((stKeyValue[key_number].AdcValue < VolADValueFliter + VOL_ADVALUE_ERROR) && (stKeyValue[key_number].AdcValue > VolADValueFliter - VOL_ADVALUE_ERROR))
 80032da:	f100 0263 	add.w	r2, r0, #99	@ 0x63
 80032de:	886b      	ldrh	r3, [r5, #2]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	db09      	blt.n	80032f8 <volencode_polling+0x34>
 80032e4:	3863      	subs	r0, #99	@ 0x63
 80032e6:	4283      	cmp	r3, r0
 80032e8:	db06      	blt.n	80032f8 <volencode_polling+0x34>
    {
        stKeyValue[key_number].KeySts = PRESS;
 80032ea:	2201      	movs	r2, #1
 80032ec:	712a      	strb	r2, [r5, #4]
		count[key_number] += 1;
 80032ee:	4a1b      	ldr	r2, [pc, #108]	@ (800335c <volencode_polling+0x98>)
 80032f0:	5d13      	ldrb	r3, [r2, r4]
 80032f2:	3301      	adds	r3, #1
 80032f4:	5513      	strb	r3, [r2, r4]
 80032f6:	e00b      	b.n	8003310 <volencode_polling+0x4c>
    }
    else
    {
        stKeyValue[key_number].KeySts = RELEASE;
 80032f8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80032fc:	4b16      	ldr	r3, [pc, #88]	@ (8003358 <volencode_polling+0x94>)
 80032fe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003302:	2200      	movs	r2, #0
 8003304:	711a      	strb	r2, [r3, #4]
		lastcount[key_number] = count[key_number];
 8003306:	4b15      	ldr	r3, [pc, #84]	@ (800335c <volencode_polling+0x98>)
 8003308:	5d18      	ldrb	r0, [r3, r4]
 800330a:	4915      	ldr	r1, [pc, #84]	@ (8003360 <volencode_polling+0x9c>)
 800330c:	5508      	strb	r0, [r1, r4]
		count[key_number] = 0;
 800330e:	551a      	strb	r2, [r3, r4]
    }

	if((lastcount[key_number] >= 2) && (lastcount[key_number] < 100))
 8003310:	4b13      	ldr	r3, [pc, #76]	@ (8003360 <volencode_polling+0x9c>)
 8003312:	5d1b      	ldrb	r3, [r3, r4]
 8003314:	3b02      	subs	r3, #2
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b61      	cmp	r3, #97	@ 0x61
 800331a:	d80a      	bhi.n	8003332 <volencode_polling+0x6e>
	{
		stKeyValue[key_number].KeySts = SHORT_PRESS;
 800331c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003320:	4b0d      	ldr	r3, [pc, #52]	@ (8003358 <volencode_polling+0x94>)
 8003322:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003326:	2202      	movs	r2, #2
 8003328:	711a      	strb	r2, [r3, #4]
		lastcount[key_number] = 0;
 800332a:	4b0d      	ldr	r3, [pc, #52]	@ (8003360 <volencode_polling+0x9c>)
 800332c:	2200      	movs	r2, #0
 800332e:	551a      	strb	r2, [r3, r4]
	else
	{
		lastcount[key_number] = 0;
	}

}
 8003330:	bd38      	pop	{r3, r4, r5, pc}
	else if(count[key_number] >= 100)
 8003332:	4b0a      	ldr	r3, [pc, #40]	@ (800335c <volencode_polling+0x98>)
 8003334:	5d1b      	ldrb	r3, [r3, r4]
 8003336:	2b63      	cmp	r3, #99	@ 0x63
 8003338:	d90a      	bls.n	8003350 <volencode_polling+0x8c>
		stKeyValue[key_number].KeySts = LONG_PRESS;
 800333a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800333e:	4b06      	ldr	r3, [pc, #24]	@ (8003358 <volencode_polling+0x94>)
 8003340:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003344:	2203      	movs	r2, #3
 8003346:	711a      	strb	r2, [r3, #4]
		lastcount[key_number] = 0;
 8003348:	4b05      	ldr	r3, [pc, #20]	@ (8003360 <volencode_polling+0x9c>)
 800334a:	2200      	movs	r2, #0
 800334c:	551a      	strb	r2, [r3, r4]
 800334e:	e7ef      	b.n	8003330 <volencode_polling+0x6c>
		lastcount[key_number] = 0;
 8003350:	4b03      	ldr	r3, [pc, #12]	@ (8003360 <volencode_polling+0x9c>)
 8003352:	2200      	movs	r2, #0
 8003354:	551a      	strb	r2, [r3, r4]
}
 8003356:	e7eb      	b.n	8003330 <volencode_polling+0x6c>
 8003358:	20000000 	.word	0x20000000
 800335c:	2000855c 	.word	0x2000855c
 8003360:	20008550 	.word	0x20008550

08003364 <ShortPress>:

void ShortPress(uint8_t key)
{
 8003364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003366:	4604      	mov	r4, r0
	key_menu_cnt = GetMenuIndex();
 8003368:	f000 faee 	bl	8003948 <GetMenuIndex>
 800336c:	4d55      	ldr	r5, [pc, #340]	@ (80034c4 <ShortPress+0x160>)
 800336e:	7028      	strb	r0, [r5, #0]
    key_item_cnt  = GetItemIndex();
 8003370:	f000 faf0 	bl	8003954 <GetItemIndex>
 8003374:	4e54      	ldr	r6, [pc, #336]	@ (80034c8 <ShortPress+0x164>)
 8003376:	7030      	strb	r0, [r6, #0]

	uint8_t max_item = GetItemMAXItem(key_menu_cnt);
 8003378:	7828      	ldrb	r0, [r5, #0]
 800337a:	f002 fb03 	bl	8005984 <GetItemMAXItem>
 800337e:	b2c7      	uxtb	r7, r0
	uint16_t max_value = GetItemMAXValue(key_menu_cnt, key_item_cnt);
 8003380:	7831      	ldrb	r1, [r6, #0]
 8003382:	7828      	ldrb	r0, [r5, #0]
 8003384:	f002 fb62 	bl	8005a4c <GetItemMAXValue>
 8003388:	b285      	uxth	r5, r0
	static uint8_t last_key_value_cnt = 0;

	switch(key)
 800338a:	2c08      	cmp	r4, #8
 800338c:	d816      	bhi.n	80033bc <ShortPress+0x58>
 800338e:	e8df f004 	tbb	[pc, r4]
 8003392:	1a05      	.short	0x1a05
 8003394:	58443b2f 	.word	0x58443b2f
 8003398:	6c15      	.short	0x6c15
 800339a:	82          	.byte	0x82
 800339b:	00          	.byte	0x00
	{
		case PREVIOUS:
			if(key_menu_cnt == 0)
 800339c:	4b49      	ldr	r3, [pc, #292]	@ (80034c4 <ShortPress+0x160>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	b96b      	cbnz	r3, 80033be <ShortPress+0x5a>
			{
				key_menu_cnt = MENU_MAX-1;
 80033a2:	4b48      	ldr	r3, [pc, #288]	@ (80034c4 <ShortPress+0x160>)
 80033a4:	2226      	movs	r2, #38	@ 0x26
 80033a6:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				key_menu_cnt--;
			}
      		key_item_cnt = 0;
 80033a8:	2100      	movs	r1, #0
 80033aa:	4b47      	ldr	r3, [pc, #284]	@ (80034c8 <ShortPress+0x164>)
 80033ac:	7019      	strb	r1, [r3, #0]
			key_value_cnt  = GetItemValue(key_menu_cnt, key_item_cnt, 0);
 80033ae:	460a      	mov	r2, r1
 80033b0:	4b44      	ldr	r3, [pc, #272]	@ (80034c4 <ShortPress+0x160>)
 80033b2:	7818      	ldrb	r0, [r3, #0]
 80033b4:	f002 f918 	bl	80055e8 <GetItemValue>
 80033b8:	4b44      	ldr	r3, [pc, #272]	@ (80034cc <ShortPress+0x168>)
 80033ba:	8018      	strh	r0, [r3, #0]
            }
			break;
		default:
			break;
	}
}
 80033bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				key_menu_cnt--;
 80033be:	3b01      	subs	r3, #1
 80033c0:	4a40      	ldr	r2, [pc, #256]	@ (80034c4 <ShortPress+0x160>)
 80033c2:	7013      	strb	r3, [r2, #0]
 80033c4:	e7f0      	b.n	80033a8 <ShortPress+0x44>
			key_menu_cnt++;
 80033c6:	4a3f      	ldr	r2, [pc, #252]	@ (80034c4 <ShortPress+0x160>)
 80033c8:	7813      	ldrb	r3, [r2, #0]
 80033ca:	3301      	adds	r3, #1
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	7013      	strb	r3, [r2, #0]
			if(key_menu_cnt >= MENU_MAX)
 80033d0:	2b26      	cmp	r3, #38	@ 0x26
 80033d2:	d902      	bls.n	80033da <ShortPress+0x76>
				key_menu_cnt = 0;
 80033d4:	4613      	mov	r3, r2
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]
			key_item_cnt = 0;
 80033da:	2100      	movs	r1, #0
 80033dc:	4b3a      	ldr	r3, [pc, #232]	@ (80034c8 <ShortPress+0x164>)
 80033de:	7019      	strb	r1, [r3, #0]
			key_value_cnt  = GetItemValue(key_menu_cnt, key_item_cnt, 0);
 80033e0:	460a      	mov	r2, r1
 80033e2:	4b38      	ldr	r3, [pc, #224]	@ (80034c4 <ShortPress+0x160>)
 80033e4:	7818      	ldrb	r0, [r3, #0]
 80033e6:	f002 f8ff 	bl	80055e8 <GetItemValue>
 80033ea:	4b38      	ldr	r3, [pc, #224]	@ (80034cc <ShortPress+0x168>)
 80033ec:	8018      	strh	r0, [r3, #0]
			break;
 80033ee:	e7e5      	b.n	80033bc <ShortPress+0x58>
			key_menu_cnt = 0;
 80033f0:	2000      	movs	r0, #0
 80033f2:	4b34      	ldr	r3, [pc, #208]	@ (80034c4 <ShortPress+0x160>)
 80033f4:	7018      	strb	r0, [r3, #0]
			key_item_cnt = 0;
 80033f6:	4b34      	ldr	r3, [pc, #208]	@ (80034c8 <ShortPress+0x164>)
 80033f8:	7018      	strb	r0, [r3, #0]
			key_value_cnt  = GetItemValue(key_menu_cnt, key_item_cnt, 0);
 80033fa:	4602      	mov	r2, r0
 80033fc:	4601      	mov	r1, r0
 80033fe:	f002 f8f3 	bl	80055e8 <GetItemValue>
 8003402:	4b32      	ldr	r3, [pc, #200]	@ (80034cc <ShortPress+0x168>)
 8003404:	8018      	strh	r0, [r3, #0]
			break;
 8003406:	e7d9      	b.n	80033bc <ShortPress+0x58>
			Can_Send_Sts = !Can_Send_Sts;
 8003408:	4b31      	ldr	r3, [pc, #196]	@ (80034d0 <ShortPress+0x16c>)
 800340a:	7818      	ldrb	r0, [r3, #0]
 800340c:	fab0 f080 	clz	r0, r0
 8003410:	0940      	lsrs	r0, r0, #5
 8003412:	7018      	strb	r0, [r3, #0]
			Can_SendSts_Control(Can_Send_Sts);
 8003414:	f7fd fe5e 	bl	80010d4 <Can_SendSts_Control>
			break;
 8003418:	e7d0      	b.n	80033bc <ShortPress+0x58>
			if(key_item_cnt == 0U)
 800341a:	4b2b      	ldr	r3, [pc, #172]	@ (80034c8 <ShortPress+0x164>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	b963      	cbnz	r3, 800343a <ShortPress+0xd6>
				key_item_cnt = max_item - 1;
 8003420:	1e78      	subs	r0, r7, #1
 8003422:	4b29      	ldr	r3, [pc, #164]	@ (80034c8 <ShortPress+0x164>)
 8003424:	7018      	strb	r0, [r3, #0]
			key_value_cnt  = GetItemValue(key_menu_cnt, key_item_cnt, 0);
 8003426:	2200      	movs	r2, #0
 8003428:	4b27      	ldr	r3, [pc, #156]	@ (80034c8 <ShortPress+0x164>)
 800342a:	7819      	ldrb	r1, [r3, #0]
 800342c:	4b25      	ldr	r3, [pc, #148]	@ (80034c4 <ShortPress+0x160>)
 800342e:	7818      	ldrb	r0, [r3, #0]
 8003430:	f002 f8da 	bl	80055e8 <GetItemValue>
 8003434:	4b25      	ldr	r3, [pc, #148]	@ (80034cc <ShortPress+0x168>)
 8003436:	8018      	strh	r0, [r3, #0]
			break;
 8003438:	e7c0      	b.n	80033bc <ShortPress+0x58>
				key_item_cnt--;
 800343a:	3b01      	subs	r3, #1
 800343c:	4a22      	ldr	r2, [pc, #136]	@ (80034c8 <ShortPress+0x164>)
 800343e:	7013      	strb	r3, [r2, #0]
 8003440:	e7f1      	b.n	8003426 <ShortPress+0xc2>
			key_item_cnt++;
 8003442:	4a21      	ldr	r2, [pc, #132]	@ (80034c8 <ShortPress+0x164>)
 8003444:	7813      	ldrb	r3, [r2, #0]
 8003446:	3301      	adds	r3, #1
 8003448:	b2db      	uxtb	r3, r3
 800344a:	7013      	strb	r3, [r2, #0]
			if(key_item_cnt >=max_item)
 800344c:	42bb      	cmp	r3, r7
 800344e:	d302      	bcc.n	8003456 <ShortPress+0xf2>
				key_item_cnt = 0;
 8003450:	4613      	mov	r3, r2
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
			key_value_cnt  = GetItemValue(key_menu_cnt, key_item_cnt, 0);
 8003456:	2200      	movs	r2, #0
 8003458:	4b1b      	ldr	r3, [pc, #108]	@ (80034c8 <ShortPress+0x164>)
 800345a:	7819      	ldrb	r1, [r3, #0]
 800345c:	4b19      	ldr	r3, [pc, #100]	@ (80034c4 <ShortPress+0x160>)
 800345e:	7818      	ldrb	r0, [r3, #0]
 8003460:	f002 f8c2 	bl	80055e8 <GetItemValue>
 8003464:	4b19      	ldr	r3, [pc, #100]	@ (80034cc <ShortPress+0x168>)
 8003466:	8018      	strh	r0, [r3, #0]
			break;
 8003468:	e7a8      	b.n	80033bc <ShortPress+0x58>
			if(key_value_cnt <= 0U)
 800346a:	4b18      	ldr	r3, [pc, #96]	@ (80034cc <ShortPress+0x168>)
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	b11b      	cbz	r3, 8003478 <ShortPress+0x114>
				key_value_cnt--;
 8003470:	3b01      	subs	r3, #1
 8003472:	4a16      	ldr	r2, [pc, #88]	@ (80034cc <ShortPress+0x168>)
 8003474:	8013      	strh	r3, [r2, #0]
 8003476:	e7a1      	b.n	80033bc <ShortPress+0x58>
                if (ItemValueLimit(key_menu_cnt, key_item_cnt))
 8003478:	4b13      	ldr	r3, [pc, #76]	@ (80034c8 <ShortPress+0x164>)
 800347a:	7819      	ldrb	r1, [r3, #0]
 800347c:	4b11      	ldr	r3, [pc, #68]	@ (80034c4 <ShortPress+0x160>)
 800347e:	7818      	ldrb	r0, [r3, #0]
 8003480:	f002 fe6c 	bl	800615c <ItemValueLimit>
 8003484:	b118      	cbz	r0, 800348e <ShortPress+0x12a>
                    key_value_cnt = 0;
 8003486:	4b11      	ldr	r3, [pc, #68]	@ (80034cc <ShortPress+0x168>)
 8003488:	2200      	movs	r2, #0
 800348a:	801a      	strh	r2, [r3, #0]
 800348c:	e796      	b.n	80033bc <ShortPress+0x58>
                    key_value_cnt = max_value-1;
 800348e:	1e68      	subs	r0, r5, #1
 8003490:	4b0e      	ldr	r3, [pc, #56]	@ (80034cc <ShortPress+0x168>)
 8003492:	8018      	strh	r0, [r3, #0]
 8003494:	e792      	b.n	80033bc <ShortPress+0x58>
			key_value_cnt++;
 8003496:	4a0d      	ldr	r2, [pc, #52]	@ (80034cc <ShortPress+0x168>)
 8003498:	8813      	ldrh	r3, [r2, #0]
 800349a:	3301      	adds	r3, #1
 800349c:	b29b      	uxth	r3, r3
 800349e:	8013      	strh	r3, [r2, #0]
            if (key_value_cnt >= max_value)
 80034a0:	42ab      	cmp	r3, r5
 80034a2:	d38b      	bcc.n	80033bc <ShortPress+0x58>
                if (ItemValueLimit(key_menu_cnt, key_item_cnt)) 
 80034a4:	4b08      	ldr	r3, [pc, #32]	@ (80034c8 <ShortPress+0x164>)
 80034a6:	7819      	ldrb	r1, [r3, #0]
 80034a8:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <ShortPress+0x160>)
 80034aa:	7818      	ldrb	r0, [r3, #0]
 80034ac:	f002 fe56 	bl	800615c <ItemValueLimit>
 80034b0:	b118      	cbz	r0, 80034ba <ShortPress+0x156>
                    key_value_cnt = max_value -1;
 80034b2:	1e68      	subs	r0, r5, #1
 80034b4:	4b05      	ldr	r3, [pc, #20]	@ (80034cc <ShortPress+0x168>)
 80034b6:	8018      	strh	r0, [r3, #0]
 80034b8:	e780      	b.n	80033bc <ShortPress+0x58>
                    key_value_cnt = 0;
 80034ba:	4b04      	ldr	r3, [pc, #16]	@ (80034cc <ShortPress+0x168>)
 80034bc:	2200      	movs	r2, #0
 80034be:	801a      	strh	r2, [r3, #0]
}
 80034c0:	e77c      	b.n	80033bc <ShortPress+0x58>
 80034c2:	bf00      	nop
 80034c4:	20008569 	.word	0x20008569
 80034c8:	20008568 	.word	0x20008568
 80034cc:	20008566 	.word	0x20008566
 80034d0:	20008565 	.word	0x20008565

080034d4 <Key_CheckProcess>:
{
 80034d4:	b510      	push	{r4, lr}
	for(i=0; i<KEY_MAX; i++)
 80034d6:	2400      	movs	r4, #0
 80034d8:	e001      	b.n	80034de <Key_CheckProcess+0xa>
 80034da:	3401      	adds	r4, #1
 80034dc:	b2e4      	uxtb	r4, r4
 80034de:	2c08      	cmp	r4, #8
 80034e0:	d80e      	bhi.n	8003500 <Key_CheckProcess+0x2c>
		volencode_polling(i);
 80034e2:	4620      	mov	r0, r4
 80034e4:	f7ff feee 	bl	80032c4 <volencode_polling>
		switch(stKeyValue[i].KeySts)
 80034e8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80034ec:	005a      	lsls	r2, r3, #1
 80034ee:	4b05      	ldr	r3, [pc, #20]	@ (8003504 <Key_CheckProcess+0x30>)
 80034f0:	4413      	add	r3, r2
 80034f2:	791b      	ldrb	r3, [r3, #4]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d1f0      	bne.n	80034da <Key_CheckProcess+0x6>
				ShortPress(i);
 80034f8:	4620      	mov	r0, r4
 80034fa:	f7ff ff33 	bl	8003364 <ShortPress>
				break;
 80034fe:	e7ec      	b.n	80034da <Key_CheckProcess+0x6>
}
 8003500:	bd10      	pop	{r4, pc}
 8003502:	bf00      	nop
 8003504:	20000000 	.word	0x20000000

08003508 <delay_us>:

void delay_us(uint16_t nus)
{
	uint16_t i,j = 0u;

	for(i = 0u; i< nus; i++)
 8003508:	2200      	movs	r2, #0
 800350a:	e006      	b.n	800351a <delay_us+0x12>
	{
		for(j = 0u; j < 20u; j++)
		{
			__NOP();
 800350c:	bf00      	nop
		for(j = 0u; j < 20u; j++)
 800350e:	3301      	adds	r3, #1
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b13      	cmp	r3, #19
 8003514:	d9fa      	bls.n	800350c <delay_us+0x4>
	for(i = 0u; i< nus; i++)
 8003516:	3201      	adds	r2, #1
 8003518:	b292      	uxth	r2, r2
 800351a:	4282      	cmp	r2, r0
 800351c:	d201      	bcs.n	8003522 <delay_us+0x1a>
		for(j = 0u; j < 20u; j++)
 800351e:	2300      	movs	r3, #0
 8003520:	e7f7      	b.n	8003512 <delay_us+0xa>
		}
	}
}
 8003522:	4770      	bx	lr

08003524 <delay>:

void delay(uint16_t nms)
{
 8003524:	b538      	push	{r3, r4, r5, lr}
 8003526:	4605      	mov	r5, r0
	uint16_t i = 0u;
	for(i =0u; i < nms; i++)
 8003528:	2400      	movs	r4, #0
 800352a:	e004      	b.n	8003536 <delay+0x12>
	{
	delay_us(100);
 800352c:	2064      	movs	r0, #100	@ 0x64
 800352e:	f7ff ffeb 	bl	8003508 <delay_us>
	for(i =0u; i < nms; i++)
 8003532:	3401      	adds	r4, #1
 8003534:	b2a4      	uxth	r4, r4
 8003536:	42ac      	cmp	r4, r5
 8003538:	d3f8      	bcc.n	800352c <delay+0x8>
	}
}
 800353a:	bd38      	pop	{r3, r4, r5, pc}

0800353c <lcd_hw_Init>:
	}
}
#endif
        
void lcd_hw_Init(void)
{
 800353c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800353e:	b087      	sub	sp, #28
    GPIO_InitTypeDef  GPIO_Initure;

    __HAL_RCC_GPIOA_CLK_ENABLE();   
 8003540:	4b1c      	ldr	r3, [pc, #112]	@ (80035b4 <lcd_hw_Init+0x78>)
 8003542:	699a      	ldr	r2, [r3, #24]
 8003544:	f042 0204 	orr.w	r2, r2, #4
 8003548:	619a      	str	r2, [r3, #24]
 800354a:	699a      	ldr	r2, [r3, #24]
 800354c:	f002 0204 	and.w	r2, r2, #4
 8003550:	9200      	str	r2, [sp, #0]
 8003552:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003554:	699a      	ldr	r2, [r3, #24]
 8003556:	f042 0210 	orr.w	r2, r2, #16
 800355a:	619a      	str	r2, [r3, #24]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	9301      	str	r3, [sp, #4]
 8003564:	9b01      	ldr	r3, [sp, #4]
	
    GPIO_Initure.Pin=GPIO_PIN_7;	
 8003566:	2780      	movs	r7, #128	@ 0x80
 8003568:	9702      	str	r7, [sp, #8]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;	
 800356a:	2401      	movs	r4, #1
 800356c:	9403      	str	r4, [sp, #12]
    GPIO_Initure.Pull=GPIO_PULLUP;        	
 800356e:	9404      	str	r4, [sp, #16]
    GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;
 8003570:	2603      	movs	r6, #3
 8003572:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA,&GPIO_Initure);   	
 8003574:	4d10      	ldr	r5, [pc, #64]	@ (80035b8 <lcd_hw_Init+0x7c>)
 8003576:	a902      	add	r1, sp, #8
 8003578:	4628      	mov	r0, r5
 800357a:	f005 f8d1 	bl	8008720 <HAL_GPIO_Init>
	 
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);
 800357e:	4622      	mov	r2, r4
 8003580:	4639      	mov	r1, r7
 8003582:	4628      	mov	r0, r5
 8003584:	f005 f9da 	bl	800893c <HAL_GPIO_WritePin>
    HAL_GPIO_Init(GPIOC,&GPIO_Initure);   	
	 
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14,GPIO_PIN_SET);	
*******************************************************/	

    GPIO_Initure.Pin=GPIO_PIN_5|GPIO_PIN_6;
 8003588:	2360      	movs	r3, #96	@ 0x60
 800358a:	9302      	str	r3, [sp, #8]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;	
 800358c:	9403      	str	r4, [sp, #12]
    GPIO_Initure.Pull=GPIO_PULLUP;        	
 800358e:	9404      	str	r4, [sp, #16]
    GPIO_Initure.Speed=GPIO_SPEED_HIGH;   	
 8003590:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA,&GPIO_Initure); 
 8003592:	a902      	add	r1, sp, #8
 8003594:	4628      	mov	r0, r5
 8003596:	f005 f8c3 	bl	8008720 <HAL_GPIO_Init>
  
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); 
 800359a:	4622      	mov	r2, r4
 800359c:	2120      	movs	r1, #32
 800359e:	4628      	mov	r0, r5
 80035a0:	f005 f9cc 	bl	800893c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); 	
 80035a4:	4622      	mov	r2, r4
 80035a6:	2140      	movs	r1, #64	@ 0x40
 80035a8:	4628      	mov	r0, r5
 80035aa:	f005 f9c7 	bl	800893c <HAL_GPIO_WritePin>
	
}
 80035ae:	b007      	add	sp, #28
 80035b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40010800 	.word	0x40010800

080035bc <sendbyte>:

***********************************************************************/
void sendbyte(uint8_t zdata)
{
	unsigned int i;
	for(i=0; i<8; i++)
 80035bc:	2300      	movs	r3, #0
 80035be:	e00b      	b.n	80035d8 <sendbyte+0x1c>
		{
			SID = 1;
		}
		else 
		{
			SID = 0;
 80035c0:	4a0c      	ldr	r2, [pc, #48]	@ (80035f4 <sendbyte+0x38>)
 80035c2:	2100      	movs	r1, #0
 80035c4:	f8c2 1198 	str.w	r1, [r2, #408]	@ 0x198
		}
		SCLK = 0;
 80035c8:	4a0a      	ldr	r2, [pc, #40]	@ (80035f4 <sendbyte+0x38>)
 80035ca:	2100      	movs	r1, #0
 80035cc:	f8c2 1194 	str.w	r1, [r2, #404]	@ 0x194
		SCLK = 1;
 80035d0:	2101      	movs	r1, #1
 80035d2:	f8c2 1194 	str.w	r1, [r2, #404]	@ 0x194
	for(i=0; i<8; i++)
 80035d6:	440b      	add	r3, r1
 80035d8:	2b07      	cmp	r3, #7
 80035da:	d809      	bhi.n	80035f0 <sendbyte+0x34>
		if((zdata << i) & 0x80)
 80035dc:	fa00 f203 	lsl.w	r2, r0, r3
 80035e0:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80035e4:	d0ec      	beq.n	80035c0 <sendbyte+0x4>
			SID = 1;
 80035e6:	4a03      	ldr	r2, [pc, #12]	@ (80035f4 <sendbyte+0x38>)
 80035e8:	2101      	movs	r1, #1
 80035ea:	f8c2 1198 	str.w	r1, [r2, #408]	@ 0x198
 80035ee:	e7eb      	b.n	80035c8 <sendbyte+0xc>
	}
}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	42210000 	.word	0x42210000

080035f8 <write_com>:
{
 80035f8:	b510      	push	{r4, lr}
 80035fa:	4604      	mov	r4, r0
	CS = 1;
 80035fc:	4b09      	ldr	r3, [pc, #36]	@ (8003624 <write_com+0x2c>)
 80035fe:	2201      	movs	r2, #1
 8003600:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
	sendbyte(0xf8);
 8003604:	20f8      	movs	r0, #248	@ 0xf8
 8003606:	f7ff ffd9 	bl	80035bc <sendbyte>
	sendbyte(cmdcode & 0xf0);
 800360a:	f004 00f0 	and.w	r0, r4, #240	@ 0xf0
 800360e:	f7ff ffd5 	bl	80035bc <sendbyte>
	sendbyte((cmdcode << 4) & 0xf0);
 8003612:	0120      	lsls	r0, r4, #4
 8003614:	f000 00f0 	and.w	r0, r0, #240	@ 0xf0
 8003618:	f7ff ffd0 	bl	80035bc <sendbyte>
	delay(2);
 800361c:	2002      	movs	r0, #2
 800361e:	f7ff ff81 	bl	8003524 <delay>
}
 8003622:	bd10      	pop	{r4, pc}
 8003624:	42210000 	.word	0x42210000

08003628 <write_data>:
{
 8003628:	b510      	push	{r4, lr}
 800362a:	4604      	mov	r4, r0
	CS = 1;
 800362c:	4b09      	ldr	r3, [pc, #36]	@ (8003654 <write_data+0x2c>)
 800362e:	2201      	movs	r2, #1
 8003630:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
	sendbyte(0xfa);
 8003634:	20fa      	movs	r0, #250	@ 0xfa
 8003636:	f7ff ffc1 	bl	80035bc <sendbyte>
	sendbyte(Dispdata & 0xf0);
 800363a:	f004 00f0 	and.w	r0, r4, #240	@ 0xf0
 800363e:	f7ff ffbd 	bl	80035bc <sendbyte>
	sendbyte((Dispdata << 4) & 0xf0);
 8003642:	0120      	lsls	r0, r4, #4
 8003644:	f000 00f0 	and.w	r0, r0, #240	@ 0xf0
 8003648:	f7ff ffb8 	bl	80035bc <sendbyte>
	delay(2);
 800364c:	2002      	movs	r0, #2
 800364e:	f7ff ff69 	bl	8003524 <delay>
}
 8003652:	bd10      	pop	{r4, pc}
 8003654:	42210000 	.word	0x42210000

08003658 <hzkdis>:
/********************************************************************

***********************************************************************/

void hzkdis(char *s)
{
 8003658:	b510      	push	{r4, lr}
 800365a:	4604      	mov	r4, r0
	while(*s > 0)
 800365c:	e005      	b.n	800366a <hzkdis+0x12>
    { 
		write_data(*s);
 800365e:	f7ff ffe3 	bl	8003628 <write_data>
		s++;
 8003662:	3401      	adds	r4, #1
		delay_us(50);
 8003664:	2032      	movs	r0, #50	@ 0x32
 8003666:	f7ff ff4f 	bl	8003508 <delay_us>
	while(*s > 0)
 800366a:	7820      	ldrb	r0, [r4, #0]
 800366c:	2800      	cmp	r0, #0
 800366e:	d1f6      	bne.n	800365e <hzkdis+0x6>
    }
}
 8003670:	bd10      	pop	{r4, pc}
	...

08003674 <LCD_ShowNum>:

void LCD_ShowNum(int16_t num)
{
 8003674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t i,j,k,l,n;
    if(num >= 65535)
    {
        num = 65535;
    }
    if (num < 0)
 8003678:	1e05      	subs	r5, r0, #0
 800367a:	db52      	blt.n	8003722 <LCD_ShowNum+0xae>
    {
        write_data('-');
        num =abs(num);
    }

    i= num/10000;
 800367c:	4e30      	ldr	r6, [pc, #192]	@ (8003740 <LCD_ShowNum+0xcc>)
 800367e:	fb86 3605 	smull	r3, r6, r6, r5
 8003682:	17ea      	asrs	r2, r5, #31
 8003684:	ebc2 3626 	rsb	r6, r2, r6, asr #12
 8003688:	b2f6      	uxtb	r6, r6
    j= (num-10000*i)/1000;
 800368a:	4b2e      	ldr	r3, [pc, #184]	@ (8003744 <LCD_ShowNum+0xd0>)
 800368c:	fb03 5306 	mla	r3, r3, r6, r5
 8003690:	492d      	ldr	r1, [pc, #180]	@ (8003748 <LCD_ShowNum+0xd4>)
 8003692:	fb81 0103 	smull	r0, r1, r1, r3
 8003696:	17df      	asrs	r7, r3, #31
 8003698:	ebc7 17a1 	rsb	r7, r7, r1, asr #6
 800369c:	b2ff      	uxtb	r7, r7
    k= (num-10000*i-1000*j)/100;
 800369e:	492b      	ldr	r1, [pc, #172]	@ (800374c <LCD_ShowNum+0xd8>)
 80036a0:	fb01 3307 	mla	r3, r1, r7, r3
 80036a4:	492a      	ldr	r1, [pc, #168]	@ (8003750 <LCD_ShowNum+0xdc>)
 80036a6:	fb81 0103 	smull	r0, r1, r1, r3
 80036aa:	ea4f 78e3 	mov.w	r8, r3, asr #31
 80036ae:	ebc8 1861 	rsb	r8, r8, r1, asr #5
 80036b2:	fa5f f888 	uxtb.w	r8, r8
    l= (num-10000*i-1000*j-100*k)/10;
 80036b6:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 80036ba:	fb01 3308 	mla	r3, r1, r8, r3
 80036be:	4925      	ldr	r1, [pc, #148]	@ (8003754 <LCD_ShowNum+0xe0>)
 80036c0:	fb81 4003 	smull	r4, r0, r1, r3
 80036c4:	17db      	asrs	r3, r3, #31
 80036c6:	ebc3 04a0 	rsb	r4, r3, r0, asr #2
 80036ca:	b2e4      	uxtb	r4, r4
    n= num%10;
 80036cc:	fb81 3105 	smull	r3, r1, r1, r5
 80036d0:	ebc2 03a1 	rsb	r3, r2, r1, asr #2
 80036d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80036d8:	eba5 0543 	sub.w	r5, r5, r3, lsl #1
 80036dc:	b2ed      	uxtb	r5, r5

    if(i!=0)
 80036de:	bb46      	cbnz	r6, 8003732 <LCD_ShowNum+0xbe>
    {
        write_data(i+0x30);
    }
    if((i!=0)||(j!=0))
 80036e0:	b127      	cbz	r7, 80036ec <LCD_ShowNum+0x78>
    {
        write_data(j+0x30);
 80036e2:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80036e6:	b2c0      	uxtb	r0, r0
 80036e8:	f7ff ff9e 	bl	8003628 <write_data>
    }
    if((i!=0)||(j!=0)||(k!=0))
 80036ec:	b91e      	cbnz	r6, 80036f6 <LCD_ShowNum+0x82>
 80036ee:	b917      	cbnz	r7, 80036f6 <LCD_ShowNum+0x82>
 80036f0:	f1b8 0f00 	cmp.w	r8, #0
 80036f4:	d004      	beq.n	8003700 <LCD_ShowNum+0x8c>
    {
        write_data(k+0x30);
 80036f6:	f108 0030 	add.w	r0, r8, #48	@ 0x30
 80036fa:	b2c0      	uxtb	r0, r0
 80036fc:	f7ff ff94 	bl	8003628 <write_data>
    }
    if((i!=0)||(j!=0)||(k!=0)||(l!=0))
 8003700:	b926      	cbnz	r6, 800370c <LCD_ShowNum+0x98>
 8003702:	b91f      	cbnz	r7, 800370c <LCD_ShowNum+0x98>
 8003704:	f1b8 0f00 	cmp.w	r8, #0
 8003708:	d100      	bne.n	800370c <LCD_ShowNum+0x98>
 800370a:	b124      	cbz	r4, 8003716 <LCD_ShowNum+0xa2>
    {
        write_data(l+0x30);
 800370c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8003710:	b2c0      	uxtb	r0, r0
 8003712:	f7ff ff89 	bl	8003628 <write_data>
    }
    write_data(n+0x30);
 8003716:	3530      	adds	r5, #48	@ 0x30
 8003718:	b2e8      	uxtb	r0, r5
 800371a:	f7ff ff85 	bl	8003628 <write_data>
}
 800371e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        write_data('-');
 8003722:	202d      	movs	r0, #45	@ 0x2d
 8003724:	f7ff ff80 	bl	8003628 <write_data>
        num =abs(num);
 8003728:	2d00      	cmp	r5, #0
 800372a:	bfb8      	it	lt
 800372c:	426d      	neglt	r5, r5
 800372e:	b22d      	sxth	r5, r5
 8003730:	e7a4      	b.n	800367c <LCD_ShowNum+0x8>
        write_data(i+0x30);
 8003732:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 8003736:	b2c0      	uxtb	r0, r0
 8003738:	f7ff ff76 	bl	8003628 <write_data>
 800373c:	e7d1      	b.n	80036e2 <LCD_ShowNum+0x6e>
 800373e:	bf00      	nop
 8003740:	68db8bad 	.word	0x68db8bad
 8003744:	ffffd8f0 	.word	0xffffd8f0
 8003748:	10624dd3 	.word	0x10624dd3
 800374c:	fffffc18 	.word	0xfffffc18
 8003750:	51eb851f 	.word	0x51eb851f
 8003754:	66666667 	.word	0x66666667

08003758 <LCD_Show32Num>:
 
void LCD_Show32Num(uint32_t num)
{
 8003758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800375c:	b083      	sub	sp, #12
    if(num >= 4294967295)
    {
        num = 4294967295;
    }

    i=num/1000000000;
 800375e:	0a44      	lsrs	r4, r0, #9
 8003760:	4b67      	ldr	r3, [pc, #412]	@ (8003900 <LCD_Show32Num+0x1a8>)
 8003762:	fba3 3404 	umull	r3, r4, r3, r4
 8003766:	09e4      	lsrs	r4, r4, #7
    j=(num-1000000000*i)/100000000;
 8003768:	4b66      	ldr	r3, [pc, #408]	@ (8003904 <LCD_Show32Num+0x1ac>)
 800376a:	fb03 0314 	mls	r3, r3, r4, r0
 800376e:	4d66      	ldr	r5, [pc, #408]	@ (8003908 <LCD_Show32Num+0x1b0>)
 8003770:	fba5 2503 	umull	r2, r5, r5, r3
 8003774:	0e6d      	lsrs	r5, r5, #25
    k=(num-1000000000*i-100000000*j)/10000000;
 8003776:	4a65      	ldr	r2, [pc, #404]	@ (800390c <LCD_Show32Num+0x1b4>)
 8003778:	fb02 3315 	mls	r3, r2, r5, r3
 800377c:	4e64      	ldr	r6, [pc, #400]	@ (8003910 <LCD_Show32Num+0x1b8>)
 800377e:	fba6 2603 	umull	r2, r6, r6, r3
 8003782:	f3c6 5687 	ubfx	r6, r6, #22, #8
    l=(num-1000000000*i-100000000*j-10000000*k)/1000000;
 8003786:	4a63      	ldr	r2, [pc, #396]	@ (8003914 <LCD_Show32Num+0x1bc>)
 8003788:	fb02 3316 	mls	r3, r2, r6, r3
 800378c:	4f62      	ldr	r7, [pc, #392]	@ (8003918 <LCD_Show32Num+0x1c0>)
 800378e:	fba7 2703 	umull	r2, r7, r7, r3
 8003792:	f3c7 4787 	ubfx	r7, r7, #18, #8
    n=(num-1000000000*i-100000000*j-10000000*k-1000000*l)/100000;
 8003796:	4a61      	ldr	r2, [pc, #388]	@ (800391c <LCD_Show32Num+0x1c4>)
 8003798:	fb02 3317 	mls	r3, r2, r7, r3
 800379c:	ea4f 1853 	mov.w	r8, r3, lsr #5
 80037a0:	4a5f      	ldr	r2, [pc, #380]	@ (8003920 <LCD_Show32Num+0x1c8>)
 80037a2:	fba2 2808 	umull	r2, r8, r2, r8
 80037a6:	f3c8 18c7 	ubfx	r8, r8, #7, #8
    m=(num-1000000000*i-100000000*j-10000000*k-1000000*l-100000*n)/10000;
 80037aa:	4a5e      	ldr	r2, [pc, #376]	@ (8003924 <LCD_Show32Num+0x1cc>)
 80037ac:	fb02 3318 	mls	r3, r2, r8, r3
 80037b0:	4a5d      	ldr	r2, [pc, #372]	@ (8003928 <LCD_Show32Num+0x1d0>)
 80037b2:	fba2 2903 	umull	r2, r9, r2, r3
 80037b6:	f3c9 3947 	ubfx	r9, r9, #13, #8
    o=(num-1000000000*i-100000000*j-10000000*k-1000000*l-100000*n-10000*m)/1000;
 80037ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80037be:	fb02 3319 	mls	r3, r2, r9, r3
 80037c2:	4a5a      	ldr	r2, [pc, #360]	@ (800392c <LCD_Show32Num+0x1d4>)
 80037c4:	fba2 2a03 	umull	r2, sl, r2, r3
 80037c8:	f3ca 1a87 	ubfx	sl, sl, #6, #8
    p=(num-1000000000*i-100000000*j-10000000*k-1000000*l-100000*n-10000*m-1000*o)/100;
 80037cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80037d0:	fb02 331a 	mls	r3, r2, sl, r3
 80037d4:	4a56      	ldr	r2, [pc, #344]	@ (8003930 <LCD_Show32Num+0x1d8>)
 80037d6:	fba2 2b03 	umull	r2, fp, r2, r3
 80037da:	f3cb 1b47 	ubfx	fp, fp, #5, #8
    q=(num-1000000000*i-100000000*j-10000000*k-1000000*l-100000*n-10000*m-1000*o-100*p)/10;
 80037de:	2264      	movs	r2, #100	@ 0x64
 80037e0:	fb02 331b 	mls	r3, r2, fp, r3
 80037e4:	4a53      	ldr	r2, [pc, #332]	@ (8003934 <LCD_Show32Num+0x1dc>)
 80037e6:	fba2 1303 	umull	r1, r3, r2, r3
 80037ea:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 80037ee:	9300      	str	r3, [sp, #0]
    r=num%10;
 80037f0:	fba2 2300 	umull	r2, r3, r2, r0
 80037f4:	08db      	lsrs	r3, r3, #3
 80037f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80037fa:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	9301      	str	r3, [sp, #4]


    if(i!=0)
 8003802:	2c00      	cmp	r4, #0
 8003804:	d176      	bne.n	80038f4 <LCD_Show32Num+0x19c>
    {
        write_data(i+0x30);
    }
    if((i!=0)||(j!=0))
 8003806:	b11d      	cbz	r5, 8003810 <LCD_Show32Num+0xb8>
    {
        write_data(j+0x30);
 8003808:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 800380c:	f7ff ff0c 	bl	8003628 <write_data>
    }
    if((i!=0)||(j!=0)||(k!=0))
 8003810:	b90c      	cbnz	r4, 8003816 <LCD_Show32Num+0xbe>
 8003812:	b905      	cbnz	r5, 8003816 <LCD_Show32Num+0xbe>
 8003814:	b126      	cbz	r6, 8003820 <LCD_Show32Num+0xc8>
    {
        write_data(k+0x30);
 8003816:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 800381a:	b2c0      	uxtb	r0, r0
 800381c:	f7ff ff04 	bl	8003628 <write_data>
    }
    if((i!=0)||(j!=0)||(k!=0)||(l!=0))
 8003820:	b914      	cbnz	r4, 8003828 <LCD_Show32Num+0xd0>
 8003822:	b90d      	cbnz	r5, 8003828 <LCD_Show32Num+0xd0>
 8003824:	b906      	cbnz	r6, 8003828 <LCD_Show32Num+0xd0>
 8003826:	b127      	cbz	r7, 8003832 <LCD_Show32Num+0xda>
    {
        write_data(l+0x30);
 8003828:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800382c:	b2c0      	uxtb	r0, r0
 800382e:	f7ff fefb 	bl	8003628 <write_data>
    }
    if((i!=0)||(j!=0)||(k!=0)||(l!=0)||(n!=0))
 8003832:	b92c      	cbnz	r4, 8003840 <LCD_Show32Num+0xe8>
 8003834:	b925      	cbnz	r5, 8003840 <LCD_Show32Num+0xe8>
 8003836:	b91e      	cbnz	r6, 8003840 <LCD_Show32Num+0xe8>
 8003838:	b917      	cbnz	r7, 8003840 <LCD_Show32Num+0xe8>
 800383a:	f1b8 0f00 	cmp.w	r8, #0
 800383e:	d004      	beq.n	800384a <LCD_Show32Num+0xf2>
    {
        write_data(n+0x30);
 8003840:	f108 0030 	add.w	r0, r8, #48	@ 0x30
 8003844:	b2c0      	uxtb	r0, r0
 8003846:	f7ff feef 	bl	8003628 <write_data>
    }
    if((i!=0)||(j!=0)||(k!=0)||(l!=0)||(n!=0)||(m!=0))
 800384a:	b944      	cbnz	r4, 800385e <LCD_Show32Num+0x106>
 800384c:	b93d      	cbnz	r5, 800385e <LCD_Show32Num+0x106>
 800384e:	b936      	cbnz	r6, 800385e <LCD_Show32Num+0x106>
 8003850:	b92f      	cbnz	r7, 800385e <LCD_Show32Num+0x106>
 8003852:	f1b8 0f00 	cmp.w	r8, #0
 8003856:	d102      	bne.n	800385e <LCD_Show32Num+0x106>
 8003858:	f1b9 0f00 	cmp.w	r9, #0
 800385c:	d004      	beq.n	8003868 <LCD_Show32Num+0x110>
    {
        write_data(m+0x30);
 800385e:	f109 0030 	add.w	r0, r9, #48	@ 0x30
 8003862:	b2c0      	uxtb	r0, r0
 8003864:	f7ff fee0 	bl	8003628 <write_data>
    }
    if((i!=0)||(j!=0)||(k!=0)||(l!=0)||(n!=0)||(m!=0)||(o!=0))
 8003868:	b95c      	cbnz	r4, 8003882 <LCD_Show32Num+0x12a>
 800386a:	b955      	cbnz	r5, 8003882 <LCD_Show32Num+0x12a>
 800386c:	b94e      	cbnz	r6, 8003882 <LCD_Show32Num+0x12a>
 800386e:	b947      	cbnz	r7, 8003882 <LCD_Show32Num+0x12a>
 8003870:	f1b8 0f00 	cmp.w	r8, #0
 8003874:	d105      	bne.n	8003882 <LCD_Show32Num+0x12a>
 8003876:	f1b9 0f00 	cmp.w	r9, #0
 800387a:	d102      	bne.n	8003882 <LCD_Show32Num+0x12a>
 800387c:	f1ba 0f00 	cmp.w	sl, #0
 8003880:	d004      	beq.n	800388c <LCD_Show32Num+0x134>
    {
        write_data(o+0x30);
 8003882:	f10a 0030 	add.w	r0, sl, #48	@ 0x30
 8003886:	b2c0      	uxtb	r0, r0
 8003888:	f7ff fece 	bl	8003628 <write_data>
    }
    if((i!=0)||(j!=0)||(k!=0)||(l!=0)||(n!=0)||(m!=0)||(o!=0)||(p!=0))
 800388c:	b974      	cbnz	r4, 80038ac <LCD_Show32Num+0x154>
 800388e:	b96d      	cbnz	r5, 80038ac <LCD_Show32Num+0x154>
 8003890:	b966      	cbnz	r6, 80038ac <LCD_Show32Num+0x154>
 8003892:	b95f      	cbnz	r7, 80038ac <LCD_Show32Num+0x154>
 8003894:	f1b8 0f00 	cmp.w	r8, #0
 8003898:	d108      	bne.n	80038ac <LCD_Show32Num+0x154>
 800389a:	f1b9 0f00 	cmp.w	r9, #0
 800389e:	d105      	bne.n	80038ac <LCD_Show32Num+0x154>
 80038a0:	f1ba 0f00 	cmp.w	sl, #0
 80038a4:	d102      	bne.n	80038ac <LCD_Show32Num+0x154>
 80038a6:	f1bb 0f00 	cmp.w	fp, #0
 80038aa:	d004      	beq.n	80038b6 <LCD_Show32Num+0x15e>
    {
        write_data(p+0x30);
 80038ac:	f10b 0030 	add.w	r0, fp, #48	@ 0x30
 80038b0:	b2c0      	uxtb	r0, r0
 80038b2:	f7ff feb9 	bl	8003628 <write_data>
    }
    if((i!=0)||(j!=0)||(k!=0)||(l!=0)||(n!=0)||(m!=0)||(o!=0)||(p!=0)||(q!=0))
 80038b6:	b984      	cbnz	r4, 80038da <LCD_Show32Num+0x182>
 80038b8:	b97d      	cbnz	r5, 80038da <LCD_Show32Num+0x182>
 80038ba:	b976      	cbnz	r6, 80038da <LCD_Show32Num+0x182>
 80038bc:	b96f      	cbnz	r7, 80038da <LCD_Show32Num+0x182>
 80038be:	f1b8 0f00 	cmp.w	r8, #0
 80038c2:	d10a      	bne.n	80038da <LCD_Show32Num+0x182>
 80038c4:	f1b9 0f00 	cmp.w	r9, #0
 80038c8:	d107      	bne.n	80038da <LCD_Show32Num+0x182>
 80038ca:	f1ba 0f00 	cmp.w	sl, #0
 80038ce:	d104      	bne.n	80038da <LCD_Show32Num+0x182>
 80038d0:	f1bb 0f00 	cmp.w	fp, #0
 80038d4:	d101      	bne.n	80038da <LCD_Show32Num+0x182>
 80038d6:	9b00      	ldr	r3, [sp, #0]
 80038d8:	b123      	cbz	r3, 80038e4 <LCD_Show32Num+0x18c>
    {
        write_data(q+0x30);
 80038da:	9800      	ldr	r0, [sp, #0]
 80038dc:	3030      	adds	r0, #48	@ 0x30
 80038de:	b2c0      	uxtb	r0, r0
 80038e0:	f7ff fea2 	bl	8003628 <write_data>
    }
    write_data(r+0x30);
 80038e4:	9801      	ldr	r0, [sp, #4]
 80038e6:	3030      	adds	r0, #48	@ 0x30
 80038e8:	b2c0      	uxtb	r0, r0
 80038ea:	f7ff fe9d 	bl	8003628 <write_data>
}
 80038ee:	b003      	add	sp, #12
 80038f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        write_data(i+0x30);
 80038f4:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80038f8:	f7ff fe96 	bl	8003628 <write_data>
 80038fc:	e784      	b.n	8003808 <LCD_Show32Num+0xb0>
 80038fe:	bf00      	nop
 8003900:	00044b83 	.word	0x00044b83
 8003904:	3b9aca00 	.word	0x3b9aca00
 8003908:	55e63b89 	.word	0x55e63b89
 800390c:	05f5e100 	.word	0x05f5e100
 8003910:	6b5fca6b 	.word	0x6b5fca6b
 8003914:	00989680 	.word	0x00989680
 8003918:	431bde83 	.word	0x431bde83
 800391c:	000f4240 	.word	0x000f4240
 8003920:	0a7c5ac5 	.word	0x0a7c5ac5
 8003924:	000186a0 	.word	0x000186a0
 8003928:	d1b71759 	.word	0xd1b71759
 800392c:	10624dd3 	.word	0x10624dd3
 8003930:	51eb851f 	.word	0x51eb851f
 8003934:	cccccccd 	.word	0xcccccccd

08003938 <Cls_screen>:
{
    write_data(Asci2[num]);
}

void Cls_screen(void)
{
 8003938:	b508      	push	{r3, lr}
	write_com(0x01);
 800393a:	2001      	movs	r0, #1
 800393c:	f7ff fe5c 	bl	80035f8 <write_com>
	delay(10);
 8003940:	200a      	movs	r0, #10
 8003942:	f7ff fdef 	bl	8003524 <delay>
}
 8003946:	bd08      	pop	{r3, pc}

08003948 <GetMenuIndex>:

/**************************/
Pagedis_Func GetMenuIndex()
{
    return g_menu_index;
}
 8003948:	4b01      	ldr	r3, [pc, #4]	@ (8003950 <GetMenuIndex+0x8>)
 800394a:	7818      	ldrb	r0, [r3, #0]
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	2000856b 	.word	0x2000856b

08003954 <GetItemIndex>:

uint8_t GetItemIndex()
{
    return g_item_index;
}
 8003954:	4b01      	ldr	r3, [pc, #4]	@ (800395c <GetItemIndex+0x8>)
 8003956:	7818      	ldrb	r0, [r3, #0]
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	2000856a 	.word	0x2000856a

08003960 <LCD_menu>:
				 
void LCD_menu(Pagedis_Func menu) 
{
 8003960:	b538      	push	{r3, r4, r5, lr}
 8003962:	4604      	mov	r4, r0
    Pagedis_Func Fi = menu;
    Cls_screen();
 8003964:	f7ff ffe8 	bl	8003938 <Cls_screen>
	write_com(0x03);
 8003968:	2003      	movs	r0, #3
 800396a:	f7ff fe45 	bl	80035f8 <write_com>
	delay(50);    
 800396e:	2032      	movs	r0, #50	@ 0x32
 8003970:	f7ff fdd8 	bl	8003524 <delay>
  
	write_com(0x80);
 8003974:	2080      	movs	r0, #128	@ 0x80
 8003976:	f7ff fe3f 	bl	80035f8 <write_com>
    Fi = GET_MENU(Fi, MENU_MAX);
 800397a:	2c26      	cmp	r4, #38	@ 0x26
 800397c:	d901      	bls.n	8003982 <LCD_menu+0x22>
 800397e:	3c27      	subs	r4, #39	@ 0x27
 8003980:	b2e4      	uxtb	r4, r4
	hzkdis(Func[Fi++]);
 8003982:	1c65      	adds	r5, r4, #1
 8003984:	b2ed      	uxtb	r5, r5
 8003986:	4b1a      	ldr	r3, [pc, #104]	@ (80039f0 <LCD_menu+0x90>)
 8003988:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800398c:	f7ff fe64 	bl	8003658 <hzkdis>

	write_com(0x90);
 8003990:	2090      	movs	r0, #144	@ 0x90
 8003992:	f7ff fe31 	bl	80035f8 <write_com>
    Fi = GET_MENU(Fi, MENU_MAX);
 8003996:	2d26      	cmp	r5, #38	@ 0x26
 8003998:	d901      	bls.n	800399e <LCD_menu+0x3e>
 800399a:	3c26      	subs	r4, #38	@ 0x26
 800399c:	b2e5      	uxtb	r5, r4
	hzkdis(Func[Fi++]);
 800399e:	1c6c      	adds	r4, r5, #1
 80039a0:	b2e4      	uxtb	r4, r4
 80039a2:	4b13      	ldr	r3, [pc, #76]	@ (80039f0 <LCD_menu+0x90>)
 80039a4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80039a8:	f7ff fe56 	bl	8003658 <hzkdis>
    
	write_com(0x88);
 80039ac:	2088      	movs	r0, #136	@ 0x88
 80039ae:	f7ff fe23 	bl	80035f8 <write_com>
    Fi = GET_MENU(Fi, MENU_MAX);
 80039b2:	2c26      	cmp	r4, #38	@ 0x26
 80039b4:	d901      	bls.n	80039ba <LCD_menu+0x5a>
 80039b6:	3d26      	subs	r5, #38	@ 0x26
 80039b8:	b2ec      	uxtb	r4, r5
	hzkdis(Func[Fi++]);
 80039ba:	1c65      	adds	r5, r4, #1
 80039bc:	b2ed      	uxtb	r5, r5
 80039be:	4b0c      	ldr	r3, [pc, #48]	@ (80039f0 <LCD_menu+0x90>)
 80039c0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80039c4:	f7ff fe48 	bl	8003658 <hzkdis>
    
	write_com(0x98);
 80039c8:	2098      	movs	r0, #152	@ 0x98
 80039ca:	f7ff fe15 	bl	80035f8 <write_com>
    Fi = GET_MENU(Fi, MENU_MAX);
 80039ce:	2d26      	cmp	r5, #38	@ 0x26
 80039d0:	d901      	bls.n	80039d6 <LCD_menu+0x76>
 80039d2:	3c26      	subs	r4, #38	@ 0x26
 80039d4:	b2e5      	uxtb	r5, r4
	hzkdis(Func[Fi]);
 80039d6:	4b06      	ldr	r3, [pc, #24]	@ (80039f0 <LCD_menu+0x90>)
 80039d8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80039dc:	f7ff fe3c 	bl	8003658 <hzkdis>
    
    write_com(0x82);
 80039e0:	2082      	movs	r0, #130	@ 0x82
 80039e2:	f7ff fe09 	bl	80035f8 <write_com>
    hzkdis("*");
 80039e6:	4803      	ldr	r0, [pc, #12]	@ (80039f4 <LCD_menu+0x94>)
 80039e8:	f7ff fe36 	bl	8003658 <hzkdis>
}				 
 80039ec:	bd38      	pop	{r3, r4, r5, pc}
 80039ee:	bf00      	nop
 80039f0:	20007fdc 	.word	0x20007fdc
 80039f4:	0800fba8 	.word	0x0800fba8

080039f8 <LCD_Menu_Display>:
				 
uint8_t LCD_Menu_Display(uint8_t menu, uint8_t item, int16_t value) {
 80039f8:	b570      	push	{r4, r5, r6, lr}
 80039fa:	4604      	mov	r4, r0
 80039fc:	460d      	mov	r5, r1
 80039fe:	4616      	mov	r6, r2
    menu = GET_MENU(menu, MENU_MAX);
 8003a00:	2826      	cmp	r0, #38	@ 0x26
 8003a02:	d902      	bls.n	8003a0a <LCD_Menu_Display+0x12>
 8003a04:	f1a0 0427 	sub.w	r4, r0, #39	@ 0x27
 8003a08:	b2e4      	uxtb	r4, r4
    LCD_menu(menu);
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	f7ff ffa8 	bl	8003960 <LCD_menu>
    LCD_Display_Func[menu](item, value);
 8003a10:	4b03      	ldr	r3, [pc, #12]	@ (8003a20 <LCD_Menu_Display+0x28>)
 8003a12:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003a16:	4631      	mov	r1, r6
 8003a18:	4628      	mov	r0, r5
 8003a1a:	4798      	blx	r3
    return DISPLAY_SUCCESS;
}
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	bd70      	pop	{r4, r5, r6, pc}
 8003a20:	20000038 	.word	0x20000038

08003a24 <LCD_Show_CANSendClose>:

void LCD_Show_CANSendClose(void)
{
 8003a24:	b508      	push	{r3, lr}
    Cls_screen();
 8003a26:	f7ff ff87 	bl	8003938 <Cls_screen>
    write_com(0x80);
 8003a2a:	2080      	movs	r0, #128	@ 0x80
 8003a2c:	f7ff fde4 	bl	80035f8 <write_com>
    hzkdis("CAN Send OFF!");
 8003a30:	4801      	ldr	r0, [pc, #4]	@ (8003a38 <LCD_Show_CANSendClose+0x14>)
 8003a32:	f7ff fe11 	bl	8003658 <hzkdis>
}
 8003a36:	bd08      	pop	{r3, pc}
 8003a38:	0800fbac 	.word	0x0800fbac

08003a3c <Page_0>:

void Page_0(void)
{
 8003a3c:	b508      	push	{r3, lr}
	Cls_screen();
 8003a3e:	f7ff ff7b 	bl	8003938 <Cls_screen>
	write_com(0x03);
 8003a42:	2003      	movs	r0, #3
 8003a44:	f7ff fdd8 	bl	80035f8 <write_com>
	delay(50);
 8003a48:	2032      	movs	r0, #50	@ 0x32
 8003a4a:	f7ff fd6b 	bl	8003524 <delay>
	write_com(0x80);
 8003a4e:	2080      	movs	r0, #128	@ 0x80
 8003a50:	f7ff fdd2 	bl	80035f8 <write_com>
	hzkdis("YB103_CAN_Bench");
 8003a54:	4807      	ldr	r0, [pc, #28]	@ (8003a74 <Page_0+0x38>)
 8003a56:	f7ff fdff 	bl	8003658 <hzkdis>
    write_com(0x90);
	hzkdis("SW_V1.0.5"); //1.0.1   SPS250_CAN,SPS250
	write_com(0x98);
	hzkdis("*:SWC-LIN ");
    #else
    write_com(0x90);
 8003a5a:	2090      	movs	r0, #144	@ 0x90
 8003a5c:	f7ff fdcc 	bl	80035f8 <write_com>
	hzkdis("SW_V1.0.0"); //1.0.1   SPS250_CAN,SPS250
 8003a60:	4805      	ldr	r0, [pc, #20]	@ (8003a78 <Page_0+0x3c>)
 8003a62:	f7ff fdf9 	bl	8003658 <hzkdis>
	write_com(0x98);
 8003a66:	2098      	movs	r0, #152	@ 0x98
 8003a68:	f7ff fdc6 	bl	80035f8 <write_com>
	hzkdis("*:Normal ");
 8003a6c:	4803      	ldr	r0, [pc, #12]	@ (8003a7c <Page_0+0x40>)
 8003a6e:	f7ff fdf3 	bl	8003658 <hzkdis>
    #endif
}
 8003a72:	bd08      	pop	{r3, pc}
 8003a74:	0800fbbc 	.word	0x0800fbbc
 8003a78:	0800fbcc 	.word	0x0800fbcc
 8003a7c:	0800fbd8 	.word	0x0800fbd8

08003a80 <lcd128_Init>:
{  
 8003a80:	b508      	push	{r3, lr}
	lcd_hw_Init();
 8003a82:	f7ff fd5b 	bl	800353c <lcd_hw_Init>
	delay(2000);
 8003a86:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a8a:	f7ff fd4b 	bl	8003524 <delay>
	write_com(0x30);
 8003a8e:	2030      	movs	r0, #48	@ 0x30
 8003a90:	f7ff fdb2 	bl	80035f8 <write_com>
	delay(50);
 8003a94:	2032      	movs	r0, #50	@ 0x32
 8003a96:	f7ff fd45 	bl	8003524 <delay>
	write_com(0x0c);
 8003a9a:	200c      	movs	r0, #12
 8003a9c:	f7ff fdac 	bl	80035f8 <write_com>
	delay(50);
 8003aa0:	2032      	movs	r0, #50	@ 0x32
 8003aa2:	f7ff fd3f 	bl	8003524 <delay>
	write_com(0x0F);
 8003aa6:	200f      	movs	r0, #15
 8003aa8:	f7ff fda6 	bl	80035f8 <write_com>
    Page_0();
 8003aac:	f7ff ffc6 	bl	8003a3c <Page_0>
	delay(10000);
 8003ab0:	f242 7010 	movw	r0, #10000	@ 0x2710
 8003ab4:	f7ff fd36 	bl	8003524 <delay>
}
 8003ab8:	bd08      	pop	{r3, pc}
	...

08003abc <LCD_GW_PC_2_item>:
        CanIl_SendEventMsg(IHU_10);
    }
}

void LCD_GW_PC_2_item(uint8_t item, int16_t value)
{
 8003abc:	b510      	push	{r4, lr}
 8003abe:	4604      	mov	r4, r0
    item = GET_MENU(item, GW_PC_2_ITEM_MAX);
 8003ac0:	281b      	cmp	r0, #27
 8003ac2:	d902      	bls.n	8003aca <LCD_GW_PC_2_item+0xe>
 8003ac4:	f1a0 041c 	sub.w	r4, r0, #28
 8003ac8:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003aca:	2083      	movs	r0, #131	@ 0x83
 8003acc:	f7ff fd94 	bl	80035f8 <write_com>
    hzkdis(GW_PC_2Item[item]);
 8003ad0:	4b22      	ldr	r3, [pc, #136]	@ (8003b5c <LCD_GW_PC_2_item+0xa0>)
 8003ad2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003ad6:	f7ff fdbf 	bl	8003658 <hzkdis>
    write_com(0x93);
 8003ada:	2093      	movs	r0, #147	@ 0x93
 8003adc:	f7ff fd8c 	bl	80035f8 <write_com>
    if (strcmp(GW_PC_2Value[item][0], "") != 0) {
 8003ae0:	01a3      	lsls	r3, r4, #6
 8003ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8003b60 <LCD_GW_PC_2_item+0xa4>)
 8003ae4:	58d3      	ldr	r3, [r2, r3]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	b34b      	cbz	r3, 8003b3e <LCD_GW_PC_2_item+0x82>
        hzkdis(GW_PC_2Value[item][g_GW_PC_2[item]]);
 8003aea:	4b1e      	ldr	r3, [pc, #120]	@ (8003b64 <LCD_GW_PC_2_item+0xa8>)
 8003aec:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003af0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003af4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003af8:	f7ff fdae 	bl	8003658 <hzkdis>
    } else {
    	LCD_ShowNum(g_GW_PC_2[item]);
    }

    item = GET_MENU(item+1, GW_PC_2_ITEM_MAX);
 8003afc:	2c1a      	cmp	r4, #26
 8003afe:	d924      	bls.n	8003b4a <LCD_GW_PC_2_item+0x8e>
 8003b00:	3c1b      	subs	r4, #27
 8003b02:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003b04:	208b      	movs	r0, #139	@ 0x8b
 8003b06:	f7ff fd77 	bl	80035f8 <write_com>
    hzkdis(GW_PC_2Item[item]);
 8003b0a:	4b14      	ldr	r3, [pc, #80]	@ (8003b5c <LCD_GW_PC_2_item+0xa0>)
 8003b0c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003b10:	f7ff fda2 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8003b14:	209b      	movs	r0, #155	@ 0x9b
 8003b16:	f7ff fd6f 	bl	80035f8 <write_com>
    if (strcmp(GW_PC_2Value[item][0], "") != 0) {
 8003b1a:	01a3      	lsls	r3, r4, #6
 8003b1c:	4a10      	ldr	r2, [pc, #64]	@ (8003b60 <LCD_GW_PC_2_item+0xa4>)
 8003b1e:	58d3      	ldr	r3, [r2, r3]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	b1ab      	cbz	r3, 8003b50 <LCD_GW_PC_2_item+0x94>
        hzkdis(GW_PC_2Value[item][g_GW_PC_2[item]]);
 8003b24:	4b0f      	ldr	r3, [pc, #60]	@ (8003b64 <LCD_GW_PC_2_item+0xa8>)
 8003b26:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003b2a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003b2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b32:	f7ff fd91 	bl	8003658 <hzkdis>
    } else {
    	LCD_ShowNum(g_GW_PC_2[item]);
    }
    write_com(0x93);
 8003b36:	2093      	movs	r0, #147	@ 0x93
 8003b38:	f7ff fd5e 	bl	80035f8 <write_com>
}
 8003b3c:	bd10      	pop	{r4, pc}
    	LCD_ShowNum(g_GW_PC_2[item]);
 8003b3e:	4b09      	ldr	r3, [pc, #36]	@ (8003b64 <LCD_GW_PC_2_item+0xa8>)
 8003b40:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003b44:	f7ff fd96 	bl	8003674 <LCD_ShowNum>
 8003b48:	e7d8      	b.n	8003afc <LCD_GW_PC_2_item+0x40>
    item = GET_MENU(item+1, GW_PC_2_ITEM_MAX);
 8003b4a:	3401      	adds	r4, #1
 8003b4c:	b2e4      	uxtb	r4, r4
 8003b4e:	e7d9      	b.n	8003b04 <LCD_GW_PC_2_item+0x48>
    	LCD_ShowNum(g_GW_PC_2[item]);
 8003b50:	4b04      	ldr	r3, [pc, #16]	@ (8003b64 <LCD_GW_PC_2_item+0xa8>)
 8003b52:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003b56:	f7ff fd8d 	bl	8003674 <LCD_ShowNum>
 8003b5a:	e7ec      	b.n	8003b36 <LCD_GW_PC_2_item+0x7a>
 8003b5c:	200075d8 	.word	0x200075d8
 8003b60:	20006ed8 	.word	0x20006ed8
 8003b64:	20008904 	.word	0x20008904

08003b68 <LCD_GW_PC_7_item>:

void LCD_GW_PC_7_item(uint8_t item, int16_t value)
{
 8003b68:	b510      	push	{r4, lr}
 8003b6a:	4604      	mov	r4, r0
    item = GET_MENU(item, GW_PC_7_ITEM_MAX);
 8003b6c:	2810      	cmp	r0, #16
 8003b6e:	d902      	bls.n	8003b76 <LCD_GW_PC_7_item+0xe>
 8003b70:	f1a0 0411 	sub.w	r4, r0, #17
 8003b74:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003b76:	2083      	movs	r0, #131	@ 0x83
 8003b78:	f7ff fd3e 	bl	80035f8 <write_com>
    hzkdis(GW_PC_7Item[item]);
 8003b7c:	4b22      	ldr	r3, [pc, #136]	@ (8003c08 <LCD_GW_PC_7_item+0xa0>)
 8003b7e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003b82:	f7ff fd69 	bl	8003658 <hzkdis>
    write_com(0x93);
 8003b86:	2093      	movs	r0, #147	@ 0x93
 8003b88:	f7ff fd36 	bl	80035f8 <write_com>
    if (strcmp(GW_PC_7Value[item][0], "") != 0) {
 8003b8c:	01a3      	lsls	r3, r4, #6
 8003b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8003c0c <LCD_GW_PC_7_item+0xa4>)
 8003b90:	58d3      	ldr	r3, [r2, r3]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	b34b      	cbz	r3, 8003bea <LCD_GW_PC_7_item+0x82>
        hzkdis(GW_PC_7Value[item][g_GW_PC_7[item]]);
 8003b96:	4b1e      	ldr	r3, [pc, #120]	@ (8003c10 <LCD_GW_PC_7_item+0xa8>)
 8003b98:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003b9c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003ba0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003ba4:	f7ff fd58 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_PC_7[item]);
    }

    item = GET_MENU(item+1, GW_PC_7_ITEM_MAX);
 8003ba8:	2c0f      	cmp	r4, #15
 8003baa:	d924      	bls.n	8003bf6 <LCD_GW_PC_7_item+0x8e>
 8003bac:	3c10      	subs	r4, #16
 8003bae:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003bb0:	208b      	movs	r0, #139	@ 0x8b
 8003bb2:	f7ff fd21 	bl	80035f8 <write_com>
    hzkdis(GW_PC_7Item[item]);
 8003bb6:	4b14      	ldr	r3, [pc, #80]	@ (8003c08 <LCD_GW_PC_7_item+0xa0>)
 8003bb8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003bbc:	f7ff fd4c 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8003bc0:	209b      	movs	r0, #155	@ 0x9b
 8003bc2:	f7ff fd19 	bl	80035f8 <write_com>
    if (strcmp(GW_PC_7Value[item][0], "") != 0) {
 8003bc6:	01a3      	lsls	r3, r4, #6
 8003bc8:	4a10      	ldr	r2, [pc, #64]	@ (8003c0c <LCD_GW_PC_7_item+0xa4>)
 8003bca:	58d3      	ldr	r3, [r2, r3]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	b1ab      	cbz	r3, 8003bfc <LCD_GW_PC_7_item+0x94>
        hzkdis(GW_PC_7Value[item][g_GW_PC_7[item]]);
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c10 <LCD_GW_PC_7_item+0xa8>)
 8003bd2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003bd6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003bda:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003bde:	f7ff fd3b 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_PC_7[item]);
    }
    write_com(0x93);
 8003be2:	2093      	movs	r0, #147	@ 0x93
 8003be4:	f7ff fd08 	bl	80035f8 <write_com>
}
 8003be8:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_GW_PC_7[item]);
 8003bea:	4b09      	ldr	r3, [pc, #36]	@ (8003c10 <LCD_GW_PC_7_item+0xa8>)
 8003bec:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003bf0:	f7ff fd40 	bl	8003674 <LCD_ShowNum>
 8003bf4:	e7d8      	b.n	8003ba8 <LCD_GW_PC_7_item+0x40>
    item = GET_MENU(item+1, GW_PC_7_ITEM_MAX);
 8003bf6:	3401      	adds	r4, #1
 8003bf8:	b2e4      	uxtb	r4, r4
 8003bfa:	e7d9      	b.n	8003bb0 <LCD_GW_PC_7_item+0x48>
        LCD_ShowNum(g_GW_PC_7[item]);
 8003bfc:	4b04      	ldr	r3, [pc, #16]	@ (8003c10 <LCD_GW_PC_7_item+0xa8>)
 8003bfe:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003c02:	f7ff fd37 	bl	8003674 <LCD_ShowNum>
 8003c06:	e7ec      	b.n	8003be2 <LCD_GW_PC_7_item+0x7a>
 8003c08:	20006e5c 	.word	0x20006e5c
 8003c0c:	20006a1c 	.word	0x20006a1c
 8003c10:	200088e0 	.word	0x200088e0

08003c14 <LCD_PEPS_1_item>:

void LCD_PEPS_1_item(uint8_t item, int16_t value)
{
 8003c14:	b510      	push	{r4, lr}
 8003c16:	4604      	mov	r4, r0
    item = GET_MENU(item, PEPS_1_ITEM_MAX);
 8003c18:	2810      	cmp	r0, #16
 8003c1a:	d902      	bls.n	8003c22 <LCD_PEPS_1_item+0xe>
 8003c1c:	f1a0 0411 	sub.w	r4, r0, #17
 8003c20:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003c22:	2083      	movs	r0, #131	@ 0x83
 8003c24:	f7ff fce8 	bl	80035f8 <write_com>
    hzkdis(PEPS_1Item[item]);
 8003c28:	4b22      	ldr	r3, [pc, #136]	@ (8003cb4 <LCD_PEPS_1_item+0xa0>)
 8003c2a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003c2e:	f7ff fd13 	bl	8003658 <hzkdis>
    write_com(0x93);
 8003c32:	2093      	movs	r0, #147	@ 0x93
 8003c34:	f7ff fce0 	bl	80035f8 <write_com>
    if (strcmp(PEPS_1Value[item][0], "") != 0) {
 8003c38:	01a3      	lsls	r3, r4, #6
 8003c3a:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb8 <LCD_PEPS_1_item+0xa4>)
 8003c3c:	58d3      	ldr	r3, [r2, r3]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	b34b      	cbz	r3, 8003c96 <LCD_PEPS_1_item+0x82>
        hzkdis(PEPS_1Value[item][g_PEPS_1[item]]);
 8003c42:	4b1e      	ldr	r3, [pc, #120]	@ (8003cbc <LCD_PEPS_1_item+0xa8>)
 8003c44:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003c48:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003c4c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c50:	f7ff fd02 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_PEPS_1[item]);
    }

    item = GET_MENU(item+1, PEPS_1_ITEM_MAX);
 8003c54:	2c0f      	cmp	r4, #15
 8003c56:	d924      	bls.n	8003ca2 <LCD_PEPS_1_item+0x8e>
 8003c58:	3c10      	subs	r4, #16
 8003c5a:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003c5c:	208b      	movs	r0, #139	@ 0x8b
 8003c5e:	f7ff fccb 	bl	80035f8 <write_com>
    hzkdis(PEPS_1Item[item]);
 8003c62:	4b14      	ldr	r3, [pc, #80]	@ (8003cb4 <LCD_PEPS_1_item+0xa0>)
 8003c64:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003c68:	f7ff fcf6 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8003c6c:	209b      	movs	r0, #155	@ 0x9b
 8003c6e:	f7ff fcc3 	bl	80035f8 <write_com>
    if (strcmp(PEPS_1Value[item][0], "") != 0) {
 8003c72:	01a3      	lsls	r3, r4, #6
 8003c74:	4a10      	ldr	r2, [pc, #64]	@ (8003cb8 <LCD_PEPS_1_item+0xa4>)
 8003c76:	58d3      	ldr	r3, [r2, r3]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	b1ab      	cbz	r3, 8003ca8 <LCD_PEPS_1_item+0x94>
        hzkdis(PEPS_1Value[item][g_PEPS_1[item]]);
 8003c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003cbc <LCD_PEPS_1_item+0xa8>)
 8003c7e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003c82:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003c86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c8a:	f7ff fce5 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_PEPS_1[item]);
    }
    write_com(0x93);
 8003c8e:	2093      	movs	r0, #147	@ 0x93
 8003c90:	f7ff fcb2 	bl	80035f8 <write_com>
}
 8003c94:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_PEPS_1[item]);
 8003c96:	4b09      	ldr	r3, [pc, #36]	@ (8003cbc <LCD_PEPS_1_item+0xa8>)
 8003c98:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003c9c:	f7ff fcea 	bl	8003674 <LCD_ShowNum>
 8003ca0:	e7d8      	b.n	8003c54 <LCD_PEPS_1_item+0x40>
    item = GET_MENU(item+1, PEPS_1_ITEM_MAX);
 8003ca2:	3401      	adds	r4, #1
 8003ca4:	b2e4      	uxtb	r4, r4
 8003ca6:	e7d9      	b.n	8003c5c <LCD_PEPS_1_item+0x48>
        LCD_ShowNum(g_PEPS_1[item]);
 8003ca8:	4b04      	ldr	r3, [pc, #16]	@ (8003cbc <LCD_PEPS_1_item+0xa8>)
 8003caa:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003cae:	f7ff fce1 	bl	8003674 <LCD_ShowNum>
 8003cb2:	e7ec      	b.n	8003c8e <LCD_PEPS_1_item+0x7a>
 8003cb4:	200069b4 	.word	0x200069b4
 8003cb8:	20006574 	.word	0x20006574
 8003cbc:	200088bc 	.word	0x200088bc

08003cc0 <LCD_PEPS_3_item>:

void LCD_PEPS_3_item(uint8_t item, int16_t value)
{
 8003cc0:	b510      	push	{r4, lr}
 8003cc2:	4604      	mov	r4, r0
    item = GET_MENU(item, PEPS_3_ITEM_MAX);
 8003cc4:	2802      	cmp	r0, #2
 8003cc6:	d901      	bls.n	8003ccc <LCD_PEPS_3_item+0xc>
 8003cc8:	1ec4      	subs	r4, r0, #3
 8003cca:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003ccc:	2083      	movs	r0, #131	@ 0x83
 8003cce:	f7ff fc93 	bl	80035f8 <write_com>
    hzkdis(PEPS_3Item[item]);
 8003cd2:	4b23      	ldr	r3, [pc, #140]	@ (8003d60 <LCD_PEPS_3_item+0xa0>)
 8003cd4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003cd8:	f7ff fcbe 	bl	8003658 <hzkdis>
    write_com(0x93);
 8003cdc:	2093      	movs	r0, #147	@ 0x93
 8003cde:	f7ff fc8b 	bl	80035f8 <write_com>
    if (strcmp(PEPS_3Value[item][0], "") != 0) {
 8003ce2:	01a3      	lsls	r3, r4, #6
 8003ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8003d64 <LCD_PEPS_3_item+0xa4>)
 8003ce6:	58d3      	ldr	r3, [r2, r3]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	b34b      	cbz	r3, 8003d40 <LCD_PEPS_3_item+0x80>
        hzkdis(PEPS_3Value[item][g_PEPS_3[item]]);
 8003cec:	4b1e      	ldr	r3, [pc, #120]	@ (8003d68 <LCD_PEPS_3_item+0xa8>)
 8003cee:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003cf2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003cf6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003cfa:	f7ff fcad 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_PEPS_3[item]);
    }

    item = GET_MENU(item+1, PEPS_3_ITEM_MAX);
 8003cfe:	2c01      	cmp	r4, #1
 8003d00:	d924      	bls.n	8003d4c <LCD_PEPS_3_item+0x8c>
 8003d02:	3c02      	subs	r4, #2
 8003d04:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003d06:	208b      	movs	r0, #139	@ 0x8b
 8003d08:	f7ff fc76 	bl	80035f8 <write_com>
    hzkdis(PEPS_3Item[item]);
 8003d0c:	4b14      	ldr	r3, [pc, #80]	@ (8003d60 <LCD_PEPS_3_item+0xa0>)
 8003d0e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003d12:	f7ff fca1 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8003d16:	209b      	movs	r0, #155	@ 0x9b
 8003d18:	f7ff fc6e 	bl	80035f8 <write_com>
    if (strcmp(PEPS_3Value[item][0], "") != 0) {
 8003d1c:	01a3      	lsls	r3, r4, #6
 8003d1e:	4a11      	ldr	r2, [pc, #68]	@ (8003d64 <LCD_PEPS_3_item+0xa4>)
 8003d20:	58d3      	ldr	r3, [r2, r3]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	b1ab      	cbz	r3, 8003d52 <LCD_PEPS_3_item+0x92>
        hzkdis(PEPS_3Value[item][g_PEPS_3[item]]);
 8003d26:	4b10      	ldr	r3, [pc, #64]	@ (8003d68 <LCD_PEPS_3_item+0xa8>)
 8003d28:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003d2c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003d30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003d34:	f7ff fc90 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_PEPS_3[item]);
    }
    write_com(0x93);
 8003d38:	2093      	movs	r0, #147	@ 0x93
 8003d3a:	f7ff fc5d 	bl	80035f8 <write_com>
}
 8003d3e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_PEPS_3[item]);
 8003d40:	4b09      	ldr	r3, [pc, #36]	@ (8003d68 <LCD_PEPS_3_item+0xa8>)
 8003d42:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003d46:	f7ff fc95 	bl	8003674 <LCD_ShowNum>
 8003d4a:	e7d8      	b.n	8003cfe <LCD_PEPS_3_item+0x3e>
    item = GET_MENU(item+1, PEPS_3_ITEM_MAX);
 8003d4c:	3401      	adds	r4, #1
 8003d4e:	b2e4      	uxtb	r4, r4
 8003d50:	e7d9      	b.n	8003d06 <LCD_PEPS_3_item+0x46>
        LCD_ShowNum(g_PEPS_3[item]);
 8003d52:	4b05      	ldr	r3, [pc, #20]	@ (8003d68 <LCD_PEPS_3_item+0xa8>)
 8003d54:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003d58:	f7ff fc8c 	bl	8003674 <LCD_ShowNum>
 8003d5c:	e7ec      	b.n	8003d38 <LCD_PEPS_3_item+0x78>
 8003d5e:	bf00      	nop
 8003d60:	20006544 	.word	0x20006544
 8003d64:	20006484 	.word	0x20006484
 8003d68:	200088b4 	.word	0x200088b4

08003d6c <LCD_FCM_3_item>:
        CanIl_SendEventMsg(IHU_1);
    }
}

void LCD_FCM_3_item(uint8_t item, int16_t value)
{
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	4604      	mov	r4, r0
    item = GET_MENU(item, FCM_3_ITEM_MAX);
 8003d70:	280e      	cmp	r0, #14
 8003d72:	d902      	bls.n	8003d7a <LCD_FCM_3_item+0xe>
 8003d74:	f1a0 040f 	sub.w	r4, r0, #15
 8003d78:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003d7a:	2083      	movs	r0, #131	@ 0x83
 8003d7c:	f7ff fc3c 	bl	80035f8 <write_com>
    hzkdis(FCM_3Item[item]);
 8003d80:	4b22      	ldr	r3, [pc, #136]	@ (8003e0c <LCD_FCM_3_item+0xa0>)
 8003d82:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003d86:	f7ff fc67 	bl	8003658 <hzkdis>
    write_com(0x93);
 8003d8a:	2093      	movs	r0, #147	@ 0x93
 8003d8c:	f7ff fc34 	bl	80035f8 <write_com>
    if (strcmp(FCM_3Value[item][0], "") != 0) {
 8003d90:	01a3      	lsls	r3, r4, #6
 8003d92:	4a1f      	ldr	r2, [pc, #124]	@ (8003e10 <LCD_FCM_3_item+0xa4>)
 8003d94:	58d3      	ldr	r3, [r2, r3]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	b34b      	cbz	r3, 8003dee <LCD_FCM_3_item+0x82>
        hzkdis(FCM_3Value[item][g_FCM_3[item]]);
 8003d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003e14 <LCD_FCM_3_item+0xa8>)
 8003d9c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003da0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003da4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003da8:	f7ff fc56 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_FCM_3[item]);
    }

    item = GET_MENU(item+1, FCM_3_ITEM_MAX);
 8003dac:	2c0d      	cmp	r4, #13
 8003dae:	d924      	bls.n	8003dfa <LCD_FCM_3_item+0x8e>
 8003db0:	3c0e      	subs	r4, #14
 8003db2:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003db4:	208b      	movs	r0, #139	@ 0x8b
 8003db6:	f7ff fc1f 	bl	80035f8 <write_com>
    hzkdis(FCM_3Item[item]);
 8003dba:	4b14      	ldr	r3, [pc, #80]	@ (8003e0c <LCD_FCM_3_item+0xa0>)
 8003dbc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003dc0:	f7ff fc4a 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8003dc4:	209b      	movs	r0, #155	@ 0x9b
 8003dc6:	f7ff fc17 	bl	80035f8 <write_com>
    if (strcmp(FCM_3Value[item][0], "") != 0) {
 8003dca:	01a3      	lsls	r3, r4, #6
 8003dcc:	4a10      	ldr	r2, [pc, #64]	@ (8003e10 <LCD_FCM_3_item+0xa4>)
 8003dce:	58d3      	ldr	r3, [r2, r3]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	b1ab      	cbz	r3, 8003e00 <LCD_FCM_3_item+0x94>
        hzkdis(FCM_3Value[item][g_FCM_3[item]]);
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8003e14 <LCD_FCM_3_item+0xa8>)
 8003dd6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003dda:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003dde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003de2:	f7ff fc39 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_FCM_3[item]);
    }
    write_com(0x93);
 8003de6:	2093      	movs	r0, #147	@ 0x93
 8003de8:	f7ff fc06 	bl	80035f8 <write_com>
}
 8003dec:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_FCM_3[item]);
 8003dee:	4b09      	ldr	r3, [pc, #36]	@ (8003e14 <LCD_FCM_3_item+0xa8>)
 8003df0:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003df4:	f7ff fc3e 	bl	8003674 <LCD_ShowNum>
 8003df8:	e7d8      	b.n	8003dac <LCD_FCM_3_item+0x40>
    item = GET_MENU(item+1, FCM_3_ITEM_MAX);
 8003dfa:	3401      	adds	r4, #1
 8003dfc:	b2e4      	uxtb	r4, r4
 8003dfe:	e7d9      	b.n	8003db4 <LCD_FCM_3_item+0x48>
        LCD_ShowNum(g_FCM_3[item]);
 8003e00:	4b04      	ldr	r3, [pc, #16]	@ (8003e14 <LCD_FCM_3_item+0xa8>)
 8003e02:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003e06:	f7ff fc35 	bl	8003674 <LCD_ShowNum>
 8003e0a:	e7ec      	b.n	8003de6 <LCD_FCM_3_item+0x7a>
 8003e0c:	20005e3c 	.word	0x20005e3c
 8003e10:	20005a7c 	.word	0x20005a7c
 8003e14:	20008868 	.word	0x20008868

08003e18 <LCD_FCM_4_item>:

void LCD_FCM_4_item(uint8_t item, int16_t value)
{
 8003e18:	b510      	push	{r4, lr}
 8003e1a:	4604      	mov	r4, r0
    item = GET_MENU(item, FCM_4_ITEM_MAX);
 8003e1c:	2814      	cmp	r0, #20
 8003e1e:	d902      	bls.n	8003e26 <LCD_FCM_4_item+0xe>
 8003e20:	f1a0 0415 	sub.w	r4, r0, #21
 8003e24:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003e26:	2083      	movs	r0, #131	@ 0x83
 8003e28:	f7ff fbe6 	bl	80035f8 <write_com>
    hzkdis(FCM_4Item[item]);
 8003e2c:	4b22      	ldr	r3, [pc, #136]	@ (8003eb8 <LCD_FCM_4_item+0xa0>)
 8003e2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003e32:	f7ff fc11 	bl	8003658 <hzkdis>
    write_com(0x93);
 8003e36:	2093      	movs	r0, #147	@ 0x93
 8003e38:	f7ff fbde 	bl	80035f8 <write_com>
    if (strcmp(FCM_4Value[item][0], "") != 0) {
 8003e3c:	01a3      	lsls	r3, r4, #6
 8003e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8003ebc <LCD_FCM_4_item+0xa4>)
 8003e40:	58d3      	ldr	r3, [r2, r3]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	b34b      	cbz	r3, 8003e9a <LCD_FCM_4_item+0x82>
        hzkdis(FCM_4Value[item][g_FCM_4[item]]);
 8003e46:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec0 <LCD_FCM_4_item+0xa8>)
 8003e48:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003e4c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003e50:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003e54:	f7ff fc00 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_FCM_4[item]);
    }

    item = GET_MENU(item+1, FCM_4_ITEM_MAX);
 8003e58:	2c13      	cmp	r4, #19
 8003e5a:	d924      	bls.n	8003ea6 <LCD_FCM_4_item+0x8e>
 8003e5c:	3c14      	subs	r4, #20
 8003e5e:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003e60:	208b      	movs	r0, #139	@ 0x8b
 8003e62:	f7ff fbc9 	bl	80035f8 <write_com>
    hzkdis(FCM_4Item[item]);
 8003e66:	4b14      	ldr	r3, [pc, #80]	@ (8003eb8 <LCD_FCM_4_item+0xa0>)
 8003e68:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003e6c:	f7ff fbf4 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8003e70:	209b      	movs	r0, #155	@ 0x9b
 8003e72:	f7ff fbc1 	bl	80035f8 <write_com>
    if (strcmp(FCM_4Value[item][0], "") != 0) {
 8003e76:	01a3      	lsls	r3, r4, #6
 8003e78:	4a10      	ldr	r2, [pc, #64]	@ (8003ebc <LCD_FCM_4_item+0xa4>)
 8003e7a:	58d3      	ldr	r3, [r2, r3]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	b1ab      	cbz	r3, 8003eac <LCD_FCM_4_item+0x94>
        hzkdis(FCM_4Value[item][g_FCM_4[item]]);
 8003e80:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec0 <LCD_FCM_4_item+0xa8>)
 8003e82:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003e86:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003e8a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003e8e:	f7ff fbe3 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_FCM_4[item]);
    }
    write_com(0x93);
 8003e92:	2093      	movs	r0, #147	@ 0x93
 8003e94:	f7ff fbb0 	bl	80035f8 <write_com>
}
 8003e98:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_FCM_4[item]);
 8003e9a:	4b09      	ldr	r3, [pc, #36]	@ (8003ec0 <LCD_FCM_4_item+0xa8>)
 8003e9c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003ea0:	f7ff fbe8 	bl	8003674 <LCD_ShowNum>
 8003ea4:	e7d8      	b.n	8003e58 <LCD_FCM_4_item+0x40>
    item = GET_MENU(item+1, FCM_4_ITEM_MAX);
 8003ea6:	3401      	adds	r4, #1
 8003ea8:	b2e4      	uxtb	r4, r4
 8003eaa:	e7d9      	b.n	8003e60 <LCD_FCM_4_item+0x48>
        LCD_ShowNum(g_FCM_4[item]);
 8003eac:	4b04      	ldr	r3, [pc, #16]	@ (8003ec0 <LCD_FCM_4_item+0xa8>)
 8003eae:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003eb2:	f7ff fbdf 	bl	8003674 <LCD_ShowNum>
 8003eb6:	e7ec      	b.n	8003e92 <LCD_FCM_4_item+0x7a>
 8003eb8:	20005a08 	.word	0x20005a08
 8003ebc:	200054c8 	.word	0x200054c8
 8003ec0:	2000883c 	.word	0x2000883c

08003ec4 <LCD_FCM_5_item>:

void LCD_FCM_5_item(uint8_t item, int16_t value)
{
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	4604      	mov	r4, r0
    item = GET_MENU(item, FCM_5_ITEM_MAX);
 8003ec8:	280b      	cmp	r0, #11
 8003eca:	d902      	bls.n	8003ed2 <LCD_FCM_5_item+0xe>
 8003ecc:	f1a0 040c 	sub.w	r4, r0, #12
 8003ed0:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003ed2:	2083      	movs	r0, #131	@ 0x83
 8003ed4:	f7ff fb90 	bl	80035f8 <write_com>
    hzkdis(FCM_5Item[item]);
 8003ed8:	4b22      	ldr	r3, [pc, #136]	@ (8003f64 <LCD_FCM_5_item+0xa0>)
 8003eda:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003ede:	f7ff fbbb 	bl	8003658 <hzkdis>
    write_com(0x93);
 8003ee2:	2093      	movs	r0, #147	@ 0x93
 8003ee4:	f7ff fb88 	bl	80035f8 <write_com>
    if (strcmp(FCM_5Value[item][0], "") != 0) {
 8003ee8:	01a3      	lsls	r3, r4, #6
 8003eea:	4a1f      	ldr	r2, [pc, #124]	@ (8003f68 <LCD_FCM_5_item+0xa4>)
 8003eec:	58d3      	ldr	r3, [r2, r3]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	b34b      	cbz	r3, 8003f46 <LCD_FCM_5_item+0x82>
        hzkdis(FCM_5Value[item][g_FCM_5[item]]);
 8003ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f6c <LCD_FCM_5_item+0xa8>)
 8003ef4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003ef8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003efc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003f00:	f7ff fbaa 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_FCM_5[item]);
    }

    item = GET_MENU(item+1, FCM_5_ITEM_MAX);
 8003f04:	2c0a      	cmp	r4, #10
 8003f06:	d924      	bls.n	8003f52 <LCD_FCM_5_item+0x8e>
 8003f08:	3c0b      	subs	r4, #11
 8003f0a:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003f0c:	208b      	movs	r0, #139	@ 0x8b
 8003f0e:	f7ff fb73 	bl	80035f8 <write_com>
    hzkdis(FCM_5Item[item]);
 8003f12:	4b14      	ldr	r3, [pc, #80]	@ (8003f64 <LCD_FCM_5_item+0xa0>)
 8003f14:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003f18:	f7ff fb9e 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8003f1c:	209b      	movs	r0, #155	@ 0x9b
 8003f1e:	f7ff fb6b 	bl	80035f8 <write_com>
    if (strcmp(FCM_5Value[item][0], "") != 0) {
 8003f22:	01a3      	lsls	r3, r4, #6
 8003f24:	4a10      	ldr	r2, [pc, #64]	@ (8003f68 <LCD_FCM_5_item+0xa4>)
 8003f26:	58d3      	ldr	r3, [r2, r3]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	b1ab      	cbz	r3, 8003f58 <LCD_FCM_5_item+0x94>
        hzkdis(FCM_5Value[item][g_FCM_5[item]]);
 8003f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f6c <LCD_FCM_5_item+0xa8>)
 8003f2e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003f32:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003f36:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003f3a:	f7ff fb8d 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_FCM_5[item]);
    }
    write_com(0x93);
 8003f3e:	2093      	movs	r0, #147	@ 0x93
 8003f40:	f7ff fb5a 	bl	80035f8 <write_com>
}
 8003f44:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_FCM_5[item]);
 8003f46:	4b09      	ldr	r3, [pc, #36]	@ (8003f6c <LCD_FCM_5_item+0xa8>)
 8003f48:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003f4c:	f7ff fb92 	bl	8003674 <LCD_ShowNum>
 8003f50:	e7d8      	b.n	8003f04 <LCD_FCM_5_item+0x40>
    item = GET_MENU(item+1, FCM_5_ITEM_MAX);
 8003f52:	3401      	adds	r4, #1
 8003f54:	b2e4      	uxtb	r4, r4
 8003f56:	e7d9      	b.n	8003f0c <LCD_FCM_5_item+0x48>
        LCD_ShowNum(g_FCM_5[item]);
 8003f58:	4b04      	ldr	r3, [pc, #16]	@ (8003f6c <LCD_FCM_5_item+0xa8>)
 8003f5a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003f5e:	f7ff fb89 	bl	8003674 <LCD_ShowNum>
 8003f62:	e7ec      	b.n	8003f3e <LCD_FCM_5_item+0x7a>
 8003f64:	2000546c 	.word	0x2000546c
 8003f68:	2000516c 	.word	0x2000516c
 8003f6c:	20008824 	.word	0x20008824

08003f70 <LCD_FCM_6_item>:

void LCD_FCM_6_item(uint8_t item, int16_t value)
{
 8003f70:	b510      	push	{r4, lr}
 8003f72:	4604      	mov	r4, r0
    item = GET_MENU(item, FCM_6_ITEM_MAX);
 8003f74:	280b      	cmp	r0, #11
 8003f76:	d902      	bls.n	8003f7e <LCD_FCM_6_item+0xe>
 8003f78:	f1a0 040c 	sub.w	r4, r0, #12
 8003f7c:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8003f7e:	2083      	movs	r0, #131	@ 0x83
 8003f80:	f7ff fb3a 	bl	80035f8 <write_com>
    hzkdis(FCM_6Item[item]);
 8003f84:	4b22      	ldr	r3, [pc, #136]	@ (8004010 <LCD_FCM_6_item+0xa0>)
 8003f86:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003f8a:	f7ff fb65 	bl	8003658 <hzkdis>
    write_com(0x93);
 8003f8e:	2093      	movs	r0, #147	@ 0x93
 8003f90:	f7ff fb32 	bl	80035f8 <write_com>
    if (strcmp(FCM_6Value[item][0], "") != 0) {
 8003f94:	01a3      	lsls	r3, r4, #6
 8003f96:	4a1f      	ldr	r2, [pc, #124]	@ (8004014 <LCD_FCM_6_item+0xa4>)
 8003f98:	58d3      	ldr	r3, [r2, r3]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	b34b      	cbz	r3, 8003ff2 <LCD_FCM_6_item+0x82>
        hzkdis(FCM_6Value[item][g_FCM_6[item]]);
 8003f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004018 <LCD_FCM_6_item+0xa8>)
 8003fa0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003fa4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003fa8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003fac:	f7ff fb54 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_FCM_6[item]);
    }

    item = GET_MENU(item+1, FCM_6_ITEM_MAX);
 8003fb0:	2c0a      	cmp	r4, #10
 8003fb2:	d924      	bls.n	8003ffe <LCD_FCM_6_item+0x8e>
 8003fb4:	3c0b      	subs	r4, #11
 8003fb6:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003fb8:	208b      	movs	r0, #139	@ 0x8b
 8003fba:	f7ff fb1d 	bl	80035f8 <write_com>
    hzkdis(FCM_6Item[item]);
 8003fbe:	4b14      	ldr	r3, [pc, #80]	@ (8004010 <LCD_FCM_6_item+0xa0>)
 8003fc0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003fc4:	f7ff fb48 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8003fc8:	209b      	movs	r0, #155	@ 0x9b
 8003fca:	f7ff fb15 	bl	80035f8 <write_com>
    if (strcmp(FCM_6Value[item][0], "") != 0) {
 8003fce:	01a3      	lsls	r3, r4, #6
 8003fd0:	4a10      	ldr	r2, [pc, #64]	@ (8004014 <LCD_FCM_6_item+0xa4>)
 8003fd2:	58d3      	ldr	r3, [r2, r3]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	b1ab      	cbz	r3, 8004004 <LCD_FCM_6_item+0x94>
        hzkdis(FCM_6Value[item][g_FCM_6[item]]);
 8003fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8004018 <LCD_FCM_6_item+0xa8>)
 8003fda:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003fde:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003fe2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003fe6:	f7ff fb37 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_FCM_6[item]);
    }
    write_com(0x93);
 8003fea:	2093      	movs	r0, #147	@ 0x93
 8003fec:	f7ff fb04 	bl	80035f8 <write_com>
}
 8003ff0:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_FCM_6[item]);
 8003ff2:	4b09      	ldr	r3, [pc, #36]	@ (8004018 <LCD_FCM_6_item+0xa8>)
 8003ff4:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003ff8:	f7ff fb3c 	bl	8003674 <LCD_ShowNum>
 8003ffc:	e7d8      	b.n	8003fb0 <LCD_FCM_6_item+0x40>
    item = GET_MENU(item+1, FCM_6_ITEM_MAX);
 8003ffe:	3401      	adds	r4, #1
 8004000:	b2e4      	uxtb	r4, r4
 8004002:	e7d9      	b.n	8003fb8 <LCD_FCM_6_item+0x48>
        LCD_ShowNum(g_FCM_6[item]);
 8004004:	4b04      	ldr	r3, [pc, #16]	@ (8004018 <LCD_FCM_6_item+0xa8>)
 8004006:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800400a:	f7ff fb33 	bl	8003674 <LCD_ShowNum>
 800400e:	e7ec      	b.n	8003fea <LCD_FCM_6_item+0x7a>
 8004010:	20005124 	.word	0x20005124
 8004014:	20004e24 	.word	0x20004e24
 8004018:	2000880c 	.word	0x2000880c

0800401c <LCD_FCM_7_item>:

void LCD_FCM_7_item(uint8_t item, int16_t value)
{
 800401c:	b510      	push	{r4, lr}
 800401e:	4604      	mov	r4, r0
    item = GET_MENU(item, FCM_7_ITEM_MAX);
 8004020:	280b      	cmp	r0, #11
 8004022:	d902      	bls.n	800402a <LCD_FCM_7_item+0xe>
 8004024:	f1a0 040c 	sub.w	r4, r0, #12
 8004028:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 800402a:	2083      	movs	r0, #131	@ 0x83
 800402c:	f7ff fae4 	bl	80035f8 <write_com>
    hzkdis(FCM_7Item[item]);
 8004030:	4b22      	ldr	r3, [pc, #136]	@ (80040bc <LCD_FCM_7_item+0xa0>)
 8004032:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004036:	f7ff fb0f 	bl	8003658 <hzkdis>
    write_com(0x93);
 800403a:	2093      	movs	r0, #147	@ 0x93
 800403c:	f7ff fadc 	bl	80035f8 <write_com>
    if (strcmp(FCM_7Value[item][0], "") != 0) {
 8004040:	01a3      	lsls	r3, r4, #6
 8004042:	4a1f      	ldr	r2, [pc, #124]	@ (80040c0 <LCD_FCM_7_item+0xa4>)
 8004044:	58d3      	ldr	r3, [r2, r3]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	b34b      	cbz	r3, 800409e <LCD_FCM_7_item+0x82>
        hzkdis(FCM_7Value[item][g_FCM_7[item]]);
 800404a:	4b1e      	ldr	r3, [pc, #120]	@ (80040c4 <LCD_FCM_7_item+0xa8>)
 800404c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004050:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004054:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004058:	f7ff fafe 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_FCM_7[item]);
    }

    item = GET_MENU(item+1, FCM_7_ITEM_MAX);
 800405c:	2c0a      	cmp	r4, #10
 800405e:	d924      	bls.n	80040aa <LCD_FCM_7_item+0x8e>
 8004060:	3c0b      	subs	r4, #11
 8004062:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004064:	208b      	movs	r0, #139	@ 0x8b
 8004066:	f7ff fac7 	bl	80035f8 <write_com>
    hzkdis(FCM_7Item[item]);
 800406a:	4b14      	ldr	r3, [pc, #80]	@ (80040bc <LCD_FCM_7_item+0xa0>)
 800406c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004070:	f7ff faf2 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8004074:	209b      	movs	r0, #155	@ 0x9b
 8004076:	f7ff fabf 	bl	80035f8 <write_com>
    if (strcmp(FCM_7Value[item][0], "") != 0) {
 800407a:	01a3      	lsls	r3, r4, #6
 800407c:	4a10      	ldr	r2, [pc, #64]	@ (80040c0 <LCD_FCM_7_item+0xa4>)
 800407e:	58d3      	ldr	r3, [r2, r3]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	b1ab      	cbz	r3, 80040b0 <LCD_FCM_7_item+0x94>
        hzkdis(FCM_7Value[item][g_FCM_7[item]]);
 8004084:	4b0f      	ldr	r3, [pc, #60]	@ (80040c4 <LCD_FCM_7_item+0xa8>)
 8004086:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800408a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800408e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004092:	f7ff fae1 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_FCM_7[item]);
    }
    write_com(0x93);
 8004096:	2093      	movs	r0, #147	@ 0x93
 8004098:	f7ff faae 	bl	80035f8 <write_com>
}
 800409c:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_FCM_7[item]);
 800409e:	4b09      	ldr	r3, [pc, #36]	@ (80040c4 <LCD_FCM_7_item+0xa8>)
 80040a0:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80040a4:	f7ff fae6 	bl	8003674 <LCD_ShowNum>
 80040a8:	e7d8      	b.n	800405c <LCD_FCM_7_item+0x40>
    item = GET_MENU(item+1, FCM_7_ITEM_MAX);
 80040aa:	3401      	adds	r4, #1
 80040ac:	b2e4      	uxtb	r4, r4
 80040ae:	e7d9      	b.n	8004064 <LCD_FCM_7_item+0x48>
        LCD_ShowNum(g_FCM_7[item]);
 80040b0:	4b04      	ldr	r3, [pc, #16]	@ (80040c4 <LCD_FCM_7_item+0xa8>)
 80040b2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80040b6:	f7ff fadd 	bl	8003674 <LCD_ShowNum>
 80040ba:	e7ec      	b.n	8004096 <LCD_FCM_7_item+0x7a>
 80040bc:	20004ddc 	.word	0x20004ddc
 80040c0:	20004adc 	.word	0x20004adc
 80040c4:	200087f4 	.word	0x200087f4

080040c8 <LCD_FCM_8_item>:

void LCD_FCM_8_item(uint8_t item, int16_t value)
{
 80040c8:	b510      	push	{r4, lr}
 80040ca:	4604      	mov	r4, r0
    item = GET_MENU(item, FCM_8_ITEM_MAX);
 80040cc:	280b      	cmp	r0, #11
 80040ce:	d902      	bls.n	80040d6 <LCD_FCM_8_item+0xe>
 80040d0:	f1a0 040c 	sub.w	r4, r0, #12
 80040d4:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 80040d6:	2083      	movs	r0, #131	@ 0x83
 80040d8:	f7ff fa8e 	bl	80035f8 <write_com>
    hzkdis(FCM_8Item[item]);
 80040dc:	4b22      	ldr	r3, [pc, #136]	@ (8004168 <LCD_FCM_8_item+0xa0>)
 80040de:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80040e2:	f7ff fab9 	bl	8003658 <hzkdis>
    write_com(0x93);
 80040e6:	2093      	movs	r0, #147	@ 0x93
 80040e8:	f7ff fa86 	bl	80035f8 <write_com>
    if (strcmp(FCM_8Value[item][0], "") != 0) {
 80040ec:	01a3      	lsls	r3, r4, #6
 80040ee:	4a1f      	ldr	r2, [pc, #124]	@ (800416c <LCD_FCM_8_item+0xa4>)
 80040f0:	58d3      	ldr	r3, [r2, r3]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	b34b      	cbz	r3, 800414a <LCD_FCM_8_item+0x82>
        hzkdis(FCM_8Value[item][g_FCM_8[item]]);
 80040f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004170 <LCD_FCM_8_item+0xa8>)
 80040f8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80040fc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004100:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004104:	f7ff faa8 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_FCM_8[item]);
    }

    item = GET_MENU(item+1, FCM_8_ITEM_MAX);
 8004108:	2c0a      	cmp	r4, #10
 800410a:	d924      	bls.n	8004156 <LCD_FCM_8_item+0x8e>
 800410c:	3c0b      	subs	r4, #11
 800410e:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004110:	208b      	movs	r0, #139	@ 0x8b
 8004112:	f7ff fa71 	bl	80035f8 <write_com>
    hzkdis(FCM_8Item[item]);
 8004116:	4b14      	ldr	r3, [pc, #80]	@ (8004168 <LCD_FCM_8_item+0xa0>)
 8004118:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800411c:	f7ff fa9c 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8004120:	209b      	movs	r0, #155	@ 0x9b
 8004122:	f7ff fa69 	bl	80035f8 <write_com>
    if (strcmp(FCM_8Value[item][0], "") != 0) {
 8004126:	01a3      	lsls	r3, r4, #6
 8004128:	4a10      	ldr	r2, [pc, #64]	@ (800416c <LCD_FCM_8_item+0xa4>)
 800412a:	58d3      	ldr	r3, [r2, r3]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	b1ab      	cbz	r3, 800415c <LCD_FCM_8_item+0x94>
        hzkdis(FCM_8Value[item][g_FCM_8[item]]);
 8004130:	4b0f      	ldr	r3, [pc, #60]	@ (8004170 <LCD_FCM_8_item+0xa8>)
 8004132:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004136:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800413a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800413e:	f7ff fa8b 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_FCM_8[item]);
    }
    write_com(0x93);
 8004142:	2093      	movs	r0, #147	@ 0x93
 8004144:	f7ff fa58 	bl	80035f8 <write_com>
}
 8004148:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_FCM_8[item]);
 800414a:	4b09      	ldr	r3, [pc, #36]	@ (8004170 <LCD_FCM_8_item+0xa8>)
 800414c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004150:	f7ff fa90 	bl	8003674 <LCD_ShowNum>
 8004154:	e7d8      	b.n	8004108 <LCD_FCM_8_item+0x40>
    item = GET_MENU(item+1, FCM_8_ITEM_MAX);
 8004156:	3401      	adds	r4, #1
 8004158:	b2e4      	uxtb	r4, r4
 800415a:	e7d9      	b.n	8004110 <LCD_FCM_8_item+0x48>
        LCD_ShowNum(g_FCM_8[item]);
 800415c:	4b04      	ldr	r3, [pc, #16]	@ (8004170 <LCD_FCM_8_item+0xa8>)
 800415e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004162:	f7ff fa87 	bl	8003674 <LCD_ShowNum>
 8004166:	e7ec      	b.n	8004142 <LCD_FCM_8_item+0x7a>
 8004168:	20004a94 	.word	0x20004a94
 800416c:	20004794 	.word	0x20004794
 8004170:	200087dc 	.word	0x200087dc

08004174 <LCD_BCM_5_item>:

void LCD_BCM_5_item(uint8_t item, int16_t value)
{
 8004174:	b510      	push	{r4, lr}
 8004176:	4604      	mov	r4, r0
    item = GET_MENU(item, BCM_5_ITEM_MAX);
 8004178:	2809      	cmp	r0, #9
 800417a:	d902      	bls.n	8004182 <LCD_BCM_5_item+0xe>
 800417c:	f1a0 040a 	sub.w	r4, r0, #10
 8004180:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004182:	2083      	movs	r0, #131	@ 0x83
 8004184:	f7ff fa38 	bl	80035f8 <write_com>
    hzkdis(BCM_5Item[item]);
 8004188:	4b22      	ldr	r3, [pc, #136]	@ (8004214 <LCD_BCM_5_item+0xa0>)
 800418a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800418e:	f7ff fa63 	bl	8003658 <hzkdis>
    write_com(0x93);
 8004192:	2093      	movs	r0, #147	@ 0x93
 8004194:	f7ff fa30 	bl	80035f8 <write_com>
    if (strcmp(BCM_5Value[item][0], "") != 0) {
 8004198:	01a3      	lsls	r3, r4, #6
 800419a:	4a1f      	ldr	r2, [pc, #124]	@ (8004218 <LCD_BCM_5_item+0xa4>)
 800419c:	58d3      	ldr	r3, [r2, r3]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	b34b      	cbz	r3, 80041f6 <LCD_BCM_5_item+0x82>
        hzkdis(BCM_5Value[item][g_BCM_5[item]]);
 80041a2:	4b1e      	ldr	r3, [pc, #120]	@ (800421c <LCD_BCM_5_item+0xa8>)
 80041a4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80041a8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80041ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80041b0:	f7ff fa52 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_BCM_5[item]);
    }

    item = GET_MENU(item+1, BCM_5_ITEM_MAX);
 80041b4:	2c08      	cmp	r4, #8
 80041b6:	d924      	bls.n	8004202 <LCD_BCM_5_item+0x8e>
 80041b8:	3c09      	subs	r4, #9
 80041ba:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80041bc:	208b      	movs	r0, #139	@ 0x8b
 80041be:	f7ff fa1b 	bl	80035f8 <write_com>
    hzkdis(BCM_5Item[item]);
 80041c2:	4b14      	ldr	r3, [pc, #80]	@ (8004214 <LCD_BCM_5_item+0xa0>)
 80041c4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80041c8:	f7ff fa46 	bl	8003658 <hzkdis>
    write_com(0x9b);
 80041cc:	209b      	movs	r0, #155	@ 0x9b
 80041ce:	f7ff fa13 	bl	80035f8 <write_com>
    if (strcmp(BCM_5Value[item][0], "") != 0) {
 80041d2:	01a3      	lsls	r3, r4, #6
 80041d4:	4a10      	ldr	r2, [pc, #64]	@ (8004218 <LCD_BCM_5_item+0xa4>)
 80041d6:	58d3      	ldr	r3, [r2, r3]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	b1ab      	cbz	r3, 8004208 <LCD_BCM_5_item+0x94>
        hzkdis(BCM_5Value[item][g_BCM_5[item]]);
 80041dc:	4b0f      	ldr	r3, [pc, #60]	@ (800421c <LCD_BCM_5_item+0xa8>)
 80041de:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80041e2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80041e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80041ea:	f7ff fa35 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_BCM_5[item]);
    }
    write_com(0x93);
 80041ee:	2093      	movs	r0, #147	@ 0x93
 80041f0:	f7ff fa02 	bl	80035f8 <write_com>
}
 80041f4:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_BCM_5[item]);
 80041f6:	4b09      	ldr	r3, [pc, #36]	@ (800421c <LCD_BCM_5_item+0xa8>)
 80041f8:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80041fc:	f7ff fa3a 	bl	8003674 <LCD_ShowNum>
 8004200:	e7d8      	b.n	80041b4 <LCD_BCM_5_item+0x40>
    item = GET_MENU(item+1, BCM_5_ITEM_MAX);
 8004202:	3401      	adds	r4, #1
 8004204:	b2e4      	uxtb	r4, r4
 8004206:	e7d9      	b.n	80041bc <LCD_BCM_5_item+0x48>
        LCD_ShowNum(g_BCM_5[item]);
 8004208:	4b04      	ldr	r3, [pc, #16]	@ (800421c <LCD_BCM_5_item+0xa8>)
 800420a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800420e:	f7ff fa31 	bl	8003674 <LCD_ShowNum>
 8004212:	e7ec      	b.n	80041ee <LCD_BCM_5_item+0x7a>
 8004214:	20004754 	.word	0x20004754
 8004218:	200044d4 	.word	0x200044d4
 800421c:	200087c8 	.word	0x200087c8

08004220 <LCD_TBOX_4_item>:

void LCD_TBOX_4_item(uint8_t item, int16_t value)
{
 8004220:	b538      	push	{r3, r4, r5, lr}
    item = GET_MENU(item, TBOX_4_ITEM_MAX);
 8004222:	4604      	mov	r4, r0
 8004224:	b108      	cbz	r0, 800422a <LCD_TBOX_4_item+0xa>
 8004226:	1e44      	subs	r4, r0, #1
 8004228:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 800422a:	2083      	movs	r0, #131	@ 0x83
 800422c:	f7ff f9e4 	bl	80035f8 <write_com>
    hzkdis(TBOX_4Item[item]);
 8004230:	4625      	mov	r5, r4
 8004232:	4b1f      	ldr	r3, [pc, #124]	@ (80042b0 <LCD_TBOX_4_item+0x90>)
 8004234:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004238:	f7ff fa0e 	bl	8003658 <hzkdis>
    write_com(0x93);
 800423c:	2093      	movs	r0, #147	@ 0x93
 800423e:	f7ff f9db 	bl	80035f8 <write_com>
    if (strcmp(TBOX_4Value[item][0], "") != 0) {
 8004242:	01a3      	lsls	r3, r4, #6
 8004244:	4a1b      	ldr	r2, [pc, #108]	@ (80042b4 <LCD_TBOX_4_item+0x94>)
 8004246:	58d3      	ldr	r3, [r2, r3]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	b32b      	cbz	r3, 8004298 <LCD_TBOX_4_item+0x78>
        hzkdis(TBOX_4Value[item][g_TBOX_4[item]]);
 800424c:	4b1a      	ldr	r3, [pc, #104]	@ (80042b8 <LCD_TBOX_4_item+0x98>)
 800424e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004252:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004256:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800425a:	f7ff f9fd 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_TBOX_4[item]);
    }

    item = GET_MENU(item+1, TBOX_4_ITEM_MAX);
    write_com(0x8b);
 800425e:	208b      	movs	r0, #139	@ 0x8b
 8004260:	f7ff f9ca 	bl	80035f8 <write_com>
    hzkdis(TBOX_4Item[item]);
 8004264:	4b12      	ldr	r3, [pc, #72]	@ (80042b0 <LCD_TBOX_4_item+0x90>)
 8004266:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800426a:	f7ff f9f5 	bl	8003658 <hzkdis>
    write_com(0x9b);
 800426e:	209b      	movs	r0, #155	@ 0x9b
 8004270:	f7ff f9c2 	bl	80035f8 <write_com>
    if (strcmp(TBOX_4Value[item][0], "") != 0) {
 8004274:	01ab      	lsls	r3, r5, #6
 8004276:	4a0f      	ldr	r2, [pc, #60]	@ (80042b4 <LCD_TBOX_4_item+0x94>)
 8004278:	58d3      	ldr	r3, [r2, r3]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	b193      	cbz	r3, 80042a4 <LCD_TBOX_4_item+0x84>
        hzkdis(TBOX_4Value[item][g_TBOX_4[item]]);
 800427e:	4b0e      	ldr	r3, [pc, #56]	@ (80042b8 <LCD_TBOX_4_item+0x98>)
 8004280:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8004284:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 8004288:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800428c:	f7ff f9e4 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_TBOX_4[item]);
    }
    write_com(0x93);
 8004290:	2093      	movs	r0, #147	@ 0x93
 8004292:	f7ff f9b1 	bl	80035f8 <write_com>
}
 8004296:	bd38      	pop	{r3, r4, r5, pc}
        LCD_ShowNum(g_TBOX_4[item]);
 8004298:	4b07      	ldr	r3, [pc, #28]	@ (80042b8 <LCD_TBOX_4_item+0x98>)
 800429a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800429e:	f7ff f9e9 	bl	8003674 <LCD_ShowNum>
 80042a2:	e7dc      	b.n	800425e <LCD_TBOX_4_item+0x3e>
        LCD_ShowNum(g_TBOX_4[item]);
 80042a4:	4b04      	ldr	r3, [pc, #16]	@ (80042b8 <LCD_TBOX_4_item+0x98>)
 80042a6:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 80042aa:	f7ff f9e3 	bl	8003674 <LCD_ShowNum>
 80042ae:	e7ef      	b.n	8004290 <LCD_TBOX_4_item+0x70>
 80042b0:	200044bc 	.word	0x200044bc
 80042b4:	2000447c 	.word	0x2000447c
 80042b8:	200087c4 	.word	0x200087c4

080042bc <LCD_BCM_1_item>:
    	first_crash_flag = 1;
    }
}

void LCD_BCM_1_item(uint8_t item, int16_t value)
{
 80042bc:	b510      	push	{r4, lr}
 80042be:	4604      	mov	r4, r0
    item = GET_MENU(item, BCM_1_ITEM_MAX);
 80042c0:	2802      	cmp	r0, #2
 80042c2:	d901      	bls.n	80042c8 <LCD_BCM_1_item+0xc>
 80042c4:	1ec4      	subs	r4, r0, #3
 80042c6:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 80042c8:	2083      	movs	r0, #131	@ 0x83
 80042ca:	f7ff f995 	bl	80035f8 <write_com>
    hzkdis(BCM_1Item[item]);
 80042ce:	4b23      	ldr	r3, [pc, #140]	@ (800435c <LCD_BCM_1_item+0xa0>)
 80042d0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80042d4:	f7ff f9c0 	bl	8003658 <hzkdis>
    write_com(0x93);
 80042d8:	2093      	movs	r0, #147	@ 0x93
 80042da:	f7ff f98d 	bl	80035f8 <write_com>
    if (strcmp(BCM_1Value[item][0], "") != 0) {
 80042de:	01a3      	lsls	r3, r4, #6
 80042e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004360 <LCD_BCM_1_item+0xa4>)
 80042e2:	58d3      	ldr	r3, [r2, r3]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	b34b      	cbz	r3, 800433c <LCD_BCM_1_item+0x80>
        hzkdis(BCM_1Value[item][g_BCM_1[item]]);
 80042e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004364 <LCD_BCM_1_item+0xa8>)
 80042ea:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80042ee:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80042f2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80042f6:	f7ff f9af 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_BCM_1[item]);
    }

    item = GET_MENU(item+1, BCM_1_ITEM_MAX);
 80042fa:	2c01      	cmp	r4, #1
 80042fc:	d924      	bls.n	8004348 <LCD_BCM_1_item+0x8c>
 80042fe:	3c02      	subs	r4, #2
 8004300:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004302:	208b      	movs	r0, #139	@ 0x8b
 8004304:	f7ff f978 	bl	80035f8 <write_com>
    hzkdis(BCM_1Item[item]);
 8004308:	4b14      	ldr	r3, [pc, #80]	@ (800435c <LCD_BCM_1_item+0xa0>)
 800430a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800430e:	f7ff f9a3 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8004312:	209b      	movs	r0, #155	@ 0x9b
 8004314:	f7ff f970 	bl	80035f8 <write_com>
    if (strcmp(BCM_1Value[item][0], "") != 0) {
 8004318:	01a3      	lsls	r3, r4, #6
 800431a:	4a11      	ldr	r2, [pc, #68]	@ (8004360 <LCD_BCM_1_item+0xa4>)
 800431c:	58d3      	ldr	r3, [r2, r3]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	b1ab      	cbz	r3, 800434e <LCD_BCM_1_item+0x92>
        hzkdis(BCM_1Value[item][g_BCM_1[item]]);
 8004322:	4b10      	ldr	r3, [pc, #64]	@ (8004364 <LCD_BCM_1_item+0xa8>)
 8004324:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004328:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800432c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004330:	f7ff f992 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_BCM_1[item]);
    }
    write_com(0x93);
 8004334:	2093      	movs	r0, #147	@ 0x93
 8004336:	f7ff f95f 	bl	80035f8 <write_com>
}
 800433a:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_BCM_1[item]);
 800433c:	4b09      	ldr	r3, [pc, #36]	@ (8004364 <LCD_BCM_1_item+0xa8>)
 800433e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004342:	f7ff f997 	bl	8003674 <LCD_ShowNum>
 8004346:	e7d8      	b.n	80042fa <LCD_BCM_1_item+0x3e>
    item = GET_MENU(item+1, BCM_1_ITEM_MAX);
 8004348:	3401      	adds	r4, #1
 800434a:	b2e4      	uxtb	r4, r4
 800434c:	e7d9      	b.n	8004302 <LCD_BCM_1_item+0x46>
        LCD_ShowNum(g_BCM_1[item]);
 800434e:	4b05      	ldr	r3, [pc, #20]	@ (8004364 <LCD_BCM_1_item+0xa8>)
 8004350:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004354:	f7ff f98e 	bl	8003674 <LCD_ShowNum>
 8004358:	e7ec      	b.n	8004334 <LCD_BCM_1_item+0x78>
 800435a:	bf00      	nop
 800435c:	20004398 	.word	0x20004398
 8004360:	200042d8 	.word	0x200042d8
 8004364:	200087b4 	.word	0x200087b4

08004368 <LCD_BCM_4_item>:

void LCD_BCM_4_item(uint8_t item, int16_t value)
{
 8004368:	b510      	push	{r4, lr}
 800436a:	4604      	mov	r4, r0
    item = GET_MENU(item, BCM_4_ITEM_MAX);
 800436c:	2814      	cmp	r0, #20
 800436e:	d902      	bls.n	8004376 <LCD_BCM_4_item+0xe>
 8004370:	f1a0 0415 	sub.w	r4, r0, #21
 8004374:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004376:	2083      	movs	r0, #131	@ 0x83
 8004378:	f7ff f93e 	bl	80035f8 <write_com>
    hzkdis(BCM_4Item[item]);
 800437c:	4b22      	ldr	r3, [pc, #136]	@ (8004408 <LCD_BCM_4_item+0xa0>)
 800437e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004382:	f7ff f969 	bl	8003658 <hzkdis>
    write_com(0x93);
 8004386:	2093      	movs	r0, #147	@ 0x93
 8004388:	f7ff f936 	bl	80035f8 <write_com>
    if (strcmp(BCM_4Value[item][0], "") != 0) {
 800438c:	01a3      	lsls	r3, r4, #6
 800438e:	4a1f      	ldr	r2, [pc, #124]	@ (800440c <LCD_BCM_4_item+0xa4>)
 8004390:	58d3      	ldr	r3, [r2, r3]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	b34b      	cbz	r3, 80043ea <LCD_BCM_4_item+0x82>
        hzkdis(BCM_4Value[item][g_BCM_4[item]]);
 8004396:	4b1e      	ldr	r3, [pc, #120]	@ (8004410 <LCD_BCM_4_item+0xa8>)
 8004398:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800439c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80043a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80043a4:	f7ff f958 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_BCM_4[item]);
    }

    item = GET_MENU(item+1, BCM_4_ITEM_MAX);
 80043a8:	2c13      	cmp	r4, #19
 80043aa:	d924      	bls.n	80043f6 <LCD_BCM_4_item+0x8e>
 80043ac:	3c14      	subs	r4, #20
 80043ae:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80043b0:	208b      	movs	r0, #139	@ 0x8b
 80043b2:	f7ff f921 	bl	80035f8 <write_com>
    hzkdis(BCM_4Item[item]);
 80043b6:	4b14      	ldr	r3, [pc, #80]	@ (8004408 <LCD_BCM_4_item+0xa0>)
 80043b8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80043bc:	f7ff f94c 	bl	8003658 <hzkdis>
    write_com(0x9b);
 80043c0:	209b      	movs	r0, #155	@ 0x9b
 80043c2:	f7ff f919 	bl	80035f8 <write_com>
    if (strcmp(BCM_4Value[item][0], "") != 0) {
 80043c6:	01a3      	lsls	r3, r4, #6
 80043c8:	4a10      	ldr	r2, [pc, #64]	@ (800440c <LCD_BCM_4_item+0xa4>)
 80043ca:	58d3      	ldr	r3, [r2, r3]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	b1ab      	cbz	r3, 80043fc <LCD_BCM_4_item+0x94>
        hzkdis(BCM_4Value[item][g_BCM_4[item]]);
 80043d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004410 <LCD_BCM_4_item+0xa8>)
 80043d2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80043d6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80043da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80043de:	f7ff f93b 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_BCM_4[item]);
    }
    write_com(0x93);
 80043e2:	2093      	movs	r0, #147	@ 0x93
 80043e4:	f7ff f908 	bl	80035f8 <write_com>
}
 80043e8:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_BCM_4[item]);
 80043ea:	4b09      	ldr	r3, [pc, #36]	@ (8004410 <LCD_BCM_4_item+0xa8>)
 80043ec:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80043f0:	f7ff f940 	bl	8003674 <LCD_ShowNum>
 80043f4:	e7d8      	b.n	80043a8 <LCD_BCM_4_item+0x40>
    item = GET_MENU(item+1, BCM_4_ITEM_MAX);
 80043f6:	3401      	adds	r4, #1
 80043f8:	b2e4      	uxtb	r4, r4
 80043fa:	e7d9      	b.n	80043b0 <LCD_BCM_4_item+0x48>
        LCD_ShowNum(g_BCM_4[item]);
 80043fc:	4b04      	ldr	r3, [pc, #16]	@ (8004410 <LCD_BCM_4_item+0xa8>)
 80043fe:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004402:	f7ff f937 	bl	8003674 <LCD_ShowNum>
 8004406:	e7ec      	b.n	80043e2 <LCD_BCM_4_item+0x7a>
 8004408:	2000427c 	.word	0x2000427c
 800440c:	20003d3c 	.word	0x20003d3c
 8004410:	20008788 	.word	0x20008788

08004414 <LCD_TPMS_1_item>:

void LCD_TPMS_1_item(uint8_t item, int16_t value)
{
 8004414:	b510      	push	{r4, lr}
 8004416:	4604      	mov	r4, r0
    item = GET_MENU(item, TPMS_1_ITEM_MAX);
 8004418:	280a      	cmp	r0, #10
 800441a:	d902      	bls.n	8004422 <LCD_TPMS_1_item+0xe>
 800441c:	f1a0 040b 	sub.w	r4, r0, #11
 8004420:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004422:	2083      	movs	r0, #131	@ 0x83
 8004424:	f7ff f8e8 	bl	80035f8 <write_com>
    hzkdis(TPMS_1Item[item]);
 8004428:	4b22      	ldr	r3, [pc, #136]	@ (80044b4 <LCD_TPMS_1_item+0xa0>)
 800442a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800442e:	f7ff f913 	bl	8003658 <hzkdis>
    write_com(0x93);
 8004432:	2093      	movs	r0, #147	@ 0x93
 8004434:	f7ff f8e0 	bl	80035f8 <write_com>
    if (strcmp(TPMS_1Value[item][0], "") != 0) {
 8004438:	01a3      	lsls	r3, r4, #6
 800443a:	4a1f      	ldr	r2, [pc, #124]	@ (80044b8 <LCD_TPMS_1_item+0xa4>)
 800443c:	58d3      	ldr	r3, [r2, r3]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	b34b      	cbz	r3, 8004496 <LCD_TPMS_1_item+0x82>
        hzkdis(TPMS_1Value[item][g_TPMS_1[item]]);
 8004442:	4b1e      	ldr	r3, [pc, #120]	@ (80044bc <LCD_TPMS_1_item+0xa8>)
 8004444:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004448:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800444c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004450:	f7ff f902 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_TPMS_1[item]);
    }

    item = GET_MENU(item+1, TPMS_1_ITEM_MAX);
 8004454:	2c09      	cmp	r4, #9
 8004456:	d924      	bls.n	80044a2 <LCD_TPMS_1_item+0x8e>
 8004458:	3c0a      	subs	r4, #10
 800445a:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800445c:	208b      	movs	r0, #139	@ 0x8b
 800445e:	f7ff f8cb 	bl	80035f8 <write_com>
    hzkdis(TPMS_1Item[item]);
 8004462:	4b14      	ldr	r3, [pc, #80]	@ (80044b4 <LCD_TPMS_1_item+0xa0>)
 8004464:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004468:	f7ff f8f6 	bl	8003658 <hzkdis>
    write_com(0x9b);
 800446c:	209b      	movs	r0, #155	@ 0x9b
 800446e:	f7ff f8c3 	bl	80035f8 <write_com>
    if (strcmp(TPMS_1Value[item][0], "") != 0) {
 8004472:	01a3      	lsls	r3, r4, #6
 8004474:	4a10      	ldr	r2, [pc, #64]	@ (80044b8 <LCD_TPMS_1_item+0xa4>)
 8004476:	58d3      	ldr	r3, [r2, r3]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	b1ab      	cbz	r3, 80044a8 <LCD_TPMS_1_item+0x94>
        hzkdis(TPMS_1Value[item][g_TPMS_1[item]]);
 800447c:	4b0f      	ldr	r3, [pc, #60]	@ (80044bc <LCD_TPMS_1_item+0xa8>)
 800447e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004482:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004486:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800448a:	f7ff f8e5 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_TPMS_1[item]);
    }
    write_com(0x93);
 800448e:	2093      	movs	r0, #147	@ 0x93
 8004490:	f7ff f8b2 	bl	80035f8 <write_com>
}
 8004494:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_TPMS_1[item]);
 8004496:	4b09      	ldr	r3, [pc, #36]	@ (80044bc <LCD_TPMS_1_item+0xa8>)
 8004498:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800449c:	f7ff f8ea 	bl	8003674 <LCD_ShowNum>
 80044a0:	e7d8      	b.n	8004454 <LCD_TPMS_1_item+0x40>
    item = GET_MENU(item+1, TPMS_1_ITEM_MAX);
 80044a2:	3401      	adds	r4, #1
 80044a4:	b2e4      	uxtb	r4, r4
 80044a6:	e7d9      	b.n	800445c <LCD_TPMS_1_item+0x48>
        LCD_ShowNum(g_TPMS_1[item]);
 80044a8:	4b04      	ldr	r3, [pc, #16]	@ (80044bc <LCD_TPMS_1_item+0xa8>)
 80044aa:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80044ae:	f7ff f8e1 	bl	8003674 <LCD_ShowNum>
 80044b2:	e7ec      	b.n	800448e <LCD_TPMS_1_item+0x7a>
 80044b4:	20003ce4 	.word	0x20003ce4
 80044b8:	20003a24 	.word	0x20003a24
 80044bc:	20008770 	.word	0x20008770

080044c0 <LCD_IC_2_item>:
    }
    write_com(0x93);
}

void LCD_IC_2_item(uint8_t item, int16_t value)
{
 80044c0:	b510      	push	{r4, lr}
 80044c2:	4604      	mov	r4, r0
    item = GET_MENU(item, IC_2_ITEM_MAX);
 80044c4:	2801      	cmp	r0, #1
 80044c6:	d901      	bls.n	80044cc <LCD_IC_2_item+0xc>
 80044c8:	1e84      	subs	r4, r0, #2
 80044ca:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 80044cc:	2083      	movs	r0, #131	@ 0x83
 80044ce:	f7ff f893 	bl	80035f8 <write_com>
    hzkdis(IC_2Item[item]);
 80044d2:	4b22      	ldr	r3, [pc, #136]	@ (800455c <LCD_IC_2_item+0x9c>)
 80044d4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80044d8:	f7ff f8be 	bl	8003658 <hzkdis>
    write_com(0x93);
 80044dc:	2093      	movs	r0, #147	@ 0x93
 80044de:	f7ff f88b 	bl	80035f8 <write_com>
    if (strcmp(IC_2Value[item][0], "") != 0) {
 80044e2:	01a3      	lsls	r3, r4, #6
 80044e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004560 <LCD_IC_2_item+0xa0>)
 80044e6:	58d3      	ldr	r3, [r2, r3]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	b343      	cbz	r3, 800453e <LCD_IC_2_item+0x7e>
        hzkdis(IC_2Value[item][g_IC_2[item]]);
 80044ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004564 <LCD_IC_2_item+0xa4>)
 80044ee:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80044f2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80044f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80044fa:	f7ff f8ad 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_IC_2[item]);
    }

    item = GET_MENU(item+1, IC_2_ITEM_MAX);
 80044fe:	b324      	cbz	r4, 800454a <LCD_IC_2_item+0x8a>
 8004500:	3c01      	subs	r4, #1
 8004502:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004504:	208b      	movs	r0, #139	@ 0x8b
 8004506:	f7ff f877 	bl	80035f8 <write_com>
    hzkdis(IC_2Item[item]);
 800450a:	4b14      	ldr	r3, [pc, #80]	@ (800455c <LCD_IC_2_item+0x9c>)
 800450c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004510:	f7ff f8a2 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8004514:	209b      	movs	r0, #155	@ 0x9b
 8004516:	f7ff f86f 	bl	80035f8 <write_com>
    if (strcmp(IC_2Value[item][0], "") != 0) {
 800451a:	01a3      	lsls	r3, r4, #6
 800451c:	4a10      	ldr	r2, [pc, #64]	@ (8004560 <LCD_IC_2_item+0xa0>)
 800451e:	58d3      	ldr	r3, [r2, r3]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	b1ab      	cbz	r3, 8004550 <LCD_IC_2_item+0x90>
        hzkdis(IC_2Value[item][g_IC_2[item]]);
 8004524:	4b0f      	ldr	r3, [pc, #60]	@ (8004564 <LCD_IC_2_item+0xa4>)
 8004526:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800452a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800452e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004532:	f7ff f891 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_IC_2[item]);
    }
    write_com(0x93);
 8004536:	2093      	movs	r0, #147	@ 0x93
 8004538:	f7ff f85e 	bl	80035f8 <write_com>
}
 800453c:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_IC_2[item]);
 800453e:	4b09      	ldr	r3, [pc, #36]	@ (8004564 <LCD_IC_2_item+0xa4>)
 8004540:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004544:	f7ff f896 	bl	8003674 <LCD_ShowNum>
 8004548:	e7d9      	b.n	80044fe <LCD_IC_2_item+0x3e>
    item = GET_MENU(item+1, IC_2_ITEM_MAX);
 800454a:	3401      	adds	r4, #1
 800454c:	b2e4      	uxtb	r4, r4
 800454e:	e7d9      	b.n	8004504 <LCD_IC_2_item+0x44>
        LCD_ShowNum(g_IC_2[item]);
 8004550:	4b04      	ldr	r3, [pc, #16]	@ (8004564 <LCD_IC_2_item+0xa4>)
 8004552:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004556:	f7ff f88d 	bl	8003674 <LCD_ShowNum>
 800455a:	e7ec      	b.n	8004536 <LCD_IC_2_item+0x76>
 800455c:	2000353c 	.word	0x2000353c
 8004560:	200034bc 	.word	0x200034bc
 8004564:	20008728 	.word	0x20008728

08004568 <LCD_GW_PC_4_item>:

void LCD_GW_PC_4_item(uint8_t item, int16_t value)
{
 8004568:	b510      	push	{r4, lr}
 800456a:	4604      	mov	r4, r0
    item = GET_MENU(item, GW_PC_4_ITEM_MAX);
 800456c:	2804      	cmp	r0, #4
 800456e:	d901      	bls.n	8004574 <LCD_GW_PC_4_item+0xc>
 8004570:	1f44      	subs	r4, r0, #5
 8004572:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004574:	2083      	movs	r0, #131	@ 0x83
 8004576:	f7ff f83f 	bl	80035f8 <write_com>
    hzkdis(GW_PC_4Item[item]);
 800457a:	4b23      	ldr	r3, [pc, #140]	@ (8004608 <LCD_GW_PC_4_item+0xa0>)
 800457c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004580:	f7ff f86a 	bl	8003658 <hzkdis>
    write_com(0x93);
 8004584:	2093      	movs	r0, #147	@ 0x93
 8004586:	f7ff f837 	bl	80035f8 <write_com>
    if (strcmp(GW_PC_4Value[item][0], "") != 0) {
 800458a:	01a3      	lsls	r3, r4, #6
 800458c:	4a1f      	ldr	r2, [pc, #124]	@ (800460c <LCD_GW_PC_4_item+0xa4>)
 800458e:	58d3      	ldr	r3, [r2, r3]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	b34b      	cbz	r3, 80045e8 <LCD_GW_PC_4_item+0x80>
        hzkdis(GW_PC_4Value[item][g_GW_PC_4[item]]);
 8004594:	4b1e      	ldr	r3, [pc, #120]	@ (8004610 <LCD_GW_PC_4_item+0xa8>)
 8004596:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800459a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800459e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80045a2:	f7ff f859 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_PC_4[item]);
    }

    item = GET_MENU(item+1, GW_PC_4_ITEM_MAX);
 80045a6:	2c03      	cmp	r4, #3
 80045a8:	d924      	bls.n	80045f4 <LCD_GW_PC_4_item+0x8c>
 80045aa:	3c04      	subs	r4, #4
 80045ac:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80045ae:	208b      	movs	r0, #139	@ 0x8b
 80045b0:	f7ff f822 	bl	80035f8 <write_com>
    hzkdis(GW_PC_4Item[item]);
 80045b4:	4b14      	ldr	r3, [pc, #80]	@ (8004608 <LCD_GW_PC_4_item+0xa0>)
 80045b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80045ba:	f7ff f84d 	bl	8003658 <hzkdis>
    write_com(0x9b);
 80045be:	209b      	movs	r0, #155	@ 0x9b
 80045c0:	f7ff f81a 	bl	80035f8 <write_com>
    if (strcmp(GW_PC_4Value[item][0], "") != 0) {
 80045c4:	01a3      	lsls	r3, r4, #6
 80045c6:	4a11      	ldr	r2, [pc, #68]	@ (800460c <LCD_GW_PC_4_item+0xa4>)
 80045c8:	58d3      	ldr	r3, [r2, r3]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	b1ab      	cbz	r3, 80045fa <LCD_GW_PC_4_item+0x92>
        hzkdis(GW_PC_4Value[item][g_GW_PC_4[item]]);
 80045ce:	4b10      	ldr	r3, [pc, #64]	@ (8004610 <LCD_GW_PC_4_item+0xa8>)
 80045d0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80045d4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80045d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80045dc:	f7ff f83c 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_PC_4[item]);
    }
    write_com(0x93);
 80045e0:	2093      	movs	r0, #147	@ 0x93
 80045e2:	f7ff f809 	bl	80035f8 <write_com>
}
 80045e6:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_GW_PC_4[item]);
 80045e8:	4b09      	ldr	r3, [pc, #36]	@ (8004610 <LCD_GW_PC_4_item+0xa8>)
 80045ea:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80045ee:	f7ff f841 	bl	8003674 <LCD_ShowNum>
 80045f2:	e7d8      	b.n	80045a6 <LCD_GW_PC_4_item+0x3e>
    item = GET_MENU(item+1, GW_PC_4_ITEM_MAX);
 80045f4:	3401      	adds	r4, #1
 80045f6:	b2e4      	uxtb	r4, r4
 80045f8:	e7d9      	b.n	80045ae <LCD_GW_PC_4_item+0x46>
        LCD_ShowNum(g_GW_PC_4[item]);
 80045fa:	4b05      	ldr	r3, [pc, #20]	@ (8004610 <LCD_GW_PC_4_item+0xa8>)
 80045fc:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004600:	f7ff f838 	bl	8003674 <LCD_ShowNum>
 8004604:	e7ec      	b.n	80045e0 <LCD_GW_PC_4_item+0x78>
 8004606:	bf00      	nop
 8004608:	200034a4 	.word	0x200034a4
 800460c:	20003364 	.word	0x20003364
 8004610:	2000871c 	.word	0x2000871c

08004614 <LCD_GW_BD_14_item>:

void LCD_GW_BD_14_item(uint8_t item, int16_t value)
{
 8004614:	b510      	push	{r4, lr}
 8004616:	4604      	mov	r4, r0
    item = GET_MENU(item, GW_BD_14_ITEM_MAX);
 8004618:	2816      	cmp	r0, #22
 800461a:	d902      	bls.n	8004622 <LCD_GW_BD_14_item+0xe>
 800461c:	f1a0 0417 	sub.w	r4, r0, #23
 8004620:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004622:	2083      	movs	r0, #131	@ 0x83
 8004624:	f7fe ffe8 	bl	80035f8 <write_com>
    hzkdis(GW_BD_14Item[item]);
 8004628:	4b22      	ldr	r3, [pc, #136]	@ (80046b4 <LCD_GW_BD_14_item+0xa0>)
 800462a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800462e:	f7ff f813 	bl	8003658 <hzkdis>
    write_com(0x93);
 8004632:	2093      	movs	r0, #147	@ 0x93
 8004634:	f7fe ffe0 	bl	80035f8 <write_com>
    if (strcmp(GW_BD_14Value[item][0], "") != 0) {
 8004638:	01a3      	lsls	r3, r4, #6
 800463a:	4a1f      	ldr	r2, [pc, #124]	@ (80046b8 <LCD_GW_BD_14_item+0xa4>)
 800463c:	58d3      	ldr	r3, [r2, r3]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	b34b      	cbz	r3, 8004696 <LCD_GW_BD_14_item+0x82>
        hzkdis(GW_BD_14Value[item][g_GW_BD_14[item]]);
 8004642:	4b1e      	ldr	r3, [pc, #120]	@ (80046bc <LCD_GW_BD_14_item+0xa8>)
 8004644:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004648:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800464c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004650:	f7ff f802 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_BD_14[item]);
    }

    item = GET_MENU(item+1, GW_BD_14_ITEM_MAX);
 8004654:	2c15      	cmp	r4, #21
 8004656:	d924      	bls.n	80046a2 <LCD_GW_BD_14_item+0x8e>
 8004658:	3c16      	subs	r4, #22
 800465a:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800465c:	208b      	movs	r0, #139	@ 0x8b
 800465e:	f7fe ffcb 	bl	80035f8 <write_com>
    hzkdis(GW_BD_14Item[item]);
 8004662:	4b14      	ldr	r3, [pc, #80]	@ (80046b4 <LCD_GW_BD_14_item+0xa0>)
 8004664:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004668:	f7fe fff6 	bl	8003658 <hzkdis>
    write_com(0x9b);
 800466c:	209b      	movs	r0, #155	@ 0x9b
 800466e:	f7fe ffc3 	bl	80035f8 <write_com>
    if (strcmp(GW_BD_14Value[item][0], "") != 0) {
 8004672:	01a3      	lsls	r3, r4, #6
 8004674:	4a10      	ldr	r2, [pc, #64]	@ (80046b8 <LCD_GW_BD_14_item+0xa4>)
 8004676:	58d3      	ldr	r3, [r2, r3]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	b1ab      	cbz	r3, 80046a8 <LCD_GW_BD_14_item+0x94>
        hzkdis(GW_BD_14Value[item][g_GW_BD_14[item]]);
 800467c:	4b0f      	ldr	r3, [pc, #60]	@ (80046bc <LCD_GW_BD_14_item+0xa8>)
 800467e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004682:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004686:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800468a:	f7fe ffe5 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_BD_14[item]);
    }
    write_com(0x93);
 800468e:	2093      	movs	r0, #147	@ 0x93
 8004690:	f7fe ffb2 	bl	80035f8 <write_com>
}
 8004694:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_GW_BD_14[item]);
 8004696:	4b09      	ldr	r3, [pc, #36]	@ (80046bc <LCD_GW_BD_14_item+0xa8>)
 8004698:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800469c:	f7fe ffea 	bl	8003674 <LCD_ShowNum>
 80046a0:	e7d8      	b.n	8004654 <LCD_GW_BD_14_item+0x40>
    item = GET_MENU(item+1, GW_BD_14_ITEM_MAX);
 80046a2:	3401      	adds	r4, #1
 80046a4:	b2e4      	uxtb	r4, r4
 80046a6:	e7d9      	b.n	800465c <LCD_GW_BD_14_item+0x48>
        LCD_ShowNum(g_GW_BD_14[item]);
 80046a8:	4b04      	ldr	r3, [pc, #16]	@ (80046bc <LCD_GW_BD_14_item+0xa8>)
 80046aa:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80046ae:	f7fe ffe1 	bl	8003674 <LCD_ShowNum>
 80046b2:	e7ec      	b.n	800468e <LCD_GW_BD_14_item+0x7a>
 80046b4:	200032fc 	.word	0x200032fc
 80046b8:	20002d3c 	.word	0x20002d3c
 80046bc:	200086ec 	.word	0x200086ec

080046c0 <LCD_IHU_4_item>:

void LCD_IHU_4_item(uint8_t item, int16_t value)
{
 80046c0:	b510      	push	{r4, lr}
 80046c2:	4604      	mov	r4, r0
    item = GET_MENU(item, IHU_4_ITEM_MAX);
 80046c4:	2803      	cmp	r0, #3
 80046c6:	d901      	bls.n	80046cc <LCD_IHU_4_item+0xc>
 80046c8:	1f04      	subs	r4, r0, #4
 80046ca:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 80046cc:	2083      	movs	r0, #131	@ 0x83
 80046ce:	f7fe ff93 	bl	80035f8 <write_com>
    hzkdis(IHU_4Item[item]);
 80046d2:	4b23      	ldr	r3, [pc, #140]	@ (8004760 <LCD_IHU_4_item+0xa0>)
 80046d4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80046d8:	f7fe ffbe 	bl	8003658 <hzkdis>
    write_com(0x93);
 80046dc:	2093      	movs	r0, #147	@ 0x93
 80046de:	f7fe ff8b 	bl	80035f8 <write_com>
    if (strcmp(IHU_4Value[item][0], "") != 0) {
 80046e2:	01a3      	lsls	r3, r4, #6
 80046e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004764 <LCD_IHU_4_item+0xa4>)
 80046e6:	58d3      	ldr	r3, [r2, r3]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	b34b      	cbz	r3, 8004740 <LCD_IHU_4_item+0x80>
        hzkdis(IHU_4Value[item][g_IHU_4[item]]);
 80046ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004768 <LCD_IHU_4_item+0xa8>)
 80046ee:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80046f2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80046f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80046fa:	f7fe ffad 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_IHU_4[item]);
    }

    item = GET_MENU(item+1, IHU_4_ITEM_MAX);
 80046fe:	2c02      	cmp	r4, #2
 8004700:	d924      	bls.n	800474c <LCD_IHU_4_item+0x8c>
 8004702:	3c03      	subs	r4, #3
 8004704:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004706:	208b      	movs	r0, #139	@ 0x8b
 8004708:	f7fe ff76 	bl	80035f8 <write_com>
    hzkdis(IHU_4Item[item]);
 800470c:	4b14      	ldr	r3, [pc, #80]	@ (8004760 <LCD_IHU_4_item+0xa0>)
 800470e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004712:	f7fe ffa1 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8004716:	209b      	movs	r0, #155	@ 0x9b
 8004718:	f7fe ff6e 	bl	80035f8 <write_com>
    if (strcmp(IHU_4Value[item][0], "") != 0) {
 800471c:	01a3      	lsls	r3, r4, #6
 800471e:	4a11      	ldr	r2, [pc, #68]	@ (8004764 <LCD_IHU_4_item+0xa4>)
 8004720:	58d3      	ldr	r3, [r2, r3]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	b1ab      	cbz	r3, 8004752 <LCD_IHU_4_item+0x92>
        hzkdis(IHU_4Value[item][g_IHU_4[item]]);
 8004726:	4b10      	ldr	r3, [pc, #64]	@ (8004768 <LCD_IHU_4_item+0xa8>)
 8004728:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800472c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004730:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004734:	f7fe ff90 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_IHU_4[item]);
    }
    write_com(0x93);
 8004738:	2093      	movs	r0, #147	@ 0x93
 800473a:	f7fe ff5d 	bl	80035f8 <write_com>
}
 800473e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_IHU_4[item]);
 8004740:	4b09      	ldr	r3, [pc, #36]	@ (8004768 <LCD_IHU_4_item+0xa8>)
 8004742:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004746:	f7fe ff95 	bl	8003674 <LCD_ShowNum>
 800474a:	e7d8      	b.n	80046fe <LCD_IHU_4_item+0x3e>
    item = GET_MENU(item+1, IHU_4_ITEM_MAX);
 800474c:	3401      	adds	r4, #1
 800474e:	b2e4      	uxtb	r4, r4
 8004750:	e7d9      	b.n	8004706 <LCD_IHU_4_item+0x46>
        LCD_ShowNum(g_IHU_4[item]);
 8004752:	4b05      	ldr	r3, [pc, #20]	@ (8004768 <LCD_IHU_4_item+0xa8>)
 8004754:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004758:	f7fe ff8c 	bl	8003674 <LCD_ShowNum>
 800475c:	e7ec      	b.n	8004738 <LCD_IHU_4_item+0x78>
 800475e:	bf00      	nop
 8004760:	20002cfc 	.word	0x20002cfc
 8004764:	20002bfc 	.word	0x20002bfc
 8004768:	200086e4 	.word	0x200086e4

0800476c <LCD_IHU_5_item>:

void LCD_IHU_5_item(uint8_t item, int16_t value)
{
 800476c:	b510      	push	{r4, lr}
 800476e:	4604      	mov	r4, r0
    item = GET_MENU(item, IHU_5_ITEM_MAX);
 8004770:	280b      	cmp	r0, #11
 8004772:	d902      	bls.n	800477a <LCD_IHU_5_item+0xe>
 8004774:	f1a0 040c 	sub.w	r4, r0, #12
 8004778:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 800477a:	2083      	movs	r0, #131	@ 0x83
 800477c:	f7fe ff3c 	bl	80035f8 <write_com>
    hzkdis(IHU_5Item[item]);
 8004780:	4b22      	ldr	r3, [pc, #136]	@ (800480c <LCD_IHU_5_item+0xa0>)
 8004782:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004786:	f7fe ff67 	bl	8003658 <hzkdis>
    write_com(0x93);
 800478a:	2093      	movs	r0, #147	@ 0x93
 800478c:	f7fe ff34 	bl	80035f8 <write_com>
    if (strcmp(IHU_5Value[item][0], "") != 0) {
 8004790:	01a3      	lsls	r3, r4, #6
 8004792:	4a1f      	ldr	r2, [pc, #124]	@ (8004810 <LCD_IHU_5_item+0xa4>)
 8004794:	58d3      	ldr	r3, [r2, r3]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	b34b      	cbz	r3, 80047ee <LCD_IHU_5_item+0x82>
        hzkdis(IHU_5Value[item][g_IHU_5[item]]);
 800479a:	4b1e      	ldr	r3, [pc, #120]	@ (8004814 <LCD_IHU_5_item+0xa8>)
 800479c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80047a0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80047a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80047a8:	f7fe ff56 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_IHU_5[item]);
    }

    item = GET_MENU(item+1, IHU_5_ITEM_MAX);
 80047ac:	2c0a      	cmp	r4, #10
 80047ae:	d924      	bls.n	80047fa <LCD_IHU_5_item+0x8e>
 80047b0:	3c0b      	subs	r4, #11
 80047b2:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80047b4:	208b      	movs	r0, #139	@ 0x8b
 80047b6:	f7fe ff1f 	bl	80035f8 <write_com>
    hzkdis(IHU_5Item[item]);
 80047ba:	4b14      	ldr	r3, [pc, #80]	@ (800480c <LCD_IHU_5_item+0xa0>)
 80047bc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80047c0:	f7fe ff4a 	bl	8003658 <hzkdis>
    write_com(0x9b);
 80047c4:	209b      	movs	r0, #155	@ 0x9b
 80047c6:	f7fe ff17 	bl	80035f8 <write_com>
    if (strcmp(IHU_5Value[item][0], "") != 0) {
 80047ca:	01a3      	lsls	r3, r4, #6
 80047cc:	4a10      	ldr	r2, [pc, #64]	@ (8004810 <LCD_IHU_5_item+0xa4>)
 80047ce:	58d3      	ldr	r3, [r2, r3]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	b1ab      	cbz	r3, 8004800 <LCD_IHU_5_item+0x94>
        hzkdis(IHU_5Value[item][g_IHU_5[item]]);
 80047d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004814 <LCD_IHU_5_item+0xa8>)
 80047d6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80047da:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80047de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80047e2:	f7fe ff39 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_IHU_5[item]);
    }
    write_com(0x93);
 80047e6:	2093      	movs	r0, #147	@ 0x93
 80047e8:	f7fe ff06 	bl	80035f8 <write_com>
}
 80047ec:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_IHU_5[item]);
 80047ee:	4b09      	ldr	r3, [pc, #36]	@ (8004814 <LCD_IHU_5_item+0xa8>)
 80047f0:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80047f4:	f7fe ff3e 	bl	8003674 <LCD_ShowNum>
 80047f8:	e7d8      	b.n	80047ac <LCD_IHU_5_item+0x40>
    item = GET_MENU(item+1, IHU_5_ITEM_MAX);
 80047fa:	3401      	adds	r4, #1
 80047fc:	b2e4      	uxtb	r4, r4
 80047fe:	e7d9      	b.n	80047b4 <LCD_IHU_5_item+0x48>
        LCD_ShowNum(g_IHU_5[item]);
 8004800:	4b04      	ldr	r3, [pc, #16]	@ (8004814 <LCD_IHU_5_item+0xa8>)
 8004802:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004806:	f7fe ff35 	bl	8003674 <LCD_ShowNum>
 800480a:	e7ec      	b.n	80047e6 <LCD_IHU_5_item+0x7a>
 800480c:	20002bc4 	.word	0x20002bc4
 8004810:	200028c4 	.word	0x200028c4
 8004814:	200086cc 	.word	0x200086cc

08004818 <LCD_GW_BD_29_item>:

void LCD_GW_BD_29_item(uint8_t item, int16_t value)
{
 8004818:	b510      	push	{r4, lr}
 800481a:	4604      	mov	r4, r0
    item = GET_MENU(item, GW_BD_29_ITEM_MAX);
 800481c:	280c      	cmp	r0, #12
 800481e:	d902      	bls.n	8004826 <LCD_GW_BD_29_item+0xe>
 8004820:	f1a0 040d 	sub.w	r4, r0, #13
 8004824:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004826:	2083      	movs	r0, #131	@ 0x83
 8004828:	f7fe fee6 	bl	80035f8 <write_com>
    hzkdis(GW_BD_29Item[item]);
 800482c:	4b22      	ldr	r3, [pc, #136]	@ (80048b8 <LCD_GW_BD_29_item+0xa0>)
 800482e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004832:	f7fe ff11 	bl	8003658 <hzkdis>
    write_com(0x93);
 8004836:	2093      	movs	r0, #147	@ 0x93
 8004838:	f7fe fede 	bl	80035f8 <write_com>
    if (strcmp(GW_BD_29Value[item][0], "") != 0) {
 800483c:	01a3      	lsls	r3, r4, #6
 800483e:	4a1f      	ldr	r2, [pc, #124]	@ (80048bc <LCD_GW_BD_29_item+0xa4>)
 8004840:	58d3      	ldr	r3, [r2, r3]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	b34b      	cbz	r3, 800489a <LCD_GW_BD_29_item+0x82>
        hzkdis(GW_BD_29Value[item][g_GW_BD_29[item]]);
 8004846:	4b1e      	ldr	r3, [pc, #120]	@ (80048c0 <LCD_GW_BD_29_item+0xa8>)
 8004848:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800484c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004850:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004854:	f7fe ff00 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_BD_29[item]);
    }

    item = GET_MENU(item+1, GW_BD_29_ITEM_MAX);
 8004858:	2c0b      	cmp	r4, #11
 800485a:	d924      	bls.n	80048a6 <LCD_GW_BD_29_item+0x8e>
 800485c:	3c0c      	subs	r4, #12
 800485e:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004860:	208b      	movs	r0, #139	@ 0x8b
 8004862:	f7fe fec9 	bl	80035f8 <write_com>
    hzkdis(GW_BD_29Item[item]);
 8004866:	4b14      	ldr	r3, [pc, #80]	@ (80048b8 <LCD_GW_BD_29_item+0xa0>)
 8004868:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800486c:	f7fe fef4 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8004870:	209b      	movs	r0, #155	@ 0x9b
 8004872:	f7fe fec1 	bl	80035f8 <write_com>
    if (strcmp(GW_BD_29Value[item][0], "") != 0) {
 8004876:	01a3      	lsls	r3, r4, #6
 8004878:	4a10      	ldr	r2, [pc, #64]	@ (80048bc <LCD_GW_BD_29_item+0xa4>)
 800487a:	58d3      	ldr	r3, [r2, r3]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	b1ab      	cbz	r3, 80048ac <LCD_GW_BD_29_item+0x94>
        hzkdis(GW_BD_29Value[item][g_GW_BD_29[item]]);
 8004880:	4b0f      	ldr	r3, [pc, #60]	@ (80048c0 <LCD_GW_BD_29_item+0xa8>)
 8004882:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004886:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800488a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800488e:	f7fe fee3 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_BD_29[item]);
    }
    write_com(0x93);
 8004892:	2093      	movs	r0, #147	@ 0x93
 8004894:	f7fe feb0 	bl	80035f8 <write_com>
}
 8004898:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_GW_BD_29[item]);
 800489a:	4b09      	ldr	r3, [pc, #36]	@ (80048c0 <LCD_GW_BD_29_item+0xa8>)
 800489c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80048a0:	f7fe fee8 	bl	8003674 <LCD_ShowNum>
 80048a4:	e7d8      	b.n	8004858 <LCD_GW_BD_29_item+0x40>
    item = GET_MENU(item+1, GW_BD_29_ITEM_MAX);
 80048a6:	3401      	adds	r4, #1
 80048a8:	b2e4      	uxtb	r4, r4
 80048aa:	e7d9      	b.n	8004860 <LCD_GW_BD_29_item+0x48>
        LCD_ShowNum(g_GW_BD_29[item]);
 80048ac:	4b04      	ldr	r3, [pc, #16]	@ (80048c0 <LCD_GW_BD_29_item+0xa8>)
 80048ae:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80048b2:	f7fe fedf 	bl	8003674 <LCD_ShowNum>
 80048b6:	e7ec      	b.n	8004892 <LCD_GW_BD_29_item+0x7a>
 80048b8:	20002878 	.word	0x20002878
 80048bc:	20002538 	.word	0x20002538
 80048c0:	200086b0 	.word	0x200086b0

080048c4 <LCD_IHU_2_item>:

void LCD_IHU_2_item(uint8_t item, int16_t value)
{
 80048c4:	b510      	push	{r4, lr}
 80048c6:	4604      	mov	r4, r0
    item = GET_MENU(item, IHU_2_ITEM_MAX);
 80048c8:	2805      	cmp	r0, #5
 80048ca:	d901      	bls.n	80048d0 <LCD_IHU_2_item+0xc>
 80048cc:	1f84      	subs	r4, r0, #6
 80048ce:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 80048d0:	2083      	movs	r0, #131	@ 0x83
 80048d2:	f7fe fe91 	bl	80035f8 <write_com>
    hzkdis(IHU_2Item[item]);
 80048d6:	4b23      	ldr	r3, [pc, #140]	@ (8004964 <LCD_IHU_2_item+0xa0>)
 80048d8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80048dc:	f7fe febc 	bl	8003658 <hzkdis>
    write_com(0x93);
 80048e0:	2093      	movs	r0, #147	@ 0x93
 80048e2:	f7fe fe89 	bl	80035f8 <write_com>
    if (strcmp(IHU_2Value[item][0], "") != 0) {
 80048e6:	01a3      	lsls	r3, r4, #6
 80048e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004968 <LCD_IHU_2_item+0xa4>)
 80048ea:	58d3      	ldr	r3, [r2, r3]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	b34b      	cbz	r3, 8004944 <LCD_IHU_2_item+0x80>
        hzkdis(IHU_2Value[item][g_IHU_2[item]]);
 80048f0:	4b1e      	ldr	r3, [pc, #120]	@ (800496c <LCD_IHU_2_item+0xa8>)
 80048f2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80048f6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80048fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80048fe:	f7fe feab 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_IHU_2[item]);
    }

    item = GET_MENU(item+1, IHU_2_ITEM_MAX);
 8004902:	2c04      	cmp	r4, #4
 8004904:	d924      	bls.n	8004950 <LCD_IHU_2_item+0x8c>
 8004906:	3c05      	subs	r4, #5
 8004908:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800490a:	208b      	movs	r0, #139	@ 0x8b
 800490c:	f7fe fe74 	bl	80035f8 <write_com>
    hzkdis(IHU_2Item[item]);
 8004910:	4b14      	ldr	r3, [pc, #80]	@ (8004964 <LCD_IHU_2_item+0xa0>)
 8004912:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004916:	f7fe fe9f 	bl	8003658 <hzkdis>
    write_com(0x9b);
 800491a:	209b      	movs	r0, #155	@ 0x9b
 800491c:	f7fe fe6c 	bl	80035f8 <write_com>
    if (strcmp(IHU_2Value[item][0], "") != 0) {
 8004920:	01a3      	lsls	r3, r4, #6
 8004922:	4a11      	ldr	r2, [pc, #68]	@ (8004968 <LCD_IHU_2_item+0xa4>)
 8004924:	58d3      	ldr	r3, [r2, r3]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	b1ab      	cbz	r3, 8004956 <LCD_IHU_2_item+0x92>
        hzkdis(IHU_2Value[item][g_IHU_2[item]]);
 800492a:	4b10      	ldr	r3, [pc, #64]	@ (800496c <LCD_IHU_2_item+0xa8>)
 800492c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004930:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004934:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004938:	f7fe fe8e 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_IHU_2[item]);
    }
    write_com(0x93);
 800493c:	2093      	movs	r0, #147	@ 0x93
 800493e:	f7fe fe5b 	bl	80035f8 <write_com>
}
 8004942:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_IHU_2[item]);
 8004944:	4b09      	ldr	r3, [pc, #36]	@ (800496c <LCD_IHU_2_item+0xa8>)
 8004946:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800494a:	f7fe fe93 	bl	8003674 <LCD_ShowNum>
 800494e:	e7d8      	b.n	8004902 <LCD_IHU_2_item+0x3e>
    item = GET_MENU(item+1, IHU_2_ITEM_MAX);
 8004950:	3401      	adds	r4, #1
 8004952:	b2e4      	uxtb	r4, r4
 8004954:	e7d9      	b.n	800490a <LCD_IHU_2_item+0x46>
        LCD_ShowNum(g_IHU_2[item]);
 8004956:	4b05      	ldr	r3, [pc, #20]	@ (800496c <LCD_IHU_2_item+0xa8>)
 8004958:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800495c:	f7fe fe8a 	bl	8003674 <LCD_ShowNum>
 8004960:	e7ec      	b.n	800493c <LCD_IHU_2_item+0x78>
 8004962:	bf00      	nop
 8004964:	20002504 	.word	0x20002504
 8004968:	20002384 	.word	0x20002384
 800496c:	200086a4 	.word	0x200086a4

08004970 <LCD_IHU_9_item>:
    }
    write_com(0x93);
}

void LCD_IHU_9_item(uint8_t item, int16_t value)
{
 8004970:	b510      	push	{r4, lr}
 8004972:	4604      	mov	r4, r0
    item = GET_MENU(item, IHU_9_ITEM_MAX);
 8004974:	2802      	cmp	r0, #2
 8004976:	d901      	bls.n	800497c <LCD_IHU_9_item+0xc>
 8004978:	1ec4      	subs	r4, r0, #3
 800497a:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 800497c:	2083      	movs	r0, #131	@ 0x83
 800497e:	f7fe fe3b 	bl	80035f8 <write_com>
    hzkdis(IHU_9Item[item]);
 8004982:	4b23      	ldr	r3, [pc, #140]	@ (8004a10 <LCD_IHU_9_item+0xa0>)
 8004984:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004988:	f7fe fe66 	bl	8003658 <hzkdis>
    write_com(0x93);
 800498c:	2093      	movs	r0, #147	@ 0x93
 800498e:	f7fe fe33 	bl	80035f8 <write_com>
    if (strcmp(IHU_9Value[item][0], "") != 0) {
 8004992:	01a3      	lsls	r3, r4, #6
 8004994:	4a1f      	ldr	r2, [pc, #124]	@ (8004a14 <LCD_IHU_9_item+0xa4>)
 8004996:	58d3      	ldr	r3, [r2, r3]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	b34b      	cbz	r3, 80049f0 <LCD_IHU_9_item+0x80>
        hzkdis(IHU_9Value[item][g_IHU_9[item]]);
 800499c:	4b1e      	ldr	r3, [pc, #120]	@ (8004a18 <LCD_IHU_9_item+0xa8>)
 800499e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80049a2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80049a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80049aa:	f7fe fe55 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_IHU_9[item]);
    }

    item = GET_MENU(item+1, IHU_9_ITEM_MAX);
 80049ae:	2c01      	cmp	r4, #1
 80049b0:	d924      	bls.n	80049fc <LCD_IHU_9_item+0x8c>
 80049b2:	3c02      	subs	r4, #2
 80049b4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80049b6:	208b      	movs	r0, #139	@ 0x8b
 80049b8:	f7fe fe1e 	bl	80035f8 <write_com>
    hzkdis(IHU_9Item[item]);
 80049bc:	4b14      	ldr	r3, [pc, #80]	@ (8004a10 <LCD_IHU_9_item+0xa0>)
 80049be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80049c2:	f7fe fe49 	bl	8003658 <hzkdis>
    write_com(0x9b);
 80049c6:	209b      	movs	r0, #155	@ 0x9b
 80049c8:	f7fe fe16 	bl	80035f8 <write_com>
    if (strcmp(IHU_9Value[item][0], "") != 0) {
 80049cc:	01a3      	lsls	r3, r4, #6
 80049ce:	4a11      	ldr	r2, [pc, #68]	@ (8004a14 <LCD_IHU_9_item+0xa4>)
 80049d0:	58d3      	ldr	r3, [r2, r3]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	b1ab      	cbz	r3, 8004a02 <LCD_IHU_9_item+0x92>
        hzkdis(IHU_9Value[item][g_IHU_9[item]]);
 80049d6:	4b10      	ldr	r3, [pc, #64]	@ (8004a18 <LCD_IHU_9_item+0xa8>)
 80049d8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80049dc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80049e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80049e4:	f7fe fe38 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_IHU_9[item]);
    }
    write_com(0x93);
 80049e8:	2093      	movs	r0, #147	@ 0x93
 80049ea:	f7fe fe05 	bl	80035f8 <write_com>
}
 80049ee:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_IHU_9[item]);
 80049f0:	4b09      	ldr	r3, [pc, #36]	@ (8004a18 <LCD_IHU_9_item+0xa8>)
 80049f2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80049f6:	f7fe fe3d 	bl	8003674 <LCD_ShowNum>
 80049fa:	e7d8      	b.n	80049ae <LCD_IHU_9_item+0x3e>
    item = GET_MENU(item+1, IHU_9_ITEM_MAX);
 80049fc:	3401      	adds	r4, #1
 80049fe:	b2e4      	uxtb	r4, r4
 8004a00:	e7d9      	b.n	80049b6 <LCD_IHU_9_item+0x46>
        LCD_ShowNum(g_IHU_9[item]);
 8004a02:	4b05      	ldr	r3, [pc, #20]	@ (8004a18 <LCD_IHU_9_item+0xa8>)
 8004a04:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004a08:	f7fe fe34 	bl	8003674 <LCD_ShowNum>
 8004a0c:	e7ec      	b.n	80049e8 <LCD_IHU_9_item+0x78>
 8004a0e:	bf00      	nop
 8004a10:	20001eec 	.word	0x20001eec
 8004a14:	20001e2c 	.word	0x20001e2c
 8004a18:	2000865c 	.word	0x2000865c

08004a1c <LCD_TBOX_1_item>:

void LCD_TBOX_1_item(uint8_t item, int16_t value)
{
 8004a1c:	b510      	push	{r4, lr}
 8004a1e:	4604      	mov	r4, r0
    item = GET_MENU(item, TBOX_1_ITEM_MAX);
 8004a20:	2810      	cmp	r0, #16
 8004a22:	d902      	bls.n	8004a2a <LCD_TBOX_1_item+0xe>
 8004a24:	f1a0 0411 	sub.w	r4, r0, #17
 8004a28:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004a2a:	2083      	movs	r0, #131	@ 0x83
 8004a2c:	f7fe fde4 	bl	80035f8 <write_com>
    hzkdis(TBOX_1Item[item]);
 8004a30:	4b22      	ldr	r3, [pc, #136]	@ (8004abc <LCD_TBOX_1_item+0xa0>)
 8004a32:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004a36:	f7fe fe0f 	bl	8003658 <hzkdis>
    write_com(0x93);
 8004a3a:	2093      	movs	r0, #147	@ 0x93
 8004a3c:	f7fe fddc 	bl	80035f8 <write_com>
    if (strcmp(TBOX_1Value[item][0], "") != 0) {
 8004a40:	01a3      	lsls	r3, r4, #6
 8004a42:	4a1f      	ldr	r2, [pc, #124]	@ (8004ac0 <LCD_TBOX_1_item+0xa4>)
 8004a44:	58d3      	ldr	r3, [r2, r3]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	b34b      	cbz	r3, 8004a9e <LCD_TBOX_1_item+0x82>
        hzkdis(TBOX_1Value[item][g_TBOX_1[item]]);
 8004a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ac4 <LCD_TBOX_1_item+0xa8>)
 8004a4c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004a50:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004a54:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a58:	f7fe fdfe 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_TBOX_1[item]);
    }

    item = GET_MENU(item+1, TBOX_1_ITEM_MAX);
 8004a5c:	2c0f      	cmp	r4, #15
 8004a5e:	d924      	bls.n	8004aaa <LCD_TBOX_1_item+0x8e>
 8004a60:	3c10      	subs	r4, #16
 8004a62:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004a64:	208b      	movs	r0, #139	@ 0x8b
 8004a66:	f7fe fdc7 	bl	80035f8 <write_com>
    hzkdis(TBOX_1Item[item]);
 8004a6a:	4b14      	ldr	r3, [pc, #80]	@ (8004abc <LCD_TBOX_1_item+0xa0>)
 8004a6c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004a70:	f7fe fdf2 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8004a74:	209b      	movs	r0, #155	@ 0x9b
 8004a76:	f7fe fdbf 	bl	80035f8 <write_com>
    if (strcmp(TBOX_1Value[item][0], "") != 0) {
 8004a7a:	01a3      	lsls	r3, r4, #6
 8004a7c:	4a10      	ldr	r2, [pc, #64]	@ (8004ac0 <LCD_TBOX_1_item+0xa4>)
 8004a7e:	58d3      	ldr	r3, [r2, r3]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	b1ab      	cbz	r3, 8004ab0 <LCD_TBOX_1_item+0x94>
        hzkdis(TBOX_1Value[item][g_TBOX_1[item]]);
 8004a84:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac4 <LCD_TBOX_1_item+0xa8>)
 8004a86:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004a8a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004a8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a92:	f7fe fde1 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_TBOX_1[item]);
    }
    write_com(0x93);
 8004a96:	2093      	movs	r0, #147	@ 0x93
 8004a98:	f7fe fdae 	bl	80035f8 <write_com>
}
 8004a9c:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_TBOX_1[item]);
 8004a9e:	4b09      	ldr	r3, [pc, #36]	@ (8004ac4 <LCD_TBOX_1_item+0xa8>)
 8004aa0:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004aa4:	f7fe fde6 	bl	8003674 <LCD_ShowNum>
 8004aa8:	e7d8      	b.n	8004a5c <LCD_TBOX_1_item+0x40>
    item = GET_MENU(item+1, TBOX_1_ITEM_MAX);
 8004aaa:	3401      	adds	r4, #1
 8004aac:	b2e4      	uxtb	r4, r4
 8004aae:	e7d9      	b.n	8004a64 <LCD_TBOX_1_item+0x48>
        LCD_ShowNum(g_TBOX_1[item]);
 8004ab0:	4b04      	ldr	r3, [pc, #16]	@ (8004ac4 <LCD_TBOX_1_item+0xa8>)
 8004ab2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004ab6:	f7fe fddd 	bl	8003674 <LCD_ShowNum>
 8004aba:	e7ec      	b.n	8004a96 <LCD_TBOX_1_item+0x7a>
 8004abc:	20001de0 	.word	0x20001de0
 8004ac0:	200019a0 	.word	0x200019a0
 8004ac4:	20008638 	.word	0x20008638

08004ac8 <LCD_TBOX_2_item>:

void LCD_TBOX_2_item(uint8_t item, int16_t value)
{
 8004ac8:	b510      	push	{r4, lr}
 8004aca:	4604      	mov	r4, r0
    item = GET_MENU(item, TBOX_2_ITEM_MAX);
 8004acc:	2802      	cmp	r0, #2
 8004ace:	d901      	bls.n	8004ad4 <LCD_TBOX_2_item+0xc>
 8004ad0:	1ec4      	subs	r4, r0, #3
 8004ad2:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004ad4:	2083      	movs	r0, #131	@ 0x83
 8004ad6:	f7fe fd8f 	bl	80035f8 <write_com>
    hzkdis(TBOX_2Item[item]);
 8004ada:	4b23      	ldr	r3, [pc, #140]	@ (8004b68 <LCD_TBOX_2_item+0xa0>)
 8004adc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004ae0:	f7fe fdba 	bl	8003658 <hzkdis>
    write_com(0x93);
 8004ae4:	2093      	movs	r0, #147	@ 0x93
 8004ae6:	f7fe fd87 	bl	80035f8 <write_com>
    if (strcmp(TBOX_2Value[item][0], "") != 0) {
 8004aea:	01a3      	lsls	r3, r4, #6
 8004aec:	4a1f      	ldr	r2, [pc, #124]	@ (8004b6c <LCD_TBOX_2_item+0xa4>)
 8004aee:	58d3      	ldr	r3, [r2, r3]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	b34b      	cbz	r3, 8004b48 <LCD_TBOX_2_item+0x80>
        hzkdis(TBOX_2Value[item][g_TBOX_2[item]]);
 8004af4:	4b1e      	ldr	r3, [pc, #120]	@ (8004b70 <LCD_TBOX_2_item+0xa8>)
 8004af6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004afa:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004afe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004b02:	f7fe fda9 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_TBOX_2[item]);
    }

    item = GET_MENU(item+1, TBOX_2_ITEM_MAX);
 8004b06:	2c01      	cmp	r4, #1
 8004b08:	d924      	bls.n	8004b54 <LCD_TBOX_2_item+0x8c>
 8004b0a:	3c02      	subs	r4, #2
 8004b0c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004b0e:	208b      	movs	r0, #139	@ 0x8b
 8004b10:	f7fe fd72 	bl	80035f8 <write_com>
    hzkdis(TBOX_2Item[item]);
 8004b14:	4b14      	ldr	r3, [pc, #80]	@ (8004b68 <LCD_TBOX_2_item+0xa0>)
 8004b16:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004b1a:	f7fe fd9d 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8004b1e:	209b      	movs	r0, #155	@ 0x9b
 8004b20:	f7fe fd6a 	bl	80035f8 <write_com>
    if (strcmp(TBOX_2Value[item][0], "") != 0) {
 8004b24:	01a3      	lsls	r3, r4, #6
 8004b26:	4a11      	ldr	r2, [pc, #68]	@ (8004b6c <LCD_TBOX_2_item+0xa4>)
 8004b28:	58d3      	ldr	r3, [r2, r3]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	b1ab      	cbz	r3, 8004b5a <LCD_TBOX_2_item+0x92>
        hzkdis(TBOX_2Value[item][g_TBOX_2[item]]);
 8004b2e:	4b10      	ldr	r3, [pc, #64]	@ (8004b70 <LCD_TBOX_2_item+0xa8>)
 8004b30:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004b34:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004b38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004b3c:	f7fe fd8c 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_TBOX_2[item]);
    }
    write_com(0x93);
 8004b40:	2093      	movs	r0, #147	@ 0x93
 8004b42:	f7fe fd59 	bl	80035f8 <write_com>
}
 8004b46:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_TBOX_2[item]);
 8004b48:	4b09      	ldr	r3, [pc, #36]	@ (8004b70 <LCD_TBOX_2_item+0xa8>)
 8004b4a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004b4e:	f7fe fd91 	bl	8003674 <LCD_ShowNum>
 8004b52:	e7d8      	b.n	8004b06 <LCD_TBOX_2_item+0x3e>
    item = GET_MENU(item+1, TBOX_2_ITEM_MAX);
 8004b54:	3401      	adds	r4, #1
 8004b56:	b2e4      	uxtb	r4, r4
 8004b58:	e7d9      	b.n	8004b0e <LCD_TBOX_2_item+0x46>
        LCD_ShowNum(g_TBOX_2[item]);
 8004b5a:	4b05      	ldr	r3, [pc, #20]	@ (8004b70 <LCD_TBOX_2_item+0xa8>)
 8004b5c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004b60:	f7fe fd88 	bl	8003674 <LCD_ShowNum>
 8004b64:	e7ec      	b.n	8004b40 <LCD_TBOX_2_item+0x78>
 8004b66:	bf00      	nop
 8004b68:	20001970 	.word	0x20001970
 8004b6c:	200018b0 	.word	0x200018b0
 8004b70:	20008630 	.word	0x20008630

08004b74 <LCD_GW_PC_1_item>:

void LCD_GW_PC_1_item(uint8_t item, int16_t value)
{
 8004b74:	b510      	push	{r4, lr}
 8004b76:	4604      	mov	r4, r0
    item = GET_MENU(item, GW_PC_1_ITEM_MAX);
 8004b78:	2814      	cmp	r0, #20
 8004b7a:	d902      	bls.n	8004b82 <LCD_GW_PC_1_item+0xe>
 8004b7c:	f1a0 0415 	sub.w	r4, r0, #21
 8004b80:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004b82:	2083      	movs	r0, #131	@ 0x83
 8004b84:	f7fe fd38 	bl	80035f8 <write_com>
    hzkdis(GW_PC_1Item[item]);
 8004b88:	4b22      	ldr	r3, [pc, #136]	@ (8004c14 <LCD_GW_PC_1_item+0xa0>)
 8004b8a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004b8e:	f7fe fd63 	bl	8003658 <hzkdis>
    write_com(0x93);
 8004b92:	2093      	movs	r0, #147	@ 0x93
 8004b94:	f7fe fd30 	bl	80035f8 <write_com>
    if (strcmp(GW_PC_1Value[item][0], "") != 0) {
 8004b98:	01a3      	lsls	r3, r4, #6
 8004b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004c18 <LCD_GW_PC_1_item+0xa4>)
 8004b9c:	58d3      	ldr	r3, [r2, r3]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	b34b      	cbz	r3, 8004bf6 <LCD_GW_PC_1_item+0x82>
        hzkdis(GW_PC_1Value[item][g_GW_PC_1[item]]);
 8004ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8004c1c <LCD_GW_PC_1_item+0xa8>)
 8004ba4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004ba8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004bac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004bb0:	f7fe fd52 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_PC_1[item]);
    }

    item = GET_MENU(item+1, GW_PC_1_ITEM_MAX);
 8004bb4:	2c13      	cmp	r4, #19
 8004bb6:	d924      	bls.n	8004c02 <LCD_GW_PC_1_item+0x8e>
 8004bb8:	3c14      	subs	r4, #20
 8004bba:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004bbc:	208b      	movs	r0, #139	@ 0x8b
 8004bbe:	f7fe fd1b 	bl	80035f8 <write_com>
    hzkdis(GW_PC_1Item[item]);
 8004bc2:	4b14      	ldr	r3, [pc, #80]	@ (8004c14 <LCD_GW_PC_1_item+0xa0>)
 8004bc4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004bc8:	f7fe fd46 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8004bcc:	209b      	movs	r0, #155	@ 0x9b
 8004bce:	f7fe fd13 	bl	80035f8 <write_com>
    if (strcmp(GW_PC_1Value[item][0], "") != 0) {
 8004bd2:	01a3      	lsls	r3, r4, #6
 8004bd4:	4a10      	ldr	r2, [pc, #64]	@ (8004c18 <LCD_GW_PC_1_item+0xa4>)
 8004bd6:	58d3      	ldr	r3, [r2, r3]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	b1ab      	cbz	r3, 8004c08 <LCD_GW_PC_1_item+0x94>
        hzkdis(GW_PC_1Value[item][g_GW_PC_1[item]]);
 8004bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8004c1c <LCD_GW_PC_1_item+0xa8>)
 8004bde:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004be2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004be6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004bea:	f7fe fd35 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_PC_1[item]);
    }
    write_com(0x93);
 8004bee:	2093      	movs	r0, #147	@ 0x93
 8004bf0:	f7fe fd02 	bl	80035f8 <write_com>
}
 8004bf4:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_GW_PC_1[item]);
 8004bf6:	4b09      	ldr	r3, [pc, #36]	@ (8004c1c <LCD_GW_PC_1_item+0xa8>)
 8004bf8:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004bfc:	f7fe fd3a 	bl	8003674 <LCD_ShowNum>
 8004c00:	e7d8      	b.n	8004bb4 <LCD_GW_PC_1_item+0x40>
    item = GET_MENU(item+1, GW_PC_1_ITEM_MAX);
 8004c02:	3401      	adds	r4, #1
 8004c04:	b2e4      	uxtb	r4, r4
 8004c06:	e7d9      	b.n	8004bbc <LCD_GW_PC_1_item+0x48>
        LCD_ShowNum(g_GW_PC_1[item]);
 8004c08:	4b04      	ldr	r3, [pc, #16]	@ (8004c1c <LCD_GW_PC_1_item+0xa8>)
 8004c0a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004c0e:	f7fe fd31 	bl	8003674 <LCD_ShowNum>
 8004c12:	e7ec      	b.n	8004bee <LCD_GW_PC_1_item+0x7a>
 8004c14:	20001854 	.word	0x20001854
 8004c18:	20001314 	.word	0x20001314
 8004c1c:	20008604 	.word	0x20008604

08004c20 <LCD_GW_PC_6_item>:

void LCD_GW_PC_6_item(uint8_t item, int16_t value)
{
 8004c20:	b510      	push	{r4, lr}
 8004c22:	4604      	mov	r4, r0
    item = GET_MENU(item, GW_PC_6_ITEM_MAX);
 8004c24:	2812      	cmp	r0, #18
 8004c26:	d902      	bls.n	8004c2e <LCD_GW_PC_6_item+0xe>
 8004c28:	f1a0 0413 	sub.w	r4, r0, #19
 8004c2c:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004c2e:	2083      	movs	r0, #131	@ 0x83
 8004c30:	f7fe fce2 	bl	80035f8 <write_com>
    hzkdis(GW_PC_6Item[item]);
 8004c34:	4b22      	ldr	r3, [pc, #136]	@ (8004cc0 <LCD_GW_PC_6_item+0xa0>)
 8004c36:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004c3a:	f7fe fd0d 	bl	8003658 <hzkdis>
    write_com(0x93);
 8004c3e:	2093      	movs	r0, #147	@ 0x93
 8004c40:	f7fe fcda 	bl	80035f8 <write_com>
    if (strcmp(GW_PC_6Value[item][0], "") != 0) {
 8004c44:	01a3      	lsls	r3, r4, #6
 8004c46:	4a1f      	ldr	r2, [pc, #124]	@ (8004cc4 <LCD_GW_PC_6_item+0xa4>)
 8004c48:	58d3      	ldr	r3, [r2, r3]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	b34b      	cbz	r3, 8004ca2 <LCD_GW_PC_6_item+0x82>
        hzkdis(GW_PC_6Value[item][g_GW_PC_6[item]]);
 8004c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004cc8 <LCD_GW_PC_6_item+0xa8>)
 8004c50:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004c54:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004c58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c5c:	f7fe fcfc 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_PC_6[item]);
    }

    item = GET_MENU(item+1, GW_PC_6_ITEM_MAX);
 8004c60:	2c11      	cmp	r4, #17
 8004c62:	d924      	bls.n	8004cae <LCD_GW_PC_6_item+0x8e>
 8004c64:	3c12      	subs	r4, #18
 8004c66:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004c68:	208b      	movs	r0, #139	@ 0x8b
 8004c6a:	f7fe fcc5 	bl	80035f8 <write_com>
    hzkdis(GW_PC_6Item[item]);
 8004c6e:	4b14      	ldr	r3, [pc, #80]	@ (8004cc0 <LCD_GW_PC_6_item+0xa0>)
 8004c70:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004c74:	f7fe fcf0 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8004c78:	209b      	movs	r0, #155	@ 0x9b
 8004c7a:	f7fe fcbd 	bl	80035f8 <write_com>
    if (strcmp(GW_PC_6Value[item][0], "") != 0) {
 8004c7e:	01a3      	lsls	r3, r4, #6
 8004c80:	4a10      	ldr	r2, [pc, #64]	@ (8004cc4 <LCD_GW_PC_6_item+0xa4>)
 8004c82:	58d3      	ldr	r3, [r2, r3]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	b1ab      	cbz	r3, 8004cb4 <LCD_GW_PC_6_item+0x94>
        hzkdis(GW_PC_6Value[item][g_GW_PC_6[item]]);
 8004c88:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc8 <LCD_GW_PC_6_item+0xa8>)
 8004c8a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004c8e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004c92:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c96:	f7fe fcdf 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_PC_6[item]);
    }
    write_com(0x93);
 8004c9a:	2093      	movs	r0, #147	@ 0x93
 8004c9c:	f7fe fcac 	bl	80035f8 <write_com>
}
 8004ca0:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_GW_PC_6[item]);
 8004ca2:	4b09      	ldr	r3, [pc, #36]	@ (8004cc8 <LCD_GW_PC_6_item+0xa8>)
 8004ca4:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004ca8:	f7fe fce4 	bl	8003674 <LCD_ShowNum>
 8004cac:	e7d8      	b.n	8004c60 <LCD_GW_PC_6_item+0x40>
    item = GET_MENU(item+1, GW_PC_6_ITEM_MAX);
 8004cae:	3401      	adds	r4, #1
 8004cb0:	b2e4      	uxtb	r4, r4
 8004cb2:	e7d9      	b.n	8004c68 <LCD_GW_PC_6_item+0x48>
        LCD_ShowNum(g_GW_PC_6[item]);
 8004cb4:	4b04      	ldr	r3, [pc, #16]	@ (8004cc8 <LCD_GW_PC_6_item+0xa8>)
 8004cb6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004cba:	f7fe fcdb 	bl	8003674 <LCD_ShowNum>
 8004cbe:	e7ec      	b.n	8004c9a <LCD_GW_PC_6_item+0x7a>
 8004cc0:	2000129c 	.word	0x2000129c
 8004cc4:	20000ddc 	.word	0x20000ddc
 8004cc8:	200085dc 	.word	0x200085dc

08004ccc <LCD_ESP_2_item>:

void LCD_ESP_2_item(uint8_t item, int16_t value)
{
 8004ccc:	b510      	push	{r4, lr}
 8004cce:	4604      	mov	r4, r0
    item = GET_MENU(item, ESP_2_ITEM_MAX);
 8004cd0:	2805      	cmp	r0, #5
 8004cd2:	d901      	bls.n	8004cd8 <LCD_ESP_2_item+0xc>
 8004cd4:	1f84      	subs	r4, r0, #6
 8004cd6:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004cd8:	2083      	movs	r0, #131	@ 0x83
 8004cda:	f7fe fc8d 	bl	80035f8 <write_com>
    hzkdis(ESP_2Item[item]);
 8004cde:	4b23      	ldr	r3, [pc, #140]	@ (8004d6c <LCD_ESP_2_item+0xa0>)
 8004ce0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004ce4:	f7fe fcb8 	bl	8003658 <hzkdis>
    write_com(0x93);
 8004ce8:	2093      	movs	r0, #147	@ 0x93
 8004cea:	f7fe fc85 	bl	80035f8 <write_com>
    if (strcmp(ESP_2Value[item][0], "") != 0) {
 8004cee:	01a3      	lsls	r3, r4, #6
 8004cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d70 <LCD_ESP_2_item+0xa4>)
 8004cf2:	58d3      	ldr	r3, [r2, r3]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	b34b      	cbz	r3, 8004d4c <LCD_ESP_2_item+0x80>
        hzkdis(ESP_2Value[item][g_ESP_2[item]]);
 8004cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8004d74 <LCD_ESP_2_item+0xa8>)
 8004cfa:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004cfe:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004d02:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004d06:	f7fe fca7 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_ESP_2[item]);
    }

    item = GET_MENU(item+1, ESP_2_ITEM_MAX);
 8004d0a:	2c04      	cmp	r4, #4
 8004d0c:	d924      	bls.n	8004d58 <LCD_ESP_2_item+0x8c>
 8004d0e:	3c05      	subs	r4, #5
 8004d10:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004d12:	208b      	movs	r0, #139	@ 0x8b
 8004d14:	f7fe fc70 	bl	80035f8 <write_com>
    hzkdis(ESP_2Item[item]);
 8004d18:	4b14      	ldr	r3, [pc, #80]	@ (8004d6c <LCD_ESP_2_item+0xa0>)
 8004d1a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004d1e:	f7fe fc9b 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8004d22:	209b      	movs	r0, #155	@ 0x9b
 8004d24:	f7fe fc68 	bl	80035f8 <write_com>
    if (strcmp(ESP_2Value[item][0], "") != 0) {
 8004d28:	01a3      	lsls	r3, r4, #6
 8004d2a:	4a11      	ldr	r2, [pc, #68]	@ (8004d70 <LCD_ESP_2_item+0xa4>)
 8004d2c:	58d3      	ldr	r3, [r2, r3]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	b1ab      	cbz	r3, 8004d5e <LCD_ESP_2_item+0x92>
        hzkdis(ESP_2Value[item][g_ESP_2[item]]);
 8004d32:	4b10      	ldr	r3, [pc, #64]	@ (8004d74 <LCD_ESP_2_item+0xa8>)
 8004d34:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004d38:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004d3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004d40:	f7fe fc8a 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_ESP_2[item]);
    }
    write_com(0x93);
 8004d44:	2093      	movs	r0, #147	@ 0x93
 8004d46:	f7fe fc57 	bl	80035f8 <write_com>
}
 8004d4a:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_ESP_2[item]);
 8004d4c:	4b09      	ldr	r3, [pc, #36]	@ (8004d74 <LCD_ESP_2_item+0xa8>)
 8004d4e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004d52:	f7fe fc8f 	bl	8003674 <LCD_ShowNum>
 8004d56:	e7d8      	b.n	8004d0a <LCD_ESP_2_item+0x3e>
    item = GET_MENU(item+1, ESP_2_ITEM_MAX);
 8004d58:	3401      	adds	r4, #1
 8004d5a:	b2e4      	uxtb	r4, r4
 8004d5c:	e7d9      	b.n	8004d12 <LCD_ESP_2_item+0x46>
        LCD_ShowNum(g_ESP_2[item]);
 8004d5e:	4b05      	ldr	r3, [pc, #20]	@ (8004d74 <LCD_ESP_2_item+0xa8>)
 8004d60:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004d64:	f7fe fc86 	bl	8003674 <LCD_ShowNum>
 8004d68:	e7ec      	b.n	8004d44 <LCD_ESP_2_item+0x78>
 8004d6a:	bf00      	nop
 8004d6c:	20000d9c 	.word	0x20000d9c
 8004d70:	20000c1c 	.word	0x20000c1c
 8004d74:	200085d0 	.word	0x200085d0

08004d78 <LCD_BCM_3_item>:

void LCD_BCM_3_item(uint8_t item, int16_t value)
{
 8004d78:	b510      	push	{r4, lr}
 8004d7a:	4604      	mov	r4, r0
    item = GET_MENU(item, BCM_3_ITEM_MAX);
 8004d7c:	2802      	cmp	r0, #2
 8004d7e:	d901      	bls.n	8004d84 <LCD_BCM_3_item+0xc>
 8004d80:	1ec4      	subs	r4, r0, #3
 8004d82:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004d84:	2083      	movs	r0, #131	@ 0x83
 8004d86:	f7fe fc37 	bl	80035f8 <write_com>
    hzkdis(BCM_3Item[item]);
 8004d8a:	4b23      	ldr	r3, [pc, #140]	@ (8004e18 <LCD_BCM_3_item+0xa0>)
 8004d8c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004d90:	f7fe fc62 	bl	8003658 <hzkdis>
    write_com(0x93);
 8004d94:	2093      	movs	r0, #147	@ 0x93
 8004d96:	f7fe fc2f 	bl	80035f8 <write_com>
    if (strcmp(BCM_3Value[item][0], "") != 0) {
 8004d9a:	01a3      	lsls	r3, r4, #6
 8004d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8004e1c <LCD_BCM_3_item+0xa4>)
 8004d9e:	58d3      	ldr	r3, [r2, r3]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	b34b      	cbz	r3, 8004df8 <LCD_BCM_3_item+0x80>
        hzkdis(BCM_3Value[item][g_BCM_3[item]]);
 8004da4:	4b1e      	ldr	r3, [pc, #120]	@ (8004e20 <LCD_BCM_3_item+0xa8>)
 8004da6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004daa:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004dae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004db2:	f7fe fc51 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_BCM_3[item]);
    }

    item = GET_MENU(item+1, BCM_3_ITEM_MAX);
 8004db6:	2c01      	cmp	r4, #1
 8004db8:	d924      	bls.n	8004e04 <LCD_BCM_3_item+0x8c>
 8004dba:	3c02      	subs	r4, #2
 8004dbc:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004dbe:	208b      	movs	r0, #139	@ 0x8b
 8004dc0:	f7fe fc1a 	bl	80035f8 <write_com>
    hzkdis(BCM_3Item[item]);
 8004dc4:	4b14      	ldr	r3, [pc, #80]	@ (8004e18 <LCD_BCM_3_item+0xa0>)
 8004dc6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004dca:	f7fe fc45 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8004dce:	209b      	movs	r0, #155	@ 0x9b
 8004dd0:	f7fe fc12 	bl	80035f8 <write_com>
    if (strcmp(BCM_3Value[item][0], "") != 0) {
 8004dd4:	01a3      	lsls	r3, r4, #6
 8004dd6:	4a11      	ldr	r2, [pc, #68]	@ (8004e1c <LCD_BCM_3_item+0xa4>)
 8004dd8:	58d3      	ldr	r3, [r2, r3]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	b1ab      	cbz	r3, 8004e0a <LCD_BCM_3_item+0x92>
        hzkdis(BCM_3Value[item][g_BCM_3[item]]);
 8004dde:	4b10      	ldr	r3, [pc, #64]	@ (8004e20 <LCD_BCM_3_item+0xa8>)
 8004de0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004de4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004de8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004dec:	f7fe fc34 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_BCM_3[item]);
    }
    write_com(0x93);
 8004df0:	2093      	movs	r0, #147	@ 0x93
 8004df2:	f7fe fc01 	bl	80035f8 <write_com>
}
 8004df6:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_BCM_3[item]);
 8004df8:	4b09      	ldr	r3, [pc, #36]	@ (8004e20 <LCD_BCM_3_item+0xa8>)
 8004dfa:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004dfe:	f7fe fc39 	bl	8003674 <LCD_ShowNum>
 8004e02:	e7d8      	b.n	8004db6 <LCD_BCM_3_item+0x3e>
    item = GET_MENU(item+1, BCM_3_ITEM_MAX);
 8004e04:	3401      	adds	r4, #1
 8004e06:	b2e4      	uxtb	r4, r4
 8004e08:	e7d9      	b.n	8004dbe <LCD_BCM_3_item+0x46>
        LCD_ShowNum(g_BCM_3[item]);
 8004e0a:	4b05      	ldr	r3, [pc, #20]	@ (8004e20 <LCD_BCM_3_item+0xa8>)
 8004e0c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004e10:	f7fe fc30 	bl	8003674 <LCD_ShowNum>
 8004e14:	e7ec      	b.n	8004df0 <LCD_BCM_3_item+0x78>
 8004e16:	bf00      	nop
 8004e18:	20000c04 	.word	0x20000c04
 8004e1c:	20000b44 	.word	0x20000b44
 8004e20:	200085c8 	.word	0x200085c8

08004e24 <LCD_GW_BD_9_item>:

void LCD_GW_BD_9_item(uint8_t item, int16_t value)
{
 8004e24:	b510      	push	{r4, lr}
 8004e26:	4604      	mov	r4, r0
    item = GET_MENU(item, GW_BD_9_ITEM_MAX);
 8004e28:	281c      	cmp	r0, #28
 8004e2a:	d902      	bls.n	8004e32 <LCD_GW_BD_9_item+0xe>
 8004e2c:	f1a0 041d 	sub.w	r4, r0, #29
 8004e30:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004e32:	2083      	movs	r0, #131	@ 0x83
 8004e34:	f7fe fbe0 	bl	80035f8 <write_com>
    hzkdis(GW_BD_9Item[item]);
 8004e38:	4b22      	ldr	r3, [pc, #136]	@ (8004ec4 <LCD_GW_BD_9_item+0xa0>)
 8004e3a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004e3e:	f7fe fc0b 	bl	8003658 <hzkdis>
    write_com(0x93);
 8004e42:	2093      	movs	r0, #147	@ 0x93
 8004e44:	f7fe fbd8 	bl	80035f8 <write_com>
    if (strcmp(GW_BD_9Value[item][0], "") != 0) {
 8004e48:	01a3      	lsls	r3, r4, #6
 8004e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ec8 <LCD_GW_BD_9_item+0xa4>)
 8004e4c:	58d3      	ldr	r3, [r2, r3]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	b34b      	cbz	r3, 8004ea6 <LCD_GW_BD_9_item+0x82>
        hzkdis(GW_BD_9Value[item][g_GW_BD_9[item]]);
 8004e52:	4b1e      	ldr	r3, [pc, #120]	@ (8004ecc <LCD_GW_BD_9_item+0xa8>)
 8004e54:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004e58:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004e5c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004e60:	f7fe fbfa 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_BD_9[item]);
    }

    item = GET_MENU(item+1, GW_BD_9_ITEM_MAX);
 8004e64:	2c1b      	cmp	r4, #27
 8004e66:	d924      	bls.n	8004eb2 <LCD_GW_BD_9_item+0x8e>
 8004e68:	3c1c      	subs	r4, #28
 8004e6a:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004e6c:	208b      	movs	r0, #139	@ 0x8b
 8004e6e:	f7fe fbc3 	bl	80035f8 <write_com>
    hzkdis(GW_BD_9Item[item]);
 8004e72:	4b14      	ldr	r3, [pc, #80]	@ (8004ec4 <LCD_GW_BD_9_item+0xa0>)
 8004e74:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004e78:	f7fe fbee 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8004e7c:	209b      	movs	r0, #155	@ 0x9b
 8004e7e:	f7fe fbbb 	bl	80035f8 <write_com>
    if (strcmp(GW_BD_9Value[item][0], "") != 0) {
 8004e82:	01a3      	lsls	r3, r4, #6
 8004e84:	4a10      	ldr	r2, [pc, #64]	@ (8004ec8 <LCD_GW_BD_9_item+0xa4>)
 8004e86:	58d3      	ldr	r3, [r2, r3]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	b1ab      	cbz	r3, 8004eb8 <LCD_GW_BD_9_item+0x94>
        hzkdis(GW_BD_9Value[item][g_GW_BD_9[item]]);
 8004e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8004ecc <LCD_GW_BD_9_item+0xa8>)
 8004e8e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004e92:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004e96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004e9a:	f7fe fbdd 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_BD_9[item]);
    }
    write_com(0x93);
 8004e9e:	2093      	movs	r0, #147	@ 0x93
 8004ea0:	f7fe fbaa 	bl	80035f8 <write_com>
}
 8004ea4:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_GW_BD_9[item]);
 8004ea6:	4b09      	ldr	r3, [pc, #36]	@ (8004ecc <LCD_GW_BD_9_item+0xa8>)
 8004ea8:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004eac:	f7fe fbe2 	bl	8003674 <LCD_ShowNum>
 8004eb0:	e7d8      	b.n	8004e64 <LCD_GW_BD_9_item+0x40>
    item = GET_MENU(item+1, GW_BD_9_ITEM_MAX);
 8004eb2:	3401      	adds	r4, #1
 8004eb4:	b2e4      	uxtb	r4, r4
 8004eb6:	e7d9      	b.n	8004e6c <LCD_GW_BD_9_item+0x48>
        LCD_ShowNum(g_GW_BD_9[item]);
 8004eb8:	4b04      	ldr	r3, [pc, #16]	@ (8004ecc <LCD_GW_BD_9_item+0xa8>)
 8004eba:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004ebe:	f7fe fbd9 	bl	8003674 <LCD_ShowNum>
 8004ec2:	e7ec      	b.n	8004e9e <LCD_GW_BD_9_item+0x7a>
 8004ec4:	20000ac8 	.word	0x20000ac8
 8004ec8:	20000388 	.word	0x20000388
 8004ecc:	2000858c 	.word	0x2000858c

08004ed0 <LCD_GW_BD_24_item>:

void LCD_GW_BD_24_item(uint8_t item, int16_t value)
{
 8004ed0:	b510      	push	{r4, lr}
 8004ed2:	4604      	mov	r4, r0
    item = GET_MENU(item, GW_BD_24_ITEM_MAX);
 8004ed4:	2808      	cmp	r0, #8
 8004ed6:	d902      	bls.n	8004ede <LCD_GW_BD_24_item+0xe>
 8004ed8:	f1a0 0409 	sub.w	r4, r0, #9
 8004edc:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004ede:	2083      	movs	r0, #131	@ 0x83
 8004ee0:	f7fe fb8a 	bl	80035f8 <write_com>
    hzkdis(GW_BD_24Item[item]);
 8004ee4:	4b22      	ldr	r3, [pc, #136]	@ (8004f70 <LCD_GW_BD_24_item+0xa0>)
 8004ee6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004eea:	f7fe fbb5 	bl	8003658 <hzkdis>
    write_com(0x93);
 8004eee:	2093      	movs	r0, #147	@ 0x93
 8004ef0:	f7fe fb82 	bl	80035f8 <write_com>
    if (strcmp(GW_BD_24Value[item][0], "") != 0) {
 8004ef4:	01a3      	lsls	r3, r4, #6
 8004ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8004f74 <LCD_GW_BD_24_item+0xa4>)
 8004ef8:	58d3      	ldr	r3, [r2, r3]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	b34b      	cbz	r3, 8004f52 <LCD_GW_BD_24_item+0x82>
        hzkdis(GW_BD_24Value[item][g_GW_BD_24[item]]);
 8004efe:	4b1e      	ldr	r3, [pc, #120]	@ (8004f78 <LCD_GW_BD_24_item+0xa8>)
 8004f00:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004f04:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004f08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004f0c:	f7fe fba4 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_BD_24[item]);
    }

    item = GET_MENU(item+1, GW_BD_24_ITEM_MAX);
 8004f10:	2c07      	cmp	r4, #7
 8004f12:	d924      	bls.n	8004f5e <LCD_GW_BD_24_item+0x8e>
 8004f14:	3c08      	subs	r4, #8
 8004f16:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004f18:	208b      	movs	r0, #139	@ 0x8b
 8004f1a:	f7fe fb6d 	bl	80035f8 <write_com>
    hzkdis(GW_BD_24Item[item]);
 8004f1e:	4b14      	ldr	r3, [pc, #80]	@ (8004f70 <LCD_GW_BD_24_item+0xa0>)
 8004f20:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004f24:	f7fe fb98 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8004f28:	209b      	movs	r0, #155	@ 0x9b
 8004f2a:	f7fe fb65 	bl	80035f8 <write_com>
    if (strcmp(GW_BD_24Value[item][0], "") != 0) {
 8004f2e:	01a3      	lsls	r3, r4, #6
 8004f30:	4a10      	ldr	r2, [pc, #64]	@ (8004f74 <LCD_GW_BD_24_item+0xa4>)
 8004f32:	58d3      	ldr	r3, [r2, r3]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	b1ab      	cbz	r3, 8004f64 <LCD_GW_BD_24_item+0x94>
        hzkdis(GW_BD_24Value[item][g_GW_BD_24[item]]);
 8004f38:	4b0f      	ldr	r3, [pc, #60]	@ (8004f78 <LCD_GW_BD_24_item+0xa8>)
 8004f3a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004f3e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004f42:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004f46:	f7fe fb87 	bl	8003658 <hzkdis>
    } else {
        LCD_ShowNum(g_GW_BD_24[item]);
    }
    write_com(0x93);
 8004f4a:	2093      	movs	r0, #147	@ 0x93
 8004f4c:	f7fe fb54 	bl	80035f8 <write_com>
}
 8004f50:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_GW_BD_24[item]);
 8004f52:	4b09      	ldr	r3, [pc, #36]	@ (8004f78 <LCD_GW_BD_24_item+0xa8>)
 8004f54:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004f58:	f7fe fb8c 	bl	8003674 <LCD_ShowNum>
 8004f5c:	e7d8      	b.n	8004f10 <LCD_GW_BD_24_item+0x40>
    item = GET_MENU(item+1, GW_BD_24_ITEM_MAX);
 8004f5e:	3401      	adds	r4, #1
 8004f60:	b2e4      	uxtb	r4, r4
 8004f62:	e7d9      	b.n	8004f18 <LCD_GW_BD_24_item+0x48>
        LCD_ShowNum(g_GW_BD_24[item]);
 8004f64:	4b04      	ldr	r3, [pc, #16]	@ (8004f78 <LCD_GW_BD_24_item+0xa8>)
 8004f66:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004f6a:	f7fe fb83 	bl	8003674 <LCD_ShowNum>
 8004f6e:	e7ec      	b.n	8004f4a <LCD_GW_BD_24_item+0x7a>
 8004f70:	20000328 	.word	0x20000328
 8004f74:	200000e8 	.word	0x200000e8
 8004f78:	20008578 	.word	0x20008578

08004f7c <LCD_IHU_3_item>:
{
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	4604      	mov	r4, r0
 8004f80:	460d      	mov	r5, r1
    item = GET_MENU(item, IHU_3_ITEM_MAX);
 8004f82:	2819      	cmp	r0, #25
 8004f84:	d902      	bls.n	8004f8c <LCD_IHU_3_item+0x10>
 8004f86:	f1a0 041a 	sub.w	r4, r0, #26
 8004f8a:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004f8c:	2083      	movs	r0, #131	@ 0x83
 8004f8e:	f7fe fb33 	bl	80035f8 <write_com>
    hzkdis(IHU_3Item[item]);
 8004f92:	4b28      	ldr	r3, [pc, #160]	@ (8005034 <LCD_IHU_3_item+0xb8>)
 8004f94:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004f98:	f7fe fb5e 	bl	8003658 <hzkdis>
    write_com(0x93);
 8004f9c:	2093      	movs	r0, #147	@ 0x93
 8004f9e:	f7fe fb2b 	bl	80035f8 <write_com>
    if (strcmp(IHU_3Value[item][0], "") != 0) {
 8004fa2:	01a3      	lsls	r3, r4, #6
 8004fa4:	4a24      	ldr	r2, [pc, #144]	@ (8005038 <LCD_IHU_3_item+0xbc>)
 8004fa6:	58d3      	ldr	r3, [r2, r3]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	b373      	cbz	r3, 800500a <LCD_IHU_3_item+0x8e>
        hzkdis(IHU_3Value[item][g_IHU_3[item]]);
 8004fac:	4b23      	ldr	r3, [pc, #140]	@ (800503c <LCD_IHU_3_item+0xc0>)
 8004fae:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004fb2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004fb6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004fba:	f7fe fb4d 	bl	8003658 <hzkdis>
    item = GET_MENU(item+1, IHU_3_ITEM_MAX);
 8004fbe:	2c18      	cmp	r4, #24
 8004fc0:	d929      	bls.n	8005016 <LCD_IHU_3_item+0x9a>
 8004fc2:	3c19      	subs	r4, #25
 8004fc4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004fc6:	208b      	movs	r0, #139	@ 0x8b
 8004fc8:	f7fe fb16 	bl	80035f8 <write_com>
    hzkdis(IHU_3Item[item]);
 8004fcc:	4b19      	ldr	r3, [pc, #100]	@ (8005034 <LCD_IHU_3_item+0xb8>)
 8004fce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004fd2:	f7fe fb41 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8004fd6:	209b      	movs	r0, #155	@ 0x9b
 8004fd8:	f7fe fb0e 	bl	80035f8 <write_com>
    if (strcmp(IHU_3Value[item][0], "") != 0) {
 8004fdc:	01a3      	lsls	r3, r4, #6
 8004fde:	4a16      	ldr	r2, [pc, #88]	@ (8005038 <LCD_IHU_3_item+0xbc>)
 8004fe0:	58d3      	ldr	r3, [r2, r3]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	b1d3      	cbz	r3, 800501c <LCD_IHU_3_item+0xa0>
        hzkdis(IHU_3Value[item][g_IHU_3[item]]);
 8004fe6:	4b15      	ldr	r3, [pc, #84]	@ (800503c <LCD_IHU_3_item+0xc0>)
 8004fe8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004fec:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004ff0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004ff4:	f7fe fb30 	bl	8003658 <hzkdis>
    write_com(0x93);
 8004ff8:	2093      	movs	r0, #147	@ 0x93
 8004ffa:	f7fe fafd 	bl	80035f8 <write_com>
    if(old_value != value)
 8004ffe:	4b10      	ldr	r3, [pc, #64]	@ (8005040 <LCD_IHU_3_item+0xc4>)
 8005000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005004:	42ab      	cmp	r3, r5
 8005006:	d10f      	bne.n	8005028 <LCD_IHU_3_item+0xac>
}
 8005008:	bd38      	pop	{r3, r4, r5, pc}
        LCD_ShowNum(g_IHU_3[item]);
 800500a:	4b0c      	ldr	r3, [pc, #48]	@ (800503c <LCD_IHU_3_item+0xc0>)
 800500c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8005010:	f7fe fb30 	bl	8003674 <LCD_ShowNum>
 8005014:	e7d3      	b.n	8004fbe <LCD_IHU_3_item+0x42>
    item = GET_MENU(item+1, IHU_3_ITEM_MAX);
 8005016:	3401      	adds	r4, #1
 8005018:	b2e4      	uxtb	r4, r4
 800501a:	e7d4      	b.n	8004fc6 <LCD_IHU_3_item+0x4a>
        LCD_ShowNum(g_IHU_3[item]);
 800501c:	4b07      	ldr	r3, [pc, #28]	@ (800503c <LCD_IHU_3_item+0xc0>)
 800501e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8005022:	f7fe fb27 	bl	8003674 <LCD_ShowNum>
 8005026:	e7e7      	b.n	8004ff8 <LCD_IHU_3_item+0x7c>
        old_value = value;
 8005028:	4b05      	ldr	r3, [pc, #20]	@ (8005040 <LCD_IHU_3_item+0xc4>)
 800502a:	801d      	strh	r5, [r3, #0]
        CanIl_SendEventMsg(IHU_3);
 800502c:	2000      	movs	r0, #0
 800502e:	f005 ff33 	bl	800ae98 <CanIl_SendEventMsg>
}
 8005032:	e7e9      	b.n	8005008 <LCD_IHU_3_item+0x8c>
 8005034:	20007f74 	.word	0x20007f74
 8005038:	200078f4 	.word	0x200078f4
 800503c:	20008950 	.word	0x20008950
 8005040:	20008572 	.word	0x20008572

08005044 <LCD_IHU_6_item>:
{
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	4604      	mov	r4, r0
 8005048:	460d      	mov	r5, r1
    item = GET_MENU(item, IHU_6_ITEM_MAX);
 800504a:	2805      	cmp	r0, #5
 800504c:	d901      	bls.n	8005052 <LCD_IHU_6_item+0xe>
 800504e:	1f84      	subs	r4, r0, #6
 8005050:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8005052:	2083      	movs	r0, #131	@ 0x83
 8005054:	f7fe fad0 	bl	80035f8 <write_com>
    hzkdis(IHU_6Item[item]);
 8005058:	4b28      	ldr	r3, [pc, #160]	@ (80050fc <LCD_IHU_6_item+0xb8>)
 800505a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800505e:	f7fe fafb 	bl	8003658 <hzkdis>
    write_com(0x93);
 8005062:	2093      	movs	r0, #147	@ 0x93
 8005064:	f7fe fac8 	bl	80035f8 <write_com>
    if (strcmp(IHU_6Value[item][0], "") != 0) {
 8005068:	01a3      	lsls	r3, r4, #6
 800506a:	4a25      	ldr	r2, [pc, #148]	@ (8005100 <LCD_IHU_6_item+0xbc>)
 800506c:	58d3      	ldr	r3, [r2, r3]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	b373      	cbz	r3, 80050d0 <LCD_IHU_6_item+0x8c>
        hzkdis(IHU_6Value[item][g_IHU_6[item]]);
 8005072:	4b24      	ldr	r3, [pc, #144]	@ (8005104 <LCD_IHU_6_item+0xc0>)
 8005074:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8005078:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800507c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005080:	f7fe faea 	bl	8003658 <hzkdis>
    item = GET_MENU(item+1, IHU_6_ITEM_MAX);
 8005084:	2c04      	cmp	r4, #4
 8005086:	d929      	bls.n	80050dc <LCD_IHU_6_item+0x98>
 8005088:	3c05      	subs	r4, #5
 800508a:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800508c:	208b      	movs	r0, #139	@ 0x8b
 800508e:	f7fe fab3 	bl	80035f8 <write_com>
    hzkdis(IHU_6Item[item]);
 8005092:	4b1a      	ldr	r3, [pc, #104]	@ (80050fc <LCD_IHU_6_item+0xb8>)
 8005094:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005098:	f7fe fade 	bl	8003658 <hzkdis>
    write_com(0x9b);
 800509c:	209b      	movs	r0, #155	@ 0x9b
 800509e:	f7fe faab 	bl	80035f8 <write_com>
    if (strcmp(IHU_6Value[item][0], "") != 0) {
 80050a2:	01a3      	lsls	r3, r4, #6
 80050a4:	4a16      	ldr	r2, [pc, #88]	@ (8005100 <LCD_IHU_6_item+0xbc>)
 80050a6:	58d3      	ldr	r3, [r2, r3]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	b1d3      	cbz	r3, 80050e2 <LCD_IHU_6_item+0x9e>
        hzkdis(IHU_6Value[item][g_IHU_6[item]]);
 80050ac:	4b15      	ldr	r3, [pc, #84]	@ (8005104 <LCD_IHU_6_item+0xc0>)
 80050ae:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80050b2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80050b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80050ba:	f7fe facd 	bl	8003658 <hzkdis>
    write_com(0x93);
 80050be:	2093      	movs	r0, #147	@ 0x93
 80050c0:	f7fe fa9a 	bl	80035f8 <write_com>
    if(old_value != value)
 80050c4:	4b10      	ldr	r3, [pc, #64]	@ (8005108 <LCD_IHU_6_item+0xc4>)
 80050c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050ca:	42ab      	cmp	r3, r5
 80050cc:	d10f      	bne.n	80050ee <LCD_IHU_6_item+0xaa>
}
 80050ce:	bd38      	pop	{r3, r4, r5, pc}
        LCD_ShowNum(g_IHU_6[item]);
 80050d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005104 <LCD_IHU_6_item+0xc0>)
 80050d2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80050d6:	f7fe facd 	bl	8003674 <LCD_ShowNum>
 80050da:	e7d3      	b.n	8005084 <LCD_IHU_6_item+0x40>
    item = GET_MENU(item+1, IHU_6_ITEM_MAX);
 80050dc:	3401      	adds	r4, #1
 80050de:	b2e4      	uxtb	r4, r4
 80050e0:	e7d4      	b.n	800508c <LCD_IHU_6_item+0x48>
        LCD_ShowNum(g_IHU_6[item]);
 80050e2:	4b08      	ldr	r3, [pc, #32]	@ (8005104 <LCD_IHU_6_item+0xc0>)
 80050e4:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80050e8:	f7fe fac4 	bl	8003674 <LCD_ShowNum>
 80050ec:	e7e7      	b.n	80050be <LCD_IHU_6_item+0x7a>
        old_value = value;
 80050ee:	4b06      	ldr	r3, [pc, #24]	@ (8005108 <LCD_IHU_6_item+0xc4>)
 80050f0:	801d      	strh	r5, [r3, #0]
        CanIl_SendEventMsg(IHU_6);
 80050f2:	2001      	movs	r0, #1
 80050f4:	f005 fed0 	bl	800ae98 <CanIl_SendEventMsg>
}
 80050f8:	e7e9      	b.n	80050ce <LCD_IHU_6_item+0x8a>
 80050fa:	bf00      	nop
 80050fc:	200078a8 	.word	0x200078a8
 8005100:	20007728 	.word	0x20007728
 8005104:	20008944 	.word	0x20008944
 8005108:	20008570 	.word	0x20008570

0800510c <LCD_IHU_10_item>:
{
 800510c:	b538      	push	{r3, r4, r5, lr}
 800510e:	4604      	mov	r4, r0
 8005110:	460d      	mov	r5, r1
    item = GET_MENU(item, IHU_10_ITEM_MAX);
 8005112:	2802      	cmp	r0, #2
 8005114:	d901      	bls.n	800511a <LCD_IHU_10_item+0xe>
 8005116:	1ec4      	subs	r4, r0, #3
 8005118:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 800511a:	2083      	movs	r0, #131	@ 0x83
 800511c:	f7fe fa6c 	bl	80035f8 <write_com>
    hzkdis(IHU_10Item[item]);
 8005120:	4b28      	ldr	r3, [pc, #160]	@ (80051c4 <LCD_IHU_10_item+0xb8>)
 8005122:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005126:	f7fe fa97 	bl	8003658 <hzkdis>
    write_com(0x93);
 800512a:	2093      	movs	r0, #147	@ 0x93
 800512c:	f7fe fa64 	bl	80035f8 <write_com>
    if (strcmp(IHU_10Value[item][0], "") != 0) {
 8005130:	01a3      	lsls	r3, r4, #6
 8005132:	4a25      	ldr	r2, [pc, #148]	@ (80051c8 <LCD_IHU_10_item+0xbc>)
 8005134:	58d3      	ldr	r3, [r2, r3]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	b373      	cbz	r3, 8005198 <LCD_IHU_10_item+0x8c>
        hzkdis(IHU_10Value[item][g_IHU_10[item]]);
 800513a:	4b24      	ldr	r3, [pc, #144]	@ (80051cc <LCD_IHU_10_item+0xc0>)
 800513c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8005140:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8005144:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005148:	f7fe fa86 	bl	8003658 <hzkdis>
    item = GET_MENU(item+1, IHU_10_ITEM_MAX);
 800514c:	2c01      	cmp	r4, #1
 800514e:	d929      	bls.n	80051a4 <LCD_IHU_10_item+0x98>
 8005150:	3c02      	subs	r4, #2
 8005152:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8005154:	208b      	movs	r0, #139	@ 0x8b
 8005156:	f7fe fa4f 	bl	80035f8 <write_com>
    hzkdis(IHU_10Item[item]);
 800515a:	4b1a      	ldr	r3, [pc, #104]	@ (80051c4 <LCD_IHU_10_item+0xb8>)
 800515c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005160:	f7fe fa7a 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8005164:	209b      	movs	r0, #155	@ 0x9b
 8005166:	f7fe fa47 	bl	80035f8 <write_com>
    if (strcmp(IHU_10Value[item][0], "") != 0) {
 800516a:	01a3      	lsls	r3, r4, #6
 800516c:	4a16      	ldr	r2, [pc, #88]	@ (80051c8 <LCD_IHU_10_item+0xbc>)
 800516e:	58d3      	ldr	r3, [r2, r3]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	b1d3      	cbz	r3, 80051aa <LCD_IHU_10_item+0x9e>
        hzkdis(IHU_10Value[item][g_IHU_10[item]]);
 8005174:	4b15      	ldr	r3, [pc, #84]	@ (80051cc <LCD_IHU_10_item+0xc0>)
 8005176:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800517a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800517e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005182:	f7fe fa69 	bl	8003658 <hzkdis>
    write_com(0x93);
 8005186:	2093      	movs	r0, #147	@ 0x93
 8005188:	f7fe fa36 	bl	80035f8 <write_com>
    if(old_value != value)
 800518c:	4b10      	ldr	r3, [pc, #64]	@ (80051d0 <LCD_IHU_10_item+0xc4>)
 800518e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005192:	42ab      	cmp	r3, r5
 8005194:	d10f      	bne.n	80051b6 <LCD_IHU_10_item+0xaa>
}
 8005196:	bd38      	pop	{r3, r4, r5, pc}
        LCD_ShowNum(g_IHU_10[item]);
 8005198:	4b0c      	ldr	r3, [pc, #48]	@ (80051cc <LCD_IHU_10_item+0xc0>)
 800519a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800519e:	f7fe fa69 	bl	8003674 <LCD_ShowNum>
 80051a2:	e7d3      	b.n	800514c <LCD_IHU_10_item+0x40>
    item = GET_MENU(item+1, IHU_10_ITEM_MAX);
 80051a4:	3401      	adds	r4, #1
 80051a6:	b2e4      	uxtb	r4, r4
 80051a8:	e7d4      	b.n	8005154 <LCD_IHU_10_item+0x48>
        LCD_ShowNum(g_IHU_10[item]);
 80051aa:	4b08      	ldr	r3, [pc, #32]	@ (80051cc <LCD_IHU_10_item+0xc0>)
 80051ac:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80051b0:	f7fe fa60 	bl	8003674 <LCD_ShowNum>
 80051b4:	e7e7      	b.n	8005186 <LCD_IHU_10_item+0x7a>
        old_value = value;
 80051b6:	4b06      	ldr	r3, [pc, #24]	@ (80051d0 <LCD_IHU_10_item+0xc4>)
 80051b8:	801d      	strh	r5, [r3, #0]
        CanIl_SendEventMsg(IHU_10);
 80051ba:	2002      	movs	r0, #2
 80051bc:	f005 fe6c 	bl	800ae98 <CanIl_SendEventMsg>
}
 80051c0:	e7e9      	b.n	8005196 <LCD_IHU_10_item+0x8a>
 80051c2:	bf00      	nop
 80051c4:	20007710 	.word	0x20007710
 80051c8:	20007650 	.word	0x20007650
 80051cc:	2000893c 	.word	0x2000893c
 80051d0:	2000856e 	.word	0x2000856e

080051d4 <LCD_IHU_1_item>:
{
 80051d4:	b538      	push	{r3, r4, r5, lr}
 80051d6:	4604      	mov	r4, r0
 80051d8:	460d      	mov	r5, r1
    item = GET_MENU(item, IHU_1_ITEM_MAX);
 80051da:	2815      	cmp	r0, #21
 80051dc:	d902      	bls.n	80051e4 <LCD_IHU_1_item+0x10>
 80051de:	f1a0 0416 	sub.w	r4, r0, #22
 80051e2:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 80051e4:	2083      	movs	r0, #131	@ 0x83
 80051e6:	f7fe fa07 	bl	80035f8 <write_com>
    hzkdis(IHU_1Item[item]);
 80051ea:	4b28      	ldr	r3, [pc, #160]	@ (800528c <LCD_IHU_1_item+0xb8>)
 80051ec:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80051f0:	f7fe fa32 	bl	8003658 <hzkdis>
    write_com(0x93);
 80051f4:	2093      	movs	r0, #147	@ 0x93
 80051f6:	f7fe f9ff 	bl	80035f8 <write_com>
    if (strcmp(IHU_1Value[item][0], "") != 0) {
 80051fa:	01a3      	lsls	r3, r4, #6
 80051fc:	4a24      	ldr	r2, [pc, #144]	@ (8005290 <LCD_IHU_1_item+0xbc>)
 80051fe:	58d3      	ldr	r3, [r2, r3]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	b373      	cbz	r3, 8005262 <LCD_IHU_1_item+0x8e>
        hzkdis(IHU_1Value[item][g_IHU_1[item]]);
 8005204:	4b23      	ldr	r3, [pc, #140]	@ (8005294 <LCD_IHU_1_item+0xc0>)
 8005206:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800520a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800520e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005212:	f7fe fa21 	bl	8003658 <hzkdis>
    item = GET_MENU(item+1, IHU_1_ITEM_MAX);
 8005216:	2c14      	cmp	r4, #20
 8005218:	d929      	bls.n	800526e <LCD_IHU_1_item+0x9a>
 800521a:	3c15      	subs	r4, #21
 800521c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800521e:	208b      	movs	r0, #139	@ 0x8b
 8005220:	f7fe f9ea 	bl	80035f8 <write_com>
    hzkdis(IHU_1Item[item]);
 8005224:	4b19      	ldr	r3, [pc, #100]	@ (800528c <LCD_IHU_1_item+0xb8>)
 8005226:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800522a:	f7fe fa15 	bl	8003658 <hzkdis>
    write_com(0x9b);
 800522e:	209b      	movs	r0, #155	@ 0x9b
 8005230:	f7fe f9e2 	bl	80035f8 <write_com>
    if (strcmp(IHU_1Value[item][0], "") != 0) {
 8005234:	01a3      	lsls	r3, r4, #6
 8005236:	4a16      	ldr	r2, [pc, #88]	@ (8005290 <LCD_IHU_1_item+0xbc>)
 8005238:	58d3      	ldr	r3, [r2, r3]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	b1d3      	cbz	r3, 8005274 <LCD_IHU_1_item+0xa0>
        hzkdis(IHU_1Value[item][g_IHU_1[item]]);
 800523e:	4b15      	ldr	r3, [pc, #84]	@ (8005294 <LCD_IHU_1_item+0xc0>)
 8005240:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8005244:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8005248:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800524c:	f7fe fa04 	bl	8003658 <hzkdis>
    write_com(0x93);
 8005250:	2093      	movs	r0, #147	@ 0x93
 8005252:	f7fe f9d1 	bl	80035f8 <write_com>
    if(old_value != value)
 8005256:	4b10      	ldr	r3, [pc, #64]	@ (8005298 <LCD_IHU_1_item+0xc4>)
 8005258:	f9b3 3000 	ldrsh.w	r3, [r3]
 800525c:	42ab      	cmp	r3, r5
 800525e:	d10f      	bne.n	8005280 <LCD_IHU_1_item+0xac>
}
 8005260:	bd38      	pop	{r3, r4, r5, pc}
        LCD_ShowNum(g_IHU_1[item]);
 8005262:	4b0c      	ldr	r3, [pc, #48]	@ (8005294 <LCD_IHU_1_item+0xc0>)
 8005264:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8005268:	f7fe fa04 	bl	8003674 <LCD_ShowNum>
 800526c:	e7d3      	b.n	8005216 <LCD_IHU_1_item+0x42>
    item = GET_MENU(item+1, IHU_1_ITEM_MAX);
 800526e:	3401      	adds	r4, #1
 8005270:	b2e4      	uxtb	r4, r4
 8005272:	e7d4      	b.n	800521e <LCD_IHU_1_item+0x4a>
        LCD_ShowNum(g_IHU_1[item]);
 8005274:	4b07      	ldr	r3, [pc, #28]	@ (8005294 <LCD_IHU_1_item+0xc0>)
 8005276:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800527a:	f7fe f9fb 	bl	8003674 <LCD_ShowNum>
 800527e:	e7e7      	b.n	8005250 <LCD_IHU_1_item+0x7c>
        old_value = value;
 8005280:	4b05      	ldr	r3, [pc, #20]	@ (8005298 <LCD_IHU_1_item+0xc4>)
 8005282:	801d      	strh	r5, [r3, #0]
        CanIl_SendEventMsg(IHU_1);
 8005284:	2007      	movs	r0, #7
 8005286:	f005 fe07 	bl	800ae98 <CanIl_SendEventMsg>
}
 800528a:	e7e9      	b.n	8005260 <LCD_IHU_1_item+0x8c>
 800528c:	20006424 	.word	0x20006424
 8005290:	20005ea4 	.word	0x20005ea4
 8005294:	20008888 	.word	0x20008888
 8005298:	2000856c 	.word	0x2000856c

0800529c <LCD_ACU_1_item>:
{
 800529c:	b538      	push	{r3, r4, r5, lr}
 800529e:	4604      	mov	r4, r0
    item = GET_MENU(item, ACU_1_ITEM_MAX);
 80052a0:	2802      	cmp	r0, #2
 80052a2:	d901      	bls.n	80052a8 <LCD_ACU_1_item+0xc>
 80052a4:	1ec4      	subs	r4, r0, #3
 80052a6:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 80052a8:	2083      	movs	r0, #131	@ 0x83
 80052aa:	f7fe f9a5 	bl	80035f8 <write_com>
    hzkdis(ACU_1Item[item]);
 80052ae:	4625      	mov	r5, r4
 80052b0:	4b47      	ldr	r3, [pc, #284]	@ (80053d0 <LCD_ACU_1_item+0x134>)
 80052b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80052b6:	f7fe f9cf 	bl	8003658 <hzkdis>
    write_com(0x93);
 80052ba:	2093      	movs	r0, #147	@ 0x93
 80052bc:	f7fe f99c 	bl	80035f8 <write_com>
    tmp = g_ACU_1[item];
 80052c0:	4b44      	ldr	r3, [pc, #272]	@ (80053d4 <LCD_ACU_1_item+0x138>)
 80052c2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
    if(item == 0){
 80052c6:	b974      	cbnz	r4, 80052e6 <LCD_ACU_1_item+0x4a>
 80052c8:	2810      	cmp	r0, #16
 80052ca:	d80c      	bhi.n	80052e6 <LCD_ACU_1_item+0x4a>
 80052cc:	e8df f000 	tbb	[pc, r0]
 80052d0:	0b090941 	.word	0x0b090941
 80052d4:	0b0b0b3e 	.word	0x0b0b0b3e
 80052d8:	0b0b0b3b 	.word	0x0b0b0b3b
 80052dc:	0b0b0b0b 	.word	0x0b0b0b0b
 80052e0:	38          	.byte	0x38
 80052e1:	00          	.byte	0x00
				crash_flag = tmp;
 80052e2:	4b3d      	ldr	r3, [pc, #244]	@ (80053d8 <LCD_ACU_1_item+0x13c>)
 80052e4:	7018      	strb	r0, [r3, #0]
	if (strcmp(ACU_1Value[item][0], "") != 0) {
 80052e6:	01ab      	lsls	r3, r5, #6
 80052e8:	4a3c      	ldr	r2, [pc, #240]	@ (80053dc <LCD_ACU_1_item+0x140>)
 80052ea:	58d3      	ldr	r3, [r2, r3]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d036      	beq.n	8005360 <LCD_ACU_1_item+0xc4>
		hzkdis(ACU_1Value[item][tmp]);
 80052f2:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 80052f6:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80052fa:	f7fe f9ad 	bl	8003658 <hzkdis>
    item = GET_MENU(item+1, ACU_1_ITEM_MAX);
 80052fe:	2c01      	cmp	r4, #1
 8005300:	d931      	bls.n	8005366 <LCD_ACU_1_item+0xca>
 8005302:	3c02      	subs	r4, #2
 8005304:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8005306:	208b      	movs	r0, #139	@ 0x8b
 8005308:	f7fe f976 	bl	80035f8 <write_com>
    hzkdis(ACU_1Item[item]);
 800530c:	4625      	mov	r5, r4
 800530e:	4b30      	ldr	r3, [pc, #192]	@ (80053d0 <LCD_ACU_1_item+0x134>)
 8005310:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005314:	f7fe f9a0 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8005318:	209b      	movs	r0, #155	@ 0x9b
 800531a:	f7fe f96d 	bl	80035f8 <write_com>
    tmp = g_ACU_1[item];
 800531e:	4b2d      	ldr	r3, [pc, #180]	@ (80053d4 <LCD_ACU_1_item+0x138>)
 8005320:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
    if(item == 0){
 8005324:	bb24      	cbnz	r4, 8005370 <LCD_ACU_1_item+0xd4>
 8005326:	2810      	cmp	r0, #16
 8005328:	d822      	bhi.n	8005370 <LCD_ACU_1_item+0xd4>
 800532a:	e8df f000 	tbb	[pc, r0]
 800532e:	3c3f      	.short	0x3c3f
 8005330:	2139213c 	.word	0x2139213c
 8005334:	21362121 	.word	0x21362121
 8005338:	21212121 	.word	0x21212121
 800533c:	2121      	.short	0x2121
 800533e:	1f          	.byte	0x1f
 800533f:	00          	.byte	0x00
				crash_flag = tmp;
 8005340:	4b25      	ldr	r3, [pc, #148]	@ (80053d8 <LCD_ACU_1_item+0x13c>)
 8005342:	7018      	strb	r0, [r3, #0]
 8005344:	e7cf      	b.n	80052e6 <LCD_ACU_1_item+0x4a>
 8005346:	4b24      	ldr	r3, [pc, #144]	@ (80053d8 <LCD_ACU_1_item+0x13c>)
 8005348:	7018      	strb	r0, [r3, #0]
 800534a:	e7cc      	b.n	80052e6 <LCD_ACU_1_item+0x4a>
 800534c:	4b22      	ldr	r3, [pc, #136]	@ (80053d8 <LCD_ACU_1_item+0x13c>)
 800534e:	7018      	strb	r0, [r3, #0]
 8005350:	e7c9      	b.n	80052e6 <LCD_ACU_1_item+0x4a>
			if(first_crash_flag == 1){
 8005352:	4b23      	ldr	r3, [pc, #140]	@ (80053e0 <LCD_ACU_1_item+0x144>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d1c5      	bne.n	80052e6 <LCD_ACU_1_item+0x4a>
				tmp = crash_flag;
 800535a:	4b1f      	ldr	r3, [pc, #124]	@ (80053d8 <LCD_ACU_1_item+0x13c>)
 800535c:	7818      	ldrb	r0, [r3, #0]
 800535e:	e7c2      	b.n	80052e6 <LCD_ACU_1_item+0x4a>
		LCD_ShowNum(tmp);
 8005360:	f7fe f988 	bl	8003674 <LCD_ShowNum>
 8005364:	e7cb      	b.n	80052fe <LCD_ACU_1_item+0x62>
    item = GET_MENU(item+1, ACU_1_ITEM_MAX);
 8005366:	3401      	adds	r4, #1
 8005368:	b2e4      	uxtb	r4, r4
 800536a:	e7cc      	b.n	8005306 <LCD_ACU_1_item+0x6a>
				crash_flag = tmp;
 800536c:	4b1a      	ldr	r3, [pc, #104]	@ (80053d8 <LCD_ACU_1_item+0x13c>)
 800536e:	7018      	strb	r0, [r3, #0]
    if (strcmp(ACU_1Value[item][0], "") != 0) {
 8005370:	01ab      	lsls	r3, r5, #6
 8005372:	4a1a      	ldr	r2, [pc, #104]	@ (80053dc <LCD_ACU_1_item+0x140>)
 8005374:	58d3      	ldr	r3, [r2, r3]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	b1fb      	cbz	r3, 80053ba <LCD_ACU_1_item+0x11e>
        hzkdis(ACU_1Value[item][tmp]);
 800537a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800537e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8005382:	f7fe f969 	bl	8003658 <hzkdis>
    write_com(0x93);
 8005386:	2093      	movs	r0, #147	@ 0x93
 8005388:	f7fe f936 	bl	80035f8 <write_com>
    if(crash_flag != 0 && first_crash_flag == 0){
 800538c:	4b12      	ldr	r3, [pc, #72]	@ (80053d8 <LCD_ACU_1_item+0x13c>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	b113      	cbz	r3, 8005398 <LCD_ACU_1_item+0xfc>
 8005392:	4b13      	ldr	r3, [pc, #76]	@ (80053e0 <LCD_ACU_1_item+0x144>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	b19b      	cbz	r3, 80053c0 <LCD_ACU_1_item+0x124>
}
 8005398:	bd38      	pop	{r3, r4, r5, pc}
				crash_flag = tmp;
 800539a:	4b0f      	ldr	r3, [pc, #60]	@ (80053d8 <LCD_ACU_1_item+0x13c>)
 800539c:	7018      	strb	r0, [r3, #0]
 800539e:	e7e7      	b.n	8005370 <LCD_ACU_1_item+0xd4>
 80053a0:	4b0d      	ldr	r3, [pc, #52]	@ (80053d8 <LCD_ACU_1_item+0x13c>)
 80053a2:	7018      	strb	r0, [r3, #0]
 80053a4:	e7e4      	b.n	8005370 <LCD_ACU_1_item+0xd4>
 80053a6:	4b0c      	ldr	r3, [pc, #48]	@ (80053d8 <LCD_ACU_1_item+0x13c>)
 80053a8:	7018      	strb	r0, [r3, #0]
 80053aa:	e7e1      	b.n	8005370 <LCD_ACU_1_item+0xd4>
			if(first_crash_flag == 1){
 80053ac:	4b0c      	ldr	r3, [pc, #48]	@ (80053e0 <LCD_ACU_1_item+0x144>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d1dd      	bne.n	8005370 <LCD_ACU_1_item+0xd4>
				tmp = crash_flag;
 80053b4:	4b08      	ldr	r3, [pc, #32]	@ (80053d8 <LCD_ACU_1_item+0x13c>)
 80053b6:	7818      	ldrb	r0, [r3, #0]
 80053b8:	e7da      	b.n	8005370 <LCD_ACU_1_item+0xd4>
        LCD_ShowNum(tmp);
 80053ba:	f7fe f95b 	bl	8003674 <LCD_ShowNum>
 80053be:	e7e2      	b.n	8005386 <LCD_ACU_1_item+0xea>
    	CanIl_SendEventMsg(ACU_1);
 80053c0:	2010      	movs	r0, #16
 80053c2:	f005 fd69 	bl	800ae98 <CanIl_SendEventMsg>
    	first_crash_flag = 1;
 80053c6:	4b06      	ldr	r3, [pc, #24]	@ (80053e0 <LCD_ACU_1_item+0x144>)
 80053c8:	2201      	movs	r2, #1
 80053ca:	701a      	strb	r2, [r3, #0]
}
 80053cc:	e7e4      	b.n	8005398 <LCD_ACU_1_item+0xfc>
 80053ce:	bf00      	nop
 80053d0:	2000446c 	.word	0x2000446c
 80053d4:	200087bc 	.word	0x200087bc
 80053d8:	20008575 	.word	0x20008575
 80053dc:	200043ac 	.word	0x200043ac
 80053e0:	20008574 	.word	0x20008574

080053e4 <LCD_IC_1_item>:
{
 80053e4:	b510      	push	{r4, lr}
 80053e6:	4604      	mov	r4, r0
    item = GET_MENU(item, IC_1_ITEM_MAX);
 80053e8:	2810      	cmp	r0, #16
 80053ea:	d902      	bls.n	80053f2 <LCD_IC_1_item+0xe>
 80053ec:	f1a0 0411 	sub.w	r4, r0, #17
 80053f0:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 80053f2:	2083      	movs	r0, #131	@ 0x83
 80053f4:	f7fe f900 	bl	80035f8 <write_com>
    hzkdis(IC_1Item[item]);
 80053f8:	4b22      	ldr	r3, [pc, #136]	@ (8005484 <LCD_IC_1_item+0xa0>)
 80053fa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80053fe:	f7fe f92b 	bl	8003658 <hzkdis>
    write_com(0x93);
 8005402:	2093      	movs	r0, #147	@ 0x93
 8005404:	f7fe f8f8 	bl	80035f8 <write_com>
    if (strcmp(IC_1Value[item][0], "") != 0) {
 8005408:	01a3      	lsls	r3, r4, #6
 800540a:	4a1f      	ldr	r2, [pc, #124]	@ (8005488 <LCD_IC_1_item+0xa4>)
 800540c:	58d3      	ldr	r3, [r2, r3]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	b34b      	cbz	r3, 8005466 <LCD_IC_1_item+0x82>
        hzkdis(IC_1Value[item][g_IC_1[item]]);
 8005412:	4b1e      	ldr	r3, [pc, #120]	@ (800548c <LCD_IC_1_item+0xa8>)
 8005414:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005418:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800541c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005420:	f7fe f91a 	bl	8003658 <hzkdis>
    item = GET_MENU(item+1, IC_1_ITEM_MAX);
 8005424:	2c0f      	cmp	r4, #15
 8005426:	d924      	bls.n	8005472 <LCD_IC_1_item+0x8e>
 8005428:	3c10      	subs	r4, #16
 800542a:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800542c:	208b      	movs	r0, #139	@ 0x8b
 800542e:	f7fe f8e3 	bl	80035f8 <write_com>
    hzkdis(IC_1Item[item]);
 8005432:	4b14      	ldr	r3, [pc, #80]	@ (8005484 <LCD_IC_1_item+0xa0>)
 8005434:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005438:	f7fe f90e 	bl	8003658 <hzkdis>
    write_com(0x9b);
 800543c:	209b      	movs	r0, #155	@ 0x9b
 800543e:	f7fe f8db 	bl	80035f8 <write_com>
    if (strcmp(IC_1Value[item][0], "") != 0) {
 8005442:	01a3      	lsls	r3, r4, #6
 8005444:	4a10      	ldr	r2, [pc, #64]	@ (8005488 <LCD_IC_1_item+0xa4>)
 8005446:	58d3      	ldr	r3, [r2, r3]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	b1ab      	cbz	r3, 8005478 <LCD_IC_1_item+0x94>
        hzkdis(IC_1Value[item][g_IC_1[item]]);
 800544c:	4b0f      	ldr	r3, [pc, #60]	@ (800548c <LCD_IC_1_item+0xa8>)
 800544e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005452:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8005456:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800545a:	f7fe f8fd 	bl	8003658 <hzkdis>
    write_com(0x93);
 800545e:	2093      	movs	r0, #147	@ 0x93
 8005460:	f7fe f8ca 	bl	80035f8 <write_com>
}
 8005464:	bd10      	pop	{r4, pc}
        LCD_Show32Num(g_IC_1[item]);
 8005466:	4b09      	ldr	r3, [pc, #36]	@ (800548c <LCD_IC_1_item+0xa8>)
 8005468:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800546c:	f7fe f974 	bl	8003758 <LCD_Show32Num>
 8005470:	e7d8      	b.n	8005424 <LCD_IC_1_item+0x40>
    item = GET_MENU(item+1, IC_1_ITEM_MAX);
 8005472:	3401      	adds	r4, #1
 8005474:	b2e4      	uxtb	r4, r4
 8005476:	e7d9      	b.n	800542c <LCD_IC_1_item+0x48>
        LCD_Show32Num(g_IC_1[item]);
 8005478:	4b04      	ldr	r3, [pc, #16]	@ (800548c <LCD_IC_1_item+0xa8>)
 800547a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800547e:	f7fe f96b 	bl	8003758 <LCD_Show32Num>
 8005482:	e7ec      	b.n	800545e <LCD_IC_1_item+0x7a>
 8005484:	200039c8 	.word	0x200039c8
 8005488:	20003588 	.word	0x20003588
 800548c:	2000872c 	.word	0x2000872c

08005490 <LCD_IHU_7_item>:
{
 8005490:	b510      	push	{r4, lr}
 8005492:	4604      	mov	r4, r0
    item = GET_MENU(item, IHU_7_ITEM_MAX);
 8005494:	2809      	cmp	r0, #9
 8005496:	d902      	bls.n	800549e <LCD_IHU_7_item+0xe>
 8005498:	f1a0 040a 	sub.w	r4, r0, #10
 800549c:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 800549e:	2083      	movs	r0, #131	@ 0x83
 80054a0:	f7fe f8aa 	bl	80035f8 <write_com>
    hzkdis(IHU_7Item[item]);
 80054a4:	4b22      	ldr	r3, [pc, #136]	@ (8005530 <LCD_IHU_7_item+0xa0>)
 80054a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80054aa:	f7fe f8d5 	bl	8003658 <hzkdis>
    write_com(0x93);
 80054ae:	2093      	movs	r0, #147	@ 0x93
 80054b0:	f7fe f8a2 	bl	80035f8 <write_com>
    if (strcmp(IHU_7Value[item][0], "") != 0) {
 80054b4:	01a3      	lsls	r3, r4, #6
 80054b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005534 <LCD_IHU_7_item+0xa4>)
 80054b8:	58d3      	ldr	r3, [r2, r3]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	b34b      	cbz	r3, 8005512 <LCD_IHU_7_item+0x82>
        hzkdis(IHU_7Value[item][g_IHU_7[item]]);
 80054be:	4b1e      	ldr	r3, [pc, #120]	@ (8005538 <LCD_IHU_7_item+0xa8>)
 80054c0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80054c4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80054c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80054cc:	f7fe f8c4 	bl	8003658 <hzkdis>
    item = GET_MENU(item+1, IHU_7_ITEM_MAX);
 80054d0:	2c08      	cmp	r4, #8
 80054d2:	d924      	bls.n	800551e <LCD_IHU_7_item+0x8e>
 80054d4:	3c09      	subs	r4, #9
 80054d6:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80054d8:	208b      	movs	r0, #139	@ 0x8b
 80054da:	f7fe f88d 	bl	80035f8 <write_com>
    hzkdis(IHU_7Item[item]);
 80054de:	4b14      	ldr	r3, [pc, #80]	@ (8005530 <LCD_IHU_7_item+0xa0>)
 80054e0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80054e4:	f7fe f8b8 	bl	8003658 <hzkdis>
    write_com(0x9b);
 80054e8:	209b      	movs	r0, #155	@ 0x9b
 80054ea:	f7fe f885 	bl	80035f8 <write_com>
    if (strcmp(IHU_7Value[item][0], "") != 0) {
 80054ee:	01a3      	lsls	r3, r4, #6
 80054f0:	4a10      	ldr	r2, [pc, #64]	@ (8005534 <LCD_IHU_7_item+0xa4>)
 80054f2:	58d3      	ldr	r3, [r2, r3]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	b1ab      	cbz	r3, 8005524 <LCD_IHU_7_item+0x94>
        hzkdis(IHU_7Value[item][g_IHU_7[item]]);
 80054f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005538 <LCD_IHU_7_item+0xa8>)
 80054fa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80054fe:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8005502:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005506:	f7fe f8a7 	bl	8003658 <hzkdis>
    write_com(0x93);
 800550a:	2093      	movs	r0, #147	@ 0x93
 800550c:	f7fe f874 	bl	80035f8 <write_com>
}
 8005510:	bd10      	pop	{r4, pc}
        LCD_Show32Num(g_IHU_7[item]);
 8005512:	4b09      	ldr	r3, [pc, #36]	@ (8005538 <LCD_IHU_7_item+0xa8>)
 8005514:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005518:	f7fe f91e 	bl	8003758 <LCD_Show32Num>
 800551c:	e7d8      	b.n	80054d0 <LCD_IHU_7_item+0x40>
    item = GET_MENU(item+1, IHU_7_ITEM_MAX);
 800551e:	3401      	adds	r4, #1
 8005520:	b2e4      	uxtb	r4, r4
 8005522:	e7d9      	b.n	80054d8 <LCD_IHU_7_item+0x48>
        LCD_Show32Num(g_IHU_7[item]);
 8005524:	4b04      	ldr	r3, [pc, #16]	@ (8005538 <LCD_IHU_7_item+0xa8>)
 8005526:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800552a:	f7fe f915 	bl	8003758 <LCD_Show32Num>
 800552e:	e7ec      	b.n	800550a <LCD_IHU_7_item+0x7a>
 8005530:	20002350 	.word	0x20002350
 8005534:	200020d0 	.word	0x200020d0
 8005538:	2000867c 	.word	0x2000867c

0800553c <LCD_IHU_8_item>:
{
 800553c:	b510      	push	{r4, lr}
 800553e:	4604      	mov	r4, r0
    item = GET_MENU(item, IHU_8_ITEM_MAX);
 8005540:	2805      	cmp	r0, #5
 8005542:	d901      	bls.n	8005548 <LCD_IHU_8_item+0xc>
 8005544:	1f84      	subs	r4, r0, #6
 8005546:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8005548:	2083      	movs	r0, #131	@ 0x83
 800554a:	f7fe f855 	bl	80035f8 <write_com>
    hzkdis(IHU_8Item[item]);
 800554e:	4b23      	ldr	r3, [pc, #140]	@ (80055dc <LCD_IHU_8_item+0xa0>)
 8005550:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005554:	f7fe f880 	bl	8003658 <hzkdis>
    write_com(0x93);
 8005558:	2093      	movs	r0, #147	@ 0x93
 800555a:	f7fe f84d 	bl	80035f8 <write_com>
    if (strcmp(IHU_8Value[item][0], "") != 0) {
 800555e:	01a3      	lsls	r3, r4, #6
 8005560:	4a1f      	ldr	r2, [pc, #124]	@ (80055e0 <LCD_IHU_8_item+0xa4>)
 8005562:	58d3      	ldr	r3, [r2, r3]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	b34b      	cbz	r3, 80055bc <LCD_IHU_8_item+0x80>
        hzkdis(IHU_8Value[item][g_IHU_8[item]]);
 8005568:	4b1e      	ldr	r3, [pc, #120]	@ (80055e4 <LCD_IHU_8_item+0xa8>)
 800556a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800556e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8005572:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005576:	f7fe f86f 	bl	8003658 <hzkdis>
    item = GET_MENU(item+1, IHU_8_ITEM_MAX);
 800557a:	2c04      	cmp	r4, #4
 800557c:	d924      	bls.n	80055c8 <LCD_IHU_8_item+0x8c>
 800557e:	3c05      	subs	r4, #5
 8005580:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8005582:	208b      	movs	r0, #139	@ 0x8b
 8005584:	f7fe f838 	bl	80035f8 <write_com>
    hzkdis(IHU_8Item[item]);
 8005588:	4b14      	ldr	r3, [pc, #80]	@ (80055dc <LCD_IHU_8_item+0xa0>)
 800558a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800558e:	f7fe f863 	bl	8003658 <hzkdis>
    write_com(0x9b);
 8005592:	209b      	movs	r0, #155	@ 0x9b
 8005594:	f7fe f830 	bl	80035f8 <write_com>
    if (strcmp(IHU_8Value[item][0], "") != 0) {
 8005598:	01a3      	lsls	r3, r4, #6
 800559a:	4a11      	ldr	r2, [pc, #68]	@ (80055e0 <LCD_IHU_8_item+0xa4>)
 800559c:	58d3      	ldr	r3, [r2, r3]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	b1ab      	cbz	r3, 80055ce <LCD_IHU_8_item+0x92>
        hzkdis(IHU_8Value[item][g_IHU_8[item]]);
 80055a2:	4b10      	ldr	r3, [pc, #64]	@ (80055e4 <LCD_IHU_8_item+0xa8>)
 80055a4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80055a8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80055ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80055b0:	f7fe f852 	bl	8003658 <hzkdis>
    write_com(0x93);
 80055b4:	2093      	movs	r0, #147	@ 0x93
 80055b6:	f7fe f81f 	bl	80035f8 <write_com>
}
 80055ba:	bd10      	pop	{r4, pc}
        LCD_Show32Num(g_IHU_8[item]);
 80055bc:	4b09      	ldr	r3, [pc, #36]	@ (80055e4 <LCD_IHU_8_item+0xa8>)
 80055be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80055c2:	f7fe f8c9 	bl	8003758 <LCD_Show32Num>
 80055c6:	e7d8      	b.n	800557a <LCD_IHU_8_item+0x3e>
    item = GET_MENU(item+1, IHU_8_ITEM_MAX);
 80055c8:	3401      	adds	r4, #1
 80055ca:	b2e4      	uxtb	r4, r4
 80055cc:	e7d9      	b.n	8005582 <LCD_IHU_8_item+0x46>
        LCD_Show32Num(g_IHU_8[item]);
 80055ce:	4b05      	ldr	r3, [pc, #20]	@ (80055e4 <LCD_IHU_8_item+0xa8>)
 80055d0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80055d4:	f7fe f8c0 	bl	8003758 <LCD_Show32Num>
 80055d8:	e7ec      	b.n	80055b4 <LCD_IHU_8_item+0x78>
 80055da:	bf00      	nop
 80055dc:	20002090 	.word	0x20002090
 80055e0:	20001f10 	.word	0x20001f10
 80055e4:	20008664 	.word	0x20008664

080055e8 <GetItemValue>:
    switch(menu)
 80055e8:	2826      	cmp	r0, #38	@ 0x26
 80055ea:	f200 812e 	bhi.w	800584a <GetItemValue+0x262>
 80055ee:	e8df f010 	tbh	[pc, r0, lsl #1]
 80055f2:	0027      	.short	0x0027
 80055f4:	0035002e 	.word	0x0035002e
 80055f8:	0043003c 	.word	0x0043003c
 80055fc:	0051004a 	.word	0x0051004a
 8005600:	005f0058 	.word	0x005f0058
 8005604:	006d0066 	.word	0x006d0066
 8005608:	007b0074 	.word	0x007b0074
 800560c:	00890082 	.word	0x00890082
 8005610:	00970090 	.word	0x00970090
 8005614:	00a5009e 	.word	0x00a5009e
 8005618:	00b300ac 	.word	0x00b300ac
 800561c:	00c200ba 	.word	0x00c200ba
 8005620:	00d000c9 	.word	0x00d000c9
 8005624:	00de00d7 	.word	0x00de00d7
 8005628:	00ea00e4 	.word	0x00ea00e4
 800562c:	00f600f0 	.word	0x00f600f0
 8005630:	010200fc 	.word	0x010200fc
 8005634:	010e0108 	.word	0x010e0108
 8005638:	011a0114 	.word	0x011a0114
 800563c:	01260120 	.word	0x01260120
            if(item < IHU_3_ITEM_MAX)
 8005640:	2919      	cmp	r1, #25
 8005642:	f200 8104 	bhi.w	800584e <GetItemValue+0x266>
                res = g_IHU_3[item];
 8005646:	4ba8      	ldr	r3, [pc, #672]	@ (80058e8 <GetItemValue+0x300>)
 8005648:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800564c:	4770      	bx	lr
            if(item < IHU_6_ITEM_MAX)
 800564e:	2905      	cmp	r1, #5
 8005650:	f200 80ff 	bhi.w	8005852 <GetItemValue+0x26a>
                res = g_IHU_6[item];
 8005654:	4ba5      	ldr	r3, [pc, #660]	@ (80058ec <GetItemValue+0x304>)
 8005656:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800565a:	4770      	bx	lr
            if(item < IHU_10_ITEM_MAX)
 800565c:	2902      	cmp	r1, #2
 800565e:	f200 80fa 	bhi.w	8005856 <GetItemValue+0x26e>
                res = g_IHU_10[item];
 8005662:	4ba3      	ldr	r3, [pc, #652]	@ (80058f0 <GetItemValue+0x308>)
 8005664:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005668:	4770      	bx	lr
            if(item < GW_PC_2_ITEM_MAX)
 800566a:	291b      	cmp	r1, #27
 800566c:	f200 80f5 	bhi.w	800585a <GetItemValue+0x272>
                res = g_GW_PC_2[item];
 8005670:	4ba0      	ldr	r3, [pc, #640]	@ (80058f4 <GetItemValue+0x30c>)
 8005672:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005676:	4770      	bx	lr
            if(item < GW_PC_7_ITEM_MAX)
 8005678:	2910      	cmp	r1, #16
 800567a:	f200 80f0 	bhi.w	800585e <GetItemValue+0x276>
                res = g_GW_PC_7[item];
 800567e:	4b9e      	ldr	r3, [pc, #632]	@ (80058f8 <GetItemValue+0x310>)
 8005680:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005684:	4770      	bx	lr
            if(item < PEPS_1_ITEM_MAX)
 8005686:	2910      	cmp	r1, #16
 8005688:	f200 80eb 	bhi.w	8005862 <GetItemValue+0x27a>
                res = g_PEPS_1[item];
 800568c:	4b9b      	ldr	r3, [pc, #620]	@ (80058fc <GetItemValue+0x314>)
 800568e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005692:	4770      	bx	lr
            if(item < PEPS_3_ITEM_MAX)
 8005694:	2902      	cmp	r1, #2
 8005696:	f200 80e6 	bhi.w	8005866 <GetItemValue+0x27e>
                res = g_PEPS_3[item];
 800569a:	4b99      	ldr	r3, [pc, #612]	@ (8005900 <GetItemValue+0x318>)
 800569c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80056a0:	4770      	bx	lr
            if(item < IHU_1_ITEM_MAX)
 80056a2:	2915      	cmp	r1, #21
 80056a4:	f200 80e1 	bhi.w	800586a <GetItemValue+0x282>
                res = g_IHU_1[item];
 80056a8:	4b96      	ldr	r3, [pc, #600]	@ (8005904 <GetItemValue+0x31c>)
 80056aa:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80056ae:	4770      	bx	lr
            if(item < FCM_3_ITEM_MAX)
 80056b0:	290e      	cmp	r1, #14
 80056b2:	f200 80dc 	bhi.w	800586e <GetItemValue+0x286>
                res = g_FCM_3[item];
 80056b6:	4b94      	ldr	r3, [pc, #592]	@ (8005908 <GetItemValue+0x320>)
 80056b8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80056bc:	4770      	bx	lr
            if(item < FCM_4_ITEM_MAX)
 80056be:	2914      	cmp	r1, #20
 80056c0:	f200 80d7 	bhi.w	8005872 <GetItemValue+0x28a>
                res = g_FCM_4[item];
 80056c4:	4b91      	ldr	r3, [pc, #580]	@ (800590c <GetItemValue+0x324>)
 80056c6:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80056ca:	4770      	bx	lr
            if(item < FCM_5_ITEM_MAX)
 80056cc:	290b      	cmp	r1, #11
 80056ce:	f200 80d2 	bhi.w	8005876 <GetItemValue+0x28e>
                res = g_FCM_5[item];
 80056d2:	4b8f      	ldr	r3, [pc, #572]	@ (8005910 <GetItemValue+0x328>)
 80056d4:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80056d8:	4770      	bx	lr
            if(item < FCM_6_ITEM_MAX)
 80056da:	290b      	cmp	r1, #11
 80056dc:	f200 80cd 	bhi.w	800587a <GetItemValue+0x292>
                res = g_FCM_6[item];
 80056e0:	4b8c      	ldr	r3, [pc, #560]	@ (8005914 <GetItemValue+0x32c>)
 80056e2:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80056e6:	4770      	bx	lr
            if(item < FCM_7_ITEM_MAX)
 80056e8:	290b      	cmp	r1, #11
 80056ea:	f200 80c8 	bhi.w	800587e <GetItemValue+0x296>
                res = g_FCM_7[item];
 80056ee:	4b8a      	ldr	r3, [pc, #552]	@ (8005918 <GetItemValue+0x330>)
 80056f0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80056f4:	4770      	bx	lr
            if(item < FCM_8_ITEM_MAX)
 80056f6:	290b      	cmp	r1, #11
 80056f8:	f200 80c3 	bhi.w	8005882 <GetItemValue+0x29a>
                res = g_FCM_8[item];
 80056fc:	4b87      	ldr	r3, [pc, #540]	@ (800591c <GetItemValue+0x334>)
 80056fe:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005702:	4770      	bx	lr
            if(item < BCM_5_ITEM_MAX)
 8005704:	2909      	cmp	r1, #9
 8005706:	f200 80be 	bhi.w	8005886 <GetItemValue+0x29e>
                res = g_BCM_5[item];
 800570a:	4b85      	ldr	r3, [pc, #532]	@ (8005920 <GetItemValue+0x338>)
 800570c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005710:	4770      	bx	lr
            if(item < TBOX_4_ITEM_MAX)
 8005712:	2900      	cmp	r1, #0
 8005714:	f040 80b9 	bne.w	800588a <GetItemValue+0x2a2>
                res = g_TBOX_4[item];
 8005718:	4b82      	ldr	r3, [pc, #520]	@ (8005924 <GetItemValue+0x33c>)
 800571a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800571e:	4770      	bx	lr
            if(item < ACU_1_ITEM_MAX)
 8005720:	2902      	cmp	r1, #2
 8005722:	f200 80b4 	bhi.w	800588e <GetItemValue+0x2a6>
                res = g_ACU_1[item];
 8005726:	4b80      	ldr	r3, [pc, #512]	@ (8005928 <GetItemValue+0x340>)
 8005728:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800572c:	4770      	bx	lr
            if(item < BCM_1_ITEM_MAX)
 800572e:	2902      	cmp	r1, #2
 8005730:	f200 80af 	bhi.w	8005892 <GetItemValue+0x2aa>
                res = g_BCM_1[item];
 8005734:	4b7d      	ldr	r3, [pc, #500]	@ (800592c <GetItemValue+0x344>)
 8005736:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800573a:	4770      	bx	lr
            if(item < BCM_4_ITEM_MAX)
 800573c:	2914      	cmp	r1, #20
 800573e:	f200 80aa 	bhi.w	8005896 <GetItemValue+0x2ae>
                res = g_BCM_4[item];
 8005742:	4b7b      	ldr	r3, [pc, #492]	@ (8005930 <GetItemValue+0x348>)
 8005744:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005748:	4770      	bx	lr
            if(item < TPMS_1_ITEM_MAX)
 800574a:	290a      	cmp	r1, #10
 800574c:	f200 80a5 	bhi.w	800589a <GetItemValue+0x2b2>
                res = g_TPMS_1[item];
 8005750:	4b78      	ldr	r3, [pc, #480]	@ (8005934 <GetItemValue+0x34c>)
 8005752:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005756:	4770      	bx	lr
            if(item < IC_1_ITEM_MAX)
 8005758:	2910      	cmp	r1, #16
 800575a:	f200 80a0 	bhi.w	800589e <GetItemValue+0x2b6>
                res = g_IC_1[item];
 800575e:	4b76      	ldr	r3, [pc, #472]	@ (8005938 <GetItemValue+0x350>)
 8005760:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8005764:	4770      	bx	lr
            if(item < IC_2_ITEM_MAX)
 8005766:	2901      	cmp	r1, #1
 8005768:	d901      	bls.n	800576e <GetItemValue+0x186>
    uint32_t res = 0U;
 800576a:	2000      	movs	r0, #0
 800576c:	4770      	bx	lr
                res = g_IC_2[item];
 800576e:	4b73      	ldr	r3, [pc, #460]	@ (800593c <GetItemValue+0x354>)
 8005770:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005774:	4770      	bx	lr
            if(item < GW_PC_4_ITEM_MAX)
 8005776:	2904      	cmp	r1, #4
 8005778:	f200 8093 	bhi.w	80058a2 <GetItemValue+0x2ba>
                res = g_GW_PC_4[item];
 800577c:	4b70      	ldr	r3, [pc, #448]	@ (8005940 <GetItemValue+0x358>)
 800577e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005782:	4770      	bx	lr
            if(item < GW_BD_14_ITEM_MAX)
 8005784:	2916      	cmp	r1, #22
 8005786:	f200 808e 	bhi.w	80058a6 <GetItemValue+0x2be>
                res = g_GW_BD_14[item];
 800578a:	4b6e      	ldr	r3, [pc, #440]	@ (8005944 <GetItemValue+0x35c>)
 800578c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005790:	4770      	bx	lr
            if(item < IHU_4_ITEM_MAX)
 8005792:	2903      	cmp	r1, #3
 8005794:	f200 8089 	bhi.w	80058aa <GetItemValue+0x2c2>
                res = g_IHU_4[item];
 8005798:	4b6b      	ldr	r3, [pc, #428]	@ (8005948 <GetItemValue+0x360>)
 800579a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800579e:	4770      	bx	lr
            if(item < IHU_5_ITEM_MAX)
 80057a0:	290b      	cmp	r1, #11
 80057a2:	f200 8084 	bhi.w	80058ae <GetItemValue+0x2c6>
                res = g_IHU_5[item];
 80057a6:	4b69      	ldr	r3, [pc, #420]	@ (800594c <GetItemValue+0x364>)
 80057a8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80057ac:	4770      	bx	lr
            if(item < GW_BD_29_ITEM_MAX)
 80057ae:	290c      	cmp	r1, #12
 80057b0:	d87f      	bhi.n	80058b2 <GetItemValue+0x2ca>
                res = g_GW_BD_29[item];
 80057b2:	4b67      	ldr	r3, [pc, #412]	@ (8005950 <GetItemValue+0x368>)
 80057b4:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80057b8:	4770      	bx	lr
            if(item < IHU_2_ITEM_MAX)
 80057ba:	2905      	cmp	r1, #5
 80057bc:	d87b      	bhi.n	80058b6 <GetItemValue+0x2ce>
                res = g_IHU_2[item];
 80057be:	4b65      	ldr	r3, [pc, #404]	@ (8005954 <GetItemValue+0x36c>)
 80057c0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80057c4:	4770      	bx	lr
            if(item < IHU_7_ITEM_MAX)
 80057c6:	2909      	cmp	r1, #9
 80057c8:	d877      	bhi.n	80058ba <GetItemValue+0x2d2>
                res = g_IHU_7[item];
 80057ca:	4b63      	ldr	r3, [pc, #396]	@ (8005958 <GetItemValue+0x370>)
 80057cc:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80057d0:	4770      	bx	lr
            if(item < IHU_8_ITEM_MAX)
 80057d2:	2905      	cmp	r1, #5
 80057d4:	d873      	bhi.n	80058be <GetItemValue+0x2d6>
                res = g_IHU_8[item];
 80057d6:	4b61      	ldr	r3, [pc, #388]	@ (800595c <GetItemValue+0x374>)
 80057d8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80057dc:	4770      	bx	lr
            if(item < IHU_9_ITEM_MAX)
 80057de:	2902      	cmp	r1, #2
 80057e0:	d86f      	bhi.n	80058c2 <GetItemValue+0x2da>
                res = g_IHU_9[item];
 80057e2:	4b5f      	ldr	r3, [pc, #380]	@ (8005960 <GetItemValue+0x378>)
 80057e4:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80057e8:	4770      	bx	lr
            if(item < TBOX_1_ITEM_MAX)
 80057ea:	2910      	cmp	r1, #16
 80057ec:	d86b      	bhi.n	80058c6 <GetItemValue+0x2de>
                res = g_TBOX_1[item];
 80057ee:	4b5d      	ldr	r3, [pc, #372]	@ (8005964 <GetItemValue+0x37c>)
 80057f0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80057f4:	4770      	bx	lr
            if(item < TBOX_2_ITEM_MAX)
 80057f6:	2902      	cmp	r1, #2
 80057f8:	d867      	bhi.n	80058ca <GetItemValue+0x2e2>
                res = g_TBOX_2[item];
 80057fa:	4b5b      	ldr	r3, [pc, #364]	@ (8005968 <GetItemValue+0x380>)
 80057fc:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005800:	4770      	bx	lr
            if(item < GW_PC_1_ITEM_MAX)
 8005802:	2914      	cmp	r1, #20
 8005804:	d863      	bhi.n	80058ce <GetItemValue+0x2e6>
                res = g_GW_PC_1[item];
 8005806:	4b59      	ldr	r3, [pc, #356]	@ (800596c <GetItemValue+0x384>)
 8005808:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800580c:	4770      	bx	lr
            if(item < GW_PC_6_ITEM_MAX)
 800580e:	2912      	cmp	r1, #18
 8005810:	d85f      	bhi.n	80058d2 <GetItemValue+0x2ea>
                res = g_GW_PC_6[item];
 8005812:	4b57      	ldr	r3, [pc, #348]	@ (8005970 <GetItemValue+0x388>)
 8005814:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005818:	4770      	bx	lr
            if(item < ESP_2_ITEM_MAX)
 800581a:	2905      	cmp	r1, #5
 800581c:	d85b      	bhi.n	80058d6 <GetItemValue+0x2ee>
                res = g_ESP_2[item];
 800581e:	4b55      	ldr	r3, [pc, #340]	@ (8005974 <GetItemValue+0x38c>)
 8005820:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005824:	4770      	bx	lr
            if(item < BCM_3_ITEM_MAX)
 8005826:	2902      	cmp	r1, #2
 8005828:	d857      	bhi.n	80058da <GetItemValue+0x2f2>
                res = g_BCM_3[item];
 800582a:	4b53      	ldr	r3, [pc, #332]	@ (8005978 <GetItemValue+0x390>)
 800582c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005830:	4770      	bx	lr
            if(item < GW_BD_9_ITEM_MAX)
 8005832:	291c      	cmp	r1, #28
 8005834:	d853      	bhi.n	80058de <GetItemValue+0x2f6>
                res = g_GW_BD_9[item];
 8005836:	4b51      	ldr	r3, [pc, #324]	@ (800597c <GetItemValue+0x394>)
 8005838:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800583c:	4770      	bx	lr
            if(item < GW_BD_24_ITEM_MAX)
 800583e:	2908      	cmp	r1, #8
 8005840:	d84f      	bhi.n	80058e2 <GetItemValue+0x2fa>
                res = g_GW_BD_24[item];
 8005842:	4b4f      	ldr	r3, [pc, #316]	@ (8005980 <GetItemValue+0x398>)
 8005844:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005848:	4770      	bx	lr
    switch(menu)
 800584a:	2000      	movs	r0, #0
 800584c:	4770      	bx	lr
    uint32_t res = 0U;
 800584e:	2000      	movs	r0, #0
 8005850:	4770      	bx	lr
 8005852:	2000      	movs	r0, #0
 8005854:	4770      	bx	lr
 8005856:	2000      	movs	r0, #0
 8005858:	4770      	bx	lr
 800585a:	2000      	movs	r0, #0
 800585c:	4770      	bx	lr
 800585e:	2000      	movs	r0, #0
 8005860:	4770      	bx	lr
 8005862:	2000      	movs	r0, #0
 8005864:	4770      	bx	lr
 8005866:	2000      	movs	r0, #0
 8005868:	4770      	bx	lr
 800586a:	2000      	movs	r0, #0
 800586c:	4770      	bx	lr
 800586e:	2000      	movs	r0, #0
 8005870:	4770      	bx	lr
 8005872:	2000      	movs	r0, #0
 8005874:	4770      	bx	lr
 8005876:	2000      	movs	r0, #0
 8005878:	4770      	bx	lr
 800587a:	2000      	movs	r0, #0
 800587c:	4770      	bx	lr
 800587e:	2000      	movs	r0, #0
 8005880:	4770      	bx	lr
 8005882:	2000      	movs	r0, #0
 8005884:	4770      	bx	lr
 8005886:	2000      	movs	r0, #0
 8005888:	4770      	bx	lr
 800588a:	2000      	movs	r0, #0
 800588c:	4770      	bx	lr
 800588e:	2000      	movs	r0, #0
 8005890:	4770      	bx	lr
 8005892:	2000      	movs	r0, #0
 8005894:	4770      	bx	lr
 8005896:	2000      	movs	r0, #0
 8005898:	4770      	bx	lr
 800589a:	2000      	movs	r0, #0
 800589c:	4770      	bx	lr
 800589e:	2000      	movs	r0, #0
 80058a0:	4770      	bx	lr
 80058a2:	2000      	movs	r0, #0
 80058a4:	4770      	bx	lr
 80058a6:	2000      	movs	r0, #0
 80058a8:	4770      	bx	lr
 80058aa:	2000      	movs	r0, #0
 80058ac:	4770      	bx	lr
 80058ae:	2000      	movs	r0, #0
 80058b0:	4770      	bx	lr
 80058b2:	2000      	movs	r0, #0
 80058b4:	4770      	bx	lr
 80058b6:	2000      	movs	r0, #0
 80058b8:	4770      	bx	lr
 80058ba:	2000      	movs	r0, #0
 80058bc:	4770      	bx	lr
 80058be:	2000      	movs	r0, #0
 80058c0:	4770      	bx	lr
 80058c2:	2000      	movs	r0, #0
 80058c4:	4770      	bx	lr
 80058c6:	2000      	movs	r0, #0
 80058c8:	4770      	bx	lr
 80058ca:	2000      	movs	r0, #0
 80058cc:	4770      	bx	lr
 80058ce:	2000      	movs	r0, #0
 80058d0:	4770      	bx	lr
 80058d2:	2000      	movs	r0, #0
 80058d4:	4770      	bx	lr
 80058d6:	2000      	movs	r0, #0
 80058d8:	4770      	bx	lr
 80058da:	2000      	movs	r0, #0
 80058dc:	4770      	bx	lr
 80058de:	2000      	movs	r0, #0
 80058e0:	4770      	bx	lr
 80058e2:	2000      	movs	r0, #0
}
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	20008950 	.word	0x20008950
 80058ec:	20008944 	.word	0x20008944
 80058f0:	2000893c 	.word	0x2000893c
 80058f4:	20008904 	.word	0x20008904
 80058f8:	200088e0 	.word	0x200088e0
 80058fc:	200088bc 	.word	0x200088bc
 8005900:	200088b4 	.word	0x200088b4
 8005904:	20008888 	.word	0x20008888
 8005908:	20008868 	.word	0x20008868
 800590c:	2000883c 	.word	0x2000883c
 8005910:	20008824 	.word	0x20008824
 8005914:	2000880c 	.word	0x2000880c
 8005918:	200087f4 	.word	0x200087f4
 800591c:	200087dc 	.word	0x200087dc
 8005920:	200087c8 	.word	0x200087c8
 8005924:	200087c4 	.word	0x200087c4
 8005928:	200087bc 	.word	0x200087bc
 800592c:	200087b4 	.word	0x200087b4
 8005930:	20008788 	.word	0x20008788
 8005934:	20008770 	.word	0x20008770
 8005938:	2000872c 	.word	0x2000872c
 800593c:	20008728 	.word	0x20008728
 8005940:	2000871c 	.word	0x2000871c
 8005944:	200086ec 	.word	0x200086ec
 8005948:	200086e4 	.word	0x200086e4
 800594c:	200086cc 	.word	0x200086cc
 8005950:	200086b0 	.word	0x200086b0
 8005954:	200086a4 	.word	0x200086a4
 8005958:	2000867c 	.word	0x2000867c
 800595c:	20008664 	.word	0x20008664
 8005960:	2000865c 	.word	0x2000865c
 8005964:	20008638 	.word	0x20008638
 8005968:	20008630 	.word	0x20008630
 800596c:	20008604 	.word	0x20008604
 8005970:	200085dc 	.word	0x200085dc
 8005974:	200085d0 	.word	0x200085d0
 8005978:	200085c8 	.word	0x200085c8
 800597c:	2000858c 	.word	0x2000858c
 8005980:	20008578 	.word	0x20008578

08005984 <GetItemMAXItem>:
    switch(menu)
 8005984:	2826      	cmp	r0, #38	@ 0x26
 8005986:	d815      	bhi.n	80059b4 <GetItemMAXItem+0x30>
 8005988:	e8df f000 	tbb	[pc, r0]
 800598c:	1a18165e 	.word	0x1a18165e
 8005990:	22201e1c 	.word	0x22201e1c
 8005994:	2a282624 	.word	0x2a282624
 8005998:	302e2c5f 	.word	0x302e2c5f
 800599c:	38363432 	.word	0x38363432
 80059a0:	5f3e3c3a 	.word	0x5f3e3c3a
 80059a4:	46444240 	.word	0x46444240
 80059a8:	4e4c4a48 	.word	0x4e4c4a48
 80059ac:	56545250 	.word	0x56545250
 80059b0:	5a58      	.short	0x5a58
 80059b2:	5c          	.byte	0x5c
 80059b3:	00          	.byte	0x00
 80059b4:	2000      	movs	r0, #0
 80059b6:	4770      	bx	lr
            temp = IHU_6_ITEM_MAX;
 80059b8:	2006      	movs	r0, #6
            break;
 80059ba:	4770      	bx	lr
            temp = IHU_10_ITEM_MAX;
 80059bc:	2003      	movs	r0, #3
            break;
 80059be:	4770      	bx	lr
            temp = GW_PC_2_ITEM_MAX;
 80059c0:	201c      	movs	r0, #28
            break;
 80059c2:	4770      	bx	lr
            temp = GW_PC_7_ITEM_MAX;
 80059c4:	2011      	movs	r0, #17
            break;
 80059c6:	4770      	bx	lr
            temp = PEPS_1_ITEM_MAX;
 80059c8:	2011      	movs	r0, #17
            break;
 80059ca:	4770      	bx	lr
            temp = PEPS_3_ITEM_MAX;
 80059cc:	2003      	movs	r0, #3
            break;
 80059ce:	4770      	bx	lr
            temp = IHU_1_ITEM_MAX;
 80059d0:	2016      	movs	r0, #22
            break;
 80059d2:	4770      	bx	lr
            temp = FCM_3_ITEM_MAX;
 80059d4:	200f      	movs	r0, #15
            break;
 80059d6:	4770      	bx	lr
            temp = FCM_4_ITEM_MAX;
 80059d8:	2015      	movs	r0, #21
            break;
 80059da:	4770      	bx	lr
            temp = FCM_5_ITEM_MAX;
 80059dc:	200c      	movs	r0, #12
            break;
 80059de:	4770      	bx	lr
            temp = FCM_6_ITEM_MAX;
 80059e0:	200c      	movs	r0, #12
            break;
 80059e2:	4770      	bx	lr
            temp = FCM_8_ITEM_MAX;
 80059e4:	200c      	movs	r0, #12
            break;
 80059e6:	4770      	bx	lr
            temp = BCM_5_ITEM_MAX;
 80059e8:	200a      	movs	r0, #10
            break;
 80059ea:	4770      	bx	lr
            temp = TBOX_4_ITEM_MAX;
 80059ec:	2001      	movs	r0, #1
            break;
 80059ee:	4770      	bx	lr
            temp = ACU_1_ITEM_MAX;
 80059f0:	2003      	movs	r0, #3
            break;
 80059f2:	4770      	bx	lr
            temp = BCM_1_ITEM_MAX;
 80059f4:	2003      	movs	r0, #3
            break;
 80059f6:	4770      	bx	lr
            temp = BCM_4_ITEM_MAX;
 80059f8:	2015      	movs	r0, #21
            break;
 80059fa:	4770      	bx	lr
            temp = TPMS_1_ITEM_MAX;
 80059fc:	200b      	movs	r0, #11
            break;
 80059fe:	4770      	bx	lr
            temp = IC_1_ITEM_MAX;
 8005a00:	2011      	movs	r0, #17
            break;
 8005a02:	4770      	bx	lr
            temp = IC_2_ITEM_MAX;
 8005a04:	2002      	movs	r0, #2
            break;
 8005a06:	4770      	bx	lr
            temp = GW_PC_4_ITEM_MAX;
 8005a08:	2005      	movs	r0, #5
            break;
 8005a0a:	4770      	bx	lr
            temp = IHU_4_ITEM_MAX;
 8005a0c:	2004      	movs	r0, #4
            break;
 8005a0e:	4770      	bx	lr
            temp = IHU_5_ITEM_MAX;
 8005a10:	200c      	movs	r0, #12
            break;
 8005a12:	4770      	bx	lr
            temp = GW_BD_29_ITEM_MAX;
 8005a14:	200d      	movs	r0, #13
            break;
 8005a16:	4770      	bx	lr
            temp = IHU_2_ITEM_MAX;
 8005a18:	2006      	movs	r0, #6
            break;
 8005a1a:	4770      	bx	lr
            temp = IHU_7_ITEM_MAX;
 8005a1c:	200a      	movs	r0, #10
            break;
 8005a1e:	4770      	bx	lr
            temp = IHU_8_ITEM_MAX;
 8005a20:	2006      	movs	r0, #6
            break;
 8005a22:	4770      	bx	lr
            temp = IHU_9_ITEM_MAX;
 8005a24:	2003      	movs	r0, #3
            break;
 8005a26:	4770      	bx	lr
            temp = TBOX_1_ITEM_MAX;
 8005a28:	2011      	movs	r0, #17
            break;
 8005a2a:	4770      	bx	lr
            temp = TBOX_2_ITEM_MAX;
 8005a2c:	2003      	movs	r0, #3
            break;
 8005a2e:	4770      	bx	lr
            temp = GW_PC_1_ITEM_MAX;
 8005a30:	2015      	movs	r0, #21
            break;
 8005a32:	4770      	bx	lr
            temp = GW_PC_6_ITEM_MAX;
 8005a34:	2013      	movs	r0, #19
            break;
 8005a36:	4770      	bx	lr
            temp = ESP_2_ITEM_MAX;
 8005a38:	2006      	movs	r0, #6
            break;
 8005a3a:	4770      	bx	lr
            temp = BCM_3_ITEM_MAX;
 8005a3c:	2003      	movs	r0, #3
            break;
 8005a3e:	4770      	bx	lr
            temp = GW_BD_9_ITEM_MAX;
 8005a40:	201d      	movs	r0, #29
            break;
 8005a42:	4770      	bx	lr
            temp = GW_BD_24_ITEM_MAX;
 8005a44:	2009      	movs	r0, #9
            break;
 8005a46:	4770      	bx	lr
            temp = IHU_3_ITEM_MAX;
 8005a48:	201a      	movs	r0, #26
}
 8005a4a:	4770      	bx	lr

08005a4c <GetItemMAXValue>:
    switch(menu)
 8005a4c:	2826      	cmp	r0, #38	@ 0x26
 8005a4e:	f200 80b2 	bhi.w	8005bb6 <GetItemMAXValue+0x16a>
 8005a52:	e8df f000 	tbb	[pc, r0]
 8005a56:	1814      	.short	0x1814
 8005a58:	2824201c 	.word	0x2824201c
 8005a5c:	3834302c 	.word	0x3834302c
 8005a60:	4844403c 	.word	0x4844403c
 8005a64:	5854504c 	.word	0x5854504c
 8005a68:	6864605c 	.word	0x6864605c
 8005a6c:	7874706c 	.word	0x7874706c
 8005a70:	8884807c 	.word	0x8884807c
 8005a74:	9894908c 	.word	0x9894908c
 8005a78:	a8a4a09c 	.word	0xa8a4a09c
 8005a7c:	ac          	.byte	0xac
 8005a7d:	00          	.byte	0x00
            res = IHU_3Max[item];
 8005a7e:	4b4f      	ldr	r3, [pc, #316]	@ (8005bbc <GetItemMAXValue+0x170>)
 8005a80:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005a84:	4770      	bx	lr
            res = IHU_6Max[item];
 8005a86:	4b4e      	ldr	r3, [pc, #312]	@ (8005bc0 <GetItemMAXValue+0x174>)
 8005a88:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005a8c:	4770      	bx	lr
            res = IHU_10Max[item];
 8005a8e:	4b4d      	ldr	r3, [pc, #308]	@ (8005bc4 <GetItemMAXValue+0x178>)
 8005a90:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005a94:	4770      	bx	lr
            res = GW_PC_2Max[item];
 8005a96:	4b4c      	ldr	r3, [pc, #304]	@ (8005bc8 <GetItemMAXValue+0x17c>)
 8005a98:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005a9c:	4770      	bx	lr
            res = GW_PC_7Max[item];
 8005a9e:	4b4b      	ldr	r3, [pc, #300]	@ (8005bcc <GetItemMAXValue+0x180>)
 8005aa0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005aa4:	4770      	bx	lr
            res = PEPS_1Max[item];
 8005aa6:	4b4a      	ldr	r3, [pc, #296]	@ (8005bd0 <GetItemMAXValue+0x184>)
 8005aa8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005aac:	4770      	bx	lr
            res = PEPS_3Max[item];
 8005aae:	4b49      	ldr	r3, [pc, #292]	@ (8005bd4 <GetItemMAXValue+0x188>)
 8005ab0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005ab4:	4770      	bx	lr
            res = IHU_1Max[item];
 8005ab6:	4b48      	ldr	r3, [pc, #288]	@ (8005bd8 <GetItemMAXValue+0x18c>)
 8005ab8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005abc:	4770      	bx	lr
            res = FCM_3Max[item];
 8005abe:	4b47      	ldr	r3, [pc, #284]	@ (8005bdc <GetItemMAXValue+0x190>)
 8005ac0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005ac4:	4770      	bx	lr
            res = FCM_4Max[item];
 8005ac6:	4b46      	ldr	r3, [pc, #280]	@ (8005be0 <GetItemMAXValue+0x194>)
 8005ac8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005acc:	4770      	bx	lr
            res = FCM_5Max[item];
 8005ace:	4b45      	ldr	r3, [pc, #276]	@ (8005be4 <GetItemMAXValue+0x198>)
 8005ad0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005ad4:	4770      	bx	lr
            res = FCM_6Max[item];
 8005ad6:	4b44      	ldr	r3, [pc, #272]	@ (8005be8 <GetItemMAXValue+0x19c>)
 8005ad8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005adc:	4770      	bx	lr
            res = FCM_7Max[item];
 8005ade:	4b43      	ldr	r3, [pc, #268]	@ (8005bec <GetItemMAXValue+0x1a0>)
 8005ae0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005ae4:	4770      	bx	lr
            res = FCM_8Max[item];
 8005ae6:	4b42      	ldr	r3, [pc, #264]	@ (8005bf0 <GetItemMAXValue+0x1a4>)
 8005ae8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005aec:	4770      	bx	lr
            res = BCM_5Max[item];
 8005aee:	4b41      	ldr	r3, [pc, #260]	@ (8005bf4 <GetItemMAXValue+0x1a8>)
 8005af0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005af4:	4770      	bx	lr
            res = TBOX_4Max[item];
 8005af6:	4b40      	ldr	r3, [pc, #256]	@ (8005bf8 <GetItemMAXValue+0x1ac>)
 8005af8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005afc:	4770      	bx	lr
            res = ACU_1Max[item];
 8005afe:	4b3f      	ldr	r3, [pc, #252]	@ (8005bfc <GetItemMAXValue+0x1b0>)
 8005b00:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005b04:	4770      	bx	lr
            res = BCM_1Max[item];
 8005b06:	4b3e      	ldr	r3, [pc, #248]	@ (8005c00 <GetItemMAXValue+0x1b4>)
 8005b08:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005b0c:	4770      	bx	lr
            res = BCM_4Max[item];
 8005b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8005c04 <GetItemMAXValue+0x1b8>)
 8005b10:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005b14:	4770      	bx	lr
            res = TPMS_1Max[item];
 8005b16:	4b3c      	ldr	r3, [pc, #240]	@ (8005c08 <GetItemMAXValue+0x1bc>)
 8005b18:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005b1c:	4770      	bx	lr
            res = IC_1Max[item];
 8005b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8005c0c <GetItemMAXValue+0x1c0>)
 8005b20:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
            break;
 8005b24:	4770      	bx	lr
            res = IC_2Max[item];
 8005b26:	4b3a      	ldr	r3, [pc, #232]	@ (8005c10 <GetItemMAXValue+0x1c4>)
 8005b28:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005b2c:	4770      	bx	lr
            res = GW_PC_4Max[item];
 8005b2e:	4b39      	ldr	r3, [pc, #228]	@ (8005c14 <GetItemMAXValue+0x1c8>)
 8005b30:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005b34:	4770      	bx	lr
            res = GW_BD_14Max[item];
 8005b36:	4b38      	ldr	r3, [pc, #224]	@ (8005c18 <GetItemMAXValue+0x1cc>)
 8005b38:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005b3c:	4770      	bx	lr
            res = IHU_4Max[item];
 8005b3e:	4b37      	ldr	r3, [pc, #220]	@ (8005c1c <GetItemMAXValue+0x1d0>)
 8005b40:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005b44:	4770      	bx	lr
            res = IHU_5Max[item];
 8005b46:	4b36      	ldr	r3, [pc, #216]	@ (8005c20 <GetItemMAXValue+0x1d4>)
 8005b48:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005b4c:	4770      	bx	lr
            res = GW_BD_29Max[item];
 8005b4e:	4b35      	ldr	r3, [pc, #212]	@ (8005c24 <GetItemMAXValue+0x1d8>)
 8005b50:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005b54:	4770      	bx	lr
            res = IHU_2Max[item];
 8005b56:	4b34      	ldr	r3, [pc, #208]	@ (8005c28 <GetItemMAXValue+0x1dc>)
 8005b58:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005b5c:	4770      	bx	lr
            res = IHU_7Max[item];
 8005b5e:	4b33      	ldr	r3, [pc, #204]	@ (8005c2c <GetItemMAXValue+0x1e0>)
 8005b60:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
            break;
 8005b64:	4770      	bx	lr
            res = IHU_8Max[item];
 8005b66:	4b32      	ldr	r3, [pc, #200]	@ (8005c30 <GetItemMAXValue+0x1e4>)
 8005b68:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
            break;
 8005b6c:	4770      	bx	lr
            res = IHU_9Max[item];
 8005b6e:	4b31      	ldr	r3, [pc, #196]	@ (8005c34 <GetItemMAXValue+0x1e8>)
 8005b70:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005b74:	4770      	bx	lr
            res = TBOX_1Max[item];
 8005b76:	4b30      	ldr	r3, [pc, #192]	@ (8005c38 <GetItemMAXValue+0x1ec>)
 8005b78:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005b7c:	4770      	bx	lr
            res = TBOX_2Max[item];
 8005b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8005c3c <GetItemMAXValue+0x1f0>)
 8005b80:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005b84:	4770      	bx	lr
            res = GW_PC_1Max[item];
 8005b86:	4b2e      	ldr	r3, [pc, #184]	@ (8005c40 <GetItemMAXValue+0x1f4>)
 8005b88:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005b8c:	4770      	bx	lr
            res = GW_PC_6Max[item];
 8005b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8005c44 <GetItemMAXValue+0x1f8>)
 8005b90:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005b94:	4770      	bx	lr
            res = ESP_2Max[item];
 8005b96:	4b2c      	ldr	r3, [pc, #176]	@ (8005c48 <GetItemMAXValue+0x1fc>)
 8005b98:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005b9c:	4770      	bx	lr
            res = BCM_3Max[item];
 8005b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8005c4c <GetItemMAXValue+0x200>)
 8005ba0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005ba4:	4770      	bx	lr
            res = GW_BD_9Max[item];
 8005ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8005c50 <GetItemMAXValue+0x204>)
 8005ba8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005bac:	4770      	bx	lr
            res = GW_BD_24Max[item];
 8005bae:	4b29      	ldr	r3, [pc, #164]	@ (8005c54 <GetItemMAXValue+0x208>)
 8005bb0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
            break;
 8005bb4:	4770      	bx	lr
    switch(menu)
 8005bb6:	2000      	movs	r0, #0
}
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	200078c0 	.word	0x200078c0
 8005bc0:	2000771c 	.word	0x2000771c
 8005bc4:	20007648 	.word	0x20007648
 8005bc8:	20006ea0 	.word	0x20006ea0
 8005bcc:	200069f8 	.word	0x200069f8
 8005bd0:	20006550 	.word	0x20006550
 8005bd4:	2000647c 	.word	0x2000647c
 8005bd8:	20005e78 	.word	0x20005e78
 8005bdc:	20005a5c 	.word	0x20005a5c
 8005be0:	2000549c 	.word	0x2000549c
 8005be4:	20005154 	.word	0x20005154
 8005be8:	20004e0c 	.word	0x20004e0c
 8005bec:	20004ac4 	.word	0x20004ac4
 8005bf0:	2000477c 	.word	0x2000477c
 8005bf4:	200044c0 	.word	0x200044c0
 8005bf8:	20004478 	.word	0x20004478
 8005bfc:	200043a4 	.word	0x200043a4
 8005c00:	200042d0 	.word	0x200042d0
 8005c04:	20003d10 	.word	0x20003d10
 8005c08:	20003a0c 	.word	0x20003a0c
 8005c0c:	20003544 	.word	0x20003544
 8005c10:	200034b8 	.word	0x200034b8
 8005c14:	20003358 	.word	0x20003358
 8005c18:	20002d0c 	.word	0x20002d0c
 8005c1c:	20002bf4 	.word	0x20002bf4
 8005c20:	200028ac 	.word	0x200028ac
 8005c24:	2000251c 	.word	0x2000251c
 8005c28:	20002378 	.word	0x20002378
 8005c2c:	200020a8 	.word	0x200020a8
 8005c30:	20001ef8 	.word	0x20001ef8
 8005c34:	20001e24 	.word	0x20001e24
 8005c38:	2000197c 	.word	0x2000197c
 8005c3c:	200018a8 	.word	0x200018a8
 8005c40:	200012e8 	.word	0x200012e8
 8005c44:	20000db4 	.word	0x20000db4
 8005c48:	20000c10 	.word	0x20000c10
 8005c4c:	20000b3c 	.word	0x20000b3c
 8005c50:	2000034c 	.word	0x2000034c
 8005c54:	200000d4 	.word	0x200000d4

08005c58 <SaveItemValue>:
    g_menu_index = GET_MENU(menu, MENU_MAX);
 8005c58:	2826      	cmp	r0, #38	@ 0x26
 8005c5a:	d901      	bls.n	8005c60 <SaveItemValue+0x8>
 8005c5c:	3827      	subs	r0, #39	@ 0x27
 8005c5e:	b2c0      	uxtb	r0, r0
 8005c60:	4b9b      	ldr	r3, [pc, #620]	@ (8005ed0 <SaveItemValue+0x278>)
 8005c62:	7018      	strb	r0, [r3, #0]
    switch (g_menu_index)
 8005c64:	2826      	cmp	r0, #38	@ 0x26
 8005c66:	d832      	bhi.n	8005cce <SaveItemValue+0x76>
 8005c68:	e8df f010 	tbh	[pc, r0, lsl #1]
 8005c6c:	00340027 	.word	0x00340027
 8005c70:	004a003f 	.word	0x004a003f
 8005c74:	00600055 	.word	0x00600055
 8005c78:	0076006b 	.word	0x0076006b
 8005c7c:	008c0081 	.word	0x008c0081
 8005c80:	00a20097 	.word	0x00a20097
 8005c84:	00b800ad 	.word	0x00b800ad
 8005c88:	00ce00c3 	.word	0x00ce00c3
 8005c8c:	00e400d9 	.word	0x00e400d9
 8005c90:	00fa00ef 	.word	0x00fa00ef
 8005c94:	01100105 	.word	0x01100105
 8005c98:	0126011b 	.word	0x0126011b
 8005c9c:	01a10196 	.word	0x01a10196
 8005ca0:	01b701ac 	.word	0x01b701ac
 8005ca4:	01cd01c2 	.word	0x01cd01c2
 8005ca8:	01e301d8 	.word	0x01e301d8
 8005cac:	01f901ee 	.word	0x01f901ee
 8005cb0:	020f0204 	.word	0x020f0204
 8005cb4:	0225021a 	.word	0x0225021a
 8005cb8:	0230      	.short	0x0230
            value = CHECK_VALUE(value, IHU_3Max[item]);
 8005cba:	4b86      	ldr	r3, [pc, #536]	@ (8005ed4 <SaveItemValue+0x27c>)
 8005cbc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	db01      	blt.n	8005cc8 <SaveItemValue+0x70>
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b21a      	sxth	r2, r3
            g_IHU_3[item] = value;
 8005cc8:	4b83      	ldr	r3, [pc, #524]	@ (8005ed8 <SaveItemValue+0x280>)
 8005cca:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    g_item_index = item;
 8005cce:	4b83      	ldr	r3, [pc, #524]	@ (8005edc <SaveItemValue+0x284>)
 8005cd0:	7019      	strb	r1, [r3, #0]
}
 8005cd2:	4770      	bx	lr
            value = CHECK_VALUE(value, IHU_6Max[item]);
 8005cd4:	4b82      	ldr	r3, [pc, #520]	@ (8005ee0 <SaveItemValue+0x288>)
 8005cd6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	db01      	blt.n	8005ce2 <SaveItemValue+0x8a>
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b21a      	sxth	r2, r3
            g_IHU_6[item] = value;
 8005ce2:	4b80      	ldr	r3, [pc, #512]	@ (8005ee4 <SaveItemValue+0x28c>)
 8005ce4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005ce8:	e7f1      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, IHU_10Max[item]);
 8005cea:	4b7f      	ldr	r3, [pc, #508]	@ (8005ee8 <SaveItemValue+0x290>)
 8005cec:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	db01      	blt.n	8005cf8 <SaveItemValue+0xa0>
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b21a      	sxth	r2, r3
            g_IHU_10[item] = value;
 8005cf8:	4b7c      	ldr	r3, [pc, #496]	@ (8005eec <SaveItemValue+0x294>)
 8005cfa:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005cfe:	e7e6      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, GW_PC_2Max[item]);
 8005d00:	4b7b      	ldr	r3, [pc, #492]	@ (8005ef0 <SaveItemValue+0x298>)
 8005d02:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	db01      	blt.n	8005d0e <SaveItemValue+0xb6>
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b21a      	sxth	r2, r3
            g_GW_PC_2[item] = value;
 8005d0e:	4b79      	ldr	r3, [pc, #484]	@ (8005ef4 <SaveItemValue+0x29c>)
 8005d10:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005d14:	e7db      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, GW_PC_7Max[item]);
 8005d16:	4b78      	ldr	r3, [pc, #480]	@ (8005ef8 <SaveItemValue+0x2a0>)
 8005d18:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	db01      	blt.n	8005d24 <SaveItemValue+0xcc>
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b21a      	sxth	r2, r3
            g_GW_PC_7[item] = value;
 8005d24:	4b75      	ldr	r3, [pc, #468]	@ (8005efc <SaveItemValue+0x2a4>)
 8005d26:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005d2a:	e7d0      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, PEPS_1Max[item]);
 8005d2c:	4b74      	ldr	r3, [pc, #464]	@ (8005f00 <SaveItemValue+0x2a8>)
 8005d2e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	db01      	blt.n	8005d3a <SaveItemValue+0xe2>
 8005d36:	3b01      	subs	r3, #1
 8005d38:	b21a      	sxth	r2, r3
            g_PEPS_1[item] = value;
 8005d3a:	4b72      	ldr	r3, [pc, #456]	@ (8005f04 <SaveItemValue+0x2ac>)
 8005d3c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005d40:	e7c5      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, PEPS_3Max[item]);
 8005d42:	4b71      	ldr	r3, [pc, #452]	@ (8005f08 <SaveItemValue+0x2b0>)
 8005d44:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	db01      	blt.n	8005d50 <SaveItemValue+0xf8>
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b21a      	sxth	r2, r3
            g_PEPS_3[item] = value;
 8005d50:	4b6e      	ldr	r3, [pc, #440]	@ (8005f0c <SaveItemValue+0x2b4>)
 8005d52:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005d56:	e7ba      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, IHU_1Max[item]);
 8005d58:	4b6d      	ldr	r3, [pc, #436]	@ (8005f10 <SaveItemValue+0x2b8>)
 8005d5a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	db01      	blt.n	8005d66 <SaveItemValue+0x10e>
 8005d62:	3b01      	subs	r3, #1
 8005d64:	b21a      	sxth	r2, r3
            g_IHU_1[item] = value;
 8005d66:	4b6b      	ldr	r3, [pc, #428]	@ (8005f14 <SaveItemValue+0x2bc>)
 8005d68:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005d6c:	e7af      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, FCM_3Max[item]);
 8005d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8005f18 <SaveItemValue+0x2c0>)
 8005d70:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	db01      	blt.n	8005d7c <SaveItemValue+0x124>
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	b21a      	sxth	r2, r3
            g_FCM_3[item] = value;
 8005d7c:	4b67      	ldr	r3, [pc, #412]	@ (8005f1c <SaveItemValue+0x2c4>)
 8005d7e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005d82:	e7a4      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, FCM_4Max[item]);
 8005d84:	4b66      	ldr	r3, [pc, #408]	@ (8005f20 <SaveItemValue+0x2c8>)
 8005d86:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	db01      	blt.n	8005d92 <SaveItemValue+0x13a>
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	b21a      	sxth	r2, r3
            g_FCM_4[item] = value;
 8005d92:	4b64      	ldr	r3, [pc, #400]	@ (8005f24 <SaveItemValue+0x2cc>)
 8005d94:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005d98:	e799      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, FCM_5Max[item]);
 8005d9a:	4b63      	ldr	r3, [pc, #396]	@ (8005f28 <SaveItemValue+0x2d0>)
 8005d9c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	db01      	blt.n	8005da8 <SaveItemValue+0x150>
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b21a      	sxth	r2, r3
            g_FCM_5[item] = value;
 8005da8:	4b60      	ldr	r3, [pc, #384]	@ (8005f2c <SaveItemValue+0x2d4>)
 8005daa:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005dae:	e78e      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, FCM_6Max[item]);
 8005db0:	4b5f      	ldr	r3, [pc, #380]	@ (8005f30 <SaveItemValue+0x2d8>)
 8005db2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	db01      	blt.n	8005dbe <SaveItemValue+0x166>
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	b21a      	sxth	r2, r3
            g_FCM_6[item] = value;
 8005dbe:	4b5d      	ldr	r3, [pc, #372]	@ (8005f34 <SaveItemValue+0x2dc>)
 8005dc0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005dc4:	e783      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, FCM_7Max[item]);
 8005dc6:	4b5c      	ldr	r3, [pc, #368]	@ (8005f38 <SaveItemValue+0x2e0>)
 8005dc8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	db01      	blt.n	8005dd4 <SaveItemValue+0x17c>
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	b21a      	sxth	r2, r3
            g_FCM_7[item] = value;
 8005dd4:	4b59      	ldr	r3, [pc, #356]	@ (8005f3c <SaveItemValue+0x2e4>)
 8005dd6:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005dda:	e778      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, FCM_8Max[item]);
 8005ddc:	4b58      	ldr	r3, [pc, #352]	@ (8005f40 <SaveItemValue+0x2e8>)
 8005dde:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	db01      	blt.n	8005dea <SaveItemValue+0x192>
 8005de6:	3b01      	subs	r3, #1
 8005de8:	b21a      	sxth	r2, r3
            g_FCM_8[item] = value;
 8005dea:	4b56      	ldr	r3, [pc, #344]	@ (8005f44 <SaveItemValue+0x2ec>)
 8005dec:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005df0:	e76d      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, BCM_5Max[item]);
 8005df2:	4b55      	ldr	r3, [pc, #340]	@ (8005f48 <SaveItemValue+0x2f0>)
 8005df4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	db01      	blt.n	8005e00 <SaveItemValue+0x1a8>
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b21a      	sxth	r2, r3
            g_BCM_5[item] = value;
 8005e00:	4b52      	ldr	r3, [pc, #328]	@ (8005f4c <SaveItemValue+0x2f4>)
 8005e02:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005e06:	e762      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, TBOX_4Max[item]);
 8005e08:	4b51      	ldr	r3, [pc, #324]	@ (8005f50 <SaveItemValue+0x2f8>)
 8005e0a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	db01      	blt.n	8005e16 <SaveItemValue+0x1be>
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b21a      	sxth	r2, r3
            g_TBOX_4[item] = value;
 8005e16:	4b4f      	ldr	r3, [pc, #316]	@ (8005f54 <SaveItemValue+0x2fc>)
 8005e18:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005e1c:	e757      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, ACU_1Max[item]);
 8005e1e:	4b4e      	ldr	r3, [pc, #312]	@ (8005f58 <SaveItemValue+0x300>)
 8005e20:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	db01      	blt.n	8005e2c <SaveItemValue+0x1d4>
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	b21a      	sxth	r2, r3
            g_ACU_1[item] = value;
 8005e2c:	4b4b      	ldr	r3, [pc, #300]	@ (8005f5c <SaveItemValue+0x304>)
 8005e2e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005e32:	e74c      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, BCM_1Max[item]);
 8005e34:	4b4a      	ldr	r3, [pc, #296]	@ (8005f60 <SaveItemValue+0x308>)
 8005e36:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	db01      	blt.n	8005e42 <SaveItemValue+0x1ea>
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b21a      	sxth	r2, r3
            g_BCM_1[item] = value;
 8005e42:	4b48      	ldr	r3, [pc, #288]	@ (8005f64 <SaveItemValue+0x30c>)
 8005e44:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005e48:	e741      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, BCM_4Max[item]);
 8005e4a:	4b47      	ldr	r3, [pc, #284]	@ (8005f68 <SaveItemValue+0x310>)
 8005e4c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	db01      	blt.n	8005e58 <SaveItemValue+0x200>
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b21a      	sxth	r2, r3
            g_BCM_4[item] = value;
 8005e58:	4b44      	ldr	r3, [pc, #272]	@ (8005f6c <SaveItemValue+0x314>)
 8005e5a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005e5e:	e736      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, TPMS_1Max[item]);
 8005e60:	4b43      	ldr	r3, [pc, #268]	@ (8005f70 <SaveItemValue+0x318>)
 8005e62:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	db01      	blt.n	8005e6e <SaveItemValue+0x216>
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	b21a      	sxth	r2, r3
            g_TPMS_1[item] = value;
 8005e6e:	4b41      	ldr	r3, [pc, #260]	@ (8005f74 <SaveItemValue+0x31c>)
 8005e70:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005e74:	e72b      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, IC_1Max[item]);
 8005e76:	4b40      	ldr	r3, [pc, #256]	@ (8005f78 <SaveItemValue+0x320>)
 8005e78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d301      	bcc.n	8005e84 <SaveItemValue+0x22c>
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b21a      	sxth	r2, r3
            g_IC_1[item] = value;
 8005e84:	4b3d      	ldr	r3, [pc, #244]	@ (8005f7c <SaveItemValue+0x324>)
 8005e86:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            break;
 8005e8a:	e720      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, IC_2Max[item]);
 8005e8c:	4b3c      	ldr	r3, [pc, #240]	@ (8005f80 <SaveItemValue+0x328>)
 8005e8e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	db01      	blt.n	8005e9a <SaveItemValue+0x242>
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b21a      	sxth	r2, r3
            g_IC_2[item] = value;
 8005e9a:	4b3a      	ldr	r3, [pc, #232]	@ (8005f84 <SaveItemValue+0x32c>)
 8005e9c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005ea0:	e715      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, GW_PC_4Max[item]);
 8005ea2:	4b39      	ldr	r3, [pc, #228]	@ (8005f88 <SaveItemValue+0x330>)
 8005ea4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	db01      	blt.n	8005eb0 <SaveItemValue+0x258>
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b21a      	sxth	r2, r3
            g_GW_PC_4[item] = value;
 8005eb0:	4b36      	ldr	r3, [pc, #216]	@ (8005f8c <SaveItemValue+0x334>)
 8005eb2:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005eb6:	e70a      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, GW_BD_14Max[item]);
 8005eb8:	4b35      	ldr	r3, [pc, #212]	@ (8005f90 <SaveItemValue+0x338>)
 8005eba:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	db01      	blt.n	8005ec6 <SaveItemValue+0x26e>
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b21a      	sxth	r2, r3
            g_GW_BD_14[item] = value;
 8005ec6:	4b33      	ldr	r3, [pc, #204]	@ (8005f94 <SaveItemValue+0x33c>)
 8005ec8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005ecc:	e6ff      	b.n	8005cce <SaveItemValue+0x76>
 8005ece:	bf00      	nop
 8005ed0:	2000856b 	.word	0x2000856b
 8005ed4:	200078c0 	.word	0x200078c0
 8005ed8:	20008950 	.word	0x20008950
 8005edc:	2000856a 	.word	0x2000856a
 8005ee0:	2000771c 	.word	0x2000771c
 8005ee4:	20008944 	.word	0x20008944
 8005ee8:	20007648 	.word	0x20007648
 8005eec:	2000893c 	.word	0x2000893c
 8005ef0:	20006ea0 	.word	0x20006ea0
 8005ef4:	20008904 	.word	0x20008904
 8005ef8:	200069f8 	.word	0x200069f8
 8005efc:	200088e0 	.word	0x200088e0
 8005f00:	20006550 	.word	0x20006550
 8005f04:	200088bc 	.word	0x200088bc
 8005f08:	2000647c 	.word	0x2000647c
 8005f0c:	200088b4 	.word	0x200088b4
 8005f10:	20005e78 	.word	0x20005e78
 8005f14:	20008888 	.word	0x20008888
 8005f18:	20005a5c 	.word	0x20005a5c
 8005f1c:	20008868 	.word	0x20008868
 8005f20:	2000549c 	.word	0x2000549c
 8005f24:	2000883c 	.word	0x2000883c
 8005f28:	20005154 	.word	0x20005154
 8005f2c:	20008824 	.word	0x20008824
 8005f30:	20004e0c 	.word	0x20004e0c
 8005f34:	2000880c 	.word	0x2000880c
 8005f38:	20004ac4 	.word	0x20004ac4
 8005f3c:	200087f4 	.word	0x200087f4
 8005f40:	2000477c 	.word	0x2000477c
 8005f44:	200087dc 	.word	0x200087dc
 8005f48:	200044c0 	.word	0x200044c0
 8005f4c:	200087c8 	.word	0x200087c8
 8005f50:	20004478 	.word	0x20004478
 8005f54:	200087c4 	.word	0x200087c4
 8005f58:	200043a4 	.word	0x200043a4
 8005f5c:	200087bc 	.word	0x200087bc
 8005f60:	200042d0 	.word	0x200042d0
 8005f64:	200087b4 	.word	0x200087b4
 8005f68:	20003d10 	.word	0x20003d10
 8005f6c:	20008788 	.word	0x20008788
 8005f70:	20003a0c 	.word	0x20003a0c
 8005f74:	20008770 	.word	0x20008770
 8005f78:	20003544 	.word	0x20003544
 8005f7c:	2000872c 	.word	0x2000872c
 8005f80:	200034b8 	.word	0x200034b8
 8005f84:	20008728 	.word	0x20008728
 8005f88:	20003358 	.word	0x20003358
 8005f8c:	2000871c 	.word	0x2000871c
 8005f90:	20002d0c 	.word	0x20002d0c
 8005f94:	200086ec 	.word	0x200086ec
            value = CHECK_VALUE(value, IHU_4Max[item]);
 8005f98:	4b52      	ldr	r3, [pc, #328]	@ (80060e4 <SaveItemValue+0x48c>)
 8005f9a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	db01      	blt.n	8005fa6 <SaveItemValue+0x34e>
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	b21a      	sxth	r2, r3
            g_IHU_4[item] = value;
 8005fa6:	4b50      	ldr	r3, [pc, #320]	@ (80060e8 <SaveItemValue+0x490>)
 8005fa8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005fac:	e68f      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, IHU_5Max[item]);
 8005fae:	4b4f      	ldr	r3, [pc, #316]	@ (80060ec <SaveItemValue+0x494>)
 8005fb0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	db01      	blt.n	8005fbc <SaveItemValue+0x364>
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b21a      	sxth	r2, r3
            g_IHU_5[item] = value;
 8005fbc:	4b4c      	ldr	r3, [pc, #304]	@ (80060f0 <SaveItemValue+0x498>)
 8005fbe:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005fc2:	e684      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, GW_BD_29Max[item]);
 8005fc4:	4b4b      	ldr	r3, [pc, #300]	@ (80060f4 <SaveItemValue+0x49c>)
 8005fc6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	db01      	blt.n	8005fd2 <SaveItemValue+0x37a>
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	b21a      	sxth	r2, r3
            g_GW_BD_29[item] = value;
 8005fd2:	4b49      	ldr	r3, [pc, #292]	@ (80060f8 <SaveItemValue+0x4a0>)
 8005fd4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005fd8:	e679      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, IHU_2Max[item]);
 8005fda:	4b48      	ldr	r3, [pc, #288]	@ (80060fc <SaveItemValue+0x4a4>)
 8005fdc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	db01      	blt.n	8005fe8 <SaveItemValue+0x390>
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b21a      	sxth	r2, r3
            g_IHU_2[item] = value;
 8005fe8:	4b45      	ldr	r3, [pc, #276]	@ (8006100 <SaveItemValue+0x4a8>)
 8005fea:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8005fee:	e66e      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, IHU_7Max[item]);
 8005ff0:	4b44      	ldr	r3, [pc, #272]	@ (8006104 <SaveItemValue+0x4ac>)
 8005ff2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d301      	bcc.n	8005ffe <SaveItemValue+0x3a6>
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b21a      	sxth	r2, r3
            g_IHU_7[item] = value;
 8005ffe:	4b42      	ldr	r3, [pc, #264]	@ (8006108 <SaveItemValue+0x4b0>)
 8006000:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            break;
 8006004:	e663      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, IHU_8Max[item]);
 8006006:	4b41      	ldr	r3, [pc, #260]	@ (800610c <SaveItemValue+0x4b4>)
 8006008:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800600c:	429a      	cmp	r2, r3
 800600e:	d301      	bcc.n	8006014 <SaveItemValue+0x3bc>
 8006010:	3b01      	subs	r3, #1
 8006012:	b21a      	sxth	r2, r3
            g_IHU_8[item] = value;
 8006014:	4b3e      	ldr	r3, [pc, #248]	@ (8006110 <SaveItemValue+0x4b8>)
 8006016:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            break;
 800601a:	e658      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, IHU_9Max[item]);
 800601c:	4b3d      	ldr	r3, [pc, #244]	@ (8006114 <SaveItemValue+0x4bc>)
 800601e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006022:	429a      	cmp	r2, r3
 8006024:	db01      	blt.n	800602a <SaveItemValue+0x3d2>
 8006026:	3b01      	subs	r3, #1
 8006028:	b21a      	sxth	r2, r3
            g_IHU_9[item] = value;
 800602a:	4b3b      	ldr	r3, [pc, #236]	@ (8006118 <SaveItemValue+0x4c0>)
 800602c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8006030:	e64d      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, TBOX_1Max[item]);
 8006032:	4b3a      	ldr	r3, [pc, #232]	@ (800611c <SaveItemValue+0x4c4>)
 8006034:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006038:	429a      	cmp	r2, r3
 800603a:	db01      	blt.n	8006040 <SaveItemValue+0x3e8>
 800603c:	3b01      	subs	r3, #1
 800603e:	b21a      	sxth	r2, r3
            g_TBOX_1[item] = value;
 8006040:	4b37      	ldr	r3, [pc, #220]	@ (8006120 <SaveItemValue+0x4c8>)
 8006042:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8006046:	e642      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, TBOX_2Max[item]);
 8006048:	4b36      	ldr	r3, [pc, #216]	@ (8006124 <SaveItemValue+0x4cc>)
 800604a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800604e:	429a      	cmp	r2, r3
 8006050:	db01      	blt.n	8006056 <SaveItemValue+0x3fe>
 8006052:	3b01      	subs	r3, #1
 8006054:	b21a      	sxth	r2, r3
            g_TBOX_2[item] = value;
 8006056:	4b34      	ldr	r3, [pc, #208]	@ (8006128 <SaveItemValue+0x4d0>)
 8006058:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 800605c:	e637      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, GW_PC_1Max[item]);
 800605e:	4b33      	ldr	r3, [pc, #204]	@ (800612c <SaveItemValue+0x4d4>)
 8006060:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006064:	429a      	cmp	r2, r3
 8006066:	db01      	blt.n	800606c <SaveItemValue+0x414>
 8006068:	3b01      	subs	r3, #1
 800606a:	b21a      	sxth	r2, r3
            g_GW_PC_1[item] = value;
 800606c:	4b30      	ldr	r3, [pc, #192]	@ (8006130 <SaveItemValue+0x4d8>)
 800606e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8006072:	e62c      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, GW_PC_6Max[item]);
 8006074:	4b2f      	ldr	r3, [pc, #188]	@ (8006134 <SaveItemValue+0x4dc>)
 8006076:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800607a:	429a      	cmp	r2, r3
 800607c:	db01      	blt.n	8006082 <SaveItemValue+0x42a>
 800607e:	3b01      	subs	r3, #1
 8006080:	b21a      	sxth	r2, r3
            g_GW_PC_6[item] = value;
 8006082:	4b2d      	ldr	r3, [pc, #180]	@ (8006138 <SaveItemValue+0x4e0>)
 8006084:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 8006088:	e621      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, ESP_2Max[item]);
 800608a:	4b2c      	ldr	r3, [pc, #176]	@ (800613c <SaveItemValue+0x4e4>)
 800608c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006090:	429a      	cmp	r2, r3
 8006092:	db01      	blt.n	8006098 <SaveItemValue+0x440>
 8006094:	3b01      	subs	r3, #1
 8006096:	b21a      	sxth	r2, r3
            g_ESP_2[item] = value;
 8006098:	4b29      	ldr	r3, [pc, #164]	@ (8006140 <SaveItemValue+0x4e8>)
 800609a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 800609e:	e616      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, BCM_3Max[item]);
 80060a0:	4b28      	ldr	r3, [pc, #160]	@ (8006144 <SaveItemValue+0x4ec>)
 80060a2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	db01      	blt.n	80060ae <SaveItemValue+0x456>
 80060aa:	3b01      	subs	r3, #1
 80060ac:	b21a      	sxth	r2, r3
            g_BCM_3[item] = value;
 80060ae:	4b26      	ldr	r3, [pc, #152]	@ (8006148 <SaveItemValue+0x4f0>)
 80060b0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 80060b4:	e60b      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, GW_BD_9Max[item]);
 80060b6:	4b25      	ldr	r3, [pc, #148]	@ (800614c <SaveItemValue+0x4f4>)
 80060b8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80060bc:	429a      	cmp	r2, r3
 80060be:	db01      	blt.n	80060c4 <SaveItemValue+0x46c>
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b21a      	sxth	r2, r3
            g_GW_BD_9[item] = value;
 80060c4:	4b22      	ldr	r3, [pc, #136]	@ (8006150 <SaveItemValue+0x4f8>)
 80060c6:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 80060ca:	e600      	b.n	8005cce <SaveItemValue+0x76>
            value = CHECK_VALUE(value, GW_BD_24Max[item]);
 80060cc:	4b21      	ldr	r3, [pc, #132]	@ (8006154 <SaveItemValue+0x4fc>)
 80060ce:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	db01      	blt.n	80060da <SaveItemValue+0x482>
 80060d6:	3b01      	subs	r3, #1
 80060d8:	b21a      	sxth	r2, r3
            g_GW_BD_24[item] = value;
 80060da:	4b1f      	ldr	r3, [pc, #124]	@ (8006158 <SaveItemValue+0x500>)
 80060dc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
            break;
 80060e0:	e5f5      	b.n	8005cce <SaveItemValue+0x76>
 80060e2:	bf00      	nop
 80060e4:	20002bf4 	.word	0x20002bf4
 80060e8:	200086e4 	.word	0x200086e4
 80060ec:	200028ac 	.word	0x200028ac
 80060f0:	200086cc 	.word	0x200086cc
 80060f4:	2000251c 	.word	0x2000251c
 80060f8:	200086b0 	.word	0x200086b0
 80060fc:	20002378 	.word	0x20002378
 8006100:	200086a4 	.word	0x200086a4
 8006104:	200020a8 	.word	0x200020a8
 8006108:	2000867c 	.word	0x2000867c
 800610c:	20001ef8 	.word	0x20001ef8
 8006110:	20008664 	.word	0x20008664
 8006114:	20001e24 	.word	0x20001e24
 8006118:	2000865c 	.word	0x2000865c
 800611c:	2000197c 	.word	0x2000197c
 8006120:	20008638 	.word	0x20008638
 8006124:	200018a8 	.word	0x200018a8
 8006128:	20008630 	.word	0x20008630
 800612c:	200012e8 	.word	0x200012e8
 8006130:	20008604 	.word	0x20008604
 8006134:	20000db4 	.word	0x20000db4
 8006138:	200085dc 	.word	0x200085dc
 800613c:	20000c10 	.word	0x20000c10
 8006140:	200085d0 	.word	0x200085d0
 8006144:	20000b3c 	.word	0x20000b3c
 8006148:	200085c8 	.word	0x200085c8
 800614c:	2000034c 	.word	0x2000034c
 8006150:	2000858c 	.word	0x2000858c
 8006154:	200000d4 	.word	0x200000d4
 8006158:	20008578 	.word	0x20008578

0800615c <ItemValueLimit>:
}
 800615c:	2000      	movs	r0, #0
 800615e:	4770      	bx	lr

08006160 <GetIHU_3Value>:
    item = GET_MENU(item, IHU_3_ITEM_MAX);
 8006160:	2819      	cmp	r0, #25
 8006162:	d901      	bls.n	8006168 <GetIHU_3Value+0x8>
 8006164:	381a      	subs	r0, #26
 8006166:	b2c0      	uxtb	r0, r0
}
 8006168:	4b01      	ldr	r3, [pc, #4]	@ (8006170 <GetIHU_3Value+0x10>)
 800616a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800616e:	4770      	bx	lr
 8006170:	20008950 	.word	0x20008950

08006174 <GetIHU_6Value>:
    item = GET_MENU(item, IHU_6_ITEM_MAX);
 8006174:	2805      	cmp	r0, #5
 8006176:	d901      	bls.n	800617c <GetIHU_6Value+0x8>
 8006178:	3806      	subs	r0, #6
 800617a:	b2c0      	uxtb	r0, r0
}
 800617c:	4b01      	ldr	r3, [pc, #4]	@ (8006184 <GetIHU_6Value+0x10>)
 800617e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006182:	4770      	bx	lr
 8006184:	20008944 	.word	0x20008944

08006188 <GetIHU_10Value>:
    item = GET_MENU(item, IHU_10_ITEM_MAX);
 8006188:	2802      	cmp	r0, #2
 800618a:	d901      	bls.n	8006190 <GetIHU_10Value+0x8>
 800618c:	3803      	subs	r0, #3
 800618e:	b2c0      	uxtb	r0, r0
}
 8006190:	4b01      	ldr	r3, [pc, #4]	@ (8006198 <GetIHU_10Value+0x10>)
 8006192:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006196:	4770      	bx	lr
 8006198:	2000893c 	.word	0x2000893c
 800619c:	00000000 	.word	0x00000000

080061a0 <GetGW_PC_2Value>:
{
 80061a0:	b508      	push	{r3, lr}
    item = GET_MENU(item, GW_PC_2_ITEM_MAX);
 80061a2:	281b      	cmp	r0, #27
 80061a4:	d901      	bls.n	80061aa <GetGW_PC_2Value+0xa>
 80061a6:	381c      	subs	r0, #28
 80061a8:	b2c0      	uxtb	r0, r0
    res = g_GW_PC_2[item] / 0.05625;
 80061aa:	4b09      	ldr	r3, [pc, #36]	@ (80061d0 <GetGW_PC_2Value+0x30>)
 80061ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80061b0:	f7fa f998 	bl	80004e4 <__aeabi_i2d>
 80061b4:	a304      	add	r3, pc, #16	@ (adr r3, 80061c8 <GetGW_PC_2Value+0x28>)
 80061b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ba:	f7fa fb27 	bl	800080c <__aeabi_ddiv>
 80061be:	f7fa fcd3 	bl	8000b68 <__aeabi_d2uiz>
}
 80061c2:	bd08      	pop	{r3, pc}
 80061c4:	f3af 8000 	nop.w
 80061c8:	cccccccd 	.word	0xcccccccd
 80061cc:	3faccccc 	.word	0x3faccccc
 80061d0:	20008904 	.word	0x20008904

080061d4 <GetGW_PC_7Value>:
    item = GET_MENU(item, GW_PC_7_ITEM_MAX);
 80061d4:	2810      	cmp	r0, #16
 80061d6:	d901      	bls.n	80061dc <GetGW_PC_7Value+0x8>
 80061d8:	3811      	subs	r0, #17
 80061da:	b2c0      	uxtb	r0, r0
}
 80061dc:	4b01      	ldr	r3, [pc, #4]	@ (80061e4 <GetGW_PC_7Value+0x10>)
 80061de:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80061e2:	4770      	bx	lr
 80061e4:	200088e0 	.word	0x200088e0

080061e8 <GetPEPS_1Value>:
    item = GET_MENU(item, PEPS_1_ITEM_MAX);
 80061e8:	2810      	cmp	r0, #16
 80061ea:	d901      	bls.n	80061f0 <GetPEPS_1Value+0x8>
 80061ec:	3811      	subs	r0, #17
 80061ee:	b2c0      	uxtb	r0, r0
}
 80061f0:	4b01      	ldr	r3, [pc, #4]	@ (80061f8 <GetPEPS_1Value+0x10>)
 80061f2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80061f6:	4770      	bx	lr
 80061f8:	200088bc 	.word	0x200088bc

080061fc <GetPEPS_3Value>:
    item = GET_MENU(item, PEPS_3_ITEM_MAX);
 80061fc:	2802      	cmp	r0, #2
 80061fe:	d901      	bls.n	8006204 <GetPEPS_3Value+0x8>
 8006200:	3803      	subs	r0, #3
 8006202:	b2c0      	uxtb	r0, r0
}
 8006204:	4b01      	ldr	r3, [pc, #4]	@ (800620c <GetPEPS_3Value+0x10>)
 8006206:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800620a:	4770      	bx	lr
 800620c:	200088b4 	.word	0x200088b4

08006210 <GetIHU_1Value>:
    item = GET_MENU(item, IHU_1_ITEM_MAX);
 8006210:	2815      	cmp	r0, #21
 8006212:	d901      	bls.n	8006218 <GetIHU_1Value+0x8>
 8006214:	3816      	subs	r0, #22
 8006216:	b2c0      	uxtb	r0, r0
}
 8006218:	4b01      	ldr	r3, [pc, #4]	@ (8006220 <GetIHU_1Value+0x10>)
 800621a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800621e:	4770      	bx	lr
 8006220:	20008888 	.word	0x20008888

08006224 <GetFCM_3Value>:
    item = GET_MENU(item, FCM_3_ITEM_MAX);
 8006224:	280e      	cmp	r0, #14
 8006226:	d901      	bls.n	800622c <GetFCM_3Value+0x8>
 8006228:	380f      	subs	r0, #15
 800622a:	b2c0      	uxtb	r0, r0
}
 800622c:	4b01      	ldr	r3, [pc, #4]	@ (8006234 <GetFCM_3Value+0x10>)
 800622e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006232:	4770      	bx	lr
 8006234:	20008868 	.word	0x20008868

08006238 <GetFCM_4Value>:
    item = GET_MENU(item, FCM_4_ITEM_MAX);
 8006238:	2814      	cmp	r0, #20
 800623a:	d901      	bls.n	8006240 <GetFCM_4Value+0x8>
 800623c:	3815      	subs	r0, #21
 800623e:	b2c0      	uxtb	r0, r0
}
 8006240:	4b01      	ldr	r3, [pc, #4]	@ (8006248 <GetFCM_4Value+0x10>)
 8006242:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006246:	4770      	bx	lr
 8006248:	2000883c 	.word	0x2000883c

0800624c <GetFCM_5Value>:
    item = GET_MENU(item, FCM_5_ITEM_MAX);
 800624c:	280b      	cmp	r0, #11
 800624e:	d901      	bls.n	8006254 <GetFCM_5Value+0x8>
 8006250:	380c      	subs	r0, #12
 8006252:	b2c0      	uxtb	r0, r0
}
 8006254:	4b01      	ldr	r3, [pc, #4]	@ (800625c <GetFCM_5Value+0x10>)
 8006256:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800625a:	4770      	bx	lr
 800625c:	20008824 	.word	0x20008824

08006260 <GetFCM_6Value>:
    item = GET_MENU(item, FCM_6_ITEM_MAX);
 8006260:	280b      	cmp	r0, #11
 8006262:	d901      	bls.n	8006268 <GetFCM_6Value+0x8>
 8006264:	380c      	subs	r0, #12
 8006266:	b2c0      	uxtb	r0, r0
}
 8006268:	4b01      	ldr	r3, [pc, #4]	@ (8006270 <GetFCM_6Value+0x10>)
 800626a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800626e:	4770      	bx	lr
 8006270:	2000880c 	.word	0x2000880c

08006274 <GetFCM_7Value>:
    item = GET_MENU(item, FCM_7_ITEM_MAX);
 8006274:	280b      	cmp	r0, #11
 8006276:	d901      	bls.n	800627c <GetFCM_7Value+0x8>
 8006278:	380c      	subs	r0, #12
 800627a:	b2c0      	uxtb	r0, r0
}
 800627c:	4b01      	ldr	r3, [pc, #4]	@ (8006284 <GetFCM_7Value+0x10>)
 800627e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006282:	4770      	bx	lr
 8006284:	200087f4 	.word	0x200087f4

08006288 <GetFCM_8Value>:
    item = GET_MENU(item, FCM_8_ITEM_MAX);
 8006288:	280b      	cmp	r0, #11
 800628a:	d901      	bls.n	8006290 <GetFCM_8Value+0x8>
 800628c:	380c      	subs	r0, #12
 800628e:	b2c0      	uxtb	r0, r0
}
 8006290:	4b01      	ldr	r3, [pc, #4]	@ (8006298 <GetFCM_8Value+0x10>)
 8006292:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006296:	4770      	bx	lr
 8006298:	200087dc 	.word	0x200087dc

0800629c <GetBCM_5Value>:
    item = GET_MENU(item, BCM_5_ITEM_MAX);
 800629c:	2809      	cmp	r0, #9
 800629e:	d901      	bls.n	80062a4 <GetBCM_5Value+0x8>
 80062a0:	380a      	subs	r0, #10
 80062a2:	b2c0      	uxtb	r0, r0
}
 80062a4:	4b01      	ldr	r3, [pc, #4]	@ (80062ac <GetBCM_5Value+0x10>)
 80062a6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80062aa:	4770      	bx	lr
 80062ac:	200087c8 	.word	0x200087c8

080062b0 <GetTBOX_4Value>:
    item = GET_MENU(item, TBOX_4_ITEM_MAX);
 80062b0:	4603      	mov	r3, r0
 80062b2:	b108      	cbz	r0, 80062b8 <GetTBOX_4Value+0x8>
 80062b4:	1e43      	subs	r3, r0, #1
 80062b6:	b2db      	uxtb	r3, r3
}
 80062b8:	4a01      	ldr	r2, [pc, #4]	@ (80062c0 <GetTBOX_4Value+0x10>)
 80062ba:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80062be:	4770      	bx	lr
 80062c0:	200087c4 	.word	0x200087c4

080062c4 <GetACU_1Value>:
{
 80062c4:	4603      	mov	r3, r0
    item = GET_MENU(item, ACU_1_ITEM_MAX);
 80062c6:	2802      	cmp	r0, #2
 80062c8:	d901      	bls.n	80062ce <GetACU_1Value+0xa>
 80062ca:	1ec3      	subs	r3, r0, #3
 80062cc:	b2db      	uxtb	r3, r3
    res = g_ACU_1[item];
 80062ce:	4a05      	ldr	r2, [pc, #20]	@ (80062e4 <GetACU_1Value+0x20>)
 80062d0:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
    if(item == 0 && (crash_flag != 0 && res == 0)){
 80062d4:	b923      	cbnz	r3, 80062e0 <GetACU_1Value+0x1c>
 80062d6:	4b04      	ldr	r3, [pc, #16]	@ (80062e8 <GetACU_1Value+0x24>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	b10b      	cbz	r3, 80062e0 <GetACU_1Value+0x1c>
 80062dc:	b900      	cbnz	r0, 80062e0 <GetACU_1Value+0x1c>
    	res = crash_flag;
 80062de:	4618      	mov	r0, r3
}
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	200087bc 	.word	0x200087bc
 80062e8:	20008575 	.word	0x20008575

080062ec <GetBCM_1Value>:
    item = GET_MENU(item, BCM_1_ITEM_MAX);
 80062ec:	2802      	cmp	r0, #2
 80062ee:	d901      	bls.n	80062f4 <GetBCM_1Value+0x8>
 80062f0:	3803      	subs	r0, #3
 80062f2:	b2c0      	uxtb	r0, r0
}
 80062f4:	4b01      	ldr	r3, [pc, #4]	@ (80062fc <GetBCM_1Value+0x10>)
 80062f6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80062fa:	4770      	bx	lr
 80062fc:	200087b4 	.word	0x200087b4

08006300 <GetBCM_4Value>:
    item = GET_MENU(item, BCM_4_ITEM_MAX);
 8006300:	2814      	cmp	r0, #20
 8006302:	d901      	bls.n	8006308 <GetBCM_4Value+0x8>
 8006304:	3815      	subs	r0, #21
 8006306:	b2c0      	uxtb	r0, r0
}
 8006308:	4b01      	ldr	r3, [pc, #4]	@ (8006310 <GetBCM_4Value+0x10>)
 800630a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800630e:	4770      	bx	lr
 8006310:	20008788 	.word	0x20008788

08006314 <GetTPMS_1Value>:
    item = GET_MENU(item, TPMS_1_ITEM_MAX);
 8006314:	280a      	cmp	r0, #10
 8006316:	d901      	bls.n	800631c <GetTPMS_1Value+0x8>
 8006318:	380b      	subs	r0, #11
 800631a:	b2c0      	uxtb	r0, r0
}
 800631c:	4b01      	ldr	r3, [pc, #4]	@ (8006324 <GetTPMS_1Value+0x10>)
 800631e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006322:	4770      	bx	lr
 8006324:	20008770 	.word	0x20008770

08006328 <GetIC_1Value>:
    item = GET_MENU(item, IC_1_ITEM_MAX);
 8006328:	2810      	cmp	r0, #16
 800632a:	d901      	bls.n	8006330 <GetIC_1Value+0x8>
 800632c:	3811      	subs	r0, #17
 800632e:	b2c0      	uxtb	r0, r0
}
 8006330:	4b01      	ldr	r3, [pc, #4]	@ (8006338 <GetIC_1Value+0x10>)
 8006332:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006336:	4770      	bx	lr
 8006338:	2000872c 	.word	0x2000872c

0800633c <GetIC_2Value>:
    item = GET_MENU(item, IC_2_ITEM_MAX);
 800633c:	2801      	cmp	r0, #1
 800633e:	d901      	bls.n	8006344 <GetIC_2Value+0x8>
 8006340:	3802      	subs	r0, #2
 8006342:	b2c0      	uxtb	r0, r0
}
 8006344:	4b01      	ldr	r3, [pc, #4]	@ (800634c <GetIC_2Value+0x10>)
 8006346:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800634a:	4770      	bx	lr
 800634c:	20008728 	.word	0x20008728

08006350 <GetGW_PC_4Value>:
    item = GET_MENU(item, GW_PC_4_ITEM_MAX);
 8006350:	2804      	cmp	r0, #4
 8006352:	d901      	bls.n	8006358 <GetGW_PC_4Value+0x8>
 8006354:	3805      	subs	r0, #5
 8006356:	b2c0      	uxtb	r0, r0
}
 8006358:	4b01      	ldr	r3, [pc, #4]	@ (8006360 <GetGW_PC_4Value+0x10>)
 800635a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800635e:	4770      	bx	lr
 8006360:	2000871c 	.word	0x2000871c

08006364 <GetGW_BD_14Value>:
    item = GET_MENU(item, GW_BD_14_ITEM_MAX);
 8006364:	2816      	cmp	r0, #22
 8006366:	d901      	bls.n	800636c <GetGW_BD_14Value+0x8>
 8006368:	3817      	subs	r0, #23
 800636a:	b2c0      	uxtb	r0, r0
}
 800636c:	4b01      	ldr	r3, [pc, #4]	@ (8006374 <GetGW_BD_14Value+0x10>)
 800636e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006372:	4770      	bx	lr
 8006374:	200086ec 	.word	0x200086ec

08006378 <GetIHU_4Value>:
    item = GET_MENU(item, IHU_4_ITEM_MAX);
 8006378:	2803      	cmp	r0, #3
 800637a:	d901      	bls.n	8006380 <GetIHU_4Value+0x8>
 800637c:	3804      	subs	r0, #4
 800637e:	b2c0      	uxtb	r0, r0
}
 8006380:	4b01      	ldr	r3, [pc, #4]	@ (8006388 <GetIHU_4Value+0x10>)
 8006382:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006386:	4770      	bx	lr
 8006388:	200086e4 	.word	0x200086e4

0800638c <GetIHU_5Value>:
    item = GET_MENU(item, IHU_5_ITEM_MAX);
 800638c:	280b      	cmp	r0, #11
 800638e:	d901      	bls.n	8006394 <GetIHU_5Value+0x8>
 8006390:	380c      	subs	r0, #12
 8006392:	b2c0      	uxtb	r0, r0
}
 8006394:	4b01      	ldr	r3, [pc, #4]	@ (800639c <GetIHU_5Value+0x10>)
 8006396:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800639a:	4770      	bx	lr
 800639c:	200086cc 	.word	0x200086cc

080063a0 <GetGW_BD_29Value>:
    item = GET_MENU(item, GW_BD_29_ITEM_MAX);
 80063a0:	280c      	cmp	r0, #12
 80063a2:	d901      	bls.n	80063a8 <GetGW_BD_29Value+0x8>
 80063a4:	380d      	subs	r0, #13
 80063a6:	b2c0      	uxtb	r0, r0
}
 80063a8:	4b01      	ldr	r3, [pc, #4]	@ (80063b0 <GetGW_BD_29Value+0x10>)
 80063aa:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80063ae:	4770      	bx	lr
 80063b0:	200086b0 	.word	0x200086b0

080063b4 <GetIHU_2Value>:
    item = GET_MENU(item, IHU_2_ITEM_MAX);
 80063b4:	2805      	cmp	r0, #5
 80063b6:	d901      	bls.n	80063bc <GetIHU_2Value+0x8>
 80063b8:	3806      	subs	r0, #6
 80063ba:	b2c0      	uxtb	r0, r0
}
 80063bc:	4b01      	ldr	r3, [pc, #4]	@ (80063c4 <GetIHU_2Value+0x10>)
 80063be:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80063c2:	4770      	bx	lr
 80063c4:	200086a4 	.word	0x200086a4

080063c8 <GetIHU_7Value>:
    item = GET_MENU(item, IHU_7_ITEM_MAX);
 80063c8:	2809      	cmp	r0, #9
 80063ca:	d901      	bls.n	80063d0 <GetIHU_7Value+0x8>
 80063cc:	380a      	subs	r0, #10
 80063ce:	b2c0      	uxtb	r0, r0
}
 80063d0:	4b01      	ldr	r3, [pc, #4]	@ (80063d8 <GetIHU_7Value+0x10>)
 80063d2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80063d6:	4770      	bx	lr
 80063d8:	2000867c 	.word	0x2000867c

080063dc <GetIHU_8Value>:
    item = GET_MENU(item, IHU_8_ITEM_MAX);
 80063dc:	2805      	cmp	r0, #5
 80063de:	d901      	bls.n	80063e4 <GetIHU_8Value+0x8>
 80063e0:	3806      	subs	r0, #6
 80063e2:	b2c0      	uxtb	r0, r0
}
 80063e4:	4b01      	ldr	r3, [pc, #4]	@ (80063ec <GetIHU_8Value+0x10>)
 80063e6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80063ea:	4770      	bx	lr
 80063ec:	20008664 	.word	0x20008664

080063f0 <GetIHU_9Value>:
    item = GET_MENU(item, IHU_9_ITEM_MAX);
 80063f0:	2802      	cmp	r0, #2
 80063f2:	d901      	bls.n	80063f8 <GetIHU_9Value+0x8>
 80063f4:	3803      	subs	r0, #3
 80063f6:	b2c0      	uxtb	r0, r0
}
 80063f8:	4b01      	ldr	r3, [pc, #4]	@ (8006400 <GetIHU_9Value+0x10>)
 80063fa:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80063fe:	4770      	bx	lr
 8006400:	2000865c 	.word	0x2000865c

08006404 <GetTBOX_1Value>:
    item = GET_MENU(item, TBOX_1_ITEM_MAX);
 8006404:	2810      	cmp	r0, #16
 8006406:	d901      	bls.n	800640c <GetTBOX_1Value+0x8>
 8006408:	3811      	subs	r0, #17
 800640a:	b2c0      	uxtb	r0, r0
}
 800640c:	4b01      	ldr	r3, [pc, #4]	@ (8006414 <GetTBOX_1Value+0x10>)
 800640e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006412:	4770      	bx	lr
 8006414:	20008638 	.word	0x20008638

08006418 <GetTBOX_2Value>:
    item = GET_MENU(item, TBOX_2_ITEM_MAX);
 8006418:	2802      	cmp	r0, #2
 800641a:	d901      	bls.n	8006420 <GetTBOX_2Value+0x8>
 800641c:	3803      	subs	r0, #3
 800641e:	b2c0      	uxtb	r0, r0
}
 8006420:	4b01      	ldr	r3, [pc, #4]	@ (8006428 <GetTBOX_2Value+0x10>)
 8006422:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006426:	4770      	bx	lr
 8006428:	20008630 	.word	0x20008630

0800642c <GetGW_PC_1Value>:
    item = GET_MENU(item, GW_PC_1_ITEM_MAX);
 800642c:	2814      	cmp	r0, #20
 800642e:	d901      	bls.n	8006434 <GetGW_PC_1Value+0x8>
 8006430:	3815      	subs	r0, #21
 8006432:	b2c0      	uxtb	r0, r0
}
 8006434:	4b01      	ldr	r3, [pc, #4]	@ (800643c <GetGW_PC_1Value+0x10>)
 8006436:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800643a:	4770      	bx	lr
 800643c:	20008604 	.word	0x20008604

08006440 <GetGW_PC_6Value>:
    item = GET_MENU(item, GW_PC_6_ITEM_MAX);
 8006440:	2812      	cmp	r0, #18
 8006442:	d901      	bls.n	8006448 <GetGW_PC_6Value+0x8>
 8006444:	3813      	subs	r0, #19
 8006446:	b2c0      	uxtb	r0, r0
}
 8006448:	4b01      	ldr	r3, [pc, #4]	@ (8006450 <GetGW_PC_6Value+0x10>)
 800644a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800644e:	4770      	bx	lr
 8006450:	200085dc 	.word	0x200085dc

08006454 <GetESP_2Value>:
    item = GET_MENU(item, ESP_2_ITEM_MAX);
 8006454:	2805      	cmp	r0, #5
 8006456:	d901      	bls.n	800645c <GetESP_2Value+0x8>
 8006458:	3806      	subs	r0, #6
 800645a:	b2c0      	uxtb	r0, r0
}
 800645c:	4b01      	ldr	r3, [pc, #4]	@ (8006464 <GetESP_2Value+0x10>)
 800645e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006462:	4770      	bx	lr
 8006464:	200085d0 	.word	0x200085d0

08006468 <GetBCM_3Value>:
    item = GET_MENU(item, BCM_3_ITEM_MAX);
 8006468:	2802      	cmp	r0, #2
 800646a:	d901      	bls.n	8006470 <GetBCM_3Value+0x8>
 800646c:	3803      	subs	r0, #3
 800646e:	b2c0      	uxtb	r0, r0
}
 8006470:	4b01      	ldr	r3, [pc, #4]	@ (8006478 <GetBCM_3Value+0x10>)
 8006472:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006476:	4770      	bx	lr
 8006478:	200085c8 	.word	0x200085c8

0800647c <GetGW_BD_9Value>:
    item = GET_MENU(item, GW_BD_9_ITEM_MAX);
 800647c:	281c      	cmp	r0, #28
 800647e:	d901      	bls.n	8006484 <GetGW_BD_9Value+0x8>
 8006480:	381d      	subs	r0, #29
 8006482:	b2c0      	uxtb	r0, r0
}
 8006484:	4b01      	ldr	r3, [pc, #4]	@ (800648c <GetGW_BD_9Value+0x10>)
 8006486:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800648a:	4770      	bx	lr
 800648c:	2000858c 	.word	0x2000858c

08006490 <GetGW_BD_24Value>:
    item = GET_MENU(item, GW_BD_24_ITEM_MAX);
 8006490:	2808      	cmp	r0, #8
 8006492:	d901      	bls.n	8006498 <GetGW_BD_24Value+0x8>
 8006494:	3809      	subs	r0, #9
 8006496:	b2c0      	uxtb	r0, r0
}
 8006498:	4b01      	ldr	r3, [pc, #4]	@ (80064a0 <GetGW_BD_24Value+0x10>)
 800649a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800649e:	4770      	bx	lr
 80064a0:	20008578 	.word	0x20008578

080064a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80064a4:	b500      	push	{lr}
 80064a6:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80064a8:	2300      	movs	r3, #0
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	9302      	str	r3, [sp, #8]
 80064ae:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80064b0:	482c      	ldr	r0, [pc, #176]	@ (8006564 <MX_ADC1_Init+0xc0>)
 80064b2:	4a2d      	ldr	r2, [pc, #180]	@ (8006568 <MX_ADC1_Init+0xc4>)
 80064b4:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80064b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064ba:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80064bc:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80064be:	2201      	movs	r2, #1
 80064c0:	7502      	strb	r2, [r0, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 80064c2:	6182      	str	r2, [r0, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80064c4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80064c8:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80064ca:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 5;
 80064cc:	2305      	movs	r3, #5
 80064ce:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80064d0:	f001 f944 	bl	800775c <HAL_ADC_Init>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d132      	bne.n	800653e <MX_ADC1_Init+0x9a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80064d8:	2308      	movs	r3, #8
 80064da:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80064dc:	2301      	movs	r3, #1
 80064de:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80064e0:	2300      	movs	r3, #0
 80064e2:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80064e4:	a901      	add	r1, sp, #4
 80064e6:	481f      	ldr	r0, [pc, #124]	@ (8006564 <MX_ADC1_Init+0xc0>)
 80064e8:	f000 ffb4 	bl	8007454 <HAL_ADC_ConfigChannel>
 80064ec:	bb50      	cbnz	r0, 8006544 <MX_ADC1_Init+0xa0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80064ee:	230e      	movs	r3, #14
 80064f0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80064f2:	2302      	movs	r3, #2
 80064f4:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80064f6:	a901      	add	r1, sp, #4
 80064f8:	481a      	ldr	r0, [pc, #104]	@ (8006564 <MX_ADC1_Init+0xc0>)
 80064fa:	f000 ffab 	bl	8007454 <HAL_ADC_ConfigChannel>
 80064fe:	bb20      	cbnz	r0, 800654a <MX_ADC1_Init+0xa6>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006500:	230f      	movs	r3, #15
 8006502:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8006504:	2303      	movs	r3, #3
 8006506:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006508:	a901      	add	r1, sp, #4
 800650a:	4816      	ldr	r0, [pc, #88]	@ (8006564 <MX_ADC1_Init+0xc0>)
 800650c:	f000 ffa2 	bl	8007454 <HAL_ADC_ConfigChannel>
 8006510:	b9f0      	cbnz	r0, 8006550 <MX_ADC1_Init+0xac>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8006512:	230b      	movs	r3, #11
 8006514:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8006516:	2304      	movs	r3, #4
 8006518:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800651a:	eb0d 0103 	add.w	r1, sp, r3
 800651e:	4811      	ldr	r0, [pc, #68]	@ (8006564 <MX_ADC1_Init+0xc0>)
 8006520:	f000 ff98 	bl	8007454 <HAL_ADC_ConfigChannel>
 8006524:	b9b8      	cbnz	r0, 8006556 <MX_ADC1_Init+0xb2>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006526:	230c      	movs	r3, #12
 8006528:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800652a:	2305      	movs	r3, #5
 800652c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800652e:	a901      	add	r1, sp, #4
 8006530:	480c      	ldr	r0, [pc, #48]	@ (8006564 <MX_ADC1_Init+0xc0>)
 8006532:	f000 ff8f 	bl	8007454 <HAL_ADC_ConfigChannel>
 8006536:	b988      	cbnz	r0, 800655c <MX_ADC1_Init+0xb8>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006538:	b005      	add	sp, #20
 800653a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800653e:	f000 fc2b 	bl	8006d98 <Error_Handler>
 8006542:	e7c9      	b.n	80064d8 <MX_ADC1_Init+0x34>
    Error_Handler();
 8006544:	f000 fc28 	bl	8006d98 <Error_Handler>
 8006548:	e7d1      	b.n	80064ee <MX_ADC1_Init+0x4a>
    Error_Handler();
 800654a:	f000 fc25 	bl	8006d98 <Error_Handler>
 800654e:	e7d7      	b.n	8006500 <MX_ADC1_Init+0x5c>
    Error_Handler();
 8006550:	f000 fc22 	bl	8006d98 <Error_Handler>
 8006554:	e7dd      	b.n	8006512 <MX_ADC1_Init+0x6e>
    Error_Handler();
 8006556:	f000 fc1f 	bl	8006d98 <Error_Handler>
 800655a:	e7e4      	b.n	8006526 <MX_ADC1_Init+0x82>
    Error_Handler();
 800655c:	f000 fc1c 	bl	8006d98 <Error_Handler>
}
 8006560:	e7ea      	b.n	8006538 <MX_ADC1_Init+0x94>
 8006562:	bf00      	nop
 8006564:	20008984 	.word	0x20008984
 8006568:	40012400 	.word	0x40012400

0800656c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800656c:	b510      	push	{r4, lr}
 800656e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006570:	2300      	movs	r3, #0
 8006572:	9304      	str	r3, [sp, #16]
 8006574:	9305      	str	r3, [sp, #20]
 8006576:	9306      	str	r3, [sp, #24]
 8006578:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 800657a:	6802      	ldr	r2, [r0, #0]
 800657c:	4b18      	ldr	r3, [pc, #96]	@ (80065e0 <HAL_ADC_MspInit+0x74>)
 800657e:	429a      	cmp	r2, r3
 8006580:	d001      	beq.n	8006586 <HAL_ADC_MspInit+0x1a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006582:	b008      	add	sp, #32
 8006584:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006586:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 800658a:	699a      	ldr	r2, [r3, #24]
 800658c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006590:	619a      	str	r2, [r3, #24]
 8006592:	699a      	ldr	r2, [r3, #24]
 8006594:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8006598:	9201      	str	r2, [sp, #4]
 800659a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800659c:	699a      	ldr	r2, [r3, #24]
 800659e:	f042 0210 	orr.w	r2, r2, #16
 80065a2:	619a      	str	r2, [r3, #24]
 80065a4:	699a      	ldr	r2, [r3, #24]
 80065a6:	f002 0210 	and.w	r2, r2, #16
 80065aa:	9202      	str	r2, [sp, #8]
 80065ac:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065ae:	699a      	ldr	r2, [r3, #24]
 80065b0:	f042 0208 	orr.w	r2, r2, #8
 80065b4:	619a      	str	r2, [r3, #24]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	f003 0308 	and.w	r3, r3, #8
 80065bc:	9303      	str	r3, [sp, #12]
 80065be:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 80065c0:	2336      	movs	r3, #54	@ 0x36
 80065c2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065c4:	2403      	movs	r4, #3
 80065c6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065c8:	a904      	add	r1, sp, #16
 80065ca:	4806      	ldr	r0, [pc, #24]	@ (80065e4 <HAL_ADC_MspInit+0x78>)
 80065cc:	f002 f8a8 	bl	8008720 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80065d0:	2301      	movs	r3, #1
 80065d2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065d4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065d6:	a904      	add	r1, sp, #16
 80065d8:	4803      	ldr	r0, [pc, #12]	@ (80065e8 <HAL_ADC_MspInit+0x7c>)
 80065da:	f002 f8a1 	bl	8008720 <HAL_GPIO_Init>
}
 80065de:	e7d0      	b.n	8006582 <HAL_ADC_MspInit+0x16>
 80065e0:	40012400 	.word	0x40012400
 80065e4:	40011000 	.word	0x40011000
 80065e8:	40010c00 	.word	0x40010c00

080065ec <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80065ec:	b510      	push	{r4, lr}
 80065ee:	b08a      	sub	sp, #40	@ 0x28
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80065f0:	481c      	ldr	r0, [pc, #112]	@ (8006664 <MX_CAN1_Init+0x78>)
 80065f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006668 <MX_CAN1_Init+0x7c>)
 80065f4:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = GET_PRESCALER(CCAN1_BAUDRATE);;
 80065f6:	2309      	movs	r3, #9
 80065f8:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80065fa:	2300      	movs	r3, #0
 80065fc:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80065fe:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8006600:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006604:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8006606:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800660a:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800660c:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800660e:	2201      	movs	r2, #1
 8006610:	7642      	strb	r2, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8006612:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8006614:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006616:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8006618:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800661a:	f001 f923 	bl	8007864 <HAL_CAN_Init>
 800661e:	b9d0      	cbnz	r0, 8006656 <MX_CAN1_Init+0x6a>
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  Filter.FilterIdHigh = 0;
 8006620:	2300      	movs	r3, #0
 8006622:	9300      	str	r3, [sp, #0]
	Filter.FilterIdLow = 0;
 8006624:	9301      	str	r3, [sp, #4]
	Filter.FilterMaskIdHigh = 0;
 8006626:	9302      	str	r3, [sp, #8]
	Filter.FilterMaskIdLow = 0;
 8006628:	9303      	str	r3, [sp, #12]
	Filter.SlaveStartFilterBank = 0;
 800662a:	9309      	str	r3, [sp, #36]	@ 0x24
	Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800662c:	2201      	movs	r2, #1
 800662e:	9207      	str	r2, [sp, #28]
	Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8006630:	9306      	str	r3, [sp, #24]
	Filter.FilterBank = 0;
 8006632:	9305      	str	r3, [sp, #20]
	Filter.FilterFIFOAssignment = CAN_FilterFIFO0;
 8006634:	9304      	str	r3, [sp, #16]
	Filter.FilterActivation = CAN_FILTER_ENABLE;
 8006636:	9208      	str	r2, [sp, #32]

  HAL_CAN_ConfigFilter(&hcan1, &Filter);
 8006638:	4c0a      	ldr	r4, [pc, #40]	@ (8006664 <MX_CAN1_Init+0x78>)
 800663a:	4669      	mov	r1, sp
 800663c:	4620      	mov	r0, r4
 800663e:	f001 f9b7 	bl	80079b0 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan1);
 8006642:	4620      	mov	r0, r4
 8006644:	f001 fa52 	bl	8007aec <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8006648:	2102      	movs	r1, #2
 800664a:	4620      	mov	r0, r4
 800664c:	f001 fbbf 	bl	8007dce <HAL_CAN_ActivateNotification>
 8006650:	b920      	cbnz	r0, 800665c <MX_CAN1_Init+0x70>
		/* Notification Error */
		Error_Handler();
	}
  /* USER CODE END CAN1_Init 2 */

}
 8006652:	b00a      	add	sp, #40	@ 0x28
 8006654:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006656:	f000 fb9f 	bl	8006d98 <Error_Handler>
 800665a:	e7e1      	b.n	8006620 <MX_CAN1_Init+0x34>
		Error_Handler();
 800665c:	f000 fb9c 	bl	8006d98 <Error_Handler>
}
 8006660:	e7f7      	b.n	8006652 <MX_CAN1_Init+0x66>
 8006662:	bf00      	nop
 8006664:	200089e8 	.word	0x200089e8
 8006668:	40006400 	.word	0x40006400

0800666c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800666c:	b510      	push	{r4, lr}
 800666e:	b08a      	sub	sp, #40	@ 0x28
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8006670:	481c      	ldr	r0, [pc, #112]	@ (80066e4 <MX_CAN2_Init+0x78>)
 8006672:	4b1d      	ldr	r3, [pc, #116]	@ (80066e8 <MX_CAN2_Init+0x7c>)
 8006674:	6003      	str	r3, [r0, #0]
  hcan2.Init.Prescaler = GET_PRESCALER(BCAN_BAUDRATE);
 8006676:	2309      	movs	r3, #9
 8006678:	6043      	str	r3, [r0, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800667a:	2300      	movs	r3, #0
 800667c:	6083      	str	r3, [r0, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800667e:	60c3      	str	r3, [r0, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8006680:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006684:	6102      	str	r2, [r0, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8006686:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800668a:	6142      	str	r2, [r0, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800668c:	7603      	strb	r3, [r0, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 800668e:	2201      	movs	r2, #1
 8006690:	7642      	strb	r2, [r0, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8006692:	7683      	strb	r3, [r0, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8006694:	76c3      	strb	r3, [r0, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8006696:	7703      	strb	r3, [r0, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8006698:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800669a:	f001 f8e3 	bl	8007864 <HAL_CAN_Init>
 800669e:	b9d8      	cbnz	r0, 80066d8 <MX_CAN2_Init+0x6c>
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  Filter.FilterIdHigh = 0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	9300      	str	r3, [sp, #0]
	Filter.FilterIdLow = 0;
 80066a4:	9301      	str	r3, [sp, #4]
	Filter.FilterMaskIdHigh = 0;
 80066a6:	9302      	str	r3, [sp, #8]
	Filter.FilterMaskIdLow = 0;
 80066a8:	9303      	str	r3, [sp, #12]
	Filter.SlaveStartFilterBank = 14;
 80066aa:	210e      	movs	r1, #14
 80066ac:	9109      	str	r1, [sp, #36]	@ 0x24
	Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80066ae:	2201      	movs	r2, #1
 80066b0:	9207      	str	r2, [sp, #28]
	Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80066b2:	9306      	str	r3, [sp, #24]
	Filter.FilterBank = 14;
 80066b4:	9105      	str	r1, [sp, #20]
	Filter.FilterFIFOAssignment = CAN_FilterFIFO0;
 80066b6:	9304      	str	r3, [sp, #16]
	Filter.FilterActivation = CAN_FILTER_ENABLE;
 80066b8:	9208      	str	r2, [sp, #32]

	HAL_CAN_ConfigFilter(&hcan2, &Filter);
 80066ba:	4c0a      	ldr	r4, [pc, #40]	@ (80066e4 <MX_CAN2_Init+0x78>)
 80066bc:	4669      	mov	r1, sp
 80066be:	4620      	mov	r0, r4
 80066c0:	f001 f976 	bl	80079b0 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan2);
 80066c4:	4620      	mov	r0, r4
 80066c6:	f001 fa11 	bl	8007aec <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80066ca:	2102      	movs	r1, #2
 80066cc:	4620      	mov	r0, r4
 80066ce:	f001 fb7e 	bl	8007dce <HAL_CAN_ActivateNotification>
 80066d2:	b920      	cbnz	r0, 80066de <MX_CAN2_Init+0x72>
		/* Notification Error */
		Error_Handler();
	}
  /* USER CODE END CAN2_Init 2 */

}
 80066d4:	b00a      	add	sp, #40	@ 0x28
 80066d6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80066d8:	f000 fb5e 	bl	8006d98 <Error_Handler>
 80066dc:	e7e0      	b.n	80066a0 <MX_CAN2_Init+0x34>
		Error_Handler();
 80066de:	f000 fb5b 	bl	8006d98 <Error_Handler>
}
 80066e2:	e7f7      	b.n	80066d4 <MX_CAN2_Init+0x68>
 80066e4:	200089c0 	.word	0x200089c0
 80066e8:	40006800 	.word	0x40006800

080066ec <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80066ec:	b510      	push	{r4, lr}
 80066ee:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066f0:	2300      	movs	r3, #0
 80066f2:	9306      	str	r3, [sp, #24]
 80066f4:	9307      	str	r3, [sp, #28]
 80066f6:	9308      	str	r3, [sp, #32]
 80066f8:	9309      	str	r3, [sp, #36]	@ 0x24
  if(canHandle->Instance==CAN1)
 80066fa:	6803      	ldr	r3, [r0, #0]
 80066fc:	4a3f      	ldr	r2, [pc, #252]	@ (80067fc <HAL_CAN_MspInit+0x110>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d004      	beq.n	800670c <HAL_CAN_MspInit+0x20>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
  else if(canHandle->Instance==CAN2)
 8006702:	4a3f      	ldr	r2, [pc, #252]	@ (8006800 <HAL_CAN_MspInit+0x114>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d038      	beq.n	800677a <HAL_CAN_MspInit+0x8e>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8006708:	b00a      	add	sp, #40	@ 0x28
 800670a:	bd10      	pop	{r4, pc}
    HAL_RCC_CAN1_CLK_ENABLED++;
 800670c:	4a3d      	ldr	r2, [pc, #244]	@ (8006804 <HAL_CAN_MspInit+0x118>)
 800670e:	6813      	ldr	r3, [r2, #0]
 8006710:	3301      	adds	r3, #1
 8006712:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8006714:	2b01      	cmp	r3, #1
 8006716:	d025      	beq.n	8006764 <HAL_CAN_MspInit+0x78>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006718:	4b3b      	ldr	r3, [pc, #236]	@ (8006808 <HAL_CAN_MspInit+0x11c>)
 800671a:	699a      	ldr	r2, [r3, #24]
 800671c:	f042 0204 	orr.w	r2, r2, #4
 8006720:	619a      	str	r2, [r3, #24]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	9302      	str	r3, [sp, #8]
 800672a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800672c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006730:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006732:	4c36      	ldr	r4, [pc, #216]	@ (800680c <HAL_CAN_MspInit+0x120>)
 8006734:	a906      	add	r1, sp, #24
 8006736:	4620      	mov	r0, r4
 8006738:	f001 fff2 	bl	8008720 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800673c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006740:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006742:	2302      	movs	r3, #2
 8006744:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006746:	2303      	movs	r3, #3
 8006748:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800674a:	a906      	add	r1, sp, #24
 800674c:	4620      	mov	r0, r4
 800674e:	f001 ffe7 	bl	8008720 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8006752:	2200      	movs	r2, #0
 8006754:	2105      	movs	r1, #5
 8006756:	2014      	movs	r0, #20
 8006758:	f001 fcc6 	bl	80080e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800675c:	2014      	movs	r0, #20
 800675e:	f001 fcd3 	bl	8008108 <HAL_NVIC_EnableIRQ>
 8006762:	e7d1      	b.n	8006708 <HAL_CAN_MspInit+0x1c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8006764:	4b28      	ldr	r3, [pc, #160]	@ (8006808 <HAL_CAN_MspInit+0x11c>)
 8006766:	69da      	ldr	r2, [r3, #28]
 8006768:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800676c:	61da      	str	r2, [r3, #28]
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006774:	9301      	str	r3, [sp, #4]
 8006776:	9b01      	ldr	r3, [sp, #4]
 8006778:	e7ce      	b.n	8006718 <HAL_CAN_MspInit+0x2c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800677a:	4b23      	ldr	r3, [pc, #140]	@ (8006808 <HAL_CAN_MspInit+0x11c>)
 800677c:	69da      	ldr	r2, [r3, #28]
 800677e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8006782:	61da      	str	r2, [r3, #28]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800678a:	9303      	str	r3, [sp, #12]
 800678c:	9b03      	ldr	r3, [sp, #12]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800678e:	4a1d      	ldr	r2, [pc, #116]	@ (8006804 <HAL_CAN_MspInit+0x118>)
 8006790:	6813      	ldr	r3, [r2, #0]
 8006792:	3301      	adds	r3, #1
 8006794:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8006796:	2b01      	cmp	r3, #1
 8006798:	d025      	beq.n	80067e6 <HAL_CAN_MspInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800679a:	4b1b      	ldr	r3, [pc, #108]	@ (8006808 <HAL_CAN_MspInit+0x11c>)
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	f042 0208 	orr.w	r2, r2, #8
 80067a2:	619a      	str	r2, [r3, #24]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	f003 0308 	and.w	r3, r3, #8
 80067aa:	9305      	str	r3, [sp, #20]
 80067ac:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80067ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80067b2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067b4:	4c16      	ldr	r4, [pc, #88]	@ (8006810 <HAL_CAN_MspInit+0x124>)
 80067b6:	a906      	add	r1, sp, #24
 80067b8:	4620      	mov	r0, r4
 80067ba:	f001 ffb1 	bl	8008720 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80067be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80067c2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067c4:	2302      	movs	r3, #2
 80067c6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80067c8:	2303      	movs	r3, #3
 80067ca:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067cc:	a906      	add	r1, sp, #24
 80067ce:	4620      	mov	r0, r4
 80067d0:	f001 ffa6 	bl	8008720 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80067d4:	2200      	movs	r2, #0
 80067d6:	2105      	movs	r1, #5
 80067d8:	2040      	movs	r0, #64	@ 0x40
 80067da:	f001 fc85 	bl	80080e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80067de:	2040      	movs	r0, #64	@ 0x40
 80067e0:	f001 fc92 	bl	8008108 <HAL_NVIC_EnableIRQ>
}
 80067e4:	e790      	b.n	8006708 <HAL_CAN_MspInit+0x1c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80067e6:	4b08      	ldr	r3, [pc, #32]	@ (8006808 <HAL_CAN_MspInit+0x11c>)
 80067e8:	69da      	ldr	r2, [r3, #28]
 80067ea:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80067ee:	61da      	str	r2, [r3, #28]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067f6:	9304      	str	r3, [sp, #16]
 80067f8:	9b04      	ldr	r3, [sp, #16]
 80067fa:	e7ce      	b.n	800679a <HAL_CAN_MspInit+0xae>
 80067fc:	40006400 	.word	0x40006400
 8006800:	40006800 	.word	0x40006800
 8006804:	200089bc 	.word	0x200089bc
 8006808:	40021000 	.word	0x40021000
 800680c:	40010800 	.word	0x40010800
 8006810:	40010c00 	.word	0x40010c00

08006814 <HAL_CAN_RxFifo0MsgPendingCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8006814:	b500      	push	{lr}
 8006816:	b087      	sub	sp, #28
    CanMsg_t RxMessageObject;
    BaseType_t xHigherPriorityTaskWoken = 0;
 8006818:	2100      	movs	r1, #0
 800681a:	9101      	str	r1, [sp, #4]
	/* Get RX message */
	if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 800681c:	4b18      	ldr	r3, [pc, #96]	@ (8006880 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800681e:	4a19      	ldr	r2, [pc, #100]	@ (8006884 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8006820:	f001 fa20 	bl	8007c64 <HAL_CAN_GetRxMessage>
 8006824:	b938      	cbnz	r0, 8006836 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		/* Reception Error */
		Error_Handler();
	}
    
    RxMessageObject.MsgID = RxHeader.StdId;
 8006826:	4b17      	ldr	r3, [pc, #92]	@ (8006884 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	9202      	str	r2, [sp, #8]
    RxMessageObject.MsgLen = RxHeader.DLC;
 800682c:	7c18      	ldrb	r0, [r3, #16]
 800682e:	f88d 000c 	strb.w	r0, [sp, #12]
    
    for(uint8_t i = 0;i<RxMessageObject.MsgLen;++i)
 8006832:	2300      	movs	r3, #0
 8006834:	e00b      	b.n	800684e <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
		Error_Handler();
 8006836:	f000 faaf 	bl	8006d98 <Error_Handler>
 800683a:	e7f4      	b.n	8006826 <HAL_CAN_RxFifo0MsgPendingCallback+0x12>
    {
        RxMessageObject.Msg[i] = RxData[i];
 800683c:	4a10      	ldr	r2, [pc, #64]	@ (8006880 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800683e:	5cd1      	ldrb	r1, [r2, r3]
 8006840:	f103 0218 	add.w	r2, r3, #24
 8006844:	446a      	add	r2, sp
 8006846:	f802 1c0b 	strb.w	r1, [r2, #-11]
    for(uint8_t i = 0;i<RxMessageObject.MsgLen;++i)
 800684a:	3301      	adds	r3, #1
 800684c:	b2db      	uxtb	r3, r3
 800684e:	4298      	cmp	r0, r3
 8006850:	d8f4      	bhi.n	800683c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
    }
    
    if(ReceiveQueue != NULL)
 8006852:	4b0d      	ldr	r3, [pc, #52]	@ (8006888 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8006854:	6818      	ldr	r0, [r3, #0]
 8006856:	b120      	cbz	r0, 8006862 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
    {
        if(errQUEUE_FULL == xQueueSendFromISR(ReceiveQueue, &RxMessageObject, &xHigherPriorityTaskWoken))
 8006858:	2300      	movs	r3, #0
 800685a:	aa01      	add	r2, sp, #4
 800685c:	a902      	add	r1, sp, #8
 800685e:	f003 fa7b 	bl	8009d58 <xQueueGenericSendFromISR>
        {
            //printf("ERR: CAN queue is full for buffer\r\n");
        }
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8006862:	9b01      	ldr	r3, [sp, #4]
 8006864:	b14b      	cbz	r3, 800687a <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
 8006866:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800686a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800686e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	f3bf 8f6f 	isb	sy
}
 800687a:	b007      	add	sp, #28
 800687c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006880:	20008a10 	.word	0x20008a10
 8006884:	20008a18 	.word	0x20008a18
 8006888:	20008a7c 	.word	0x20008a7c

0800688c <CAN2_SendMsg>:

uint8_t CAN2_SendMsg(uint8_t *msgdata, uint32_t msgID, uint8_t msglen)
{
 800688c:	b500      	push	{lr}
 800688e:	b089      	sub	sp, #36	@ 0x24
	static uint32_t Gu32CurTxMailBox;
	uint8_t tmpdata[8] = {0u};
 8006890:	2300      	movs	r3, #0
 8006892:	9306      	str	r3, [sp, #24]
 8006894:	9307      	str	r3, [sp, #28]
	uint8_t i = 0, res = 0u;
	uint32_t freelevel = 0u;
	CAN_TxHeaderTypeDef TxHeader;
    if(msgID > 0x7ffu)
 8006896:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800689a:	d308      	bcc.n	80068ae <CAN2_SendMsg+0x22>
	{
		TxHeader.IDE = CAN_ID_EXT;
 800689c:	2304      	movs	r3, #4
 800689e:	9302      	str	r3, [sp, #8]
		
		TxHeader.ExtId = msgID;
 80068a0:	9101      	str	r1, [sp, #4]
	else
	{
		TxHeader.IDE = CAN_ID_STD;
		TxHeader.StdId = msgID;
	}
	TxHeader.DLC = msglen;
 80068a2:	9204      	str	r2, [sp, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 80068a4:	2300      	movs	r3, #0
 80068a6:	9303      	str	r3, [sp, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80068a8:	f88d 3014 	strb.w	r3, [sp, #20]

	for(i = 0u; i < msglen; i++) {
 80068ac:	e00c      	b.n	80068c8 <CAN2_SendMsg+0x3c>
		TxHeader.IDE = CAN_ID_STD;
 80068ae:	2300      	movs	r3, #0
 80068b0:	9302      	str	r3, [sp, #8]
		TxHeader.StdId = msgID;
 80068b2:	9100      	str	r1, [sp, #0]
 80068b4:	e7f5      	b.n	80068a2 <CAN2_SendMsg+0x16>
		tmpdata[i] = msgdata[i];
 80068b6:	f810 c003 	ldrb.w	ip, [r0, r3]
 80068ba:	f103 0120 	add.w	r1, r3, #32
 80068be:	4469      	add	r1, sp
 80068c0:	f801 cc08 	strb.w	ip, [r1, #-8]
	for(i = 0u; i < msglen; i++) {
 80068c4:	3301      	adds	r3, #1
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d3f4      	bcc.n	80068b6 <CAN2_SendMsg+0x2a>
	}
	freelevel = HAL_CAN_GetTxMailboxesFreeLevel(&hcan2);
 80068cc:	4809      	ldr	r0, [pc, #36]	@ (80068f4 <CAN2_SendMsg+0x68>)
 80068ce:	f001 f9b0 	bl	8007c32 <HAL_CAN_GetTxMailboxesFreeLevel>
	if(freelevel != 0u) {
 80068d2:	b918      	cbnz	r0, 80068dc <CAN2_SendMsg+0x50>
	uint8_t i = 0, res = 0u;
 80068d4:	2000      	movs	r0, #0
		if(HAL_CAN_AddTxMessage(&hcan2, &TxHeader, tmpdata, &Gu32CurTxMailBox)!=HAL_OK){
            res = 0u;
        }
	}
	return res;
}
 80068d6:	b009      	add	sp, #36	@ 0x24
 80068d8:	f85d fb04 	ldr.w	pc, [sp], #4
		if(HAL_CAN_AddTxMessage(&hcan2, &TxHeader, tmpdata, &Gu32CurTxMailBox)!=HAL_OK){
 80068dc:	4b06      	ldr	r3, [pc, #24]	@ (80068f8 <CAN2_SendMsg+0x6c>)
 80068de:	aa06      	add	r2, sp, #24
 80068e0:	4669      	mov	r1, sp
 80068e2:	4804      	ldr	r0, [pc, #16]	@ (80068f4 <CAN2_SendMsg+0x68>)
 80068e4:	f001 f930 	bl	8007b48 <HAL_CAN_AddTxMessage>
 80068e8:	b908      	cbnz	r0, 80068ee <CAN2_SendMsg+0x62>
		res = 1u;
 80068ea:	2001      	movs	r0, #1
 80068ec:	e7f3      	b.n	80068d6 <CAN2_SendMsg+0x4a>
            res = 0u;
 80068ee:	2000      	movs	r0, #0
 80068f0:	e7f1      	b.n	80068d6 <CAN2_SendMsg+0x4a>
 80068f2:	bf00      	nop
 80068f4:	200089c0 	.word	0x200089c0
 80068f8:	200089b8 	.word	0x200089b8

080068fc <CAN_SendMsg>:

uint8_t CAN_SendMsg(uint8_t *msgdata, uint32_t msgID, uint8_t msglen)
{
 80068fc:	b500      	push	{lr}
 80068fe:	b089      	sub	sp, #36	@ 0x24
	static uint32_t Gu32CurTxMailBox;
	uint8_t tmpdata[8] = {0u};
 8006900:	2300      	movs	r3, #0
 8006902:	9306      	str	r3, [sp, #24]
 8006904:	9307      	str	r3, [sp, #28]
	uint8_t i = 0, res = 0u;
	uint32_t freelevel = 0u;
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.IDE = CAN_ID_STD;
 8006906:	9302      	str	r3, [sp, #8]
	TxHeader.StdId = msgID;
 8006908:	9100      	str	r1, [sp, #0]
	TxHeader.DLC = msglen;
 800690a:	9204      	str	r2, [sp, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 800690c:	9303      	str	r3, [sp, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 800690e:	f88d 3014 	strb.w	r3, [sp, #20]

	for(i = 0u; i < msglen; i++) {
 8006912:	e008      	b.n	8006926 <CAN_SendMsg+0x2a>
		tmpdata[i] = msgdata[i];
 8006914:	f810 c003 	ldrb.w	ip, [r0, r3]
 8006918:	f103 0120 	add.w	r1, r3, #32
 800691c:	4469      	add	r1, sp
 800691e:	f801 cc08 	strb.w	ip, [r1, #-8]
	for(i = 0u; i < msglen; i++) {
 8006922:	3301      	adds	r3, #1
 8006924:	b2db      	uxtb	r3, r3
 8006926:	4293      	cmp	r3, r2
 8006928:	d3f4      	bcc.n	8006914 <CAN_SendMsg+0x18>
	}
	freelevel = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 800692a:	4808      	ldr	r0, [pc, #32]	@ (800694c <CAN_SendMsg+0x50>)
 800692c:	f001 f981 	bl	8007c32 <HAL_CAN_GetTxMailboxesFreeLevel>
	if(freelevel != 0u) {
 8006930:	b918      	cbnz	r0, 800693a <CAN_SendMsg+0x3e>
	uint8_t i = 0, res = 0u;
 8006932:	2000      	movs	r0, #0
		res = 1u;
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, tmpdata, &Gu32CurTxMailBox);
	}
	return res;
}
 8006934:	b009      	add	sp, #36	@ 0x24
 8006936:	f85d fb04 	ldr.w	pc, [sp], #4
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, tmpdata, &Gu32CurTxMailBox);
 800693a:	4b05      	ldr	r3, [pc, #20]	@ (8006950 <CAN_SendMsg+0x54>)
 800693c:	aa06      	add	r2, sp, #24
 800693e:	4669      	mov	r1, sp
 8006940:	4802      	ldr	r0, [pc, #8]	@ (800694c <CAN_SendMsg+0x50>)
 8006942:	f001 f901 	bl	8007b48 <HAL_CAN_AddTxMessage>
		res = 1u;
 8006946:	2001      	movs	r0, #1
 8006948:	e7f4      	b.n	8006934 <CAN_SendMsg+0x38>
 800694a:	bf00      	nop
 800694c:	200089e8 	.word	0x200089e8
 8006950:	200089b4 	.word	0x200089b4

08006954 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_channel1
  */
void MX_DMA_Init(void)
{
 8006954:	b500      	push	{lr}
 8006956:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006958:	4b18      	ldr	r3, [pc, #96]	@ (80069bc <MX_DMA_Init+0x68>)
 800695a:	695a      	ldr	r2, [r3, #20]
 800695c:	f042 0202 	orr.w	r2, r2, #2
 8006960:	615a      	str	r2, [r3, #20]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	9301      	str	r3, [sp, #4]
 800696a:	9b01      	ldr	r3, [sp, #4]

  /* Configure DMA request hdma_memtomem_dma2_channel1 on DMA2_Channel1 */
  hdma_memtomem_dma2_channel1.Instance = DMA2_Channel1;
 800696c:	4814      	ldr	r0, [pc, #80]	@ (80069c0 <MX_DMA_Init+0x6c>)
 800696e:	4b15      	ldr	r3, [pc, #84]	@ (80069c4 <MX_DMA_Init+0x70>)
 8006970:	6003      	str	r3, [r0, #0]
  hdma_memtomem_dma2_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8006972:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006976:	6043      	str	r3, [r0, #4]
  hdma_memtomem_dma2_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8006978:	2340      	movs	r3, #64	@ 0x40
 800697a:	6083      	str	r3, [r0, #8]
  hdma_memtomem_dma2_channel1.Init.MemInc = DMA_MINC_ENABLE;
 800697c:	2380      	movs	r3, #128	@ 0x80
 800697e:	60c3      	str	r3, [r0, #12]
  hdma_memtomem_dma2_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006980:	2300      	movs	r3, #0
 8006982:	6103      	str	r3, [r0, #16]
  hdma_memtomem_dma2_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006984:	6143      	str	r3, [r0, #20]
  hdma_memtomem_dma2_channel1.Init.Mode = DMA_NORMAL;
 8006986:	6183      	str	r3, [r0, #24]
  hdma_memtomem_dma2_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8006988:	61c3      	str	r3, [r0, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma2_channel1) != HAL_OK)
 800698a:	f001 fbf5 	bl	8008178 <HAL_DMA_Init>
 800698e:	b990      	cbnz	r0, 80069b6 <MX_DMA_Init+0x62>
    Error_Handler();
  }

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 5, 0);
 8006990:	2200      	movs	r2, #0
 8006992:	2105      	movs	r1, #5
 8006994:	203a      	movs	r0, #58	@ 0x3a
 8006996:	f001 fba7 	bl	80080e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 800699a:	203a      	movs	r0, #58	@ 0x3a
 800699c:	f001 fbb4 	bl	8008108 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 80069a0:	2200      	movs	r2, #0
 80069a2:	2105      	movs	r1, #5
 80069a4:	203c      	movs	r0, #60	@ 0x3c
 80069a6:	f001 fb9f 	bl	80080e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80069aa:	203c      	movs	r0, #60	@ 0x3c
 80069ac:	f001 fbac 	bl	8008108 <HAL_NVIC_EnableIRQ>

}
 80069b0:	b003      	add	sp, #12
 80069b2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80069b6:	f000 f9ef 	bl	8006d98 <Error_Handler>
 80069ba:	e7e9      	b.n	8006990 <MX_DMA_Init+0x3c>
 80069bc:	40021000 	.word	0x40021000
 80069c0:	20008a34 	.word	0x20008a34
 80069c4:	40020408 	.word	0x40020408

080069c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80069c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80069ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80069ce:	f003 f93c 	bl	8009c4a <osDelay>
 80069d2:	e7fa      	b.n	80069ca <StartDefaultTask+0x2>

080069d4 <heartbeat_task>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void heartbeat_task(void const * argument)
{
 80069d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN heartbeat_task */
    UserTimer_Initial();
 80069d6:	f004 fc29 	bl	800b22c <UserTimer_Initial>
    printf("heartbeat_task\r\n");
 80069da:	4803      	ldr	r0, [pc, #12]	@ (80069e8 <heartbeat_task+0x14>)
 80069dc:	f005 fc36 	bl	800c24c <puts>
  /* Infinite loop */
  for(;;)
  {
      UserTimer_Handler();
 80069e0:	f004 fc4c 	bl	800b27c <UserTimer_Handler>
 80069e4:	e7fc      	b.n	80069e0 <heartbeat_task+0xc>
 80069e6:	bf00      	nop
 80069e8:	08011088 	.word	0x08011088

080069ec <task0_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_can_task */
void task0_task(void const * argument)
{
 80069ec:	b508      	push	{r3, lr}
    (void)*argument;
    for(;;)
    {
        vTaskDelay(pdMS_TO_TICKS(1));
 80069ee:	2001      	movs	r0, #1
 80069f0:	f003 fd70 	bl	800a4d4 <vTaskDelay>
 80069f4:	e7fb      	b.n	80069ee <task0_task+0x2>

080069f6 <task1_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gpio_task */
void task1_task(void const * argument)
{
 80069f6:	b508      	push	{r3, lr}
    (void)*argument;
    for(;;)
    {
			//printf("task1\r\n");
        ADC_SamplingProcess();
 80069f8:	f7fa fb0a 	bl	8001010 <ADC_SamplingProcess>
        vTaskDelay(pdMS_TO_TICKS(5));
 80069fc:	2005      	movs	r0, #5
 80069fe:	f003 fd69 	bl	800a4d4 <vTaskDelay>
 8006a02:	e7f9      	b.n	80069f8 <task1_task+0x2>

08006a04 <task2_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_button_task */
void task2_task(void const * argument)
{
 8006a04:	b508      	push	{r3, lr}
 8006a06:	e00a      	b.n	8006a1e <task2_task+0x1a>
        // Key_Rotary_CheckProcess();
        Key_CheckProcess();
        if (key_menu_cnt != GetMenuIndex() || 
            key_item_cnt != GetItemIndex() || 
            key_value_cnt != GetItemValue(GetMenuIndex(), GetItemIndex(), 0)) {
            SaveItemValue(key_menu_cnt,key_item_cnt,key_value_cnt);
 8006a08:	4b13      	ldr	r3, [pc, #76]	@ (8006a58 <task2_task+0x54>)
 8006a0a:	881a      	ldrh	r2, [r3, #0]
 8006a0c:	4b13      	ldr	r3, [pc, #76]	@ (8006a5c <task2_task+0x58>)
 8006a0e:	7819      	ldrb	r1, [r3, #0]
 8006a10:	4b13      	ldr	r3, [pc, #76]	@ (8006a60 <task2_task+0x5c>)
 8006a12:	7818      	ldrb	r0, [r3, #0]
 8006a14:	f7ff f920 	bl	8005c58 <SaveItemValue>
        }   
        vTaskDelay(pdMS_TO_TICKS(10));
 8006a18:	200a      	movs	r0, #10
 8006a1a:	f003 fd5b 	bl	800a4d4 <vTaskDelay>
        Key_CheckProcess();
 8006a1e:	f7fc fd59 	bl	80034d4 <Key_CheckProcess>
        if (key_menu_cnt != GetMenuIndex() || 
 8006a22:	f7fc ff91 	bl	8003948 <GetMenuIndex>
 8006a26:	4b0e      	ldr	r3, [pc, #56]	@ (8006a60 <task2_task+0x5c>)
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	4298      	cmp	r0, r3
 8006a2c:	d1ec      	bne.n	8006a08 <task2_task+0x4>
            key_item_cnt != GetItemIndex() || 
 8006a2e:	f7fc ff91 	bl	8003954 <GetItemIndex>
 8006a32:	4b0a      	ldr	r3, [pc, #40]	@ (8006a5c <task2_task+0x58>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
        if (key_menu_cnt != GetMenuIndex() || 
 8006a36:	4298      	cmp	r0, r3
 8006a38:	d1e6      	bne.n	8006a08 <task2_task+0x4>
            key_value_cnt != GetItemValue(GetMenuIndex(), GetItemIndex(), 0)) {
 8006a3a:	4b07      	ldr	r3, [pc, #28]	@ (8006a58 <task2_task+0x54>)
 8006a3c:	881d      	ldrh	r5, [r3, #0]
 8006a3e:	f7fc ff83 	bl	8003948 <GetMenuIndex>
 8006a42:	4604      	mov	r4, r0
 8006a44:	f7fc ff86 	bl	8003954 <GetItemIndex>
 8006a48:	4601      	mov	r1, r0
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f7fe fdcb 	bl	80055e8 <GetItemValue>
            key_item_cnt != GetItemIndex() || 
 8006a52:	4285      	cmp	r5, r0
 8006a54:	d1d8      	bne.n	8006a08 <task2_task+0x4>
 8006a56:	e7df      	b.n	8006a18 <task2_task+0x14>
 8006a58:	20008566 	.word	0x20008566
 8006a5c:	20008568 	.word	0x20008568
 8006a60:	20008569 	.word	0x20008569

08006a64 <task3_task>:
*/
/* USER CODE END Header_menu_task */
extern uint8_t Can_Send_Sts;

void task3_task(void const * argument)
{
 8006a64:	b570      	push	{r4, r5, r6, lr}
 8006a66:	e00f      	b.n	8006a88 <task3_task+0x24>
        {
            if(Last_CAN_SendSts != Can_Send_Sts)
            {
                Last_CAN_SendSts = Can_Send_Sts;
            }
            if (v_menu != s_menu || v_item != s_item || v_value != s_value) {
 8006a68:	4b22      	ldr	r3, [pc, #136]	@ (8006af4 <task3_task+0x90>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	42ab      	cmp	r3, r5
 8006a6e:	d126      	bne.n	8006abe <task3_task+0x5a>
 8006a70:	4b21      	ldr	r3, [pc, #132]	@ (8006af8 <task3_task+0x94>)
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d122      	bne.n	8006abe <task3_task+0x5a>
 8006a78:	e003      	b.n	8006a82 <task3_task+0x1e>
                }
            }
        }
        else
        {
            if(Last_CAN_SendSts != Can_Send_Sts)
 8006a7a:	4a20      	ldr	r2, [pc, #128]	@ (8006afc <task3_task+0x98>)
 8006a7c:	7812      	ldrb	r2, [r2, #0]
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d12a      	bne.n	8006ad8 <task3_task+0x74>
                s_menu = 0xFF;
                s_item = 0xFF;
                s_value = 0xFFFF;
            }
        }
        vTaskDelay(pdMS_TO_TICKS(20));
 8006a82:	2014      	movs	r0, #20
 8006a84:	f003 fd26 	bl	800a4d4 <vTaskDelay>
        v_menu = GetMenuIndex();
 8006a88:	f7fc ff5e 	bl	8003948 <GetMenuIndex>
 8006a8c:	4604      	mov	r4, r0
        v_item = GetItemIndex();
 8006a8e:	f7fc ff61 	bl	8003954 <GetItemIndex>
 8006a92:	4605      	mov	r5, r0
        v_value = GetItemValue(v_menu, v_item, 0);
 8006a94:	2200      	movs	r2, #0
 8006a96:	4601      	mov	r1, r0
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f7fe fda5 	bl	80055e8 <GetItemValue>
        if(Can_Send_Sts == E_CANSEND_OPEN)
 8006a9e:	4b18      	ldr	r3, [pc, #96]	@ (8006b00 <task3_task+0x9c>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1e9      	bne.n	8006a7a <task3_task+0x16>
 8006aa6:	4606      	mov	r6, r0
 8006aa8:	b202      	sxth	r2, r0
            if(Last_CAN_SendSts != Can_Send_Sts)
 8006aaa:	4914      	ldr	r1, [pc, #80]	@ (8006afc <task3_task+0x98>)
 8006aac:	7809      	ldrb	r1, [r1, #0]
 8006aae:	428b      	cmp	r3, r1
 8006ab0:	d001      	beq.n	8006ab6 <task3_task+0x52>
                Last_CAN_SendSts = Can_Send_Sts;
 8006ab2:	4912      	ldr	r1, [pc, #72]	@ (8006afc <task3_task+0x98>)
 8006ab4:	700b      	strb	r3, [r1, #0]
            if (v_menu != s_menu || v_item != s_item || v_value != s_value) {
 8006ab6:	4b13      	ldr	r3, [pc, #76]	@ (8006b04 <task3_task+0xa0>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	42a3      	cmp	r3, r4
 8006abc:	d0d4      	beq.n	8006a68 <task3_task+0x4>
                if (LCD_Menu_Display(v_menu, v_item, v_value) == DISPLAY_SUCCESS) {
 8006abe:	4629      	mov	r1, r5
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f7fc ff99 	bl	80039f8 <LCD_Menu_Display>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d1db      	bne.n	8006a82 <task3_task+0x1e>
                    s_menu = v_menu;
 8006aca:	4b0e      	ldr	r3, [pc, #56]	@ (8006b04 <task3_task+0xa0>)
 8006acc:	701c      	strb	r4, [r3, #0]
                    s_item = v_item;
 8006ace:	4b09      	ldr	r3, [pc, #36]	@ (8006af4 <task3_task+0x90>)
 8006ad0:	701d      	strb	r5, [r3, #0]
                    s_value = v_value;
 8006ad2:	4b09      	ldr	r3, [pc, #36]	@ (8006af8 <task3_task+0x94>)
 8006ad4:	801e      	strh	r6, [r3, #0]
 8006ad6:	e7d4      	b.n	8006a82 <task3_task+0x1e>
                Last_CAN_SendSts = Can_Send_Sts;
 8006ad8:	4a08      	ldr	r2, [pc, #32]	@ (8006afc <task3_task+0x98>)
 8006ada:	7013      	strb	r3, [r2, #0]
                LCD_Show_CANSendClose();
 8006adc:	f7fc ffa2 	bl	8003a24 <LCD_Show_CANSendClose>
                s_menu = 0xFF;
 8006ae0:	23ff      	movs	r3, #255	@ 0xff
 8006ae2:	4a08      	ldr	r2, [pc, #32]	@ (8006b04 <task3_task+0xa0>)
 8006ae4:	7013      	strb	r3, [r2, #0]
                s_item = 0xFF;
 8006ae6:	4a03      	ldr	r2, [pc, #12]	@ (8006af4 <task3_task+0x90>)
 8006ae8:	7013      	strb	r3, [r2, #0]
                s_value = 0xFFFF;
 8006aea:	4b03      	ldr	r3, [pc, #12]	@ (8006af8 <task3_task+0x94>)
 8006aec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006af0:	801a      	strh	r2, [r3, #0]
 8006af2:	e7c6      	b.n	8006a82 <task3_task+0x1e>
 8006af4:	20008a7a 	.word	0x20008a7a
 8006af8:	20008a78 	.word	0x20008a78
 8006afc:	20008a7b 	.word	0x20008a7b
 8006b00:	20008565 	.word	0x20008565
 8006b04:	20008078 	.word	0x20008078

08006b08 <vApplicationTickHook>:
}
 8006b08:	4770      	bx	lr

08006b0a <vApplicationStackOverflowHook>:
}
 8006b0a:	4770      	bx	lr

08006b0c <vApplicationMallocFailedHook>:
}
 8006b0c:	4770      	bx	lr
	...

08006b10 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8006b10:	4b03      	ldr	r3, [pc, #12]	@ (8006b20 <vApplicationGetIdleTaskMemory+0x10>)
 8006b12:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8006b14:	4b03      	ldr	r3, [pc, #12]	@ (8006b24 <vApplicationGetIdleTaskMemory+0x14>)
 8006b16:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006b18:	2380      	movs	r3, #128	@ 0x80
 8006b1a:	6013      	str	r3, [r2, #0]
}
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	20008c80 	.word	0x20008c80
 8006b24:	20008a80 	.word	0x20008a80

08006b28 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8006b28:	b510      	push	{r4, lr}
 8006b2a:	b0b2      	sub	sp, #200	@ 0xc8
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8006b2c:	4c3f      	ldr	r4, [pc, #252]	@ (8006c2c <MX_FREERTOS_Init+0x104>)
 8006b2e:	f10d 0cac 	add.w	ip, sp, #172	@ 0xac
 8006b32:	46a6      	mov	lr, r4
 8006b34:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006b38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006b3c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8006b40:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8006b44:	2100      	movs	r1, #0
 8006b46:	a82b      	add	r0, sp, #172	@ 0xac
 8006b48:	f003 f84c 	bl	8009be4 <osThreadCreate>
 8006b4c:	4b38      	ldr	r3, [pc, #224]	@ (8006c30 <MX_FREERTOS_Init+0x108>)
 8006b4e:	6018      	str	r0, [r3, #0]
  osThreadDef(heartbeattask, heartbeat_task, osPriorityIdle, 0, 128);
 8006b50:	f10d 0c90 	add.w	ip, sp, #144	@ 0x90
 8006b54:	f104 0e1c 	add.w	lr, r4, #28
 8006b58:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006b5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006b60:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8006b64:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  heartbeattaskHandle = osThreadCreate(osThread(heartbeattask), NULL);
 8006b68:	2100      	movs	r1, #0
 8006b6a:	a824      	add	r0, sp, #144	@ 0x90
 8006b6c:	f003 f83a 	bl	8009be4 <osThreadCreate>
 8006b70:	4b30      	ldr	r3, [pc, #192]	@ (8006c34 <MX_FREERTOS_Init+0x10c>)
 8006b72:	6018      	str	r0, [r3, #0]
  osThreadDef(task0task, task0_task, osPriorityIdle, 0, 128);
 8006b74:	f10d 0c74 	add.w	ip, sp, #116	@ 0x74
 8006b78:	f104 0e38 	add.w	lr, r4, #56	@ 0x38
 8006b7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006b80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006b84:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8006b88:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  task0Handle = osThreadCreate(osThread(task0task), NULL);
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	a81d      	add	r0, sp, #116	@ 0x74
 8006b90:	f003 f828 	bl	8009be4 <osThreadCreate>
 8006b94:	4b28      	ldr	r3, [pc, #160]	@ (8006c38 <MX_FREERTOS_Init+0x110>)
 8006b96:	6018      	str	r0, [r3, #0]
  osThreadDef(task1task, task1_task, osPriorityIdle, 0, 128);
 8006b98:	f10d 0c58 	add.w	ip, sp, #88	@ 0x58
 8006b9c:	f104 0e54 	add.w	lr, r4, #84	@ 0x54
 8006ba0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006ba4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006ba8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8006bac:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1task), NULL);
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	a816      	add	r0, sp, #88	@ 0x58
 8006bb4:	f003 f816 	bl	8009be4 <osThreadCreate>
 8006bb8:	4b20      	ldr	r3, [pc, #128]	@ (8006c3c <MX_FREERTOS_Init+0x114>)
 8006bba:	6018      	str	r0, [r3, #0]
  osThreadDef(task2task, task2_task, osPriorityIdle, 0, 128);
 8006bbc:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8006bc0:	f104 0e70 	add.w	lr, r4, #112	@ 0x70
 8006bc4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006bc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006bcc:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8006bd0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2task), NULL);
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	a80f      	add	r0, sp, #60	@ 0x3c
 8006bd8:	f003 f804 	bl	8009be4 <osThreadCreate>
 8006bdc:	4b18      	ldr	r3, [pc, #96]	@ (8006c40 <MX_FREERTOS_Init+0x118>)
 8006bde:	6018      	str	r0, [r3, #0]
  osThreadDef(task3task, task3_task, osPriorityIdle, 0, 128);
 8006be0:	f10d 0c20 	add.w	ip, sp, #32
 8006be4:	f104 0e8c 	add.w	lr, r4, #140	@ 0x8c
 8006be8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006bec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006bf0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8006bf4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3task), NULL);
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	a808      	add	r0, sp, #32
 8006bfc:	f002 fff2 	bl	8009be4 <osThreadCreate>
 8006c00:	4b10      	ldr	r3, [pc, #64]	@ (8006c44 <MX_FREERTOS_Init+0x11c>)
 8006c02:	6018      	str	r0, [r3, #0]
  osThreadDef(cantransmittask, CanTransmitFunction, osPriorityIdle, 0, 128);
 8006c04:	f10d 0e04 	add.w	lr, sp, #4
 8006c08:	f104 0ca8 	add.w	ip, r4, #168	@ 0xa8
 8006c0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006c10:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8006c14:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8006c18:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  CanTransmitHandle = osThreadCreate(osThread(cantransmittask), NULL);
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	a801      	add	r0, sp, #4
 8006c20:	f002 ffe0 	bl	8009be4 <osThreadCreate>
 8006c24:	4b08      	ldr	r3, [pc, #32]	@ (8006c48 <MX_FREERTOS_Init+0x120>)
 8006c26:	6018      	str	r0, [r3, #0]
}
 8006c28:	b032      	add	sp, #200	@ 0xc8
 8006c2a:	bd10      	pop	{r4, pc}
 8006c2c:	0800fae0 	.word	0x0800fae0
 8006c30:	20008cdc 	.word	0x20008cdc
 8006c34:	20008cf4 	.word	0x20008cf4
 8006c38:	20008cf0 	.word	0x20008cf0
 8006c3c:	20008cec 	.word	0x20008cec
 8006c40:	20008ce8 	.word	0x20008ce8
 8006c44:	20008ce4 	.word	0x20008ce4
 8006c48:	20008ce0 	.word	0x20008ce0

08006c4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c50:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c52:	2500      	movs	r5, #0
 8006c54:	9504      	str	r5, [sp, #16]
 8006c56:	9505      	str	r5, [sp, #20]
 8006c58:	9506      	str	r5, [sp, #24]
 8006c5a:	9507      	str	r5, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c5c:	4b42      	ldr	r3, [pc, #264]	@ (8006d68 <MX_GPIO_Init+0x11c>)
 8006c5e:	699a      	ldr	r2, [r3, #24]
 8006c60:	f042 0210 	orr.w	r2, r2, #16
 8006c64:	619a      	str	r2, [r3, #24]
 8006c66:	699a      	ldr	r2, [r3, #24]
 8006c68:	f002 0210 	and.w	r2, r2, #16
 8006c6c:	9200      	str	r2, [sp, #0]
 8006c6e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c70:	699a      	ldr	r2, [r3, #24]
 8006c72:	f042 0220 	orr.w	r2, r2, #32
 8006c76:	619a      	str	r2, [r3, #24]
 8006c78:	699a      	ldr	r2, [r3, #24]
 8006c7a:	f002 0220 	and.w	r2, r2, #32
 8006c7e:	9201      	str	r2, [sp, #4]
 8006c80:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c82:	699a      	ldr	r2, [r3, #24]
 8006c84:	f042 0204 	orr.w	r2, r2, #4
 8006c88:	619a      	str	r2, [r3, #24]
 8006c8a:	699a      	ldr	r2, [r3, #24]
 8006c8c:	f002 0204 	and.w	r2, r2, #4
 8006c90:	9202      	str	r2, [sp, #8]
 8006c92:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c94:	699a      	ldr	r2, [r3, #24]
 8006c96:	f042 0208 	orr.w	r2, r2, #8
 8006c9a:	619a      	str	r2, [r3, #24]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	f003 0308 	and.w	r3, r3, #8
 8006ca2:	9303      	str	r3, [sp, #12]
 8006ca4:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_SET);
 8006ca6:	f8df 90c4 	ldr.w	r9, [pc, #196]	@ 8006d6c <MX_GPIO_Init+0x120>
 8006caa:	2201      	movs	r2, #1
 8006cac:	2148      	movs	r1, #72	@ 0x48
 8006cae:	4648      	mov	r0, r9
 8006cb0:	f001 fe44 	bl	800893c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8006cb4:	4f2e      	ldr	r7, [pc, #184]	@ (8006d70 <MX_GPIO_Init+0x124>)
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	21f1      	movs	r1, #241	@ 0xf1
 8006cba:	4638      	mov	r0, r7
 8006cbc:	f001 fe3e 	bl	800893c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8006cc0:	4e2c      	ldr	r6, [pc, #176]	@ (8006d74 <MX_GPIO_Init+0x128>)
 8006cc2:	462a      	mov	r2, r5
 8006cc4:	210a      	movs	r1, #10
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f001 fe38 	bl	800893c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_SET);
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f44f 410c 	mov.w	r1, #35840	@ 0x8c00
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f001 fe32 	bl	800893c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006cd8:	462a      	mov	r2, r5
 8006cda:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006cde:	4638      	mov	r0, r7
 8006ce0:	f001 fe2c 	bl	800893c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8006ce4:	f44f 530e 	mov.w	r3, #9088	@ 0x2380
 8006ce8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cea:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cec:	2401      	movs	r4, #1
 8006cee:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cf0:	a904      	add	r1, sp, #16
 8006cf2:	4648      	mov	r0, r9
 8006cf4:	f001 fd14 	bl	8008720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8006cf8:	2348      	movs	r3, #72	@ 0x48
 8006cfa:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cfc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cfe:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006d00:	f04f 0803 	mov.w	r8, #3
 8006d04:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d08:	a904      	add	r1, sp, #16
 8006d0a:	4648      	mov	r0, r9
 8006d0c:	f001 fd08 	bl	8008720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA6
                           PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8006d10:	f240 63f1 	movw	r3, #1777	@ 0x6f1
 8006d14:	9304      	str	r3, [sp, #16]
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d16:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d18:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006d1a:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d1e:	a904      	add	r1, sp, #16
 8006d20:	4638      	mov	r0, r7
 8006d22:	f001 fcfd 	bl	8008720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_15;
 8006d26:	f248 1302 	movw	r3, #33026	@ 0x8102
 8006d2a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d2c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d2e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d30:	a904      	add	r1, sp, #16
 8006d32:	4638      	mov	r0, r7
 8006d34:	f001 fcf4 	bl	8008720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB10 PB11 PB15
                           PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15
 8006d38:	f648 430a 	movw	r3, #35850	@ 0x8c0a
 8006d3c:	9304      	str	r3, [sp, #16]
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d3e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d40:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006d42:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d46:	a904      	add	r1, sp, #16
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f001 fce9 	bl	8008720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8006d4e:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 8006d52:	9304      	str	r3, [sp, #16]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d54:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d56:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d58:	a904      	add	r1, sp, #16
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	f001 fce0 	bl	8008720 <HAL_GPIO_Init>

}
 8006d60:	b009      	add	sp, #36	@ 0x24
 8006d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d66:	bf00      	nop
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	40011000 	.word	0x40011000
 8006d70:	40010800 	.word	0x40010800
 8006d74:	40010c00 	.word	0x40010c00

08006d78 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8006d78:	b500      	push	{lr}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	9001      	str	r0, [sp, #4]
    HAL_UART_Transmit(&huart4 , (uint8_t *)&ch, 1, 0xFFFF);
 8006d7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d82:	2201      	movs	r2, #1
 8006d84:	a901      	add	r1, sp, #4
 8006d86:	4803      	ldr	r0, [pc, #12]	@ (8006d94 <__io_putchar+0x1c>)
 8006d88:	f002 fbfe 	bl	8009588 <HAL_UART_Transmit>
    return ch;
}
 8006d8c:	9801      	ldr	r0, [sp, #4]
 8006d8e:	b003      	add	sp, #12
 8006d90:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d94:	20008f14 	.word	0x20008f14

08006d98 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006d98:	b672      	cpsid	i
 8006d9a:	e7fe      	b.n	8006d9a <Error_Handler+0x2>

08006d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006d9c:	b500      	push	{lr}
 8006d9e:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006da0:	2238      	movs	r2, #56	@ 0x38
 8006da2:	2100      	movs	r1, #0
 8006da4:	eb0d 0002 	add.w	r0, sp, r2
 8006da8:	f005 fb52 	bl	800c450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006dac:	2100      	movs	r1, #0
 8006dae:	9109      	str	r1, [sp, #36]	@ 0x24
 8006db0:	910a      	str	r1, [sp, #40]	@ 0x28
 8006db2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006db4:	910c      	str	r1, [sp, #48]	@ 0x30
 8006db6:	910d      	str	r1, [sp, #52]	@ 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006db8:	2220      	movs	r2, #32
 8006dba:	a801      	add	r0, sp, #4
 8006dbc:	f005 fb48 	bl	800c450 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006dc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006dc8:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006dca:	9213      	str	r2, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006dcc:	2202      	movs	r2, #2
 8006dce:	9216      	str	r2, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006dd0:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006dd2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8006dd6:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006dd8:	a80e      	add	r0, sp, #56	@ 0x38
 8006dda:	f001 fdcb 	bl	8008974 <HAL_RCC_OscConfig>
 8006dde:	b9e0      	cbnz	r0, 8006e1a <SystemClock_Config+0x7e>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006de0:	230f      	movs	r3, #15
 8006de2:	9309      	str	r3, [sp, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006de4:	2102      	movs	r1, #2
 8006de6:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006de8:	2300      	movs	r3, #0
 8006dea:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006dec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006df0:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006df2:	930d      	str	r3, [sp, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006df4:	a809      	add	r0, sp, #36	@ 0x24
 8006df6:	f002 f895 	bl	8008f24 <HAL_RCC_ClockConfig>
 8006dfa:	b980      	cbnz	r0, 8006e1e <SystemClock_Config+0x82>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8006e00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e04:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e06:	a801      	add	r0, sp, #4
 8006e08:	f002 f968 	bl	80090dc <HAL_RCCEx_PeriphCLKConfig>
 8006e0c:	b948      	cbnz	r0, 8006e22 <SystemClock_Config+0x86>
    Error_Handler();
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8006e0e:	4b06      	ldr	r3, [pc, #24]	@ (8006e28 <SystemClock_Config+0x8c>)
 8006e10:	2201      	movs	r2, #1
 8006e12:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8006e14:	b01d      	add	sp, #116	@ 0x74
 8006e16:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006e1a:	f7ff ffbd 	bl	8006d98 <Error_Handler>
    Error_Handler();
 8006e1e:	f7ff ffbb 	bl	8006d98 <Error_Handler>
    Error_Handler();
 8006e22:	f7ff ffb9 	bl	8006d98 <Error_Handler>
 8006e26:	bf00      	nop
 8006e28:	42420000 	.word	0x42420000

08006e2c <main>:
{
 8006e2c:	b508      	push	{r3, lr}
  HAL_Init();
 8006e2e:	f000 fae9 	bl	8007404 <HAL_Init>
  SystemClock_Config();
 8006e32:	f7ff ffb3 	bl	8006d9c <SystemClock_Config>
  MX_GPIO_Init();
 8006e36:	f7ff ff09 	bl	8006c4c <MX_GPIO_Init>
  MX_DMA_Init();
 8006e3a:	f7ff fd8b 	bl	8006954 <MX_DMA_Init>
  MX_ADC1_Init();
 8006e3e:	f7ff fb31 	bl	80064a4 <MX_ADC1_Init>
  MX_CAN1_Init();
 8006e42:	f7ff fbd3 	bl	80065ec <MX_CAN1_Init>
  MX_CAN2_Init();
 8006e46:	f7ff fc11 	bl	800666c <MX_CAN2_Init>
  MX_UART4_Init();
 8006e4a:	f000 f8e3 	bl	8007014 <MX_UART4_Init>
  MX_UART5_Init();
 8006e4e:	f000 f8fb 	bl	8007048 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8006e52:	f000 f913 	bl	800707c <MX_USART2_UART_Init>
  App_Init(); //DBC CAN
 8006e56:	f7fa f961 	bl	800111c <App_Init>
  lcd128_Init(); //LCD
 8006e5a:	f7fc fe11 	bl	8003a80 <lcd128_Init>
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE); //ʹ��IDLE�ж�
 8006e5e:	4809      	ldr	r0, [pc, #36]	@ (8006e84 <main+0x58>)
 8006e60:	6802      	ldr	r2, [r0, #0]
 8006e62:	68d3      	ldr	r3, [r2, #12]
 8006e64:	f043 0310 	orr.w	r3, r3, #16
 8006e68:	60d3      	str	r3, [r2, #12]
  HAL_UART_Receive_DMA(&huart4, usart4_rx_buffer_data, 256);
 8006e6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e6e:	4906      	ldr	r1, [pc, #24]	@ (8006e88 <main+0x5c>)
 8006e70:	f002 fe9a 	bl	8009ba8 <HAL_UART_Receive_DMA>
  CanCcl_vPoweronInit(); //CAN
 8006e74:	f003 ff04 	bl	800ac80 <CanCcl_vPoweronInit>
  MX_FREERTOS_Init();
 8006e78:	f7ff fe56 	bl	8006b28 <MX_FREERTOS_Init>
  osKernelStart();
 8006e7c:	f002 fead 	bl	8009bda <osKernelStart>
 8006e80:	e7fe      	b.n	8006e80 <main+0x54>
 8006e82:	bf00      	nop
 8006e84:	20008f14 	.word	0x20008f14
 8006e88:	20008cf8 	.word	0x20008cf8

08006e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006e8c:	b500      	push	{lr}
 8006e8e:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006e90:	4b11      	ldr	r3, [pc, #68]	@ (8006ed8 <HAL_MspInit+0x4c>)
 8006e92:	699a      	ldr	r2, [r3, #24]
 8006e94:	f042 0201 	orr.w	r2, r2, #1
 8006e98:	619a      	str	r2, [r3, #24]
 8006e9a:	699a      	ldr	r2, [r3, #24]
 8006e9c:	f002 0201 	and.w	r2, r2, #1
 8006ea0:	9200      	str	r2, [sp, #0]
 8006ea2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ea4:	69da      	ldr	r2, [r3, #28]
 8006ea6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006eaa:	61da      	str	r2, [r3, #28]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eb2:	9301      	str	r3, [sp, #4]
 8006eb4:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	210f      	movs	r1, #15
 8006eba:	f06f 0001 	mvn.w	r0, #1
 8006ebe:	f001 f913 	bl	80080e8 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8006ec2:	4a06      	ldr	r2, [pc, #24]	@ (8006edc <HAL_MspInit+0x50>)
 8006ec4:	6853      	ldr	r3, [r2, #4]
 8006ec6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8006eca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ece:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ed0:	b003      	add	sp, #12
 8006ed2:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ed6:	bf00      	nop
 8006ed8:	40021000 	.word	0x40021000
 8006edc:	40010000 	.word	0x40010000

08006ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006ee0:	e7fe      	b.n	8006ee0 <NMI_Handler>

08006ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006ee2:	e7fe      	b.n	8006ee2 <HardFault_Handler>

08006ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006ee4:	e7fe      	b.n	8006ee4 <MemManage_Handler>

08006ee6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006ee6:	e7fe      	b.n	8006ee6 <BusFault_Handler>

08006ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006ee8:	e7fe      	b.n	8006ee8 <UsageFault_Handler>

08006eea <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006eea:	4770      	bx	lr

08006eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006eec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006eee:	f000 fa9b 	bl	8007428 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006ef2:	f003 fbb5 	bl	800a660 <xTaskGetSchedulerState>
 8006ef6:	2801      	cmp	r0, #1
 8006ef8:	d100      	bne.n	8006efc <SysTick_Handler+0x10>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006efa:	bd08      	pop	{r3, pc}
  xPortSysTickHandler();
 8006efc:	f003 fcd2 	bl	800a8a4 <xPortSysTickHandler>
}
 8006f00:	e7fb      	b.n	8006efa <SysTick_Handler+0xe>
	...

08006f04 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006f04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006f06:	4802      	ldr	r0, [pc, #8]	@ (8006f10 <CAN1_RX0_IRQHandler+0xc>)
 8006f08:	f000 ff7f 	bl	8007e0a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006f0c:	bd08      	pop	{r3, pc}
 8006f0e:	bf00      	nop
 8006f10:	200089e8 	.word	0x200089e8

08006f14 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006f14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006f16:	4802      	ldr	r0, [pc, #8]	@ (8006f20 <UART4_IRQHandler+0xc>)
 8006f18:	f002 fc56 	bl	80097c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006f1c:	bd08      	pop	{r3, pc}
 8006f1e:	bf00      	nop
 8006f20:	20008f14 	.word	0x20008f14

08006f24 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8006f24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8006f26:	4802      	ldr	r0, [pc, #8]	@ (8006f30 <DMA2_Channel3_IRQHandler+0xc>)
 8006f28:	f001 fa84 	bl	8008434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8006f2c:	bd08      	pop	{r3, pc}
 8006f2e:	bf00      	nop
 8006f30:	20008e40 	.word	0x20008e40

08006f34 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8006f34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8006f36:	4802      	ldr	r0, [pc, #8]	@ (8006f40 <DMA2_Channel5_IRQHandler+0xc>)
 8006f38:	f001 fa7c 	bl	8008434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8006f3c:	bd08      	pop	{r3, pc}
 8006f3e:	bf00      	nop
 8006f40:	20008dfc 	.word	0x20008dfc

08006f44 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8006f44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8006f46:	4802      	ldr	r0, [pc, #8]	@ (8006f50 <CAN2_RX0_IRQHandler+0xc>)
 8006f48:	f000 ff5f 	bl	8007e0a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8006f4c:	bd08      	pop	{r3, pc}
 8006f4e:	bf00      	nop
 8006f50:	200089c0 	.word	0x200089c0

08006f54 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8006f54:	2001      	movs	r0, #1
 8006f56:	4770      	bx	lr

08006f58 <_kill>:

int _kill(int pid, int sig)
{
 8006f58:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006f5a:	f005 facb 	bl	800c4f4 <__errno>
 8006f5e:	2316      	movs	r3, #22
 8006f60:	6003      	str	r3, [r0, #0]
  return -1;
}
 8006f62:	f04f 30ff 	mov.w	r0, #4294967295
 8006f66:	bd08      	pop	{r3, pc}

08006f68 <_exit>:

void _exit (int status)
{
 8006f68:	b508      	push	{r3, lr}
  _kill(status, -1);
 8006f6a:	f04f 31ff 	mov.w	r1, #4294967295
 8006f6e:	f7ff fff3 	bl	8006f58 <_kill>
 8006f72:	e7fe      	b.n	8006f72 <_exit+0xa>

08006f74 <_read>:
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006f74:	b570      	push	{r4, r5, r6, lr}
 8006f76:	460c      	mov	r4, r1
 8006f78:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f7a:	2500      	movs	r5, #0
 8006f7c:	e006      	b.n	8006f8c <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8006f7e:	f3af 8000 	nop.w
 8006f82:	4621      	mov	r1, r4
 8006f84:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f88:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8006f8a:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f8c:	42b5      	cmp	r5, r6
 8006f8e:	dbf6      	blt.n	8006f7e <_read+0xa>
  }

  return len;
}
 8006f90:	4630      	mov	r0, r6
 8006f92:	bd70      	pop	{r4, r5, r6, pc}

08006f94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006f94:	b570      	push	{r4, r5, r6, lr}
 8006f96:	460c      	mov	r4, r1
 8006f98:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f9a:	2500      	movs	r5, #0
 8006f9c:	e004      	b.n	8006fa8 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8006f9e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006fa2:	f7ff fee9 	bl	8006d78 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006fa6:	3501      	adds	r5, #1
 8006fa8:	42b5      	cmp	r5, r6
 8006faa:	dbf8      	blt.n	8006f9e <_write+0xa>
  }
  return len;
}
 8006fac:	4630      	mov	r0, r6
 8006fae:	bd70      	pop	{r4, r5, r6, pc}

08006fb0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8006fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb4:	4770      	bx	lr

08006fb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8006fb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006fba:	604b      	str	r3, [r1, #4]
  return 0;
}
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	4770      	bx	lr

08006fc0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8006fc0:	2001      	movs	r0, #1
 8006fc2:	4770      	bx	lr

08006fc4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	4770      	bx	lr

08006fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006fc8:	b510      	push	{r4, lr}
 8006fca:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8007000 <_sbrk+0x38>)
 8006fce:	490d      	ldr	r1, [pc, #52]	@ (8007004 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006fd0:	480d      	ldr	r0, [pc, #52]	@ (8007008 <_sbrk+0x40>)
 8006fd2:	6800      	ldr	r0, [r0, #0]
 8006fd4:	b140      	cbz	r0, 8006fe8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006fd6:	480c      	ldr	r0, [pc, #48]	@ (8007008 <_sbrk+0x40>)
 8006fd8:	6800      	ldr	r0, [r0, #0]
 8006fda:	4403      	add	r3, r0
 8006fdc:	1a52      	subs	r2, r2, r1
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d806      	bhi.n	8006ff0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8006fe2:	4a09      	ldr	r2, [pc, #36]	@ (8007008 <_sbrk+0x40>)
 8006fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8006fe6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8006fe8:	4807      	ldr	r0, [pc, #28]	@ (8007008 <_sbrk+0x40>)
 8006fea:	4c08      	ldr	r4, [pc, #32]	@ (800700c <_sbrk+0x44>)
 8006fec:	6004      	str	r4, [r0, #0]
 8006fee:	e7f2      	b.n	8006fd6 <_sbrk+0xe>
    errno = ENOMEM;
 8006ff0:	f005 fa80 	bl	800c4f4 <__errno>
 8006ff4:	230c      	movs	r3, #12
 8006ff6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffc:	e7f3      	b.n	8006fe6 <_sbrk+0x1e>
 8006ffe:	bf00      	nop
 8007000:	20010000 	.word	0x20010000
 8007004:	00000400 	.word	0x00000400
 8007008:	20008df8 	.word	0x20008df8
 800700c:	2000ba30 	.word	0x2000ba30

08007010 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007010:	4770      	bx	lr
	...

08007014 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8007014:	b508      	push	{r3, lr}
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8007016:	480a      	ldr	r0, [pc, #40]	@ (8007040 <MX_UART4_Init+0x2c>)
 8007018:	4b0a      	ldr	r3, [pc, #40]	@ (8007044 <MX_UART4_Init+0x30>)
 800701a:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 800701c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8007020:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8007022:	2300      	movs	r3, #0
 8007024:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007026:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8007028:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800702a:	220c      	movs	r2, #12
 800702c:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800702e:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007030:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007032:	f002 fa38 	bl	80094a6 <HAL_UART_Init>
 8007036:	b900      	cbnz	r0, 800703a <MX_UART4_Init+0x26>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8007038:	bd08      	pop	{r3, pc}
    Error_Handler();
 800703a:	f7ff fead 	bl	8006d98 <Error_Handler>
}
 800703e:	e7fb      	b.n	8007038 <MX_UART4_Init+0x24>
 8007040:	20008f14 	.word	0x20008f14
 8007044:	40004c00 	.word	0x40004c00

08007048 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8007048:	b508      	push	{r3, lr}
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800704a:	480a      	ldr	r0, [pc, #40]	@ (8007074 <MX_UART5_Init+0x2c>)
 800704c:	4b0a      	ldr	r3, [pc, #40]	@ (8007078 <MX_UART5_Init+0x30>)
 800704e:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 8007050:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8007054:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8007056:	2300      	movs	r3, #0
 8007058:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800705a:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800705c:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800705e:	220c      	movs	r2, #12
 8007060:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007062:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8007064:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8007066:	f002 fa1e 	bl	80094a6 <HAL_UART_Init>
 800706a:	b900      	cbnz	r0, 800706e <MX_UART5_Init+0x26>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800706c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800706e:	f7ff fe93 	bl	8006d98 <Error_Handler>
}
 8007072:	e7fb      	b.n	800706c <MX_UART5_Init+0x24>
 8007074:	20008ecc 	.word	0x20008ecc
 8007078:	40005000 	.word	0x40005000

0800707c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800707c:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800707e:	480a      	ldr	r0, [pc, #40]	@ (80070a8 <MX_USART2_UART_Init+0x2c>)
 8007080:	4b0a      	ldr	r3, [pc, #40]	@ (80070ac <MX_USART2_UART_Init+0x30>)
 8007082:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8007084:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8007088:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800708a:	2100      	movs	r1, #0
 800708c:	6081      	str	r1, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800708e:	60c1      	str	r1, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007090:	6101      	str	r1, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007092:	230c      	movs	r3, #12
 8007094:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007096:	6181      	str	r1, [r0, #24]
  if (HAL_LIN_Init(&huart2, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 8007098:	f002 fa35 	bl	8009506 <HAL_LIN_Init>
 800709c:	b900      	cbnz	r0, 80070a0 <MX_USART2_UART_Init+0x24>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800709e:	bd08      	pop	{r3, pc}
    Error_Handler();
 80070a0:	f7ff fe7a 	bl	8006d98 <Error_Handler>
}
 80070a4:	e7fb      	b.n	800709e <MX_USART2_UART_Init+0x22>
 80070a6:	bf00      	nop
 80070a8:	20008e84 	.word	0x20008e84
 80070ac:	40004400 	.word	0x40004400

080070b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80070b0:	b570      	push	{r4, r5, r6, lr}
 80070b2:	b090      	sub	sp, #64	@ 0x40

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070b4:	2300      	movs	r3, #0
 80070b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80070b8:	930d      	str	r3, [sp, #52]	@ 0x34
 80070ba:	930e      	str	r3, [sp, #56]	@ 0x38
 80070bc:	930f      	str	r3, [sp, #60]	@ 0x3c
  if(uartHandle->Instance==UART4)
 80070be:	6803      	ldr	r3, [r0, #0]
 80070c0:	4a9c      	ldr	r2, [pc, #624]	@ (8007334 <HAL_UART_MspInit+0x284>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d010      	beq.n	80070e8 <HAL_UART_MspInit+0x38>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART5)
 80070c6:	4a9c      	ldr	r2, [pc, #624]	@ (8007338 <HAL_UART_MspInit+0x288>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d06e      	beq.n	80071aa <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  #ifdef SPS250_LIN
  else if(uartHandle->Instance==USART1)
 80070cc:	4a9b      	ldr	r2, [pc, #620]	@ (800733c <HAL_UART_MspInit+0x28c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	f000 809c 	beq.w	800720c <HAL_UART_MspInit+0x15c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 80070d4:	4a9a      	ldr	r2, [pc, #616]	@ (8007340 <HAL_UART_MspInit+0x290>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	f000 80ca 	beq.w	8007270 <HAL_UART_MspInit+0x1c0>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 80070dc:	4a99      	ldr	r2, [pc, #612]	@ (8007344 <HAL_UART_MspInit+0x294>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	f000 80f6 	beq.w	80072d0 <HAL_UART_MspInit+0x220>
  // /* USER CODE BEGIN USART2_MspInit 1 */

  // /* USER CODE END USART2_MspInit 1 */
  // }
  #endif
}
 80070e4:	b010      	add	sp, #64	@ 0x40
 80070e6:	bd70      	pop	{r4, r5, r6, pc}
 80070e8:	4604      	mov	r4, r0
    __HAL_RCC_UART4_CLK_ENABLE();
 80070ea:	4b97      	ldr	r3, [pc, #604]	@ (8007348 <HAL_UART_MspInit+0x298>)
 80070ec:	69da      	ldr	r2, [r3, #28]
 80070ee:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80070f2:	61da      	str	r2, [r3, #28]
 80070f4:	69da      	ldr	r2, [r3, #28]
 80070f6:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 80070fa:	9201      	str	r2, [sp, #4]
 80070fc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070fe:	699a      	ldr	r2, [r3, #24]
 8007100:	f042 0210 	orr.w	r2, r2, #16
 8007104:	619a      	str	r2, [r3, #24]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f003 0310 	and.w	r3, r3, #16
 800710c:	9302      	str	r3, [sp, #8]
 800710e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007110:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007114:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007116:	2302      	movs	r3, #2
 8007118:	930d      	str	r3, [sp, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800711a:	2303      	movs	r3, #3
 800711c:	930f      	str	r3, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800711e:	4e8b      	ldr	r6, [pc, #556]	@ (800734c <HAL_UART_MspInit+0x29c>)
 8007120:	a90c      	add	r1, sp, #48	@ 0x30
 8007122:	4630      	mov	r0, r6
 8007124:	f001 fafc 	bl	8008720 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007128:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800712c:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800712e:	2500      	movs	r5, #0
 8007130:	950d      	str	r5, [sp, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007132:	950e      	str	r5, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007134:	a90c      	add	r1, sp, #48	@ 0x30
 8007136:	4630      	mov	r0, r6
 8007138:	f001 faf2 	bl	8008720 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA2_Channel3;
 800713c:	4884      	ldr	r0, [pc, #528]	@ (8007350 <HAL_UART_MspInit+0x2a0>)
 800713e:	4b85      	ldr	r3, [pc, #532]	@ (8007354 <HAL_UART_MspInit+0x2a4>)
 8007140:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007142:	6045      	str	r5, [r0, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007144:	6085      	str	r5, [r0, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007146:	2380      	movs	r3, #128	@ 0x80
 8007148:	60c3      	str	r3, [r0, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800714a:	6105      	str	r5, [r0, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800714c:	6145      	str	r5, [r0, #20]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800714e:	6185      	str	r5, [r0, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007150:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007154:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8007156:	f001 f80f 	bl	8008178 <HAL_DMA_Init>
 800715a:	bb00      	cbnz	r0, 800719e <HAL_UART_MspInit+0xee>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800715c:	4b7c      	ldr	r3, [pc, #496]	@ (8007350 <HAL_UART_MspInit+0x2a0>)
 800715e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8007160:	625c      	str	r4, [r3, #36]	@ 0x24
    hdma_uart4_tx.Instance = DMA2_Channel5;
 8007162:	487d      	ldr	r0, [pc, #500]	@ (8007358 <HAL_UART_MspInit+0x2a8>)
 8007164:	4b7d      	ldr	r3, [pc, #500]	@ (800735c <HAL_UART_MspInit+0x2ac>)
 8007166:	6003      	str	r3, [r0, #0]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007168:	2310      	movs	r3, #16
 800716a:	6043      	str	r3, [r0, #4]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800716c:	2300      	movs	r3, #0
 800716e:	6083      	str	r3, [r0, #8]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007170:	2280      	movs	r2, #128	@ 0x80
 8007172:	60c2      	str	r2, [r0, #12]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007174:	6103      	str	r3, [r0, #16]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007176:	6143      	str	r3, [r0, #20]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8007178:	6183      	str	r3, [r0, #24]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800717a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800717e:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8007180:	f000 fffa 	bl	8008178 <HAL_DMA_Init>
 8007184:	b970      	cbnz	r0, 80071a4 <HAL_UART_MspInit+0xf4>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8007186:	4b74      	ldr	r3, [pc, #464]	@ (8007358 <HAL_UART_MspInit+0x2a8>)
 8007188:	63a3      	str	r3, [r4, #56]	@ 0x38
 800718a:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800718c:	2200      	movs	r2, #0
 800718e:	2105      	movs	r1, #5
 8007190:	2034      	movs	r0, #52	@ 0x34
 8007192:	f000 ffa9 	bl	80080e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8007196:	2034      	movs	r0, #52	@ 0x34
 8007198:	f000 ffb6 	bl	8008108 <HAL_NVIC_EnableIRQ>
 800719c:	e7a2      	b.n	80070e4 <HAL_UART_MspInit+0x34>
      Error_Handler();
 800719e:	f7ff fdfb 	bl	8006d98 <Error_Handler>
 80071a2:	e7db      	b.n	800715c <HAL_UART_MspInit+0xac>
      Error_Handler();
 80071a4:	f7ff fdf8 	bl	8006d98 <Error_Handler>
 80071a8:	e7ed      	b.n	8007186 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_UART5_CLK_ENABLE();
 80071aa:	4b67      	ldr	r3, [pc, #412]	@ (8007348 <HAL_UART_MspInit+0x298>)
 80071ac:	69da      	ldr	r2, [r3, #28]
 80071ae:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80071b2:	61da      	str	r2, [r3, #28]
 80071b4:	69da      	ldr	r2, [r3, #28]
 80071b6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80071ba:	9203      	str	r2, [sp, #12]
 80071bc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071be:	699a      	ldr	r2, [r3, #24]
 80071c0:	f042 0210 	orr.w	r2, r2, #16
 80071c4:	619a      	str	r2, [r3, #24]
 80071c6:	699a      	ldr	r2, [r3, #24]
 80071c8:	f002 0210 	and.w	r2, r2, #16
 80071cc:	9204      	str	r2, [sp, #16]
 80071ce:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80071d0:	699a      	ldr	r2, [r3, #24]
 80071d2:	f042 0220 	orr.w	r2, r2, #32
 80071d6:	619a      	str	r2, [r3, #24]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	9305      	str	r3, [sp, #20]
 80071e0:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80071e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80071e6:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071e8:	2302      	movs	r3, #2
 80071ea:	930d      	str	r3, [sp, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80071ec:	2303      	movs	r3, #3
 80071ee:	930f      	str	r3, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071f0:	a90c      	add	r1, sp, #48	@ 0x30
 80071f2:	4856      	ldr	r0, [pc, #344]	@ (800734c <HAL_UART_MspInit+0x29c>)
 80071f4:	f001 fa94 	bl	8008720 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80071f8:	2304      	movs	r3, #4
 80071fa:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071fc:	2300      	movs	r3, #0
 80071fe:	930d      	str	r3, [sp, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007200:	930e      	str	r3, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007202:	a90c      	add	r1, sp, #48	@ 0x30
 8007204:	4856      	ldr	r0, [pc, #344]	@ (8007360 <HAL_UART_MspInit+0x2b0>)
 8007206:	f001 fa8b 	bl	8008720 <HAL_GPIO_Init>
 800720a:	e76b      	b.n	80070e4 <HAL_UART_MspInit+0x34>
    __HAL_RCC_USART1_CLK_ENABLE();
 800720c:	4b4e      	ldr	r3, [pc, #312]	@ (8007348 <HAL_UART_MspInit+0x298>)
 800720e:	699a      	ldr	r2, [r3, #24]
 8007210:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007214:	619a      	str	r2, [r3, #24]
 8007216:	699a      	ldr	r2, [r3, #24]
 8007218:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800721c:	9206      	str	r2, [sp, #24]
 800721e:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007220:	699a      	ldr	r2, [r3, #24]
 8007222:	f042 0204 	orr.w	r2, r2, #4
 8007226:	619a      	str	r2, [r3, #24]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	f003 0304 	and.w	r3, r3, #4
 800722e:	9307      	str	r3, [sp, #28]
 8007230:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007232:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007236:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007238:	2302      	movs	r3, #2
 800723a:	930d      	str	r3, [sp, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800723c:	2303      	movs	r3, #3
 800723e:	930f      	str	r3, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007240:	4d48      	ldr	r5, [pc, #288]	@ (8007364 <HAL_UART_MspInit+0x2b4>)
 8007242:	a90c      	add	r1, sp, #48	@ 0x30
 8007244:	4628      	mov	r0, r5
 8007246:	f001 fa6b 	bl	8008720 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800724a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800724e:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007250:	2400      	movs	r4, #0
 8007252:	940d      	str	r4, [sp, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007254:	940e      	str	r4, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007256:	a90c      	add	r1, sp, #48	@ 0x30
 8007258:	4628      	mov	r0, r5
 800725a:	f001 fa61 	bl	8008720 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800725e:	4622      	mov	r2, r4
 8007260:	4621      	mov	r1, r4
 8007262:	2025      	movs	r0, #37	@ 0x25
 8007264:	f000 ff40 	bl	80080e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007268:	2025      	movs	r0, #37	@ 0x25
 800726a:	f000 ff4d 	bl	8008108 <HAL_NVIC_EnableIRQ>
 800726e:	e739      	b.n	80070e4 <HAL_UART_MspInit+0x34>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007270:	4b35      	ldr	r3, [pc, #212]	@ (8007348 <HAL_UART_MspInit+0x298>)
 8007272:	69da      	ldr	r2, [r3, #28]
 8007274:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007278:	61da      	str	r2, [r3, #28]
 800727a:	69da      	ldr	r2, [r3, #28]
 800727c:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8007280:	9208      	str	r2, [sp, #32]
 8007282:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007284:	699a      	ldr	r2, [r3, #24]
 8007286:	f042 0204 	orr.w	r2, r2, #4
 800728a:	619a      	str	r2, [r3, #24]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	9309      	str	r3, [sp, #36]	@ 0x24
 8007294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007296:	2304      	movs	r3, #4
 8007298:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800729a:	2302      	movs	r3, #2
 800729c:	930d      	str	r3, [sp, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800729e:	2303      	movs	r3, #3
 80072a0:	930f      	str	r3, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072a2:	4d30      	ldr	r5, [pc, #192]	@ (8007364 <HAL_UART_MspInit+0x2b4>)
 80072a4:	a90c      	add	r1, sp, #48	@ 0x30
 80072a6:	4628      	mov	r0, r5
 80072a8:	f001 fa3a 	bl	8008720 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80072ac:	2308      	movs	r3, #8
 80072ae:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80072b0:	2400      	movs	r4, #0
 80072b2:	940d      	str	r4, [sp, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b4:	940e      	str	r4, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072b6:	a90c      	add	r1, sp, #48	@ 0x30
 80072b8:	4628      	mov	r0, r5
 80072ba:	f001 fa31 	bl	8008720 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80072be:	4622      	mov	r2, r4
 80072c0:	4621      	mov	r1, r4
 80072c2:	2026      	movs	r0, #38	@ 0x26
 80072c4:	f000 ff10 	bl	80080e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80072c8:	2026      	movs	r0, #38	@ 0x26
 80072ca:	f000 ff1d 	bl	8008108 <HAL_NVIC_EnableIRQ>
 80072ce:	e709      	b.n	80070e4 <HAL_UART_MspInit+0x34>
    __HAL_RCC_USART3_CLK_ENABLE();
 80072d0:	4b1d      	ldr	r3, [pc, #116]	@ (8007348 <HAL_UART_MspInit+0x298>)
 80072d2:	69da      	ldr	r2, [r3, #28]
 80072d4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80072d8:	61da      	str	r2, [r3, #28]
 80072da:	69da      	ldr	r2, [r3, #28]
 80072dc:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80072e0:	920a      	str	r2, [sp, #40]	@ 0x28
 80072e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072e4:	699a      	ldr	r2, [r3, #24]
 80072e6:	f042 0208 	orr.w	r2, r2, #8
 80072ea:	619a      	str	r2, [r3, #24]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	f003 0308 	and.w	r3, r3, #8
 80072f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80072f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072fa:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072fc:	2302      	movs	r3, #2
 80072fe:	930d      	str	r3, [sp, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007300:	2303      	movs	r3, #3
 8007302:	930f      	str	r3, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007304:	4d18      	ldr	r5, [pc, #96]	@ (8007368 <HAL_UART_MspInit+0x2b8>)
 8007306:	a90c      	add	r1, sp, #48	@ 0x30
 8007308:	4628      	mov	r0, r5
 800730a:	f001 fa09 	bl	8008720 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800730e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007312:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007314:	2400      	movs	r4, #0
 8007316:	940d      	str	r4, [sp, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007318:	940e      	str	r4, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800731a:	a90c      	add	r1, sp, #48	@ 0x30
 800731c:	4628      	mov	r0, r5
 800731e:	f001 f9ff 	bl	8008720 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007322:	4622      	mov	r2, r4
 8007324:	4621      	mov	r1, r4
 8007326:	2027      	movs	r0, #39	@ 0x27
 8007328:	f000 fede 	bl	80080e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800732c:	2027      	movs	r0, #39	@ 0x27
 800732e:	f000 feeb 	bl	8008108 <HAL_NVIC_EnableIRQ>
}
 8007332:	e6d7      	b.n	80070e4 <HAL_UART_MspInit+0x34>
 8007334:	40004c00 	.word	0x40004c00
 8007338:	40005000 	.word	0x40005000
 800733c:	40013800 	.word	0x40013800
 8007340:	40004400 	.word	0x40004400
 8007344:	40004800 	.word	0x40004800
 8007348:	40021000 	.word	0x40021000
 800734c:	40011000 	.word	0x40011000
 8007350:	20008e40 	.word	0x20008e40
 8007354:	40020430 	.word	0x40020430
 8007358:	20008dfc 	.word	0x20008dfc
 800735c:	40020458 	.word	0x40020458
 8007360:	40011400 	.word	0x40011400
 8007364:	40010800 	.word	0x40010800
 8007368:	40010c00 	.word	0x40010c00

0800736c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800736c:	f7ff fe50 	bl	8007010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007370:	480b      	ldr	r0, [pc, #44]	@ (80073a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8007372:	490c      	ldr	r1, [pc, #48]	@ (80073a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007374:	4a0c      	ldr	r2, [pc, #48]	@ (80073a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8007376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007378:	e002      	b.n	8007380 <LoopCopyDataInit>

0800737a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800737a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800737c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800737e:	3304      	adds	r3, #4

08007380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007384:	d3f9      	bcc.n	800737a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007386:	4a09      	ldr	r2, [pc, #36]	@ (80073ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8007388:	4c09      	ldr	r4, [pc, #36]	@ (80073b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800738a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800738c:	e001      	b.n	8007392 <LoopFillZerobss>

0800738e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800738e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007390:	3204      	adds	r2, #4

08007392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007394:	d3fb      	bcc.n	800738e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007396:	f005 f8b3 	bl	800c500 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800739a:	f7ff fd47 	bl	8006e2c <main>
  bx lr
 800739e:	4770      	bx	lr
  ldr r0, =_sdata
 80073a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80073a4:	20008268 	.word	0x20008268
  ldr r2, =_sidata
 80073a8:	080119c4 	.word	0x080119c4
  ldr r2, =_sbss
 80073ac:	20008268 	.word	0x20008268
  ldr r4, =_ebss
 80073b0:	2000ba30 	.word	0x2000ba30

080073b4 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80073b4:	e7fe      	b.n	80073b4 <ADC1_2_IRQHandler>
	...

080073b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80073b8:	b510      	push	{r4, lr}
 80073ba:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80073bc:	4b0e      	ldr	r3, [pc, #56]	@ (80073f8 <HAL_InitTick+0x40>)
 80073be:	781a      	ldrb	r2, [r3, #0]
 80073c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80073c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80073c8:	4a0c      	ldr	r2, [pc, #48]	@ (80073fc <HAL_InitTick+0x44>)
 80073ca:	6810      	ldr	r0, [r2, #0]
 80073cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80073d0:	f000 fea8 	bl	8008124 <HAL_SYSTICK_Config>
 80073d4:	b968      	cbnz	r0, 80073f2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80073d6:	2c0f      	cmp	r4, #15
 80073d8:	d901      	bls.n	80073de <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80073da:	2001      	movs	r0, #1
 80073dc:	e00a      	b.n	80073f4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80073de:	2200      	movs	r2, #0
 80073e0:	4621      	mov	r1, r4
 80073e2:	f04f 30ff 	mov.w	r0, #4294967295
 80073e6:	f000 fe7f 	bl	80080e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80073ea:	4b05      	ldr	r3, [pc, #20]	@ (8007400 <HAL_InitTick+0x48>)
 80073ec:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073ee:	2000      	movs	r0, #0
 80073f0:	e000      	b.n	80073f4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80073f2:	2001      	movs	r0, #1
}
 80073f4:	bd10      	pop	{r4, pc}
 80073f6:	bf00      	nop
 80073f8:	20008080 	.word	0x20008080
 80073fc:	2000807c 	.word	0x2000807c
 8007400:	20008084 	.word	0x20008084

08007404 <HAL_Init>:
{
 8007404:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007406:	4a07      	ldr	r2, [pc, #28]	@ (8007424 <HAL_Init+0x20>)
 8007408:	6813      	ldr	r3, [r2, #0]
 800740a:	f043 0310 	orr.w	r3, r3, #16
 800740e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007410:	2003      	movs	r0, #3
 8007412:	f000 fe57 	bl	80080c4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8007416:	200f      	movs	r0, #15
 8007418:	f7ff ffce 	bl	80073b8 <HAL_InitTick>
  HAL_MspInit();
 800741c:	f7ff fd36 	bl	8006e8c <HAL_MspInit>
}
 8007420:	2000      	movs	r0, #0
 8007422:	bd08      	pop	{r3, pc}
 8007424:	40022000 	.word	0x40022000

08007428 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007428:	4a03      	ldr	r2, [pc, #12]	@ (8007438 <HAL_IncTick+0x10>)
 800742a:	6811      	ldr	r1, [r2, #0]
 800742c:	4b03      	ldr	r3, [pc, #12]	@ (800743c <HAL_IncTick+0x14>)
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	440b      	add	r3, r1
 8007432:	6013      	str	r3, [r2, #0]
}
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	20008f5c 	.word	0x20008f5c
 800743c:	20008080 	.word	0x20008080

08007440 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007440:	4b01      	ldr	r3, [pc, #4]	@ (8007448 <HAL_GetTick+0x8>)
 8007442:	6818      	ldr	r0, [r3, #0]
}
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	20008f5c 	.word	0x20008f5c

0800744c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800744c:	6803      	ldr	r3, [r0, #0]
 800744e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8007450:	4770      	bx	lr
	...

08007454 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8007454:	b430      	push	{r4, r5}
 8007456:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8007458:	2200      	movs	r2, #0
 800745a:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800745c:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8007460:	2a01      	cmp	r2, #1
 8007462:	f000 808f 	beq.w	8007584 <HAL_ADC_ConfigChannel+0x130>
 8007466:	4603      	mov	r3, r0
 8007468:	2201      	movs	r2, #1
 800746a:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800746e:	684a      	ldr	r2, [r1, #4]
 8007470:	2a06      	cmp	r2, #6
 8007472:	d82d      	bhi.n	80074d0 <HAL_ADC_ConfigChannel+0x7c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007474:	6804      	ldr	r4, [r0, #0]
 8007476:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8007478:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800747c:	3a05      	subs	r2, #5
 800747e:	f04f 0c1f 	mov.w	ip, #31
 8007482:	fa0c fc02 	lsl.w	ip, ip, r2
 8007486:	ea20 000c 	bic.w	r0, r0, ip
 800748a:	680d      	ldr	r5, [r1, #0]
 800748c:	fa05 f202 	lsl.w	r2, r5, r2
 8007490:	4302      	orrs	r2, r0
 8007492:	6362      	str	r2, [r4, #52]	@ 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007494:	680a      	ldr	r2, [r1, #0]
 8007496:	2a09      	cmp	r2, #9
 8007498:	d938      	bls.n	800750c <HAL_ADC_ConfigChannel+0xb8>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800749a:	681c      	ldr	r4, [r3, #0]
 800749c:	68e0      	ldr	r0, [r4, #12]
 800749e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80074a2:	3a1e      	subs	r2, #30
 80074a4:	f04f 0c07 	mov.w	ip, #7
 80074a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80074ac:	ea20 000c 	bic.w	r0, r0, ip
 80074b0:	688d      	ldr	r5, [r1, #8]
 80074b2:	fa05 f202 	lsl.w	r2, r5, r2
 80074b6:	4302      	orrs	r2, r0
 80074b8:	60e2      	str	r2, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80074ba:	680a      	ldr	r2, [r1, #0]
 80074bc:	3a10      	subs	r2, #16
 80074be:	2a01      	cmp	r2, #1
 80074c0:	d934      	bls.n	800752c <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80074c2:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80074ca:	b002      	add	sp, #8
 80074cc:	bc30      	pop	{r4, r5}
 80074ce:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 80074d0:	2a0c      	cmp	r2, #12
 80074d2:	d80d      	bhi.n	80074f0 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80074d4:	6805      	ldr	r5, [r0, #0]
 80074d6:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80074d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80074dc:	3a23      	subs	r2, #35	@ 0x23
 80074de:	241f      	movs	r4, #31
 80074e0:	4094      	lsls	r4, r2
 80074e2:	ea20 0004 	bic.w	r0, r0, r4
 80074e6:	680c      	ldr	r4, [r1, #0]
 80074e8:	4094      	lsls	r4, r2
 80074ea:	4320      	orrs	r0, r4
 80074ec:	6328      	str	r0, [r5, #48]	@ 0x30
 80074ee:	e7d1      	b.n	8007494 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80074f0:	6805      	ldr	r5, [r0, #0]
 80074f2:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80074f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80074f8:	3a41      	subs	r2, #65	@ 0x41
 80074fa:	241f      	movs	r4, #31
 80074fc:	4094      	lsls	r4, r2
 80074fe:	ea20 0004 	bic.w	r0, r0, r4
 8007502:	680c      	ldr	r4, [r1, #0]
 8007504:	4094      	lsls	r4, r2
 8007506:	4320      	orrs	r0, r4
 8007508:	62e8      	str	r0, [r5, #44]	@ 0x2c
 800750a:	e7c3      	b.n	8007494 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800750c:	681c      	ldr	r4, [r3, #0]
 800750e:	6920      	ldr	r0, [r4, #16]
 8007510:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007514:	f04f 0c07 	mov.w	ip, #7
 8007518:	fa0c fc02 	lsl.w	ip, ip, r2
 800751c:	ea20 000c 	bic.w	r0, r0, ip
 8007520:	688d      	ldr	r5, [r1, #8]
 8007522:	fa05 f202 	lsl.w	r2, r5, r2
 8007526:	4302      	orrs	r2, r0
 8007528:	6122      	str	r2, [r4, #16]
 800752a:	e7c6      	b.n	80074ba <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4816      	ldr	r0, [pc, #88]	@ (8007588 <HAL_ADC_ConfigChannel+0x134>)
 8007530:	4282      	cmp	r2, r0
 8007532:	d005      	beq.n	8007540 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007534:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007536:	f042 0220 	orr.w	r2, r2, #32
 800753a:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 800753c:	2001      	movs	r0, #1
 800753e:	e7c1      	b.n	80074c4 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007540:	6890      	ldr	r0, [r2, #8]
 8007542:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 8007546:	d11b      	bne.n	8007580 <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007548:	6890      	ldr	r0, [r2, #8]
 800754a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800754e:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007550:	680a      	ldr	r2, [r1, #0]
 8007552:	2a10      	cmp	r2, #16
 8007554:	d001      	beq.n	800755a <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007556:	2000      	movs	r0, #0
 8007558:	e7b4      	b.n	80074c4 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800755a:	4a0c      	ldr	r2, [pc, #48]	@ (800758c <HAL_ADC_ConfigChannel+0x138>)
 800755c:	6812      	ldr	r2, [r2, #0]
 800755e:	490c      	ldr	r1, [pc, #48]	@ (8007590 <HAL_ADC_ConfigChannel+0x13c>)
 8007560:	fba1 1202 	umull	r1, r2, r1, r2
 8007564:	0c92      	lsrs	r2, r2, #18
 8007566:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800756a:	0052      	lsls	r2, r2, #1
 800756c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800756e:	e002      	b.n	8007576 <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8007570:	9a01      	ldr	r2, [sp, #4]
 8007572:	3a01      	subs	r2, #1
 8007574:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8007576:	9a01      	ldr	r2, [sp, #4]
 8007578:	2a00      	cmp	r2, #0
 800757a:	d1f9      	bne.n	8007570 <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800757c:	2000      	movs	r0, #0
 800757e:	e7a1      	b.n	80074c4 <HAL_ADC_ConfigChannel+0x70>
 8007580:	2000      	movs	r0, #0
 8007582:	e79f      	b.n	80074c4 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8007584:	2002      	movs	r0, #2
 8007586:	e7a0      	b.n	80074ca <HAL_ADC_ConfigChannel+0x76>
 8007588:	40012400 	.word	0x40012400
 800758c:	2000807c 	.word	0x2000807c
 8007590:	431bde83 	.word	0x431bde83

08007594 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007594:	b530      	push	{r4, r5, lr}
 8007596:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800759c:	6803      	ldr	r3, [r0, #0]
 800759e:	689a      	ldr	r2, [r3, #8]
 80075a0:	f012 0f01 	tst.w	r2, #1
 80075a4:	d133      	bne.n	800760e <ADC_Enable+0x7a>
 80075a6:	4604      	mov	r4, r0
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80075a8:	689a      	ldr	r2, [r3, #8]
 80075aa:	f042 0201 	orr.w	r2, r2, #1
 80075ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80075b0:	4b18      	ldr	r3, [pc, #96]	@ (8007614 <ADC_Enable+0x80>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a18      	ldr	r2, [pc, #96]	@ (8007618 <ADC_Enable+0x84>)
 80075b6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ba:	0c9b      	lsrs	r3, r3, #18
 80075bc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80075be:	e002      	b.n	80075c6 <ADC_Enable+0x32>
    {
      wait_loop_index--;
 80075c0:	9b01      	ldr	r3, [sp, #4]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80075c6:	9b01      	ldr	r3, [sp, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1f9      	bne.n	80075c0 <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80075cc:	f7ff ff38 	bl	8007440 <HAL_GetTick>
 80075d0:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f013 0f01 	tst.w	r3, #1
 80075da:	d116      	bne.n	800760a <ADC_Enable+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80075dc:	f7ff ff30 	bl	8007440 <HAL_GetTick>
 80075e0:	1b43      	subs	r3, r0, r5
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d9f5      	bls.n	80075d2 <ADC_Enable+0x3e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f013 0f01 	tst.w	r3, #1
 80075ee:	d1f0      	bne.n	80075d2 <ADC_Enable+0x3e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075f0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80075f2:	f043 0310 	orr.w	r3, r3, #16
 80075f6:	62a3      	str	r3, [r4, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80075fa:	f043 0301 	orr.w	r3, r3, #1
 80075fe:	62e3      	str	r3, [r4, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007600:	2300      	movs	r3, #0
 8007602:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24

          return HAL_ERROR;
 8007606:	2001      	movs	r0, #1
 8007608:	e002      	b.n	8007610 <ADC_Enable+0x7c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800760a:	2000      	movs	r0, #0
 800760c:	e000      	b.n	8007610 <ADC_Enable+0x7c>
 800760e:	2000      	movs	r0, #0
}
 8007610:	b003      	add	sp, #12
 8007612:	bd30      	pop	{r4, r5, pc}
 8007614:	2000807c 	.word	0x2000807c
 8007618:	431bde83 	.word	0x431bde83

0800761c <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 800761c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8007620:	2b01      	cmp	r3, #1
 8007622:	d068      	beq.n	80076f6 <HAL_ADC_Start+0xda>
{
 8007624:	b510      	push	{r4, lr}
 8007626:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8007628:	2301      	movs	r3, #1
 800762a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800762e:	f7ff ffb1 	bl	8007594 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8007632:	2800      	cmp	r0, #0
 8007634:	d15b      	bne.n	80076ee <HAL_ADC_Start+0xd2>
    ADC_STATE_CLR_SET(hadc->State,
 8007636:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007638:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800763c:	f023 0301 	bic.w	r3, r3, #1
 8007640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007644:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	4a2c      	ldr	r2, [pc, #176]	@ (80076fc <HAL_ADC_Start+0xe0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d027      	beq.n	800769e <HAL_ADC_Start+0x82>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800764e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007650:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8007654:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800765c:	d005      	beq.n	800766a <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800765e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007660:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8007664:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007668:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800766a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800766c:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8007670:	d02b      	beq.n	80076ca <HAL_ADC_Start+0xae>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007672:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007674:	f022 0206 	bic.w	r2, r2, #6
 8007678:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_UNLOCK(hadc);
 800767a:	2200      	movs	r2, #0
 800767c:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8007680:	f06f 0202 	mvn.w	r2, #2
 8007684:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	689a      	ldr	r2, [r3, #8]
 800768a:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 800768e:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8007692:	d01d      	beq.n	80076d0 <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8007694:	689a      	ldr	r2, [r3, #8]
 8007696:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800769a:	609a      	str	r2, [r3, #8]
 800769c:	e02a      	b.n	80076f4 <HAL_ADC_Start+0xd8>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800769e:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80076a2:	6852      	ldr	r2, [r2, #4]
 80076a4:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 80076a8:	d0d1      	beq.n	800764e <HAL_ADC_Start+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80076aa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80076ac:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80076b0:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80076b2:	4a13      	ldr	r2, [pc, #76]	@ (8007700 <HAL_ADC_Start+0xe4>)
 80076b4:	6852      	ldr	r2, [r2, #4]
 80076b6:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80076ba:	d0d6      	beq.n	800766a <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80076bc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80076be:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80076c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80076c6:	62a2      	str	r2, [r4, #40]	@ 0x28
 80076c8:	e7cf      	b.n	800766a <HAL_ADC_Start+0x4e>
      ADC_CLEAR_ERRORCODE(hadc);
 80076ca:	2200      	movs	r2, #0
 80076cc:	62e2      	str	r2, [r4, #44]	@ 0x2c
 80076ce:	e7d4      	b.n	800767a <HAL_ADC_Start+0x5e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80076d0:	4a0a      	ldr	r2, [pc, #40]	@ (80076fc <HAL_ADC_Start+0xe0>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d004      	beq.n	80076e0 <HAL_ADC_Start+0xc4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80076d6:	689a      	ldr	r2, [r3, #8]
 80076d8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80076dc:	609a      	str	r2, [r3, #8]
 80076de:	e009      	b.n	80076f4 <HAL_ADC_Start+0xd8>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80076e0:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80076e4:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80076e6:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 80076ea:	d1d3      	bne.n	8007694 <HAL_ADC_Start+0x78>
 80076ec:	e7f3      	b.n	80076d6 <HAL_ADC_Start+0xba>
    __HAL_UNLOCK(hadc);
 80076ee:	2300      	movs	r3, #0
 80076f0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 80076f4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80076f6:	2002      	movs	r0, #2
}
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	40012800 	.word	0x40012800
 8007700:	40012400 	.word	0x40012400

08007704 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8007704:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007706:	6803      	ldr	r3, [r0, #0]
 8007708:	689a      	ldr	r2, [r3, #8]
 800770a:	f012 0f01 	tst.w	r2, #1
 800770e:	d101      	bne.n	8007714 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007710:	2000      	movs	r0, #0
}
 8007712:	bd38      	pop	{r3, r4, r5, pc}
 8007714:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8007716:	689a      	ldr	r2, [r3, #8]
 8007718:	f022 0201 	bic.w	r2, r2, #1
 800771c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800771e:	f7ff fe8f 	bl	8007440 <HAL_GetTick>
 8007722:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f013 0f01 	tst.w	r3, #1
 800772c:	d013      	beq.n	8007756 <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800772e:	f7ff fe87 	bl	8007440 <HAL_GetTick>
 8007732:	1b43      	subs	r3, r0, r5
 8007734:	2b02      	cmp	r3, #2
 8007736:	d9f5      	bls.n	8007724 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8007738:	6823      	ldr	r3, [r4, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f013 0f01 	tst.w	r3, #1
 8007740:	d0f0      	beq.n	8007724 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007742:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007744:	f043 0310 	orr.w	r3, r3, #16
 8007748:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800774a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800774c:	f043 0301 	orr.w	r3, r3, #1
 8007750:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8007752:	2001      	movs	r0, #1
 8007754:	e7dd      	b.n	8007712 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8007756:	2000      	movs	r0, #0
 8007758:	e7db      	b.n	8007712 <ADC_ConversionStop_Disable+0xe>
	...

0800775c <HAL_ADC_Init>:
  if(hadc == NULL)
 800775c:	2800      	cmp	r0, #0
 800775e:	d07b      	beq.n	8007858 <HAL_ADC_Init+0xfc>
{
 8007760:	b570      	push	{r4, r5, r6, lr}
 8007762:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007764:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007766:	2b00      	cmp	r3, #0
 8007768:	d04d      	beq.n	8007806 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800776a:	4620      	mov	r0, r4
 800776c:	f7ff ffca 	bl	8007704 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007770:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007772:	f013 0310 	ands.w	r3, r3, #16
 8007776:	d169      	bne.n	800784c <HAL_ADC_Init+0xf0>
 8007778:	2800      	cmp	r0, #0
 800777a:	d167      	bne.n	800784c <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 800777c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800777e:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8007782:	f022 0202 	bic.w	r2, r2, #2
 8007786:	f042 0202 	orr.w	r2, r2, #2
 800778a:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800778c:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800778e:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007790:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8007792:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007794:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007798:	68a5      	ldr	r5, [r4, #8]
 800779a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800779e:	d002      	beq.n	80077a6 <HAL_ADC_Init+0x4a>
 80077a0:	2d01      	cmp	r5, #1
 80077a2:	d036      	beq.n	8007812 <HAL_ADC_Init+0xb6>
 80077a4:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80077a6:	7d26      	ldrb	r6, [r4, #20]
 80077a8:	2e01      	cmp	r6, #1
 80077aa:	d035      	beq.n	8007818 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 80077ac:	6826      	ldr	r6, [r4, #0]
 80077ae:	6871      	ldr	r1, [r6, #4]
 80077b0:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 80077b4:	4329      	orrs	r1, r5
 80077b6:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80077b8:	6825      	ldr	r5, [r4, #0]
 80077ba:	68ae      	ldr	r6, [r5, #8]
 80077bc:	4927      	ldr	r1, [pc, #156]	@ (800785c <HAL_ADC_Init+0x100>)
 80077be:	4031      	ands	r1, r6
 80077c0:	4311      	orrs	r1, r2
 80077c2:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80077c4:	68a1      	ldr	r1, [r4, #8]
 80077c6:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80077ca:	d001      	beq.n	80077d0 <HAL_ADC_Init+0x74>
 80077cc:	2901      	cmp	r1, #1
 80077ce:	d102      	bne.n	80077d6 <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80077d0:	6923      	ldr	r3, [r4, #16]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80077d6:	6825      	ldr	r5, [r4, #0]
 80077d8:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 80077da:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 80077de:	430b      	orrs	r3, r1
 80077e0:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	6899      	ldr	r1, [r3, #8]
 80077e6:	4b1e      	ldr	r3, [pc, #120]	@ (8007860 <HAL_ADC_Init+0x104>)
 80077e8:	400b      	ands	r3, r1
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d025      	beq.n	800783a <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 80077ee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80077f0:	f023 0312 	bic.w	r3, r3, #18
 80077f4:	f043 0310 	orr.w	r3, r3, #16
 80077f8:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077fa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80077fc:	f043 0301 	orr.w	r3, r3, #1
 8007800:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 8007802:	2001      	movs	r0, #1
 8007804:	e027      	b.n	8007856 <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 8007806:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8007808:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 800780c:	f7fe feae 	bl	800656c <HAL_ADC_MspInit>
 8007810:	e7ab      	b.n	800776a <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007812:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8007816:	e7c6      	b.n	80077a6 <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007818:	b931      	cbnz	r1, 8007828 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800781a:	69a1      	ldr	r1, [r4, #24]
 800781c:	3901      	subs	r1, #1
 800781e:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8007822:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 8007826:	e7c1      	b.n	80077ac <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007828:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800782a:	f041 0120 	orr.w	r1, r1, #32
 800782e:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007830:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007832:	f041 0101 	orr.w	r1, r1, #1
 8007836:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8007838:	e7b8      	b.n	80077ac <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 800783a:	2300      	movs	r3, #0
 800783c:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800783e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007840:	f023 0303 	bic.w	r3, r3, #3
 8007844:	f043 0301 	orr.w	r3, r3, #1
 8007848:	62a3      	str	r3, [r4, #40]	@ 0x28
 800784a:	e004      	b.n	8007856 <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800784c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800784e:	f043 0310 	orr.w	r3, r3, #16
 8007852:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8007854:	2001      	movs	r0, #1
}
 8007856:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8007858:	2001      	movs	r0, #1
}
 800785a:	4770      	bx	lr
 800785c:	ffe1f7fd 	.word	0xffe1f7fd
 8007860:	ff1f0efe 	.word	0xff1f0efe

08007864 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007864:	2800      	cmp	r0, #0
 8007866:	f000 80a1 	beq.w	80079ac <HAL_CAN_Init+0x148>
{
 800786a:	b538      	push	{r3, r4, r5, lr}
 800786c:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800786e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8007872:	b1d3      	cbz	r3, 80078aa <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007874:	6822      	ldr	r2, [r4, #0]
 8007876:	6813      	ldr	r3, [r2, #0]
 8007878:	f043 0301 	orr.w	r3, r3, #1
 800787c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800787e:	f7ff fddf 	bl	8007440 <HAL_GetTick>
 8007882:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	f012 0f01 	tst.w	r2, #1
 800788c:	d110      	bne.n	80078b0 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800788e:	f7ff fdd7 	bl	8007440 <HAL_GetTick>
 8007892:	1b40      	subs	r0, r0, r5
 8007894:	280a      	cmp	r0, #10
 8007896:	d9f5      	bls.n	8007884 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007898:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800789a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800789e:	6263      	str	r3, [r4, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80078a0:	2305      	movs	r3, #5
 80078a2:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 80078a6:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80078a8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80078aa:	f7fe ff1f 	bl	80066ec <HAL_CAN_MspInit>
 80078ae:	e7e1      	b.n	8007874 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	f022 0202 	bic.w	r2, r2, #2
 80078b6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80078b8:	f7ff fdc2 	bl	8007440 <HAL_GetTick>
 80078bc:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	f012 0f02 	tst.w	r2, #2
 80078c6:	d00d      	beq.n	80078e4 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80078c8:	f7ff fdba 	bl	8007440 <HAL_GetTick>
 80078cc:	1b40      	subs	r0, r0, r5
 80078ce:	280a      	cmp	r0, #10
 80078d0:	d9f5      	bls.n	80078be <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80078d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80078d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078d8:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80078da:	2305      	movs	r3, #5
 80078dc:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 80078e0:	2001      	movs	r0, #1
 80078e2:	e7e1      	b.n	80078a8 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80078e4:	7e22      	ldrb	r2, [r4, #24]
 80078e6:	2a01      	cmp	r2, #1
 80078e8:	d03d      	beq.n	8007966 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80078f0:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80078f2:	7e63      	ldrb	r3, [r4, #25]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d03b      	beq.n	8007970 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80078f8:	6822      	ldr	r2, [r4, #0]
 80078fa:	6813      	ldr	r3, [r2, #0]
 80078fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007900:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007902:	7ea3      	ldrb	r3, [r4, #26]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d039      	beq.n	800797c <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007908:	6822      	ldr	r2, [r4, #0]
 800790a:	6813      	ldr	r3, [r2, #0]
 800790c:	f023 0320 	bic.w	r3, r3, #32
 8007910:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007912:	7ee3      	ldrb	r3, [r4, #27]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d037      	beq.n	8007988 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007918:	6822      	ldr	r2, [r4, #0]
 800791a:	6813      	ldr	r3, [r2, #0]
 800791c:	f043 0310 	orr.w	r3, r3, #16
 8007920:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007922:	7f23      	ldrb	r3, [r4, #28]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d035      	beq.n	8007994 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007928:	6822      	ldr	r2, [r4, #0]
 800792a:	6813      	ldr	r3, [r2, #0]
 800792c:	f023 0308 	bic.w	r3, r3, #8
 8007930:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007932:	7f63      	ldrb	r3, [r4, #29]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d033      	beq.n	80079a0 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007938:	6822      	ldr	r2, [r4, #0]
 800793a:	6813      	ldr	r3, [r2, #0]
 800793c:	f023 0304 	bic.w	r3, r3, #4
 8007940:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007942:	68a3      	ldr	r3, [r4, #8]
 8007944:	68e2      	ldr	r2, [r4, #12]
 8007946:	4313      	orrs	r3, r2
 8007948:	6922      	ldr	r2, [r4, #16]
 800794a:	4313      	orrs	r3, r2
 800794c:	6962      	ldr	r2, [r4, #20]
 800794e:	4313      	orrs	r3, r2
 8007950:	6862      	ldr	r2, [r4, #4]
 8007952:	3a01      	subs	r2, #1
 8007954:	6821      	ldr	r1, [r4, #0]
 8007956:	4313      	orrs	r3, r2
 8007958:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800795a:	2000      	movs	r0, #0
 800795c:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800795e:	2301      	movs	r3, #1
 8007960:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8007964:	e7a0      	b.n	80078a8 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	e7c0      	b.n	80078f2 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007970:	6822      	ldr	r2, [r4, #0]
 8007972:	6813      	ldr	r3, [r2, #0]
 8007974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	e7c2      	b.n	8007902 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800797c:	6822      	ldr	r2, [r4, #0]
 800797e:	6813      	ldr	r3, [r2, #0]
 8007980:	f043 0320 	orr.w	r3, r3, #32
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	e7c4      	b.n	8007912 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007988:	6822      	ldr	r2, [r4, #0]
 800798a:	6813      	ldr	r3, [r2, #0]
 800798c:	f023 0310 	bic.w	r3, r3, #16
 8007990:	6013      	str	r3, [r2, #0]
 8007992:	e7c6      	b.n	8007922 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007994:	6822      	ldr	r2, [r4, #0]
 8007996:	6813      	ldr	r3, [r2, #0]
 8007998:	f043 0308 	orr.w	r3, r3, #8
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	e7c8      	b.n	8007932 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80079a0:	6822      	ldr	r2, [r4, #0]
 80079a2:	6813      	ldr	r3, [r2, #0]
 80079a4:	f043 0304 	orr.w	r3, r3, #4
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	e7ca      	b.n	8007942 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 80079ac:	2001      	movs	r0, #1
}
 80079ae:	4770      	bx	lr

080079b0 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80079b0:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80079b4:	3b01      	subs	r3, #1
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d905      	bls.n	80079c8 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80079bc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80079be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80079c2:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 80079c4:	2001      	movs	r0, #1
  }
}
 80079c6:	4770      	bx	lr
{
 80079c8:	b510      	push	{r4, lr}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80079ca:	4b47      	ldr	r3, [pc, #284]	@ (8007ae8 <HAL_CAN_ConfigFilter+0x138>)
 80079cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80079d0:	f042 0201 	orr.w	r2, r2, #1
 80079d4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80079d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80079dc:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 80079e0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80079e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80079e8:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 80079ea:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80079ee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80079f2:	694a      	ldr	r2, [r1, #20]
 80079f4:	f002 021f 	and.w	r2, r2, #31
 80079f8:	2001      	movs	r0, #1
 80079fa:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80079fe:	f8d3 021c 	ldr.w	r0, [r3, #540]	@ 0x21c
 8007a02:	ea6f 0c02 	mvn.w	ip, r2
 8007a06:	ea20 0002 	bic.w	r0, r0, r2
 8007a0a:	f8c3 021c 	str.w	r0, [r3, #540]	@ 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007a0e:	69cb      	ldr	r3, [r1, #28]
 8007a10:	b9cb      	cbnz	r3, 8007a46 <HAL_CAN_ConfigFilter+0x96>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007a12:	4b35      	ldr	r3, [pc, #212]	@ (8007ae8 <HAL_CAN_ConfigFilter+0x138>)
 8007a14:	f8d3 020c 	ldr.w	r0, [r3, #524]	@ 0x20c
 8007a18:	ea0c 0000 	and.w	r0, ip, r0
 8007a1c:	f8c3 020c 	str.w	r0, [r3, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007a20:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007a22:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007a24:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8007a28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007a2c:	3048      	adds	r0, #72	@ 0x48
 8007a2e:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007a32:	688c      	ldr	r4, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007a34:	8808      	ldrh	r0, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007a36:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007a3a:	694c      	ldr	r4, [r1, #20]
 8007a3c:	f104 0e48 	add.w	lr, r4, #72	@ 0x48
 8007a40:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
 8007a44:	6058      	str	r0, [r3, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007a46:	69cb      	ldr	r3, [r1, #28]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d01e      	beq.n	8007a8a <HAL_CAN_ConfigFilter+0xda>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007a4c:	698b      	ldr	r3, [r1, #24]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d135      	bne.n	8007abe <HAL_CAN_ConfigFilter+0x10e>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007a52:	4825      	ldr	r0, [pc, #148]	@ (8007ae8 <HAL_CAN_ConfigFilter+0x138>)
 8007a54:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 8007a58:	ea0c 0303 	and.w	r3, ip, r3
 8007a5c:	f8c0 3204 	str.w	r3, [r0, #516]	@ 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007a60:	690b      	ldr	r3, [r1, #16]
 8007a62:	bb9b      	cbnz	r3, 8007acc <HAL_CAN_ConfigFilter+0x11c>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007a64:	4820      	ldr	r0, [pc, #128]	@ (8007ae8 <HAL_CAN_ConfigFilter+0x138>)
 8007a66:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 8007a6a:	ea0c 0303 	and.w	r3, ip, r3
 8007a6e:	f8c0 3214 	str.w	r3, [r0, #532]	@ 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007a72:	6a0b      	ldr	r3, [r1, #32]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d030      	beq.n	8007ada <HAL_CAN_ConfigFilter+0x12a>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007a78:	4a1b      	ldr	r2, [pc, #108]	@ (8007ae8 <HAL_CAN_ConfigFilter+0x138>)
 8007a7a:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 8007a7e:	f023 0301 	bic.w	r3, r3, #1
 8007a82:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    return HAL_OK;
 8007a86:	2000      	movs	r0, #0
}
 8007a88:	bd10      	pop	{r4, pc}
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007a8a:	4b17      	ldr	r3, [pc, #92]	@ (8007ae8 <HAL_CAN_ConfigFilter+0x138>)
 8007a8c:	f8d3 020c 	ldr.w	r0, [r3, #524]	@ 0x20c
 8007a90:	4310      	orrs	r0, r2
 8007a92:	f8c3 020c 	str.w	r0, [r3, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007a96:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007a98:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007a9a:	f8d1 e000 	ldr.w	lr, [r1]
 8007a9e:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007aa2:	3048      	adds	r0, #72	@ 0x48
 8007aa4:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007aa8:	8988      	ldrh	r0, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007aaa:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007aac:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8007ab0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007ab4:	3448      	adds	r4, #72	@ 0x48
 8007ab6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007aba:	6058      	str	r0, [r3, #4]
 8007abc:	e7c6      	b.n	8007a4c <HAL_CAN_ConfigFilter+0x9c>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007abe:	480a      	ldr	r0, [pc, #40]	@ (8007ae8 <HAL_CAN_ConfigFilter+0x138>)
 8007ac0:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	f8c0 3204 	str.w	r3, [r0, #516]	@ 0x204
 8007aca:	e7c9      	b.n	8007a60 <HAL_CAN_ConfigFilter+0xb0>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007acc:	4806      	ldr	r0, [pc, #24]	@ (8007ae8 <HAL_CAN_ConfigFilter+0x138>)
 8007ace:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	f8c0 3214 	str.w	r3, [r0, #532]	@ 0x214
 8007ad8:	e7cb      	b.n	8007a72 <HAL_CAN_ConfigFilter+0xc2>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007ada:	4903      	ldr	r1, [pc, #12]	@ (8007ae8 <HAL_CAN_ConfigFilter+0x138>)
 8007adc:	f8d1 321c 	ldr.w	r3, [r1, #540]	@ 0x21c
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
 8007ae6:	e7c7      	b.n	8007a78 <HAL_CAN_ConfigFilter+0xc8>
 8007ae8:	40006400 	.word	0x40006400

08007aec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007aec:	b570      	push	{r4, r5, r6, lr}
 8007aee:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007af0:	f890 5020 	ldrb.w	r5, [r0, #32]
 8007af4:	b2ed      	uxtb	r5, r5
 8007af6:	2d01      	cmp	r5, #1
 8007af8:	d006      	beq.n	8007b08 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007afa:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007afc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b00:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8007b02:	2501      	movs	r5, #1
  }
}
 8007b04:	4628      	mov	r0, r5
 8007b06:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007b08:	2302      	movs	r3, #2
 8007b0a:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007b0e:	6802      	ldr	r2, [r0, #0]
 8007b10:	6813      	ldr	r3, [r2, #0]
 8007b12:	f023 0301 	bic.w	r3, r3, #1
 8007b16:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007b18:	f7ff fc92 	bl	8007440 <HAL_GetTick>
 8007b1c:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f013 0f01 	tst.w	r3, #1
 8007b26:	d00c      	beq.n	8007b42 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007b28:	f7ff fc8a 	bl	8007440 <HAL_GetTick>
 8007b2c:	1b83      	subs	r3, r0, r6
 8007b2e:	2b0a      	cmp	r3, #10
 8007b30:	d9f5      	bls.n	8007b1e <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007b32:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b38:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8007b3a:	2305      	movs	r3, #5
 8007b3c:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8007b40:	e7e0      	b.n	8007b04 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007b42:	2500      	movs	r5, #0
 8007b44:	6265      	str	r5, [r4, #36]	@ 0x24
    return HAL_OK;
 8007b46:	e7dd      	b.n	8007b04 <HAL_CAN_Start+0x18>

08007b48 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8007b48:	b530      	push	{r4, r5, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007b4a:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007b4e:	6804      	ldr	r4, [r0, #0]
 8007b50:	68a4      	ldr	r4, [r4, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007b52:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007b56:	fa5f fc8c 	uxtb.w	ip, ip
 8007b5a:	f1bc 0f01 	cmp.w	ip, #1
 8007b5e:	d862      	bhi.n	8007c26 <HAL_CAN_AddTxMessage+0xde>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007b60:	f014 5fe0 	tst.w	r4, #469762048	@ 0x1c000000
 8007b64:	d059      	beq.n	8007c1a <HAL_CAN_AddTxMessage+0xd2>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007b66:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007b6a:	2401      	movs	r4, #1
 8007b6c:	fa04 f40c 	lsl.w	r4, r4, ip
 8007b70:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007b72:	688b      	ldr	r3, [r1, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d13d      	bne.n	8007bf4 <HAL_CAN_AddTxMessage+0xac>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007b78:	680d      	ldr	r5, [r1, #0]
                                                           pHeader->RTR);
 8007b7a:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007b7c:	6804      	ldr	r4, [r0, #0]
 8007b7e:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 8007b82:	f10c 0318 	add.w	r3, ip, #24
 8007b86:	011b      	lsls	r3, r3, #4
 8007b88:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007b8a:	6803      	ldr	r3, [r0, #0]
 8007b8c:	690c      	ldr	r4, [r1, #16]
 8007b8e:	f10c 0e18 	add.w	lr, ip, #24
 8007b92:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 8007b96:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007b98:	7d0b      	ldrb	r3, [r1, #20]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d035      	beq.n	8007c0a <HAL_CAN_AddTxMessage+0xc2>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007b9e:	79d1      	ldrb	r1, [r2, #7]
 8007ba0:	7993      	ldrb	r3, [r2, #6]
 8007ba2:	041b      	lsls	r3, r3, #16
 8007ba4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007ba8:	7951      	ldrb	r1, [r2, #5]
 8007baa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007bae:	7914      	ldrb	r4, [r2, #4]
 8007bb0:	6801      	ldr	r1, [r0, #0]
 8007bb2:	4323      	orrs	r3, r4
 8007bb4:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8007bb8:	f8c1 318c 	str.w	r3, [r1, #396]	@ 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007bbc:	78d1      	ldrb	r1, [r2, #3]
 8007bbe:	7893      	ldrb	r3, [r2, #2]
 8007bc0:	041b      	lsls	r3, r3, #16
 8007bc2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007bc6:	7851      	ldrb	r1, [r2, #1]
 8007bc8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007bcc:	7811      	ldrb	r1, [r2, #0]
 8007bce:	6802      	ldr	r2, [r0, #0]
 8007bd0:	430b      	orrs	r3, r1
 8007bd2:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8007bd6:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007bda:	6802      	ldr	r2, [r0, #0]
 8007bdc:	f10c 0c18 	add.w	ip, ip, #24
 8007be0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8007be4:	f852 300c 	ldr.w	r3, [r2, ip]
 8007be8:	f043 0301 	orr.w	r3, r3, #1
 8007bec:	f842 300c 	str.w	r3, [r2, ip]

      /* Return function status */
      return HAL_OK;
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	e01d      	b.n	8007c30 <HAL_CAN_AddTxMessage+0xe8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007bf4:	684c      	ldr	r4, [r1, #4]
 8007bf6:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                                                           pHeader->RTR);
 8007bfa:	68cc      	ldr	r4, [r1, #12]
                                                           pHeader->IDE |
 8007bfc:	4323      	orrs	r3, r4
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007bfe:	f10c 0418 	add.w	r4, ip, #24
 8007c02:	0124      	lsls	r4, r4, #4
 8007c04:	6805      	ldr	r5, [r0, #0]
 8007c06:	512b      	str	r3, [r5, r4]
 8007c08:	e7bf      	b.n	8007b8a <HAL_CAN_AddTxMessage+0x42>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007c0a:	6803      	ldr	r3, [r0, #0]
 8007c0c:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 8007c10:	6859      	ldr	r1, [r3, #4]
 8007c12:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8007c16:	6059      	str	r1, [r3, #4]
 8007c18:	e7c1      	b.n	8007b9e <HAL_CAN_AddTxMessage+0x56>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007c1a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007c1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c20:	6243      	str	r3, [r0, #36]	@ 0x24

      return HAL_ERROR;
 8007c22:	2001      	movs	r0, #1
 8007c24:	e004      	b.n	8007c30 <HAL_CAN_AddTxMessage+0xe8>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007c26:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007c28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c2c:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8007c2e:	2001      	movs	r0, #1
  }
}
 8007c30:	bd30      	pop	{r4, r5, pc}

08007c32 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007c32:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8007c36:	3b01      	subs	r3, #1
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d901      	bls.n	8007c42 <HAL_CAN_GetTxMailboxesFreeLevel+0x10>
  uint32_t freelevel = 0U;
 8007c3e:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 8007c40:	4770      	bx	lr
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007c42:	6803      	ldr	r3, [r0, #0]
 8007c44:	6898      	ldr	r0, [r3, #8]
 8007c46:	f010 6080 	ands.w	r0, r0, #67108864	@ 0x4000000
 8007c4a:	d000      	beq.n	8007c4e <HAL_CAN_GetTxMailboxesFreeLevel+0x1c>
      freelevel++;
 8007c4c:	2001      	movs	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	f012 6f00 	tst.w	r2, #134217728	@ 0x8000000
 8007c54:	d000      	beq.n	8007c58 <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
      freelevel++;
 8007c56:	3001      	adds	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8007c5e:	d0ef      	beq.n	8007c40 <HAL_CAN_GetTxMailboxesFreeLevel+0xe>
      freelevel++;
 8007c60:	3001      	adds	r0, #1
 8007c62:	4770      	bx	lr

08007c64 <HAL_CAN_GetRxMessage>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8007c64:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007c68:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007c6c:	fa5f fc8c 	uxtb.w	ip, ip
 8007c70:	f1bc 0f01 	cmp.w	ip, #1
 8007c74:	f200 80a5 	bhi.w	8007dc2 <HAL_CAN_GetRxMessage+0x15e>
{
 8007c78:	b430      	push	{r4, r5}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007c7a:	b951      	cbnz	r1, 8007c92 <HAL_CAN_GetRxMessage+0x2e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007c7c:	6804      	ldr	r4, [r0, #0]
 8007c7e:	68e4      	ldr	r4, [r4, #12]
 8007c80:	f014 0f03 	tst.w	r4, #3
 8007c84:	d110      	bne.n	8007ca8 <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007c86:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007c88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c8c:	6243      	str	r3, [r0, #36]	@ 0x24

        return HAL_ERROR;
 8007c8e:	2001      	movs	r0, #1
 8007c90:	e07e      	b.n	8007d90 <HAL_CAN_GetRxMessage+0x12c>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007c92:	6804      	ldr	r4, [r0, #0]
 8007c94:	6924      	ldr	r4, [r4, #16]
 8007c96:	f014 0f03 	tst.w	r4, #3
 8007c9a:	d105      	bne.n	8007ca8 <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007c9c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007c9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ca2:	6243      	str	r3, [r0, #36]	@ 0x24

        return HAL_ERROR;
 8007ca4:	2001      	movs	r0, #1
 8007ca6:	e073      	b.n	8007d90 <HAL_CAN_GetRxMessage+0x12c>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007ca8:	6805      	ldr	r5, [r0, #0]
 8007caa:	f101 041b 	add.w	r4, r1, #27
 8007cae:	0124      	lsls	r4, r4, #4
 8007cb0:	592c      	ldr	r4, [r5, r4]
 8007cb2:	f004 0404 	and.w	r4, r4, #4
 8007cb6:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007cb8:	2c00      	cmp	r4, #0
 8007cba:	d16b      	bne.n	8007d94 <HAL_CAN_GetRxMessage+0x130>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007cbc:	6805      	ldr	r5, [r0, #0]
 8007cbe:	f101 041b 	add.w	r4, r1, #27
 8007cc2:	0124      	lsls	r4, r4, #4
 8007cc4:	592c      	ldr	r4, [r5, r4]
 8007cc6:	0d64      	lsrs	r4, r4, #21
 8007cc8:	6014      	str	r4, [r2, #0]
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007cca:	6804      	ldr	r4, [r0, #0]
 8007ccc:	f101 0c1b 	add.w	ip, r1, #27
 8007cd0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8007cd4:	f854 400c 	ldr.w	r4, [r4, ip]
 8007cd8:	f004 0402 	and.w	r4, r4, #2
 8007cdc:	60d4      	str	r4, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8007cde:	6804      	ldr	r4, [r0, #0]
 8007ce0:	44a4      	add	ip, r4
 8007ce2:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8007ce6:	f015 0f08 	tst.w	r5, #8
 8007cea:	d05b      	beq.n	8007da4 <HAL_CAN_GetRxMessage+0x140>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8007cec:	2408      	movs	r4, #8
 8007cee:	6114      	str	r4, [r2, #16]
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007cf0:	6804      	ldr	r4, [r0, #0]
 8007cf2:	f101 0c1b 	add.w	ip, r1, #27
 8007cf6:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 8007cfa:	6864      	ldr	r4, [r4, #4]
 8007cfc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8007d00:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007d02:	6804      	ldr	r4, [r0, #0]
 8007d04:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 8007d08:	6864      	ldr	r4, [r4, #4]
 8007d0a:	0c24      	lsrs	r4, r4, #16
 8007d0c:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007d0e:	6802      	ldr	r2, [r0, #0]
 8007d10:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007d14:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8007d18:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007d1a:	6802      	ldr	r2, [r0, #0]
 8007d1c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007d20:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8007d24:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8007d28:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007d2a:	6802      	ldr	r2, [r0, #0]
 8007d2c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007d30:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8007d34:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8007d38:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007d3a:	6802      	ldr	r2, [r0, #0]
 8007d3c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007d40:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8007d44:	0e12      	lsrs	r2, r2, #24
 8007d46:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007d48:	6802      	ldr	r2, [r0, #0]
 8007d4a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007d4e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8007d52:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007d54:	6802      	ldr	r2, [r0, #0]
 8007d56:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007d5a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8007d5e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8007d62:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007d64:	6802      	ldr	r2, [r0, #0]
 8007d66:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007d6a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8007d6e:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8007d72:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007d74:	6802      	ldr	r2, [r0, #0]
 8007d76:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007d7a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8007d7e:	0e12      	lsrs	r2, r2, #24
 8007d80:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007d82:	b9c1      	cbnz	r1, 8007db6 <HAL_CAN_GetRxMessage+0x152>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007d84:	6802      	ldr	r2, [r0, #0]
 8007d86:	68d3      	ldr	r3, [r2, #12]
 8007d88:	f043 0320 	orr.w	r3, r3, #32
 8007d8c:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 8007d8e:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8007d90:	bc30      	pop	{r4, r5}
 8007d92:	4770      	bx	lr
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007d94:	6805      	ldr	r5, [r0, #0]
 8007d96:	f101 041b 	add.w	r4, r1, #27
 8007d9a:	0124      	lsls	r4, r4, #4
 8007d9c:	592c      	ldr	r4, [r5, r4]
 8007d9e:	08e4      	lsrs	r4, r4, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8007da0:	6054      	str	r4, [r2, #4]
 8007da2:	e792      	b.n	8007cca <HAL_CAN_GetRxMessage+0x66>
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007da4:	f101 051b 	add.w	r5, r1, #27
 8007da8:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8007dac:	6864      	ldr	r4, [r4, #4]
 8007dae:	f004 040f 	and.w	r4, r4, #15
 8007db2:	6114      	str	r4, [r2, #16]
 8007db4:	e79c      	b.n	8007cf0 <HAL_CAN_GetRxMessage+0x8c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007db6:	6802      	ldr	r2, [r0, #0]
 8007db8:	6913      	ldr	r3, [r2, #16]
 8007dba:	f043 0320 	orr.w	r3, r3, #32
 8007dbe:	6113      	str	r3, [r2, #16]
 8007dc0:	e7e5      	b.n	8007d8e <HAL_CAN_GetRxMessage+0x12a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007dc2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007dc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007dc8:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8007dca:	2001      	movs	r0, #1
}
 8007dcc:	4770      	bx	lr

08007dce <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8007dce:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d905      	bls.n	8007de6 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007dda:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007ddc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007de0:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8007de2:	2001      	movs	r0, #1
  }
}
 8007de4:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007de6:	6802      	ldr	r2, [r0, #0]
 8007de8:	6953      	ldr	r3, [r2, #20]
 8007dea:	430b      	orrs	r3, r1
 8007dec:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8007dee:	2000      	movs	r0, #0
 8007df0:	4770      	bx	lr

08007df2 <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007df2:	4770      	bx	lr

08007df4 <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007df4:	4770      	bx	lr

08007df6 <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007df6:	4770      	bx	lr

08007df8 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007df8:	4770      	bx	lr

08007dfa <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007dfa:	4770      	bx	lr

08007dfc <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007dfc:	4770      	bx	lr

08007dfe <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007dfe:	4770      	bx	lr

08007e00 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007e00:	4770      	bx	lr

08007e02 <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007e02:	4770      	bx	lr

08007e04 <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007e04:	4770      	bx	lr

08007e06 <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007e06:	4770      	bx	lr

08007e08 <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007e08:	4770      	bx	lr

08007e0a <HAL_CAN_IRQHandler>:
{
 8007e0a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0e:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007e10:	6803      	ldr	r3, [r0, #0]
 8007e12:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007e14:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007e18:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007e1a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007e1e:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007e22:	f8d3 b018 	ldr.w	fp, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007e26:	f014 0601 	ands.w	r6, r4, #1
 8007e2a:	d03b      	beq.n	8007ea4 <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007e2c:	f017 0601 	ands.w	r6, r7, #1
 8007e30:	d016      	beq.n	8007e60 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007e32:	2201      	movs	r2, #1
 8007e34:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007e36:	f017 0f02 	tst.w	r7, #2
 8007e3a:	d108      	bne.n	8007e4e <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007e3c:	f017 0f04 	tst.w	r7, #4
 8007e40:	d10c      	bne.n	8007e5c <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007e42:	f017 0608 	ands.w	r6, r7, #8
 8007e46:	d006      	beq.n	8007e56 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007e48:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8007e4c:	e008      	b.n	8007e60 <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007e4e:	f7ff ffd0 	bl	8007df2 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007e52:	2600      	movs	r6, #0
 8007e54:	e004      	b.n	8007e60 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007e56:	f7ff ffcf 	bl	8007df8 <HAL_CAN_TxMailbox0AbortCallback>
 8007e5a:	e001      	b.n	8007e60 <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007e5c:	f44f 6600 	mov.w	r6, #2048	@ 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007e60:	f417 7f80 	tst.w	r7, #256	@ 0x100
 8007e64:	d00d      	beq.n	8007e82 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007e66:	682b      	ldr	r3, [r5, #0]
 8007e68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e6c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007e6e:	f417 7f00 	tst.w	r7, #512	@ 0x200
 8007e72:	f040 8096 	bne.w	8007fa2 <HAL_CAN_IRQHandler+0x198>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007e76:	f417 6f80 	tst.w	r7, #1024	@ 0x400
 8007e7a:	f000 8096 	beq.w	8007faa <HAL_CAN_IRQHandler+0x1a0>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007e7e:	f446 5600 	orr.w	r6, r6, #8192	@ 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007e82:	f417 3f80 	tst.w	r7, #65536	@ 0x10000
 8007e86:	d00d      	beq.n	8007ea4 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007e88:	682b      	ldr	r3, [r5, #0]
 8007e8a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007e8e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007e90:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8007e94:	f040 8093 	bne.w	8007fbe <HAL_CAN_IRQHandler+0x1b4>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007e98:	f417 2f80 	tst.w	r7, #262144	@ 0x40000
 8007e9c:	f000 8093 	beq.w	8007fc6 <HAL_CAN_IRQHandler+0x1bc>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007ea0:	f446 4600 	orr.w	r6, r6, #32768	@ 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007ea4:	f014 0f08 	tst.w	r4, #8
 8007ea8:	d007      	beq.n	8007eba <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007eaa:	f01a 0f10 	tst.w	sl, #16
 8007eae:	d004      	beq.n	8007eba <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007eb0:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	2210      	movs	r2, #16
 8007eb8:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007eba:	f014 0f04 	tst.w	r4, #4
 8007ebe:	d003      	beq.n	8007ec8 <HAL_CAN_IRQHandler+0xbe>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007ec0:	f01a 0f08 	tst.w	sl, #8
 8007ec4:	f040 8089 	bne.w	8007fda <HAL_CAN_IRQHandler+0x1d0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007ec8:	f014 0f02 	tst.w	r4, #2
 8007ecc:	d005      	beq.n	8007eda <HAL_CAN_IRQHandler+0xd0>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007ece:	682b      	ldr	r3, [r5, #0]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	f013 0f03 	tst.w	r3, #3
 8007ed6:	f040 8087 	bne.w	8007fe8 <HAL_CAN_IRQHandler+0x1de>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007eda:	f014 0f40 	tst.w	r4, #64	@ 0x40
 8007ede:	d007      	beq.n	8007ef0 <HAL_CAN_IRQHandler+0xe6>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007ee0:	f019 0f10 	tst.w	r9, #16
 8007ee4:	d004      	beq.n	8007ef0 <HAL_CAN_IRQHandler+0xe6>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007ee6:	f446 6680 	orr.w	r6, r6, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007eea:	682b      	ldr	r3, [r5, #0]
 8007eec:	2210      	movs	r2, #16
 8007eee:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007ef0:	f014 0f20 	tst.w	r4, #32
 8007ef4:	d002      	beq.n	8007efc <HAL_CAN_IRQHandler+0xf2>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007ef6:	f019 0f08 	tst.w	r9, #8
 8007efa:	d179      	bne.n	8007ff0 <HAL_CAN_IRQHandler+0x1e6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007efc:	f014 0f10 	tst.w	r4, #16
 8007f00:	d004      	beq.n	8007f0c <HAL_CAN_IRQHandler+0x102>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007f02:	682b      	ldr	r3, [r5, #0]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	f013 0f03 	tst.w	r3, #3
 8007f0a:	d178      	bne.n	8007ffe <HAL_CAN_IRQHandler+0x1f4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007f0c:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
 8007f10:	d002      	beq.n	8007f18 <HAL_CAN_IRQHandler+0x10e>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007f12:	f018 0f10 	tst.w	r8, #16
 8007f16:	d176      	bne.n	8008006 <HAL_CAN_IRQHandler+0x1fc>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007f18:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
 8007f1c:	d002      	beq.n	8007f24 <HAL_CAN_IRQHandler+0x11a>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007f1e:	f018 0f08 	tst.w	r8, #8
 8007f22:	d177      	bne.n	8008014 <HAL_CAN_IRQHandler+0x20a>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007f24:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8007f28:	d037      	beq.n	8007f9a <HAL_CAN_IRQHandler+0x190>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007f2a:	f018 0f04 	tst.w	r8, #4
 8007f2e:	d031      	beq.n	8007f94 <HAL_CAN_IRQHandler+0x18a>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007f30:	f414 7f80 	tst.w	r4, #256	@ 0x100
 8007f34:	d004      	beq.n	8007f40 <HAL_CAN_IRQHandler+0x136>
 8007f36:	f01b 0f01 	tst.w	fp, #1
 8007f3a:	d001      	beq.n	8007f40 <HAL_CAN_IRQHandler+0x136>
        errorcode |= HAL_CAN_ERROR_EWG;
 8007f3c:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007f40:	f414 7f00 	tst.w	r4, #512	@ 0x200
 8007f44:	d004      	beq.n	8007f50 <HAL_CAN_IRQHandler+0x146>
 8007f46:	f01b 0f02 	tst.w	fp, #2
 8007f4a:	d001      	beq.n	8007f50 <HAL_CAN_IRQHandler+0x146>
        errorcode |= HAL_CAN_ERROR_EPV;
 8007f4c:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007f50:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 8007f54:	d004      	beq.n	8007f60 <HAL_CAN_IRQHandler+0x156>
 8007f56:	f01b 0f04 	tst.w	fp, #4
 8007f5a:	d001      	beq.n	8007f60 <HAL_CAN_IRQHandler+0x156>
        errorcode |= HAL_CAN_ERROR_BOF;
 8007f5c:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007f60:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 8007f64:	d016      	beq.n	8007f94 <HAL_CAN_IRQHandler+0x18a>
 8007f66:	f01b 0b70 	ands.w	fp, fp, #112	@ 0x70
 8007f6a:	d013      	beq.n	8007f94 <HAL_CAN_IRQHandler+0x18a>
        switch (esrflags & CAN_ESR_LEC)
 8007f6c:	f1bb 0f40 	cmp.w	fp, #64	@ 0x40
 8007f70:	d066      	beq.n	8008040 <HAL_CAN_IRQHandler+0x236>
 8007f72:	d856      	bhi.n	8008022 <HAL_CAN_IRQHandler+0x218>
 8007f74:	f1bb 0f20 	cmp.w	fp, #32
 8007f78:	d05c      	beq.n	8008034 <HAL_CAN_IRQHandler+0x22a>
 8007f7a:	f1bb 0f30 	cmp.w	fp, #48	@ 0x30
 8007f7e:	d05c      	beq.n	800803a <HAL_CAN_IRQHandler+0x230>
 8007f80:	f1bb 0f10 	cmp.w	fp, #16
 8007f84:	d101      	bne.n	8007f8a <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_STF;
 8007f86:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007f8a:	682a      	ldr	r2, [r5, #0]
 8007f8c:	6993      	ldr	r3, [r2, #24]
 8007f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f92:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007f94:	682b      	ldr	r3, [r5, #0]
 8007f96:	2204      	movs	r2, #4
 8007f98:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007f9a:	2e00      	cmp	r6, #0
 8007f9c:	d156      	bne.n	800804c <HAL_CAN_IRQHandler+0x242>
}
 8007f9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	f7ff ff26 	bl	8007df4 <HAL_CAN_TxMailbox1CompleteCallback>
 8007fa8:	e76b      	b.n	8007e82 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007faa:	f417 6f00 	tst.w	r7, #2048	@ 0x800
 8007fae:	d002      	beq.n	8007fb6 <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007fb0:	f446 4680 	orr.w	r6, r6, #16384	@ 0x4000
 8007fb4:	e765      	b.n	8007e82 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f7ff ff1f 	bl	8007dfa <HAL_CAN_TxMailbox1AbortCallback>
 8007fbc:	e761      	b.n	8007e82 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	f7ff ff19 	bl	8007df6 <HAL_CAN_TxMailbox2CompleteCallback>
 8007fc4:	e76e      	b.n	8007ea4 <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007fc6:	f417 2f00 	tst.w	r7, #524288	@ 0x80000
 8007fca:	d002      	beq.n	8007fd2 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007fcc:	f446 3680 	orr.w	r6, r6, #65536	@ 0x10000
 8007fd0:	e768      	b.n	8007ea4 <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f7ff ff12 	bl	8007dfc <HAL_CAN_TxMailbox2AbortCallback>
 8007fd8:	e764      	b.n	8007ea4 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007fda:	682b      	ldr	r3, [r5, #0]
 8007fdc:	2208      	movs	r2, #8
 8007fde:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	f7ff ff0c 	bl	8007dfe <HAL_CAN_RxFifo0FullCallback>
 8007fe6:	e76f      	b.n	8007ec8 <HAL_CAN_IRQHandler+0xbe>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007fe8:	4628      	mov	r0, r5
 8007fea:	f7fe fc13 	bl	8006814 <HAL_CAN_RxFifo0MsgPendingCallback>
 8007fee:	e774      	b.n	8007eda <HAL_CAN_IRQHandler+0xd0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007ff0:	682b      	ldr	r3, [r5, #0]
 8007ff2:	2208      	movs	r2, #8
 8007ff4:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f7ff ff03 	bl	8007e02 <HAL_CAN_RxFifo1FullCallback>
 8007ffc:	e77e      	b.n	8007efc <HAL_CAN_IRQHandler+0xf2>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007ffe:	4628      	mov	r0, r5
 8008000:	f7ff fefe 	bl	8007e00 <HAL_CAN_RxFifo1MsgPendingCallback>
 8008004:	e782      	b.n	8007f0c <HAL_CAN_IRQHandler+0x102>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8008006:	682b      	ldr	r3, [r5, #0]
 8008008:	2210      	movs	r2, #16
 800800a:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800800c:	4628      	mov	r0, r5
 800800e:	f7ff fef9 	bl	8007e04 <HAL_CAN_SleepCallback>
 8008012:	e781      	b.n	8007f18 <HAL_CAN_IRQHandler+0x10e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	2208      	movs	r2, #8
 8008018:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800801a:	4628      	mov	r0, r5
 800801c:	f7ff fef3 	bl	8007e06 <HAL_CAN_WakeUpFromRxMsgCallback>
 8008020:	e780      	b.n	8007f24 <HAL_CAN_IRQHandler+0x11a>
        switch (esrflags & CAN_ESR_LEC)
 8008022:	f1bb 0f50 	cmp.w	fp, #80	@ 0x50
 8008026:	d00e      	beq.n	8008046 <HAL_CAN_IRQHandler+0x23c>
 8008028:	f1bb 0f60 	cmp.w	fp, #96	@ 0x60
 800802c:	d1ad      	bne.n	8007f8a <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_CRC;
 800802e:	f446 7680 	orr.w	r6, r6, #256	@ 0x100
            break;
 8008032:	e7aa      	b.n	8007f8a <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_FOR;
 8008034:	f046 0610 	orr.w	r6, r6, #16
            break;
 8008038:	e7a7      	b.n	8007f8a <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_ACK;
 800803a:	f046 0620 	orr.w	r6, r6, #32
            break;
 800803e:	e7a4      	b.n	8007f8a <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_BR;
 8008040:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
            break;
 8008044:	e7a1      	b.n	8007f8a <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_BD;
 8008046:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
            break;
 800804a:	e79e      	b.n	8007f8a <HAL_CAN_IRQHandler+0x180>
    hcan->ErrorCode |= errorcode;
 800804c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800804e:	4333      	orrs	r3, r6
 8008050:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 8008052:	4628      	mov	r0, r5
 8008054:	f7ff fed8 	bl	8007e08 <HAL_CAN_ErrorCallback>
}
 8008058:	e7a1      	b.n	8007f9e <HAL_CAN_IRQHandler+0x194>
	...

0800805c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800805c:	2800      	cmp	r0, #0
 800805e:	db08      	blt.n	8008072 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008060:	0109      	lsls	r1, r1, #4
 8008062:	b2c9      	uxtb	r1, r1
 8008064:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8008068:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800806c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8008070:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008072:	f000 000f 	and.w	r0, r0, #15
 8008076:	0109      	lsls	r1, r1, #4
 8008078:	b2c9      	uxtb	r1, r1
 800807a:	4b01      	ldr	r3, [pc, #4]	@ (8008080 <__NVIC_SetPriority+0x24>)
 800807c:	5419      	strb	r1, [r3, r0]
  }
}
 800807e:	4770      	bx	lr
 8008080:	e000ed14 	.word	0xe000ed14

08008084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008084:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008086:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800808a:	f1c0 0c07 	rsb	ip, r0, #7
 800808e:	f1bc 0f04 	cmp.w	ip, #4
 8008092:	bf28      	it	cs
 8008094:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008098:	1d03      	adds	r3, r0, #4
 800809a:	2b06      	cmp	r3, #6
 800809c:	d90f      	bls.n	80080be <NVIC_EncodePriority+0x3a>
 800809e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080a0:	f04f 3eff 	mov.w	lr, #4294967295
 80080a4:	fa0e f00c 	lsl.w	r0, lr, ip
 80080a8:	ea21 0100 	bic.w	r1, r1, r0
 80080ac:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80080ae:	fa0e fe03 	lsl.w	lr, lr, r3
 80080b2:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80080b6:	ea41 0002 	orr.w	r0, r1, r2
 80080ba:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80080be:	2300      	movs	r3, #0
 80080c0:	e7ee      	b.n	80080a0 <NVIC_EncodePriority+0x1c>
	...

080080c4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80080c4:	4a07      	ldr	r2, [pc, #28]	@ (80080e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80080c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80080c8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80080cc:	041b      	lsls	r3, r3, #16
 80080ce:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80080d0:	0200      	lsls	r0, r0, #8
 80080d2:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80080d6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80080d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80080dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80080e0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80080e2:	4770      	bx	lr
 80080e4:	e000ed00 	.word	0xe000ed00

080080e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80080e8:	b510      	push	{r4, lr}
 80080ea:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80080ec:	4b05      	ldr	r3, [pc, #20]	@ (8008104 <HAL_NVIC_SetPriority+0x1c>)
 80080ee:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80080f0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80080f4:	f7ff ffc6 	bl	8008084 <NVIC_EncodePriority>
 80080f8:	4601      	mov	r1, r0
 80080fa:	4620      	mov	r0, r4
 80080fc:	f7ff ffae 	bl	800805c <__NVIC_SetPriority>
}
 8008100:	bd10      	pop	{r4, pc}
 8008102:	bf00      	nop
 8008104:	e000ed00 	.word	0xe000ed00

08008108 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008108:	2800      	cmp	r0, #0
 800810a:	db07      	blt.n	800811c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800810c:	f000 021f 	and.w	r2, r0, #31
 8008110:	0940      	lsrs	r0, r0, #5
 8008112:	2301      	movs	r3, #1
 8008114:	4093      	lsls	r3, r2
 8008116:	4a02      	ldr	r2, [pc, #8]	@ (8008120 <HAL_NVIC_EnableIRQ+0x18>)
 8008118:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	e000e100 	.word	0xe000e100

08008124 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008124:	3801      	subs	r0, #1
 8008126:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800812a:	d20b      	bcs.n	8008144 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800812c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008130:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008132:	4a05      	ldr	r2, [pc, #20]	@ (8008148 <HAL_SYSTICK_Config+0x24>)
 8008134:	21f0      	movs	r1, #240	@ 0xf0
 8008136:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800813a:	2000      	movs	r0, #0
 800813c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800813e:	2207      	movs	r2, #7
 8008140:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008142:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008144:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008146:	4770      	bx	lr
 8008148:	e000ed00 	.word	0xe000ed00

0800814c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800814c:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800814e:	2401      	movs	r4, #1
 8008150:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8008152:	40ac      	lsls	r4, r5
 8008154:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8008156:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008158:	6804      	ldr	r4, [r0, #0]
 800815a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800815c:	6843      	ldr	r3, [r0, #4]
 800815e:	2b10      	cmp	r3, #16
 8008160:	d005      	beq.n	800816e <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8008162:	6803      	ldr	r3, [r0, #0]
 8008164:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8008166:	6803      	ldr	r3, [r0, #0]
 8008168:	60da      	str	r2, [r3, #12]
  }
}
 800816a:	bc30      	pop	{r4, r5}
 800816c:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800816e:	6803      	ldr	r3, [r0, #0]
 8008170:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8008172:	6803      	ldr	r3, [r0, #0]
 8008174:	60d9      	str	r1, [r3, #12]
 8008176:	e7f8      	b.n	800816a <DMA_SetConfig+0x1e>

08008178 <HAL_DMA_Init>:
  if(hdma == NULL)
 8008178:	2800      	cmp	r0, #0
 800817a:	d038      	beq.n	80081ee <HAL_DMA_Init+0x76>
{
 800817c:	b410      	push	{r4}
 800817e:	4602      	mov	r2, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008180:	6801      	ldr	r1, [r0, #0]
 8008182:	4b1c      	ldr	r3, [pc, #112]	@ (80081f4 <HAL_DMA_Init+0x7c>)
 8008184:	4299      	cmp	r1, r3
 8008186:	d827      	bhi.n	80081d8 <HAL_DMA_Init+0x60>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008188:	4b1b      	ldr	r3, [pc, #108]	@ (80081f8 <HAL_DMA_Init+0x80>)
 800818a:	440b      	add	r3, r1
 800818c:	481b      	ldr	r0, [pc, #108]	@ (80081fc <HAL_DMA_Init+0x84>)
 800818e:	fba0 0303 	umull	r0, r3, r0, r3
 8008192:	091b      	lsrs	r3, r3, #4
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	6413      	str	r3, [r2, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8008198:	4b19      	ldr	r3, [pc, #100]	@ (8008200 <HAL_DMA_Init+0x88>)
 800819a:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 800819c:	2302      	movs	r3, #2
 800819e:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  tmp = hdma->Instance->CCR;
 80081a2:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80081a4:	f36f 100d 	bfc	r0, #4, #10
  tmp |=  hdma->Init.Direction        |
 80081a8:	6853      	ldr	r3, [r2, #4]
 80081aa:	6894      	ldr	r4, [r2, #8]
 80081ac:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081ae:	68d4      	ldr	r4, [r2, #12]
 80081b0:	4323      	orrs	r3, r4
 80081b2:	6914      	ldr	r4, [r2, #16]
 80081b4:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081b6:	6954      	ldr	r4, [r2, #20]
 80081b8:	4323      	orrs	r3, r4
 80081ba:	6994      	ldr	r4, [r2, #24]
 80081bc:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80081be:	69d4      	ldr	r4, [r2, #28]
 80081c0:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80081c2:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 80081c4:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081c6:	2000      	movs	r0, #0
 80081c8:	6390      	str	r0, [r2, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80081ca:	2301      	movs	r3, #1
 80081cc:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  hdma->Lock = HAL_UNLOCKED;
 80081d0:	f882 0020 	strb.w	r0, [r2, #32]
}
 80081d4:	bc10      	pop	{r4}
 80081d6:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80081d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008204 <HAL_DMA_Init+0x8c>)
 80081da:	440b      	add	r3, r1
 80081dc:	4807      	ldr	r0, [pc, #28]	@ (80081fc <HAL_DMA_Init+0x84>)
 80081de:	fba0 0303 	umull	r0, r3, r0, r3
 80081e2:	091b      	lsrs	r3, r3, #4
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	6413      	str	r3, [r2, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80081e8:	4b07      	ldr	r3, [pc, #28]	@ (8008208 <HAL_DMA_Init+0x90>)
 80081ea:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80081ec:	e7d6      	b.n	800819c <HAL_DMA_Init+0x24>
    return HAL_ERROR;
 80081ee:	2001      	movs	r0, #1
}
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	40020407 	.word	0x40020407
 80081f8:	bffdfff8 	.word	0xbffdfff8
 80081fc:	cccccccd 	.word	0xcccccccd
 8008200:	40020000 	.word	0x40020000
 8008204:	bffdfbf8 	.word	0xbffdfbf8
 8008208:	40020400 	.word	0x40020400

0800820c <HAL_DMA_Start_IT>:
{
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8008210:	f890 0020 	ldrb.w	r0, [r0, #32]
 8008214:	2801      	cmp	r0, #1
 8008216:	d032      	beq.n	800827e <HAL_DMA_Start_IT+0x72>
 8008218:	2001      	movs	r0, #1
 800821a:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800821e:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 8008222:	b2c0      	uxtb	r0, r0
 8008224:	2801      	cmp	r0, #1
 8008226:	d004      	beq.n	8008232 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 8008228:	2300      	movs	r3, #0
 800822a:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 800822e:	2002      	movs	r0, #2
}
 8008230:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8008232:	2002      	movs	r0, #2
 8008234:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008238:	2000      	movs	r0, #0
 800823a:	63a0      	str	r0, [r4, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 800823c:	6825      	ldr	r5, [r4, #0]
 800823e:	6828      	ldr	r0, [r5, #0]
 8008240:	f020 0001 	bic.w	r0, r0, #1
 8008244:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008246:	4620      	mov	r0, r4
 8008248:	f7ff ff80 	bl	800814c <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 800824c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800824e:	b15b      	cbz	r3, 8008268 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008250:	6822      	ldr	r2, [r4, #0]
 8008252:	6813      	ldr	r3, [r2, #0]
 8008254:	f043 030e 	orr.w	r3, r3, #14
 8008258:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800825a:	6822      	ldr	r2, [r4, #0]
 800825c:	6813      	ldr	r3, [r2, #0]
 800825e:	f043 0301 	orr.w	r3, r3, #1
 8008262:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008264:	2000      	movs	r0, #0
 8008266:	e7e3      	b.n	8008230 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008268:	6822      	ldr	r2, [r4, #0]
 800826a:	6813      	ldr	r3, [r2, #0]
 800826c:	f023 0304 	bic.w	r3, r3, #4
 8008270:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008272:	6822      	ldr	r2, [r4, #0]
 8008274:	6813      	ldr	r3, [r2, #0]
 8008276:	f043 030a 	orr.w	r3, r3, #10
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	e7ed      	b.n	800825a <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 800827e:	2002      	movs	r0, #2
 8008280:	e7d6      	b.n	8008230 <HAL_DMA_Start_IT+0x24>

08008282 <HAL_DMA_Abort>:
{
 8008282:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008284:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 8008288:	b2d2      	uxtb	r2, r2
 800828a:	2a02      	cmp	r2, #2
 800828c:	d006      	beq.n	800829c <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800828e:	2204      	movs	r2, #4
 8008290:	6382      	str	r2, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8008292:	2200      	movs	r2, #0
 8008294:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8008298:	2001      	movs	r0, #1
 800829a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800829c:	6801      	ldr	r1, [r0, #0]
 800829e:	680a      	ldr	r2, [r1, #0]
 80082a0:	f022 020e 	bic.w	r2, r2, #14
 80082a4:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80082a6:	6801      	ldr	r1, [r0, #0]
 80082a8:	680a      	ldr	r2, [r1, #0]
 80082aa:	f022 0201 	bic.w	r2, r2, #1
 80082ae:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80082b0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80082b2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80082b4:	2101      	movs	r1, #1
 80082b6:	fa01 f202 	lsl.w	r2, r1, r2
 80082ba:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 80082bc:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  __HAL_UNLOCK(hdma);      
 80082c0:	2000      	movs	r0, #0
 80082c2:	f883 0020 	strb.w	r0, [r3, #32]
}
 80082c6:	4770      	bx	lr

080082c8 <HAL_DMA_Abort_IT>:
{  
 80082c8:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80082ca:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d003      	beq.n	80082dc <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082d4:	2304      	movs	r3, #4
 80082d6:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 80082d8:	2001      	movs	r0, #1
}
 80082da:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80082dc:	6802      	ldr	r2, [r0, #0]
 80082de:	6813      	ldr	r3, [r2, #0]
 80082e0:	f023 030e 	bic.w	r3, r3, #14
 80082e4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80082e6:	6802      	ldr	r2, [r0, #0]
 80082e8:	6813      	ldr	r3, [r2, #0]
 80082ea:	f023 0301 	bic.w	r3, r3, #1
 80082ee:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80082f0:	6803      	ldr	r3, [r0, #0]
 80082f2:	4a4c      	ldr	r2, [pc, #304]	@ (8008424 <HAL_DMA_Abort_IT+0x15c>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d94e      	bls.n	8008396 <HAL_DMA_Abort_IT+0xce>
 80082f8:	3a78      	subs	r2, #120	@ 0x78
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d024      	beq.n	8008348 <HAL_DMA_Abort_IT+0x80>
 80082fe:	3214      	adds	r2, #20
 8008300:	4293      	cmp	r3, r2
 8008302:	d030      	beq.n	8008366 <HAL_DMA_Abort_IT+0x9e>
 8008304:	3214      	adds	r2, #20
 8008306:	4293      	cmp	r3, r2
 8008308:	d02f      	beq.n	800836a <HAL_DMA_Abort_IT+0xa2>
 800830a:	3214      	adds	r2, #20
 800830c:	4293      	cmp	r3, r2
 800830e:	d02f      	beq.n	8008370 <HAL_DMA_Abort_IT+0xa8>
 8008310:	3214      	adds	r2, #20
 8008312:	4293      	cmp	r3, r2
 8008314:	d02f      	beq.n	8008376 <HAL_DMA_Abort_IT+0xae>
 8008316:	3214      	adds	r2, #20
 8008318:	4293      	cmp	r3, r2
 800831a:	d02f      	beq.n	800837c <HAL_DMA_Abort_IT+0xb4>
 800831c:	3214      	adds	r2, #20
 800831e:	4293      	cmp	r3, r2
 8008320:	d02f      	beq.n	8008382 <HAL_DMA_Abort_IT+0xba>
 8008322:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8008326:	4293      	cmp	r3, r2
 8008328:	d02e      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc0>
 800832a:	3214      	adds	r2, #20
 800832c:	4293      	cmp	r3, r2
 800832e:	d02d      	beq.n	800838c <HAL_DMA_Abort_IT+0xc4>
 8008330:	3214      	adds	r2, #20
 8008332:	4293      	cmp	r3, r2
 8008334:	d02c      	beq.n	8008390 <HAL_DMA_Abort_IT+0xc8>
 8008336:	3214      	adds	r2, #20
 8008338:	4293      	cmp	r3, r2
 800833a:	d002      	beq.n	8008342 <HAL_DMA_Abort_IT+0x7a>
 800833c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008340:	e003      	b.n	800834a <HAL_DMA_Abort_IT+0x82>
 8008342:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008346:	e000      	b.n	800834a <HAL_DMA_Abort_IT+0x82>
 8008348:	2201      	movs	r2, #1
 800834a:	4b37      	ldr	r3, [pc, #220]	@ (8008428 <HAL_DMA_Abort_IT+0x160>)
 800834c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800834e:	2301      	movs	r3, #1
 8008350:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8008354:	2300      	movs	r3, #0
 8008356:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800835a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800835c:	2b00      	cmp	r3, #0
 800835e:	d05e      	beq.n	800841e <HAL_DMA_Abort_IT+0x156>
      hdma->XferAbortCallback(hdma);
 8008360:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8008362:	2000      	movs	r0, #0
 8008364:	e7b9      	b.n	80082da <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008366:	2210      	movs	r2, #16
 8008368:	e7ef      	b.n	800834a <HAL_DMA_Abort_IT+0x82>
 800836a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800836e:	e7ec      	b.n	800834a <HAL_DMA_Abort_IT+0x82>
 8008370:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008374:	e7e9      	b.n	800834a <HAL_DMA_Abort_IT+0x82>
 8008376:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800837a:	e7e6      	b.n	800834a <HAL_DMA_Abort_IT+0x82>
 800837c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008380:	e7e3      	b.n	800834a <HAL_DMA_Abort_IT+0x82>
 8008382:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008386:	e7e0      	b.n	800834a <HAL_DMA_Abort_IT+0x82>
 8008388:	2201      	movs	r2, #1
 800838a:	e7de      	b.n	800834a <HAL_DMA_Abort_IT+0x82>
 800838c:	2210      	movs	r2, #16
 800838e:	e7dc      	b.n	800834a <HAL_DMA_Abort_IT+0x82>
 8008390:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008394:	e7d9      	b.n	800834a <HAL_DMA_Abort_IT+0x82>
 8008396:	4a25      	ldr	r2, [pc, #148]	@ (800842c <HAL_DMA_Abort_IT+0x164>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d024      	beq.n	80083e6 <HAL_DMA_Abort_IT+0x11e>
 800839c:	3214      	adds	r2, #20
 800839e:	4293      	cmp	r3, r2
 80083a0:	d025      	beq.n	80083ee <HAL_DMA_Abort_IT+0x126>
 80083a2:	3214      	adds	r2, #20
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d024      	beq.n	80083f2 <HAL_DMA_Abort_IT+0x12a>
 80083a8:	3214      	adds	r2, #20
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d024      	beq.n	80083f8 <HAL_DMA_Abort_IT+0x130>
 80083ae:	3214      	adds	r2, #20
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d024      	beq.n	80083fe <HAL_DMA_Abort_IT+0x136>
 80083b4:	3214      	adds	r2, #20
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d024      	beq.n	8008404 <HAL_DMA_Abort_IT+0x13c>
 80083ba:	3214      	adds	r2, #20
 80083bc:	4293      	cmp	r3, r2
 80083be:	d024      	beq.n	800840a <HAL_DMA_Abort_IT+0x142>
 80083c0:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d023      	beq.n	8008410 <HAL_DMA_Abort_IT+0x148>
 80083c8:	3214      	adds	r2, #20
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d022      	beq.n	8008414 <HAL_DMA_Abort_IT+0x14c>
 80083ce:	3214      	adds	r2, #20
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d021      	beq.n	8008418 <HAL_DMA_Abort_IT+0x150>
 80083d4:	3214      	adds	r2, #20
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d002      	beq.n	80083e0 <HAL_DMA_Abort_IT+0x118>
 80083da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80083de:	e003      	b.n	80083e8 <HAL_DMA_Abort_IT+0x120>
 80083e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80083e4:	e000      	b.n	80083e8 <HAL_DMA_Abort_IT+0x120>
 80083e6:	2201      	movs	r2, #1
 80083e8:	4b11      	ldr	r3, [pc, #68]	@ (8008430 <HAL_DMA_Abort_IT+0x168>)
 80083ea:	605a      	str	r2, [r3, #4]
 80083ec:	e7af      	b.n	800834e <HAL_DMA_Abort_IT+0x86>
 80083ee:	2210      	movs	r2, #16
 80083f0:	e7fa      	b.n	80083e8 <HAL_DMA_Abort_IT+0x120>
 80083f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80083f6:	e7f7      	b.n	80083e8 <HAL_DMA_Abort_IT+0x120>
 80083f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80083fc:	e7f4      	b.n	80083e8 <HAL_DMA_Abort_IT+0x120>
 80083fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008402:	e7f1      	b.n	80083e8 <HAL_DMA_Abort_IT+0x120>
 8008404:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008408:	e7ee      	b.n	80083e8 <HAL_DMA_Abort_IT+0x120>
 800840a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800840e:	e7eb      	b.n	80083e8 <HAL_DMA_Abort_IT+0x120>
 8008410:	2201      	movs	r2, #1
 8008412:	e7e9      	b.n	80083e8 <HAL_DMA_Abort_IT+0x120>
 8008414:	2210      	movs	r2, #16
 8008416:	e7e7      	b.n	80083e8 <HAL_DMA_Abort_IT+0x120>
 8008418:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800841c:	e7e4      	b.n	80083e8 <HAL_DMA_Abort_IT+0x120>
  HAL_StatusTypeDef status = HAL_OK;
 800841e:	2000      	movs	r0, #0
 8008420:	e75b      	b.n	80082da <HAL_DMA_Abort_IT+0x12>
 8008422:	bf00      	nop
 8008424:	40020080 	.word	0x40020080
 8008428:	40020400 	.word	0x40020400
 800842c:	40020008 	.word	0x40020008
 8008430:	40020000 	.word	0x40020000

08008434 <HAL_DMA_IRQHandler>:
{
 8008434:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008436:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8008438:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800843a:	6804      	ldr	r4, [r0, #0]
 800843c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800843e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8008440:	2304      	movs	r3, #4
 8008442:	408b      	lsls	r3, r1
 8008444:	4213      	tst	r3, r2
 8008446:	f000 809b 	beq.w	8008580 <HAL_DMA_IRQHandler+0x14c>
 800844a:	f015 0f04 	tst.w	r5, #4
 800844e:	f000 8097 	beq.w	8008580 <HAL_DMA_IRQHandler+0x14c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	f013 0f20 	tst.w	r3, #32
 8008458:	d103      	bne.n	8008462 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	f023 0304 	bic.w	r3, r3, #4
 8008460:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008462:	6803      	ldr	r3, [r0, #0]
 8008464:	4a9a      	ldr	r2, [pc, #616]	@ (80086d0 <HAL_DMA_IRQHandler+0x29c>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d946      	bls.n	80084f8 <HAL_DMA_IRQHandler+0xc4>
 800846a:	3a78      	subs	r2, #120	@ 0x78
 800846c:	4293      	cmp	r3, r2
 800846e:	d024      	beq.n	80084ba <HAL_DMA_IRQHandler+0x86>
 8008470:	3214      	adds	r2, #20
 8008472:	4293      	cmp	r3, r2
 8008474:	d028      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x94>
 8008476:	3214      	adds	r2, #20
 8008478:	4293      	cmp	r3, r2
 800847a:	d027      	beq.n	80084cc <HAL_DMA_IRQHandler+0x98>
 800847c:	3214      	adds	r2, #20
 800847e:	4293      	cmp	r3, r2
 8008480:	d027      	beq.n	80084d2 <HAL_DMA_IRQHandler+0x9e>
 8008482:	3214      	adds	r2, #20
 8008484:	4293      	cmp	r3, r2
 8008486:	d027      	beq.n	80084d8 <HAL_DMA_IRQHandler+0xa4>
 8008488:	3214      	adds	r2, #20
 800848a:	4293      	cmp	r3, r2
 800848c:	d027      	beq.n	80084de <HAL_DMA_IRQHandler+0xaa>
 800848e:	3214      	adds	r2, #20
 8008490:	4293      	cmp	r3, r2
 8008492:	d027      	beq.n	80084e4 <HAL_DMA_IRQHandler+0xb0>
 8008494:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8008498:	4293      	cmp	r3, r2
 800849a:	d026      	beq.n	80084ea <HAL_DMA_IRQHandler+0xb6>
 800849c:	3214      	adds	r2, #20
 800849e:	4293      	cmp	r3, r2
 80084a0:	d025      	beq.n	80084ee <HAL_DMA_IRQHandler+0xba>
 80084a2:	3214      	adds	r2, #20
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d024      	beq.n	80084f2 <HAL_DMA_IRQHandler+0xbe>
 80084a8:	3214      	adds	r2, #20
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d002      	beq.n	80084b4 <HAL_DMA_IRQHandler+0x80>
 80084ae:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80084b2:	e003      	b.n	80084bc <HAL_DMA_IRQHandler+0x88>
 80084b4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80084b8:	e000      	b.n	80084bc <HAL_DMA_IRQHandler+0x88>
 80084ba:	2204      	movs	r2, #4
 80084bc:	4b85      	ldr	r3, [pc, #532]	@ (80086d4 <HAL_DMA_IRQHandler+0x2a0>)
 80084be:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80084c0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80084c2:	b103      	cbz	r3, 80084c6 <HAL_DMA_IRQHandler+0x92>
      hdma->XferHalfCpltCallback(hdma);
 80084c4:	4798      	blx	r3
}
 80084c6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80084c8:	2240      	movs	r2, #64	@ 0x40
 80084ca:	e7f7      	b.n	80084bc <HAL_DMA_IRQHandler+0x88>
 80084cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80084d0:	e7f4      	b.n	80084bc <HAL_DMA_IRQHandler+0x88>
 80084d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80084d6:	e7f1      	b.n	80084bc <HAL_DMA_IRQHandler+0x88>
 80084d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80084dc:	e7ee      	b.n	80084bc <HAL_DMA_IRQHandler+0x88>
 80084de:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80084e2:	e7eb      	b.n	80084bc <HAL_DMA_IRQHandler+0x88>
 80084e4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80084e8:	e7e8      	b.n	80084bc <HAL_DMA_IRQHandler+0x88>
 80084ea:	2204      	movs	r2, #4
 80084ec:	e7e6      	b.n	80084bc <HAL_DMA_IRQHandler+0x88>
 80084ee:	2240      	movs	r2, #64	@ 0x40
 80084f0:	e7e4      	b.n	80084bc <HAL_DMA_IRQHandler+0x88>
 80084f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80084f6:	e7e1      	b.n	80084bc <HAL_DMA_IRQHandler+0x88>
 80084f8:	4a77      	ldr	r2, [pc, #476]	@ (80086d8 <HAL_DMA_IRQHandler+0x2a4>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d024      	beq.n	8008548 <HAL_DMA_IRQHandler+0x114>
 80084fe:	3214      	adds	r2, #20
 8008500:	4293      	cmp	r3, r2
 8008502:	d025      	beq.n	8008550 <HAL_DMA_IRQHandler+0x11c>
 8008504:	3214      	adds	r2, #20
 8008506:	4293      	cmp	r3, r2
 8008508:	d024      	beq.n	8008554 <HAL_DMA_IRQHandler+0x120>
 800850a:	3214      	adds	r2, #20
 800850c:	4293      	cmp	r3, r2
 800850e:	d024      	beq.n	800855a <HAL_DMA_IRQHandler+0x126>
 8008510:	3214      	adds	r2, #20
 8008512:	4293      	cmp	r3, r2
 8008514:	d024      	beq.n	8008560 <HAL_DMA_IRQHandler+0x12c>
 8008516:	3214      	adds	r2, #20
 8008518:	4293      	cmp	r3, r2
 800851a:	d024      	beq.n	8008566 <HAL_DMA_IRQHandler+0x132>
 800851c:	3214      	adds	r2, #20
 800851e:	4293      	cmp	r3, r2
 8008520:	d024      	beq.n	800856c <HAL_DMA_IRQHandler+0x138>
 8008522:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8008526:	4293      	cmp	r3, r2
 8008528:	d023      	beq.n	8008572 <HAL_DMA_IRQHandler+0x13e>
 800852a:	3214      	adds	r2, #20
 800852c:	4293      	cmp	r3, r2
 800852e:	d022      	beq.n	8008576 <HAL_DMA_IRQHandler+0x142>
 8008530:	3214      	adds	r2, #20
 8008532:	4293      	cmp	r3, r2
 8008534:	d021      	beq.n	800857a <HAL_DMA_IRQHandler+0x146>
 8008536:	3214      	adds	r2, #20
 8008538:	4293      	cmp	r3, r2
 800853a:	d002      	beq.n	8008542 <HAL_DMA_IRQHandler+0x10e>
 800853c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008540:	e003      	b.n	800854a <HAL_DMA_IRQHandler+0x116>
 8008542:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008546:	e000      	b.n	800854a <HAL_DMA_IRQHandler+0x116>
 8008548:	2204      	movs	r2, #4
 800854a:	4b64      	ldr	r3, [pc, #400]	@ (80086dc <HAL_DMA_IRQHandler+0x2a8>)
 800854c:	605a      	str	r2, [r3, #4]
 800854e:	e7b7      	b.n	80084c0 <HAL_DMA_IRQHandler+0x8c>
 8008550:	2240      	movs	r2, #64	@ 0x40
 8008552:	e7fa      	b.n	800854a <HAL_DMA_IRQHandler+0x116>
 8008554:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008558:	e7f7      	b.n	800854a <HAL_DMA_IRQHandler+0x116>
 800855a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800855e:	e7f4      	b.n	800854a <HAL_DMA_IRQHandler+0x116>
 8008560:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008564:	e7f1      	b.n	800854a <HAL_DMA_IRQHandler+0x116>
 8008566:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800856a:	e7ee      	b.n	800854a <HAL_DMA_IRQHandler+0x116>
 800856c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8008570:	e7eb      	b.n	800854a <HAL_DMA_IRQHandler+0x116>
 8008572:	2204      	movs	r2, #4
 8008574:	e7e9      	b.n	800854a <HAL_DMA_IRQHandler+0x116>
 8008576:	2240      	movs	r2, #64	@ 0x40
 8008578:	e7e7      	b.n	800854a <HAL_DMA_IRQHandler+0x116>
 800857a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800857e:	e7e4      	b.n	800854a <HAL_DMA_IRQHandler+0x116>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8008580:	2302      	movs	r3, #2
 8008582:	408b      	lsls	r3, r1
 8008584:	4213      	tst	r3, r2
 8008586:	f000 80ab 	beq.w	80086e0 <HAL_DMA_IRQHandler+0x2ac>
 800858a:	f015 0f02 	tst.w	r5, #2
 800858e:	f000 80a7 	beq.w	80086e0 <HAL_DMA_IRQHandler+0x2ac>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008592:	6823      	ldr	r3, [r4, #0]
 8008594:	f013 0f20 	tst.w	r3, #32
 8008598:	d106      	bne.n	80085a8 <HAL_DMA_IRQHandler+0x174>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	f023 030a 	bic.w	r3, r3, #10
 80085a0:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80085a2:	2301      	movs	r3, #1
 80085a4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80085a8:	6803      	ldr	r3, [r0, #0]
 80085aa:	4a49      	ldr	r2, [pc, #292]	@ (80086d0 <HAL_DMA_IRQHandler+0x29c>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d94b      	bls.n	8008648 <HAL_DMA_IRQHandler+0x214>
 80085b0:	3a78      	subs	r2, #120	@ 0x78
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d024      	beq.n	8008600 <HAL_DMA_IRQHandler+0x1cc>
 80085b6:	3214      	adds	r2, #20
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d02d      	beq.n	8008618 <HAL_DMA_IRQHandler+0x1e4>
 80085bc:	3214      	adds	r2, #20
 80085be:	4293      	cmp	r3, r2
 80085c0:	d02c      	beq.n	800861c <HAL_DMA_IRQHandler+0x1e8>
 80085c2:	3214      	adds	r2, #20
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d02c      	beq.n	8008622 <HAL_DMA_IRQHandler+0x1ee>
 80085c8:	3214      	adds	r2, #20
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d02c      	beq.n	8008628 <HAL_DMA_IRQHandler+0x1f4>
 80085ce:	3214      	adds	r2, #20
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d02c      	beq.n	800862e <HAL_DMA_IRQHandler+0x1fa>
 80085d4:	3214      	adds	r2, #20
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d02c      	beq.n	8008634 <HAL_DMA_IRQHandler+0x200>
 80085da:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 80085de:	4293      	cmp	r3, r2
 80085e0:	d02b      	beq.n	800863a <HAL_DMA_IRQHandler+0x206>
 80085e2:	3214      	adds	r2, #20
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d02a      	beq.n	800863e <HAL_DMA_IRQHandler+0x20a>
 80085e8:	3214      	adds	r2, #20
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d029      	beq.n	8008642 <HAL_DMA_IRQHandler+0x20e>
 80085ee:	3214      	adds	r2, #20
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d002      	beq.n	80085fa <HAL_DMA_IRQHandler+0x1c6>
 80085f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80085f8:	e003      	b.n	8008602 <HAL_DMA_IRQHandler+0x1ce>
 80085fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80085fe:	e000      	b.n	8008602 <HAL_DMA_IRQHandler+0x1ce>
 8008600:	2202      	movs	r2, #2
 8008602:	4b34      	ldr	r3, [pc, #208]	@ (80086d4 <HAL_DMA_IRQHandler+0x2a0>)
 8008604:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8008606:	2300      	movs	r3, #0
 8008608:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800860c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800860e:	2b00      	cmp	r3, #0
 8008610:	f43f af59 	beq.w	80084c6 <HAL_DMA_IRQHandler+0x92>
      hdma->XferCpltCallback(hdma);
 8008614:	4798      	blx	r3
 8008616:	e756      	b.n	80084c6 <HAL_DMA_IRQHandler+0x92>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008618:	2220      	movs	r2, #32
 800861a:	e7f2      	b.n	8008602 <HAL_DMA_IRQHandler+0x1ce>
 800861c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008620:	e7ef      	b.n	8008602 <HAL_DMA_IRQHandler+0x1ce>
 8008622:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008626:	e7ec      	b.n	8008602 <HAL_DMA_IRQHandler+0x1ce>
 8008628:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800862c:	e7e9      	b.n	8008602 <HAL_DMA_IRQHandler+0x1ce>
 800862e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8008632:	e7e6      	b.n	8008602 <HAL_DMA_IRQHandler+0x1ce>
 8008634:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8008638:	e7e3      	b.n	8008602 <HAL_DMA_IRQHandler+0x1ce>
 800863a:	2202      	movs	r2, #2
 800863c:	e7e1      	b.n	8008602 <HAL_DMA_IRQHandler+0x1ce>
 800863e:	2220      	movs	r2, #32
 8008640:	e7df      	b.n	8008602 <HAL_DMA_IRQHandler+0x1ce>
 8008642:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008646:	e7dc      	b.n	8008602 <HAL_DMA_IRQHandler+0x1ce>
 8008648:	4a23      	ldr	r2, [pc, #140]	@ (80086d8 <HAL_DMA_IRQHandler+0x2a4>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d024      	beq.n	8008698 <HAL_DMA_IRQHandler+0x264>
 800864e:	3214      	adds	r2, #20
 8008650:	4293      	cmp	r3, r2
 8008652:	d025      	beq.n	80086a0 <HAL_DMA_IRQHandler+0x26c>
 8008654:	3214      	adds	r2, #20
 8008656:	4293      	cmp	r3, r2
 8008658:	d024      	beq.n	80086a4 <HAL_DMA_IRQHandler+0x270>
 800865a:	3214      	adds	r2, #20
 800865c:	4293      	cmp	r3, r2
 800865e:	d024      	beq.n	80086aa <HAL_DMA_IRQHandler+0x276>
 8008660:	3214      	adds	r2, #20
 8008662:	4293      	cmp	r3, r2
 8008664:	d024      	beq.n	80086b0 <HAL_DMA_IRQHandler+0x27c>
 8008666:	3214      	adds	r2, #20
 8008668:	4293      	cmp	r3, r2
 800866a:	d024      	beq.n	80086b6 <HAL_DMA_IRQHandler+0x282>
 800866c:	3214      	adds	r2, #20
 800866e:	4293      	cmp	r3, r2
 8008670:	d024      	beq.n	80086bc <HAL_DMA_IRQHandler+0x288>
 8008672:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8008676:	4293      	cmp	r3, r2
 8008678:	d023      	beq.n	80086c2 <HAL_DMA_IRQHandler+0x28e>
 800867a:	3214      	adds	r2, #20
 800867c:	4293      	cmp	r3, r2
 800867e:	d022      	beq.n	80086c6 <HAL_DMA_IRQHandler+0x292>
 8008680:	3214      	adds	r2, #20
 8008682:	4293      	cmp	r3, r2
 8008684:	d021      	beq.n	80086ca <HAL_DMA_IRQHandler+0x296>
 8008686:	3214      	adds	r2, #20
 8008688:	4293      	cmp	r3, r2
 800868a:	d002      	beq.n	8008692 <HAL_DMA_IRQHandler+0x25e>
 800868c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008690:	e003      	b.n	800869a <HAL_DMA_IRQHandler+0x266>
 8008692:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008696:	e000      	b.n	800869a <HAL_DMA_IRQHandler+0x266>
 8008698:	2202      	movs	r2, #2
 800869a:	4b10      	ldr	r3, [pc, #64]	@ (80086dc <HAL_DMA_IRQHandler+0x2a8>)
 800869c:	605a      	str	r2, [r3, #4]
 800869e:	e7b2      	b.n	8008606 <HAL_DMA_IRQHandler+0x1d2>
 80086a0:	2220      	movs	r2, #32
 80086a2:	e7fa      	b.n	800869a <HAL_DMA_IRQHandler+0x266>
 80086a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086a8:	e7f7      	b.n	800869a <HAL_DMA_IRQHandler+0x266>
 80086aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80086ae:	e7f4      	b.n	800869a <HAL_DMA_IRQHandler+0x266>
 80086b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80086b4:	e7f1      	b.n	800869a <HAL_DMA_IRQHandler+0x266>
 80086b6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80086ba:	e7ee      	b.n	800869a <HAL_DMA_IRQHandler+0x266>
 80086bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80086c0:	e7eb      	b.n	800869a <HAL_DMA_IRQHandler+0x266>
 80086c2:	2202      	movs	r2, #2
 80086c4:	e7e9      	b.n	800869a <HAL_DMA_IRQHandler+0x266>
 80086c6:	2220      	movs	r2, #32
 80086c8:	e7e7      	b.n	800869a <HAL_DMA_IRQHandler+0x266>
 80086ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086ce:	e7e4      	b.n	800869a <HAL_DMA_IRQHandler+0x266>
 80086d0:	40020080 	.word	0x40020080
 80086d4:	40020400 	.word	0x40020400
 80086d8:	40020008 	.word	0x40020008
 80086dc:	40020000 	.word	0x40020000
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80086e0:	2308      	movs	r3, #8
 80086e2:	408b      	lsls	r3, r1
 80086e4:	4213      	tst	r3, r2
 80086e6:	f43f aeee 	beq.w	80084c6 <HAL_DMA_IRQHandler+0x92>
 80086ea:	f015 0f08 	tst.w	r5, #8
 80086ee:	f43f aeea 	beq.w	80084c6 <HAL_DMA_IRQHandler+0x92>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	f023 030e 	bic.w	r3, r3, #14
 80086f8:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80086fa:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80086fc:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80086fe:	2301      	movs	r3, #1
 8008700:	fa03 f202 	lsl.w	r2, r3, r2
 8008704:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008706:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8008708:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 800870c:	2300      	movs	r3, #0
 800870e:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8008712:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8008714:	2b00      	cmp	r3, #0
 8008716:	f43f aed6 	beq.w	80084c6 <HAL_DMA_IRQHandler+0x92>
      hdma->XferErrorCallback(hdma);
 800871a:	4798      	blx	r3
  return;
 800871c:	e6d3      	b.n	80084c6 <HAL_DMA_IRQHandler+0x92>
 800871e:	bf00      	nop

08008720 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008720:	b570      	push	{r4, r5, r6, lr}
 8008722:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008724:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8008726:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008728:	e0a1      	b.n	800886e <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800872a:	4d7e      	ldr	r5, [pc, #504]	@ (8008924 <HAL_GPIO_Init+0x204>)
 800872c:	42ab      	cmp	r3, r5
 800872e:	d014      	beq.n	800875a <HAL_GPIO_Init+0x3a>
 8008730:	d80c      	bhi.n	800874c <HAL_GPIO_Init+0x2c>
 8008732:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008736:	42ab      	cmp	r3, r5
 8008738:	d00f      	beq.n	800875a <HAL_GPIO_Init+0x3a>
 800873a:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 800873e:	42ab      	cmp	r3, r5
 8008740:	d00b      	beq.n	800875a <HAL_GPIO_Init+0x3a>
 8008742:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008746:	42ab      	cmp	r3, r5
 8008748:	d110      	bne.n	800876c <HAL_GPIO_Init+0x4c>
 800874a:	e006      	b.n	800875a <HAL_GPIO_Init+0x3a>
 800874c:	4d76      	ldr	r5, [pc, #472]	@ (8008928 <HAL_GPIO_Init+0x208>)
 800874e:	42ab      	cmp	r3, r5
 8008750:	d003      	beq.n	800875a <HAL_GPIO_Init+0x3a>
 8008752:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8008756:	42ab      	cmp	r3, r5
 8008758:	d108      	bne.n	800876c <HAL_GPIO_Init+0x4c>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800875a:	688b      	ldr	r3, [r1, #8]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d050      	beq.n	8008802 <HAL_GPIO_Init+0xe2>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008760:	2b01      	cmp	r3, #1
 8008762:	d049      	beq.n	80087f8 <HAL_GPIO_Init+0xd8>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8008764:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008766:	2408      	movs	r4, #8
 8008768:	e000      	b.n	800876c <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800876a:	68cc      	ldr	r4, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800876c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8008770:	d849      	bhi.n	8008806 <HAL_GPIO_Init+0xe6>
 8008772:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008774:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008778:	6833      	ldr	r3, [r6, #0]
 800877a:	250f      	movs	r5, #15
 800877c:	4095      	lsls	r5, r2
 800877e:	ea23 0305 	bic.w	r3, r3, r5
 8008782:	fa04 f202 	lsl.w	r2, r4, r2
 8008786:	4313      	orrs	r3, r2
 8008788:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800878a:	684b      	ldr	r3, [r1, #4]
 800878c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8008790:	d06b      	beq.n	800886a <HAL_GPIO_Init+0x14a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008792:	4b66      	ldr	r3, [pc, #408]	@ (800892c <HAL_GPIO_Init+0x20c>)
 8008794:	699a      	ldr	r2, [r3, #24]
 8008796:	f042 0201 	orr.w	r2, r2, #1
 800879a:	619a      	str	r2, [r3, #24]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	9301      	str	r3, [sp, #4]
 80087a4:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80087a6:	ea4f 029c 	mov.w	r2, ip, lsr #2
 80087aa:	1c95      	adds	r5, r2, #2
 80087ac:	4b60      	ldr	r3, [pc, #384]	@ (8008930 <HAL_GPIO_Init+0x210>)
 80087ae:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80087b2:	f00c 0503 	and.w	r5, ip, #3
 80087b6:	00ad      	lsls	r5, r5, #2
 80087b8:	230f      	movs	r3, #15
 80087ba:	40ab      	lsls	r3, r5
 80087bc:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80087c0:	4b5c      	ldr	r3, [pc, #368]	@ (8008934 <HAL_GPIO_Init+0x214>)
 80087c2:	4298      	cmp	r0, r3
 80087c4:	d026      	beq.n	8008814 <HAL_GPIO_Init+0xf4>
 80087c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087ca:	4298      	cmp	r0, r3
 80087cc:	f000 808c 	beq.w	80088e8 <HAL_GPIO_Init+0x1c8>
 80087d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087d4:	4298      	cmp	r0, r3
 80087d6:	f000 8089 	beq.w	80088ec <HAL_GPIO_Init+0x1cc>
 80087da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087de:	4298      	cmp	r0, r3
 80087e0:	d016      	beq.n	8008810 <HAL_GPIO_Init+0xf0>
 80087e2:	2304      	movs	r3, #4
 80087e4:	e017      	b.n	8008816 <HAL_GPIO_Init+0xf6>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80087e6:	68cc      	ldr	r4, [r1, #12]
 80087e8:	3404      	adds	r4, #4
          break;
 80087ea:	e7bf      	b.n	800876c <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80087ec:	68cc      	ldr	r4, [r1, #12]
 80087ee:	3408      	adds	r4, #8
          break;
 80087f0:	e7bc      	b.n	800876c <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80087f2:	68cc      	ldr	r4, [r1, #12]
 80087f4:	340c      	adds	r4, #12
          break;
 80087f6:	e7b9      	b.n	800876c <HAL_GPIO_Init+0x4c>
            GPIOx->BSRR = ioposition;
 80087f8:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80087fa:	2408      	movs	r4, #8
 80087fc:	e7b6      	b.n	800876c <HAL_GPIO_Init+0x4c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80087fe:	2400      	movs	r4, #0
 8008800:	e7b4      	b.n	800876c <HAL_GPIO_Init+0x4c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008802:	2404      	movs	r4, #4
 8008804:	e7b2      	b.n	800876c <HAL_GPIO_Init+0x4c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008806:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008808:	f1ac 0208 	sub.w	r2, ip, #8
 800880c:	0092      	lsls	r2, r2, #2
 800880e:	e7b3      	b.n	8008778 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008810:	2303      	movs	r3, #3
 8008812:	e000      	b.n	8008816 <HAL_GPIO_Init+0xf6>
 8008814:	2300      	movs	r3, #0
 8008816:	40ab      	lsls	r3, r5
 8008818:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 800881a:	3202      	adds	r2, #2
 800881c:	4d44      	ldr	r5, [pc, #272]	@ (8008930 <HAL_GPIO_Init+0x210>)
 800881e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008822:	684b      	ldr	r3, [r1, #4]
 8008824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008828:	d062      	beq.n	80088f0 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800882a:	4a43      	ldr	r2, [pc, #268]	@ (8008938 <HAL_GPIO_Init+0x218>)
 800882c:	6893      	ldr	r3, [r2, #8]
 800882e:	ea43 030e 	orr.w	r3, r3, lr
 8008832:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008834:	684b      	ldr	r3, [r1, #4]
 8008836:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800883a:	d05f      	beq.n	80088fc <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800883c:	4a3e      	ldr	r2, [pc, #248]	@ (8008938 <HAL_GPIO_Init+0x218>)
 800883e:	68d3      	ldr	r3, [r2, #12]
 8008840:	ea43 030e 	orr.w	r3, r3, lr
 8008844:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008846:	684b      	ldr	r3, [r1, #4]
 8008848:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800884c:	d05c      	beq.n	8008908 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800884e:	4a3a      	ldr	r2, [pc, #232]	@ (8008938 <HAL_GPIO_Init+0x218>)
 8008850:	6853      	ldr	r3, [r2, #4]
 8008852:	ea43 030e 	orr.w	r3, r3, lr
 8008856:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008858:	684b      	ldr	r3, [r1, #4]
 800885a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800885e:	d059      	beq.n	8008914 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008860:	4a35      	ldr	r2, [pc, #212]	@ (8008938 <HAL_GPIO_Init+0x218>)
 8008862:	6813      	ldr	r3, [r2, #0]
 8008864:	ea43 030e 	orr.w	r3, r3, lr
 8008868:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 800886a:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800886e:	680b      	ldr	r3, [r1, #0]
 8008870:	fa33 f20c 	lsrs.w	r2, r3, ip
 8008874:	d054      	beq.n	8008920 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8008876:	2201      	movs	r2, #1
 8008878:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800887c:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8008880:	ea32 0303 	bics.w	r3, r2, r3
 8008884:	d1f1      	bne.n	800886a <HAL_GPIO_Init+0x14a>
      switch (GPIO_Init->Mode)
 8008886:	684b      	ldr	r3, [r1, #4]
 8008888:	2b12      	cmp	r3, #18
 800888a:	f63f af4e 	bhi.w	800872a <HAL_GPIO_Init+0xa>
 800888e:	2b12      	cmp	r3, #18
 8008890:	f63f af6c 	bhi.w	800876c <HAL_GPIO_Init+0x4c>
 8008894:	a501      	add	r5, pc, #4	@ (adr r5, 800889c <HAL_GPIO_Init+0x17c>)
 8008896:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 800889a:	bf00      	nop
 800889c:	0800875b 	.word	0x0800875b
 80088a0:	0800876b 	.word	0x0800876b
 80088a4:	080087ed 	.word	0x080087ed
 80088a8:	080087ff 	.word	0x080087ff
 80088ac:	0800876d 	.word	0x0800876d
 80088b0:	0800876d 	.word	0x0800876d
 80088b4:	0800876d 	.word	0x0800876d
 80088b8:	0800876d 	.word	0x0800876d
 80088bc:	0800876d 	.word	0x0800876d
 80088c0:	0800876d 	.word	0x0800876d
 80088c4:	0800876d 	.word	0x0800876d
 80088c8:	0800876d 	.word	0x0800876d
 80088cc:	0800876d 	.word	0x0800876d
 80088d0:	0800876d 	.word	0x0800876d
 80088d4:	0800876d 	.word	0x0800876d
 80088d8:	0800876d 	.word	0x0800876d
 80088dc:	0800876d 	.word	0x0800876d
 80088e0:	080087e7 	.word	0x080087e7
 80088e4:	080087f3 	.word	0x080087f3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80088e8:	2301      	movs	r3, #1
 80088ea:	e794      	b.n	8008816 <HAL_GPIO_Init+0xf6>
 80088ec:	2302      	movs	r3, #2
 80088ee:	e792      	b.n	8008816 <HAL_GPIO_Init+0xf6>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80088f0:	4a11      	ldr	r2, [pc, #68]	@ (8008938 <HAL_GPIO_Init+0x218>)
 80088f2:	6893      	ldr	r3, [r2, #8]
 80088f4:	ea23 030e 	bic.w	r3, r3, lr
 80088f8:	6093      	str	r3, [r2, #8]
 80088fa:	e79b      	b.n	8008834 <HAL_GPIO_Init+0x114>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80088fc:	4a0e      	ldr	r2, [pc, #56]	@ (8008938 <HAL_GPIO_Init+0x218>)
 80088fe:	68d3      	ldr	r3, [r2, #12]
 8008900:	ea23 030e 	bic.w	r3, r3, lr
 8008904:	60d3      	str	r3, [r2, #12]
 8008906:	e79e      	b.n	8008846 <HAL_GPIO_Init+0x126>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008908:	4a0b      	ldr	r2, [pc, #44]	@ (8008938 <HAL_GPIO_Init+0x218>)
 800890a:	6853      	ldr	r3, [r2, #4]
 800890c:	ea23 030e 	bic.w	r3, r3, lr
 8008910:	6053      	str	r3, [r2, #4]
 8008912:	e7a1      	b.n	8008858 <HAL_GPIO_Init+0x138>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008914:	4a08      	ldr	r2, [pc, #32]	@ (8008938 <HAL_GPIO_Init+0x218>)
 8008916:	6813      	ldr	r3, [r2, #0]
 8008918:	ea23 030e 	bic.w	r3, r3, lr
 800891c:	6013      	str	r3, [r2, #0]
 800891e:	e7a4      	b.n	800886a <HAL_GPIO_Init+0x14a>
  }
}
 8008920:	b002      	add	sp, #8
 8008922:	bd70      	pop	{r4, r5, r6, pc}
 8008924:	10220000 	.word	0x10220000
 8008928:	10310000 	.word	0x10310000
 800892c:	40021000 	.word	0x40021000
 8008930:	40010000 	.word	0x40010000
 8008934:	40010800 	.word	0x40010800
 8008938:	40010400 	.word	0x40010400

0800893c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800893c:	b10a      	cbz	r2, 8008942 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800893e:	6101      	str	r1, [r0, #16]
 8008940:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008942:	0409      	lsls	r1, r1, #16
 8008944:	6101      	str	r1, [r0, #16]
  }
}
 8008946:	4770      	bx	lr

08008948 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008948:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800894a:	4b08      	ldr	r3, [pc, #32]	@ (800896c <RCC_Delay+0x24>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a08      	ldr	r2, [pc, #32]	@ (8008970 <RCC_Delay+0x28>)
 8008950:	fba2 2303 	umull	r2, r3, r2, r3
 8008954:	0a5b      	lsrs	r3, r3, #9
 8008956:	fb00 f303 	mul.w	r3, r0, r3
 800895a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800895c:	bf00      	nop
  }
  while (Delay --);
 800895e:	9b01      	ldr	r3, [sp, #4]
 8008960:	1e5a      	subs	r2, r3, #1
 8008962:	9201      	str	r2, [sp, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1f9      	bne.n	800895c <RCC_Delay+0x14>
}
 8008968:	b002      	add	sp, #8
 800896a:	4770      	bx	lr
 800896c:	2000807c 	.word	0x2000807c
 8008970:	10624dd3 	.word	0x10624dd3

08008974 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8008974:	2800      	cmp	r0, #0
 8008976:	f000 8261 	beq.w	8008e3c <HAL_RCC_OscConfig+0x4c8>
{
 800897a:	b570      	push	{r4, r5, r6, lr}
 800897c:	b082      	sub	sp, #8
 800897e:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008980:	6803      	ldr	r3, [r0, #0]
 8008982:	f013 0f01 	tst.w	r3, #1
 8008986:	d02c      	beq.n	80089e2 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008988:	4b99      	ldr	r3, [pc, #612]	@ (8008bf0 <HAL_RCC_OscConfig+0x27c>)
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	f003 030c 	and.w	r3, r3, #12
 8008990:	2b04      	cmp	r3, #4
 8008992:	d01d      	beq.n	80089d0 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008994:	4b96      	ldr	r3, [pc, #600]	@ (8008bf0 <HAL_RCC_OscConfig+0x27c>)
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f003 030c 	and.w	r3, r3, #12
 800899c:	2b08      	cmp	r3, #8
 800899e:	d012      	beq.n	80089c6 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089a0:	68a3      	ldr	r3, [r4, #8]
 80089a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089a6:	d041      	beq.n	8008a2c <HAL_RCC_OscConfig+0xb8>
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d155      	bne.n	8008a58 <HAL_RCC_OscConfig+0xe4>
 80089ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80089b0:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80089ba:	601a      	str	r2, [r3, #0]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	e037      	b.n	8008a36 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80089c6:	4b8a      	ldr	r3, [pc, #552]	@ (8008bf0 <HAL_RCC_OscConfig+0x27c>)
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80089ce:	d0e7      	beq.n	80089a0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089d0:	4b87      	ldr	r3, [pc, #540]	@ (8008bf0 <HAL_RCC_OscConfig+0x27c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80089d8:	d003      	beq.n	80089e2 <HAL_RCC_OscConfig+0x6e>
 80089da:	68a3      	ldr	r3, [r4, #8]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f000 822f 	beq.w	8008e40 <HAL_RCC_OscConfig+0x4cc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	f013 0f02 	tst.w	r3, #2
 80089e8:	d075      	beq.n	8008ad6 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80089ea:	4b81      	ldr	r3, [pc, #516]	@ (8008bf0 <HAL_RCC_OscConfig+0x27c>)
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	f013 0f0c 	tst.w	r3, #12
 80089f2:	d05f      	beq.n	8008ab4 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80089f4:	4b7e      	ldr	r3, [pc, #504]	@ (8008bf0 <HAL_RCC_OscConfig+0x27c>)
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f003 030c 	and.w	r3, r3, #12
 80089fc:	2b08      	cmp	r3, #8
 80089fe:	d054      	beq.n	8008aaa <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a00:	6963      	ldr	r3, [r4, #20]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 808a 	beq.w	8008b1c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8008a08:	4b7a      	ldr	r3, [pc, #488]	@ (8008bf4 <HAL_RCC_OscConfig+0x280>)
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008a0e:	f7fe fd17 	bl	8007440 <HAL_GetTick>
 8008a12:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a14:	4b76      	ldr	r3, [pc, #472]	@ (8008bf0 <HAL_RCC_OscConfig+0x27c>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f013 0f02 	tst.w	r3, #2
 8008a1c:	d175      	bne.n	8008b0a <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a1e:	f7fe fd0f 	bl	8007440 <HAL_GetTick>
 8008a22:	1b40      	subs	r0, r0, r5
 8008a24:	2802      	cmp	r0, #2
 8008a26:	d9f5      	bls.n	8008a14 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8008a28:	2003      	movs	r0, #3
 8008a2a:	e210      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a2c:	4a70      	ldr	r2, [pc, #448]	@ (8008bf0 <HAL_RCC_OscConfig+0x27c>)
 8008a2e:	6813      	ldr	r3, [r2, #0]
 8008a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a34:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008a36:	68a3      	ldr	r3, [r4, #8]
 8008a38:	b343      	cbz	r3, 8008a8c <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8008a3a:	f7fe fd01 	bl	8007440 <HAL_GetTick>
 8008a3e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a40:	4b6b      	ldr	r3, [pc, #428]	@ (8008bf0 <HAL_RCC_OscConfig+0x27c>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8008a48:	d1cb      	bne.n	80089e2 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a4a:	f7fe fcf9 	bl	8007440 <HAL_GetTick>
 8008a4e:	1b40      	subs	r0, r0, r5
 8008a50:	2864      	cmp	r0, #100	@ 0x64
 8008a52:	d9f5      	bls.n	8008a40 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8008a54:	2003      	movs	r0, #3
 8008a56:	e1fa      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a5c:	d009      	beq.n	8008a72 <HAL_RCC_OscConfig+0xfe>
 8008a5e:	4b64      	ldr	r3, [pc, #400]	@ (8008bf0 <HAL_RCC_OscConfig+0x27c>)
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008a66:	601a      	str	r2, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008a6e:	601a      	str	r2, [r3, #0]
 8008a70:	e7e1      	b.n	8008a36 <HAL_RCC_OscConfig+0xc2>
 8008a72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a76:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008a80:	601a      	str	r2, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	e7d4      	b.n	8008a36 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8008a8c:	f7fe fcd8 	bl	8007440 <HAL_GetTick>
 8008a90:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a92:	4b57      	ldr	r3, [pc, #348]	@ (8008bf0 <HAL_RCC_OscConfig+0x27c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8008a9a:	d0a2      	beq.n	80089e2 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a9c:	f7fe fcd0 	bl	8007440 <HAL_GetTick>
 8008aa0:	1b40      	subs	r0, r0, r5
 8008aa2:	2864      	cmp	r0, #100	@ 0x64
 8008aa4:	d9f5      	bls.n	8008a92 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8008aa6:	2003      	movs	r0, #3
 8008aa8:	e1d1      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008aaa:	4b51      	ldr	r3, [pc, #324]	@ (8008bf0 <HAL_RCC_OscConfig+0x27c>)
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8008ab2:	d1a5      	bne.n	8008a00 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ab4:	4b4e      	ldr	r3, [pc, #312]	@ (8008bf0 <HAL_RCC_OscConfig+0x27c>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f013 0f02 	tst.w	r3, #2
 8008abc:	d003      	beq.n	8008ac6 <HAL_RCC_OscConfig+0x152>
 8008abe:	6963      	ldr	r3, [r4, #20]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	f040 81bf 	bne.w	8008e44 <HAL_RCC_OscConfig+0x4d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ac6:	4a4a      	ldr	r2, [pc, #296]	@ (8008bf0 <HAL_RCC_OscConfig+0x27c>)
 8008ac8:	6813      	ldr	r3, [r2, #0]
 8008aca:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008ace:	69a1      	ldr	r1, [r4, #24]
 8008ad0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008ad4:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	f013 0f08 	tst.w	r3, #8
 8008adc:	d033      	beq.n	8008b46 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008ade:	69e3      	ldr	r3, [r4, #28]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d05c      	beq.n	8008b9e <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8008ae4:	4b43      	ldr	r3, [pc, #268]	@ (8008bf4 <HAL_RCC_OscConfig+0x280>)
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8008aec:	f7fe fca8 	bl	8007440 <HAL_GetTick>
 8008af0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008af2:	4b3f      	ldr	r3, [pc, #252]	@ (8008bf0 <HAL_RCC_OscConfig+0x27c>)
 8008af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af6:	f013 0f02 	tst.w	r3, #2
 8008afa:	d121      	bne.n	8008b40 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008afc:	f7fe fca0 	bl	8007440 <HAL_GetTick>
 8008b00:	1b40      	subs	r0, r0, r5
 8008b02:	2802      	cmp	r0, #2
 8008b04:	d9f5      	bls.n	8008af2 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8008b06:	2003      	movs	r0, #3
 8008b08:	e1a1      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b0a:	4a39      	ldr	r2, [pc, #228]	@ (8008bf0 <HAL_RCC_OscConfig+0x27c>)
 8008b0c:	6813      	ldr	r3, [r2, #0]
 8008b0e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008b12:	69a1      	ldr	r1, [r4, #24]
 8008b14:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008b18:	6013      	str	r3, [r2, #0]
 8008b1a:	e7dc      	b.n	8008ad6 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8008b1c:	4b35      	ldr	r3, [pc, #212]	@ (8008bf4 <HAL_RCC_OscConfig+0x280>)
 8008b1e:	2200      	movs	r2, #0
 8008b20:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008b22:	f7fe fc8d 	bl	8007440 <HAL_GetTick>
 8008b26:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b28:	4b31      	ldr	r3, [pc, #196]	@ (8008bf0 <HAL_RCC_OscConfig+0x27c>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f013 0f02 	tst.w	r3, #2
 8008b30:	d0d1      	beq.n	8008ad6 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b32:	f7fe fc85 	bl	8007440 <HAL_GetTick>
 8008b36:	1b40      	subs	r0, r0, r5
 8008b38:	2802      	cmp	r0, #2
 8008b3a:	d9f5      	bls.n	8008b28 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8008b3c:	2003      	movs	r0, #3
 8008b3e:	e186      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
      RCC_Delay(1);
 8008b40:	2001      	movs	r0, #1
 8008b42:	f7ff ff01 	bl	8008948 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b46:	6823      	ldr	r3, [r4, #0]
 8008b48:	f013 0f04 	tst.w	r3, #4
 8008b4c:	f000 8096 	beq.w	8008c7c <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b50:	4b27      	ldr	r3, [pc, #156]	@ (8008bf0 <HAL_RCC_OscConfig+0x27c>)
 8008b52:	69db      	ldr	r3, [r3, #28]
 8008b54:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8008b58:	d134      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b5a:	4b25      	ldr	r3, [pc, #148]	@ (8008bf0 <HAL_RCC_OscConfig+0x27c>)
 8008b5c:	69da      	ldr	r2, [r3, #28]
 8008b5e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8008b62:	61da      	str	r2, [r3, #28]
 8008b64:	69db      	ldr	r3, [r3, #28]
 8008b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b6a:	9301      	str	r3, [sp, #4]
 8008b6c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008b6e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b70:	4b21      	ldr	r3, [pc, #132]	@ (8008bf8 <HAL_RCC_OscConfig+0x284>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8008b78:	d026      	beq.n	8008bc8 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b7a:	6923      	ldr	r3, [r4, #16]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d03d      	beq.n	8008bfc <HAL_RCC_OscConfig+0x288>
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d153      	bne.n	8008c2c <HAL_RCC_OscConfig+0x2b8>
 8008b84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008b88:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8008b8c:	6a1a      	ldr	r2, [r3, #32]
 8008b8e:	f022 0201 	bic.w	r2, r2, #1
 8008b92:	621a      	str	r2, [r3, #32]
 8008b94:	6a1a      	ldr	r2, [r3, #32]
 8008b96:	f022 0204 	bic.w	r2, r2, #4
 8008b9a:	621a      	str	r2, [r3, #32]
 8008b9c:	e033      	b.n	8008c06 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8008b9e:	4b15      	ldr	r3, [pc, #84]	@ (8008bf4 <HAL_RCC_OscConfig+0x280>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8008ba6:	f7fe fc4b 	bl	8007440 <HAL_GetTick>
 8008baa:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bac:	4b10      	ldr	r3, [pc, #64]	@ (8008bf0 <HAL_RCC_OscConfig+0x27c>)
 8008bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb0:	f013 0f02 	tst.w	r3, #2
 8008bb4:	d0c7      	beq.n	8008b46 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008bb6:	f7fe fc43 	bl	8007440 <HAL_GetTick>
 8008bba:	1b40      	subs	r0, r0, r5
 8008bbc:	2802      	cmp	r0, #2
 8008bbe:	d9f5      	bls.n	8008bac <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8008bc0:	2003      	movs	r0, #3
 8008bc2:	e144      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
    FlagStatus       pwrclkchanged = RESET;
 8008bc4:	2500      	movs	r5, #0
 8008bc6:	e7d3      	b.n	8008b70 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8008bf8 <HAL_RCC_OscConfig+0x284>)
 8008bca:	6813      	ldr	r3, [r2, #0]
 8008bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bd0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8008bd2:	f7fe fc35 	bl	8007440 <HAL_GetTick>
 8008bd6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bd8:	4b07      	ldr	r3, [pc, #28]	@ (8008bf8 <HAL_RCC_OscConfig+0x284>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8008be0:	d1cb      	bne.n	8008b7a <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008be2:	f7fe fc2d 	bl	8007440 <HAL_GetTick>
 8008be6:	1b80      	subs	r0, r0, r6
 8008be8:	2864      	cmp	r0, #100	@ 0x64
 8008bea:	d9f5      	bls.n	8008bd8 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8008bec:	2003      	movs	r0, #3
 8008bee:	e12e      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
 8008bf0:	40021000 	.word	0x40021000
 8008bf4:	42420000 	.word	0x42420000
 8008bf8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008bfc:	4a98      	ldr	r2, [pc, #608]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008bfe:	6a13      	ldr	r3, [r2, #32]
 8008c00:	f043 0301 	orr.w	r3, r3, #1
 8008c04:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008c06:	6923      	ldr	r3, [r4, #16]
 8008c08:	b333      	cbz	r3, 8008c58 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8008c0a:	f7fe fc19 	bl	8007440 <HAL_GetTick>
 8008c0e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c10:	4b93      	ldr	r3, [pc, #588]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008c12:	6a1b      	ldr	r3, [r3, #32]
 8008c14:	f013 0f02 	tst.w	r3, #2
 8008c18:	d12f      	bne.n	8008c7a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c1a:	f7fe fc11 	bl	8007440 <HAL_GetTick>
 8008c1e:	1b80      	subs	r0, r0, r6
 8008c20:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008c24:	4298      	cmp	r0, r3
 8008c26:	d9f3      	bls.n	8008c10 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8008c28:	2003      	movs	r0, #3
 8008c2a:	e110      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c2c:	2b05      	cmp	r3, #5
 8008c2e:	d009      	beq.n	8008c44 <HAL_RCC_OscConfig+0x2d0>
 8008c30:	4b8b      	ldr	r3, [pc, #556]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008c32:	6a1a      	ldr	r2, [r3, #32]
 8008c34:	f022 0201 	bic.w	r2, r2, #1
 8008c38:	621a      	str	r2, [r3, #32]
 8008c3a:	6a1a      	ldr	r2, [r3, #32]
 8008c3c:	f022 0204 	bic.w	r2, r2, #4
 8008c40:	621a      	str	r2, [r3, #32]
 8008c42:	e7e0      	b.n	8008c06 <HAL_RCC_OscConfig+0x292>
 8008c44:	4b86      	ldr	r3, [pc, #536]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008c46:	6a1a      	ldr	r2, [r3, #32]
 8008c48:	f042 0204 	orr.w	r2, r2, #4
 8008c4c:	621a      	str	r2, [r3, #32]
 8008c4e:	6a1a      	ldr	r2, [r3, #32]
 8008c50:	f042 0201 	orr.w	r2, r2, #1
 8008c54:	621a      	str	r2, [r3, #32]
 8008c56:	e7d6      	b.n	8008c06 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8008c58:	f7fe fbf2 	bl	8007440 <HAL_GetTick>
 8008c5c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c5e:	4b80      	ldr	r3, [pc, #512]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	f013 0f02 	tst.w	r3, #2
 8008c66:	d008      	beq.n	8008c7a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c68:	f7fe fbea 	bl	8007440 <HAL_GetTick>
 8008c6c:	1b80      	subs	r0, r0, r6
 8008c6e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008c72:	4298      	cmp	r0, r3
 8008c74:	d9f3      	bls.n	8008c5e <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8008c76:	2003      	movs	r0, #3
 8008c78:	e0e9      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
    if (pwrclkchanged == SET)
 8008c7a:	bb75      	cbnz	r5, 8008cda <HAL_RCC_OscConfig+0x366>
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8008c7c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d06e      	beq.n	8008d60 <HAL_RCC_OscConfig+0x3ec>
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8008c82:	4a77      	ldr	r2, [pc, #476]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008c84:	6852      	ldr	r2, [r2, #4]
 8008c86:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8008c8a:	d005      	beq.n	8008c98 <HAL_RCC_OscConfig+0x324>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8008c8c:	4a74      	ldr	r2, [pc, #464]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008c8e:	6852      	ldr	r2, [r2, #4]
 8008c90:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8008c94:	2a08      	cmp	r2, #8
 8008c96:	d026      	beq.n	8008ce6 <HAL_RCC_OscConfig+0x372>
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d14a      	bne.n	8008d32 <HAL_RCC_OscConfig+0x3be>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8008c9c:	4b70      	ldr	r3, [pc, #448]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8008ca4:	d007      	beq.n	8008cb6 <HAL_RCC_OscConfig+0x342>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8008ca6:	4b6e      	ldr	r3, [pc, #440]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008caa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008cae:	6b62      	ldr	r2, [r4, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	f040 80c9 	bne.w	8008e48 <HAL_RCC_OscConfig+0x4d4>
        __HAL_RCC_PLL2_DISABLE();
 8008cb6:	4b6b      	ldr	r3, [pc, #428]	@ (8008e64 <HAL_RCC_OscConfig+0x4f0>)
 8008cb8:	2200      	movs	r2, #0
 8008cba:	669a      	str	r2, [r3, #104]	@ 0x68
        tickstart = HAL_GetTick();
 8008cbc:	f7fe fbc0 	bl	8007440 <HAL_GetTick>
 8008cc0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8008cc2:	4b67      	ldr	r3, [pc, #412]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8008cca:	d013      	beq.n	8008cf4 <HAL_RCC_OscConfig+0x380>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ccc:	f7fe fbb8 	bl	8007440 <HAL_GetTick>
 8008cd0:	1b40      	subs	r0, r0, r5
 8008cd2:	2864      	cmp	r0, #100	@ 0x64
 8008cd4:	d9f5      	bls.n	8008cc2 <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8008cd6:	2003      	movs	r0, #3
 8008cd8:	e0b9      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008cda:	4a61      	ldr	r2, [pc, #388]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008cdc:	69d3      	ldr	r3, [r2, #28]
 8008cde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ce2:	61d3      	str	r3, [r2, #28]
 8008ce4:	e7ca      	b.n	8008c7c <HAL_RCC_OscConfig+0x308>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8008ce6:	4a5e      	ldr	r2, [pc, #376]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008ce8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8008cea:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8008cee:	d0d3      	beq.n	8008c98 <HAL_RCC_OscConfig+0x324>
      return HAL_ERROR;
 8008cf0:	2001      	movs	r0, #1
 8008cf2:	e0ac      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8008cf4:	4a5a      	ldr	r2, [pc, #360]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008cf6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008cf8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008cfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cfe:	430b      	orrs	r3, r1
 8008d00:	62d3      	str	r3, [r2, #44]	@ 0x2c
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8008d02:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008d04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008d08:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008d0a:	430b      	orrs	r3, r1
 8008d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        __HAL_RCC_PLL2_ENABLE();
 8008d0e:	4b55      	ldr	r3, [pc, #340]	@ (8008e64 <HAL_RCC_OscConfig+0x4f0>)
 8008d10:	2201      	movs	r2, #1
 8008d12:	669a      	str	r2, [r3, #104]	@ 0x68
        tickstart = HAL_GetTick();
 8008d14:	f7fe fb94 	bl	8007440 <HAL_GetTick>
 8008d18:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8008d1a:	4b51      	ldr	r3, [pc, #324]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8008d22:	d11d      	bne.n	8008d60 <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d24:	f7fe fb8c 	bl	8007440 <HAL_GetTick>
 8008d28:	1b40      	subs	r0, r0, r5
 8008d2a:	2864      	cmp	r0, #100	@ 0x64
 8008d2c:	d9f5      	bls.n	8008d1a <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 8008d2e:	2003      	movs	r0, #3
 8008d30:	e08d      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8008d32:	4a4b      	ldr	r2, [pc, #300]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008d34:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        __HAL_RCC_PLL2_DISABLE();
 8008d3c:	4b49      	ldr	r3, [pc, #292]	@ (8008e64 <HAL_RCC_OscConfig+0x4f0>)
 8008d3e:	2200      	movs	r2, #0
 8008d40:	669a      	str	r2, [r3, #104]	@ 0x68
        tickstart = HAL_GetTick();
 8008d42:	f7fe fb7d 	bl	8007440 <HAL_GetTick>
 8008d46:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8008d48:	4b45      	ldr	r3, [pc, #276]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8008d50:	d006      	beq.n	8008d60 <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d52:	f7fe fb75 	bl	8007440 <HAL_GetTick>
 8008d56:	1b40      	subs	r0, r0, r5
 8008d58:	2864      	cmp	r0, #100	@ 0x64
 8008d5a:	d9f5      	bls.n	8008d48 <HAL_RCC_OscConfig+0x3d4>
            return HAL_TIMEOUT;
 8008d5c:	2003      	movs	r0, #3
 8008d5e:	e076      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d60:	6a23      	ldr	r3, [r4, #32]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d072      	beq.n	8008e4c <HAL_RCC_OscConfig+0x4d8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d66:	4a3e      	ldr	r2, [pc, #248]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008d68:	6852      	ldr	r2, [r2, #4]
 8008d6a:	f002 020c 	and.w	r2, r2, #12
 8008d6e:	2a08      	cmp	r2, #8
 8008d70:	d054      	beq.n	8008e1c <HAL_RCC_OscConfig+0x4a8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d011      	beq.n	8008d9a <HAL_RCC_OscConfig+0x426>
        __HAL_RCC_PLL_DISABLE();
 8008d76:	4b3b      	ldr	r3, [pc, #236]	@ (8008e64 <HAL_RCC_OscConfig+0x4f0>)
 8008d78:	2200      	movs	r2, #0
 8008d7a:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8008d7c:	f7fe fb60 	bl	8007440 <HAL_GetTick>
 8008d80:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008d82:	4b37      	ldr	r3, [pc, #220]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8008d8a:	d045      	beq.n	8008e18 <HAL_RCC_OscConfig+0x4a4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d8c:	f7fe fb58 	bl	8007440 <HAL_GetTick>
 8008d90:	1b00      	subs	r0, r0, r4
 8008d92:	2802      	cmp	r0, #2
 8008d94:	d9f5      	bls.n	8008d82 <HAL_RCC_OscConfig+0x40e>
            return HAL_TIMEOUT;
 8008d96:	2003      	movs	r0, #3
 8008d98:	e059      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_PLL_DISABLE();
 8008d9a:	4b32      	ldr	r3, [pc, #200]	@ (8008e64 <HAL_RCC_OscConfig+0x4f0>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8008da0:	f7fe fb4e 	bl	8007440 <HAL_GetTick>
 8008da4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008da6:	4b2e      	ldr	r3, [pc, #184]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8008dae:	d006      	beq.n	8008dbe <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008db0:	f7fe fb46 	bl	8007440 <HAL_GetTick>
 8008db4:	1b40      	subs	r0, r0, r5
 8008db6:	2802      	cmp	r0, #2
 8008db8:	d9f5      	bls.n	8008da6 <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 8008dba:	2003      	movs	r0, #3
 8008dbc:	e047      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008dbe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dc4:	d01a      	beq.n	8008dfc <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008dc6:	4926      	ldr	r1, [pc, #152]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008dc8:	684b      	ldr	r3, [r1, #4]
 8008dca:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 8008dce:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008dd0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8008dd2:	4302      	orrs	r2, r0
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8008dd8:	4b22      	ldr	r3, [pc, #136]	@ (8008e64 <HAL_RCC_OscConfig+0x4f0>)
 8008dda:	2201      	movs	r2, #1
 8008ddc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8008dde:	f7fe fb2f 	bl	8007440 <HAL_GetTick>
 8008de2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008de4:	4b1e      	ldr	r3, [pc, #120]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8008dec:	d112      	bne.n	8008e14 <HAL_RCC_OscConfig+0x4a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dee:	f7fe fb27 	bl	8007440 <HAL_GetTick>
 8008df2:	1b00      	subs	r0, r0, r4
 8008df4:	2802      	cmp	r0, #2
 8008df6:	d9f5      	bls.n	8008de4 <HAL_RCC_OscConfig+0x470>
            return HAL_TIMEOUT;
 8008df8:	2003      	movs	r0, #3
 8008dfa:	e028      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8008dfc:	4a18      	ldr	r2, [pc, #96]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008dfe:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008e00:	6861      	ldr	r1, [r4, #4]
 8008e02:	430b      	orrs	r3, r1
 8008e04:	62d3      	str	r3, [r2, #44]	@ 0x2c
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008e06:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008e08:	f023 030f 	bic.w	r3, r3, #15
 8008e0c:	68e1      	ldr	r1, [r4, #12]
 8008e0e:	430b      	orrs	r3, r1
 8008e10:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008e12:	e7d8      	b.n	8008dc6 <HAL_RCC_OscConfig+0x452>
  return HAL_OK;
 8008e14:	2000      	movs	r0, #0
 8008e16:	e01a      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
 8008e18:	2000      	movs	r0, #0
 8008e1a:	e018      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d018      	beq.n	8008e52 <HAL_RCC_OscConfig+0x4de>
        pll_config = RCC->CFGR;
 8008e20:	4b0f      	ldr	r3, [pc, #60]	@ (8008e60 <HAL_RCC_OscConfig+0x4ec>)
 8008e22:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e24:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8008e28:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008e2a:	4291      	cmp	r1, r2
 8008e2c:	d113      	bne.n	8008e56 <HAL_RCC_OscConfig+0x4e2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008e2e:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8008e32:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d110      	bne.n	8008e5a <HAL_RCC_OscConfig+0x4e6>
  return HAL_OK;
 8008e38:	2000      	movs	r0, #0
 8008e3a:	e008      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
    return HAL_ERROR;
 8008e3c:	2001      	movs	r0, #1
}
 8008e3e:	4770      	bx	lr
        return HAL_ERROR;
 8008e40:	2001      	movs	r0, #1
 8008e42:	e004      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
        return HAL_ERROR;
 8008e44:	2001      	movs	r0, #1
 8008e46:	e002      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
          return HAL_ERROR;
 8008e48:	2001      	movs	r0, #1
 8008e4a:	e000      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
  return HAL_OK;
 8008e4c:	2000      	movs	r0, #0
}
 8008e4e:	b002      	add	sp, #8
 8008e50:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8008e52:	2001      	movs	r0, #1
 8008e54:	e7fb      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
          return HAL_ERROR;
 8008e56:	2001      	movs	r0, #1
 8008e58:	e7f9      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
 8008e5a:	2001      	movs	r0, #1
 8008e5c:	e7f7      	b.n	8008e4e <HAL_RCC_OscConfig+0x4da>
 8008e5e:	bf00      	nop
 8008e60:	40021000 	.word	0x40021000
 8008e64:	42420000 	.word	0x42420000

08008e68 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8008e68:	4b29      	ldr	r3, [pc, #164]	@ (8008f10 <HAL_RCC_GetSysClockFreq+0xa8>)
 8008e6a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8008e6c:	f003 020c 	and.w	r2, r3, #12
 8008e70:	2a08      	cmp	r2, #8
 8008e72:	d001      	beq.n	8008e78 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8008e74:	4827      	ldr	r0, [pc, #156]	@ (8008f14 <HAL_RCC_GetSysClockFreq+0xac>)
}
 8008e76:	4770      	bx	lr
{
 8008e78:	b570      	push	{r4, r5, r6, lr}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008e7a:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8008e7e:	4926      	ldr	r1, [pc, #152]	@ (8008f18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008e80:	5c8c      	ldrb	r4, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008e82:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8008e86:	d03f      	beq.n	8008f08 <HAL_RCC_GetSysClockFreq+0xa0>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8008e88:	4a21      	ldr	r2, [pc, #132]	@ (8008f10 <HAL_RCC_GetSysClockFreq+0xa8>)
 8008e8a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008e8c:	f003 030f 	and.w	r3, r3, #15
 8008e90:	4922      	ldr	r1, [pc, #136]	@ (8008f1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8008e92:	5ccb      	ldrb	r3, [r1, r3]
        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8008e94:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008e96:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8008e9a:	d02f      	beq.n	8008efc <HAL_RCC_GetSysClockFreq+0x94>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8008e9c:	491c      	ldr	r1, [pc, #112]	@ (8008f10 <HAL_RCC_GetSysClockFreq+0xa8>)
 8008e9e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8008ea0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8008ea4:	3201      	adds	r2, #1
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8008ea6:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
 8008ea8:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8008eac:	3002      	adds	r0, #2
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8008eae:	fba0 0e04 	umull	r0, lr, r0, r4
 8008eb2:	ea4f 114e 	mov.w	r1, lr, lsl #5
 8008eb6:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
 8008eba:	0145      	lsls	r5, r0, #5
 8008ebc:	1a2d      	subs	r5, r5, r0
 8008ebe:	eb61 060e 	sbc.w	r6, r1, lr
 8008ec2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8008ec6:	ea4c 6c95 	orr.w	ip, ip, r5, lsr #26
 8008eca:	01a9      	lsls	r1, r5, #6
 8008ecc:	1b49      	subs	r1, r1, r5
 8008ece:	eb6c 0c06 	sbc.w	ip, ip, r6
 8008ed2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8008ed6:	ea4c 7c51 	orr.w	ip, ip, r1, lsr #29
 8008eda:	00c9      	lsls	r1, r1, #3
 8008edc:	1809      	adds	r1, r1, r0
 8008ede:	eb4e 0e0c 	adc.w	lr, lr, ip
 8008ee2:	ea4f 2e4e 	mov.w	lr, lr, lsl #9
 8008ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8008eea:	0248      	lsls	r0, r1, #9
 8008eec:	ea4e 51d1 	orr.w	r1, lr, r1, lsr #23
 8008ef0:	f7f7 feaa 	bl	8000c48 <__aeabi_uldivmod>
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8008ef4:	2c0d      	cmp	r4, #13
 8008ef6:	d10a      	bne.n	8008f0e <HAL_RCC_GetSysClockFreq+0xa6>
          pllclk = pllclk / 2;
 8008ef8:	0840      	lsrs	r0, r0, #1
 8008efa:	e008      	b.n	8008f0e <HAL_RCC_GetSysClockFreq+0xa6>
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8008efc:	4805      	ldr	r0, [pc, #20]	@ (8008f14 <HAL_RCC_GetSysClockFreq+0xac>)
 8008efe:	fb04 f000 	mul.w	r0, r4, r0
 8008f02:	fbb0 f0f3 	udiv	r0, r0, r3
 8008f06:	e7f5      	b.n	8008ef4 <HAL_RCC_GetSysClockFreq+0x8c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008f08:	4805      	ldr	r0, [pc, #20]	@ (8008f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f0a:	fb04 f000 	mul.w	r0, r4, r0
}
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}
 8008f10:	40021000 	.word	0x40021000
 8008f14:	007a1200 	.word	0x007a1200
 8008f18:	08011568 	.word	0x08011568
 8008f1c:	08011558 	.word	0x08011558
 8008f20:	003d0900 	.word	0x003d0900

08008f24 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8008f24:	2800      	cmp	r0, #0
 8008f26:	f000 80a0 	beq.w	800906a <HAL_RCC_ClockConfig+0x146>
{
 8008f2a:	b570      	push	{r4, r5, r6, lr}
 8008f2c:	460d      	mov	r5, r1
 8008f2e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f30:	4b52      	ldr	r3, [pc, #328]	@ (800907c <HAL_RCC_ClockConfig+0x158>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0307 	and.w	r3, r3, #7
 8008f38:	428b      	cmp	r3, r1
 8008f3a:	d20b      	bcs.n	8008f54 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f3c:	4a4f      	ldr	r2, [pc, #316]	@ (800907c <HAL_RCC_ClockConfig+0x158>)
 8008f3e:	6813      	ldr	r3, [r2, #0]
 8008f40:	f023 0307 	bic.w	r3, r3, #7
 8008f44:	430b      	orrs	r3, r1
 8008f46:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f48:	6813      	ldr	r3, [r2, #0]
 8008f4a:	f003 0307 	and.w	r3, r3, #7
 8008f4e:	428b      	cmp	r3, r1
 8008f50:	f040 808d 	bne.w	800906e <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f54:	6823      	ldr	r3, [r4, #0]
 8008f56:	f013 0f02 	tst.w	r3, #2
 8008f5a:	d017      	beq.n	8008f8c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f5c:	f013 0f04 	tst.w	r3, #4
 8008f60:	d004      	beq.n	8008f6c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f62:	4a47      	ldr	r2, [pc, #284]	@ (8009080 <HAL_RCC_ClockConfig+0x15c>)
 8008f64:	6853      	ldr	r3, [r2, #4]
 8008f66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008f6a:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f6c:	6823      	ldr	r3, [r4, #0]
 8008f6e:	f013 0f08 	tst.w	r3, #8
 8008f72:	d004      	beq.n	8008f7e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008f74:	4a42      	ldr	r2, [pc, #264]	@ (8009080 <HAL_RCC_ClockConfig+0x15c>)
 8008f76:	6853      	ldr	r3, [r2, #4]
 8008f78:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8008f7c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f7e:	4a40      	ldr	r2, [pc, #256]	@ (8009080 <HAL_RCC_ClockConfig+0x15c>)
 8008f80:	6853      	ldr	r3, [r2, #4]
 8008f82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f86:	68a1      	ldr	r1, [r4, #8]
 8008f88:	430b      	orrs	r3, r1
 8008f8a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f8c:	6823      	ldr	r3, [r4, #0]
 8008f8e:	f013 0f01 	tst.w	r3, #1
 8008f92:	d031      	beq.n	8008ff8 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f94:	6863      	ldr	r3, [r4, #4]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d020      	beq.n	8008fdc <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d025      	beq.n	8008fea <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f9e:	4a38      	ldr	r2, [pc, #224]	@ (8009080 <HAL_RCC_ClockConfig+0x15c>)
 8008fa0:	6812      	ldr	r2, [r2, #0]
 8008fa2:	f012 0f02 	tst.w	r2, #2
 8008fa6:	d064      	beq.n	8009072 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008fa8:	4935      	ldr	r1, [pc, #212]	@ (8009080 <HAL_RCC_ClockConfig+0x15c>)
 8008faa:	684a      	ldr	r2, [r1, #4]
 8008fac:	f022 0203 	bic.w	r2, r2, #3
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8008fb4:	f7fe fa44 	bl	8007440 <HAL_GetTick>
 8008fb8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fba:	4b31      	ldr	r3, [pc, #196]	@ (8009080 <HAL_RCC_ClockConfig+0x15c>)
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f003 030c 	and.w	r3, r3, #12
 8008fc2:	6862      	ldr	r2, [r4, #4]
 8008fc4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008fc8:	d016      	beq.n	8008ff8 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fca:	f7fe fa39 	bl	8007440 <HAL_GetTick>
 8008fce:	1b80      	subs	r0, r0, r6
 8008fd0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008fd4:	4298      	cmp	r0, r3
 8008fd6:	d9f0      	bls.n	8008fba <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8008fd8:	2003      	movs	r0, #3
 8008fda:	e045      	b.n	8009068 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fdc:	4a28      	ldr	r2, [pc, #160]	@ (8009080 <HAL_RCC_ClockConfig+0x15c>)
 8008fde:	6812      	ldr	r2, [r2, #0]
 8008fe0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008fe4:	d1e0      	bne.n	8008fa8 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8008fe6:	2001      	movs	r0, #1
 8008fe8:	e03e      	b.n	8009068 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fea:	4a25      	ldr	r2, [pc, #148]	@ (8009080 <HAL_RCC_ClockConfig+0x15c>)
 8008fec:	6812      	ldr	r2, [r2, #0]
 8008fee:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8008ff2:	d1d9      	bne.n	8008fa8 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8008ff4:	2001      	movs	r0, #1
 8008ff6:	e037      	b.n	8009068 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ff8:	4b20      	ldr	r3, [pc, #128]	@ (800907c <HAL_RCC_ClockConfig+0x158>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 0307 	and.w	r3, r3, #7
 8009000:	42ab      	cmp	r3, r5
 8009002:	d90a      	bls.n	800901a <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009004:	4a1d      	ldr	r2, [pc, #116]	@ (800907c <HAL_RCC_ClockConfig+0x158>)
 8009006:	6813      	ldr	r3, [r2, #0]
 8009008:	f023 0307 	bic.w	r3, r3, #7
 800900c:	432b      	orrs	r3, r5
 800900e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009010:	6813      	ldr	r3, [r2, #0]
 8009012:	f003 0307 	and.w	r3, r3, #7
 8009016:	42ab      	cmp	r3, r5
 8009018:	d12d      	bne.n	8009076 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	f013 0f04 	tst.w	r3, #4
 8009020:	d006      	beq.n	8009030 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009022:	4a17      	ldr	r2, [pc, #92]	@ (8009080 <HAL_RCC_ClockConfig+0x15c>)
 8009024:	6853      	ldr	r3, [r2, #4]
 8009026:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800902a:	68e1      	ldr	r1, [r4, #12]
 800902c:	430b      	orrs	r3, r1
 800902e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	f013 0f08 	tst.w	r3, #8
 8009036:	d007      	beq.n	8009048 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009038:	4a11      	ldr	r2, [pc, #68]	@ (8009080 <HAL_RCC_ClockConfig+0x15c>)
 800903a:	6853      	ldr	r3, [r2, #4]
 800903c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8009040:	6921      	ldr	r1, [r4, #16]
 8009042:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009046:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009048:	f7ff ff0e 	bl	8008e68 <HAL_RCC_GetSysClockFreq>
 800904c:	4b0c      	ldr	r3, [pc, #48]	@ (8009080 <HAL_RCC_ClockConfig+0x15c>)
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009054:	4a0b      	ldr	r2, [pc, #44]	@ (8009084 <HAL_RCC_ClockConfig+0x160>)
 8009056:	5cd3      	ldrb	r3, [r2, r3]
 8009058:	40d8      	lsrs	r0, r3
 800905a:	4b0b      	ldr	r3, [pc, #44]	@ (8009088 <HAL_RCC_ClockConfig+0x164>)
 800905c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800905e:	4b0b      	ldr	r3, [pc, #44]	@ (800908c <HAL_RCC_ClockConfig+0x168>)
 8009060:	6818      	ldr	r0, [r3, #0]
 8009062:	f7fe f9a9 	bl	80073b8 <HAL_InitTick>
  return HAL_OK;
 8009066:	2000      	movs	r0, #0
}
 8009068:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800906a:	2001      	movs	r0, #1
}
 800906c:	4770      	bx	lr
    return HAL_ERROR;
 800906e:	2001      	movs	r0, #1
 8009070:	e7fa      	b.n	8009068 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8009072:	2001      	movs	r0, #1
 8009074:	e7f8      	b.n	8009068 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8009076:	2001      	movs	r0, #1
 8009078:	e7f6      	b.n	8009068 <HAL_RCC_ClockConfig+0x144>
 800907a:	bf00      	nop
 800907c:	40022000 	.word	0x40022000
 8009080:	40021000 	.word	0x40021000
 8009084:	08011548 	.word	0x08011548
 8009088:	2000807c 	.word	0x2000807c
 800908c:	20008084 	.word	0x20008084

08009090 <HAL_RCC_GetHCLKFreq>:
}
 8009090:	4b01      	ldr	r3, [pc, #4]	@ (8009098 <HAL_RCC_GetHCLKFreq+0x8>)
 8009092:	6818      	ldr	r0, [r3, #0]
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	2000807c 	.word	0x2000807c

0800909c <HAL_RCC_GetPCLK1Freq>:
{
 800909c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800909e:	f7ff fff7 	bl	8009090 <HAL_RCC_GetHCLKFreq>
 80090a2:	4b04      	ldr	r3, [pc, #16]	@ (80090b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80090aa:	4a03      	ldr	r2, [pc, #12]	@ (80090b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80090ac:	5cd3      	ldrb	r3, [r2, r3]
}
 80090ae:	40d8      	lsrs	r0, r3
 80090b0:	bd08      	pop	{r3, pc}
 80090b2:	bf00      	nop
 80090b4:	40021000 	.word	0x40021000
 80090b8:	08011540 	.word	0x08011540

080090bc <HAL_RCC_GetPCLK2Freq>:
{
 80090bc:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80090be:	f7ff ffe7 	bl	8009090 <HAL_RCC_GetHCLKFreq>
 80090c2:	4b04      	ldr	r3, [pc, #16]	@ (80090d4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80090ca:	4a03      	ldr	r2, [pc, #12]	@ (80090d8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80090cc:	5cd3      	ldrb	r3, [r2, r3]
}
 80090ce:	40d8      	lsrs	r0, r3
 80090d0:	bd08      	pop	{r3, pc}
 80090d2:	bf00      	nop
 80090d4:	40021000 	.word	0x40021000
 80090d8:	08011540 	.word	0x08011540

080090dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80090e2:	6803      	ldr	r3, [r0, #0]
 80090e4:	f013 0f01 	tst.w	r3, #1
 80090e8:	d039      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x82>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090ea:	4b6e      	ldr	r3, [pc, #440]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80090ec:	69db      	ldr	r3, [r3, #28]
 80090ee:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80090f2:	d10b      	bne.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x30>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090f4:	4b6b      	ldr	r3, [pc, #428]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80090f6:	69da      	ldr	r2, [r3, #28]
 80090f8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80090fc:	61da      	str	r2, [r3, #28]
 80090fe:	69db      	ldr	r3, [r3, #28]
 8009100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009104:	9301      	str	r3, [sp, #4]
 8009106:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009108:	2501      	movs	r5, #1
 800910a:	e000      	b.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x32>
    FlagStatus pwrclkchanged = RESET;
 800910c:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800910e:	4b66      	ldr	r3, [pc, #408]	@ (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8009116:	d07d      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x138>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009118:	4b62      	ldr	r3, [pc, #392]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800911a:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800911c:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8009120:	d013      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8009122:	6862      	ldr	r2, [r4, #4]
 8009124:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8009128:	429a      	cmp	r2, r3
 800912a:	d00e      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800912c:	4a5d      	ldr	r2, [pc, #372]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800912e:	6a13      	ldr	r3, [r2, #32]
 8009130:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009134:	495d      	ldr	r1, [pc, #372]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009136:	2601      	movs	r6, #1
 8009138:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 800913c:	2600      	movs	r6, #0
 800913e:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009142:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009144:	f013 0f01 	tst.w	r3, #1
 8009148:	d179      	bne.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x162>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800914a:	4a56      	ldr	r2, [pc, #344]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800914c:	6a13      	ldr	r3, [r2, #32]
 800914e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009152:	6861      	ldr	r1, [r4, #4]
 8009154:	430b      	orrs	r3, r1
 8009156:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009158:	2d00      	cmp	r5, #0
 800915a:	f040 8082 	bne.w	8009262 <HAL_RCCEx_PeriphCLKConfig+0x186>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800915e:	6823      	ldr	r3, [r4, #0]
 8009160:	f013 0f02 	tst.w	r3, #2
 8009164:	d006      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009166:	4a4f      	ldr	r2, [pc, #316]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009168:	6853      	ldr	r3, [r2, #4]
 800916a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800916e:	68a1      	ldr	r1, [r4, #8]
 8009170:	430b      	orrs	r3, r1
 8009172:	6053      	str	r3, [r2, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	f013 0f04 	tst.w	r3, #4
 800917a:	d006      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800917c:	4a49      	ldr	r2, [pc, #292]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800917e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009180:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009184:	68e1      	ldr	r1, [r4, #12]
 8009186:	430b      	orrs	r3, r1
 8009188:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	f013 0f08 	tst.w	r3, #8
 8009190:	d006      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8009192:	4a44      	ldr	r2, [pc, #272]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009194:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009196:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800919a:	6921      	ldr	r1, [r4, #16]
 800919c:	430b      	orrs	r3, r1
 800919e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80091a0:	4b40      	ldr	r3, [pc, #256]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80091a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80091a8:	d104      	bne.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80091aa:	4b3e      	ldr	r3, [pc, #248]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80091ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ae:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80091b2:	d062      	beq.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x19e>

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80091b4:	4b3b      	ldr	r3, [pc, #236]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80091bc:	d156      	bne.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x190>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80091be:	4b39      	ldr	r3, [pc, #228]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 80091c6:	d006      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80091c8:	4b36      	ldr	r3, [pc, #216]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80091ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80091d0:	69a2      	ldr	r2, [r4, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d15f      	bne.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      {
        return HAL_ERROR;
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80091d6:	4a33      	ldr	r2, [pc, #204]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80091d8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80091da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091de:	69a1      	ldr	r1, [r4, #24]
 80091e0:	430b      	orrs	r3, r1
 80091e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80091e4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80091e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80091ea:	6961      	ldr	r1, [r4, #20]
 80091ec:	430b      	orrs	r3, r1
 80091ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80091f0:	4b2e      	ldr	r3, [pc, #184]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091f2:	2201      	movs	r2, #1
 80091f4:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091f6:	f7fe f923 	bl	8007440 <HAL_GetTick>
 80091fa:	4605      	mov	r5, r0

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80091fc:	4b29      	ldr	r3, [pc, #164]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8009204:	d139      	bne.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x19e>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009206:	f7fe f91b 	bl	8007440 <HAL_GetTick>
 800920a:	1b40      	subs	r0, r0, r5
 800920c:	2864      	cmp	r0, #100	@ 0x64
 800920e:	d9f5      	bls.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x120>
        {
          return HAL_TIMEOUT;
 8009210:	2003      	movs	r0, #3
 8009212:	e03e      	b.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009214:	4a24      	ldr	r2, [pc, #144]	@ (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009216:	6813      	ldr	r3, [r2, #0]
 8009218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800921c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800921e:	f7fe f90f 	bl	8007440 <HAL_GetTick>
 8009222:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009224:	4b20      	ldr	r3, [pc, #128]	@ (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800922c:	f47f af74 	bne.w	8009118 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009230:	f7fe f906 	bl	8007440 <HAL_GetTick>
 8009234:	1b80      	subs	r0, r0, r6
 8009236:	2864      	cmp	r0, #100	@ 0x64
 8009238:	d9f4      	bls.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x148>
          return HAL_TIMEOUT;
 800923a:	2003      	movs	r0, #3
 800923c:	e029      	b.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        tickstart = HAL_GetTick();
 800923e:	f7fe f8ff 	bl	8007440 <HAL_GetTick>
 8009242:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009244:	4b17      	ldr	r3, [pc, #92]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009246:	6a1b      	ldr	r3, [r3, #32]
 8009248:	f013 0f02 	tst.w	r3, #2
 800924c:	f47f af7d 	bne.w	800914a <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009250:	f7fe f8f6 	bl	8007440 <HAL_GetTick>
 8009254:	1b80      	subs	r0, r0, r6
 8009256:	f241 3388 	movw	r3, #5000	@ 0x1388
 800925a:	4298      	cmp	r0, r3
 800925c:	d9f2      	bls.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x168>
            return HAL_TIMEOUT;
 800925e:	2003      	movs	r0, #3
 8009260:	e017      	b.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009262:	69d3      	ldr	r3, [r2, #28]
 8009264:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009268:	61d3      	str	r3, [r2, #28]
 800926a:	e778      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x82>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800926c:	4b0d      	ldr	r3, [pc, #52]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800926e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009270:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009274:	6962      	ldr	r2, [r4, #20]
 8009276:	4293      	cmp	r3, r2
 8009278:	d10f      	bne.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x1be>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	f013 0f10 	tst.w	r3, #16
 8009280:	d00d      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009282:	4a08      	ldr	r2, [pc, #32]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009284:	6853      	ldr	r3, [r2, #4]
 8009286:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800928a:	69e1      	ldr	r1, [r4, #28]
 800928c:	430b      	orrs	r3, r1
 800928e:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8009290:	2000      	movs	r0, #0
}
 8009292:	b002      	add	sp, #8
 8009294:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8009296:	2001      	movs	r0, #1
 8009298:	e7fb      	b.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        return HAL_ERROR;
 800929a:	2001      	movs	r0, #1
 800929c:	e7f9      	b.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  return HAL_OK;
 800929e:	2000      	movs	r0, #0
 80092a0:	e7f7      	b.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80092a2:	bf00      	nop
 80092a4:	40021000 	.word	0x40021000
 80092a8:	40007000 	.word	0x40007000
 80092ac:	42420000 	.word	0x42420000

080092b0 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80092b0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b2:	f102 030c 	add.w	r3, r2, #12
 80092b6:	e853 3f00 	ldrex	r3, [r3]
 80092ba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092be:	320c      	adds	r2, #12
 80092c0:	e842 3100 	strex	r1, r3, [r2]
 80092c4:	2900      	cmp	r1, #0
 80092c6:	d1f3      	bne.n	80092b0 <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092c8:	2320      	movs	r3, #32
 80092ca:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 80092ce:	4770      	bx	lr

080092d0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092d0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d2:	f102 030c 	add.w	r3, r2, #12
 80092d6:	e853 3f00 	ldrex	r3, [r3]
 80092da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092de:	320c      	adds	r2, #12
 80092e0:	e842 3100 	strex	r1, r3, [r2]
 80092e4:	2900      	cmp	r1, #0
 80092e6:	d1f3      	bne.n	80092d0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092e8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ea:	f102 0314 	add.w	r3, r2, #20
 80092ee:	e853 3f00 	ldrex	r3, [r3]
 80092f2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f6:	3214      	adds	r2, #20
 80092f8:	e842 3100 	strex	r1, r3, [r2]
 80092fc:	2900      	cmp	r1, #0
 80092fe:	d1f3      	bne.n	80092e8 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009300:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009302:	2b01      	cmp	r3, #1
 8009304:	d005      	beq.n	8009312 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009306:	2320      	movs	r3, #32
 8009308:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800930c:	2300      	movs	r3, #0
 800930e:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8009310:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009312:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009314:	f102 030c 	add.w	r3, r2, #12
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009320:	320c      	adds	r2, #12
 8009322:	e842 3100 	strex	r1, r3, [r2]
 8009326:	2900      	cmp	r1, #0
 8009328:	d1f3      	bne.n	8009312 <UART_EndRxTransfer+0x42>
 800932a:	e7ec      	b.n	8009306 <UART_EndRxTransfer+0x36>

0800932c <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800932c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8009330:	b2db      	uxtb	r3, r3
 8009332:	2b21      	cmp	r3, #33	@ 0x21
 8009334:	d001      	beq.n	800933a <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8009336:	2002      	movs	r0, #2
  }
}
 8009338:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800933a:	6883      	ldr	r3, [r0, #8]
 800933c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009340:	d017      	beq.n	8009372 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009342:	6a03      	ldr	r3, [r0, #32]
 8009344:	1c5a      	adds	r2, r3, #1
 8009346:	6202      	str	r2, [r0, #32]
 8009348:	781a      	ldrb	r2, [r3, #0]
 800934a:	6803      	ldr	r3, [r0, #0]
 800934c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800934e:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8009350:	b29b      	uxth	r3, r3
 8009352:	3b01      	subs	r3, #1
 8009354:	b29b      	uxth	r3, r3
 8009356:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8009358:	b94b      	cbnz	r3, 800936e <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800935a:	6802      	ldr	r2, [r0, #0]
 800935c:	68d3      	ldr	r3, [r2, #12]
 800935e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009362:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009364:	6802      	ldr	r2, [r0, #0]
 8009366:	68d3      	ldr	r3, [r2, #12]
 8009368:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800936c:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800936e:	2000      	movs	r0, #0
 8009370:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009372:	6903      	ldr	r3, [r0, #16]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1e4      	bne.n	8009342 <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009378:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800937a:	881b      	ldrh	r3, [r3, #0]
 800937c:	6802      	ldr	r2, [r0, #0]
 800937e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009382:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8009384:	6a03      	ldr	r3, [r0, #32]
 8009386:	3302      	adds	r3, #2
 8009388:	6203      	str	r3, [r0, #32]
 800938a:	e7e0      	b.n	800934e <UART_Transmit_IT+0x22>

0800938c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800938c:	b510      	push	{r4, lr}
 800938e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009390:	6802      	ldr	r2, [r0, #0]
 8009392:	6913      	ldr	r3, [r2, #16]
 8009394:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8009398:	68c1      	ldr	r1, [r0, #12]
 800939a:	430b      	orrs	r3, r1
 800939c:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800939e:	6883      	ldr	r3, [r0, #8]
 80093a0:	6902      	ldr	r2, [r0, #16]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	6942      	ldr	r2, [r0, #20]
 80093a6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80093a8:	6801      	ldr	r1, [r0, #0]
 80093aa:	68cb      	ldr	r3, [r1, #12]
 80093ac:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80093b0:	f023 030c 	bic.w	r3, r3, #12
 80093b4:	4313      	orrs	r3, r2
 80093b6:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093b8:	6802      	ldr	r2, [r0, #0]
 80093ba:	6953      	ldr	r3, [r2, #20]
 80093bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093c0:	6981      	ldr	r1, [r0, #24]
 80093c2:	430b      	orrs	r3, r1
 80093c4:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80093c6:	6802      	ldr	r2, [r0, #0]
 80093c8:	4b13      	ldr	r3, [pc, #76]	@ (8009418 <UART_SetConfig+0x8c>)
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d020      	beq.n	8009410 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80093ce:	f7ff fe65 	bl	800909c <HAL_RCC_GetPCLK1Freq>
 80093d2:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80093d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80093dc:	6863      	ldr	r3, [r4, #4]
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80093e4:	480d      	ldr	r0, [pc, #52]	@ (800941c <UART_SetConfig+0x90>)
 80093e6:	fba0 3102 	umull	r3, r1, r0, r2
 80093ea:	0949      	lsrs	r1, r1, #5
 80093ec:	2364      	movs	r3, #100	@ 0x64
 80093ee:	fb03 2311 	mls	r3, r3, r1, r2
 80093f2:	011b      	lsls	r3, r3, #4
 80093f4:	3332      	adds	r3, #50	@ 0x32
 80093f6:	fba0 0303 	umull	r0, r3, r0, r3
 80093fa:	095b      	lsrs	r3, r3, #5
 80093fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009400:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8009404:	f003 030f 	and.w	r3, r3, #15
 8009408:	6821      	ldr	r1, [r4, #0]
 800940a:	4413      	add	r3, r2
 800940c:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 800940e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8009410:	f7ff fe54 	bl	80090bc <HAL_RCC_GetPCLK2Freq>
 8009414:	4602      	mov	r2, r0
 8009416:	e7dd      	b.n	80093d4 <UART_SetConfig+0x48>
 8009418:	40013800 	.word	0x40013800
 800941c:	51eb851f 	.word	0x51eb851f

08009420 <UART_WaitOnFlagUntilTimeout>:
{
 8009420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009424:	b083      	sub	sp, #12
 8009426:	4605      	mov	r5, r0
 8009428:	460e      	mov	r6, r1
 800942a:	4617      	mov	r7, r2
 800942c:	4699      	mov	r9, r3
 800942e:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009432:	682b      	ldr	r3, [r5, #0]
 8009434:	681c      	ldr	r4, [r3, #0]
 8009436:	ea36 0404 	bics.w	r4, r6, r4
 800943a:	bf0c      	ite	eq
 800943c:	2401      	moveq	r4, #1
 800943e:	2400      	movne	r4, #0
 8009440:	42bc      	cmp	r4, r7
 8009442:	d128      	bne.n	8009496 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8009444:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009448:	d0f3      	beq.n	8009432 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800944a:	f7fd fff9 	bl	8007440 <HAL_GetTick>
 800944e:	eba0 0009 	sub.w	r0, r0, r9
 8009452:	4540      	cmp	r0, r8
 8009454:	d823      	bhi.n	800949e <UART_WaitOnFlagUntilTimeout+0x7e>
 8009456:	f1b8 0f00 	cmp.w	r8, #0
 800945a:	d022      	beq.n	80094a2 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	68da      	ldr	r2, [r3, #12]
 8009460:	f012 0f04 	tst.w	r2, #4
 8009464:	d0e5      	beq.n	8009432 <UART_WaitOnFlagUntilTimeout+0x12>
 8009466:	2e80      	cmp	r6, #128	@ 0x80
 8009468:	d0e3      	beq.n	8009432 <UART_WaitOnFlagUntilTimeout+0x12>
 800946a:	2e40      	cmp	r6, #64	@ 0x40
 800946c:	d0e1      	beq.n	8009432 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	f012 0f08 	tst.w	r2, #8
 8009474:	d0dd      	beq.n	8009432 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009476:	2400      	movs	r4, #0
 8009478:	9401      	str	r4, [sp, #4]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	9201      	str	r2, [sp, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8009484:	4628      	mov	r0, r5
 8009486:	f7ff ff23 	bl	80092d0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800948a:	2308      	movs	r3, #8
 800948c:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 800948e:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8009492:	2001      	movs	r0, #1
 8009494:	e000      	b.n	8009498 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8009496:	2000      	movs	r0, #0
}
 8009498:	b003      	add	sp, #12
 800949a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 800949e:	2003      	movs	r0, #3
 80094a0:	e7fa      	b.n	8009498 <UART_WaitOnFlagUntilTimeout+0x78>
 80094a2:	2003      	movs	r0, #3
 80094a4:	e7f8      	b.n	8009498 <UART_WaitOnFlagUntilTimeout+0x78>

080094a6 <HAL_UART_Init>:
  if (huart == NULL)
 80094a6:	b360      	cbz	r0, 8009502 <HAL_UART_Init+0x5c>
{
 80094a8:	b510      	push	{r4, lr}
 80094aa:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80094ac:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80094b0:	b313      	cbz	r3, 80094f8 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80094b2:	2324      	movs	r3, #36	@ 0x24
 80094b4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80094b8:	6822      	ldr	r2, [r4, #0]
 80094ba:	68d3      	ldr	r3, [r2, #12]
 80094bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80094c0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80094c2:	4620      	mov	r0, r4
 80094c4:	f7ff ff62 	bl	800938c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094c8:	6822      	ldr	r2, [r4, #0]
 80094ca:	6913      	ldr	r3, [r2, #16]
 80094cc:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80094d0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094d2:	6822      	ldr	r2, [r4, #0]
 80094d4:	6953      	ldr	r3, [r2, #20]
 80094d6:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80094da:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80094dc:	6822      	ldr	r2, [r4, #0]
 80094de:	68d3      	ldr	r3, [r2, #12]
 80094e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80094e4:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094e6:	2000      	movs	r0, #0
 80094e8:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80094ea:	2320      	movs	r3, #32
 80094ec:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80094f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094f4:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80094f6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80094f8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80094fc:	f7fd fdd8 	bl	80070b0 <HAL_UART_MspInit>
 8009500:	e7d7      	b.n	80094b2 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8009502:	2001      	movs	r0, #1
}
 8009504:	4770      	bx	lr

08009506 <HAL_LIN_Init>:
  if (huart == NULL)
 8009506:	2800      	cmp	r0, #0
 8009508:	d03c      	beq.n	8009584 <HAL_LIN_Init+0x7e>
{
 800950a:	b538      	push	{r3, r4, r5, lr}
 800950c:	460d      	mov	r5, r1
 800950e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009510:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8009514:	2b00      	cmp	r3, #0
 8009516:	d030      	beq.n	800957a <HAL_LIN_Init+0x74>
  huart->gState = HAL_UART_STATE_BUSY;
 8009518:	2324      	movs	r3, #36	@ 0x24
 800951a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800951e:	6822      	ldr	r2, [r4, #0]
 8009520:	68d3      	ldr	r3, [r2, #12]
 8009522:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009526:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8009528:	4620      	mov	r0, r4
 800952a:	f7ff ff2f 	bl	800938c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 800952e:	6822      	ldr	r2, [r4, #0]
 8009530:	6913      	ldr	r3, [r2, #16]
 8009532:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009536:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8009538:	6822      	ldr	r2, [r4, #0]
 800953a:	6953      	ldr	r3, [r2, #20]
 800953c:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8009540:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8009542:	6822      	ldr	r2, [r4, #0]
 8009544:	6913      	ldr	r3, [r2, #16]
 8009546:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800954a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 800954c:	6822      	ldr	r2, [r4, #0]
 800954e:	6913      	ldr	r3, [r2, #16]
 8009550:	f023 0320 	bic.w	r3, r3, #32
 8009554:	6113      	str	r3, [r2, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8009556:	6822      	ldr	r2, [r4, #0]
 8009558:	6913      	ldr	r3, [r2, #16]
 800955a:	432b      	orrs	r3, r5
 800955c:	6113      	str	r3, [r2, #16]
  __HAL_UART_ENABLE(huart);
 800955e:	6822      	ldr	r2, [r4, #0]
 8009560:	68d3      	ldr	r3, [r2, #12]
 8009562:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009566:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009568:	2000      	movs	r0, #0
 800956a:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800956c:	2320      	movs	r3, #32
 800956e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009572:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009576:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8009578:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 800957a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800957e:	f7fd fd97 	bl	80070b0 <HAL_UART_MspInit>
 8009582:	e7c9      	b.n	8009518 <HAL_LIN_Init+0x12>
    return HAL_ERROR;
 8009584:	2001      	movs	r0, #1
}
 8009586:	4770      	bx	lr

08009588 <HAL_UART_Transmit>:
{
 8009588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800958c:	b082      	sub	sp, #8
 800958e:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8009590:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b20      	cmp	r3, #32
 8009598:	d156      	bne.n	8009648 <HAL_UART_Transmit+0xc0>
 800959a:	4604      	mov	r4, r0
 800959c:	460d      	mov	r5, r1
 800959e:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80095a0:	2900      	cmp	r1, #0
 80095a2:	d055      	beq.n	8009650 <HAL_UART_Transmit+0xc8>
 80095a4:	b90a      	cbnz	r2, 80095aa <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 80095a6:	2001      	movs	r0, #1
 80095a8:	e04f      	b.n	800964a <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095aa:	2300      	movs	r3, #0
 80095ac:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095ae:	2321      	movs	r3, #33	@ 0x21
 80095b0:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 80095b4:	f7fd ff44 	bl	8007440 <HAL_GetTick>
 80095b8:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80095ba:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 80095be:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095c2:	68a3      	ldr	r3, [r4, #8]
 80095c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095c8:	d002      	beq.n	80095d0 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 80095ca:	f04f 0800 	mov.w	r8, #0
 80095ce:	e014      	b.n	80095fa <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095d0:	6923      	ldr	r3, [r4, #16]
 80095d2:	b32b      	cbz	r3, 8009620 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 80095d4:	f04f 0800 	mov.w	r8, #0
 80095d8:	e00f      	b.n	80095fa <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 80095da:	2320      	movs	r3, #32
 80095dc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80095e0:	2003      	movs	r0, #3
 80095e2:	e032      	b.n	800964a <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80095e4:	f838 3b02 	ldrh.w	r3, [r8], #2
 80095e8:	6822      	ldr	r2, [r4, #0]
 80095ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ee:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80095f0:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80095f2:	b292      	uxth	r2, r2
 80095f4:	3a01      	subs	r2, #1
 80095f6:	b292      	uxth	r2, r2
 80095f8:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80095fa:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	b193      	cbz	r3, 8009626 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009600:	9600      	str	r6, [sp, #0]
 8009602:	463b      	mov	r3, r7
 8009604:	2200      	movs	r2, #0
 8009606:	2180      	movs	r1, #128	@ 0x80
 8009608:	4620      	mov	r0, r4
 800960a:	f7ff ff09 	bl	8009420 <UART_WaitOnFlagUntilTimeout>
 800960e:	2800      	cmp	r0, #0
 8009610:	d1e3      	bne.n	80095da <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8009612:	2d00      	cmp	r5, #0
 8009614:	d0e6      	beq.n	80095e4 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009616:	f815 2b01 	ldrb.w	r2, [r5], #1
 800961a:	6823      	ldr	r3, [r4, #0]
 800961c:	605a      	str	r2, [r3, #4]
 800961e:	e7e7      	b.n	80095f0 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8009620:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8009622:	2500      	movs	r5, #0
 8009624:	e7e9      	b.n	80095fa <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009626:	9600      	str	r6, [sp, #0]
 8009628:	463b      	mov	r3, r7
 800962a:	2200      	movs	r2, #0
 800962c:	2140      	movs	r1, #64	@ 0x40
 800962e:	4620      	mov	r0, r4
 8009630:	f7ff fef6 	bl	8009420 <UART_WaitOnFlagUntilTimeout>
 8009634:	b918      	cbnz	r0, 800963e <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8009636:	2320      	movs	r3, #32
 8009638:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800963c:	e005      	b.n	800964a <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 800963e:	2320      	movs	r3, #32
 8009640:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8009644:	2003      	movs	r0, #3
 8009646:	e000      	b.n	800964a <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8009648:	2002      	movs	r0, #2
}
 800964a:	b002      	add	sp, #8
 800964c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8009650:	2001      	movs	r0, #1
 8009652:	e7fa      	b.n	800964a <HAL_UART_Transmit+0xc2>

08009654 <HAL_UART_TxCpltCallback>:
}
 8009654:	4770      	bx	lr

08009656 <UART_EndTransmit_IT>:
{
 8009656:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009658:	6801      	ldr	r1, [r0, #0]
 800965a:	68ca      	ldr	r2, [r1, #12]
 800965c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009660:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8009662:	2220      	movs	r2, #32
 8009664:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8009668:	f7ff fff4 	bl	8009654 <HAL_UART_TxCpltCallback>
}
 800966c:	2000      	movs	r0, #0
 800966e:	bd08      	pop	{r3, pc}

08009670 <HAL_UART_RxCpltCallback>:
}
 8009670:	4770      	bx	lr

08009672 <HAL_UART_RxHalfCpltCallback>:
}
 8009672:	4770      	bx	lr

08009674 <HAL_UART_ErrorCallback>:
}
 8009674:	4770      	bx	lr

08009676 <UART_DMAError>:
{
 8009676:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009678:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800967a:	6823      	ldr	r3, [r4, #0]
 800967c:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800967e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b21      	cmp	r3, #33	@ 0x21
 8009686:	d010      	beq.n	80096aa <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	695a      	ldr	r2, [r3, #20]
 800968c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009690:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8009694:	b2db      	uxtb	r3, r3
 8009696:	2b22      	cmp	r3, #34	@ 0x22
 8009698:	d011      	beq.n	80096be <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800969a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800969c:	f043 0310 	orr.w	r3, r3, #16
 80096a0:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 80096a2:	4620      	mov	r0, r4
 80096a4:	f7ff ffe6 	bl	8009674 <HAL_UART_ErrorCallback>
}
 80096a8:	bd10      	pop	{r4, pc}
 80096aa:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80096ae:	2a00      	cmp	r2, #0
 80096b0:	d0ea      	beq.n	8009688 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 80096b2:	2300      	movs	r3, #0
 80096b4:	84e3      	strh	r3, [r4, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80096b6:	4620      	mov	r0, r4
 80096b8:	f7ff fdfa 	bl	80092b0 <UART_EndTxTransfer>
 80096bc:	e7e4      	b.n	8009688 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80096be:	2a00      	cmp	r2, #0
 80096c0:	d0eb      	beq.n	800969a <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 80096c2:	2300      	movs	r3, #0
 80096c4:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80096c6:	4620      	mov	r0, r4
 80096c8:	f7ff fe02 	bl	80092d0 <UART_EndRxTransfer>
 80096cc:	e7e5      	b.n	800969a <UART_DMAError+0x24>

080096ce <UART_DMAAbortOnError>:
{
 80096ce:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096d0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 80096d2:	2300      	movs	r3, #0
 80096d4:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80096d6:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 80096d8:	f7ff ffcc 	bl	8009674 <HAL_UART_ErrorCallback>
}
 80096dc:	bd08      	pop	{r3, pc}

080096de <HAL_UARTEx_RxEventCallback>:
}
 80096de:	4770      	bx	lr

080096e0 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096e0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b22      	cmp	r3, #34	@ 0x22
 80096e8:	d169      	bne.n	80097be <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096ea:	6883      	ldr	r3, [r0, #8]
 80096ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096f0:	d04f      	beq.n	8009792 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80096f2:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80096f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096f8:	d004      	beq.n	8009704 <UART_Receive_IT+0x24>
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d156      	bne.n	80097ac <UART_Receive_IT+0xcc>
 80096fe:	6903      	ldr	r3, [r0, #16]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d153      	bne.n	80097ac <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009704:	6803      	ldr	r3, [r0, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800970a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800970c:	3301      	adds	r3, #1
 800970e:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8009710:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8009712:	b29b      	uxth	r3, r3
 8009714:	3b01      	subs	r3, #1
 8009716:	b29b      	uxth	r3, r3
 8009718:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800971a:	2b00      	cmp	r3, #0
 800971c:	d151      	bne.n	80097c2 <UART_Receive_IT+0xe2>
{
 800971e:	b500      	push	{lr}
 8009720:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009722:	6802      	ldr	r2, [r0, #0]
 8009724:	68d3      	ldr	r3, [r2, #12]
 8009726:	f023 0320 	bic.w	r3, r3, #32
 800972a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800972c:	6802      	ldr	r2, [r0, #0]
 800972e:	68d3      	ldr	r3, [r2, #12]
 8009730:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009734:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009736:	6802      	ldr	r2, [r0, #0]
 8009738:	6953      	ldr	r3, [r2, #20]
 800973a:	f023 0301 	bic.w	r3, r3, #1
 800973e:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8009740:	2320      	movs	r3, #32
 8009742:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009746:	2300      	movs	r3, #0
 8009748:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800974a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800974c:	2b01      	cmp	r3, #1
 800974e:	d133      	bne.n	80097b8 <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009750:	2300      	movs	r3, #0
 8009752:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009754:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009756:	f102 030c 	add.w	r3, r2, #12
 800975a:	e853 3f00 	ldrex	r3, [r3]
 800975e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009762:	320c      	adds	r2, #12
 8009764:	e842 3100 	strex	r1, r3, [r2]
 8009768:	2900      	cmp	r1, #0
 800976a:	d1f3      	bne.n	8009754 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800976c:	6803      	ldr	r3, [r0, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	f012 0f10 	tst.w	r2, #16
 8009774:	d006      	beq.n	8009784 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009776:	2200      	movs	r2, #0
 8009778:	9201      	str	r2, [sp, #4]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	9201      	str	r2, [sp, #4]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	9301      	str	r3, [sp, #4]
 8009782:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009784:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8009786:	f7ff ffaa 	bl	80096de <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 800978a:	2000      	movs	r0, #0
}
 800978c:	b003      	add	sp, #12
 800978e:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009792:	6902      	ldr	r2, [r0, #16]
 8009794:	2a00      	cmp	r2, #0
 8009796:	d1ac      	bne.n	80096f2 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009798:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800979a:	6803      	ldr	r3, [r0, #0]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097a2:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80097a4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80097a6:	3302      	adds	r3, #2
 80097a8:	6283      	str	r3, [r0, #40]	@ 0x28
 80097aa:	e7b1      	b.n	8009710 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80097ac:	6803      	ldr	r3, [r0, #0]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097b4:	7013      	strb	r3, [r2, #0]
 80097b6:	e7a8      	b.n	800970a <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 80097b8:	f7ff ff5a 	bl	8009670 <HAL_UART_RxCpltCallback>
 80097bc:	e7e5      	b.n	800978a <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 80097be:	2002      	movs	r0, #2
 80097c0:	4770      	bx	lr
    return HAL_OK;
 80097c2:	2000      	movs	r0, #0
}
 80097c4:	4770      	bx	lr
	...

080097c8 <HAL_UART_IRQHandler>:
{
 80097c8:	b510      	push	{r4, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80097ce:	6802      	ldr	r2, [r0, #0]
 80097d0:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80097d2:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80097d4:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80097d6:	f013 0f0f 	tst.w	r3, #15
 80097da:	d109      	bne.n	80097f0 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80097dc:	f013 0f20 	tst.w	r3, #32
 80097e0:	d00c      	beq.n	80097fc <HAL_UART_IRQHandler+0x34>
 80097e2:	f010 0f20 	tst.w	r0, #32
 80097e6:	d009      	beq.n	80097fc <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 80097e8:	4620      	mov	r0, r4
 80097ea:	f7ff ff79 	bl	80096e0 <UART_Receive_IT>
      return;
 80097ee:	e016      	b.n	800981e <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80097f0:	f011 0101 	ands.w	r1, r1, #1
 80097f4:	d115      	bne.n	8009822 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80097f6:	f410 7f90 	tst.w	r0, #288	@ 0x120
 80097fa:	d112      	bne.n	8009822 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80097fe:	2901      	cmp	r1, #1
 8009800:	d079      	beq.n	80098f6 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009802:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009806:	d003      	beq.n	8009810 <HAL_UART_IRQHandler+0x48>
 8009808:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800980c:	f040 8113 	bne.w	8009a36 <HAL_UART_IRQHandler+0x26e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009810:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009814:	d003      	beq.n	800981e <HAL_UART_IRQHandler+0x56>
 8009816:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800981a:	f040 8110 	bne.w	8009a3e <HAL_UART_IRQHandler+0x276>
}
 800981e:	b002      	add	sp, #8
 8009820:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009822:	f013 0f01 	tst.w	r3, #1
 8009826:	d006      	beq.n	8009836 <HAL_UART_IRQHandler+0x6e>
 8009828:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800982c:	d003      	beq.n	8009836 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800982e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8009830:	f042 0201 	orr.w	r2, r2, #1
 8009834:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009836:	f013 0f04 	tst.w	r3, #4
 800983a:	d004      	beq.n	8009846 <HAL_UART_IRQHandler+0x7e>
 800983c:	b119      	cbz	r1, 8009846 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800983e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8009840:	f042 0202 	orr.w	r2, r2, #2
 8009844:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009846:	f013 0f02 	tst.w	r3, #2
 800984a:	d004      	beq.n	8009856 <HAL_UART_IRQHandler+0x8e>
 800984c:	b119      	cbz	r1, 8009856 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800984e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8009850:	f042 0204 	orr.w	r2, r2, #4
 8009854:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009856:	f013 0f08 	tst.w	r3, #8
 800985a:	d007      	beq.n	800986c <HAL_UART_IRQHandler+0xa4>
 800985c:	f010 0f20 	tst.w	r0, #32
 8009860:	d100      	bne.n	8009864 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009862:	b119      	cbz	r1, 800986c <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009864:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8009866:	f042 0208 	orr.w	r2, r2, #8
 800986a:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800986c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800986e:	2a00      	cmp	r2, #0
 8009870:	d0d5      	beq.n	800981e <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009872:	f013 0f20 	tst.w	r3, #32
 8009876:	d002      	beq.n	800987e <HAL_UART_IRQHandler+0xb6>
 8009878:	f010 0f20 	tst.w	r0, #32
 800987c:	d129      	bne.n	80098d2 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	695b      	ldr	r3, [r3, #20]
 8009882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009886:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8009888:	f012 0f08 	tst.w	r2, #8
 800988c:	d100      	bne.n	8009890 <HAL_UART_IRQHandler+0xc8>
 800988e:	b363      	cbz	r3, 80098ea <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8009890:	4620      	mov	r0, r4
 8009892:	f7ff fd1d 	bl	80092d0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	695b      	ldr	r3, [r3, #20]
 800989a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800989e:	d020      	beq.n	80098e2 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098a0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a2:	f102 0314 	add.w	r3, r2, #20
 80098a6:	e853 3f00 	ldrex	r3, [r3]
 80098aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ae:	3214      	adds	r2, #20
 80098b0:	e842 3100 	strex	r1, r3, [r2]
 80098b4:	2900      	cmp	r1, #0
 80098b6:	d1f3      	bne.n	80098a0 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 80098b8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80098ba:	b173      	cbz	r3, 80098da <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098bc:	4a62      	ldr	r2, [pc, #392]	@ (8009a48 <HAL_UART_IRQHandler+0x280>)
 80098be:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098c0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80098c2:	f7fe fd01 	bl	80082c8 <HAL_DMA_Abort_IT>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d0a9      	beq.n	800981e <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098ca:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80098cc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80098ce:	4798      	blx	r3
 80098d0:	e7a5      	b.n	800981e <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 80098d2:	4620      	mov	r0, r4
 80098d4:	f7ff ff04 	bl	80096e0 <UART_Receive_IT>
 80098d8:	e7d1      	b.n	800987e <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 80098da:	4620      	mov	r0, r4
 80098dc:	f7ff feca 	bl	8009674 <HAL_UART_ErrorCallback>
 80098e0:	e79d      	b.n	800981e <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 80098e2:	4620      	mov	r0, r4
 80098e4:	f7ff fec6 	bl	8009674 <HAL_UART_ErrorCallback>
 80098e8:	e799      	b.n	800981e <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 80098ea:	4620      	mov	r0, r4
 80098ec:	f7ff fec2 	bl	8009674 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098f0:	2300      	movs	r3, #0
 80098f2:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 80098f4:	e793      	b.n	800981e <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80098f6:	f013 0f10 	tst.w	r3, #16
 80098fa:	d082      	beq.n	8009802 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80098fc:	f010 0f10 	tst.w	r0, #16
 8009900:	f43f af7f 	beq.w	8009802 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009904:	2300      	movs	r3, #0
 8009906:	9301      	str	r3, [sp, #4]
 8009908:	6813      	ldr	r3, [r2, #0]
 800990a:	9301      	str	r3, [sp, #4]
 800990c:	6853      	ldr	r3, [r2, #4]
 800990e:	9301      	str	r3, [sp, #4]
 8009910:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009912:	6953      	ldr	r3, [r2, #20]
 8009914:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009918:	d051      	beq.n	80099be <HAL_UART_IRQHandler+0x1f6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800991a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800991c:	6813      	ldr	r3, [r2, #0]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8009922:	2b00      	cmp	r3, #0
 8009924:	f43f af7b 	beq.w	800981e <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009928:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800992a:	4299      	cmp	r1, r3
 800992c:	f67f af77 	bls.w	800981e <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8009930:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009932:	6993      	ldr	r3, [r2, #24]
 8009934:	2b20      	cmp	r3, #32
 8009936:	d037      	beq.n	80099a8 <HAL_UART_IRQHandler+0x1e0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009938:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993a:	f102 030c 	add.w	r3, r2, #12
 800993e:	e853 3f00 	ldrex	r3, [r3]
 8009942:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009946:	320c      	adds	r2, #12
 8009948:	e842 3100 	strex	r1, r3, [r2]
 800994c:	2900      	cmp	r1, #0
 800994e:	d1f3      	bne.n	8009938 <HAL_UART_IRQHandler+0x170>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009950:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009952:	f102 0314 	add.w	r3, r2, #20
 8009956:	e853 3f00 	ldrex	r3, [r3]
 800995a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995e:	3214      	adds	r2, #20
 8009960:	e842 3100 	strex	r1, r3, [r2]
 8009964:	2900      	cmp	r1, #0
 8009966:	d1f3      	bne.n	8009950 <HAL_UART_IRQHandler+0x188>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009968:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996a:	f102 0314 	add.w	r3, r2, #20
 800996e:	e853 3f00 	ldrex	r3, [r3]
 8009972:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009976:	3214      	adds	r2, #20
 8009978:	e842 3100 	strex	r1, r3, [r2]
 800997c:	2900      	cmp	r1, #0
 800997e:	d1f3      	bne.n	8009968 <HAL_UART_IRQHandler+0x1a0>
          huart->RxState = HAL_UART_STATE_READY;
 8009980:	2320      	movs	r3, #32
 8009982:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009986:	2300      	movs	r3, #0
 8009988:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800998a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998c:	f102 030c 	add.w	r3, r2, #12
 8009990:	e853 3f00 	ldrex	r3, [r3]
 8009994:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009998:	320c      	adds	r2, #12
 800999a:	e842 3100 	strex	r1, r3, [r2]
 800999e:	2900      	cmp	r1, #0
 80099a0:	d1f3      	bne.n	800998a <HAL_UART_IRQHandler+0x1c2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80099a2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80099a4:	f7fe fc6d 	bl	8008282 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099a8:	2302      	movs	r3, #2
 80099aa:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099ac:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80099ae:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	1ac9      	subs	r1, r1, r3
 80099b4:	b289      	uxth	r1, r1
 80099b6:	4620      	mov	r0, r4
 80099b8:	f7ff fe91 	bl	80096de <HAL_UARTEx_RxEventCallback>
      return;
 80099bc:	e72f      	b.n	800981e <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099be:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80099c0:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	1ac9      	subs	r1, r1, r3
 80099c6:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80099c8:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f43f af26 	beq.w	800981e <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 80099d2:	2900      	cmp	r1, #0
 80099d4:	f43f af23 	beq.w	800981e <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099d8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099da:	f102 030c 	add.w	r3, r2, #12
 80099de:	e853 3f00 	ldrex	r3, [r3]
 80099e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e6:	320c      	adds	r2, #12
 80099e8:	e842 3000 	strex	r0, r3, [r2]
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d1f3      	bne.n	80099d8 <HAL_UART_IRQHandler+0x210>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099f0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f2:	f102 0314 	add.w	r3, r2, #20
 80099f6:	e853 3f00 	ldrex	r3, [r3]
 80099fa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fe:	3214      	adds	r2, #20
 8009a00:	e842 3000 	strex	r0, r3, [r2]
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d1f3      	bne.n	80099f0 <HAL_UART_IRQHandler+0x228>
        huart->RxState = HAL_UART_STATE_READY;
 8009a08:	2320      	movs	r3, #32
 8009a0a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a12:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a14:	f102 030c 	add.w	r3, r2, #12
 8009a18:	e853 3f00 	ldrex	r3, [r3]
 8009a1c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a20:	320c      	adds	r2, #12
 8009a22:	e842 3000 	strex	r0, r3, [r2]
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d1f3      	bne.n	8009a12 <HAL_UART_IRQHandler+0x24a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f7ff fe55 	bl	80096de <HAL_UARTEx_RxEventCallback>
      return;
 8009a34:	e6f3      	b.n	800981e <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 8009a36:	4620      	mov	r0, r4
 8009a38:	f7ff fc78 	bl	800932c <UART_Transmit_IT>
    return;
 8009a3c:	e6ef      	b.n	800981e <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8009a3e:	4620      	mov	r0, r4
 8009a40:	f7ff fe09 	bl	8009656 <UART_EndTransmit_IT>
    return;
 8009a44:	e6eb      	b.n	800981e <HAL_UART_IRQHandler+0x56>
 8009a46:	bf00      	nop
 8009a48:	080096cf 	.word	0x080096cf

08009a4c <UART_DMARxHalfCplt>:
{
 8009a4c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a4e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009a50:	2301      	movs	r3, #1
 8009a52:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a54:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d002      	beq.n	8009a60 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8009a5a:	f7ff fe0a 	bl	8009672 <HAL_UART_RxHalfCpltCallback>
}
 8009a5e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009a60:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8009a62:	0849      	lsrs	r1, r1, #1
 8009a64:	f7ff fe3b 	bl	80096de <HAL_UARTEx_RxEventCallback>
 8009a68:	e7f9      	b.n	8009a5e <UART_DMARxHalfCplt+0x12>

08009a6a <UART_DMAReceiveCplt>:
{
 8009a6a:	b508      	push	{r3, lr}
 8009a6c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a6e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f013 0f20 	tst.w	r3, #32
 8009a78:	d12b      	bne.n	8009ad2 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a7e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a80:	f102 030c 	add.w	r3, r2, #12
 8009a84:	e853 3f00 	ldrex	r3, [r3]
 8009a88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8c:	320c      	adds	r2, #12
 8009a8e:	e842 3100 	strex	r1, r3, [r2]
 8009a92:	2900      	cmp	r1, #0
 8009a94:	d1f3      	bne.n	8009a7e <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a96:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a98:	f102 0314 	add.w	r3, r2, #20
 8009a9c:	e853 3f00 	ldrex	r3, [r3]
 8009aa0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa4:	3214      	adds	r2, #20
 8009aa6:	e842 3100 	strex	r1, r3, [r2]
 8009aaa:	2900      	cmp	r1, #0
 8009aac:	d1f3      	bne.n	8009a96 <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aae:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab0:	f102 0314 	add.w	r3, r2, #20
 8009ab4:	e853 3f00 	ldrex	r3, [r3]
 8009ab8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abc:	3214      	adds	r2, #20
 8009abe:	e842 3100 	strex	r1, r3, [r2]
 8009ac2:	2900      	cmp	r1, #0
 8009ac4:	d1f3      	bne.n	8009aae <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8009ac6:	2320      	movs	r3, #32
 8009ac8:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009acc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d007      	beq.n	8009ae2 <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ad6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d00f      	beq.n	8009afc <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8009adc:	f7ff fdc8 	bl	8009670 <HAL_UART_RxCpltCallback>
}
 8009ae0:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ae2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae4:	f102 030c 	add.w	r3, r2, #12
 8009ae8:	e853 3f00 	ldrex	r3, [r3]
 8009aec:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af0:	320c      	adds	r2, #12
 8009af2:	e842 3100 	strex	r1, r3, [r2]
 8009af6:	2900      	cmp	r1, #0
 8009af8:	d1f3      	bne.n	8009ae2 <UART_DMAReceiveCplt+0x78>
 8009afa:	e7ea      	b.n	8009ad2 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009afc:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8009afe:	f7ff fdee 	bl	80096de <HAL_UARTEx_RxEventCallback>
 8009b02:	e7ed      	b.n	8009ae0 <UART_DMAReceiveCplt+0x76>

08009b04 <UART_Start_Receive_DMA>:
{
 8009b04:	b530      	push	{r4, r5, lr}
 8009b06:	b083      	sub	sp, #12
 8009b08:	4604      	mov	r4, r0
 8009b0a:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8009b0c:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009b0e:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b10:	2500      	movs	r5, #0
 8009b12:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b14:	2222      	movs	r2, #34	@ 0x22
 8009b16:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009b1a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009b1c:	481f      	ldr	r0, [pc, #124]	@ (8009b9c <UART_Start_Receive_DMA+0x98>)
 8009b1e:	6290      	str	r0, [r2, #40]	@ 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009b20:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009b22:	481f      	ldr	r0, [pc, #124]	@ (8009ba0 <UART_Start_Receive_DMA+0x9c>)
 8009b24:	62d0      	str	r0, [r2, #44]	@ 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009b26:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009b28:	481e      	ldr	r0, [pc, #120]	@ (8009ba4 <UART_Start_Receive_DMA+0xa0>)
 8009b2a:	6310      	str	r0, [r2, #48]	@ 0x30
  huart->hdmarx->XferAbortCallback = NULL;
 8009b2c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009b2e:	6355      	str	r5, [r2, #52]	@ 0x34
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009b30:	6820      	ldr	r0, [r4, #0]
 8009b32:	460a      	mov	r2, r1
 8009b34:	1d01      	adds	r1, r0, #4
 8009b36:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8009b38:	f7fe fb68 	bl	800820c <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009b3c:	9501      	str	r5, [sp, #4]
 8009b3e:	6823      	ldr	r3, [r4, #0]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	9201      	str	r2, [sp, #4]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	9301      	str	r3, [sp, #4]
 8009b48:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b4a:	6923      	ldr	r3, [r4, #16]
 8009b4c:	b15b      	cbz	r3, 8009b66 <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b4e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b50:	f102 030c 	add.w	r3, r2, #12
 8009b54:	e853 3f00 	ldrex	r3, [r3]
 8009b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5c:	320c      	adds	r2, #12
 8009b5e:	e842 3100 	strex	r1, r3, [r2]
 8009b62:	2900      	cmp	r1, #0
 8009b64:	d1f3      	bne.n	8009b4e <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b66:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b68:	f102 0314 	add.w	r3, r2, #20
 8009b6c:	e853 3f00 	ldrex	r3, [r3]
 8009b70:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b74:	3214      	adds	r2, #20
 8009b76:	e842 3100 	strex	r1, r3, [r2]
 8009b7a:	2900      	cmp	r1, #0
 8009b7c:	d1f3      	bne.n	8009b66 <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b7e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b80:	f102 0314 	add.w	r3, r2, #20
 8009b84:	e853 3f00 	ldrex	r3, [r3]
 8009b88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8c:	3214      	adds	r2, #20
 8009b8e:	e842 3100 	strex	r1, r3, [r2]
 8009b92:	2900      	cmp	r1, #0
 8009b94:	d1f3      	bne.n	8009b7e <UART_Start_Receive_DMA+0x7a>
}
 8009b96:	2000      	movs	r0, #0
 8009b98:	b003      	add	sp, #12
 8009b9a:	bd30      	pop	{r4, r5, pc}
 8009b9c:	08009a6b 	.word	0x08009a6b
 8009ba0:	08009a4d 	.word	0x08009a4d
 8009ba4:	08009677 	.word	0x08009677

08009ba8 <HAL_UART_Receive_DMA>:
{
 8009ba8:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8009baa:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	2b20      	cmp	r3, #32
 8009bb2:	d108      	bne.n	8009bc6 <HAL_UART_Receive_DMA+0x1e>
    if ((pData == NULL) || (Size == 0U))
 8009bb4:	b149      	cbz	r1, 8009bca <HAL_UART_Receive_DMA+0x22>
 8009bb6:	b90a      	cbnz	r2, 8009bbc <HAL_UART_Receive_DMA+0x14>
      return HAL_ERROR;
 8009bb8:	2001      	movs	r0, #1
}
 8009bba:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009bc0:	f7ff ffa0 	bl	8009b04 <UART_Start_Receive_DMA>
 8009bc4:	e7f9      	b.n	8009bba <HAL_UART_Receive_DMA+0x12>
    return HAL_BUSY;
 8009bc6:	2002      	movs	r0, #2
 8009bc8:	e7f7      	b.n	8009bba <HAL_UART_Receive_DMA+0x12>
      return HAL_ERROR;
 8009bca:	2001      	movs	r0, #1
 8009bcc:	e7f5      	b.n	8009bba <HAL_UART_Receive_DMA+0x12>

08009bce <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8009bce:	2884      	cmp	r0, #132	@ 0x84
 8009bd0:	d001      	beq.n	8009bd6 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8009bd2:	3003      	adds	r0, #3
 8009bd4:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009bd6:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8009bd8:	4770      	bx	lr

08009bda <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009bda:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8009bdc:	f000 fb26 	bl	800a22c <vTaskStartScheduler>
  
  return osOK;
}
 8009be0:	2000      	movs	r0, #0
 8009be2:	bd08      	pop	{r3, pc}

08009be4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009be8:	b087      	sub	sp, #28
 8009bea:	460e      	mov	r6, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009bec:	6944      	ldr	r4, [r0, #20]
 8009bee:	b1c4      	cbz	r4, 8009c22 <osThreadCreate+0x3e>
 8009bf0:	6985      	ldr	r5, [r0, #24]
 8009bf2:	b1b5      	cbz	r5, 8009c22 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009bf4:	6847      	ldr	r7, [r0, #4]
 8009bf6:	f8d0 8000 	ldr.w	r8, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009bfa:	f8d0 9010 	ldr.w	r9, [r0, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009bfe:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8009c02:	f7ff ffe4 	bl	8009bce <makeFreeRtosPriority>
 8009c06:	9502      	str	r5, [sp, #8]
 8009c08:	9401      	str	r4, [sp, #4]
 8009c0a:	9000      	str	r0, [sp, #0]
 8009c0c:	4633      	mov	r3, r6
 8009c0e:	464a      	mov	r2, r9
 8009c10:	4641      	mov	r1, r8
 8009c12:	4638      	mov	r0, r7
 8009c14:	f000 fa9c 	bl	800a150 <xTaskCreateStatic>
 8009c18:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009c1a:	9805      	ldr	r0, [sp, #20]
}
 8009c1c:	b007      	add	sp, #28
 8009c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c22:	6844      	ldr	r4, [r0, #4]
 8009c24:	6805      	ldr	r5, [r0, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009c26:	6907      	ldr	r7, [r0, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c28:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8009c2c:	f7ff ffcf 	bl	8009bce <makeFreeRtosPriority>
 8009c30:	ab05      	add	r3, sp, #20
 8009c32:	9301      	str	r3, [sp, #4]
 8009c34:	9000      	str	r0, [sp, #0]
 8009c36:	4633      	mov	r3, r6
 8009c38:	b2ba      	uxth	r2, r7
 8009c3a:	4629      	mov	r1, r5
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f000 fac2 	bl	800a1c6 <xTaskCreate>
 8009c42:	2801      	cmp	r0, #1
 8009c44:	d0e9      	beq.n	8009c1a <osThreadCreate+0x36>
      return NULL;
 8009c46:	2000      	movs	r0, #0
 8009c48:	e7e8      	b.n	8009c1c <osThreadCreate+0x38>

08009c4a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009c4a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009c4c:	b900      	cbnz	r0, 8009c50 <osDelay+0x6>
 8009c4e:	2001      	movs	r0, #1
 8009c50:	f000 fc40 	bl	800a4d4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009c54:	2000      	movs	r0, #0
 8009c56:	bd08      	pop	{r3, pc}

08009c58 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c58:	f100 0308 	add.w	r3, r0, #8
 8009c5c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c62:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c64:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c66:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009c6c:	4770      	bx	lr

08009c6e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009c72:	4770      	bx	lr

08009c74 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c74:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c76:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c78:	689a      	ldr	r2, [r3, #8]
 8009c7a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c7c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c7e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c80:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009c82:	6803      	ldr	r3, [r0, #0]
 8009c84:	3301      	adds	r3, #1
 8009c86:	6003      	str	r3, [r0, #0]
}
 8009c88:	4770      	bx	lr

08009c8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c8a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c8c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c8e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009c92:	d011      	beq.n	8009cb8 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c94:	f100 0308 	add.w	r3, r0, #8
 8009c98:	461c      	mov	r4, r3
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	42aa      	cmp	r2, r5
 8009ca0:	d9fa      	bls.n	8009c98 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ca2:	6863      	ldr	r3, [r4, #4]
 8009ca4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ca6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ca8:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8009caa:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009cac:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009cae:	6803      	ldr	r3, [r0, #0]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	6003      	str	r3, [r0, #0]
}
 8009cb4:	bc30      	pop	{r4, r5}
 8009cb6:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8009cb8:	6904      	ldr	r4, [r0, #16]
 8009cba:	e7f2      	b.n	8009ca2 <vListInsert+0x18>

08009cbc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009cbc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009cbe:	6841      	ldr	r1, [r0, #4]
 8009cc0:	6882      	ldr	r2, [r0, #8]
 8009cc2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009cc4:	6841      	ldr	r1, [r0, #4]
 8009cc6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009cc8:	685a      	ldr	r2, [r3, #4]
 8009cca:	4282      	cmp	r2, r0
 8009ccc:	d006      	beq.n	8009cdc <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009cce:	2200      	movs	r2, #0
 8009cd0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	3a01      	subs	r2, #1
 8009cd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009cd8:	6818      	ldr	r0, [r3, #0]
}
 8009cda:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009cdc:	6882      	ldr	r2, [r0, #8]
 8009cde:	605a      	str	r2, [r3, #4]
 8009ce0:	e7f5      	b.n	8009cce <uxListRemove+0x12>

08009ce2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ce2:	b570      	push	{r4, r5, r6, lr}
 8009ce4:	4604      	mov	r4, r0
 8009ce6:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ce8:	6b86      	ldr	r6, [r0, #56]	@ 0x38

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cea:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8009cec:	b95a      	cbnz	r2, 8009d06 <prvCopyDataToQueue+0x24>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cee:	6803      	ldr	r3, [r0, #0]
 8009cf0:	b11b      	cbz	r3, 8009cfa <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8009cf2:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009cf4:	3601      	adds	r6, #1
 8009cf6:	63a6      	str	r6, [r4, #56]	@ 0x38

	return xReturn;
}
 8009cf8:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cfa:	6880      	ldr	r0, [r0, #8]
 8009cfc:	f000 fcc0 	bl	800a680 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d00:	2300      	movs	r3, #0
 8009d02:	60a3      	str	r3, [r4, #8]
 8009d04:	e7f6      	b.n	8009cf4 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8009d06:	b96d      	cbnz	r5, 8009d24 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d08:	6840      	ldr	r0, [r0, #4]
 8009d0a:	f002 fc2e 	bl	800c56a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d0e:	6863      	ldr	r3, [r4, #4]
 8009d10:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8009d12:	4413      	add	r3, r2
 8009d14:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d16:	68a2      	ldr	r2, [r4, #8]
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d319      	bcc.n	8009d50 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8009d20:	4628      	mov	r0, r5
 8009d22:	e7e7      	b.n	8009cf4 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d24:	68c0      	ldr	r0, [r0, #12]
 8009d26:	f002 fc20 	bl	800c56a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d2a:	68e3      	ldr	r3, [r4, #12]
 8009d2c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8009d2e:	4251      	negs	r1, r2
 8009d30:	1a9b      	subs	r3, r3, r2
 8009d32:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d34:	6822      	ldr	r2, [r4, #0]
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d202      	bcs.n	8009d40 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d3a:	68a3      	ldr	r3, [r4, #8]
 8009d3c:	440b      	add	r3, r1
 8009d3e:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8009d40:	2d02      	cmp	r5, #2
 8009d42:	d001      	beq.n	8009d48 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8009d44:	2000      	movs	r0, #0
 8009d46:	e7d5      	b.n	8009cf4 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d48:	b126      	cbz	r6, 8009d54 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8009d4a:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	e7d1      	b.n	8009cf4 <prvCopyDataToQueue+0x12>
 8009d50:	4628      	mov	r0, r5
 8009d52:	e7cf      	b.n	8009cf4 <prvCopyDataToQueue+0x12>
 8009d54:	2000      	movs	r0, #0
 8009d56:	e7cd      	b.n	8009cf4 <prvCopyDataToQueue+0x12>

08009d58 <xQueueGenericSendFromISR>:
{
 8009d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8009d5c:	b190      	cbz	r0, 8009d84 <xQueueGenericSendFromISR+0x2c>
 8009d5e:	460f      	mov	r7, r1
 8009d60:	4616      	mov	r6, r2
 8009d62:	461c      	mov	r4, r3
 8009d64:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d66:	b1b1      	cbz	r1, 8009d96 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d68:	2c02      	cmp	r4, #2
 8009d6a:	d120      	bne.n	8009dae <xQueueGenericSendFromISR+0x56>
 8009d6c:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d01d      	beq.n	8009dae <xQueueGenericSendFromISR+0x56>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d76:	f383 8811 	msr	BASEPRI, r3
 8009d7a:	f3bf 8f6f 	isb	sy
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	e7fe      	b.n	8009d82 <xQueueGenericSendFromISR+0x2a>
 8009d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	e7fe      	b.n	8009d94 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d96:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d0e5      	beq.n	8009d68 <xQueueGenericSendFromISR+0x10>
 8009d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	e7fe      	b.n	8009dac <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009dae:	f000 fe03 	bl	800a9b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009db2:	f3ef 8811 	mrs	r8, BASEPRI
 8009db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dba:	f383 8811 	msr	BASEPRI, r3
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009dc6:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8009dc8:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d306      	bcc.n	8009ddc <xQueueGenericSendFromISR+0x84>
 8009dce:	2c02      	cmp	r4, #2
 8009dd0:	d004      	beq.n	8009ddc <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8009dd2:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009dd4:	f388 8811 	msr	BASEPRI, r8
}
 8009dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ddc:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8009de0:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009de4:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009de6:	4622      	mov	r2, r4
 8009de8:	4639      	mov	r1, r7
 8009dea:	4628      	mov	r0, r5
 8009dec:	f7ff ff79 	bl	8009ce2 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8009df0:	f1b9 3fff 	cmp.w	r9, #4294967295
 8009df4:	d006      	beq.n	8009e04 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009df6:	f109 0301 	add.w	r3, r9, #1
 8009dfa:	b25b      	sxtb	r3, r3
 8009dfc:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8009e00:	2001      	movs	r0, #1
 8009e02:	e7e7      	b.n	8009dd4 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e04:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8009e06:	b90b      	cbnz	r3, 8009e0c <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8009e08:	2001      	movs	r0, #1
 8009e0a:	e7e3      	b.n	8009dd4 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e0c:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8009e10:	f000 fbe0 	bl	800a5d4 <xTaskRemoveFromEventList>
 8009e14:	b118      	cbz	r0, 8009e1e <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8009e16:	b126      	cbz	r6, 8009e22 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e18:	2001      	movs	r0, #1
 8009e1a:	6030      	str	r0, [r6, #0]
 8009e1c:	e7da      	b.n	8009dd4 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8009e1e:	2001      	movs	r0, #1
 8009e20:	e7d8      	b.n	8009dd4 <xQueueGenericSendFromISR+0x7c>
 8009e22:	2001      	movs	r0, #1
 8009e24:	e7d6      	b.n	8009dd4 <xQueueGenericSendFromISR+0x7c>
	...

08009e28 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e28:	4b08      	ldr	r3, [pc, #32]	@ (8009e4c <prvResetNextTaskUnblockTime+0x24>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	b923      	cbnz	r3, 8009e3a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e30:	4b07      	ldr	r3, [pc, #28]	@ (8009e50 <prvResetNextTaskUnblockTime+0x28>)
 8009e32:	f04f 32ff 	mov.w	r2, #4294967295
 8009e36:	601a      	str	r2, [r3, #0]
 8009e38:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e3a:	4b04      	ldr	r3, [pc, #16]	@ (8009e4c <prvResetNextTaskUnblockTime+0x24>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e42:	685a      	ldr	r2, [r3, #4]
 8009e44:	4b02      	ldr	r3, [pc, #8]	@ (8009e50 <prvResetNextTaskUnblockTime+0x28>)
 8009e46:	601a      	str	r2, [r3, #0]
	}
}
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	20008fd0 	.word	0x20008fd0
 8009e50:	20008f68 	.word	0x20008f68

08009e54 <prvInitialiseNewTask>:
{
 8009e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e58:	4680      	mov	r8, r0
 8009e5a:	460d      	mov	r5, r1
 8009e5c:	4617      	mov	r7, r2
 8009e5e:	4699      	mov	r9, r3
 8009e60:	9e08      	ldr	r6, [sp, #32]
 8009e62:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8009e66:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009e68:	0092      	lsls	r2, r2, #2
 8009e6a:	21a5      	movs	r1, #165	@ 0xa5
 8009e6c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8009e6e:	f002 faef 	bl	800c450 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009e74:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8009e78:	3a01      	subs	r2, #1
 8009e7a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e7e:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8009e82:	b3a5      	cbz	r5, 8009eee <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e84:	f04f 0c00 	mov.w	ip, #0
 8009e88:	f1bc 0f0f 	cmp.w	ip, #15
 8009e8c:	d809      	bhi.n	8009ea2 <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e8e:	f815 300c 	ldrb.w	r3, [r5, ip]
 8009e92:	eb04 020c 	add.w	r2, r4, ip
 8009e96:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8009e9a:	b113      	cbz	r3, 8009ea2 <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e9c:	f10c 0c01 	add.w	ip, ip, #1
 8009ea0:	e7f2      	b.n	8009e88 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ea8:	2e06      	cmp	r6, #6
 8009eaa:	d900      	bls.n	8009eae <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009eac:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8009eae:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8009eb0:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009eb2:	2500      	movs	r5, #0
 8009eb4:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009eb6:	1d20      	adds	r0, r4, #4
 8009eb8:	f7ff fed9 	bl	8009c6e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009ebc:	f104 0018 	add.w	r0, r4, #24
 8009ec0:	f7ff fed5 	bl	8009c6e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ec4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ec6:	f1c6 0607 	rsb	r6, r6, #7
 8009eca:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ecc:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8009ece:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ed0:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ed4:	464a      	mov	r2, r9
 8009ed6:	4641      	mov	r1, r8
 8009ed8:	4638      	mov	r0, r7
 8009eda:	f000 fc59 	bl	800a790 <pxPortInitialiseStack>
 8009ede:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8009ee0:	f1ba 0f00 	cmp.w	sl, #0
 8009ee4:	d001      	beq.n	8009eea <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ee6:	f8ca 4000 	str.w	r4, [sl]
}
 8009eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8009ef4:	e7d8      	b.n	8009ea8 <prvInitialiseNewTask+0x54>
	...

08009ef8 <prvInitialiseTaskLists>:
{
 8009ef8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009efa:	2400      	movs	r4, #0
 8009efc:	e007      	b.n	8009f0e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009efe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8009f02:	0093      	lsls	r3, r2, #2
 8009f04:	480e      	ldr	r0, [pc, #56]	@ (8009f40 <prvInitialiseTaskLists+0x48>)
 8009f06:	4418      	add	r0, r3
 8009f08:	f7ff fea6 	bl	8009c58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f0c:	3401      	adds	r4, #1
 8009f0e:	2c06      	cmp	r4, #6
 8009f10:	d9f5      	bls.n	8009efe <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8009f12:	4d0c      	ldr	r5, [pc, #48]	@ (8009f44 <prvInitialiseTaskLists+0x4c>)
 8009f14:	4628      	mov	r0, r5
 8009f16:	f7ff fe9f 	bl	8009c58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009f1a:	4c0b      	ldr	r4, [pc, #44]	@ (8009f48 <prvInitialiseTaskLists+0x50>)
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f7ff fe9b 	bl	8009c58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009f22:	480a      	ldr	r0, [pc, #40]	@ (8009f4c <prvInitialiseTaskLists+0x54>)
 8009f24:	f7ff fe98 	bl	8009c58 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8009f28:	4809      	ldr	r0, [pc, #36]	@ (8009f50 <prvInitialiseTaskLists+0x58>)
 8009f2a:	f7ff fe95 	bl	8009c58 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8009f2e:	4809      	ldr	r0, [pc, #36]	@ (8009f54 <prvInitialiseTaskLists+0x5c>)
 8009f30:	f7ff fe92 	bl	8009c58 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8009f34:	4b08      	ldr	r3, [pc, #32]	@ (8009f58 <prvInitialiseTaskLists+0x60>)
 8009f36:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009f38:	4b08      	ldr	r3, [pc, #32]	@ (8009f5c <prvInitialiseTaskLists+0x64>)
 8009f3a:	601c      	str	r4, [r3, #0]
}
 8009f3c:	bd38      	pop	{r3, r4, r5, pc}
 8009f3e:	bf00      	nop
 8009f40:	20008ffc 	.word	0x20008ffc
 8009f44:	20008fe8 	.word	0x20008fe8
 8009f48:	20008fd4 	.word	0x20008fd4
 8009f4c:	20008fb8 	.word	0x20008fb8
 8009f50:	20008fa4 	.word	0x20008fa4
 8009f54:	20008f8c 	.word	0x20008f8c
 8009f58:	20008fd0 	.word	0x20008fd0
 8009f5c:	20008fcc 	.word	0x20008fcc

08009f60 <prvAddNewTaskToReadyList>:
{
 8009f60:	b510      	push	{r4, lr}
 8009f62:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009f64:	f000 fc3e 	bl	800a7e4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8009f68:	4a22      	ldr	r2, [pc, #136]	@ (8009ff4 <prvAddNewTaskToReadyList+0x94>)
 8009f6a:	6813      	ldr	r3, [r2, #0]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f70:	4b21      	ldr	r3, [pc, #132]	@ (8009ff8 <prvAddNewTaskToReadyList+0x98>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	b15b      	cbz	r3, 8009f8e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8009f76:	4b21      	ldr	r3, [pc, #132]	@ (8009ffc <prvAddNewTaskToReadyList+0x9c>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	b96b      	cbnz	r3, 8009f98 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8009ff8 <prvAddNewTaskToReadyList+0x98>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f82:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d807      	bhi.n	8009f98 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8009f88:	4b1b      	ldr	r3, [pc, #108]	@ (8009ff8 <prvAddNewTaskToReadyList+0x98>)
 8009f8a:	601c      	str	r4, [r3, #0]
 8009f8c:	e004      	b.n	8009f98 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8009f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ff8 <prvAddNewTaskToReadyList+0x98>)
 8009f90:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f92:	6813      	ldr	r3, [r2, #0]
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d029      	beq.n	8009fec <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8009f98:	4a19      	ldr	r2, [pc, #100]	@ (800a000 <prvAddNewTaskToReadyList+0xa0>)
 8009f9a:	6813      	ldr	r3, [r2, #0]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009fa0:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8009fa2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	4083      	lsls	r3, r0
 8009fa8:	4a16      	ldr	r2, [pc, #88]	@ (800a004 <prvAddNewTaskToReadyList+0xa4>)
 8009faa:	6811      	ldr	r1, [r2, #0]
 8009fac:	430b      	orrs	r3, r1
 8009fae:	6013      	str	r3, [r2, #0]
 8009fb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009fb4:	1d21      	adds	r1, r4, #4
 8009fb6:	4b14      	ldr	r3, [pc, #80]	@ (800a008 <prvAddNewTaskToReadyList+0xa8>)
 8009fb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009fbc:	f7ff fe5a 	bl	8009c74 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009fc0:	f000 fc32 	bl	800a828 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8009ffc <prvAddNewTaskToReadyList+0x9c>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	b17b      	cbz	r3, 8009fea <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009fca:	4b0b      	ldr	r3, [pc, #44]	@ (8009ff8 <prvAddNewTaskToReadyList+0x98>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fd0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d209      	bcs.n	8009fea <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8009fd6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009fda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fde:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	f3bf 8f6f 	isb	sy
}
 8009fea:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8009fec:	f7ff ff84 	bl	8009ef8 <prvInitialiseTaskLists>
 8009ff0:	e7d2      	b.n	8009f98 <prvAddNewTaskToReadyList+0x38>
 8009ff2:	bf00      	nop
 8009ff4:	20008f88 	.word	0x20008f88
 8009ff8:	20009088 	.word	0x20009088
 8009ffc:	20008f7c 	.word	0x20008f7c
 800a000:	20008f6c 	.word	0x20008f6c
 800a004:	20008f80 	.word	0x20008f80
 800a008:	20008ffc 	.word	0x20008ffc

0800a00c <prvDeleteTCB>:
	{
 800a00c:	b510      	push	{r4, lr}
 800a00e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a010:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 800a014:	b163      	cbz	r3, 800a030 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a016:	2b01      	cmp	r3, #1
 800a018:	d011      	beq.n	800a03e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d00e      	beq.n	800a03c <prvDeleteTCB+0x30>
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	e7fe      	b.n	800a02e <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 800a030:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800a032:	f000 fddd 	bl	800abf0 <vPortFree>
				vPortFree( pxTCB );
 800a036:	4620      	mov	r0, r4
 800a038:	f000 fdda 	bl	800abf0 <vPortFree>
	}
 800a03c:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800a03e:	f000 fdd7 	bl	800abf0 <vPortFree>
 800a042:	e7fb      	b.n	800a03c <prvDeleteTCB+0x30>

0800a044 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a044:	4b0f      	ldr	r3, [pc, #60]	@ (800a084 <prvCheckTasksWaitingTermination+0x40>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	b1d3      	cbz	r3, 800a080 <prvCheckTasksWaitingTermination+0x3c>
{
 800a04a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800a04c:	f000 fbca 	bl	800a7e4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a050:	4b0d      	ldr	r3, [pc, #52]	@ (800a088 <prvCheckTasksWaitingTermination+0x44>)
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a056:	1d20      	adds	r0, r4, #4
 800a058:	f7ff fe30 	bl	8009cbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a05c:	4a0b      	ldr	r2, [pc, #44]	@ (800a08c <prvCheckTasksWaitingTermination+0x48>)
 800a05e:	6813      	ldr	r3, [r2, #0]
 800a060:	3b01      	subs	r3, #1
 800a062:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a064:	4a07      	ldr	r2, [pc, #28]	@ (800a084 <prvCheckTasksWaitingTermination+0x40>)
 800a066:	6813      	ldr	r3, [r2, #0]
 800a068:	3b01      	subs	r3, #1
 800a06a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800a06c:	f000 fbdc 	bl	800a828 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800a070:	4620      	mov	r0, r4
 800a072:	f7ff ffcb 	bl	800a00c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a076:	4b03      	ldr	r3, [pc, #12]	@ (800a084 <prvCheckTasksWaitingTermination+0x40>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1e6      	bne.n	800a04c <prvCheckTasksWaitingTermination+0x8>
}
 800a07e:	bd10      	pop	{r4, pc}
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	20008fa0 	.word	0x20008fa0
 800a088:	20008fa4 	.word	0x20008fa4
 800a08c:	20008f88 	.word	0x20008f88

0800a090 <prvIdleTask>:
{
 800a090:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800a092:	f7ff ffd7 	bl	800a044 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a096:	4b07      	ldr	r3, [pc, #28]	@ (800a0b4 <prvIdleTask+0x24>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d9f9      	bls.n	800a092 <prvIdleTask+0x2>
				taskYIELD();
 800a09e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a0a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	f3bf 8f6f 	isb	sy
 800a0b2:	e7ee      	b.n	800a092 <prvIdleTask+0x2>
 800a0b4:	20008ffc 	.word	0x20008ffc

0800a0b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a0b8:	b570      	push	{r4, r5, r6, lr}
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a0be:	4b1d      	ldr	r3, [pc, #116]	@ (800a134 <prvAddCurrentTaskToDelayedList+0x7c>)
 800a0c0:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0c2:	4b1d      	ldr	r3, [pc, #116]	@ (800a138 <prvAddCurrentTaskToDelayedList+0x80>)
 800a0c4:	6818      	ldr	r0, [r3, #0]
 800a0c6:	3004      	adds	r0, #4
 800a0c8:	f7ff fdf8 	bl	8009cbc <uxListRemove>
 800a0cc:	b948      	cbnz	r0, 800a0e2 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a0ce:	4b1a      	ldr	r3, [pc, #104]	@ (800a138 <prvAddCurrentTaskToDelayedList+0x80>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	409a      	lsls	r2, r3
 800a0d8:	4918      	ldr	r1, [pc, #96]	@ (800a13c <prvAddCurrentTaskToDelayedList+0x84>)
 800a0da:	680b      	ldr	r3, [r1, #0]
 800a0dc:	ea23 0302 	bic.w	r3, r3, r2
 800a0e0:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a0e2:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a0e6:	d00d      	beq.n	800a104 <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a0e8:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a0ea:	4b13      	ldr	r3, [pc, #76]	@ (800a138 <prvAddCurrentTaskToDelayedList+0x80>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800a0f0:	42a6      	cmp	r6, r4
 800a0f2:	d910      	bls.n	800a116 <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0f4:	4b12      	ldr	r3, [pc, #72]	@ (800a140 <prvAddCurrentTaskToDelayedList+0x88>)
 800a0f6:	6818      	ldr	r0, [r3, #0]
 800a0f8:	4b0f      	ldr	r3, [pc, #60]	@ (800a138 <prvAddCurrentTaskToDelayedList+0x80>)
 800a0fa:	6819      	ldr	r1, [r3, #0]
 800a0fc:	3104      	adds	r1, #4
 800a0fe:	f7ff fdc4 	bl	8009c8a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a102:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a104:	2d00      	cmp	r5, #0
 800a106:	d0ef      	beq.n	800a0e8 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a108:	4b0b      	ldr	r3, [pc, #44]	@ (800a138 <prvAddCurrentTaskToDelayedList+0x80>)
 800a10a:	6819      	ldr	r1, [r3, #0]
 800a10c:	3104      	adds	r1, #4
 800a10e:	480d      	ldr	r0, [pc, #52]	@ (800a144 <prvAddCurrentTaskToDelayedList+0x8c>)
 800a110:	f7ff fdb0 	bl	8009c74 <vListInsertEnd>
 800a114:	e7f5      	b.n	800a102 <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a116:	4b0c      	ldr	r3, [pc, #48]	@ (800a148 <prvAddCurrentTaskToDelayedList+0x90>)
 800a118:	6818      	ldr	r0, [r3, #0]
 800a11a:	4b07      	ldr	r3, [pc, #28]	@ (800a138 <prvAddCurrentTaskToDelayedList+0x80>)
 800a11c:	6819      	ldr	r1, [r3, #0]
 800a11e:	3104      	adds	r1, #4
 800a120:	f7ff fdb3 	bl	8009c8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a124:	4b09      	ldr	r3, [pc, #36]	@ (800a14c <prvAddCurrentTaskToDelayedList+0x94>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	42a3      	cmp	r3, r4
 800a12a:	d9ea      	bls.n	800a102 <prvAddCurrentTaskToDelayedList+0x4a>
					xNextTaskUnblockTime = xTimeToWake;
 800a12c:	4b07      	ldr	r3, [pc, #28]	@ (800a14c <prvAddCurrentTaskToDelayedList+0x94>)
 800a12e:	601c      	str	r4, [r3, #0]
}
 800a130:	e7e7      	b.n	800a102 <prvAddCurrentTaskToDelayedList+0x4a>
 800a132:	bf00      	nop
 800a134:	20008f84 	.word	0x20008f84
 800a138:	20009088 	.word	0x20009088
 800a13c:	20008f80 	.word	0x20008f80
 800a140:	20008fcc 	.word	0x20008fcc
 800a144:	20008f8c 	.word	0x20008f8c
 800a148:	20008fd0 	.word	0x20008fd0
 800a14c:	20008f68 	.word	0x20008f68

0800a150 <xTaskCreateStatic>:
	{
 800a150:	b530      	push	{r4, r5, lr}
 800a152:	b087      	sub	sp, #28
 800a154:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800a156:	b17c      	cbz	r4, 800a178 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a158:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800a15a:	b1b5      	cbz	r5, 800a18a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800a15c:	255c      	movs	r5, #92	@ 0x5c
 800a15e:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a160:	9d04      	ldr	r5, [sp, #16]
 800a162:	2d5c      	cmp	r5, #92	@ 0x5c
 800a164:	d01a      	beq.n	800a19c <xTaskCreateStatic+0x4c>
 800a166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	e7fe      	b.n	800a176 <xTaskCreateStatic+0x26>
 800a178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a17c:	f383 8811 	msr	BASEPRI, r3
 800a180:	f3bf 8f6f 	isb	sy
 800a184:	f3bf 8f4f 	dsb	sy
 800a188:	e7fe      	b.n	800a188 <xTaskCreateStatic+0x38>
 800a18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	e7fe      	b.n	800a19a <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a19c:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a19e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800a1a0:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1a2:	2402      	movs	r4, #2
 800a1a4:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a1a8:	2400      	movs	r4, #0
 800a1aa:	9403      	str	r4, [sp, #12]
 800a1ac:	9502      	str	r5, [sp, #8]
 800a1ae:	ac05      	add	r4, sp, #20
 800a1b0:	9401      	str	r4, [sp, #4]
 800a1b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a1b4:	9400      	str	r4, [sp, #0]
 800a1b6:	f7ff fe4d 	bl	8009e54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1ba:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800a1bc:	f7ff fed0 	bl	8009f60 <prvAddNewTaskToReadyList>
	}
 800a1c0:	9805      	ldr	r0, [sp, #20]
 800a1c2:	b007      	add	sp, #28
 800a1c4:	bd30      	pop	{r4, r5, pc}

0800a1c6 <xTaskCreate>:
	{
 800a1c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	4607      	mov	r7, r0
 800a1ce:	4688      	mov	r8, r1
 800a1d0:	4614      	mov	r4, r2
 800a1d2:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a1d4:	0090      	lsls	r0, r2, #2
 800a1d6:	f000 fc7f 	bl	800aad8 <pvPortMalloc>
			if( pxStack != NULL )
 800a1da:	b308      	cbz	r0, 800a220 <xTaskCreate+0x5a>
 800a1dc:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a1de:	205c      	movs	r0, #92	@ 0x5c
 800a1e0:	f000 fc7a 	bl	800aad8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800a1e4:	4605      	mov	r5, r0
 800a1e6:	b1a8      	cbz	r0, 800a214 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800a1e8:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a1f2:	9303      	str	r3, [sp, #12]
 800a1f4:	9002      	str	r0, [sp, #8]
 800a1f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a1f8:	9301      	str	r3, [sp, #4]
 800a1fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1fc:	9300      	str	r3, [sp, #0]
 800a1fe:	4633      	mov	r3, r6
 800a200:	4622      	mov	r2, r4
 800a202:	4641      	mov	r1, r8
 800a204:	4638      	mov	r0, r7
 800a206:	f7ff fe25 	bl	8009e54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a20a:	4628      	mov	r0, r5
 800a20c:	f7ff fea8 	bl	8009f60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a210:	2001      	movs	r0, #1
 800a212:	e007      	b.n	800a224 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800a214:	4648      	mov	r0, r9
 800a216:	f000 fceb 	bl	800abf0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a21a:	f04f 30ff 	mov.w	r0, #4294967295
 800a21e:	e001      	b.n	800a224 <xTaskCreate+0x5e>
 800a220:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800a224:	b005      	add	sp, #20
 800a226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800a22c <vTaskStartScheduler>:
{
 800a22c:	b510      	push	{r4, lr}
 800a22e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a230:	2400      	movs	r4, #0
 800a232:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a234:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a236:	aa07      	add	r2, sp, #28
 800a238:	a906      	add	r1, sp, #24
 800a23a:	a805      	add	r0, sp, #20
 800a23c:	f7fc fc68 	bl	8006b10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a240:	9b05      	ldr	r3, [sp, #20]
 800a242:	9302      	str	r3, [sp, #8]
 800a244:	9b06      	ldr	r3, [sp, #24]
 800a246:	9301      	str	r3, [sp, #4]
 800a248:	9400      	str	r4, [sp, #0]
 800a24a:	4623      	mov	r3, r4
 800a24c:	9a07      	ldr	r2, [sp, #28]
 800a24e:	490e      	ldr	r1, [pc, #56]	@ (800a288 <vTaskStartScheduler+0x5c>)
 800a250:	480e      	ldr	r0, [pc, #56]	@ (800a28c <vTaskStartScheduler+0x60>)
 800a252:	f7ff ff7d 	bl	800a150 <xTaskCreateStatic>
 800a256:	4b0e      	ldr	r3, [pc, #56]	@ (800a290 <vTaskStartScheduler+0x64>)
 800a258:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800a25a:	b190      	cbz	r0, 800a282 <vTaskStartScheduler+0x56>
 800a25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a260:	f383 8811 	msr	BASEPRI, r3
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800a26c:	4b09      	ldr	r3, [pc, #36]	@ (800a294 <vTaskStartScheduler+0x68>)
 800a26e:	f04f 32ff 	mov.w	r2, #4294967295
 800a272:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a274:	4b08      	ldr	r3, [pc, #32]	@ (800a298 <vTaskStartScheduler+0x6c>)
 800a276:	2201      	movs	r2, #1
 800a278:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a27a:	4b08      	ldr	r3, [pc, #32]	@ (800a29c <vTaskStartScheduler+0x70>)
 800a27c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800a27e:	f000 fb3b 	bl	800a8f8 <xPortStartScheduler>
}
 800a282:	b008      	add	sp, #32
 800a284:	bd10      	pop	{r4, pc}
 800a286:	bf00      	nop
 800a288:	080110f4 	.word	0x080110f4
 800a28c:	0800a091 	.word	0x0800a091
 800a290:	20008f64 	.word	0x20008f64
 800a294:	20008f68 	.word	0x20008f68
 800a298:	20008f7c 	.word	0x20008f7c
 800a29c:	20008f84 	.word	0x20008f84

0800a2a0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800a2a0:	4a02      	ldr	r2, [pc, #8]	@ (800a2ac <vTaskSuspendAll+0xc>)
 800a2a2:	6813      	ldr	r3, [r2, #0]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	6013      	str	r3, [r2, #0]
}
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	20008f60 	.word	0x20008f60

0800a2b0 <xTaskIncrementTick>:
{
 800a2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2b2:	4b3f      	ldr	r3, [pc, #252]	@ (800a3b0 <xTaskIncrementTick+0x100>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d170      	bne.n	800a39c <xTaskIncrementTick+0xec>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a2ba:	4b3e      	ldr	r3, [pc, #248]	@ (800a3b4 <xTaskIncrementTick+0x104>)
 800a2bc:	681d      	ldr	r5, [r3, #0]
 800a2be:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800a2c0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a2c2:	b9c5      	cbnz	r5, 800a2f6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800a2c4:	4b3c      	ldr	r3, [pc, #240]	@ (800a3b8 <xTaskIncrementTick+0x108>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	b143      	cbz	r3, 800a2de <xTaskIncrementTick+0x2e>
 800a2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d0:	f383 8811 	msr	BASEPRI, r3
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	f3bf 8f4f 	dsb	sy
 800a2dc:	e7fe      	b.n	800a2dc <xTaskIncrementTick+0x2c>
 800a2de:	4a36      	ldr	r2, [pc, #216]	@ (800a3b8 <xTaskIncrementTick+0x108>)
 800a2e0:	6811      	ldr	r1, [r2, #0]
 800a2e2:	4b36      	ldr	r3, [pc, #216]	@ (800a3bc <xTaskIncrementTick+0x10c>)
 800a2e4:	6818      	ldr	r0, [r3, #0]
 800a2e6:	6010      	str	r0, [r2, #0]
 800a2e8:	6019      	str	r1, [r3, #0]
 800a2ea:	4a35      	ldr	r2, [pc, #212]	@ (800a3c0 <xTaskIncrementTick+0x110>)
 800a2ec:	6813      	ldr	r3, [r2, #0]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	6013      	str	r3, [r2, #0]
 800a2f2:	f7ff fd99 	bl	8009e28 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a2f6:	4b33      	ldr	r3, [pc, #204]	@ (800a3c4 <xTaskIncrementTick+0x114>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	42ab      	cmp	r3, r5
 800a2fc:	d941      	bls.n	800a382 <xTaskIncrementTick+0xd2>
BaseType_t xSwitchRequired = pdFALSE;
 800a2fe:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a300:	4b31      	ldr	r3, [pc, #196]	@ (800a3c8 <xTaskIncrementTick+0x118>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a306:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a30a:	009a      	lsls	r2, r3, #2
 800a30c:	4b2f      	ldr	r3, [pc, #188]	@ (800a3cc <xTaskIncrementTick+0x11c>)
 800a30e:	589b      	ldr	r3, [r3, r2]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d900      	bls.n	800a316 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800a314:	2701      	movs	r7, #1
			if( xPendedTicks == ( TickType_t ) 0 )
 800a316:	4b2e      	ldr	r3, [pc, #184]	@ (800a3d0 <xTaskIncrementTick+0x120>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d03b      	beq.n	800a396 <xTaskIncrementTick+0xe6>
			if( xYieldPending != pdFALSE )
 800a31e:	4b2d      	ldr	r3, [pc, #180]	@ (800a3d4 <xTaskIncrementTick+0x124>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d041      	beq.n	800a3aa <xTaskIncrementTick+0xfa>
				xSwitchRequired = pdTRUE;
 800a326:	2701      	movs	r7, #1
	return xSwitchRequired;
 800a328:	e03f      	b.n	800a3aa <xTaskIncrementTick+0xfa>
							xSwitchRequired = pdTRUE;
 800a32a:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a32c:	4b22      	ldr	r3, [pc, #136]	@ (800a3b8 <xTaskIncrementTick+0x108>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	b343      	cbz	r3, 800a386 <xTaskIncrementTick+0xd6>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a334:	4b20      	ldr	r3, [pc, #128]	@ (800a3b8 <xTaskIncrementTick+0x108>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a33c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800a33e:	429d      	cmp	r5, r3
 800a340:	d326      	bcc.n	800a390 <xTaskIncrementTick+0xe0>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a342:	1d26      	adds	r6, r4, #4
 800a344:	4630      	mov	r0, r6
 800a346:	f7ff fcb9 	bl	8009cbc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a34a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a34c:	b11b      	cbz	r3, 800a356 <xTaskIncrementTick+0xa6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a34e:	f104 0018 	add.w	r0, r4, #24
 800a352:	f7ff fcb3 	bl	8009cbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a356:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a358:	2201      	movs	r2, #1
 800a35a:	409a      	lsls	r2, r3
 800a35c:	491e      	ldr	r1, [pc, #120]	@ (800a3d8 <xTaskIncrementTick+0x128>)
 800a35e:	6808      	ldr	r0, [r1, #0]
 800a360:	4302      	orrs	r2, r0
 800a362:	600a      	str	r2, [r1, #0]
 800a364:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a368:	009a      	lsls	r2, r3, #2
 800a36a:	4631      	mov	r1, r6
 800a36c:	4817      	ldr	r0, [pc, #92]	@ (800a3cc <xTaskIncrementTick+0x11c>)
 800a36e:	4410      	add	r0, r2
 800a370:	f7ff fc80 	bl	8009c74 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a374:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a376:	4b14      	ldr	r3, [pc, #80]	@ (800a3c8 <xTaskIncrementTick+0x118>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d2d4      	bcs.n	800a32a <xTaskIncrementTick+0x7a>
 800a380:	e7d4      	b.n	800a32c <xTaskIncrementTick+0x7c>
BaseType_t xSwitchRequired = pdFALSE;
 800a382:	2700      	movs	r7, #0
 800a384:	e7d2      	b.n	800a32c <xTaskIncrementTick+0x7c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a386:	4b0f      	ldr	r3, [pc, #60]	@ (800a3c4 <xTaskIncrementTick+0x114>)
 800a388:	f04f 32ff 	mov.w	r2, #4294967295
 800a38c:	601a      	str	r2, [r3, #0]
					break;
 800a38e:	e7b7      	b.n	800a300 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800a390:	4a0c      	ldr	r2, [pc, #48]	@ (800a3c4 <xTaskIncrementTick+0x114>)
 800a392:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a394:	e7b4      	b.n	800a300 <xTaskIncrementTick+0x50>
				vApplicationTickHook();
 800a396:	f7fc fbb7 	bl	8006b08 <vApplicationTickHook>
 800a39a:	e7c0      	b.n	800a31e <xTaskIncrementTick+0x6e>
		++xPendedTicks;
 800a39c:	4a0c      	ldr	r2, [pc, #48]	@ (800a3d0 <xTaskIncrementTick+0x120>)
 800a39e:	6813      	ldr	r3, [r2, #0]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
 800a3a4:	f7fc fbb0 	bl	8006b08 <vApplicationTickHook>
BaseType_t xSwitchRequired = pdFALSE;
 800a3a8:	2700      	movs	r7, #0
}
 800a3aa:	4638      	mov	r0, r7
 800a3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20008f60 	.word	0x20008f60
 800a3b4:	20008f84 	.word	0x20008f84
 800a3b8:	20008fd0 	.word	0x20008fd0
 800a3bc:	20008fcc 	.word	0x20008fcc
 800a3c0:	20008f70 	.word	0x20008f70
 800a3c4:	20008f68 	.word	0x20008f68
 800a3c8:	20009088 	.word	0x20009088
 800a3cc:	20008ffc 	.word	0x20008ffc
 800a3d0:	20008f78 	.word	0x20008f78
 800a3d4:	20008f74 	.word	0x20008f74
 800a3d8:	20008f80 	.word	0x20008f80

0800a3dc <xTaskResumeAll>:
{
 800a3dc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800a3de:	4b35      	ldr	r3, [pc, #212]	@ (800a4b4 <xTaskResumeAll+0xd8>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	b943      	cbnz	r3, 800a3f6 <xTaskResumeAll+0x1a>
 800a3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e8:	f383 8811 	msr	BASEPRI, r3
 800a3ec:	f3bf 8f6f 	isb	sy
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	e7fe      	b.n	800a3f4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800a3f6:	f000 f9f5 	bl	800a7e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800a3fa:	4b2e      	ldr	r3, [pc, #184]	@ (800a4b4 <xTaskResumeAll+0xd8>)
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	3a01      	subs	r2, #1
 800a400:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d14f      	bne.n	800a4a8 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a408:	4b2b      	ldr	r3, [pc, #172]	@ (800a4b8 <xTaskResumeAll+0xdc>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	b90b      	cbnz	r3, 800a412 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800a40e:	2400      	movs	r4, #0
 800a410:	e04b      	b.n	800a4aa <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800a412:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a414:	4b29      	ldr	r3, [pc, #164]	@ (800a4bc <xTaskResumeAll+0xe0>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	b31b      	cbz	r3, 800a462 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a41a:	4b28      	ldr	r3, [pc, #160]	@ (800a4bc <xTaskResumeAll+0xe0>)
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a420:	f104 0018 	add.w	r0, r4, #24
 800a424:	f7ff fc4a 	bl	8009cbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a428:	1d25      	adds	r5, r4, #4
 800a42a:	4628      	mov	r0, r5
 800a42c:	f7ff fc46 	bl	8009cbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a430:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800a432:	2301      	movs	r3, #1
 800a434:	4083      	lsls	r3, r0
 800a436:	4a22      	ldr	r2, [pc, #136]	@ (800a4c0 <xTaskResumeAll+0xe4>)
 800a438:	6811      	ldr	r1, [r2, #0]
 800a43a:	430b      	orrs	r3, r1
 800a43c:	6013      	str	r3, [r2, #0]
 800a43e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a442:	4629      	mov	r1, r5
 800a444:	4b1f      	ldr	r3, [pc, #124]	@ (800a4c4 <xTaskResumeAll+0xe8>)
 800a446:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a44a:	f7ff fc13 	bl	8009c74 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a44e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a450:	4b1d      	ldr	r3, [pc, #116]	@ (800a4c8 <xTaskResumeAll+0xec>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a456:	429a      	cmp	r2, r3
 800a458:	d3dc      	bcc.n	800a414 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800a45a:	4b1c      	ldr	r3, [pc, #112]	@ (800a4cc <xTaskResumeAll+0xf0>)
 800a45c:	2201      	movs	r2, #1
 800a45e:	601a      	str	r2, [r3, #0]
 800a460:	e7d8      	b.n	800a414 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800a462:	b10c      	cbz	r4, 800a468 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800a464:	f7ff fce0 	bl	8009e28 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a468:	4b19      	ldr	r3, [pc, #100]	@ (800a4d0 <xTaskResumeAll+0xf4>)
 800a46a:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800a46c:	b984      	cbnz	r4, 800a490 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800a46e:	4b17      	ldr	r3, [pc, #92]	@ (800a4cc <xTaskResumeAll+0xf0>)
 800a470:	681c      	ldr	r4, [r3, #0]
 800a472:	b1d4      	cbz	r4, 800a4aa <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800a474:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a478:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a47c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800a488:	2401      	movs	r4, #1
 800a48a:	e00e      	b.n	800a4aa <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a48c:	3c01      	subs	r4, #1
 800a48e:	d007      	beq.n	800a4a0 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800a490:	f7ff ff0e 	bl	800a2b0 <xTaskIncrementTick>
 800a494:	2800      	cmp	r0, #0
 800a496:	d0f9      	beq.n	800a48c <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800a498:	4b0c      	ldr	r3, [pc, #48]	@ (800a4cc <xTaskResumeAll+0xf0>)
 800a49a:	2201      	movs	r2, #1
 800a49c:	601a      	str	r2, [r3, #0]
 800a49e:	e7f5      	b.n	800a48c <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800a4a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a4d0 <xTaskResumeAll+0xf4>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	601a      	str	r2, [r3, #0]
 800a4a6:	e7e2      	b.n	800a46e <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800a4a8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a4aa:	f000 f9bd 	bl	800a828 <vPortExitCritical>
}
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	bd38      	pop	{r3, r4, r5, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20008f60 	.word	0x20008f60
 800a4b8:	20008f88 	.word	0x20008f88
 800a4bc:	20008fb8 	.word	0x20008fb8
 800a4c0:	20008f80 	.word	0x20008f80
 800a4c4:	20008ffc 	.word	0x20008ffc
 800a4c8:	20009088 	.word	0x20009088
 800a4cc:	20008f74 	.word	0x20008f74
 800a4d0:	20008f78 	.word	0x20008f78

0800a4d4 <vTaskDelay>:
	{
 800a4d4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a4d6:	b1a8      	cbz	r0, 800a504 <vTaskDelay+0x30>
 800a4d8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800a4da:	4b10      	ldr	r3, [pc, #64]	@ (800a51c <vTaskDelay+0x48>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	b143      	cbz	r3, 800a4f2 <vTaskDelay+0x1e>
 800a4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	e7fe      	b.n	800a4f0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800a4f2:	f7ff fed5 	bl	800a2a0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f7ff fddd 	bl	800a0b8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800a4fe:	f7ff ff6d 	bl	800a3dc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800a502:	b948      	cbnz	r0, 800a518 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800a504:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a508:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a50c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	f3bf 8f6f 	isb	sy
	}
 800a518:	bd10      	pop	{r4, pc}
 800a51a:	bf00      	nop
 800a51c:	20008f60 	.word	0x20008f60

0800a520 <vTaskSwitchContext>:
{
 800a520:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a522:	4b27      	ldr	r3, [pc, #156]	@ (800a5c0 <vTaskSwitchContext+0xa0>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	b11b      	cbz	r3, 800a530 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800a528:	4b26      	ldr	r3, [pc, #152]	@ (800a5c4 <vTaskSwitchContext+0xa4>)
 800a52a:	2201      	movs	r2, #1
 800a52c:	601a      	str	r2, [r3, #0]
}
 800a52e:	bd08      	pop	{r3, pc}
		xYieldPending = pdFALSE;
 800a530:	4b24      	ldr	r3, [pc, #144]	@ (800a5c4 <vTaskSwitchContext+0xa4>)
 800a532:	2200      	movs	r2, #0
 800a534:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a536:	4b24      	ldr	r3, [pc, #144]	@ (800a5c8 <vTaskSwitchContext+0xa8>)
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	6812      	ldr	r2, [r2, #0]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a540:	429a      	cmp	r2, r3
 800a542:	d915      	bls.n	800a570 <vTaskSwitchContext+0x50>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a544:	4b21      	ldr	r3, [pc, #132]	@ (800a5cc <vTaskSwitchContext+0xac>)
 800a546:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a548:	fab3 f383 	clz	r3, r3
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	f1c3 031f 	rsb	r3, r3, #31
 800a552:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800a556:	008a      	lsls	r2, r1, #2
 800a558:	491d      	ldr	r1, [pc, #116]	@ (800a5d0 <vTaskSwitchContext+0xb0>)
 800a55a:	588a      	ldr	r2, [r1, r2]
 800a55c:	b97a      	cbnz	r2, 800a57e <vTaskSwitchContext+0x5e>
	__asm volatile
 800a55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	e7fe      	b.n	800a56e <vTaskSwitchContext+0x4e>
		taskCHECK_FOR_STACK_OVERFLOW();
 800a570:	4b15      	ldr	r3, [pc, #84]	@ (800a5c8 <vTaskSwitchContext+0xa8>)
 800a572:	6818      	ldr	r0, [r3, #0]
 800a574:	6819      	ldr	r1, [r3, #0]
 800a576:	3134      	adds	r1, #52	@ 0x34
 800a578:	f7fc fac7 	bl	8006b0a <vApplicationStackOverflowHook>
 800a57c:	e7e2      	b.n	800a544 <vTaskSwitchContext+0x24>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a57e:	4814      	ldr	r0, [pc, #80]	@ (800a5d0 <vTaskSwitchContext+0xb0>)
 800a580:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800a584:	008a      	lsls	r2, r1, #2
 800a586:	4402      	add	r2, r0
 800a588:	6851      	ldr	r1, [r2, #4]
 800a58a:	6849      	ldr	r1, [r1, #4]
 800a58c:	6051      	str	r1, [r2, #4]
 800a58e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800a592:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800a596:	3208      	adds	r2, #8
 800a598:	4402      	add	r2, r0
 800a59a:	4291      	cmp	r1, r2
 800a59c:	d009      	beq.n	800a5b2 <vTaskSwitchContext+0x92>
 800a59e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a5a2:	009a      	lsls	r2, r3, #2
 800a5a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a5d0 <vTaskSwitchContext+0xb0>)
 800a5a6:	4413      	add	r3, r2
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	68da      	ldr	r2, [r3, #12]
 800a5ac:	4b06      	ldr	r3, [pc, #24]	@ (800a5c8 <vTaskSwitchContext+0xa8>)
 800a5ae:	601a      	str	r2, [r3, #0]
}
 800a5b0:	e7bd      	b.n	800a52e <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5b2:	6848      	ldr	r0, [r1, #4]
 800a5b4:	4662      	mov	r2, ip
 800a5b6:	0091      	lsls	r1, r2, #2
 800a5b8:	4a05      	ldr	r2, [pc, #20]	@ (800a5d0 <vTaskSwitchContext+0xb0>)
 800a5ba:	440a      	add	r2, r1
 800a5bc:	6050      	str	r0, [r2, #4]
 800a5be:	e7ee      	b.n	800a59e <vTaskSwitchContext+0x7e>
 800a5c0:	20008f60 	.word	0x20008f60
 800a5c4:	20008f74 	.word	0x20008f74
 800a5c8:	20009088 	.word	0x20009088
 800a5cc:	20008f80 	.word	0x20008f80
 800a5d0:	20008ffc 	.word	0x20008ffc

0800a5d4 <xTaskRemoveFromEventList>:
{
 800a5d4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5d6:	68c3      	ldr	r3, [r0, #12]
 800a5d8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800a5da:	b324      	cbz	r4, 800a626 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a5dc:	f104 0518 	add.w	r5, r4, #24
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	f7ff fb6b 	bl	8009cbc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5e6:	4b18      	ldr	r3, [pc, #96]	@ (800a648 <xTaskRemoveFromEventList+0x74>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	bb2b      	cbnz	r3, 800a638 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a5ec:	1d25      	adds	r5, r4, #4
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	f7ff fb64 	bl	8009cbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a5f4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	4083      	lsls	r3, r0
 800a5fa:	4a14      	ldr	r2, [pc, #80]	@ (800a64c <xTaskRemoveFromEventList+0x78>)
 800a5fc:	6811      	ldr	r1, [r2, #0]
 800a5fe:	430b      	orrs	r3, r1
 800a600:	6013      	str	r3, [r2, #0]
 800a602:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a606:	4629      	mov	r1, r5
 800a608:	4b11      	ldr	r3, [pc, #68]	@ (800a650 <xTaskRemoveFromEventList+0x7c>)
 800a60a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a60e:	f7ff fb31 	bl	8009c74 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a612:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a614:	4b0f      	ldr	r3, [pc, #60]	@ (800a654 <xTaskRemoveFromEventList+0x80>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d911      	bls.n	800a642 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800a61e:	2001      	movs	r0, #1
 800a620:	4b0d      	ldr	r3, [pc, #52]	@ (800a658 <xTaskRemoveFromEventList+0x84>)
 800a622:	6018      	str	r0, [r3, #0]
}
 800a624:	bd38      	pop	{r3, r4, r5, pc}
 800a626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	e7fe      	b.n	800a636 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a638:	4629      	mov	r1, r5
 800a63a:	4808      	ldr	r0, [pc, #32]	@ (800a65c <xTaskRemoveFromEventList+0x88>)
 800a63c:	f7ff fb1a 	bl	8009c74 <vListInsertEnd>
 800a640:	e7e7      	b.n	800a612 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800a642:	2000      	movs	r0, #0
	return xReturn;
 800a644:	e7ee      	b.n	800a624 <xTaskRemoveFromEventList+0x50>
 800a646:	bf00      	nop
 800a648:	20008f60 	.word	0x20008f60
 800a64c:	20008f80 	.word	0x20008f80
 800a650:	20008ffc 	.word	0x20008ffc
 800a654:	20009088 	.word	0x20009088
 800a658:	20008f74 	.word	0x20008f74
 800a65c:	20008fb8 	.word	0x20008fb8

0800a660 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a660:	4b05      	ldr	r3, [pc, #20]	@ (800a678 <xTaskGetSchedulerState+0x18>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	b133      	cbz	r3, 800a674 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a666:	4b05      	ldr	r3, [pc, #20]	@ (800a67c <xTaskGetSchedulerState+0x1c>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	b10b      	cbz	r3, 800a670 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800a66c:	2000      	movs	r0, #0
	}
 800a66e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800a670:	2002      	movs	r0, #2
 800a672:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a674:	2001      	movs	r0, #1
 800a676:	4770      	bx	lr
 800a678:	20008f7c 	.word	0x20008f7c
 800a67c:	20008f60 	.word	0x20008f60

0800a680 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800a680:	2800      	cmp	r0, #0
 800a682:	d04b      	beq.n	800a71c <xTaskPriorityDisinherit+0x9c>
	{
 800a684:	b538      	push	{r3, r4, r5, lr}
 800a686:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800a688:	4b26      	ldr	r3, [pc, #152]	@ (800a724 <xTaskPriorityDisinherit+0xa4>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4283      	cmp	r3, r0
 800a68e:	d008      	beq.n	800a6a2 <xTaskPriorityDisinherit+0x22>
 800a690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a694:	f383 8811 	msr	BASEPRI, r3
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	e7fe      	b.n	800a6a0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800a6a2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800a6a4:	b943      	cbnz	r3, 800a6b8 <xTaskPriorityDisinherit+0x38>
 800a6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6aa:	f383 8811 	msr	BASEPRI, r3
 800a6ae:	f3bf 8f6f 	isb	sy
 800a6b2:	f3bf 8f4f 	dsb	sy
 800a6b6:	e7fe      	b.n	800a6b6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a6bc:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a6be:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800a6c0:	4291      	cmp	r1, r2
 800a6c2:	d02d      	beq.n	800a720 <xTaskPriorityDisinherit+0xa0>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a6c4:	b10b      	cbz	r3, 800a6ca <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800a6c6:	2000      	movs	r0, #0
	}
 800a6c8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6ca:	1d05      	adds	r5, r0, #4
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	f7ff faf5 	bl	8009cbc <uxListRemove>
 800a6d2:	b968      	cbnz	r0, 800a6f0 <xTaskPriorityDisinherit+0x70>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a6d4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a6d6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a6da:	0092      	lsls	r2, r2, #2
 800a6dc:	4912      	ldr	r1, [pc, #72]	@ (800a728 <xTaskPriorityDisinherit+0xa8>)
 800a6de:	588a      	ldr	r2, [r1, r2]
 800a6e0:	b932      	cbnz	r2, 800a6f0 <xTaskPriorityDisinherit+0x70>
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	409a      	lsls	r2, r3
 800a6e6:	4911      	ldr	r1, [pc, #68]	@ (800a72c <xTaskPriorityDisinherit+0xac>)
 800a6e8:	680b      	ldr	r3, [r1, #0]
 800a6ea:	ea23 0302 	bic.w	r3, r3, r2
 800a6ee:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a6f0:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800a6f2:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6f4:	f1c0 0307 	rsb	r3, r0, #7
 800a6f8:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a6fa:	2401      	movs	r4, #1
 800a6fc:	fa04 f300 	lsl.w	r3, r4, r0
 800a700:	4a0a      	ldr	r2, [pc, #40]	@ (800a72c <xTaskPriorityDisinherit+0xac>)
 800a702:	6811      	ldr	r1, [r2, #0]
 800a704:	430b      	orrs	r3, r1
 800a706:	6013      	str	r3, [r2, #0]
 800a708:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a70c:	4629      	mov	r1, r5
 800a70e:	4b06      	ldr	r3, [pc, #24]	@ (800a728 <xTaskPriorityDisinherit+0xa8>)
 800a710:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a714:	f7ff faae 	bl	8009c74 <vListInsertEnd>
					xReturn = pdTRUE;
 800a718:	4620      	mov	r0, r4
 800a71a:	e7d5      	b.n	800a6c8 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800a71c:	2000      	movs	r0, #0
	}
 800a71e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800a720:	2000      	movs	r0, #0
 800a722:	e7d1      	b.n	800a6c8 <xTaskPriorityDisinherit+0x48>
 800a724:	20009088 	.word	0x20009088
 800a728:	20008ffc 	.word	0x20008ffc
 800a72c:	20008f80 	.word	0x20008f80

0800a730 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a730:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800a732:	2300      	movs	r3, #0
 800a734:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a736:	4b0d      	ldr	r3, [pc, #52]	@ (800a76c <prvTaskExitError+0x3c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a73e:	d008      	beq.n	800a752 <prvTaskExitError+0x22>
 800a740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a744:	f383 8811 	msr	BASEPRI, r3
 800a748:	f3bf 8f6f 	isb	sy
 800a74c:	f3bf 8f4f 	dsb	sy
 800a750:	e7fe      	b.n	800a750 <prvTaskExitError+0x20>
 800a752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a756:	f383 8811 	msr	BASEPRI, r3
 800a75a:	f3bf 8f6f 	isb	sy
 800a75e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a762:	9b01      	ldr	r3, [sp, #4]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d0fc      	beq.n	800a762 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a768:	b002      	add	sp, #8
 800a76a:	4770      	bx	lr
 800a76c:	20008088 	.word	0x20008088

0800a770 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a770:	4806      	ldr	r0, [pc, #24]	@ (800a78c <prvPortStartFirstTask+0x1c>)
 800a772:	6800      	ldr	r0, [r0, #0]
 800a774:	6800      	ldr	r0, [r0, #0]
 800a776:	f380 8808 	msr	MSP, r0
 800a77a:	b662      	cpsie	i
 800a77c:	b661      	cpsie	f
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	f3bf 8f6f 	isb	sy
 800a786:	df00      	svc	0
 800a788:	bf00      	nop
 800a78a:	0000      	.short	0x0000
 800a78c:	e000ed08 	.word	0xe000ed08

0800a790 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a790:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a794:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a798:	f021 0101 	bic.w	r1, r1, #1
 800a79c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a7a0:	4b03      	ldr	r3, [pc, #12]	@ (800a7b0 <pxPortInitialiseStack+0x20>)
 800a7a2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a7a6:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800a7aa:	3840      	subs	r0, #64	@ 0x40
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	0800a731 	.word	0x0800a731
	...

0800a7c0 <SVC_Handler>:
	__asm volatile (
 800a7c0:	4b07      	ldr	r3, [pc, #28]	@ (800a7e0 <pxCurrentTCBConst2>)
 800a7c2:	6819      	ldr	r1, [r3, #0]
 800a7c4:	6808      	ldr	r0, [r1, #0]
 800a7c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a7ca:	f380 8809 	msr	PSP, r0
 800a7ce:	f3bf 8f6f 	isb	sy
 800a7d2:	f04f 0000 	mov.w	r0, #0
 800a7d6:	f380 8811 	msr	BASEPRI, r0
 800a7da:	f04e 0e0d 	orr.w	lr, lr, #13
 800a7de:	4770      	bx	lr

0800a7e0 <pxCurrentTCBConst2>:
 800a7e0:	20009088 	.word	0x20009088

0800a7e4 <vPortEnterCritical>:
 800a7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a7f4:	4a0b      	ldr	r2, [pc, #44]	@ (800a824 <vPortEnterCritical+0x40>)
 800a7f6:	6813      	ldr	r3, [r2, #0]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d000      	beq.n	800a802 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800a800:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a802:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a806:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800a80a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800a80e:	d0f7      	beq.n	800a800 <vPortEnterCritical+0x1c>
 800a810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a814:	f383 8811 	msr	BASEPRI, r3
 800a818:	f3bf 8f6f 	isb	sy
 800a81c:	f3bf 8f4f 	dsb	sy
 800a820:	e7fe      	b.n	800a820 <vPortEnterCritical+0x3c>
 800a822:	bf00      	nop
 800a824:	20008088 	.word	0x20008088

0800a828 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800a828:	4b09      	ldr	r3, [pc, #36]	@ (800a850 <vPortExitCritical+0x28>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	b943      	cbnz	r3, 800a840 <vPortExitCritical+0x18>
 800a82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a832:	f383 8811 	msr	BASEPRI, r3
 800a836:	f3bf 8f6f 	isb	sy
 800a83a:	f3bf 8f4f 	dsb	sy
 800a83e:	e7fe      	b.n	800a83e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a840:	3b01      	subs	r3, #1
 800a842:	4a03      	ldr	r2, [pc, #12]	@ (800a850 <vPortExitCritical+0x28>)
 800a844:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a846:	b90b      	cbnz	r3, 800a84c <vPortExitCritical+0x24>
	__asm volatile
 800a848:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	20008088 	.word	0x20008088
	...

0800a860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a860:	f3ef 8009 	mrs	r0, PSP
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	4b0d      	ldr	r3, [pc, #52]	@ (800a8a0 <pxCurrentTCBConst>)
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a870:	6010      	str	r0, [r2, #0]
 800a872:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a876:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a87a:	f380 8811 	msr	BASEPRI, r0
 800a87e:	f7ff fe4f 	bl	800a520 <vTaskSwitchContext>
 800a882:	f04f 0000 	mov.w	r0, #0
 800a886:	f380 8811 	msr	BASEPRI, r0
 800a88a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a88e:	6819      	ldr	r1, [r3, #0]
 800a890:	6808      	ldr	r0, [r1, #0]
 800a892:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a896:	f380 8809 	msr	PSP, r0
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	4770      	bx	lr

0800a8a0 <pxCurrentTCBConst>:
 800a8a0:	20009088 	.word	0x20009088

0800a8a4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a8a4:	b508      	push	{r3, lr}
	__asm volatile
 800a8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8aa:	f383 8811 	msr	BASEPRI, r3
 800a8ae:	f3bf 8f6f 	isb	sy
 800a8b2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a8b6:	f7ff fcfb 	bl	800a2b0 <xTaskIncrementTick>
 800a8ba:	b128      	cbz	r0, 800a8c8 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a8bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a8c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a8ce:	bd08      	pop	{r3, pc}

0800a8d0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a8d0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a8d8:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8da:	4b05      	ldr	r3, [pc, #20]	@ (800a8f0 <vPortSetupTimerInterrupt+0x20>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4905      	ldr	r1, [pc, #20]	@ (800a8f4 <vPortSetupTimerInterrupt+0x24>)
 800a8e0:	fba1 1303 	umull	r1, r3, r1, r3
 800a8e4:	099b      	lsrs	r3, r3, #6
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a8ea:	2307      	movs	r3, #7
 800a8ec:	6113      	str	r3, [r2, #16]
}
 800a8ee:	4770      	bx	lr
 800a8f0:	2000807c 	.word	0x2000807c
 800a8f4:	10624dd3 	.word	0x10624dd3

0800a8f8 <xPortStartScheduler>:
{
 800a8f8:	b510      	push	{r4, lr}
 800a8fa:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a8fc:	4b2a      	ldr	r3, [pc, #168]	@ (800a9a8 <xPortStartScheduler+0xb0>)
 800a8fe:	781a      	ldrb	r2, [r3, #0]
 800a900:	b2d2      	uxtb	r2, r2
 800a902:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a904:	22ff      	movs	r2, #255	@ 0xff
 800a906:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a910:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a914:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a918:	4a24      	ldr	r2, [pc, #144]	@ (800a9ac <xPortStartScheduler+0xb4>)
 800a91a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a91c:	4b24      	ldr	r3, [pc, #144]	@ (800a9b0 <xPortStartScheduler+0xb8>)
 800a91e:	2207      	movs	r2, #7
 800a920:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a922:	e009      	b.n	800a938 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 800a924:	4a22      	ldr	r2, [pc, #136]	@ (800a9b0 <xPortStartScheduler+0xb8>)
 800a926:	6813      	ldr	r3, [r2, #0]
 800a928:	3b01      	subs	r3, #1
 800a92a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a92c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a930:	005b      	lsls	r3, r3, #1
 800a932:	b2db      	uxtb	r3, r3
 800a934:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a938:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a93c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a940:	d1f0      	bne.n	800a924 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a942:	4b1b      	ldr	r3, [pc, #108]	@ (800a9b0 <xPortStartScheduler+0xb8>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2b03      	cmp	r3, #3
 800a948:	d008      	beq.n	800a95c <xPortStartScheduler+0x64>
	__asm volatile
 800a94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	e7fe      	b.n	800a95a <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a95c:	021b      	lsls	r3, r3, #8
 800a95e:	4a14      	ldr	r2, [pc, #80]	@ (800a9b0 <xPortStartScheduler+0xb8>)
 800a960:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a962:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a966:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a968:	9b01      	ldr	r3, [sp, #4]
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	4a0e      	ldr	r2, [pc, #56]	@ (800a9a8 <xPortStartScheduler+0xb0>)
 800a96e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a970:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a974:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 800a978:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800a97c:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a980:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 800a984:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 800a988:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800a98c:	f7ff ffa0 	bl	800a8d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a990:	2400      	movs	r4, #0
 800a992:	4b08      	ldr	r3, [pc, #32]	@ (800a9b4 <xPortStartScheduler+0xbc>)
 800a994:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 800a996:	f7ff feeb 	bl	800a770 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800a99a:	f7ff fdc1 	bl	800a520 <vTaskSwitchContext>
	prvTaskExitError();
 800a99e:	f7ff fec7 	bl	800a730 <prvTaskExitError>
}
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	b002      	add	sp, #8
 800a9a6:	bd10      	pop	{r4, pc}
 800a9a8:	e000e400 	.word	0xe000e400
 800a9ac:	20009090 	.word	0x20009090
 800a9b0:	2000908c 	.word	0x2000908c
 800a9b4:	20008088 	.word	0x20008088

0800a9b8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a9b8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9bc:	2b0f      	cmp	r3, #15
 800a9be:	d90f      	bls.n	800a9e0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9c0:	4a11      	ldr	r2, [pc, #68]	@ (800aa08 <vPortValidateInterruptPriority+0x50>)
 800a9c2:	5c9b      	ldrb	r3, [r3, r2]
 800a9c4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9c6:	4a11      	ldr	r2, [pc, #68]	@ (800aa0c <vPortValidateInterruptPriority+0x54>)
 800a9c8:	7812      	ldrb	r2, [r2, #0]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d908      	bls.n	800a9e0 <vPortValidateInterruptPriority+0x28>
 800a9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	e7fe      	b.n	800a9de <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a9e4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800a9e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a9ec:	4a08      	ldr	r2, [pc, #32]	@ (800aa10 <vPortValidateInterruptPriority+0x58>)
 800a9ee:	6812      	ldr	r2, [r2, #0]
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d908      	bls.n	800aa06 <vPortValidateInterruptPriority+0x4e>
 800a9f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f8:	f383 8811 	msr	BASEPRI, r3
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	e7fe      	b.n	800aa04 <vPortValidateInterruptPriority+0x4c>
	}
 800aa06:	4770      	bx	lr
 800aa08:	e000e3f0 	.word	0xe000e3f0
 800aa0c:	20009090 	.word	0x20009090
 800aa10:	2000908c 	.word	0x2000908c

0800aa14 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aa14:	4a12      	ldr	r2, [pc, #72]	@ (800aa60 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aa16:	f012 0f07 	tst.w	r2, #7
 800aa1a:	d01e      	beq.n	800aa5a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aa1c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa1e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aa22:	f5c1 5320 	rsb	r3, r1, #10240	@ 0x2800
 800aa26:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa28:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa2a:	480e      	ldr	r0, [pc, #56]	@ (800aa64 <prvHeapInit+0x50>)
 800aa2c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa2e:	2100      	movs	r1, #0
 800aa30:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa32:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800aa34:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa36:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800aa3a:	480b      	ldr	r0, [pc, #44]	@ (800aa68 <prvHeapInit+0x54>)
 800aa3c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800aa3e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa40:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa42:	1a99      	subs	r1, r3, r2
 800aa44:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa46:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa48:	4b08      	ldr	r3, [pc, #32]	@ (800aa6c <prvHeapInit+0x58>)
 800aa4a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa4c:	4b08      	ldr	r3, [pc, #32]	@ (800aa70 <prvHeapInit+0x5c>)
 800aa4e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa50:	4b08      	ldr	r3, [pc, #32]	@ (800aa74 <prvHeapInit+0x60>)
 800aa52:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800aa56:	601a      	str	r2, [r3, #0]
}
 800aa58:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aa5a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800aa5e:	e7e4      	b.n	800aa2a <prvHeapInit+0x16>
 800aa60:	200090b4 	.word	0x200090b4
 800aa64:	200090ac 	.word	0x200090ac
 800aa68:	200090a8 	.word	0x200090a8
 800aa6c:	200090a0 	.word	0x200090a0
 800aa70:	200090a4 	.word	0x200090a4
 800aa74:	20009094 	.word	0x20009094

0800aa78 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa78:	4b15      	ldr	r3, [pc, #84]	@ (800aad0 <prvInsertBlockIntoFreeList+0x58>)
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4283      	cmp	r3, r0
 800aa80:	d3fb      	bcc.n	800aa7a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa82:	6851      	ldr	r1, [r2, #4]
 800aa84:	eb02 0c01 	add.w	ip, r2, r1
 800aa88:	4584      	cmp	ip, r0
 800aa8a:	d009      	beq.n	800aaa0 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa8c:	6841      	ldr	r1, [r0, #4]
 800aa8e:	eb00 0c01 	add.w	ip, r0, r1
 800aa92:	4563      	cmp	r3, ip
 800aa94:	d009      	beq.n	800aaaa <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa96:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa98:	4290      	cmp	r0, r2
 800aa9a:	d018      	beq.n	800aace <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa9c:	6010      	str	r0, [r2, #0]
 800aa9e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aaa0:	6840      	ldr	r0, [r0, #4]
 800aaa2:	4401      	add	r1, r0
 800aaa4:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800aaa6:	4610      	mov	r0, r2
 800aaa8:	e7f0      	b.n	800aa8c <prvInsertBlockIntoFreeList+0x14>
{
 800aaaa:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aaac:	4c09      	ldr	r4, [pc, #36]	@ (800aad4 <prvInsertBlockIntoFreeList+0x5c>)
 800aaae:	6824      	ldr	r4, [r4, #0]
 800aab0:	42a3      	cmp	r3, r4
 800aab2:	d00a      	beq.n	800aaca <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	4419      	add	r1, r3
 800aab8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aaba:	6813      	ldr	r3, [r2, #0]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800aac0:	4290      	cmp	r0, r2
 800aac2:	d000      	beq.n	800aac6 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aac4:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aac6:	bc10      	pop	{r4}
 800aac8:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aaca:	6004      	str	r4, [r0, #0]
 800aacc:	e7f8      	b.n	800aac0 <prvInsertBlockIntoFreeList+0x48>
 800aace:	4770      	bx	lr
 800aad0:	200090ac 	.word	0x200090ac
 800aad4:	200090a8 	.word	0x200090a8

0800aad8 <pvPortMalloc>:
{
 800aad8:	b538      	push	{r3, r4, r5, lr}
 800aada:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800aadc:	f7ff fbe0 	bl	800a2a0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800aae0:	4b3d      	ldr	r3, [pc, #244]	@ (800abd8 <pvPortMalloc+0x100>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	b1ab      	cbz	r3, 800ab12 <pvPortMalloc+0x3a>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aae6:	4b3d      	ldr	r3, [pc, #244]	@ (800abdc <pvPortMalloc+0x104>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	421c      	tst	r4, r3
 800aaec:	d114      	bne.n	800ab18 <pvPortMalloc+0x40>
			if( xWantedSize > 0 )
 800aaee:	2c00      	cmp	r4, #0
 800aaf0:	d06a      	beq.n	800abc8 <pvPortMalloc+0xf0>
				xWantedSize += xHeapStructSize;
 800aaf2:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aaf6:	f014 0f07 	tst.w	r4, #7
 800aafa:	d002      	beq.n	800ab02 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aafc:	f022 0207 	bic.w	r2, r2, #7
 800ab00:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab02:	b1d2      	cbz	r2, 800ab3a <pvPortMalloc+0x62>
 800ab04:	4b36      	ldr	r3, [pc, #216]	@ (800abe0 <pvPortMalloc+0x108>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d31a      	bcc.n	800ab42 <pvPortMalloc+0x6a>
				pxBlock = xStart.pxNextFreeBlock;
 800ab0c:	4935      	ldr	r1, [pc, #212]	@ (800abe4 <pvPortMalloc+0x10c>)
 800ab0e:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab10:	e01d      	b.n	800ab4e <pvPortMalloc+0x76>
			prvHeapInit();
 800ab12:	f7ff ff7f 	bl	800aa14 <prvHeapInit>
 800ab16:	e7e6      	b.n	800aae6 <pvPortMalloc+0xe>
	( void ) xTaskResumeAll();
 800ab18:	f7ff fc60 	bl	800a3dc <xTaskResumeAll>
void *pvReturn = NULL;
 800ab1c:	2500      	movs	r5, #0
			vApplicationMallocFailedHook();
 800ab1e:	f7fb fff5 	bl	8006b0c <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab22:	f015 0f07 	tst.w	r5, #7
 800ab26:	d055      	beq.n	800abd4 <pvPortMalloc+0xfc>
 800ab28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab2c:	f383 8811 	msr	BASEPRI, r3
 800ab30:	f3bf 8f6f 	isb	sy
 800ab34:	f3bf 8f4f 	dsb	sy
 800ab38:	e7fe      	b.n	800ab38 <pvPortMalloc+0x60>
	( void ) xTaskResumeAll();
 800ab3a:	f7ff fc4f 	bl	800a3dc <xTaskResumeAll>
void *pvReturn = NULL;
 800ab3e:	2500      	movs	r5, #0
 800ab40:	e7ed      	b.n	800ab1e <pvPortMalloc+0x46>
	( void ) xTaskResumeAll();
 800ab42:	f7ff fc4b 	bl	800a3dc <xTaskResumeAll>
void *pvReturn = NULL;
 800ab46:	2500      	movs	r5, #0
 800ab48:	e7e9      	b.n	800ab1e <pvPortMalloc+0x46>
					pxPreviousBlock = pxBlock;
 800ab4a:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800ab4c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab4e:	6863      	ldr	r3, [r4, #4]
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d202      	bcs.n	800ab5a <pvPortMalloc+0x82>
 800ab54:	6823      	ldr	r3, [r4, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1f7      	bne.n	800ab4a <pvPortMalloc+0x72>
				if( pxBlock != pxEnd )
 800ab5a:	4b1f      	ldr	r3, [pc, #124]	@ (800abd8 <pvPortMalloc+0x100>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	42a3      	cmp	r3, r4
 800ab60:	d014      	beq.n	800ab8c <pvPortMalloc+0xb4>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ab62:	680d      	ldr	r5, [r1, #0]
 800ab64:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ab66:	6823      	ldr	r3, [r4, #0]
 800ab68:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab6a:	6863      	ldr	r3, [r4, #4]
 800ab6c:	1a9b      	subs	r3, r3, r2
 800ab6e:	2b10      	cmp	r3, #16
 800ab70:	d914      	bls.n	800ab9c <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ab72:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab74:	f010 0f07 	tst.w	r0, #7
 800ab78:	d00c      	beq.n	800ab94 <pvPortMalloc+0xbc>
 800ab7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	e7fe      	b.n	800ab8a <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 800ab8c:	f7ff fc26 	bl	800a3dc <xTaskResumeAll>
void *pvReturn = NULL;
 800ab90:	2500      	movs	r5, #0
 800ab92:	e7c4      	b.n	800ab1e <pvPortMalloc+0x46>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab94:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab96:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab98:	f7ff ff6e 	bl	800aa78 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab9c:	6862      	ldr	r2, [r4, #4]
 800ab9e:	4910      	ldr	r1, [pc, #64]	@ (800abe0 <pvPortMalloc+0x108>)
 800aba0:	680b      	ldr	r3, [r1, #0]
 800aba2:	1a9b      	subs	r3, r3, r2
 800aba4:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aba6:	4910      	ldr	r1, [pc, #64]	@ (800abe8 <pvPortMalloc+0x110>)
 800aba8:	6809      	ldr	r1, [r1, #0]
 800abaa:	428b      	cmp	r3, r1
 800abac:	d201      	bcs.n	800abb2 <pvPortMalloc+0xda>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800abae:	490e      	ldr	r1, [pc, #56]	@ (800abe8 <pvPortMalloc+0x110>)
 800abb0:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800abb2:	4b0a      	ldr	r3, [pc, #40]	@ (800abdc <pvPortMalloc+0x104>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800abba:	2300      	movs	r3, #0
 800abbc:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800abbe:	4a0b      	ldr	r2, [pc, #44]	@ (800abec <pvPortMalloc+0x114>)
 800abc0:	6813      	ldr	r3, [r2, #0]
 800abc2:	3301      	adds	r3, #1
 800abc4:	6013      	str	r3, [r2, #0]
 800abc6:	e000      	b.n	800abca <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 800abc8:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 800abca:	f7ff fc07 	bl	800a3dc <xTaskResumeAll>
		if( pvReturn == NULL )
 800abce:	2d00      	cmp	r5, #0
 800abd0:	d1a7      	bne.n	800ab22 <pvPortMalloc+0x4a>
 800abd2:	e7a4      	b.n	800ab1e <pvPortMalloc+0x46>
}
 800abd4:	4628      	mov	r0, r5
 800abd6:	bd38      	pop	{r3, r4, r5, pc}
 800abd8:	200090a8 	.word	0x200090a8
 800abdc:	20009094 	.word	0x20009094
 800abe0:	200090a4 	.word	0x200090a4
 800abe4:	200090ac 	.word	0x200090ac
 800abe8:	200090a0 	.word	0x200090a0
 800abec:	2000909c 	.word	0x2000909c

0800abf0 <vPortFree>:
	if( pv != NULL )
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d034      	beq.n	800ac5e <vPortFree+0x6e>
{
 800abf4:	b538      	push	{r3, r4, r5, lr}
 800abf6:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800abf8:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800abfc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ac00:	4a17      	ldr	r2, [pc, #92]	@ (800ac60 <vPortFree+0x70>)
 800ac02:	6812      	ldr	r2, [r2, #0]
 800ac04:	4213      	tst	r3, r2
 800ac06:	d108      	bne.n	800ac1a <vPortFree+0x2a>
 800ac08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac0c:	f383 8811 	msr	BASEPRI, r3
 800ac10:	f3bf 8f6f 	isb	sy
 800ac14:	f3bf 8f4f 	dsb	sy
 800ac18:	e7fe      	b.n	800ac18 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ac1a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800ac1e:	b141      	cbz	r1, 800ac32 <vPortFree+0x42>
 800ac20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac24:	f383 8811 	msr	BASEPRI, r3
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	e7fe      	b.n	800ac30 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac32:	ea23 0302 	bic.w	r3, r3, r2
 800ac36:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800ac3a:	f7ff fb31 	bl	800a2a0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac3e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800ac42:	4a08      	ldr	r2, [pc, #32]	@ (800ac64 <vPortFree+0x74>)
 800ac44:	6813      	ldr	r3, [r2, #0]
 800ac46:	440b      	add	r3, r1
 800ac48:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	f7ff ff14 	bl	800aa78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ac50:	4a05      	ldr	r2, [pc, #20]	@ (800ac68 <vPortFree+0x78>)
 800ac52:	6813      	ldr	r3, [r2, #0]
 800ac54:	3301      	adds	r3, #1
 800ac56:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800ac58:	f7ff fbc0 	bl	800a3dc <xTaskResumeAll>
}
 800ac5c:	bd38      	pop	{r3, r4, r5, pc}
 800ac5e:	4770      	bx	lr
 800ac60:	20009094 	.word	0x20009094
 800ac64:	200090a4 	.word	0x200090a4
 800ac68:	20009098 	.word	0x20009098

0800ac6c <CanCcl_InitPowerOn>:
* Description:
* Call       : Local
* Returns   : Nothing
******************************************************************************/
static void CanCcl_InitPowerOn( void )
{
 800ac6c:	b508      	push	{r3, lr}
	//CanIl_RxSignalTable_Init();
	//CanIl_TxSignalTable_Init();
	CanIl_MessageTable_Init();
 800ac6e:	f000 f8a5 	bl	800adbc <CanIl_MessageTable_Init>
    CanIl_StateInit();
 800ac72:	f000 f8a5 	bl	800adc0 <CanIl_StateInit>
	CanIl_RxStart();
 800ac76:	f000 f8a9 	bl	800adcc <CanIl_RxStart>
	CanIl_TxStart();
 800ac7a:	f000 f8b5 	bl	800ade8 <CanIl_TxStart>
}
 800ac7e:	bd08      	pop	{r3, pc}

0800ac80 <CanCcl_vPoweronInit>:
* Description:
* Call       : Local
* Returns   : Nothing
******************************************************************************/
void CanCcl_vPoweronInit(void)
{
 800ac80:	b508      	push	{r3, lr}
    CanCcl_InitPowerOn();
 800ac82:	f7ff fff3 	bl	800ac6c <CanCcl_InitPowerOn>
}
 800ac86:	bd08      	pop	{r3, pc}

0800ac88 <CanCcl_TickCntHnadler>:
* Description:
* Call       : Global
* Returns   : Nothing
******************************************************************************/
void CanCcl_TickCntHnadler(void)
{
 800ac88:	b508      	push	{r3, lr}
	CanIl_TxTask();
 800ac8a:	f000 faab 	bl	800b1e4 <CanIl_TxTask>
    // CanIl_RxTask();
}
 800ac8e:	bd08      	pop	{r3, pc}

0800ac90 <CanIl_TxStateTask>:
{
	uint16_t ilTxHnd;
	uint16_t x;
	uint16_t i;

	if(CanIl_Tx_NotSuspended())
 800ac90:	4b20      	ldr	r3, [pc, #128]	@ (800ad14 <CanIl_TxStateTask+0x84>)
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	f013 0f03 	tst.w	r3, #3
 800ac98:	d03a      	beq.n	800ad10 <CanIl_TxStateTask+0x80>
	{
		ilTxHnd = iBytesOfTxHandles;
 800ac9a:	4b1f      	ldr	r3, [pc, #124]	@ (800ad18 <CanIl_TxStateTask+0x88>)
 800ac9c:	781a      	ldrb	r2, [r3, #0]
 800ac9e:	e01e      	b.n	800acde <CanIl_TxStateTask+0x4e>
			{
				if(ilTxConfirmationFlags(x) != 0)
				{
					for(i=0;i<iBytesOfTxHandles;i++)
					{
						ilTxConfirmationFlags(i) = 0;
 800aca0:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 800aca4:	481d      	ldr	r0, [pc, #116]	@ (800ad1c <CanIl_TxStateTask+0x8c>)
 800aca6:	6800      	ldr	r0, [r0, #0]
 800aca8:	f04f 0c00 	mov.w	ip, #0
 800acac:	f800 c001 	strb.w	ip, [r0, r1]
					for(i=0;i<iBytesOfTxHandles;i++)
 800acb0:	3301      	adds	r3, #1
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	4918      	ldr	r1, [pc, #96]	@ (800ad18 <CanIl_TxStateTask+0x88>)
 800acb6:	7809      	ldrb	r1, [r1, #0]
 800acb8:	4299      	cmp	r1, r3
 800acba:	d8f1      	bhi.n	800aca0 <CanIl_TxStateTask+0x10>
					}
					ilTxUpdateCounter(ilTxHnd) = CanIl_GetTxUpdateCycles(ilTxHnd);
 800acbc:	ebce 0ece 	rsb	lr, lr, lr, lsl #3
 800acc0:	ea4f 038e 	mov.w	r3, lr, lsl #2
 800acc4:	4916      	ldr	r1, [pc, #88]	@ (800ad20 <CanIl_TxStateTask+0x90>)
 800acc6:	6809      	ldr	r1, [r1, #0]
 800acc8:	4419      	add	r1, r3
 800acca:	4b14      	ldr	r3, [pc, #80]	@ (800ad1c <CanIl_TxStateTask+0x8c>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4423      	add	r3, r4
 800acd0:	7cc9      	ldrb	r1, [r1, #19]
 800acd2:	7059      	strb	r1, [r3, #1]
 800acd4:	e012      	b.n	800acfc <CanIl_TxStateTask+0x6c>
					for(i=0;i<iBytesOfTxHandles;i++)
 800acd6:	2300      	movs	r3, #0
 800acd8:	e7ec      	b.n	800acb4 <CanIl_TxStateTask+0x24>
				}
			}
		}while(ilTxHnd != 0);
	}
}
 800acda:	bd10      	pop	{r4, pc}
		}while(ilTxHnd != 0);
 800acdc:	b1ba      	cbz	r2, 800ad0e <CanIl_TxStateTask+0x7e>
			ilTxHnd--;
 800acde:	3a01      	subs	r2, #1
 800ace0:	b292      	uxth	r2, r2
			if(x != iCanNotUsedTxHandle)
 800ace2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d0f8      	beq.n	800acdc <CanIl_TxStateTask+0x4c>
{
 800acea:	b510      	push	{r4, lr}
				if(ilTxConfirmationFlags(x) != 0)
 800acec:	4696      	mov	lr, r2
 800acee:	eb02 04c2 	add.w	r4, r2, r2, lsl #3
 800acf2:	4b0a      	ldr	r3, [pc, #40]	@ (800ad1c <CanIl_TxStateTask+0x8c>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	5d1b      	ldrb	r3, [r3, r4]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d1ec      	bne.n	800acd6 <CanIl_TxStateTask+0x46>
		}while(ilTxHnd != 0);
 800acfc:	2a00      	cmp	r2, #0
 800acfe:	d0ec      	beq.n	800acda <CanIl_TxStateTask+0x4a>
			ilTxHnd--;
 800ad00:	3a01      	subs	r2, #1
 800ad02:	b292      	uxth	r2, r2
			if(x != iCanNotUsedTxHandle)
 800ad04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d1ef      	bne.n	800acec <CanIl_TxStateTask+0x5c>
 800ad0c:	e7f6      	b.n	800acfc <CanIl_TxStateTask+0x6c>
 800ad0e:	4770      	bx	lr
 800ad10:	4770      	bx	lr
 800ad12:	bf00      	nop
 800ad14:	2000b8c6 	.word	0x2000b8c6
 800ad18:	2000b8c7 	.word	0x2000b8c7
 800ad1c:	2000b8cc 	.word	0x2000b8cc
 800ad20:	2000b8c8 	.word	0x2000b8c8

0800ad24 <CanIl_EventMsgCycTxPro>:

static void CanIl_EventMsgCycTxPro(void)
{
    uint8_t i;

    for (i=0; i<iBytesOfTxHandles; i++)
 800ad24:	2300      	movs	r3, #0
 800ad26:	4a1b      	ldr	r2, [pc, #108]	@ (800ad94 <CanIl_EventMsgCycTxPro+0x70>)
 800ad28:	7812      	ldrb	r2, [r2, #0]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d931      	bls.n	800ad92 <CanIl_EventMsgCycTxPro+0x6e>
{
 800ad2e:	b410      	push	{r4}
 800ad30:	e005      	b.n	800ad3e <CanIl_EventMsgCycTxPro+0x1a>
    for (i=0; i<iBytesOfTxHandles; i++)
 800ad32:	3301      	adds	r3, #1
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	4a17      	ldr	r2, [pc, #92]	@ (800ad94 <CanIl_EventMsgCycTxPro+0x70>)
 800ad38:	7812      	ldrb	r2, [r2, #0]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d927      	bls.n	800ad8e <CanIl_EventMsgCycTxPro+0x6a>
    {
    	if(iEventMsgInfo(i).Flag==TRUE)
 800ad3e:	eb03 00c3 	add.w	r0, r3, r3, lsl #3
 800ad42:	4a15      	ldr	r2, [pc, #84]	@ (800ad98 <CanIl_EventMsgCycTxPro+0x74>)
 800ad44:	6812      	ldr	r2, [r2, #0]
 800ad46:	4402      	add	r2, r0
 800ad48:	7951      	ldrb	r1, [r2, #5]
 800ad4a:	2901      	cmp	r1, #1
 800ad4c:	d1f1      	bne.n	800ad32 <CanIl_EventMsgCycTxPro+0xe>
    	{
    		iEventMsgInfo(i).Counter++;
 800ad4e:	79d1      	ldrb	r1, [r2, #7]
 800ad50:	3101      	adds	r1, #1
 800ad52:	b2c9      	uxtb	r1, r1
 800ad54:	71d1      	strb	r1, [r2, #7]
    		if(iEventMsgInfo(i).Counter >= CanIl_GetEventTx_Interval_Time())
 800ad56:	4c11      	ldr	r4, [pc, #68]	@ (800ad9c <CanIl_EventMsgCycTxPro+0x78>)
 800ad58:	6824      	ldr	r4, [r4, #0]
 800ad5a:	f894 c000 	ldrb.w	ip, [r4]
 800ad5e:	4561      	cmp	r1, ip
 800ad60:	d3e7      	bcc.n	800ad32 <CanIl_EventMsgCycTxPro+0xe>
    		{
    			ilTxState(i) |= iTxQuickStart;
 800ad62:	7891      	ldrb	r1, [r2, #2]
 800ad64:	f041 0110 	orr.w	r1, r1, #16
 800ad68:	7091      	strb	r1, [r2, #2]
    			iEventMsgInfo(i).Counter = 0;
 800ad6a:	4a0b      	ldr	r2, [pc, #44]	@ (800ad98 <CanIl_EventMsgCycTxPro+0x74>)
 800ad6c:	6811      	ldr	r1, [r2, #0]
 800ad6e:	4401      	add	r1, r0
 800ad70:	2200      	movs	r2, #0
 800ad72:	71ca      	strb	r2, [r1, #7]
    			iEventMsgInfo(i).Time++;
 800ad74:	798a      	ldrb	r2, [r1, #6]
 800ad76:	3201      	adds	r2, #1
 800ad78:	b2d2      	uxtb	r2, r2
 800ad7a:	718a      	strb	r2, [r1, #6]
    			if(iEventMsgInfo(i).Time >= CanIl_GetEventTx_Cnt())
 800ad7c:	4807      	ldr	r0, [pc, #28]	@ (800ad9c <CanIl_EventMsgCycTxPro+0x78>)
 800ad7e:	6800      	ldr	r0, [r0, #0]
 800ad80:	7840      	ldrb	r0, [r0, #1]
 800ad82:	4282      	cmp	r2, r0
 800ad84:	d3d5      	bcc.n	800ad32 <CanIl_EventMsgCycTxPro+0xe>
    			{
    				iEventMsgInfo(i).Time = 0;
 800ad86:	2200      	movs	r2, #0
 800ad88:	718a      	strb	r2, [r1, #6]
    			    iEventMsgInfo(i).Flag = FALSE;
 800ad8a:	714a      	strb	r2, [r1, #5]
 800ad8c:	e7d1      	b.n	800ad32 <CanIl_EventMsgCycTxPro+0xe>
    			}
    		}
    	}
    }
}
 800ad8e:	bc10      	pop	{r4}
 800ad90:	4770      	bx	lr
 800ad92:	4770      	bx	lr
 800ad94:	2000b8c7 	.word	0x2000b8c7
 800ad98:	2000b8cc 	.word	0x2000b8cc
 800ad9c:	20008090 	.word	0x20008090

0800ada0 <CanDrv_HLTxConfirm>:
	}
	CanIl_CanBusDetectHandler();
}

static void CanDrv_HLTxConfirm(uint16_t Index)
{
 800ada0:	b508      	push	{r3, lr}
	uint16_t txHandle;

	//txHandle = CurTxHandleIndex;
	txHandle = Index;

	if (CanGetApplConfirmationPtr(txHandle) != NULL)
 800ada2:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800ada6:	4b04      	ldr	r3, [pc, #16]	@ (800adb8 <CanDrv_HLTxConfirm+0x18>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800adae:	699b      	ldr	r3, [r3, #24]
 800adb0:	b103      	cbz	r3, 800adb4 <CanDrv_HLTxConfirm+0x14>
	{
		(CanGetApplConfirmationPtr(txHandle))(txHandle);
 800adb2:	4798      	blx	r3
	}
}
 800adb4:	bd08      	pop	{r3, pc}
 800adb6:	bf00      	nop
 800adb8:	2000b8c8 	.word	0x2000b8c8

0800adbc <CanIl_MessageTable_Init>:
}
 800adbc:	4770      	bx	lr
	...

0800adc0 <CanIl_StateInit>:
    CanIlState = iTxIsIdle;
 800adc0:	4b01      	ldr	r3, [pc, #4]	@ (800adc8 <CanIl_StateInit+0x8>)
 800adc2:	2200      	movs	r2, #0
 800adc4:	701a      	strb	r2, [r3, #0]
}
 800adc6:	4770      	bx	lr
 800adc8:	2000b8c6 	.word	0x2000b8c6

0800adcc <CanIl_RxStart>:
    if (CanIl_Rx_Enabled()!=0)
 800adcc:	4b05      	ldr	r3, [pc, #20]	@ (800ade4 <CanIl_RxStart+0x18>)
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	f013 0f08 	tst.w	r3, #8
 800add4:	d105      	bne.n	800ade2 <CanIl_RxStart+0x16>
    CanIl_EnableRx();
 800add6:	f023 030c 	bic.w	r3, r3, #12
 800adda:	f043 0308 	orr.w	r3, r3, #8
 800adde:	4a01      	ldr	r2, [pc, #4]	@ (800ade4 <CanIl_RxStart+0x18>)
 800ade0:	7013      	strb	r3, [r2, #0]
}
 800ade2:	4770      	bx	lr
 800ade4:	2000b8c6 	.word	0x2000b8c6

0800ade8 <CanIl_TxStart>:
{
 800ade8:	b570      	push	{r4, r5, r6, lr}
    if (CanIl_Tx_Enabled()!=0)
 800adea:	4b27      	ldr	r3, [pc, #156]	@ (800ae88 <CanIl_TxStart+0xa0>)
 800adec:	781d      	ldrb	r5, [r3, #0]
 800adee:	f015 0f02 	tst.w	r5, #2
 800adf2:	d148      	bne.n	800ae86 <CanIl_TxStart+0x9e>
    for ( ilTxHnd=0 ; ilTxHnd < iBytesOfTxHandles  ; ilTxHnd++ )
 800adf4:	2300      	movs	r3, #0
 800adf6:	e003      	b.n	800ae00 <CanIl_TxStart+0x18>
        ilTxEventCounter(ilTxHnd)  = 0;
 800adf8:	2100      	movs	r1, #0
 800adfa:	7111      	strb	r1, [r2, #4]
    for ( ilTxHnd=0 ; ilTxHnd < iBytesOfTxHandles  ; ilTxHnd++ )
 800adfc:	3301      	adds	r3, #1
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	4a22      	ldr	r2, [pc, #136]	@ (800ae8c <CanIl_TxStart+0xa4>)
 800ae02:	7812      	ldrb	r2, [r2, #0]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d92a      	bls.n	800ae5e <CanIl_TxStart+0x76>
        ilTxState(ilTxHnd) = CanIl_GetTxTypes(ilTxHnd);
 800ae08:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800ae0c:	0090      	lsls	r0, r2, #2
 800ae0e:	4e20      	ldr	r6, [pc, #128]	@ (800ae90 <CanIl_TxStart+0xa8>)
 800ae10:	6832      	ldr	r2, [r6, #0]
 800ae12:	eb02 0c00 	add.w	ip, r2, r0
 800ae16:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800ae1a:	491e      	ldr	r1, [pc, #120]	@ (800ae94 <CanIl_TxStart+0xac>)
 800ae1c:	680c      	ldr	r4, [r1, #0]
 800ae1e:	4414      	add	r4, r2
 800ae20:	f89c c011 	ldrb.w	ip, [ip, #17]
 800ae24:	f884 c002 	strb.w	ip, [r4, #2]
        ilTxUpdateCounter(ilTxHnd) = 0;
 800ae28:	680c      	ldr	r4, [r1, #0]
 800ae2a:	4414      	add	r4, r2
 800ae2c:	f04f 0c00 	mov.w	ip, #0
 800ae30:	f884 c001 	strb.w	ip, [r4, #1]
        ilTxCyclicCounter(ilTxHnd) = IlGetTxStartDelayCycles(ilTxHnd);
 800ae34:	6834      	ldr	r4, [r6, #0]
 800ae36:	eb04 0e00 	add.w	lr, r4, r0
 800ae3a:	680c      	ldr	r4, [r1, #0]
 800ae3c:	eb04 0c02 	add.w	ip, r4, r2
 800ae40:	f89e 4012 	ldrb.w	r4, [lr, #18]
 800ae44:	f88c 4003 	strb.w	r4, [ip, #3]
        if((ilTxState(ilTxHnd) & (iTxCycEveSend))!=0)
 800ae48:	6809      	ldr	r1, [r1, #0]
 800ae4a:	440a      	add	r2, r1
 800ae4c:	7891      	ldrb	r1, [r2, #2]
 800ae4e:	f011 0f02 	tst.w	r1, #2
 800ae52:	d0d1      	beq.n	800adf8 <CanIl_TxStart+0x10>
        ilTxEventCounter(ilTxHnd)  = IlGetTxStartDelayCycles(ilTxHnd);
 800ae54:	6831      	ldr	r1, [r6, #0]
 800ae56:	4401      	add	r1, r0
 800ae58:	7c89      	ldrb	r1, [r1, #18]
 800ae5a:	7111      	strb	r1, [r2, #4]
 800ae5c:	e7ce      	b.n	800adfc <CanIl_TxStart+0x14>
	for(i=0;i<iBytesOfTxHandles;i++)
 800ae5e:	2300      	movs	r3, #0
 800ae60:	e007      	b.n	800ae72 <CanIl_TxStart+0x8a>
		ilTxConfirmationFlags(i) = 0;
 800ae62:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800ae66:	490b      	ldr	r1, [pc, #44]	@ (800ae94 <CanIl_TxStart+0xac>)
 800ae68:	6809      	ldr	r1, [r1, #0]
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	5488      	strb	r0, [r1, r2]
	for(i=0;i<iBytesOfTxHandles;i++)
 800ae6e:	3301      	adds	r3, #1
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	4a06      	ldr	r2, [pc, #24]	@ (800ae8c <CanIl_TxStart+0xa4>)
 800ae74:	7812      	ldrb	r2, [r2, #0]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d8f3      	bhi.n	800ae62 <CanIl_TxStart+0x7a>
    CanIl_EnableTx();
 800ae7a:	f025 0503 	bic.w	r5, r5, #3
 800ae7e:	f045 0502 	orr.w	r5, r5, #2
 800ae82:	4b01      	ldr	r3, [pc, #4]	@ (800ae88 <CanIl_TxStart+0xa0>)
 800ae84:	701d      	strb	r5, [r3, #0]
}
 800ae86:	bd70      	pop	{r4, r5, r6, pc}
 800ae88:	2000b8c6 	.word	0x2000b8c6
 800ae8c:	2000b8c7 	.word	0x2000b8c7
 800ae90:	2000b8c8 	.word	0x2000b8c8
 800ae94:	2000b8cc 	.word	0x2000b8cc

0800ae98 <CanIl_SendEventMsg>:
    if ((CanIl_GetTxTypes(ilTxHnd)!=iTxCycSend)&&(iEventMsgInfo(ilTxHnd).Flag == FALSE))
 800ae98:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800ae9c:	4b09      	ldr	r3, [pc, #36]	@ (800aec4 <CanIl_SendEventMsg+0x2c>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800aea4:	7c5b      	ldrb	r3, [r3, #17]
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d00a      	beq.n	800aec0 <CanIl_SendEventMsg+0x28>
 800aeaa:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800aeae:	4b06      	ldr	r3, [pc, #24]	@ (800aec8 <CanIl_SendEventMsg+0x30>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4403      	add	r3, r0
 800aeb4:	795a      	ldrb	r2, [r3, #5]
 800aeb6:	b91a      	cbnz	r2, 800aec0 <CanIl_SendEventMsg+0x28>
        iEventMsgInfo(ilTxHnd).Counter = 0;
 800aeb8:	71da      	strb	r2, [r3, #7]
        iEventMsgInfo(ilTxHnd).Time = 0;
 800aeba:	719a      	strb	r2, [r3, #6]
        iEventMsgInfo(ilTxHnd).Flag = TRUE;
 800aebc:	2201      	movs	r2, #1
 800aebe:	715a      	strb	r2, [r3, #5]
}
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop
 800aec4:	2000b8c8 	.word	0x2000b8c8
 800aec8:	2000b8cc 	.word	0x2000b8cc

0800aecc <CanStartTransmission>:

uint8_t CanStartTransmission(uint8_t instance,uint32_t ID,uint8_t *pDataBuf, uint8_t dataLen)
{
 800aecc:	b510      	push	{r4, lr}
 800aece:	4604      	mov	r4, r0
 800aed0:	4610      	mov	r0, r2
	uint8_t res = 0;
    if(instance == BCAN_CAN_INSTANCE)
 800aed2:	2c01      	cmp	r4, #1
 800aed4:	d003      	beq.n	800aede <CanStartTransmission+0x12>
            res = CAN_TRANSMIT_MSG_FILED;
        }

		// printf("BCAN_SendMsg ID = 0x%x, dataLen = %d\r\n", ID, dataLen);
    }
    else if(instance == CCAN1_CAN_INSTANCE)
 800aed6:	2c02      	cmp	r4, #2
 800aed8:	d007      	beq.n	800aeea <CanStartTransmission+0x1e>
	uint8_t res = 0;
 800aeda:	2000      	movs	r0, #0
        }
		// printf("CCAN1_SendMsg ID = 0x%x, dataLen = %d\r\n", ID, dataLen);
    }

	return res;
}
 800aedc:	bd10      	pop	{r4, pc}
        if(CAN2_SendMsg(pDataBuf, ID, dataLen))
 800aede:	461a      	mov	r2, r3
 800aee0:	f7fb fcd4 	bl	800688c <CAN2_SendMsg>
 800aee4:	b138      	cbz	r0, 800aef6 <CanStartTransmission+0x2a>
            res = CAN_TRANSMIT_MSG_SUCCS;
 800aee6:	2000      	movs	r0, #0
 800aee8:	e7f8      	b.n	800aedc <CanStartTransmission+0x10>
        if(CAN_SendMsg(pDataBuf, ID, dataLen))
 800aeea:	461a      	mov	r2, r3
 800aeec:	f7fb fd06 	bl	80068fc <CAN_SendMsg>
 800aef0:	b118      	cbz	r0, 800aefa <CanStartTransmission+0x2e>
            res = CAN_TRANSMIT_MSG_SUCCS;
 800aef2:	2000      	movs	r0, #0
 800aef4:	e7f2      	b.n	800aedc <CanStartTransmission+0x10>
            res = CAN_TRANSMIT_MSG_FILED;
 800aef6:	4620      	mov	r0, r4
 800aef8:	e7f0      	b.n	800aedc <CanStartTransmission+0x10>
            res = CAN_TRANSMIT_MSG_FILED;
 800aefa:	2001      	movs	r0, #1
 800aefc:	e7ee      	b.n	800aedc <CanStartTransmission+0x10>
	...

0800af00 <CanCopyDataAndStartTransmission>:
		uint8_t   Data[8];           ///< Data

	} CAN_MSG_INFO;
	static CAN_MSG_INFO g_sendCANMsgInfo;

	ID = CanGetTxId(txHandle);
 800af00:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800af04:	4b1d      	ldr	r3, [pc, #116]	@ (800af7c <CanCopyDataAndStartTransmission+0x7c>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800af0c:	6841      	ldr	r1, [r0, #4]
	if(ID > 0x7FF)
 800af0e:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800af12:	d309      	bcc.n	800af28 <CanCopyDataAndStartTransmission+0x28>
	{
		g_sendCANMsgInfo.IDE = kCanIdTypeExt;
 800af14:	4a1a      	ldr	r2, [pc, #104]	@ (800af80 <CanCopyDataAndStartTransmission+0x80>)
 800af16:	78d3      	ldrb	r3, [r2, #3]
 800af18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af1c:	70d3      	strb	r3, [r2, #3]
	else
	{
		g_sendCANMsgInfo.IDE = kCanIdTypeStd;
	}

	if(CanGetDstData(txHandle) != NULL)
 800af1e:	68c3      	ldr	r3, [r0, #12]
 800af20:	b143      	cbz	r3, 800af34 <CanCopyDataAndStartTransmission+0x34>
{
 800af22:	b510      	push	{r4, lr}
	{
		//CanPackFunc(txHandle)(g_sendCANMsgInfo.Data,CanGetDstData(txHandle),CanGetMsgLen(txHandle));

		for(i=0; i<CanGetMsgLen(txHandle); i++)
 800af24:	2200      	movs	r2, #0
 800af26:	e010      	b.n	800af4a <CanCopyDataAndStartTransmission+0x4a>
		g_sendCANMsgInfo.IDE = kCanIdTypeStd;
 800af28:	4a15      	ldr	r2, [pc, #84]	@ (800af80 <CanCopyDataAndStartTransmission+0x80>)
 800af2a:	78d3      	ldrb	r3, [r2, #3]
 800af2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af30:	70d3      	strb	r3, [r2, #3]
 800af32:	e7f4      	b.n	800af1e <CanCopyDataAndStartTransmission+0x1e>

		return result;
	}
	else
	{
		return CAN_SEND_MSG_FILED;
 800af34:	2001      	movs	r0, #1
	}
}
 800af36:	4770      	bx	lr
			g_sendCANMsgInfo.Data[i] = CanGetDstData(txHandle)[i];
 800af38:	68c3      	ldr	r3, [r0, #12]
 800af3a:	f813 c002 	ldrb.w	ip, [r3, r2]
 800af3e:	4b10      	ldr	r3, [pc, #64]	@ (800af80 <CanCopyDataAndStartTransmission+0x80>)
 800af40:	4413      	add	r3, r2
 800af42:	f883 c005 	strb.w	ip, [r3, #5]
		for(i=0; i<CanGetMsgLen(txHandle); i++)
 800af46:	3201      	adds	r2, #1
 800af48:	b2d2      	uxtb	r2, r2
 800af4a:	7a03      	ldrb	r3, [r0, #8]
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d8f3      	bhi.n	800af38 <CanCopyDataAndStartTransmission+0x38>
		g_sendCANMsgInfo.ID = ID;
 800af50:	4a0b      	ldr	r2, [pc, #44]	@ (800af80 <CanCopyDataAndStartTransmission+0x80>)
 800af52:	6814      	ldr	r4, [r2, #0]
 800af54:	f361 041c 	bfi	r4, r1, #0, #29
 800af58:	6014      	str	r4, [r2, #0]
		g_sendCANMsgInfo.DLC =  CanGetMsgLen(txHandle);
 800af5a:	f892 c004 	ldrb.w	ip, [r2, #4]
 800af5e:	f363 0c03 	bfi	ip, r3, #0, #4
 800af62:	f882 c004 	strb.w	ip, [r2, #4]
		if(!CanStartTransmission(CanGetTxHwPort(txHandle), g_sendCANMsgInfo.ID, g_sendCANMsgInfo.Data, g_sendCANMsgInfo.DLC))
 800af66:	f003 030f 	and.w	r3, r3, #15
 800af6a:	3205      	adds	r2, #5
 800af6c:	f021 4160 	bic.w	r1, r1, #3758096384	@ 0xe0000000
 800af70:	7d80      	ldrb	r0, [r0, #22]
 800af72:	f7ff ffab 	bl	800aecc <CanStartTransmission>
 800af76:	b100      	cbz	r0, 800af7a <CanCopyDataAndStartTransmission+0x7a>
			result = CAN_SEND_MSG_FILED;
 800af78:	2001      	movs	r0, #1
}
 800af7a:	bd10      	pop	{r4, pc}
 800af7c:	2000b8c8 	.word	0x2000b8c8
 800af80:	2000b8b4 	.word	0x2000b8b4

0800af84 <CanDrvTransmit>:

static uint8_t CanDrvTransmit(uint16_t txHandle)
{
 800af84:	b510      	push	{r4, lr}
 800af86:	4604      	mov	r4, r0
	uint32_t result = CAN_OK1;
	static uint16_t idle = 0xFF;

	//CurTxHandleIndex = txHandle;
	result = CanCopyDataAndStartTransmission(txHandle);
 800af88:	f7ff ffba 	bl	800af00 <CanCopyDataAndStartTransmission>
	if ((idle != txHandle)&& (result != CAN_OK1))
	{
		//DebugMsg("Can Tx Failed! %s\r\n",__FUNCTION__);
	}

	idle = txHandle;
 800af8c:	4b05      	ldr	r3, [pc, #20]	@ (800afa4 <CanDrvTransmit+0x20>)
 800af8e:	801c      	strh	r4, [r3, #0]

	if (result == CAN_OK1)
 800af90:	b108      	cbz	r0, 800af96 <CanDrvTransmit+0x12>
    	CanDrv_HLTxConfirm(txHandle);
    	return CANTXOK;
	}
	else
	{
    	return CANTXFAILED;
 800af92:	2000      	movs	r0, #0
	}
}
 800af94:	bd10      	pop	{r4, pc}
    	idle = 0xFF;
 800af96:	22ff      	movs	r2, #255	@ 0xff
 800af98:	801a      	strh	r2, [r3, #0]
    	CanDrv_HLTxConfirm(txHandle);
 800af9a:	4620      	mov	r0, r4
 800af9c:	f7ff ff00 	bl	800ada0 <CanDrv_HLTxConfirm>
    	return CANTXOK;
 800afa0:	2001      	movs	r0, #1
 800afa2:	e7f7      	b.n	800af94 <CanDrvTransmit+0x10>
 800afa4:	2000b8c4 	.word	0x2000b8c4

0800afa8 <CanIl_SendMsg>:
{
 800afa8:	b538      	push	{r3, r4, r5, lr}
    ilTxState(ilTxHnd) &= iNotTxReq;
 800afaa:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
 800afae:	4d12      	ldr	r5, [pc, #72]	@ (800aff8 <CanIl_SendMsg+0x50>)
 800afb0:	682a      	ldr	r2, [r5, #0]
 800afb2:	4422      	add	r2, r4
 800afb4:	7891      	ldrb	r1, [r2, #2]
 800afb6:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800afba:	7091      	strb	r1, [r2, #2]
    ilTxUpdateCounter(ilTxHnd) = CanIl_GetTxUpdateCycles(ilTxHnd);
 800afbc:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 800afc0:	4a0e      	ldr	r2, [pc, #56]	@ (800affc <CanIl_SendMsg+0x54>)
 800afc2:	6812      	ldr	r2, [r2, #0]
 800afc4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800afc8:	682b      	ldr	r3, [r5, #0]
 800afca:	4423      	add	r3, r4
 800afcc:	7cd2      	ldrb	r2, [r2, #19]
 800afce:	705a      	strb	r2, [r3, #1]
    if (CanDrvTransmit( ilTxHnd) == CANTXFAILED)
 800afd0:	f7ff ffd8 	bl	800af84 <CanDrvTransmit>
 800afd4:	b950      	cbnz	r0, 800afec <CanIl_SendMsg+0x44>
        ilTxState(ilTxHnd) |= (iTxReqSend);
 800afd6:	682b      	ldr	r3, [r5, #0]
 800afd8:	4423      	add	r3, r4
 800afda:	789a      	ldrb	r2, [r3, #2]
 800afdc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800afe0:	709a      	strb	r2, [r3, #2]
        ilTxUpdateCounter(ilTxHnd) = 0;
 800afe2:	682b      	ldr	r3, [r5, #0]
 800afe4:	4423      	add	r3, r4
 800afe6:	2200      	movs	r2, #0
 800afe8:	705a      	strb	r2, [r3, #1]
}
 800afea:	bd38      	pop	{r3, r4, r5, pc}
    	ilTxConfirmationFlags(ilTxHnd)=0x01;
 800afec:	4b02      	ldr	r3, [pc, #8]	@ (800aff8 <CanIl_SendMsg+0x50>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2201      	movs	r2, #1
 800aff2:	551a      	strb	r2, [r3, r4]
}
 800aff4:	e7f9      	b.n	800afea <CanIl_SendMsg+0x42>
 800aff6:	bf00      	nop
 800aff8:	2000b8cc 	.word	0x2000b8cc
 800affc:	2000b8c8 	.word	0x2000b8c8

0800b000 <CanIl_TxTimerTask>:
{
 800b000:	b538      	push	{r3, r4, r5, lr}
	if (CanIl_Tx_Enabled()!=0)
 800b002:	4b72      	ldr	r3, [pc, #456]	@ (800b1cc <CanIl_TxTimerTask+0x1cc>)
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	f013 0f02 	tst.w	r3, #2
 800b00a:	f000 80de 	beq.w	800b1ca <CanIl_TxTimerTask+0x1ca>
		ilTxHnd = iBytesOfTxHandles;
 800b00e:	4b70      	ldr	r3, [pc, #448]	@ (800b1d0 <CanIl_TxTimerTask+0x1d0>)
 800b010:	781c      	ldrb	r4, [r3, #0]
 800b012:	e05b      	b.n	800b0cc <CanIl_TxTimerTask+0xcc>
					else if(ilTxEventCounter(ilTxHnd) < CanIl_GetCycEventTx_Interval_Time())
 800b014:	4560      	cmp	r0, ip
 800b016:	f080 80c4 	bcs.w	800b1a2 <CanIl_TxTimerTask+0x1a2>
						ilTxEventCounter(ilTxHnd) = CanIl_GetCycEventTx_Interval_Time();
 800b01a:	f882 c004 	strb.w	ip, [r2, #4]
						ilTxState(ilTxHnd) |= iTxReqSend;
 800b01e:	7890      	ldrb	r0, [r2, #2]
 800b020:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800b024:	7090      	strb	r0, [r2, #2]
						ilTxState(ilTxHnd) &=(~ iTxQuickStart);
 800b026:	4a6b      	ldr	r2, [pc, #428]	@ (800b1d4 <CanIl_TxTimerTask+0x1d4>)
 800b028:	6812      	ldr	r2, [r2, #0]
 800b02a:	441a      	add	r2, r3
 800b02c:	7890      	ldrb	r0, [r2, #2]
 800b02e:	f000 00ef 	and.w	r0, r0, #239	@ 0xef
 800b032:	7090      	strb	r0, [r2, #2]
				if ((ilTxEventCounter(ilTxHnd)==0)||((ilTxState(ilTxHnd) & iTxReqSend)!=0))
 800b034:	4a67      	ldr	r2, [pc, #412]	@ (800b1d4 <CanIl_TxTimerTask+0x1d4>)
 800b036:	6812      	ldr	r2, [r2, #0]
 800b038:	441a      	add	r2, r3
 800b03a:	7910      	ldrb	r0, [r2, #4]
 800b03c:	b118      	cbz	r0, 800b046 <CanIl_TxTimerTask+0x46>
 800b03e:	7890      	ldrb	r0, [r2, #2]
 800b040:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800b044:	d016      	beq.n	800b074 <CanIl_TxTimerTask+0x74>
					if((ilTxState(ilTxHnd) & iTxCycEveSend)!=0)
 800b046:	7890      	ldrb	r0, [r2, #2]
 800b048:	f010 0f02 	tst.w	r0, #2
 800b04c:	d00a      	beq.n	800b064 <CanIl_TxTimerTask+0x64>
						ilTxState(ilTxHnd) &=(~ iTxQuickStart);
 800b04e:	7890      	ldrb	r0, [r2, #2]
 800b050:	f000 00ef 	and.w	r0, r0, #239	@ 0xef
 800b054:	7090      	strb	r0, [r2, #2]
						ilTxState(ilTxHnd) |= iTxReqSend;
 800b056:	4a5f      	ldr	r2, [pc, #380]	@ (800b1d4 <CanIl_TxTimerTask+0x1d4>)
 800b058:	6812      	ldr	r2, [r2, #0]
 800b05a:	441a      	add	r2, r3
 800b05c:	7890      	ldrb	r0, [r2, #2]
 800b05e:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800b062:	7090      	strb	r0, [r2, #2]
					ilTxEventCounter(ilTxHnd) = CanIl_GetTxEventCycles(ilTxHnd);
 800b064:	4a5c      	ldr	r2, [pc, #368]	@ (800b1d8 <CanIl_TxTimerTask+0x1d8>)
 800b066:	6810      	ldr	r0, [r2, #0]
 800b068:	4408      	add	r0, r1
 800b06a:	4a5a      	ldr	r2, [pc, #360]	@ (800b1d4 <CanIl_TxTimerTask+0x1d4>)
 800b06c:	6812      	ldr	r2, [r2, #0]
 800b06e:	441a      	add	r2, r3
 800b070:	7d40      	ldrb	r0, [r0, #21]
 800b072:	7110      	strb	r0, [r2, #4]
			if (((ilTxState(ilTxHnd) & (iTxEveSend ))!=0) && ((ilTxState(ilTxHnd) & (iTxQuickStart ))!=0))
 800b074:	4a57      	ldr	r2, [pc, #348]	@ (800b1d4 <CanIl_TxTimerTask+0x1d4>)
 800b076:	6812      	ldr	r2, [r2, #0]
 800b078:	441a      	add	r2, r3
 800b07a:	7890      	ldrb	r0, [r2, #2]
 800b07c:	f010 0f04 	tst.w	r0, #4
 800b080:	d01b      	beq.n	800b0ba <CanIl_TxTimerTask+0xba>
 800b082:	7890      	ldrb	r0, [r2, #2]
 800b084:	f010 0f10 	tst.w	r0, #16
 800b088:	d017      	beq.n	800b0ba <CanIl_TxTimerTask+0xba>
				if (ilTxEventCounter(ilTxHnd)!=0)
 800b08a:	7910      	ldrb	r0, [r2, #4]
 800b08c:	b108      	cbz	r0, 800b092 <CanIl_TxTimerTask+0x92>
					ilTxEventCounter(ilTxHnd)--;
 800b08e:	3801      	subs	r0, #1
 800b090:	7110      	strb	r0, [r2, #4]
				if (ilTxEventCounter(ilTxHnd)==0)
 800b092:	7910      	ldrb	r0, [r2, #4]
 800b094:	b988      	cbnz	r0, 800b0ba <CanIl_TxTimerTask+0xba>
					ilTxState(ilTxHnd) &=(~ iTxQuickStart);
 800b096:	7890      	ldrb	r0, [r2, #2]
 800b098:	f000 00ef 	and.w	r0, r0, #239	@ 0xef
 800b09c:	7090      	strb	r0, [r2, #2]
					ilTxState(ilTxHnd) |= iTxReqSend;
 800b09e:	4d4d      	ldr	r5, [pc, #308]	@ (800b1d4 <CanIl_TxTimerTask+0x1d4>)
 800b0a0:	682a      	ldr	r2, [r5, #0]
 800b0a2:	441a      	add	r2, r3
 800b0a4:	7890      	ldrb	r0, [r2, #2]
 800b0a6:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800b0aa:	7090      	strb	r0, [r2, #2]
					ilTxEventCounter(ilTxHnd) = CanIl_GetTxEventCycles(ilTxHnd);
 800b0ac:	4a4a      	ldr	r2, [pc, #296]	@ (800b1d8 <CanIl_TxTimerTask+0x1d8>)
 800b0ae:	6812      	ldr	r2, [r2, #0]
 800b0b0:	4411      	add	r1, r2
 800b0b2:	682a      	ldr	r2, [r5, #0]
 800b0b4:	441a      	add	r2, r3
 800b0b6:	7d49      	ldrb	r1, [r1, #21]
 800b0b8:	7111      	strb	r1, [r2, #4]
			if (((ilTxState(ilTxHnd) & iTxReqSend)!=0) && (ilTxUpdateCounter(ilTxHnd)==0) )
 800b0ba:	4a46      	ldr	r2, [pc, #280]	@ (800b1d4 <CanIl_TxTimerTask+0x1d4>)
 800b0bc:	6812      	ldr	r2, [r2, #0]
 800b0be:	4413      	add	r3, r2
 800b0c0:	789a      	ldrb	r2, [r3, #2]
 800b0c2:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800b0c6:	d179      	bne.n	800b1bc <CanIl_TxTimerTask+0x1bc>
		}while ( ilTxHnd != 0 );
 800b0c8:	2c00      	cmp	r4, #0
 800b0ca:	d07e      	beq.n	800b1ca <CanIl_TxTimerTask+0x1ca>
			ilTxHnd--;
 800b0cc:	3c01      	subs	r4, #1
 800b0ce:	b2a4      	uxth	r4, r4
			if(!(CanMsgAttributeSend & CanIl_GetTxAttribute(ilTxHnd)))
 800b0d0:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800b0d4:	0099      	lsls	r1, r3, #2
 800b0d6:	4b40      	ldr	r3, [pc, #256]	@ (800b1d8 <CanIl_TxTimerTask+0x1d8>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	440b      	add	r3, r1
 800b0dc:	7c1a      	ldrb	r2, [r3, #16]
 800b0de:	4b3f      	ldr	r3, [pc, #252]	@ (800b1dc <CanIl_TxTimerTask+0x1dc>)
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	421a      	tst	r2, r3
 800b0e4:	d0f0      	beq.n	800b0c8 <CanIl_TxTimerTask+0xc8>
			if ((ilTxUpdateCounter(ilTxHnd)!= (uint8_t)(iStopUpdateCntVal & 0x00FF)) && (ilTxUpdateCounter(ilTxHnd) > 0))
 800b0e6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b0ea:	4a3a      	ldr	r2, [pc, #232]	@ (800b1d4 <CanIl_TxTimerTask+0x1d4>)
 800b0ec:	6810      	ldr	r0, [r2, #0]
 800b0ee:	4418      	add	r0, r3
 800b0f0:	7842      	ldrb	r2, [r0, #1]
 800b0f2:	3a01      	subs	r2, #1
 800b0f4:	b2d2      	uxtb	r2, r2
 800b0f6:	2afd      	cmp	r2, #253	@ 0xfd
 800b0f8:	d800      	bhi.n	800b0fc <CanIl_TxTimerTask+0xfc>
				ilTxUpdateCounter(ilTxHnd)--;
 800b0fa:	7042      	strb	r2, [r0, #1]
			if ((ilTxState(ilTxHnd) & iTxCycSend)!=0)
 800b0fc:	4a35      	ldr	r2, [pc, #212]	@ (800b1d4 <CanIl_TxTimerTask+0x1d4>)
 800b0fe:	6812      	ldr	r2, [r2, #0]
 800b100:	441a      	add	r2, r3
 800b102:	7890      	ldrb	r0, [r2, #2]
 800b104:	f010 0f01 	tst.w	r0, #1
 800b108:	d01c      	beq.n	800b144 <CanIl_TxTimerTask+0x144>
				if (ilTxCyclicCounter(ilTxHnd)!=0)
 800b10a:	78d0      	ldrb	r0, [r2, #3]
 800b10c:	b108      	cbz	r0, 800b112 <CanIl_TxTimerTask+0x112>
					ilTxCyclicCounter(ilTxHnd)--;
 800b10e:	3801      	subs	r0, #1
 800b110:	70d0      	strb	r0, [r2, #3]
				if ((ilTxCyclicCounter(ilTxHnd)==0)||((ilTxState(ilTxHnd) & iTxReqSend)!=0))
 800b112:	4a30      	ldr	r2, [pc, #192]	@ (800b1d4 <CanIl_TxTimerTask+0x1d4>)
 800b114:	6812      	ldr	r2, [r2, #0]
 800b116:	441a      	add	r2, r3
 800b118:	78d0      	ldrb	r0, [r2, #3]
 800b11a:	b118      	cbz	r0, 800b124 <CanIl_TxTimerTask+0x124>
 800b11c:	7890      	ldrb	r0, [r2, #2]
 800b11e:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800b122:	d00f      	beq.n	800b144 <CanIl_TxTimerTask+0x144>
					ilTxCyclicCounter(ilTxHnd) = CanIl_GetTxCycCycles(ilTxHnd);
 800b124:	482c      	ldr	r0, [pc, #176]	@ (800b1d8 <CanIl_TxTimerTask+0x1d8>)
 800b126:	6800      	ldr	r0, [r0, #0]
 800b128:	4408      	add	r0, r1
 800b12a:	7d00      	ldrb	r0, [r0, #20]
 800b12c:	70d0      	strb	r0, [r2, #3]
					if ((ilTxState(ilTxHnd) & (iTxCycEveSend | iTxQuickStart))==0)
 800b12e:	4a29      	ldr	r2, [pc, #164]	@ (800b1d4 <CanIl_TxTimerTask+0x1d4>)
 800b130:	6812      	ldr	r2, [r2, #0]
 800b132:	441a      	add	r2, r3
 800b134:	7890      	ldrb	r0, [r2, #2]
 800b136:	f010 0f12 	tst.w	r0, #18
 800b13a:	d103      	bne.n	800b144 <CanIl_TxTimerTask+0x144>
						ilTxState(ilTxHnd) |= iTxReqSend;
 800b13c:	7890      	ldrb	r0, [r2, #2]
 800b13e:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800b142:	7090      	strb	r0, [r2, #2]
			if	((ilTxState(ilTxHnd) & (iTxCycEveSend | iTxQuickStart))!=0)
 800b144:	4a23      	ldr	r2, [pc, #140]	@ (800b1d4 <CanIl_TxTimerTask+0x1d4>)
 800b146:	6812      	ldr	r2, [r2, #0]
 800b148:	441a      	add	r2, r3
 800b14a:	7890      	ldrb	r0, [r2, #2]
 800b14c:	f010 0f12 	tst.w	r0, #18
 800b150:	d090      	beq.n	800b074 <CanIl_TxTimerTask+0x74>
				if (ilTxEventCounter(ilTxHnd)!=0) /*iTxCycEveSend*/
 800b152:	7910      	ldrb	r0, [r2, #4]
 800b154:	b108      	cbz	r0, 800b15a <CanIl_TxTimerTask+0x15a>
					ilTxEventCounter(ilTxHnd)--;
 800b156:	3801      	subs	r0, #1
 800b158:	7110      	strb	r0, [r2, #4]
				if(((ilTxState(ilTxHnd) & iTxQuickStart)!=0) && (ilTxEventCounter(ilTxHnd)>0))
 800b15a:	7890      	ldrb	r0, [r2, #2]
 800b15c:	f010 0f10 	tst.w	r0, #16
 800b160:	f43f af68 	beq.w	800b034 <CanIl_TxTimerTask+0x34>
 800b164:	7910      	ldrb	r0, [r2, #4]
 800b166:	2800      	cmp	r0, #0
 800b168:	f43f af64 	beq.w	800b034 <CanIl_TxTimerTask+0x34>
					if((ilTxEventCounter(ilTxHnd) >= CanIl_GetCycEventTx_Interval_Time())&&((CanIl_GetTxEventCycles(ilTxHnd)-ilTxEventCounter(ilTxHnd)) >= CanIl_GetCycEventTx_Interval_Time()))
 800b16c:	4d1c      	ldr	r5, [pc, #112]	@ (800b1e0 <CanIl_TxTimerTask+0x1e0>)
 800b16e:	682d      	ldr	r5, [r5, #0]
 800b170:	f895 c002 	ldrb.w	ip, [r5, #2]
 800b174:	4560      	cmp	r0, ip
 800b176:	f4ff af4d 	bcc.w	800b014 <CanIl_TxTimerTask+0x14>
 800b17a:	4d17      	ldr	r5, [pc, #92]	@ (800b1d8 <CanIl_TxTimerTask+0x1d8>)
 800b17c:	682d      	ldr	r5, [r5, #0]
 800b17e:	440d      	add	r5, r1
 800b180:	7d6d      	ldrb	r5, [r5, #21]
 800b182:	1a2d      	subs	r5, r5, r0
 800b184:	4565      	cmp	r5, ip
 800b186:	f6ff af45 	blt.w	800b014 <CanIl_TxTimerTask+0x14>
						ilTxState(ilTxHnd) |= iTxReqSend;
 800b18a:	7890      	ldrb	r0, [r2, #2]
 800b18c:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800b190:	7090      	strb	r0, [r2, #2]
						ilTxState(ilTxHnd) &=(~ iTxQuickStart);
 800b192:	4a10      	ldr	r2, [pc, #64]	@ (800b1d4 <CanIl_TxTimerTask+0x1d4>)
 800b194:	6812      	ldr	r2, [r2, #0]
 800b196:	441a      	add	r2, r3
 800b198:	7890      	ldrb	r0, [r2, #2]
 800b19a:	f000 00ef 	and.w	r0, r0, #239	@ 0xef
 800b19e:	7090      	strb	r0, [r2, #2]
 800b1a0:	e748      	b.n	800b034 <CanIl_TxTimerTask+0x34>
					else if((CanIl_GetTxEventCycles(ilTxHnd)-ilTxEventCounter(ilTxHnd)) < CanIl_GetCycEventTx_Interval_Time())
 800b1a2:	4d0d      	ldr	r5, [pc, #52]	@ (800b1d8 <CanIl_TxTimerTask+0x1d8>)
 800b1a4:	682d      	ldr	r5, [r5, #0]
 800b1a6:	440d      	add	r5, r1
 800b1a8:	7d6d      	ldrb	r5, [r5, #21]
 800b1aa:	1a28      	subs	r0, r5, r0
 800b1ac:	4560      	cmp	r0, ip
 800b1ae:	f6bf af41 	bge.w	800b034 <CanIl_TxTimerTask+0x34>
						ilTxState(ilTxHnd) |= iTxQuickStart;
 800b1b2:	7890      	ldrb	r0, [r2, #2]
 800b1b4:	f040 0010 	orr.w	r0, r0, #16
 800b1b8:	7090      	strb	r0, [r2, #2]
 800b1ba:	e73b      	b.n	800b034 <CanIl_TxTimerTask+0x34>
			if (((ilTxState(ilTxHnd) & iTxReqSend)!=0) && (ilTxUpdateCounter(ilTxHnd)==0) )
 800b1bc:	785b      	ldrb	r3, [r3, #1]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d182      	bne.n	800b0c8 <CanIl_TxTimerTask+0xc8>
				CanIl_SendMsg(ilTxHnd);
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	f7ff fef0 	bl	800afa8 <CanIl_SendMsg>
 800b1c8:	e77e      	b.n	800b0c8 <CanIl_TxTimerTask+0xc8>
}
 800b1ca:	bd38      	pop	{r3, r4, r5, pc}
 800b1cc:	2000b8c6 	.word	0x2000b8c6
 800b1d0:	2000b8c7 	.word	0x2000b8c7
 800b1d4:	2000b8cc 	.word	0x2000b8cc
 800b1d8:	2000b8c8 	.word	0x2000b8c8
 800b1dc:	2000808c 	.word	0x2000808c
 800b1e0:	20008090 	.word	0x20008090

0800b1e4 <CanIl_TxTask>:
{
 800b1e4:	b508      	push	{r3, lr}
	CanIl_TxStateTask();
 800b1e6:	f7ff fd53 	bl	800ac90 <CanIl_TxStateTask>
	CanIl_TxTimerTask();
 800b1ea:	f7ff ff09 	bl	800b000 <CanIl_TxTimerTask>
	CanIl_EventMsgCycTxPro();
 800b1ee:	f7ff fd99 	bl	800ad24 <CanIl_EventMsgCycTxPro>
}
 800b1f2:	bd08      	pop	{r3, pc}

0800b1f4 <UserTimer_CreateDefault>:
*  Parameter   : UserTimer_ID : the No. of the timer defined in enum TIMER_IDS
*  Returns     : void
***********************************************************************/
void UserTimer_CreateDefault(UserTimer_ID_t Timer_ID)
{
	if(Timer_ID < TIMER_MAX) {
 800b1f4:	b9a0      	cbnz	r0, 800b220 <UserTimer_CreateDefault+0x2c>
{
 800b1f6:	b410      	push	{r4}
		UserTimer_Status[Timer_ID].Counter = UserTimer_Table[Timer_ID].Period;
 800b1f8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800b1fc:	4909      	ldr	r1, [pc, #36]	@ (800b224 <UserTimer_CreateDefault+0x30>)
 800b1fe:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b202:	684c      	ldr	r4, [r1, #4]
 800b204:	4a08      	ldr	r2, [pc, #32]	@ (800b228 <UserTimer_CreateDefault+0x34>)
 800b206:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 800b20a:	eb02 008c 	add.w	r0, r2, ip, lsl #2
 800b20e:	f842 402c 	str.w	r4, [r2, ip, lsl #2]
		UserTimer_Status[Timer_ID].Counter_Backup = UserTimer_Table[Timer_ID].Period;
 800b212:	6044      	str	r4, [r0, #4]
		UserTimer_Status[Timer_ID].Type = UserTimer_Table[Timer_ID].Type;
 800b214:	7a09      	ldrb	r1, [r1, #8]
 800b216:	7201      	strb	r1, [r0, #8]
		UserTimer_Status[Timer_ID].IsActive = 1;
 800b218:	2301      	movs	r3, #1
 800b21a:	7243      	strb	r3, [r0, #9]
	}
}
 800b21c:	bc10      	pop	{r4}
 800b21e:	4770      	bx	lr
 800b220:	4770      	bx	lr
 800b222:	bf00      	nop
 800b224:	0801157c 	.word	0x0801157c
 800b228:	2000b8d4 	.word	0x2000b8d4

0800b22c <UserTimer_Initial>:
{
 800b22c:	b510      	push	{r4, lr}
	for(i = 0x00; i < (uint8_t)TIMER_MAX; i++) {
 800b22e:	2400      	movs	r4, #0
 800b230:	b11c      	cbz	r4, 800b23a <UserTimer_Initial+0xe>
	UserTimer_TickCounter = 0;
 800b232:	4b0f      	ldr	r3, [pc, #60]	@ (800b270 <UserTimer_Initial+0x44>)
 800b234:	2200      	movs	r2, #0
 800b236:	601a      	str	r2, [r3, #0]
}
 800b238:	bd10      	pop	{r4, pc}
		UserTimer_Status[i].Counter = 0;
 800b23a:	480e      	ldr	r0, [pc, #56]	@ (800b274 <UserTimer_Initial+0x48>)
 800b23c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b240:	0099      	lsls	r1, r3, #2
 800b242:	1843      	adds	r3, r0, r1
 800b244:	2200      	movs	r2, #0
 800b246:	5042      	str	r2, [r0, r1]
		UserTimer_Status[i].Counter_Backup = 0;
 800b248:	605a      	str	r2, [r3, #4]
		UserTimer_Status[i].Type = E_UT_TYPE_ONE_SHOT;
 800b24a:	2101      	movs	r1, #1
 800b24c:	7219      	strb	r1, [r3, #8]
		UserTimer_Status[i].IsActive = 0;
 800b24e:	725a      	strb	r2, [r3, #9]
		if (UserTimer_Table[i].DefaultState == DEFAULT_START) {
 800b250:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b254:	009a      	lsls	r2, r3, #2
 800b256:	4b08      	ldr	r3, [pc, #32]	@ (800b278 <UserTimer_Initial+0x4c>)
 800b258:	4413      	add	r3, r2
 800b25a:	7a5b      	ldrb	r3, [r3, #9]
 800b25c:	428b      	cmp	r3, r1
 800b25e:	d002      	beq.n	800b266 <UserTimer_Initial+0x3a>
	for(i = 0x00; i < (uint8_t)TIMER_MAX; i++) {
 800b260:	3401      	adds	r4, #1
 800b262:	b2e4      	uxtb	r4, r4
 800b264:	e7e4      	b.n	800b230 <UserTimer_Initial+0x4>
			UserTimer_CreateDefault((UserTimer_ID_t)i);
 800b266:	4620      	mov	r0, r4
 800b268:	f7ff ffc4 	bl	800b1f4 <UserTimer_CreateDefault>
 800b26c:	e7f8      	b.n	800b260 <UserTimer_Initial+0x34>
 800b26e:	bf00      	nop
 800b270:	2000b8d0 	.word	0x2000b8d0
 800b274:	2000b8d4 	.word	0x2000b8d4
 800b278:	0801157c 	.word	0x0801157c

0800b27c <UserTimer_Handler>:
*  Description : run in main(), it will call function if timeout
*  Parameter   : void
*  Returns     : void
***********************************************************************/
void UserTimer_Handler(void)
{
 800b27c:	b510      	push	{r4, lr}
	uint8_t i;

	for(i = 0x00; i < (uint8_t)TIMER_MAX; i++) {
 800b27e:	2400      	movs	r4, #0
 800b280:	b104      	cbz	r4, 800b284 <UserTimer_Handler+0x8>

            UserTimer_Table[i].TimeoutFunc();
            
		}
	}
}
 800b282:	bd10      	pop	{r4, pc}
		if((UserTimer_Status[i].IsActive) && (UserTimer_Status[i].Counter == 0u)) {
 800b284:	4622      	mov	r2, r4
 800b286:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b28a:	0099      	lsls	r1, r3, #2
 800b28c:	4b15      	ldr	r3, [pc, #84]	@ (800b2e4 <UserTimer_Handler+0x68>)
 800b28e:	440b      	add	r3, r1
 800b290:	7a5b      	ldrb	r3, [r3, #9]
 800b292:	b1cb      	cbz	r3, 800b2c8 <UserTimer_Handler+0x4c>
 800b294:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800b298:	008b      	lsls	r3, r1, #2
 800b29a:	4912      	ldr	r1, [pc, #72]	@ (800b2e4 <UserTimer_Handler+0x68>)
 800b29c:	58cb      	ldr	r3, [r1, r3]
 800b29e:	b99b      	cbnz	r3, 800b2c8 <UserTimer_Handler+0x4c>
            if(UserTimer_Status[i].Type == E_UT_TYPE_PERIODIC) {
 800b2a0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b2a4:	0099      	lsls	r1, r3, #2
 800b2a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b2e4 <UserTimer_Handler+0x68>)
 800b2a8:	440b      	add	r3, r1
 800b2aa:	7a1b      	ldrb	r3, [r3, #8]
 800b2ac:	b97b      	cbnz	r3, 800b2ce <UserTimer_Handler+0x52>
                UserTimer_Status[i].Counter = UserTimer_Status[i].Counter_Backup;
 800b2ae:	490d      	ldr	r1, [pc, #52]	@ (800b2e4 <UserTimer_Handler+0x68>)
 800b2b0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800b2b4:	0083      	lsls	r3, r0, #2
 800b2b6:	18c8      	adds	r0, r1, r3
 800b2b8:	6840      	ldr	r0, [r0, #4]
 800b2ba:	50c8      	str	r0, [r1, r3]
            UserTimer_Table[i].TimeoutFunc();
 800b2bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b2c0:	0093      	lsls	r3, r2, #2
 800b2c2:	4a09      	ldr	r2, [pc, #36]	@ (800b2e8 <UserTimer_Handler+0x6c>)
 800b2c4:	58d3      	ldr	r3, [r2, r3]
 800b2c6:	4798      	blx	r3
	for(i = 0x00; i < (uint8_t)TIMER_MAX; i++) {
 800b2c8:	3401      	adds	r4, #1
 800b2ca:	b2e4      	uxtb	r4, r4
 800b2cc:	e7d8      	b.n	800b280 <UserTimer_Handler+0x4>
                UserTimer_Status[i].Counter = 0;
 800b2ce:	4805      	ldr	r0, [pc, #20]	@ (800b2e4 <UserTimer_Handler+0x68>)
 800b2d0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800b2d4:	008b      	lsls	r3, r1, #2
 800b2d6:	eb00 0c03 	add.w	ip, r0, r3
 800b2da:	2100      	movs	r1, #0
 800b2dc:	50c1      	str	r1, [r0, r3]
                UserTimer_Status[i].IsActive = 0;
 800b2de:	f88c 1009 	strb.w	r1, [ip, #9]
 800b2e2:	e7eb      	b.n	800b2bc <UserTimer_Handler+0x40>
 800b2e4:	2000b8d4 	.word	0x2000b8d4
 800b2e8:	0801157c 	.word	0x0801157c

0800b2ec <UserTimer_SetPeriod>:
	return (uint32_t)(UserTimer_Status[Timer_ID].Counter_Backup);
}

int UserTimer_SetPeriod(UserTimer_ID_t Timer_ID, uint16_t Period)
{
    if (Timer_ID >= TIMER_MAX) return -1;
 800b2ec:	b928      	cbnz	r0, 800b2fa <UserTimer_SetPeriod+0xe>

    UserTimer_Status[Timer_ID].Counter = Period;
 800b2ee:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800b2f2:	4a03      	ldr	r2, [pc, #12]	@ (800b300 <UserTimer_SetPeriod+0x14>)
 800b2f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return 0;
 800b2f8:	4770      	bx	lr
    if (Timer_ID >= TIMER_MAX) return -1;
 800b2fa:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b2fe:	4770      	bx	lr
 800b300:	2000b8d4 	.word	0x2000b8d4

0800b304 <LedHeart_Tick_1000ms_TimeoutFunc>:

/* create timer 2 if timer 1 timeout */
uint8_t cnt = 0,i = 0;
uint16_t heartled_delaytime[] = {1000, 200, 200, 200, 200, 2000 };
void LedHeart_Tick_1000ms_TimeoutFunc(void)
{
 800b304:	b538      	push	{r3, r4, r5, lr}
    UserTimer_SetPeriod(E_TIMER_LED_HEART,heartled_delaytime[i++]);
 800b306:	4c0f      	ldr	r4, [pc, #60]	@ (800b344 <LedHeart_Tick_1000ms_TimeoutFunc+0x40>)
 800b308:	7823      	ldrb	r3, [r4, #0]
 800b30a:	1c5a      	adds	r2, r3, #1
 800b30c:	7022      	strb	r2, [r4, #0]
 800b30e:	4a0e      	ldr	r2, [pc, #56]	@ (800b348 <LedHeart_Tick_1000ms_TimeoutFunc+0x44>)
 800b310:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800b314:	2000      	movs	r0, #0
 800b316:	f7ff ffe9 	bl	800b2ec <UserTimer_SetPeriod>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, (GPIO_PinState)!cnt);
 800b31a:	4d0c      	ldr	r5, [pc, #48]	@ (800b34c <LedHeart_Tick_1000ms_TimeoutFunc+0x48>)
 800b31c:	782a      	ldrb	r2, [r5, #0]
 800b31e:	fab2 f282 	clz	r2, r2
 800b322:	0952      	lsrs	r2, r2, #5
 800b324:	2108      	movs	r1, #8
 800b326:	480a      	ldr	r0, [pc, #40]	@ (800b350 <LedHeart_Tick_1000ms_TimeoutFunc+0x4c>)
 800b328:	f7fd fb08 	bl	800893c <HAL_GPIO_WritePin>
    cnt = !cnt;
 800b32c:	782b      	ldrb	r3, [r5, #0]
 800b32e:	fab3 f383 	clz	r3, r3
 800b332:	095b      	lsrs	r3, r3, #5
 800b334:	702b      	strb	r3, [r5, #0]
    if(i> sizeof(heartled_delaytime)/sizeof(uint16_t))
 800b336:	7823      	ldrb	r3, [r4, #0]
 800b338:	2b06      	cmp	r3, #6
 800b33a:	d902      	bls.n	800b342 <LedHeart_Tick_1000ms_TimeoutFunc+0x3e>
    {
        i = 0;
 800b33c:	2300      	movs	r3, #0
 800b33e:	7023      	strb	r3, [r4, #0]
        cnt = 0;
 800b340:	702b      	strb	r3, [r5, #0]
    }
}
 800b342:	bd38      	pop	{r3, r4, r5, pc}
 800b344:	2000b8e0 	.word	0x2000b8e0
 800b348:	20008094 	.word	0x20008094
 800b34c:	2000b8e1 	.word	0x2000b8e1
 800b350:	40011000 	.word	0x40011000

0800b354 <__cvt>:
 800b354:	2b00      	cmp	r3, #0
 800b356:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b35a:	461d      	mov	r5, r3
 800b35c:	bfbb      	ittet	lt
 800b35e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800b362:	461d      	movlt	r5, r3
 800b364:	2300      	movge	r3, #0
 800b366:	232d      	movlt	r3, #45	@ 0x2d
 800b368:	b088      	sub	sp, #32
 800b36a:	4614      	mov	r4, r2
 800b36c:	bfb8      	it	lt
 800b36e:	4614      	movlt	r4, r2
 800b370:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b372:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b374:	7013      	strb	r3, [r2, #0]
 800b376:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b378:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b37c:	f023 0820 	bic.w	r8, r3, #32
 800b380:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b384:	d005      	beq.n	800b392 <__cvt+0x3e>
 800b386:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b38a:	d100      	bne.n	800b38e <__cvt+0x3a>
 800b38c:	3601      	adds	r6, #1
 800b38e:	2302      	movs	r3, #2
 800b390:	e000      	b.n	800b394 <__cvt+0x40>
 800b392:	2303      	movs	r3, #3
 800b394:	aa07      	add	r2, sp, #28
 800b396:	9204      	str	r2, [sp, #16]
 800b398:	aa06      	add	r2, sp, #24
 800b39a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b39e:	e9cd 3600 	strd	r3, r6, [sp]
 800b3a2:	4622      	mov	r2, r4
 800b3a4:	462b      	mov	r3, r5
 800b3a6:	f001 f97b 	bl	800c6a0 <_dtoa_r>
 800b3aa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b3ae:	4607      	mov	r7, r0
 800b3b0:	d119      	bne.n	800b3e6 <__cvt+0x92>
 800b3b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b3b4:	07db      	lsls	r3, r3, #31
 800b3b6:	d50e      	bpl.n	800b3d6 <__cvt+0x82>
 800b3b8:	eb00 0906 	add.w	r9, r0, r6
 800b3bc:	2200      	movs	r2, #0
 800b3be:	2300      	movs	r3, #0
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	f7f5 fb60 	bl	8000a88 <__aeabi_dcmpeq>
 800b3c8:	b108      	cbz	r0, 800b3ce <__cvt+0x7a>
 800b3ca:	f8cd 901c 	str.w	r9, [sp, #28]
 800b3ce:	2230      	movs	r2, #48	@ 0x30
 800b3d0:	9b07      	ldr	r3, [sp, #28]
 800b3d2:	454b      	cmp	r3, r9
 800b3d4:	d31e      	bcc.n	800b414 <__cvt+0xc0>
 800b3d6:	4638      	mov	r0, r7
 800b3d8:	9b07      	ldr	r3, [sp, #28]
 800b3da:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b3dc:	1bdb      	subs	r3, r3, r7
 800b3de:	6013      	str	r3, [r2, #0]
 800b3e0:	b008      	add	sp, #32
 800b3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3e6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b3ea:	eb00 0906 	add.w	r9, r0, r6
 800b3ee:	d1e5      	bne.n	800b3bc <__cvt+0x68>
 800b3f0:	7803      	ldrb	r3, [r0, #0]
 800b3f2:	2b30      	cmp	r3, #48	@ 0x30
 800b3f4:	d10a      	bne.n	800b40c <__cvt+0xb8>
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	4629      	mov	r1, r5
 800b3fe:	f7f5 fb43 	bl	8000a88 <__aeabi_dcmpeq>
 800b402:	b918      	cbnz	r0, 800b40c <__cvt+0xb8>
 800b404:	f1c6 0601 	rsb	r6, r6, #1
 800b408:	f8ca 6000 	str.w	r6, [sl]
 800b40c:	f8da 3000 	ldr.w	r3, [sl]
 800b410:	4499      	add	r9, r3
 800b412:	e7d3      	b.n	800b3bc <__cvt+0x68>
 800b414:	1c59      	adds	r1, r3, #1
 800b416:	9107      	str	r1, [sp, #28]
 800b418:	701a      	strb	r2, [r3, #0]
 800b41a:	e7d9      	b.n	800b3d0 <__cvt+0x7c>

0800b41c <__exponent>:
 800b41c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b41e:	2900      	cmp	r1, #0
 800b420:	bfb6      	itet	lt
 800b422:	232d      	movlt	r3, #45	@ 0x2d
 800b424:	232b      	movge	r3, #43	@ 0x2b
 800b426:	4249      	neglt	r1, r1
 800b428:	2909      	cmp	r1, #9
 800b42a:	7002      	strb	r2, [r0, #0]
 800b42c:	7043      	strb	r3, [r0, #1]
 800b42e:	dd29      	ble.n	800b484 <__exponent+0x68>
 800b430:	f10d 0307 	add.w	r3, sp, #7
 800b434:	461d      	mov	r5, r3
 800b436:	270a      	movs	r7, #10
 800b438:	fbb1 f6f7 	udiv	r6, r1, r7
 800b43c:	461a      	mov	r2, r3
 800b43e:	fb07 1416 	mls	r4, r7, r6, r1
 800b442:	3430      	adds	r4, #48	@ 0x30
 800b444:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b448:	460c      	mov	r4, r1
 800b44a:	2c63      	cmp	r4, #99	@ 0x63
 800b44c:	4631      	mov	r1, r6
 800b44e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b452:	dcf1      	bgt.n	800b438 <__exponent+0x1c>
 800b454:	3130      	adds	r1, #48	@ 0x30
 800b456:	1e94      	subs	r4, r2, #2
 800b458:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b45c:	4623      	mov	r3, r4
 800b45e:	1c41      	adds	r1, r0, #1
 800b460:	42ab      	cmp	r3, r5
 800b462:	d30a      	bcc.n	800b47a <__exponent+0x5e>
 800b464:	f10d 0309 	add.w	r3, sp, #9
 800b468:	1a9b      	subs	r3, r3, r2
 800b46a:	42ac      	cmp	r4, r5
 800b46c:	bf88      	it	hi
 800b46e:	2300      	movhi	r3, #0
 800b470:	3302      	adds	r3, #2
 800b472:	4403      	add	r3, r0
 800b474:	1a18      	subs	r0, r3, r0
 800b476:	b003      	add	sp, #12
 800b478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b47a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b47e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b482:	e7ed      	b.n	800b460 <__exponent+0x44>
 800b484:	2330      	movs	r3, #48	@ 0x30
 800b486:	3130      	adds	r1, #48	@ 0x30
 800b488:	7083      	strb	r3, [r0, #2]
 800b48a:	70c1      	strb	r1, [r0, #3]
 800b48c:	1d03      	adds	r3, r0, #4
 800b48e:	e7f1      	b.n	800b474 <__exponent+0x58>

0800b490 <_printf_float>:
 800b490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b494:	b091      	sub	sp, #68	@ 0x44
 800b496:	460c      	mov	r4, r1
 800b498:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b49c:	4616      	mov	r6, r2
 800b49e:	461f      	mov	r7, r3
 800b4a0:	4605      	mov	r5, r0
 800b4a2:	f000 ffdd 	bl	800c460 <_localeconv_r>
 800b4a6:	6803      	ldr	r3, [r0, #0]
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	9308      	str	r3, [sp, #32]
 800b4ac:	f7f4 fec0 	bl	8000230 <strlen>
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	930e      	str	r3, [sp, #56]	@ 0x38
 800b4b4:	f8d8 3000 	ldr.w	r3, [r8]
 800b4b8:	9009      	str	r0, [sp, #36]	@ 0x24
 800b4ba:	3307      	adds	r3, #7
 800b4bc:	f023 0307 	bic.w	r3, r3, #7
 800b4c0:	f103 0208 	add.w	r2, r3, #8
 800b4c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b4c8:	f8d4 b000 	ldr.w	fp, [r4]
 800b4cc:	f8c8 2000 	str.w	r2, [r8]
 800b4d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b4d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4da:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b4de:	f04f 32ff 	mov.w	r2, #4294967295
 800b4e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b4e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b4ea:	4b9c      	ldr	r3, [pc, #624]	@ (800b75c <_printf_float+0x2cc>)
 800b4ec:	f7f5 fafe 	bl	8000aec <__aeabi_dcmpun>
 800b4f0:	bb70      	cbnz	r0, 800b550 <_printf_float+0xc0>
 800b4f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b4f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4fa:	4b98      	ldr	r3, [pc, #608]	@ (800b75c <_printf_float+0x2cc>)
 800b4fc:	f7f5 fad8 	bl	8000ab0 <__aeabi_dcmple>
 800b500:	bb30      	cbnz	r0, 800b550 <_printf_float+0xc0>
 800b502:	2200      	movs	r2, #0
 800b504:	2300      	movs	r3, #0
 800b506:	4640      	mov	r0, r8
 800b508:	4649      	mov	r1, r9
 800b50a:	f7f5 fac7 	bl	8000a9c <__aeabi_dcmplt>
 800b50e:	b110      	cbz	r0, 800b516 <_printf_float+0x86>
 800b510:	232d      	movs	r3, #45	@ 0x2d
 800b512:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b516:	4a92      	ldr	r2, [pc, #584]	@ (800b760 <_printf_float+0x2d0>)
 800b518:	4b92      	ldr	r3, [pc, #584]	@ (800b764 <_printf_float+0x2d4>)
 800b51a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b51e:	bf8c      	ite	hi
 800b520:	4690      	movhi	r8, r2
 800b522:	4698      	movls	r8, r3
 800b524:	2303      	movs	r3, #3
 800b526:	f04f 0900 	mov.w	r9, #0
 800b52a:	6123      	str	r3, [r4, #16]
 800b52c:	f02b 0304 	bic.w	r3, fp, #4
 800b530:	6023      	str	r3, [r4, #0]
 800b532:	4633      	mov	r3, r6
 800b534:	4621      	mov	r1, r4
 800b536:	4628      	mov	r0, r5
 800b538:	9700      	str	r7, [sp, #0]
 800b53a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b53c:	f000 f9d4 	bl	800b8e8 <_printf_common>
 800b540:	3001      	adds	r0, #1
 800b542:	f040 8090 	bne.w	800b666 <_printf_float+0x1d6>
 800b546:	f04f 30ff 	mov.w	r0, #4294967295
 800b54a:	b011      	add	sp, #68	@ 0x44
 800b54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b550:	4642      	mov	r2, r8
 800b552:	464b      	mov	r3, r9
 800b554:	4640      	mov	r0, r8
 800b556:	4649      	mov	r1, r9
 800b558:	f7f5 fac8 	bl	8000aec <__aeabi_dcmpun>
 800b55c:	b148      	cbz	r0, 800b572 <_printf_float+0xe2>
 800b55e:	464b      	mov	r3, r9
 800b560:	2b00      	cmp	r3, #0
 800b562:	bfb8      	it	lt
 800b564:	232d      	movlt	r3, #45	@ 0x2d
 800b566:	4a80      	ldr	r2, [pc, #512]	@ (800b768 <_printf_float+0x2d8>)
 800b568:	bfb8      	it	lt
 800b56a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b56e:	4b7f      	ldr	r3, [pc, #508]	@ (800b76c <_printf_float+0x2dc>)
 800b570:	e7d3      	b.n	800b51a <_printf_float+0x8a>
 800b572:	6863      	ldr	r3, [r4, #4]
 800b574:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b578:	1c5a      	adds	r2, r3, #1
 800b57a:	d13f      	bne.n	800b5fc <_printf_float+0x16c>
 800b57c:	2306      	movs	r3, #6
 800b57e:	6063      	str	r3, [r4, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b586:	6023      	str	r3, [r4, #0]
 800b588:	9206      	str	r2, [sp, #24]
 800b58a:	aa0e      	add	r2, sp, #56	@ 0x38
 800b58c:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b590:	aa0d      	add	r2, sp, #52	@ 0x34
 800b592:	9203      	str	r2, [sp, #12]
 800b594:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b598:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b59c:	6863      	ldr	r3, [r4, #4]
 800b59e:	4642      	mov	r2, r8
 800b5a0:	9300      	str	r3, [sp, #0]
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	464b      	mov	r3, r9
 800b5a6:	910a      	str	r1, [sp, #40]	@ 0x28
 800b5a8:	f7ff fed4 	bl	800b354 <__cvt>
 800b5ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b5ae:	4680      	mov	r8, r0
 800b5b0:	2947      	cmp	r1, #71	@ 0x47
 800b5b2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b5b4:	d128      	bne.n	800b608 <_printf_float+0x178>
 800b5b6:	1cc8      	adds	r0, r1, #3
 800b5b8:	db02      	blt.n	800b5c0 <_printf_float+0x130>
 800b5ba:	6863      	ldr	r3, [r4, #4]
 800b5bc:	4299      	cmp	r1, r3
 800b5be:	dd40      	ble.n	800b642 <_printf_float+0x1b2>
 800b5c0:	f1aa 0a02 	sub.w	sl, sl, #2
 800b5c4:	fa5f fa8a 	uxtb.w	sl, sl
 800b5c8:	4652      	mov	r2, sl
 800b5ca:	3901      	subs	r1, #1
 800b5cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b5d0:	910d      	str	r1, [sp, #52]	@ 0x34
 800b5d2:	f7ff ff23 	bl	800b41c <__exponent>
 800b5d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5d8:	4681      	mov	r9, r0
 800b5da:	1813      	adds	r3, r2, r0
 800b5dc:	2a01      	cmp	r2, #1
 800b5de:	6123      	str	r3, [r4, #16]
 800b5e0:	dc02      	bgt.n	800b5e8 <_printf_float+0x158>
 800b5e2:	6822      	ldr	r2, [r4, #0]
 800b5e4:	07d2      	lsls	r2, r2, #31
 800b5e6:	d501      	bpl.n	800b5ec <_printf_float+0x15c>
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	6123      	str	r3, [r4, #16]
 800b5ec:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d09e      	beq.n	800b532 <_printf_float+0xa2>
 800b5f4:	232d      	movs	r3, #45	@ 0x2d
 800b5f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5fa:	e79a      	b.n	800b532 <_printf_float+0xa2>
 800b5fc:	2947      	cmp	r1, #71	@ 0x47
 800b5fe:	d1bf      	bne.n	800b580 <_printf_float+0xf0>
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1bd      	bne.n	800b580 <_printf_float+0xf0>
 800b604:	2301      	movs	r3, #1
 800b606:	e7ba      	b.n	800b57e <_printf_float+0xee>
 800b608:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b60c:	d9dc      	bls.n	800b5c8 <_printf_float+0x138>
 800b60e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b612:	d118      	bne.n	800b646 <_printf_float+0x1b6>
 800b614:	2900      	cmp	r1, #0
 800b616:	6863      	ldr	r3, [r4, #4]
 800b618:	dd0b      	ble.n	800b632 <_printf_float+0x1a2>
 800b61a:	6121      	str	r1, [r4, #16]
 800b61c:	b913      	cbnz	r3, 800b624 <_printf_float+0x194>
 800b61e:	6822      	ldr	r2, [r4, #0]
 800b620:	07d0      	lsls	r0, r2, #31
 800b622:	d502      	bpl.n	800b62a <_printf_float+0x19a>
 800b624:	3301      	adds	r3, #1
 800b626:	440b      	add	r3, r1
 800b628:	6123      	str	r3, [r4, #16]
 800b62a:	f04f 0900 	mov.w	r9, #0
 800b62e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b630:	e7dc      	b.n	800b5ec <_printf_float+0x15c>
 800b632:	b913      	cbnz	r3, 800b63a <_printf_float+0x1aa>
 800b634:	6822      	ldr	r2, [r4, #0]
 800b636:	07d2      	lsls	r2, r2, #31
 800b638:	d501      	bpl.n	800b63e <_printf_float+0x1ae>
 800b63a:	3302      	adds	r3, #2
 800b63c:	e7f4      	b.n	800b628 <_printf_float+0x198>
 800b63e:	2301      	movs	r3, #1
 800b640:	e7f2      	b.n	800b628 <_printf_float+0x198>
 800b642:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b646:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b648:	4299      	cmp	r1, r3
 800b64a:	db05      	blt.n	800b658 <_printf_float+0x1c8>
 800b64c:	6823      	ldr	r3, [r4, #0]
 800b64e:	6121      	str	r1, [r4, #16]
 800b650:	07d8      	lsls	r0, r3, #31
 800b652:	d5ea      	bpl.n	800b62a <_printf_float+0x19a>
 800b654:	1c4b      	adds	r3, r1, #1
 800b656:	e7e7      	b.n	800b628 <_printf_float+0x198>
 800b658:	2900      	cmp	r1, #0
 800b65a:	bfcc      	ite	gt
 800b65c:	2201      	movgt	r2, #1
 800b65e:	f1c1 0202 	rsble	r2, r1, #2
 800b662:	4413      	add	r3, r2
 800b664:	e7e0      	b.n	800b628 <_printf_float+0x198>
 800b666:	6823      	ldr	r3, [r4, #0]
 800b668:	055a      	lsls	r2, r3, #21
 800b66a:	d407      	bmi.n	800b67c <_printf_float+0x1ec>
 800b66c:	6923      	ldr	r3, [r4, #16]
 800b66e:	4642      	mov	r2, r8
 800b670:	4631      	mov	r1, r6
 800b672:	4628      	mov	r0, r5
 800b674:	47b8      	blx	r7
 800b676:	3001      	adds	r0, #1
 800b678:	d12b      	bne.n	800b6d2 <_printf_float+0x242>
 800b67a:	e764      	b.n	800b546 <_printf_float+0xb6>
 800b67c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b680:	f240 80dc 	bls.w	800b83c <_printf_float+0x3ac>
 800b684:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b688:	2200      	movs	r2, #0
 800b68a:	2300      	movs	r3, #0
 800b68c:	f7f5 f9fc 	bl	8000a88 <__aeabi_dcmpeq>
 800b690:	2800      	cmp	r0, #0
 800b692:	d033      	beq.n	800b6fc <_printf_float+0x26c>
 800b694:	2301      	movs	r3, #1
 800b696:	4631      	mov	r1, r6
 800b698:	4628      	mov	r0, r5
 800b69a:	4a35      	ldr	r2, [pc, #212]	@ (800b770 <_printf_float+0x2e0>)
 800b69c:	47b8      	blx	r7
 800b69e:	3001      	adds	r0, #1
 800b6a0:	f43f af51 	beq.w	800b546 <_printf_float+0xb6>
 800b6a4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b6a8:	4543      	cmp	r3, r8
 800b6aa:	db02      	blt.n	800b6b2 <_printf_float+0x222>
 800b6ac:	6823      	ldr	r3, [r4, #0]
 800b6ae:	07d8      	lsls	r0, r3, #31
 800b6b0:	d50f      	bpl.n	800b6d2 <_printf_float+0x242>
 800b6b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b6b6:	4631      	mov	r1, r6
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	47b8      	blx	r7
 800b6bc:	3001      	adds	r0, #1
 800b6be:	f43f af42 	beq.w	800b546 <_printf_float+0xb6>
 800b6c2:	f04f 0900 	mov.w	r9, #0
 800b6c6:	f108 38ff 	add.w	r8, r8, #4294967295
 800b6ca:	f104 0a1a 	add.w	sl, r4, #26
 800b6ce:	45c8      	cmp	r8, r9
 800b6d0:	dc09      	bgt.n	800b6e6 <_printf_float+0x256>
 800b6d2:	6823      	ldr	r3, [r4, #0]
 800b6d4:	079b      	lsls	r3, r3, #30
 800b6d6:	f100 8102 	bmi.w	800b8de <_printf_float+0x44e>
 800b6da:	68e0      	ldr	r0, [r4, #12]
 800b6dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6de:	4298      	cmp	r0, r3
 800b6e0:	bfb8      	it	lt
 800b6e2:	4618      	movlt	r0, r3
 800b6e4:	e731      	b.n	800b54a <_printf_float+0xba>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	4652      	mov	r2, sl
 800b6ea:	4631      	mov	r1, r6
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	47b8      	blx	r7
 800b6f0:	3001      	adds	r0, #1
 800b6f2:	f43f af28 	beq.w	800b546 <_printf_float+0xb6>
 800b6f6:	f109 0901 	add.w	r9, r9, #1
 800b6fa:	e7e8      	b.n	800b6ce <_printf_float+0x23e>
 800b6fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	dc38      	bgt.n	800b774 <_printf_float+0x2e4>
 800b702:	2301      	movs	r3, #1
 800b704:	4631      	mov	r1, r6
 800b706:	4628      	mov	r0, r5
 800b708:	4a19      	ldr	r2, [pc, #100]	@ (800b770 <_printf_float+0x2e0>)
 800b70a:	47b8      	blx	r7
 800b70c:	3001      	adds	r0, #1
 800b70e:	f43f af1a 	beq.w	800b546 <_printf_float+0xb6>
 800b712:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b716:	ea59 0303 	orrs.w	r3, r9, r3
 800b71a:	d102      	bne.n	800b722 <_printf_float+0x292>
 800b71c:	6823      	ldr	r3, [r4, #0]
 800b71e:	07d9      	lsls	r1, r3, #31
 800b720:	d5d7      	bpl.n	800b6d2 <_printf_float+0x242>
 800b722:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b726:	4631      	mov	r1, r6
 800b728:	4628      	mov	r0, r5
 800b72a:	47b8      	blx	r7
 800b72c:	3001      	adds	r0, #1
 800b72e:	f43f af0a 	beq.w	800b546 <_printf_float+0xb6>
 800b732:	f04f 0a00 	mov.w	sl, #0
 800b736:	f104 0b1a 	add.w	fp, r4, #26
 800b73a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b73c:	425b      	negs	r3, r3
 800b73e:	4553      	cmp	r3, sl
 800b740:	dc01      	bgt.n	800b746 <_printf_float+0x2b6>
 800b742:	464b      	mov	r3, r9
 800b744:	e793      	b.n	800b66e <_printf_float+0x1de>
 800b746:	2301      	movs	r3, #1
 800b748:	465a      	mov	r2, fp
 800b74a:	4631      	mov	r1, r6
 800b74c:	4628      	mov	r0, r5
 800b74e:	47b8      	blx	r7
 800b750:	3001      	adds	r0, #1
 800b752:	f43f aef8 	beq.w	800b546 <_printf_float+0xb6>
 800b756:	f10a 0a01 	add.w	sl, sl, #1
 800b75a:	e7ee      	b.n	800b73a <_printf_float+0x2aa>
 800b75c:	7fefffff 	.word	0x7fefffff
 800b760:	0801158c 	.word	0x0801158c
 800b764:	08011588 	.word	0x08011588
 800b768:	08011594 	.word	0x08011594
 800b76c:	08011590 	.word	0x08011590
 800b770:	08011598 	.word	0x08011598
 800b774:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b776:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b77a:	4553      	cmp	r3, sl
 800b77c:	bfa8      	it	ge
 800b77e:	4653      	movge	r3, sl
 800b780:	2b00      	cmp	r3, #0
 800b782:	4699      	mov	r9, r3
 800b784:	dc36      	bgt.n	800b7f4 <_printf_float+0x364>
 800b786:	f04f 0b00 	mov.w	fp, #0
 800b78a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b78e:	f104 021a 	add.w	r2, r4, #26
 800b792:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b794:	930a      	str	r3, [sp, #40]	@ 0x28
 800b796:	eba3 0309 	sub.w	r3, r3, r9
 800b79a:	455b      	cmp	r3, fp
 800b79c:	dc31      	bgt.n	800b802 <_printf_float+0x372>
 800b79e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7a0:	459a      	cmp	sl, r3
 800b7a2:	dc3a      	bgt.n	800b81a <_printf_float+0x38a>
 800b7a4:	6823      	ldr	r3, [r4, #0]
 800b7a6:	07da      	lsls	r2, r3, #31
 800b7a8:	d437      	bmi.n	800b81a <_printf_float+0x38a>
 800b7aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7ac:	ebaa 0903 	sub.w	r9, sl, r3
 800b7b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7b2:	ebaa 0303 	sub.w	r3, sl, r3
 800b7b6:	4599      	cmp	r9, r3
 800b7b8:	bfa8      	it	ge
 800b7ba:	4699      	movge	r9, r3
 800b7bc:	f1b9 0f00 	cmp.w	r9, #0
 800b7c0:	dc33      	bgt.n	800b82a <_printf_float+0x39a>
 800b7c2:	f04f 0800 	mov.w	r8, #0
 800b7c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7ca:	f104 0b1a 	add.w	fp, r4, #26
 800b7ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7d0:	ebaa 0303 	sub.w	r3, sl, r3
 800b7d4:	eba3 0309 	sub.w	r3, r3, r9
 800b7d8:	4543      	cmp	r3, r8
 800b7da:	f77f af7a 	ble.w	800b6d2 <_printf_float+0x242>
 800b7de:	2301      	movs	r3, #1
 800b7e0:	465a      	mov	r2, fp
 800b7e2:	4631      	mov	r1, r6
 800b7e4:	4628      	mov	r0, r5
 800b7e6:	47b8      	blx	r7
 800b7e8:	3001      	adds	r0, #1
 800b7ea:	f43f aeac 	beq.w	800b546 <_printf_float+0xb6>
 800b7ee:	f108 0801 	add.w	r8, r8, #1
 800b7f2:	e7ec      	b.n	800b7ce <_printf_float+0x33e>
 800b7f4:	4642      	mov	r2, r8
 800b7f6:	4631      	mov	r1, r6
 800b7f8:	4628      	mov	r0, r5
 800b7fa:	47b8      	blx	r7
 800b7fc:	3001      	adds	r0, #1
 800b7fe:	d1c2      	bne.n	800b786 <_printf_float+0x2f6>
 800b800:	e6a1      	b.n	800b546 <_printf_float+0xb6>
 800b802:	2301      	movs	r3, #1
 800b804:	4631      	mov	r1, r6
 800b806:	4628      	mov	r0, r5
 800b808:	920a      	str	r2, [sp, #40]	@ 0x28
 800b80a:	47b8      	blx	r7
 800b80c:	3001      	adds	r0, #1
 800b80e:	f43f ae9a 	beq.w	800b546 <_printf_float+0xb6>
 800b812:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b814:	f10b 0b01 	add.w	fp, fp, #1
 800b818:	e7bb      	b.n	800b792 <_printf_float+0x302>
 800b81a:	4631      	mov	r1, r6
 800b81c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b820:	4628      	mov	r0, r5
 800b822:	47b8      	blx	r7
 800b824:	3001      	adds	r0, #1
 800b826:	d1c0      	bne.n	800b7aa <_printf_float+0x31a>
 800b828:	e68d      	b.n	800b546 <_printf_float+0xb6>
 800b82a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b82c:	464b      	mov	r3, r9
 800b82e:	4631      	mov	r1, r6
 800b830:	4628      	mov	r0, r5
 800b832:	4442      	add	r2, r8
 800b834:	47b8      	blx	r7
 800b836:	3001      	adds	r0, #1
 800b838:	d1c3      	bne.n	800b7c2 <_printf_float+0x332>
 800b83a:	e684      	b.n	800b546 <_printf_float+0xb6>
 800b83c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b840:	f1ba 0f01 	cmp.w	sl, #1
 800b844:	dc01      	bgt.n	800b84a <_printf_float+0x3ba>
 800b846:	07db      	lsls	r3, r3, #31
 800b848:	d536      	bpl.n	800b8b8 <_printf_float+0x428>
 800b84a:	2301      	movs	r3, #1
 800b84c:	4642      	mov	r2, r8
 800b84e:	4631      	mov	r1, r6
 800b850:	4628      	mov	r0, r5
 800b852:	47b8      	blx	r7
 800b854:	3001      	adds	r0, #1
 800b856:	f43f ae76 	beq.w	800b546 <_printf_float+0xb6>
 800b85a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b85e:	4631      	mov	r1, r6
 800b860:	4628      	mov	r0, r5
 800b862:	47b8      	blx	r7
 800b864:	3001      	adds	r0, #1
 800b866:	f43f ae6e 	beq.w	800b546 <_printf_float+0xb6>
 800b86a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b86e:	2200      	movs	r2, #0
 800b870:	2300      	movs	r3, #0
 800b872:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b876:	f7f5 f907 	bl	8000a88 <__aeabi_dcmpeq>
 800b87a:	b9c0      	cbnz	r0, 800b8ae <_printf_float+0x41e>
 800b87c:	4653      	mov	r3, sl
 800b87e:	f108 0201 	add.w	r2, r8, #1
 800b882:	4631      	mov	r1, r6
 800b884:	4628      	mov	r0, r5
 800b886:	47b8      	blx	r7
 800b888:	3001      	adds	r0, #1
 800b88a:	d10c      	bne.n	800b8a6 <_printf_float+0x416>
 800b88c:	e65b      	b.n	800b546 <_printf_float+0xb6>
 800b88e:	2301      	movs	r3, #1
 800b890:	465a      	mov	r2, fp
 800b892:	4631      	mov	r1, r6
 800b894:	4628      	mov	r0, r5
 800b896:	47b8      	blx	r7
 800b898:	3001      	adds	r0, #1
 800b89a:	f43f ae54 	beq.w	800b546 <_printf_float+0xb6>
 800b89e:	f108 0801 	add.w	r8, r8, #1
 800b8a2:	45d0      	cmp	r8, sl
 800b8a4:	dbf3      	blt.n	800b88e <_printf_float+0x3fe>
 800b8a6:	464b      	mov	r3, r9
 800b8a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b8ac:	e6e0      	b.n	800b670 <_printf_float+0x1e0>
 800b8ae:	f04f 0800 	mov.w	r8, #0
 800b8b2:	f104 0b1a 	add.w	fp, r4, #26
 800b8b6:	e7f4      	b.n	800b8a2 <_printf_float+0x412>
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	4642      	mov	r2, r8
 800b8bc:	e7e1      	b.n	800b882 <_printf_float+0x3f2>
 800b8be:	2301      	movs	r3, #1
 800b8c0:	464a      	mov	r2, r9
 800b8c2:	4631      	mov	r1, r6
 800b8c4:	4628      	mov	r0, r5
 800b8c6:	47b8      	blx	r7
 800b8c8:	3001      	adds	r0, #1
 800b8ca:	f43f ae3c 	beq.w	800b546 <_printf_float+0xb6>
 800b8ce:	f108 0801 	add.w	r8, r8, #1
 800b8d2:	68e3      	ldr	r3, [r4, #12]
 800b8d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b8d6:	1a5b      	subs	r3, r3, r1
 800b8d8:	4543      	cmp	r3, r8
 800b8da:	dcf0      	bgt.n	800b8be <_printf_float+0x42e>
 800b8dc:	e6fd      	b.n	800b6da <_printf_float+0x24a>
 800b8de:	f04f 0800 	mov.w	r8, #0
 800b8e2:	f104 0919 	add.w	r9, r4, #25
 800b8e6:	e7f4      	b.n	800b8d2 <_printf_float+0x442>

0800b8e8 <_printf_common>:
 800b8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8ec:	4616      	mov	r6, r2
 800b8ee:	4698      	mov	r8, r3
 800b8f0:	688a      	ldr	r2, [r1, #8]
 800b8f2:	690b      	ldr	r3, [r1, #16]
 800b8f4:	4607      	mov	r7, r0
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	bfb8      	it	lt
 800b8fa:	4613      	movlt	r3, r2
 800b8fc:	6033      	str	r3, [r6, #0]
 800b8fe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b902:	460c      	mov	r4, r1
 800b904:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b908:	b10a      	cbz	r2, 800b90e <_printf_common+0x26>
 800b90a:	3301      	adds	r3, #1
 800b90c:	6033      	str	r3, [r6, #0]
 800b90e:	6823      	ldr	r3, [r4, #0]
 800b910:	0699      	lsls	r1, r3, #26
 800b912:	bf42      	ittt	mi
 800b914:	6833      	ldrmi	r3, [r6, #0]
 800b916:	3302      	addmi	r3, #2
 800b918:	6033      	strmi	r3, [r6, #0]
 800b91a:	6825      	ldr	r5, [r4, #0]
 800b91c:	f015 0506 	ands.w	r5, r5, #6
 800b920:	d106      	bne.n	800b930 <_printf_common+0x48>
 800b922:	f104 0a19 	add.w	sl, r4, #25
 800b926:	68e3      	ldr	r3, [r4, #12]
 800b928:	6832      	ldr	r2, [r6, #0]
 800b92a:	1a9b      	subs	r3, r3, r2
 800b92c:	42ab      	cmp	r3, r5
 800b92e:	dc2b      	bgt.n	800b988 <_printf_common+0xa0>
 800b930:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b934:	6822      	ldr	r2, [r4, #0]
 800b936:	3b00      	subs	r3, #0
 800b938:	bf18      	it	ne
 800b93a:	2301      	movne	r3, #1
 800b93c:	0692      	lsls	r2, r2, #26
 800b93e:	d430      	bmi.n	800b9a2 <_printf_common+0xba>
 800b940:	4641      	mov	r1, r8
 800b942:	4638      	mov	r0, r7
 800b944:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b948:	47c8      	blx	r9
 800b94a:	3001      	adds	r0, #1
 800b94c:	d023      	beq.n	800b996 <_printf_common+0xae>
 800b94e:	6823      	ldr	r3, [r4, #0]
 800b950:	6922      	ldr	r2, [r4, #16]
 800b952:	f003 0306 	and.w	r3, r3, #6
 800b956:	2b04      	cmp	r3, #4
 800b958:	bf14      	ite	ne
 800b95a:	2500      	movne	r5, #0
 800b95c:	6833      	ldreq	r3, [r6, #0]
 800b95e:	f04f 0600 	mov.w	r6, #0
 800b962:	bf08      	it	eq
 800b964:	68e5      	ldreq	r5, [r4, #12]
 800b966:	f104 041a 	add.w	r4, r4, #26
 800b96a:	bf08      	it	eq
 800b96c:	1aed      	subeq	r5, r5, r3
 800b96e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b972:	bf08      	it	eq
 800b974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b978:	4293      	cmp	r3, r2
 800b97a:	bfc4      	itt	gt
 800b97c:	1a9b      	subgt	r3, r3, r2
 800b97e:	18ed      	addgt	r5, r5, r3
 800b980:	42b5      	cmp	r5, r6
 800b982:	d11a      	bne.n	800b9ba <_printf_common+0xd2>
 800b984:	2000      	movs	r0, #0
 800b986:	e008      	b.n	800b99a <_printf_common+0xb2>
 800b988:	2301      	movs	r3, #1
 800b98a:	4652      	mov	r2, sl
 800b98c:	4641      	mov	r1, r8
 800b98e:	4638      	mov	r0, r7
 800b990:	47c8      	blx	r9
 800b992:	3001      	adds	r0, #1
 800b994:	d103      	bne.n	800b99e <_printf_common+0xb6>
 800b996:	f04f 30ff 	mov.w	r0, #4294967295
 800b99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b99e:	3501      	adds	r5, #1
 800b9a0:	e7c1      	b.n	800b926 <_printf_common+0x3e>
 800b9a2:	2030      	movs	r0, #48	@ 0x30
 800b9a4:	18e1      	adds	r1, r4, r3
 800b9a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b9aa:	1c5a      	adds	r2, r3, #1
 800b9ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b9b0:	4422      	add	r2, r4
 800b9b2:	3302      	adds	r3, #2
 800b9b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b9b8:	e7c2      	b.n	800b940 <_printf_common+0x58>
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	4622      	mov	r2, r4
 800b9be:	4641      	mov	r1, r8
 800b9c0:	4638      	mov	r0, r7
 800b9c2:	47c8      	blx	r9
 800b9c4:	3001      	adds	r0, #1
 800b9c6:	d0e6      	beq.n	800b996 <_printf_common+0xae>
 800b9c8:	3601      	adds	r6, #1
 800b9ca:	e7d9      	b.n	800b980 <_printf_common+0x98>

0800b9cc <_printf_i>:
 800b9cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d0:	7e0f      	ldrb	r7, [r1, #24]
 800b9d2:	4691      	mov	r9, r2
 800b9d4:	2f78      	cmp	r7, #120	@ 0x78
 800b9d6:	4680      	mov	r8, r0
 800b9d8:	460c      	mov	r4, r1
 800b9da:	469a      	mov	sl, r3
 800b9dc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b9de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b9e2:	d807      	bhi.n	800b9f4 <_printf_i+0x28>
 800b9e4:	2f62      	cmp	r7, #98	@ 0x62
 800b9e6:	d80a      	bhi.n	800b9fe <_printf_i+0x32>
 800b9e8:	2f00      	cmp	r7, #0
 800b9ea:	f000 80d1 	beq.w	800bb90 <_printf_i+0x1c4>
 800b9ee:	2f58      	cmp	r7, #88	@ 0x58
 800b9f0:	f000 80b8 	beq.w	800bb64 <_printf_i+0x198>
 800b9f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b9f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b9fc:	e03a      	b.n	800ba74 <_printf_i+0xa8>
 800b9fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba02:	2b15      	cmp	r3, #21
 800ba04:	d8f6      	bhi.n	800b9f4 <_printf_i+0x28>
 800ba06:	a101      	add	r1, pc, #4	@ (adr r1, 800ba0c <_printf_i+0x40>)
 800ba08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba0c:	0800ba65 	.word	0x0800ba65
 800ba10:	0800ba79 	.word	0x0800ba79
 800ba14:	0800b9f5 	.word	0x0800b9f5
 800ba18:	0800b9f5 	.word	0x0800b9f5
 800ba1c:	0800b9f5 	.word	0x0800b9f5
 800ba20:	0800b9f5 	.word	0x0800b9f5
 800ba24:	0800ba79 	.word	0x0800ba79
 800ba28:	0800b9f5 	.word	0x0800b9f5
 800ba2c:	0800b9f5 	.word	0x0800b9f5
 800ba30:	0800b9f5 	.word	0x0800b9f5
 800ba34:	0800b9f5 	.word	0x0800b9f5
 800ba38:	0800bb77 	.word	0x0800bb77
 800ba3c:	0800baa3 	.word	0x0800baa3
 800ba40:	0800bb31 	.word	0x0800bb31
 800ba44:	0800b9f5 	.word	0x0800b9f5
 800ba48:	0800b9f5 	.word	0x0800b9f5
 800ba4c:	0800bb99 	.word	0x0800bb99
 800ba50:	0800b9f5 	.word	0x0800b9f5
 800ba54:	0800baa3 	.word	0x0800baa3
 800ba58:	0800b9f5 	.word	0x0800b9f5
 800ba5c:	0800b9f5 	.word	0x0800b9f5
 800ba60:	0800bb39 	.word	0x0800bb39
 800ba64:	6833      	ldr	r3, [r6, #0]
 800ba66:	1d1a      	adds	r2, r3, #4
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	6032      	str	r2, [r6, #0]
 800ba6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ba74:	2301      	movs	r3, #1
 800ba76:	e09c      	b.n	800bbb2 <_printf_i+0x1e6>
 800ba78:	6833      	ldr	r3, [r6, #0]
 800ba7a:	6820      	ldr	r0, [r4, #0]
 800ba7c:	1d19      	adds	r1, r3, #4
 800ba7e:	6031      	str	r1, [r6, #0]
 800ba80:	0606      	lsls	r6, r0, #24
 800ba82:	d501      	bpl.n	800ba88 <_printf_i+0xbc>
 800ba84:	681d      	ldr	r5, [r3, #0]
 800ba86:	e003      	b.n	800ba90 <_printf_i+0xc4>
 800ba88:	0645      	lsls	r5, r0, #25
 800ba8a:	d5fb      	bpl.n	800ba84 <_printf_i+0xb8>
 800ba8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ba90:	2d00      	cmp	r5, #0
 800ba92:	da03      	bge.n	800ba9c <_printf_i+0xd0>
 800ba94:	232d      	movs	r3, #45	@ 0x2d
 800ba96:	426d      	negs	r5, r5
 800ba98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba9c:	230a      	movs	r3, #10
 800ba9e:	4858      	ldr	r0, [pc, #352]	@ (800bc00 <_printf_i+0x234>)
 800baa0:	e011      	b.n	800bac6 <_printf_i+0xfa>
 800baa2:	6821      	ldr	r1, [r4, #0]
 800baa4:	6833      	ldr	r3, [r6, #0]
 800baa6:	0608      	lsls	r0, r1, #24
 800baa8:	f853 5b04 	ldr.w	r5, [r3], #4
 800baac:	d402      	bmi.n	800bab4 <_printf_i+0xe8>
 800baae:	0649      	lsls	r1, r1, #25
 800bab0:	bf48      	it	mi
 800bab2:	b2ad      	uxthmi	r5, r5
 800bab4:	2f6f      	cmp	r7, #111	@ 0x6f
 800bab6:	6033      	str	r3, [r6, #0]
 800bab8:	bf14      	ite	ne
 800baba:	230a      	movne	r3, #10
 800babc:	2308      	moveq	r3, #8
 800babe:	4850      	ldr	r0, [pc, #320]	@ (800bc00 <_printf_i+0x234>)
 800bac0:	2100      	movs	r1, #0
 800bac2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bac6:	6866      	ldr	r6, [r4, #4]
 800bac8:	2e00      	cmp	r6, #0
 800baca:	60a6      	str	r6, [r4, #8]
 800bacc:	db05      	blt.n	800bada <_printf_i+0x10e>
 800bace:	6821      	ldr	r1, [r4, #0]
 800bad0:	432e      	orrs	r6, r5
 800bad2:	f021 0104 	bic.w	r1, r1, #4
 800bad6:	6021      	str	r1, [r4, #0]
 800bad8:	d04b      	beq.n	800bb72 <_printf_i+0x1a6>
 800bada:	4616      	mov	r6, r2
 800badc:	fbb5 f1f3 	udiv	r1, r5, r3
 800bae0:	fb03 5711 	mls	r7, r3, r1, r5
 800bae4:	5dc7      	ldrb	r7, [r0, r7]
 800bae6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800baea:	462f      	mov	r7, r5
 800baec:	42bb      	cmp	r3, r7
 800baee:	460d      	mov	r5, r1
 800baf0:	d9f4      	bls.n	800badc <_printf_i+0x110>
 800baf2:	2b08      	cmp	r3, #8
 800baf4:	d10b      	bne.n	800bb0e <_printf_i+0x142>
 800baf6:	6823      	ldr	r3, [r4, #0]
 800baf8:	07df      	lsls	r7, r3, #31
 800bafa:	d508      	bpl.n	800bb0e <_printf_i+0x142>
 800bafc:	6923      	ldr	r3, [r4, #16]
 800bafe:	6861      	ldr	r1, [r4, #4]
 800bb00:	4299      	cmp	r1, r3
 800bb02:	bfde      	ittt	le
 800bb04:	2330      	movle	r3, #48	@ 0x30
 800bb06:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb0a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb0e:	1b92      	subs	r2, r2, r6
 800bb10:	6122      	str	r2, [r4, #16]
 800bb12:	464b      	mov	r3, r9
 800bb14:	4621      	mov	r1, r4
 800bb16:	4640      	mov	r0, r8
 800bb18:	f8cd a000 	str.w	sl, [sp]
 800bb1c:	aa03      	add	r2, sp, #12
 800bb1e:	f7ff fee3 	bl	800b8e8 <_printf_common>
 800bb22:	3001      	adds	r0, #1
 800bb24:	d14a      	bne.n	800bbbc <_printf_i+0x1f0>
 800bb26:	f04f 30ff 	mov.w	r0, #4294967295
 800bb2a:	b004      	add	sp, #16
 800bb2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb30:	6823      	ldr	r3, [r4, #0]
 800bb32:	f043 0320 	orr.w	r3, r3, #32
 800bb36:	6023      	str	r3, [r4, #0]
 800bb38:	2778      	movs	r7, #120	@ 0x78
 800bb3a:	4832      	ldr	r0, [pc, #200]	@ (800bc04 <_printf_i+0x238>)
 800bb3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bb40:	6823      	ldr	r3, [r4, #0]
 800bb42:	6831      	ldr	r1, [r6, #0]
 800bb44:	061f      	lsls	r7, r3, #24
 800bb46:	f851 5b04 	ldr.w	r5, [r1], #4
 800bb4a:	d402      	bmi.n	800bb52 <_printf_i+0x186>
 800bb4c:	065f      	lsls	r7, r3, #25
 800bb4e:	bf48      	it	mi
 800bb50:	b2ad      	uxthmi	r5, r5
 800bb52:	6031      	str	r1, [r6, #0]
 800bb54:	07d9      	lsls	r1, r3, #31
 800bb56:	bf44      	itt	mi
 800bb58:	f043 0320 	orrmi.w	r3, r3, #32
 800bb5c:	6023      	strmi	r3, [r4, #0]
 800bb5e:	b11d      	cbz	r5, 800bb68 <_printf_i+0x19c>
 800bb60:	2310      	movs	r3, #16
 800bb62:	e7ad      	b.n	800bac0 <_printf_i+0xf4>
 800bb64:	4826      	ldr	r0, [pc, #152]	@ (800bc00 <_printf_i+0x234>)
 800bb66:	e7e9      	b.n	800bb3c <_printf_i+0x170>
 800bb68:	6823      	ldr	r3, [r4, #0]
 800bb6a:	f023 0320 	bic.w	r3, r3, #32
 800bb6e:	6023      	str	r3, [r4, #0]
 800bb70:	e7f6      	b.n	800bb60 <_printf_i+0x194>
 800bb72:	4616      	mov	r6, r2
 800bb74:	e7bd      	b.n	800baf2 <_printf_i+0x126>
 800bb76:	6833      	ldr	r3, [r6, #0]
 800bb78:	6825      	ldr	r5, [r4, #0]
 800bb7a:	1d18      	adds	r0, r3, #4
 800bb7c:	6961      	ldr	r1, [r4, #20]
 800bb7e:	6030      	str	r0, [r6, #0]
 800bb80:	062e      	lsls	r6, r5, #24
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	d501      	bpl.n	800bb8a <_printf_i+0x1be>
 800bb86:	6019      	str	r1, [r3, #0]
 800bb88:	e002      	b.n	800bb90 <_printf_i+0x1c4>
 800bb8a:	0668      	lsls	r0, r5, #25
 800bb8c:	d5fb      	bpl.n	800bb86 <_printf_i+0x1ba>
 800bb8e:	8019      	strh	r1, [r3, #0]
 800bb90:	2300      	movs	r3, #0
 800bb92:	4616      	mov	r6, r2
 800bb94:	6123      	str	r3, [r4, #16]
 800bb96:	e7bc      	b.n	800bb12 <_printf_i+0x146>
 800bb98:	6833      	ldr	r3, [r6, #0]
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	1d1a      	adds	r2, r3, #4
 800bb9e:	6032      	str	r2, [r6, #0]
 800bba0:	681e      	ldr	r6, [r3, #0]
 800bba2:	6862      	ldr	r2, [r4, #4]
 800bba4:	4630      	mov	r0, r6
 800bba6:	f000 fcd2 	bl	800c54e <memchr>
 800bbaa:	b108      	cbz	r0, 800bbb0 <_printf_i+0x1e4>
 800bbac:	1b80      	subs	r0, r0, r6
 800bbae:	6060      	str	r0, [r4, #4]
 800bbb0:	6863      	ldr	r3, [r4, #4]
 800bbb2:	6123      	str	r3, [r4, #16]
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbba:	e7aa      	b.n	800bb12 <_printf_i+0x146>
 800bbbc:	4632      	mov	r2, r6
 800bbbe:	4649      	mov	r1, r9
 800bbc0:	4640      	mov	r0, r8
 800bbc2:	6923      	ldr	r3, [r4, #16]
 800bbc4:	47d0      	blx	sl
 800bbc6:	3001      	adds	r0, #1
 800bbc8:	d0ad      	beq.n	800bb26 <_printf_i+0x15a>
 800bbca:	6823      	ldr	r3, [r4, #0]
 800bbcc:	079b      	lsls	r3, r3, #30
 800bbce:	d413      	bmi.n	800bbf8 <_printf_i+0x22c>
 800bbd0:	68e0      	ldr	r0, [r4, #12]
 800bbd2:	9b03      	ldr	r3, [sp, #12]
 800bbd4:	4298      	cmp	r0, r3
 800bbd6:	bfb8      	it	lt
 800bbd8:	4618      	movlt	r0, r3
 800bbda:	e7a6      	b.n	800bb2a <_printf_i+0x15e>
 800bbdc:	2301      	movs	r3, #1
 800bbde:	4632      	mov	r2, r6
 800bbe0:	4649      	mov	r1, r9
 800bbe2:	4640      	mov	r0, r8
 800bbe4:	47d0      	blx	sl
 800bbe6:	3001      	adds	r0, #1
 800bbe8:	d09d      	beq.n	800bb26 <_printf_i+0x15a>
 800bbea:	3501      	adds	r5, #1
 800bbec:	68e3      	ldr	r3, [r4, #12]
 800bbee:	9903      	ldr	r1, [sp, #12]
 800bbf0:	1a5b      	subs	r3, r3, r1
 800bbf2:	42ab      	cmp	r3, r5
 800bbf4:	dcf2      	bgt.n	800bbdc <_printf_i+0x210>
 800bbf6:	e7eb      	b.n	800bbd0 <_printf_i+0x204>
 800bbf8:	2500      	movs	r5, #0
 800bbfa:	f104 0619 	add.w	r6, r4, #25
 800bbfe:	e7f5      	b.n	800bbec <_printf_i+0x220>
 800bc00:	0801159a 	.word	0x0801159a
 800bc04:	080115ab 	.word	0x080115ab

0800bc08 <_scanf_float>:
 800bc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0c:	b087      	sub	sp, #28
 800bc0e:	9303      	str	r3, [sp, #12]
 800bc10:	688b      	ldr	r3, [r1, #8]
 800bc12:	4691      	mov	r9, r2
 800bc14:	1e5a      	subs	r2, r3, #1
 800bc16:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bc1a:	bf82      	ittt	hi
 800bc1c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bc20:	eb03 0b05 	addhi.w	fp, r3, r5
 800bc24:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bc28:	460a      	mov	r2, r1
 800bc2a:	f04f 0500 	mov.w	r5, #0
 800bc2e:	bf88      	it	hi
 800bc30:	608b      	strhi	r3, [r1, #8]
 800bc32:	680b      	ldr	r3, [r1, #0]
 800bc34:	4680      	mov	r8, r0
 800bc36:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800bc3a:	f842 3b1c 	str.w	r3, [r2], #28
 800bc3e:	460c      	mov	r4, r1
 800bc40:	bf98      	it	ls
 800bc42:	f04f 0b00 	movls.w	fp, #0
 800bc46:	4616      	mov	r6, r2
 800bc48:	46aa      	mov	sl, r5
 800bc4a:	462f      	mov	r7, r5
 800bc4c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bc50:	9201      	str	r2, [sp, #4]
 800bc52:	9502      	str	r5, [sp, #8]
 800bc54:	68a2      	ldr	r2, [r4, #8]
 800bc56:	b15a      	cbz	r2, 800bc70 <_scanf_float+0x68>
 800bc58:	f8d9 3000 	ldr.w	r3, [r9]
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	2b4e      	cmp	r3, #78	@ 0x4e
 800bc60:	d862      	bhi.n	800bd28 <_scanf_float+0x120>
 800bc62:	2b40      	cmp	r3, #64	@ 0x40
 800bc64:	d83a      	bhi.n	800bcdc <_scanf_float+0xd4>
 800bc66:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800bc6a:	b2c8      	uxtb	r0, r1
 800bc6c:	280e      	cmp	r0, #14
 800bc6e:	d938      	bls.n	800bce2 <_scanf_float+0xda>
 800bc70:	b11f      	cbz	r7, 800bc7a <_scanf_float+0x72>
 800bc72:	6823      	ldr	r3, [r4, #0]
 800bc74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc78:	6023      	str	r3, [r4, #0]
 800bc7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc7e:	f1ba 0f01 	cmp.w	sl, #1
 800bc82:	f200 8114 	bhi.w	800beae <_scanf_float+0x2a6>
 800bc86:	9b01      	ldr	r3, [sp, #4]
 800bc88:	429e      	cmp	r6, r3
 800bc8a:	f200 8105 	bhi.w	800be98 <_scanf_float+0x290>
 800bc8e:	2001      	movs	r0, #1
 800bc90:	b007      	add	sp, #28
 800bc92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc96:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800bc9a:	2a0d      	cmp	r2, #13
 800bc9c:	d8e8      	bhi.n	800bc70 <_scanf_float+0x68>
 800bc9e:	a101      	add	r1, pc, #4	@ (adr r1, 800bca4 <_scanf_float+0x9c>)
 800bca0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bca4:	0800bded 	.word	0x0800bded
 800bca8:	0800bc71 	.word	0x0800bc71
 800bcac:	0800bc71 	.word	0x0800bc71
 800bcb0:	0800bc71 	.word	0x0800bc71
 800bcb4:	0800be49 	.word	0x0800be49
 800bcb8:	0800be23 	.word	0x0800be23
 800bcbc:	0800bc71 	.word	0x0800bc71
 800bcc0:	0800bc71 	.word	0x0800bc71
 800bcc4:	0800bdfb 	.word	0x0800bdfb
 800bcc8:	0800bc71 	.word	0x0800bc71
 800bccc:	0800bc71 	.word	0x0800bc71
 800bcd0:	0800bc71 	.word	0x0800bc71
 800bcd4:	0800bc71 	.word	0x0800bc71
 800bcd8:	0800bdb7 	.word	0x0800bdb7
 800bcdc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800bce0:	e7db      	b.n	800bc9a <_scanf_float+0x92>
 800bce2:	290e      	cmp	r1, #14
 800bce4:	d8c4      	bhi.n	800bc70 <_scanf_float+0x68>
 800bce6:	a001      	add	r0, pc, #4	@ (adr r0, 800bcec <_scanf_float+0xe4>)
 800bce8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bcec:	0800bda7 	.word	0x0800bda7
 800bcf0:	0800bc71 	.word	0x0800bc71
 800bcf4:	0800bda7 	.word	0x0800bda7
 800bcf8:	0800be37 	.word	0x0800be37
 800bcfc:	0800bc71 	.word	0x0800bc71
 800bd00:	0800bd49 	.word	0x0800bd49
 800bd04:	0800bd8d 	.word	0x0800bd8d
 800bd08:	0800bd8d 	.word	0x0800bd8d
 800bd0c:	0800bd8d 	.word	0x0800bd8d
 800bd10:	0800bd8d 	.word	0x0800bd8d
 800bd14:	0800bd8d 	.word	0x0800bd8d
 800bd18:	0800bd8d 	.word	0x0800bd8d
 800bd1c:	0800bd8d 	.word	0x0800bd8d
 800bd20:	0800bd8d 	.word	0x0800bd8d
 800bd24:	0800bd8d 	.word	0x0800bd8d
 800bd28:	2b6e      	cmp	r3, #110	@ 0x6e
 800bd2a:	d809      	bhi.n	800bd40 <_scanf_float+0x138>
 800bd2c:	2b60      	cmp	r3, #96	@ 0x60
 800bd2e:	d8b2      	bhi.n	800bc96 <_scanf_float+0x8e>
 800bd30:	2b54      	cmp	r3, #84	@ 0x54
 800bd32:	d07b      	beq.n	800be2c <_scanf_float+0x224>
 800bd34:	2b59      	cmp	r3, #89	@ 0x59
 800bd36:	d19b      	bne.n	800bc70 <_scanf_float+0x68>
 800bd38:	2d07      	cmp	r5, #7
 800bd3a:	d199      	bne.n	800bc70 <_scanf_float+0x68>
 800bd3c:	2508      	movs	r5, #8
 800bd3e:	e02f      	b.n	800bda0 <_scanf_float+0x198>
 800bd40:	2b74      	cmp	r3, #116	@ 0x74
 800bd42:	d073      	beq.n	800be2c <_scanf_float+0x224>
 800bd44:	2b79      	cmp	r3, #121	@ 0x79
 800bd46:	e7f6      	b.n	800bd36 <_scanf_float+0x12e>
 800bd48:	6821      	ldr	r1, [r4, #0]
 800bd4a:	05c8      	lsls	r0, r1, #23
 800bd4c:	d51e      	bpl.n	800bd8c <_scanf_float+0x184>
 800bd4e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800bd52:	6021      	str	r1, [r4, #0]
 800bd54:	3701      	adds	r7, #1
 800bd56:	f1bb 0f00 	cmp.w	fp, #0
 800bd5a:	d003      	beq.n	800bd64 <_scanf_float+0x15c>
 800bd5c:	3201      	adds	r2, #1
 800bd5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd62:	60a2      	str	r2, [r4, #8]
 800bd64:	68a3      	ldr	r3, [r4, #8]
 800bd66:	3b01      	subs	r3, #1
 800bd68:	60a3      	str	r3, [r4, #8]
 800bd6a:	6923      	ldr	r3, [r4, #16]
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	6123      	str	r3, [r4, #16]
 800bd70:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bd74:	3b01      	subs	r3, #1
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f8c9 3004 	str.w	r3, [r9, #4]
 800bd7c:	f340 8083 	ble.w	800be86 <_scanf_float+0x27e>
 800bd80:	f8d9 3000 	ldr.w	r3, [r9]
 800bd84:	3301      	adds	r3, #1
 800bd86:	f8c9 3000 	str.w	r3, [r9]
 800bd8a:	e763      	b.n	800bc54 <_scanf_float+0x4c>
 800bd8c:	eb1a 0105 	adds.w	r1, sl, r5
 800bd90:	f47f af6e 	bne.w	800bc70 <_scanf_float+0x68>
 800bd94:	460d      	mov	r5, r1
 800bd96:	468a      	mov	sl, r1
 800bd98:	6822      	ldr	r2, [r4, #0]
 800bd9a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bd9e:	6022      	str	r2, [r4, #0]
 800bda0:	f806 3b01 	strb.w	r3, [r6], #1
 800bda4:	e7de      	b.n	800bd64 <_scanf_float+0x15c>
 800bda6:	6822      	ldr	r2, [r4, #0]
 800bda8:	0610      	lsls	r0, r2, #24
 800bdaa:	f57f af61 	bpl.w	800bc70 <_scanf_float+0x68>
 800bdae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bdb2:	6022      	str	r2, [r4, #0]
 800bdb4:	e7f4      	b.n	800bda0 <_scanf_float+0x198>
 800bdb6:	f1ba 0f00 	cmp.w	sl, #0
 800bdba:	d10c      	bne.n	800bdd6 <_scanf_float+0x1ce>
 800bdbc:	b977      	cbnz	r7, 800bddc <_scanf_float+0x1d4>
 800bdbe:	6822      	ldr	r2, [r4, #0]
 800bdc0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bdc4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bdc8:	d108      	bne.n	800bddc <_scanf_float+0x1d4>
 800bdca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bdce:	f04f 0a01 	mov.w	sl, #1
 800bdd2:	6022      	str	r2, [r4, #0]
 800bdd4:	e7e4      	b.n	800bda0 <_scanf_float+0x198>
 800bdd6:	f1ba 0f02 	cmp.w	sl, #2
 800bdda:	d051      	beq.n	800be80 <_scanf_float+0x278>
 800bddc:	2d01      	cmp	r5, #1
 800bdde:	d002      	beq.n	800bde6 <_scanf_float+0x1de>
 800bde0:	2d04      	cmp	r5, #4
 800bde2:	f47f af45 	bne.w	800bc70 <_scanf_float+0x68>
 800bde6:	3501      	adds	r5, #1
 800bde8:	b2ed      	uxtb	r5, r5
 800bdea:	e7d9      	b.n	800bda0 <_scanf_float+0x198>
 800bdec:	f1ba 0f01 	cmp.w	sl, #1
 800bdf0:	f47f af3e 	bne.w	800bc70 <_scanf_float+0x68>
 800bdf4:	f04f 0a02 	mov.w	sl, #2
 800bdf8:	e7d2      	b.n	800bda0 <_scanf_float+0x198>
 800bdfa:	b975      	cbnz	r5, 800be1a <_scanf_float+0x212>
 800bdfc:	2f00      	cmp	r7, #0
 800bdfe:	f47f af38 	bne.w	800bc72 <_scanf_float+0x6a>
 800be02:	6822      	ldr	r2, [r4, #0]
 800be04:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800be08:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800be0c:	f040 80ff 	bne.w	800c00e <_scanf_float+0x406>
 800be10:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800be14:	2501      	movs	r5, #1
 800be16:	6022      	str	r2, [r4, #0]
 800be18:	e7c2      	b.n	800bda0 <_scanf_float+0x198>
 800be1a:	2d03      	cmp	r5, #3
 800be1c:	d0e3      	beq.n	800bde6 <_scanf_float+0x1de>
 800be1e:	2d05      	cmp	r5, #5
 800be20:	e7df      	b.n	800bde2 <_scanf_float+0x1da>
 800be22:	2d02      	cmp	r5, #2
 800be24:	f47f af24 	bne.w	800bc70 <_scanf_float+0x68>
 800be28:	2503      	movs	r5, #3
 800be2a:	e7b9      	b.n	800bda0 <_scanf_float+0x198>
 800be2c:	2d06      	cmp	r5, #6
 800be2e:	f47f af1f 	bne.w	800bc70 <_scanf_float+0x68>
 800be32:	2507      	movs	r5, #7
 800be34:	e7b4      	b.n	800bda0 <_scanf_float+0x198>
 800be36:	6822      	ldr	r2, [r4, #0]
 800be38:	0591      	lsls	r1, r2, #22
 800be3a:	f57f af19 	bpl.w	800bc70 <_scanf_float+0x68>
 800be3e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800be42:	6022      	str	r2, [r4, #0]
 800be44:	9702      	str	r7, [sp, #8]
 800be46:	e7ab      	b.n	800bda0 <_scanf_float+0x198>
 800be48:	6822      	ldr	r2, [r4, #0]
 800be4a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800be4e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800be52:	d005      	beq.n	800be60 <_scanf_float+0x258>
 800be54:	0550      	lsls	r0, r2, #21
 800be56:	f57f af0b 	bpl.w	800bc70 <_scanf_float+0x68>
 800be5a:	2f00      	cmp	r7, #0
 800be5c:	f000 80d7 	beq.w	800c00e <_scanf_float+0x406>
 800be60:	0591      	lsls	r1, r2, #22
 800be62:	bf58      	it	pl
 800be64:	9902      	ldrpl	r1, [sp, #8]
 800be66:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800be6a:	bf58      	it	pl
 800be6c:	1a79      	subpl	r1, r7, r1
 800be6e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800be72:	f04f 0700 	mov.w	r7, #0
 800be76:	bf58      	it	pl
 800be78:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800be7c:	6022      	str	r2, [r4, #0]
 800be7e:	e78f      	b.n	800bda0 <_scanf_float+0x198>
 800be80:	f04f 0a03 	mov.w	sl, #3
 800be84:	e78c      	b.n	800bda0 <_scanf_float+0x198>
 800be86:	4649      	mov	r1, r9
 800be88:	4640      	mov	r0, r8
 800be8a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800be8e:	4798      	blx	r3
 800be90:	2800      	cmp	r0, #0
 800be92:	f43f aedf 	beq.w	800bc54 <_scanf_float+0x4c>
 800be96:	e6eb      	b.n	800bc70 <_scanf_float+0x68>
 800be98:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800be9c:	464a      	mov	r2, r9
 800be9e:	4640      	mov	r0, r8
 800bea0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bea4:	4798      	blx	r3
 800bea6:	6923      	ldr	r3, [r4, #16]
 800bea8:	3b01      	subs	r3, #1
 800beaa:	6123      	str	r3, [r4, #16]
 800beac:	e6eb      	b.n	800bc86 <_scanf_float+0x7e>
 800beae:	1e6b      	subs	r3, r5, #1
 800beb0:	2b06      	cmp	r3, #6
 800beb2:	d824      	bhi.n	800befe <_scanf_float+0x2f6>
 800beb4:	2d02      	cmp	r5, #2
 800beb6:	d836      	bhi.n	800bf26 <_scanf_float+0x31e>
 800beb8:	9b01      	ldr	r3, [sp, #4]
 800beba:	429e      	cmp	r6, r3
 800bebc:	f67f aee7 	bls.w	800bc8e <_scanf_float+0x86>
 800bec0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bec4:	464a      	mov	r2, r9
 800bec6:	4640      	mov	r0, r8
 800bec8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800becc:	4798      	blx	r3
 800bece:	6923      	ldr	r3, [r4, #16]
 800bed0:	3b01      	subs	r3, #1
 800bed2:	6123      	str	r3, [r4, #16]
 800bed4:	e7f0      	b.n	800beb8 <_scanf_float+0x2b0>
 800bed6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800beda:	464a      	mov	r2, r9
 800bedc:	4640      	mov	r0, r8
 800bede:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bee2:	4798      	blx	r3
 800bee4:	6923      	ldr	r3, [r4, #16]
 800bee6:	3b01      	subs	r3, #1
 800bee8:	6123      	str	r3, [r4, #16]
 800beea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800beee:	fa5f fa8a 	uxtb.w	sl, sl
 800bef2:	f1ba 0f02 	cmp.w	sl, #2
 800bef6:	d1ee      	bne.n	800bed6 <_scanf_float+0x2ce>
 800bef8:	3d03      	subs	r5, #3
 800befa:	b2ed      	uxtb	r5, r5
 800befc:	1b76      	subs	r6, r6, r5
 800befe:	6823      	ldr	r3, [r4, #0]
 800bf00:	05da      	lsls	r2, r3, #23
 800bf02:	d530      	bpl.n	800bf66 <_scanf_float+0x35e>
 800bf04:	055b      	lsls	r3, r3, #21
 800bf06:	d511      	bpl.n	800bf2c <_scanf_float+0x324>
 800bf08:	9b01      	ldr	r3, [sp, #4]
 800bf0a:	429e      	cmp	r6, r3
 800bf0c:	f67f aebf 	bls.w	800bc8e <_scanf_float+0x86>
 800bf10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bf14:	464a      	mov	r2, r9
 800bf16:	4640      	mov	r0, r8
 800bf18:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bf1c:	4798      	blx	r3
 800bf1e:	6923      	ldr	r3, [r4, #16]
 800bf20:	3b01      	subs	r3, #1
 800bf22:	6123      	str	r3, [r4, #16]
 800bf24:	e7f0      	b.n	800bf08 <_scanf_float+0x300>
 800bf26:	46aa      	mov	sl, r5
 800bf28:	46b3      	mov	fp, r6
 800bf2a:	e7de      	b.n	800beea <_scanf_float+0x2e2>
 800bf2c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bf30:	6923      	ldr	r3, [r4, #16]
 800bf32:	2965      	cmp	r1, #101	@ 0x65
 800bf34:	f103 33ff 	add.w	r3, r3, #4294967295
 800bf38:	f106 35ff 	add.w	r5, r6, #4294967295
 800bf3c:	6123      	str	r3, [r4, #16]
 800bf3e:	d00c      	beq.n	800bf5a <_scanf_float+0x352>
 800bf40:	2945      	cmp	r1, #69	@ 0x45
 800bf42:	d00a      	beq.n	800bf5a <_scanf_float+0x352>
 800bf44:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bf48:	464a      	mov	r2, r9
 800bf4a:	4640      	mov	r0, r8
 800bf4c:	4798      	blx	r3
 800bf4e:	6923      	ldr	r3, [r4, #16]
 800bf50:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bf54:	3b01      	subs	r3, #1
 800bf56:	1eb5      	subs	r5, r6, #2
 800bf58:	6123      	str	r3, [r4, #16]
 800bf5a:	464a      	mov	r2, r9
 800bf5c:	4640      	mov	r0, r8
 800bf5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bf62:	4798      	blx	r3
 800bf64:	462e      	mov	r6, r5
 800bf66:	6822      	ldr	r2, [r4, #0]
 800bf68:	f012 0210 	ands.w	r2, r2, #16
 800bf6c:	d001      	beq.n	800bf72 <_scanf_float+0x36a>
 800bf6e:	2000      	movs	r0, #0
 800bf70:	e68e      	b.n	800bc90 <_scanf_float+0x88>
 800bf72:	7032      	strb	r2, [r6, #0]
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bf7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf7e:	d125      	bne.n	800bfcc <_scanf_float+0x3c4>
 800bf80:	9b02      	ldr	r3, [sp, #8]
 800bf82:	429f      	cmp	r7, r3
 800bf84:	d00a      	beq.n	800bf9c <_scanf_float+0x394>
 800bf86:	1bda      	subs	r2, r3, r7
 800bf88:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bf8c:	429e      	cmp	r6, r3
 800bf8e:	bf28      	it	cs
 800bf90:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bf94:	4630      	mov	r0, r6
 800bf96:	491f      	ldr	r1, [pc, #124]	@ (800c014 <_scanf_float+0x40c>)
 800bf98:	f000 f960 	bl	800c25c <siprintf>
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	4640      	mov	r0, r8
 800bfa0:	9901      	ldr	r1, [sp, #4]
 800bfa2:	f002 fce9 	bl	800e978 <_strtod_r>
 800bfa6:	9b03      	ldr	r3, [sp, #12]
 800bfa8:	6825      	ldr	r5, [r4, #0]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f015 0f02 	tst.w	r5, #2
 800bfb0:	4606      	mov	r6, r0
 800bfb2:	460f      	mov	r7, r1
 800bfb4:	f103 0204 	add.w	r2, r3, #4
 800bfb8:	d015      	beq.n	800bfe6 <_scanf_float+0x3de>
 800bfba:	9903      	ldr	r1, [sp, #12]
 800bfbc:	600a      	str	r2, [r1, #0]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	e9c3 6700 	strd	r6, r7, [r3]
 800bfc4:	68e3      	ldr	r3, [r4, #12]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	60e3      	str	r3, [r4, #12]
 800bfca:	e7d0      	b.n	800bf6e <_scanf_float+0x366>
 800bfcc:	9b04      	ldr	r3, [sp, #16]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d0e4      	beq.n	800bf9c <_scanf_float+0x394>
 800bfd2:	9905      	ldr	r1, [sp, #20]
 800bfd4:	230a      	movs	r3, #10
 800bfd6:	4640      	mov	r0, r8
 800bfd8:	3101      	adds	r1, #1
 800bfda:	f002 fd4d 	bl	800ea78 <_strtol_r>
 800bfde:	9b04      	ldr	r3, [sp, #16]
 800bfe0:	9e05      	ldr	r6, [sp, #20]
 800bfe2:	1ac2      	subs	r2, r0, r3
 800bfe4:	e7d0      	b.n	800bf88 <_scanf_float+0x380>
 800bfe6:	076d      	lsls	r5, r5, #29
 800bfe8:	d4e7      	bmi.n	800bfba <_scanf_float+0x3b2>
 800bfea:	9d03      	ldr	r5, [sp, #12]
 800bfec:	602a      	str	r2, [r5, #0]
 800bfee:	681d      	ldr	r5, [r3, #0]
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	f7f4 fd7a 	bl	8000aec <__aeabi_dcmpun>
 800bff8:	b120      	cbz	r0, 800c004 <_scanf_float+0x3fc>
 800bffa:	4807      	ldr	r0, [pc, #28]	@ (800c018 <_scanf_float+0x410>)
 800bffc:	f000 fac4 	bl	800c588 <nanf>
 800c000:	6028      	str	r0, [r5, #0]
 800c002:	e7df      	b.n	800bfc4 <_scanf_float+0x3bc>
 800c004:	4630      	mov	r0, r6
 800c006:	4639      	mov	r1, r7
 800c008:	f7f4 fdce 	bl	8000ba8 <__aeabi_d2f>
 800c00c:	e7f8      	b.n	800c000 <_scanf_float+0x3f8>
 800c00e:	2700      	movs	r7, #0
 800c010:	e633      	b.n	800bc7a <_scanf_float+0x72>
 800c012:	bf00      	nop
 800c014:	080115bc 	.word	0x080115bc
 800c018:	080116fd 	.word	0x080116fd

0800c01c <std>:
 800c01c:	2300      	movs	r3, #0
 800c01e:	b510      	push	{r4, lr}
 800c020:	4604      	mov	r4, r0
 800c022:	e9c0 3300 	strd	r3, r3, [r0]
 800c026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c02a:	6083      	str	r3, [r0, #8]
 800c02c:	8181      	strh	r1, [r0, #12]
 800c02e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c030:	81c2      	strh	r2, [r0, #14]
 800c032:	6183      	str	r3, [r0, #24]
 800c034:	4619      	mov	r1, r3
 800c036:	2208      	movs	r2, #8
 800c038:	305c      	adds	r0, #92	@ 0x5c
 800c03a:	f000 fa09 	bl	800c450 <memset>
 800c03e:	4b0d      	ldr	r3, [pc, #52]	@ (800c074 <std+0x58>)
 800c040:	6224      	str	r4, [r4, #32]
 800c042:	6263      	str	r3, [r4, #36]	@ 0x24
 800c044:	4b0c      	ldr	r3, [pc, #48]	@ (800c078 <std+0x5c>)
 800c046:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c048:	4b0c      	ldr	r3, [pc, #48]	@ (800c07c <std+0x60>)
 800c04a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c04c:	4b0c      	ldr	r3, [pc, #48]	@ (800c080 <std+0x64>)
 800c04e:	6323      	str	r3, [r4, #48]	@ 0x30
 800c050:	4b0c      	ldr	r3, [pc, #48]	@ (800c084 <std+0x68>)
 800c052:	429c      	cmp	r4, r3
 800c054:	d006      	beq.n	800c064 <std+0x48>
 800c056:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c05a:	4294      	cmp	r4, r2
 800c05c:	d002      	beq.n	800c064 <std+0x48>
 800c05e:	33d0      	adds	r3, #208	@ 0xd0
 800c060:	429c      	cmp	r4, r3
 800c062:	d105      	bne.n	800c070 <std+0x54>
 800c064:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c06c:	f000 ba6c 	b.w	800c548 <__retarget_lock_init_recursive>
 800c070:	bd10      	pop	{r4, pc}
 800c072:	bf00      	nop
 800c074:	0800c2a1 	.word	0x0800c2a1
 800c078:	0800c2c3 	.word	0x0800c2c3
 800c07c:	0800c2fb 	.word	0x0800c2fb
 800c080:	0800c31f 	.word	0x0800c31f
 800c084:	2000b8e4 	.word	0x2000b8e4

0800c088 <stdio_exit_handler>:
 800c088:	4a02      	ldr	r2, [pc, #8]	@ (800c094 <stdio_exit_handler+0xc>)
 800c08a:	4903      	ldr	r1, [pc, #12]	@ (800c098 <stdio_exit_handler+0x10>)
 800c08c:	4803      	ldr	r0, [pc, #12]	@ (800c09c <stdio_exit_handler+0x14>)
 800c08e:	f000 b869 	b.w	800c164 <_fwalk_sglue>
 800c092:	bf00      	nop
 800c094:	200080a0 	.word	0x200080a0
 800c098:	0800f0ad 	.word	0x0800f0ad
 800c09c:	200080b0 	.word	0x200080b0

0800c0a0 <cleanup_stdio>:
 800c0a0:	6841      	ldr	r1, [r0, #4]
 800c0a2:	4b0c      	ldr	r3, [pc, #48]	@ (800c0d4 <cleanup_stdio+0x34>)
 800c0a4:	b510      	push	{r4, lr}
 800c0a6:	4299      	cmp	r1, r3
 800c0a8:	4604      	mov	r4, r0
 800c0aa:	d001      	beq.n	800c0b0 <cleanup_stdio+0x10>
 800c0ac:	f002 fffe 	bl	800f0ac <_fflush_r>
 800c0b0:	68a1      	ldr	r1, [r4, #8]
 800c0b2:	4b09      	ldr	r3, [pc, #36]	@ (800c0d8 <cleanup_stdio+0x38>)
 800c0b4:	4299      	cmp	r1, r3
 800c0b6:	d002      	beq.n	800c0be <cleanup_stdio+0x1e>
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	f002 fff7 	bl	800f0ac <_fflush_r>
 800c0be:	68e1      	ldr	r1, [r4, #12]
 800c0c0:	4b06      	ldr	r3, [pc, #24]	@ (800c0dc <cleanup_stdio+0x3c>)
 800c0c2:	4299      	cmp	r1, r3
 800c0c4:	d004      	beq.n	800c0d0 <cleanup_stdio+0x30>
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0cc:	f002 bfee 	b.w	800f0ac <_fflush_r>
 800c0d0:	bd10      	pop	{r4, pc}
 800c0d2:	bf00      	nop
 800c0d4:	2000b8e4 	.word	0x2000b8e4
 800c0d8:	2000b94c 	.word	0x2000b94c
 800c0dc:	2000b9b4 	.word	0x2000b9b4

0800c0e0 <global_stdio_init.part.0>:
 800c0e0:	b510      	push	{r4, lr}
 800c0e2:	4b0b      	ldr	r3, [pc, #44]	@ (800c110 <global_stdio_init.part.0+0x30>)
 800c0e4:	4c0b      	ldr	r4, [pc, #44]	@ (800c114 <global_stdio_init.part.0+0x34>)
 800c0e6:	4a0c      	ldr	r2, [pc, #48]	@ (800c118 <global_stdio_init.part.0+0x38>)
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	601a      	str	r2, [r3, #0]
 800c0ec:	2104      	movs	r1, #4
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	f7ff ff94 	bl	800c01c <std>
 800c0f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	2109      	movs	r1, #9
 800c0fc:	f7ff ff8e 	bl	800c01c <std>
 800c100:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c104:	2202      	movs	r2, #2
 800c106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c10a:	2112      	movs	r1, #18
 800c10c:	f7ff bf86 	b.w	800c01c <std>
 800c110:	2000ba1c 	.word	0x2000ba1c
 800c114:	2000b8e4 	.word	0x2000b8e4
 800c118:	0800c089 	.word	0x0800c089

0800c11c <__sfp_lock_acquire>:
 800c11c:	4801      	ldr	r0, [pc, #4]	@ (800c124 <__sfp_lock_acquire+0x8>)
 800c11e:	f000 ba14 	b.w	800c54a <__retarget_lock_acquire_recursive>
 800c122:	bf00      	nop
 800c124:	2000ba25 	.word	0x2000ba25

0800c128 <__sfp_lock_release>:
 800c128:	4801      	ldr	r0, [pc, #4]	@ (800c130 <__sfp_lock_release+0x8>)
 800c12a:	f000 ba0f 	b.w	800c54c <__retarget_lock_release_recursive>
 800c12e:	bf00      	nop
 800c130:	2000ba25 	.word	0x2000ba25

0800c134 <__sinit>:
 800c134:	b510      	push	{r4, lr}
 800c136:	4604      	mov	r4, r0
 800c138:	f7ff fff0 	bl	800c11c <__sfp_lock_acquire>
 800c13c:	6a23      	ldr	r3, [r4, #32]
 800c13e:	b11b      	cbz	r3, 800c148 <__sinit+0x14>
 800c140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c144:	f7ff bff0 	b.w	800c128 <__sfp_lock_release>
 800c148:	4b04      	ldr	r3, [pc, #16]	@ (800c15c <__sinit+0x28>)
 800c14a:	6223      	str	r3, [r4, #32]
 800c14c:	4b04      	ldr	r3, [pc, #16]	@ (800c160 <__sinit+0x2c>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d1f5      	bne.n	800c140 <__sinit+0xc>
 800c154:	f7ff ffc4 	bl	800c0e0 <global_stdio_init.part.0>
 800c158:	e7f2      	b.n	800c140 <__sinit+0xc>
 800c15a:	bf00      	nop
 800c15c:	0800c0a1 	.word	0x0800c0a1
 800c160:	2000ba1c 	.word	0x2000ba1c

0800c164 <_fwalk_sglue>:
 800c164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c168:	4607      	mov	r7, r0
 800c16a:	4688      	mov	r8, r1
 800c16c:	4614      	mov	r4, r2
 800c16e:	2600      	movs	r6, #0
 800c170:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c174:	f1b9 0901 	subs.w	r9, r9, #1
 800c178:	d505      	bpl.n	800c186 <_fwalk_sglue+0x22>
 800c17a:	6824      	ldr	r4, [r4, #0]
 800c17c:	2c00      	cmp	r4, #0
 800c17e:	d1f7      	bne.n	800c170 <_fwalk_sglue+0xc>
 800c180:	4630      	mov	r0, r6
 800c182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c186:	89ab      	ldrh	r3, [r5, #12]
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d907      	bls.n	800c19c <_fwalk_sglue+0x38>
 800c18c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c190:	3301      	adds	r3, #1
 800c192:	d003      	beq.n	800c19c <_fwalk_sglue+0x38>
 800c194:	4629      	mov	r1, r5
 800c196:	4638      	mov	r0, r7
 800c198:	47c0      	blx	r8
 800c19a:	4306      	orrs	r6, r0
 800c19c:	3568      	adds	r5, #104	@ 0x68
 800c19e:	e7e9      	b.n	800c174 <_fwalk_sglue+0x10>

0800c1a0 <_puts_r>:
 800c1a0:	6a03      	ldr	r3, [r0, #32]
 800c1a2:	b570      	push	{r4, r5, r6, lr}
 800c1a4:	4605      	mov	r5, r0
 800c1a6:	460e      	mov	r6, r1
 800c1a8:	6884      	ldr	r4, [r0, #8]
 800c1aa:	b90b      	cbnz	r3, 800c1b0 <_puts_r+0x10>
 800c1ac:	f7ff ffc2 	bl	800c134 <__sinit>
 800c1b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1b2:	07db      	lsls	r3, r3, #31
 800c1b4:	d405      	bmi.n	800c1c2 <_puts_r+0x22>
 800c1b6:	89a3      	ldrh	r3, [r4, #12]
 800c1b8:	0598      	lsls	r0, r3, #22
 800c1ba:	d402      	bmi.n	800c1c2 <_puts_r+0x22>
 800c1bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1be:	f000 f9c4 	bl	800c54a <__retarget_lock_acquire_recursive>
 800c1c2:	89a3      	ldrh	r3, [r4, #12]
 800c1c4:	0719      	lsls	r1, r3, #28
 800c1c6:	d502      	bpl.n	800c1ce <_puts_r+0x2e>
 800c1c8:	6923      	ldr	r3, [r4, #16]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d135      	bne.n	800c23a <_puts_r+0x9a>
 800c1ce:	4621      	mov	r1, r4
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	f000 f8e7 	bl	800c3a4 <__swsetup_r>
 800c1d6:	b380      	cbz	r0, 800c23a <_puts_r+0x9a>
 800c1d8:	f04f 35ff 	mov.w	r5, #4294967295
 800c1dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1de:	07da      	lsls	r2, r3, #31
 800c1e0:	d405      	bmi.n	800c1ee <_puts_r+0x4e>
 800c1e2:	89a3      	ldrh	r3, [r4, #12]
 800c1e4:	059b      	lsls	r3, r3, #22
 800c1e6:	d402      	bmi.n	800c1ee <_puts_r+0x4e>
 800c1e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1ea:	f000 f9af 	bl	800c54c <__retarget_lock_release_recursive>
 800c1ee:	4628      	mov	r0, r5
 800c1f0:	bd70      	pop	{r4, r5, r6, pc}
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	da04      	bge.n	800c200 <_puts_r+0x60>
 800c1f6:	69a2      	ldr	r2, [r4, #24]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	dc17      	bgt.n	800c22c <_puts_r+0x8c>
 800c1fc:	290a      	cmp	r1, #10
 800c1fe:	d015      	beq.n	800c22c <_puts_r+0x8c>
 800c200:	6823      	ldr	r3, [r4, #0]
 800c202:	1c5a      	adds	r2, r3, #1
 800c204:	6022      	str	r2, [r4, #0]
 800c206:	7019      	strb	r1, [r3, #0]
 800c208:	68a3      	ldr	r3, [r4, #8]
 800c20a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c20e:	3b01      	subs	r3, #1
 800c210:	60a3      	str	r3, [r4, #8]
 800c212:	2900      	cmp	r1, #0
 800c214:	d1ed      	bne.n	800c1f2 <_puts_r+0x52>
 800c216:	2b00      	cmp	r3, #0
 800c218:	da11      	bge.n	800c23e <_puts_r+0x9e>
 800c21a:	4622      	mov	r2, r4
 800c21c:	210a      	movs	r1, #10
 800c21e:	4628      	mov	r0, r5
 800c220:	f000 f881 	bl	800c326 <__swbuf_r>
 800c224:	3001      	adds	r0, #1
 800c226:	d0d7      	beq.n	800c1d8 <_puts_r+0x38>
 800c228:	250a      	movs	r5, #10
 800c22a:	e7d7      	b.n	800c1dc <_puts_r+0x3c>
 800c22c:	4622      	mov	r2, r4
 800c22e:	4628      	mov	r0, r5
 800c230:	f000 f879 	bl	800c326 <__swbuf_r>
 800c234:	3001      	adds	r0, #1
 800c236:	d1e7      	bne.n	800c208 <_puts_r+0x68>
 800c238:	e7ce      	b.n	800c1d8 <_puts_r+0x38>
 800c23a:	3e01      	subs	r6, #1
 800c23c:	e7e4      	b.n	800c208 <_puts_r+0x68>
 800c23e:	6823      	ldr	r3, [r4, #0]
 800c240:	1c5a      	adds	r2, r3, #1
 800c242:	6022      	str	r2, [r4, #0]
 800c244:	220a      	movs	r2, #10
 800c246:	701a      	strb	r2, [r3, #0]
 800c248:	e7ee      	b.n	800c228 <_puts_r+0x88>
	...

0800c24c <puts>:
 800c24c:	4b02      	ldr	r3, [pc, #8]	@ (800c258 <puts+0xc>)
 800c24e:	4601      	mov	r1, r0
 800c250:	6818      	ldr	r0, [r3, #0]
 800c252:	f7ff bfa5 	b.w	800c1a0 <_puts_r>
 800c256:	bf00      	nop
 800c258:	200080ac 	.word	0x200080ac

0800c25c <siprintf>:
 800c25c:	b40e      	push	{r1, r2, r3}
 800c25e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c262:	b510      	push	{r4, lr}
 800c264:	2400      	movs	r4, #0
 800c266:	b09d      	sub	sp, #116	@ 0x74
 800c268:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c26a:	9002      	str	r0, [sp, #8]
 800c26c:	9006      	str	r0, [sp, #24]
 800c26e:	9107      	str	r1, [sp, #28]
 800c270:	9104      	str	r1, [sp, #16]
 800c272:	4809      	ldr	r0, [pc, #36]	@ (800c298 <siprintf+0x3c>)
 800c274:	4909      	ldr	r1, [pc, #36]	@ (800c29c <siprintf+0x40>)
 800c276:	f853 2b04 	ldr.w	r2, [r3], #4
 800c27a:	9105      	str	r1, [sp, #20]
 800c27c:	6800      	ldr	r0, [r0, #0]
 800c27e:	a902      	add	r1, sp, #8
 800c280:	9301      	str	r3, [sp, #4]
 800c282:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c284:	f002 fc56 	bl	800eb34 <_svfiprintf_r>
 800c288:	9b02      	ldr	r3, [sp, #8]
 800c28a:	701c      	strb	r4, [r3, #0]
 800c28c:	b01d      	add	sp, #116	@ 0x74
 800c28e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c292:	b003      	add	sp, #12
 800c294:	4770      	bx	lr
 800c296:	bf00      	nop
 800c298:	200080ac 	.word	0x200080ac
 800c29c:	ffff0208 	.word	0xffff0208

0800c2a0 <__sread>:
 800c2a0:	b510      	push	{r4, lr}
 800c2a2:	460c      	mov	r4, r1
 800c2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2a8:	f000 f900 	bl	800c4ac <_read_r>
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	bfab      	itete	ge
 800c2b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c2b2:	89a3      	ldrhlt	r3, [r4, #12]
 800c2b4:	181b      	addge	r3, r3, r0
 800c2b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c2ba:	bfac      	ite	ge
 800c2bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c2be:	81a3      	strhlt	r3, [r4, #12]
 800c2c0:	bd10      	pop	{r4, pc}

0800c2c2 <__swrite>:
 800c2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c6:	461f      	mov	r7, r3
 800c2c8:	898b      	ldrh	r3, [r1, #12]
 800c2ca:	4605      	mov	r5, r0
 800c2cc:	05db      	lsls	r3, r3, #23
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	4616      	mov	r6, r2
 800c2d2:	d505      	bpl.n	800c2e0 <__swrite+0x1e>
 800c2d4:	2302      	movs	r3, #2
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2dc:	f000 f8d4 	bl	800c488 <_lseek_r>
 800c2e0:	89a3      	ldrh	r3, [r4, #12]
 800c2e2:	4632      	mov	r2, r6
 800c2e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c2e8:	81a3      	strh	r3, [r4, #12]
 800c2ea:	4628      	mov	r0, r5
 800c2ec:	463b      	mov	r3, r7
 800c2ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2f6:	f000 b8eb 	b.w	800c4d0 <_write_r>

0800c2fa <__sseek>:
 800c2fa:	b510      	push	{r4, lr}
 800c2fc:	460c      	mov	r4, r1
 800c2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c302:	f000 f8c1 	bl	800c488 <_lseek_r>
 800c306:	1c43      	adds	r3, r0, #1
 800c308:	89a3      	ldrh	r3, [r4, #12]
 800c30a:	bf15      	itete	ne
 800c30c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c30e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c312:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c316:	81a3      	strheq	r3, [r4, #12]
 800c318:	bf18      	it	ne
 800c31a:	81a3      	strhne	r3, [r4, #12]
 800c31c:	bd10      	pop	{r4, pc}

0800c31e <__sclose>:
 800c31e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c322:	f000 b8a1 	b.w	800c468 <_close_r>

0800c326 <__swbuf_r>:
 800c326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c328:	460e      	mov	r6, r1
 800c32a:	4614      	mov	r4, r2
 800c32c:	4605      	mov	r5, r0
 800c32e:	b118      	cbz	r0, 800c338 <__swbuf_r+0x12>
 800c330:	6a03      	ldr	r3, [r0, #32]
 800c332:	b90b      	cbnz	r3, 800c338 <__swbuf_r+0x12>
 800c334:	f7ff fefe 	bl	800c134 <__sinit>
 800c338:	69a3      	ldr	r3, [r4, #24]
 800c33a:	60a3      	str	r3, [r4, #8]
 800c33c:	89a3      	ldrh	r3, [r4, #12]
 800c33e:	071a      	lsls	r2, r3, #28
 800c340:	d501      	bpl.n	800c346 <__swbuf_r+0x20>
 800c342:	6923      	ldr	r3, [r4, #16]
 800c344:	b943      	cbnz	r3, 800c358 <__swbuf_r+0x32>
 800c346:	4621      	mov	r1, r4
 800c348:	4628      	mov	r0, r5
 800c34a:	f000 f82b 	bl	800c3a4 <__swsetup_r>
 800c34e:	b118      	cbz	r0, 800c358 <__swbuf_r+0x32>
 800c350:	f04f 37ff 	mov.w	r7, #4294967295
 800c354:	4638      	mov	r0, r7
 800c356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c358:	6823      	ldr	r3, [r4, #0]
 800c35a:	6922      	ldr	r2, [r4, #16]
 800c35c:	b2f6      	uxtb	r6, r6
 800c35e:	1a98      	subs	r0, r3, r2
 800c360:	6963      	ldr	r3, [r4, #20]
 800c362:	4637      	mov	r7, r6
 800c364:	4283      	cmp	r3, r0
 800c366:	dc05      	bgt.n	800c374 <__swbuf_r+0x4e>
 800c368:	4621      	mov	r1, r4
 800c36a:	4628      	mov	r0, r5
 800c36c:	f002 fe9e 	bl	800f0ac <_fflush_r>
 800c370:	2800      	cmp	r0, #0
 800c372:	d1ed      	bne.n	800c350 <__swbuf_r+0x2a>
 800c374:	68a3      	ldr	r3, [r4, #8]
 800c376:	3b01      	subs	r3, #1
 800c378:	60a3      	str	r3, [r4, #8]
 800c37a:	6823      	ldr	r3, [r4, #0]
 800c37c:	1c5a      	adds	r2, r3, #1
 800c37e:	6022      	str	r2, [r4, #0]
 800c380:	701e      	strb	r6, [r3, #0]
 800c382:	6962      	ldr	r2, [r4, #20]
 800c384:	1c43      	adds	r3, r0, #1
 800c386:	429a      	cmp	r2, r3
 800c388:	d004      	beq.n	800c394 <__swbuf_r+0x6e>
 800c38a:	89a3      	ldrh	r3, [r4, #12]
 800c38c:	07db      	lsls	r3, r3, #31
 800c38e:	d5e1      	bpl.n	800c354 <__swbuf_r+0x2e>
 800c390:	2e0a      	cmp	r6, #10
 800c392:	d1df      	bne.n	800c354 <__swbuf_r+0x2e>
 800c394:	4621      	mov	r1, r4
 800c396:	4628      	mov	r0, r5
 800c398:	f002 fe88 	bl	800f0ac <_fflush_r>
 800c39c:	2800      	cmp	r0, #0
 800c39e:	d0d9      	beq.n	800c354 <__swbuf_r+0x2e>
 800c3a0:	e7d6      	b.n	800c350 <__swbuf_r+0x2a>
	...

0800c3a4 <__swsetup_r>:
 800c3a4:	b538      	push	{r3, r4, r5, lr}
 800c3a6:	4b29      	ldr	r3, [pc, #164]	@ (800c44c <__swsetup_r+0xa8>)
 800c3a8:	4605      	mov	r5, r0
 800c3aa:	6818      	ldr	r0, [r3, #0]
 800c3ac:	460c      	mov	r4, r1
 800c3ae:	b118      	cbz	r0, 800c3b8 <__swsetup_r+0x14>
 800c3b0:	6a03      	ldr	r3, [r0, #32]
 800c3b2:	b90b      	cbnz	r3, 800c3b8 <__swsetup_r+0x14>
 800c3b4:	f7ff febe 	bl	800c134 <__sinit>
 800c3b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3bc:	0719      	lsls	r1, r3, #28
 800c3be:	d422      	bmi.n	800c406 <__swsetup_r+0x62>
 800c3c0:	06da      	lsls	r2, r3, #27
 800c3c2:	d407      	bmi.n	800c3d4 <__swsetup_r+0x30>
 800c3c4:	2209      	movs	r2, #9
 800c3c6:	602a      	str	r2, [r5, #0]
 800c3c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c3d0:	81a3      	strh	r3, [r4, #12]
 800c3d2:	e033      	b.n	800c43c <__swsetup_r+0x98>
 800c3d4:	0758      	lsls	r0, r3, #29
 800c3d6:	d512      	bpl.n	800c3fe <__swsetup_r+0x5a>
 800c3d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3da:	b141      	cbz	r1, 800c3ee <__swsetup_r+0x4a>
 800c3dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3e0:	4299      	cmp	r1, r3
 800c3e2:	d002      	beq.n	800c3ea <__swsetup_r+0x46>
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	f000 ff2f 	bl	800d248 <_free_r>
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3ee:	89a3      	ldrh	r3, [r4, #12]
 800c3f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c3f4:	81a3      	strh	r3, [r4, #12]
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	6063      	str	r3, [r4, #4]
 800c3fa:	6923      	ldr	r3, [r4, #16]
 800c3fc:	6023      	str	r3, [r4, #0]
 800c3fe:	89a3      	ldrh	r3, [r4, #12]
 800c400:	f043 0308 	orr.w	r3, r3, #8
 800c404:	81a3      	strh	r3, [r4, #12]
 800c406:	6923      	ldr	r3, [r4, #16]
 800c408:	b94b      	cbnz	r3, 800c41e <__swsetup_r+0x7a>
 800c40a:	89a3      	ldrh	r3, [r4, #12]
 800c40c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c414:	d003      	beq.n	800c41e <__swsetup_r+0x7a>
 800c416:	4621      	mov	r1, r4
 800c418:	4628      	mov	r0, r5
 800c41a:	f002 fe94 	bl	800f146 <__smakebuf_r>
 800c41e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c422:	f013 0201 	ands.w	r2, r3, #1
 800c426:	d00a      	beq.n	800c43e <__swsetup_r+0x9a>
 800c428:	2200      	movs	r2, #0
 800c42a:	60a2      	str	r2, [r4, #8]
 800c42c:	6962      	ldr	r2, [r4, #20]
 800c42e:	4252      	negs	r2, r2
 800c430:	61a2      	str	r2, [r4, #24]
 800c432:	6922      	ldr	r2, [r4, #16]
 800c434:	b942      	cbnz	r2, 800c448 <__swsetup_r+0xa4>
 800c436:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c43a:	d1c5      	bne.n	800c3c8 <__swsetup_r+0x24>
 800c43c:	bd38      	pop	{r3, r4, r5, pc}
 800c43e:	0799      	lsls	r1, r3, #30
 800c440:	bf58      	it	pl
 800c442:	6962      	ldrpl	r2, [r4, #20]
 800c444:	60a2      	str	r2, [r4, #8]
 800c446:	e7f4      	b.n	800c432 <__swsetup_r+0x8e>
 800c448:	2000      	movs	r0, #0
 800c44a:	e7f7      	b.n	800c43c <__swsetup_r+0x98>
 800c44c:	200080ac 	.word	0x200080ac

0800c450 <memset>:
 800c450:	4603      	mov	r3, r0
 800c452:	4402      	add	r2, r0
 800c454:	4293      	cmp	r3, r2
 800c456:	d100      	bne.n	800c45a <memset+0xa>
 800c458:	4770      	bx	lr
 800c45a:	f803 1b01 	strb.w	r1, [r3], #1
 800c45e:	e7f9      	b.n	800c454 <memset+0x4>

0800c460 <_localeconv_r>:
 800c460:	4800      	ldr	r0, [pc, #0]	@ (800c464 <_localeconv_r+0x4>)
 800c462:	4770      	bx	lr
 800c464:	200081ec 	.word	0x200081ec

0800c468 <_close_r>:
 800c468:	b538      	push	{r3, r4, r5, lr}
 800c46a:	2300      	movs	r3, #0
 800c46c:	4d05      	ldr	r5, [pc, #20]	@ (800c484 <_close_r+0x1c>)
 800c46e:	4604      	mov	r4, r0
 800c470:	4608      	mov	r0, r1
 800c472:	602b      	str	r3, [r5, #0]
 800c474:	f7fa fd9c 	bl	8006fb0 <_close>
 800c478:	1c43      	adds	r3, r0, #1
 800c47a:	d102      	bne.n	800c482 <_close_r+0x1a>
 800c47c:	682b      	ldr	r3, [r5, #0]
 800c47e:	b103      	cbz	r3, 800c482 <_close_r+0x1a>
 800c480:	6023      	str	r3, [r4, #0]
 800c482:	bd38      	pop	{r3, r4, r5, pc}
 800c484:	2000ba20 	.word	0x2000ba20

0800c488 <_lseek_r>:
 800c488:	b538      	push	{r3, r4, r5, lr}
 800c48a:	4604      	mov	r4, r0
 800c48c:	4608      	mov	r0, r1
 800c48e:	4611      	mov	r1, r2
 800c490:	2200      	movs	r2, #0
 800c492:	4d05      	ldr	r5, [pc, #20]	@ (800c4a8 <_lseek_r+0x20>)
 800c494:	602a      	str	r2, [r5, #0]
 800c496:	461a      	mov	r2, r3
 800c498:	f7fa fd94 	bl	8006fc4 <_lseek>
 800c49c:	1c43      	adds	r3, r0, #1
 800c49e:	d102      	bne.n	800c4a6 <_lseek_r+0x1e>
 800c4a0:	682b      	ldr	r3, [r5, #0]
 800c4a2:	b103      	cbz	r3, 800c4a6 <_lseek_r+0x1e>
 800c4a4:	6023      	str	r3, [r4, #0]
 800c4a6:	bd38      	pop	{r3, r4, r5, pc}
 800c4a8:	2000ba20 	.word	0x2000ba20

0800c4ac <_read_r>:
 800c4ac:	b538      	push	{r3, r4, r5, lr}
 800c4ae:	4604      	mov	r4, r0
 800c4b0:	4608      	mov	r0, r1
 800c4b2:	4611      	mov	r1, r2
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	4d05      	ldr	r5, [pc, #20]	@ (800c4cc <_read_r+0x20>)
 800c4b8:	602a      	str	r2, [r5, #0]
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	f7fa fd5a 	bl	8006f74 <_read>
 800c4c0:	1c43      	adds	r3, r0, #1
 800c4c2:	d102      	bne.n	800c4ca <_read_r+0x1e>
 800c4c4:	682b      	ldr	r3, [r5, #0]
 800c4c6:	b103      	cbz	r3, 800c4ca <_read_r+0x1e>
 800c4c8:	6023      	str	r3, [r4, #0]
 800c4ca:	bd38      	pop	{r3, r4, r5, pc}
 800c4cc:	2000ba20 	.word	0x2000ba20

0800c4d0 <_write_r>:
 800c4d0:	b538      	push	{r3, r4, r5, lr}
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	4608      	mov	r0, r1
 800c4d6:	4611      	mov	r1, r2
 800c4d8:	2200      	movs	r2, #0
 800c4da:	4d05      	ldr	r5, [pc, #20]	@ (800c4f0 <_write_r+0x20>)
 800c4dc:	602a      	str	r2, [r5, #0]
 800c4de:	461a      	mov	r2, r3
 800c4e0:	f7fa fd58 	bl	8006f94 <_write>
 800c4e4:	1c43      	adds	r3, r0, #1
 800c4e6:	d102      	bne.n	800c4ee <_write_r+0x1e>
 800c4e8:	682b      	ldr	r3, [r5, #0]
 800c4ea:	b103      	cbz	r3, 800c4ee <_write_r+0x1e>
 800c4ec:	6023      	str	r3, [r4, #0]
 800c4ee:	bd38      	pop	{r3, r4, r5, pc}
 800c4f0:	2000ba20 	.word	0x2000ba20

0800c4f4 <__errno>:
 800c4f4:	4b01      	ldr	r3, [pc, #4]	@ (800c4fc <__errno+0x8>)
 800c4f6:	6818      	ldr	r0, [r3, #0]
 800c4f8:	4770      	bx	lr
 800c4fa:	bf00      	nop
 800c4fc:	200080ac 	.word	0x200080ac

0800c500 <__libc_init_array>:
 800c500:	b570      	push	{r4, r5, r6, lr}
 800c502:	2600      	movs	r6, #0
 800c504:	4d0c      	ldr	r5, [pc, #48]	@ (800c538 <__libc_init_array+0x38>)
 800c506:	4c0d      	ldr	r4, [pc, #52]	@ (800c53c <__libc_init_array+0x3c>)
 800c508:	1b64      	subs	r4, r4, r5
 800c50a:	10a4      	asrs	r4, r4, #2
 800c50c:	42a6      	cmp	r6, r4
 800c50e:	d109      	bne.n	800c524 <__libc_init_array+0x24>
 800c510:	f003 fad8 	bl	800fac4 <_init>
 800c514:	2600      	movs	r6, #0
 800c516:	4d0a      	ldr	r5, [pc, #40]	@ (800c540 <__libc_init_array+0x40>)
 800c518:	4c0a      	ldr	r4, [pc, #40]	@ (800c544 <__libc_init_array+0x44>)
 800c51a:	1b64      	subs	r4, r4, r5
 800c51c:	10a4      	asrs	r4, r4, #2
 800c51e:	42a6      	cmp	r6, r4
 800c520:	d105      	bne.n	800c52e <__libc_init_array+0x2e>
 800c522:	bd70      	pop	{r4, r5, r6, pc}
 800c524:	f855 3b04 	ldr.w	r3, [r5], #4
 800c528:	4798      	blx	r3
 800c52a:	3601      	adds	r6, #1
 800c52c:	e7ee      	b.n	800c50c <__libc_init_array+0xc>
 800c52e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c532:	4798      	blx	r3
 800c534:	3601      	adds	r6, #1
 800c536:	e7f2      	b.n	800c51e <__libc_init_array+0x1e>
 800c538:	080119bc 	.word	0x080119bc
 800c53c:	080119bc 	.word	0x080119bc
 800c540:	080119bc 	.word	0x080119bc
 800c544:	080119c0 	.word	0x080119c0

0800c548 <__retarget_lock_init_recursive>:
 800c548:	4770      	bx	lr

0800c54a <__retarget_lock_acquire_recursive>:
 800c54a:	4770      	bx	lr

0800c54c <__retarget_lock_release_recursive>:
 800c54c:	4770      	bx	lr

0800c54e <memchr>:
 800c54e:	4603      	mov	r3, r0
 800c550:	b510      	push	{r4, lr}
 800c552:	b2c9      	uxtb	r1, r1
 800c554:	4402      	add	r2, r0
 800c556:	4293      	cmp	r3, r2
 800c558:	4618      	mov	r0, r3
 800c55a:	d101      	bne.n	800c560 <memchr+0x12>
 800c55c:	2000      	movs	r0, #0
 800c55e:	e003      	b.n	800c568 <memchr+0x1a>
 800c560:	7804      	ldrb	r4, [r0, #0]
 800c562:	3301      	adds	r3, #1
 800c564:	428c      	cmp	r4, r1
 800c566:	d1f6      	bne.n	800c556 <memchr+0x8>
 800c568:	bd10      	pop	{r4, pc}

0800c56a <memcpy>:
 800c56a:	440a      	add	r2, r1
 800c56c:	4291      	cmp	r1, r2
 800c56e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c572:	d100      	bne.n	800c576 <memcpy+0xc>
 800c574:	4770      	bx	lr
 800c576:	b510      	push	{r4, lr}
 800c578:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c57c:	4291      	cmp	r1, r2
 800c57e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c582:	d1f9      	bne.n	800c578 <memcpy+0xe>
 800c584:	bd10      	pop	{r4, pc}
	...

0800c588 <nanf>:
 800c588:	4800      	ldr	r0, [pc, #0]	@ (800c58c <nanf+0x4>)
 800c58a:	4770      	bx	lr
 800c58c:	7fc00000 	.word	0x7fc00000

0800c590 <quorem>:
 800c590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c594:	6903      	ldr	r3, [r0, #16]
 800c596:	690c      	ldr	r4, [r1, #16]
 800c598:	4607      	mov	r7, r0
 800c59a:	42a3      	cmp	r3, r4
 800c59c:	db7e      	blt.n	800c69c <quorem+0x10c>
 800c59e:	3c01      	subs	r4, #1
 800c5a0:	00a3      	lsls	r3, r4, #2
 800c5a2:	f100 0514 	add.w	r5, r0, #20
 800c5a6:	f101 0814 	add.w	r8, r1, #20
 800c5aa:	9300      	str	r3, [sp, #0]
 800c5ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5b0:	9301      	str	r3, [sp, #4]
 800c5b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	fbb2 f6f3 	udiv	r6, r2, r3
 800c5c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5c6:	d32e      	bcc.n	800c626 <quorem+0x96>
 800c5c8:	f04f 0a00 	mov.w	sl, #0
 800c5cc:	46c4      	mov	ip, r8
 800c5ce:	46ae      	mov	lr, r5
 800c5d0:	46d3      	mov	fp, sl
 800c5d2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c5d6:	b298      	uxth	r0, r3
 800c5d8:	fb06 a000 	mla	r0, r6, r0, sl
 800c5dc:	0c1b      	lsrs	r3, r3, #16
 800c5de:	0c02      	lsrs	r2, r0, #16
 800c5e0:	fb06 2303 	mla	r3, r6, r3, r2
 800c5e4:	f8de 2000 	ldr.w	r2, [lr]
 800c5e8:	b280      	uxth	r0, r0
 800c5ea:	b292      	uxth	r2, r2
 800c5ec:	1a12      	subs	r2, r2, r0
 800c5ee:	445a      	add	r2, fp
 800c5f0:	f8de 0000 	ldr.w	r0, [lr]
 800c5f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c5fe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c602:	b292      	uxth	r2, r2
 800c604:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c608:	45e1      	cmp	r9, ip
 800c60a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c60e:	f84e 2b04 	str.w	r2, [lr], #4
 800c612:	d2de      	bcs.n	800c5d2 <quorem+0x42>
 800c614:	9b00      	ldr	r3, [sp, #0]
 800c616:	58eb      	ldr	r3, [r5, r3]
 800c618:	b92b      	cbnz	r3, 800c626 <quorem+0x96>
 800c61a:	9b01      	ldr	r3, [sp, #4]
 800c61c:	3b04      	subs	r3, #4
 800c61e:	429d      	cmp	r5, r3
 800c620:	461a      	mov	r2, r3
 800c622:	d32f      	bcc.n	800c684 <quorem+0xf4>
 800c624:	613c      	str	r4, [r7, #16]
 800c626:	4638      	mov	r0, r7
 800c628:	f001 f9c8 	bl	800d9bc <__mcmp>
 800c62c:	2800      	cmp	r0, #0
 800c62e:	db25      	blt.n	800c67c <quorem+0xec>
 800c630:	4629      	mov	r1, r5
 800c632:	2000      	movs	r0, #0
 800c634:	f858 2b04 	ldr.w	r2, [r8], #4
 800c638:	f8d1 c000 	ldr.w	ip, [r1]
 800c63c:	fa1f fe82 	uxth.w	lr, r2
 800c640:	fa1f f38c 	uxth.w	r3, ip
 800c644:	eba3 030e 	sub.w	r3, r3, lr
 800c648:	4403      	add	r3, r0
 800c64a:	0c12      	lsrs	r2, r2, #16
 800c64c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c650:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c654:	b29b      	uxth	r3, r3
 800c656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c65a:	45c1      	cmp	r9, r8
 800c65c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c660:	f841 3b04 	str.w	r3, [r1], #4
 800c664:	d2e6      	bcs.n	800c634 <quorem+0xa4>
 800c666:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c66a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c66e:	b922      	cbnz	r2, 800c67a <quorem+0xea>
 800c670:	3b04      	subs	r3, #4
 800c672:	429d      	cmp	r5, r3
 800c674:	461a      	mov	r2, r3
 800c676:	d30b      	bcc.n	800c690 <quorem+0x100>
 800c678:	613c      	str	r4, [r7, #16]
 800c67a:	3601      	adds	r6, #1
 800c67c:	4630      	mov	r0, r6
 800c67e:	b003      	add	sp, #12
 800c680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c684:	6812      	ldr	r2, [r2, #0]
 800c686:	3b04      	subs	r3, #4
 800c688:	2a00      	cmp	r2, #0
 800c68a:	d1cb      	bne.n	800c624 <quorem+0x94>
 800c68c:	3c01      	subs	r4, #1
 800c68e:	e7c6      	b.n	800c61e <quorem+0x8e>
 800c690:	6812      	ldr	r2, [r2, #0]
 800c692:	3b04      	subs	r3, #4
 800c694:	2a00      	cmp	r2, #0
 800c696:	d1ef      	bne.n	800c678 <quorem+0xe8>
 800c698:	3c01      	subs	r4, #1
 800c69a:	e7ea      	b.n	800c672 <quorem+0xe2>
 800c69c:	2000      	movs	r0, #0
 800c69e:	e7ee      	b.n	800c67e <quorem+0xee>

0800c6a0 <_dtoa_r>:
 800c6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a4:	4614      	mov	r4, r2
 800c6a6:	461d      	mov	r5, r3
 800c6a8:	69c7      	ldr	r7, [r0, #28]
 800c6aa:	b097      	sub	sp, #92	@ 0x5c
 800c6ac:	4681      	mov	r9, r0
 800c6ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c6b2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800c6b4:	b97f      	cbnz	r7, 800c6d6 <_dtoa_r+0x36>
 800c6b6:	2010      	movs	r0, #16
 800c6b8:	f000 fe0e 	bl	800d2d8 <malloc>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	f8c9 001c 	str.w	r0, [r9, #28]
 800c6c2:	b920      	cbnz	r0, 800c6ce <_dtoa_r+0x2e>
 800c6c4:	21ef      	movs	r1, #239	@ 0xef
 800c6c6:	4bac      	ldr	r3, [pc, #688]	@ (800c978 <_dtoa_r+0x2d8>)
 800c6c8:	48ac      	ldr	r0, [pc, #688]	@ (800c97c <_dtoa_r+0x2dc>)
 800c6ca:	f002 fddd 	bl	800f288 <__assert_func>
 800c6ce:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c6d2:	6007      	str	r7, [r0, #0]
 800c6d4:	60c7      	str	r7, [r0, #12]
 800c6d6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c6da:	6819      	ldr	r1, [r3, #0]
 800c6dc:	b159      	cbz	r1, 800c6f6 <_dtoa_r+0x56>
 800c6de:	685a      	ldr	r2, [r3, #4]
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	4093      	lsls	r3, r2
 800c6e4:	604a      	str	r2, [r1, #4]
 800c6e6:	608b      	str	r3, [r1, #8]
 800c6e8:	4648      	mov	r0, r9
 800c6ea:	f000 feeb 	bl	800d4c4 <_Bfree>
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c6f4:	601a      	str	r2, [r3, #0]
 800c6f6:	1e2b      	subs	r3, r5, #0
 800c6f8:	bfaf      	iteee	ge
 800c6fa:	2300      	movge	r3, #0
 800c6fc:	2201      	movlt	r2, #1
 800c6fe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c702:	9307      	strlt	r3, [sp, #28]
 800c704:	bfa8      	it	ge
 800c706:	6033      	strge	r3, [r6, #0]
 800c708:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800c70c:	4b9c      	ldr	r3, [pc, #624]	@ (800c980 <_dtoa_r+0x2e0>)
 800c70e:	bfb8      	it	lt
 800c710:	6032      	strlt	r2, [r6, #0]
 800c712:	ea33 0308 	bics.w	r3, r3, r8
 800c716:	d112      	bne.n	800c73e <_dtoa_r+0x9e>
 800c718:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c71c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c71e:	6013      	str	r3, [r2, #0]
 800c720:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c724:	4323      	orrs	r3, r4
 800c726:	f000 855e 	beq.w	800d1e6 <_dtoa_r+0xb46>
 800c72a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c72c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c984 <_dtoa_r+0x2e4>
 800c730:	2b00      	cmp	r3, #0
 800c732:	f000 8560 	beq.w	800d1f6 <_dtoa_r+0xb56>
 800c736:	f10a 0303 	add.w	r3, sl, #3
 800c73a:	f000 bd5a 	b.w	800d1f2 <_dtoa_r+0xb52>
 800c73e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c742:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c746:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c74a:	2200      	movs	r2, #0
 800c74c:	2300      	movs	r3, #0
 800c74e:	f7f4 f99b 	bl	8000a88 <__aeabi_dcmpeq>
 800c752:	4607      	mov	r7, r0
 800c754:	b158      	cbz	r0, 800c76e <_dtoa_r+0xce>
 800c756:	2301      	movs	r3, #1
 800c758:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c75a:	6013      	str	r3, [r2, #0]
 800c75c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c75e:	b113      	cbz	r3, 800c766 <_dtoa_r+0xc6>
 800c760:	4b89      	ldr	r3, [pc, #548]	@ (800c988 <_dtoa_r+0x2e8>)
 800c762:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c764:	6013      	str	r3, [r2, #0]
 800c766:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800c98c <_dtoa_r+0x2ec>
 800c76a:	f000 bd44 	b.w	800d1f6 <_dtoa_r+0xb56>
 800c76e:	ab14      	add	r3, sp, #80	@ 0x50
 800c770:	9301      	str	r3, [sp, #4]
 800c772:	ab15      	add	r3, sp, #84	@ 0x54
 800c774:	9300      	str	r3, [sp, #0]
 800c776:	4648      	mov	r0, r9
 800c778:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c77c:	f001 fa36 	bl	800dbec <__d2b>
 800c780:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800c784:	9003      	str	r0, [sp, #12]
 800c786:	2e00      	cmp	r6, #0
 800c788:	d078      	beq.n	800c87c <_dtoa_r+0x1dc>
 800c78a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c78e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c790:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c798:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c79c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c7a0:	9712      	str	r7, [sp, #72]	@ 0x48
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	4b7a      	ldr	r3, [pc, #488]	@ (800c990 <_dtoa_r+0x2f0>)
 800c7a8:	f7f3 fd4e 	bl	8000248 <__aeabi_dsub>
 800c7ac:	a36c      	add	r3, pc, #432	@ (adr r3, 800c960 <_dtoa_r+0x2c0>)
 800c7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b2:	f7f3 ff01 	bl	80005b8 <__aeabi_dmul>
 800c7b6:	a36c      	add	r3, pc, #432	@ (adr r3, 800c968 <_dtoa_r+0x2c8>)
 800c7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7bc:	f7f3 fd46 	bl	800024c <__adddf3>
 800c7c0:	4604      	mov	r4, r0
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	460d      	mov	r5, r1
 800c7c6:	f7f3 fe8d 	bl	80004e4 <__aeabi_i2d>
 800c7ca:	a369      	add	r3, pc, #420	@ (adr r3, 800c970 <_dtoa_r+0x2d0>)
 800c7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d0:	f7f3 fef2 	bl	80005b8 <__aeabi_dmul>
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	460b      	mov	r3, r1
 800c7d8:	4620      	mov	r0, r4
 800c7da:	4629      	mov	r1, r5
 800c7dc:	f7f3 fd36 	bl	800024c <__adddf3>
 800c7e0:	4604      	mov	r4, r0
 800c7e2:	460d      	mov	r5, r1
 800c7e4:	f7f4 f998 	bl	8000b18 <__aeabi_d2iz>
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	4607      	mov	r7, r0
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	f7f4 f953 	bl	8000a9c <__aeabi_dcmplt>
 800c7f6:	b140      	cbz	r0, 800c80a <_dtoa_r+0x16a>
 800c7f8:	4638      	mov	r0, r7
 800c7fa:	f7f3 fe73 	bl	80004e4 <__aeabi_i2d>
 800c7fe:	4622      	mov	r2, r4
 800c800:	462b      	mov	r3, r5
 800c802:	f7f4 f941 	bl	8000a88 <__aeabi_dcmpeq>
 800c806:	b900      	cbnz	r0, 800c80a <_dtoa_r+0x16a>
 800c808:	3f01      	subs	r7, #1
 800c80a:	2f16      	cmp	r7, #22
 800c80c:	d854      	bhi.n	800c8b8 <_dtoa_r+0x218>
 800c80e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c812:	4b60      	ldr	r3, [pc, #384]	@ (800c994 <_dtoa_r+0x2f4>)
 800c814:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81c:	f7f4 f93e 	bl	8000a9c <__aeabi_dcmplt>
 800c820:	2800      	cmp	r0, #0
 800c822:	d04b      	beq.n	800c8bc <_dtoa_r+0x21c>
 800c824:	2300      	movs	r3, #0
 800c826:	3f01      	subs	r7, #1
 800c828:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c82a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c82c:	1b9b      	subs	r3, r3, r6
 800c82e:	1e5a      	subs	r2, r3, #1
 800c830:	bf49      	itett	mi
 800c832:	f1c3 0301 	rsbmi	r3, r3, #1
 800c836:	2300      	movpl	r3, #0
 800c838:	9304      	strmi	r3, [sp, #16]
 800c83a:	2300      	movmi	r3, #0
 800c83c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c83e:	bf54      	ite	pl
 800c840:	9304      	strpl	r3, [sp, #16]
 800c842:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800c844:	2f00      	cmp	r7, #0
 800c846:	db3b      	blt.n	800c8c0 <_dtoa_r+0x220>
 800c848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c84a:	970e      	str	r7, [sp, #56]	@ 0x38
 800c84c:	443b      	add	r3, r7
 800c84e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c850:	2300      	movs	r3, #0
 800c852:	930a      	str	r3, [sp, #40]	@ 0x28
 800c854:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c856:	2b09      	cmp	r3, #9
 800c858:	d865      	bhi.n	800c926 <_dtoa_r+0x286>
 800c85a:	2b05      	cmp	r3, #5
 800c85c:	bfc4      	itt	gt
 800c85e:	3b04      	subgt	r3, #4
 800c860:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800c862:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c864:	bfc8      	it	gt
 800c866:	2400      	movgt	r4, #0
 800c868:	f1a3 0302 	sub.w	r3, r3, #2
 800c86c:	bfd8      	it	le
 800c86e:	2401      	movle	r4, #1
 800c870:	2b03      	cmp	r3, #3
 800c872:	d864      	bhi.n	800c93e <_dtoa_r+0x29e>
 800c874:	e8df f003 	tbb	[pc, r3]
 800c878:	2c385553 	.word	0x2c385553
 800c87c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c880:	441e      	add	r6, r3
 800c882:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c886:	2b20      	cmp	r3, #32
 800c888:	bfc1      	itttt	gt
 800c88a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c88e:	fa08 f803 	lslgt.w	r8, r8, r3
 800c892:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c896:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c89a:	bfd6      	itet	le
 800c89c:	f1c3 0320 	rsble	r3, r3, #32
 800c8a0:	ea48 0003 	orrgt.w	r0, r8, r3
 800c8a4:	fa04 f003 	lslle.w	r0, r4, r3
 800c8a8:	f7f3 fe0c 	bl	80004c4 <__aeabi_ui2d>
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c8b2:	3e01      	subs	r6, #1
 800c8b4:	9212      	str	r2, [sp, #72]	@ 0x48
 800c8b6:	e774      	b.n	800c7a2 <_dtoa_r+0x102>
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	e7b5      	b.n	800c828 <_dtoa_r+0x188>
 800c8bc:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c8be:	e7b4      	b.n	800c82a <_dtoa_r+0x18a>
 800c8c0:	9b04      	ldr	r3, [sp, #16]
 800c8c2:	1bdb      	subs	r3, r3, r7
 800c8c4:	9304      	str	r3, [sp, #16]
 800c8c6:	427b      	negs	r3, r7
 800c8c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	930e      	str	r3, [sp, #56]	@ 0x38
 800c8ce:	e7c1      	b.n	800c854 <_dtoa_r+0x1b4>
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c8d6:	eb07 0b03 	add.w	fp, r7, r3
 800c8da:	f10b 0301 	add.w	r3, fp, #1
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	9308      	str	r3, [sp, #32]
 800c8e2:	bfb8      	it	lt
 800c8e4:	2301      	movlt	r3, #1
 800c8e6:	e006      	b.n	800c8f6 <_dtoa_r+0x256>
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	dd28      	ble.n	800c944 <_dtoa_r+0x2a4>
 800c8f2:	469b      	mov	fp, r3
 800c8f4:	9308      	str	r3, [sp, #32]
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	2204      	movs	r2, #4
 800c8fa:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c8fe:	f102 0514 	add.w	r5, r2, #20
 800c902:	429d      	cmp	r5, r3
 800c904:	d926      	bls.n	800c954 <_dtoa_r+0x2b4>
 800c906:	6041      	str	r1, [r0, #4]
 800c908:	4648      	mov	r0, r9
 800c90a:	f000 fd9b 	bl	800d444 <_Balloc>
 800c90e:	4682      	mov	sl, r0
 800c910:	2800      	cmp	r0, #0
 800c912:	d143      	bne.n	800c99c <_dtoa_r+0x2fc>
 800c914:	4602      	mov	r2, r0
 800c916:	f240 11af 	movw	r1, #431	@ 0x1af
 800c91a:	4b1f      	ldr	r3, [pc, #124]	@ (800c998 <_dtoa_r+0x2f8>)
 800c91c:	e6d4      	b.n	800c6c8 <_dtoa_r+0x28>
 800c91e:	2300      	movs	r3, #0
 800c920:	e7e3      	b.n	800c8ea <_dtoa_r+0x24a>
 800c922:	2300      	movs	r3, #0
 800c924:	e7d5      	b.n	800c8d2 <_dtoa_r+0x232>
 800c926:	2401      	movs	r4, #1
 800c928:	2300      	movs	r3, #0
 800c92a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c92c:	9320      	str	r3, [sp, #128]	@ 0x80
 800c92e:	f04f 3bff 	mov.w	fp, #4294967295
 800c932:	2200      	movs	r2, #0
 800c934:	2312      	movs	r3, #18
 800c936:	f8cd b020 	str.w	fp, [sp, #32]
 800c93a:	9221      	str	r2, [sp, #132]	@ 0x84
 800c93c:	e7db      	b.n	800c8f6 <_dtoa_r+0x256>
 800c93e:	2301      	movs	r3, #1
 800c940:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c942:	e7f4      	b.n	800c92e <_dtoa_r+0x28e>
 800c944:	f04f 0b01 	mov.w	fp, #1
 800c948:	465b      	mov	r3, fp
 800c94a:	f8cd b020 	str.w	fp, [sp, #32]
 800c94e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800c952:	e7d0      	b.n	800c8f6 <_dtoa_r+0x256>
 800c954:	3101      	adds	r1, #1
 800c956:	0052      	lsls	r2, r2, #1
 800c958:	e7d1      	b.n	800c8fe <_dtoa_r+0x25e>
 800c95a:	bf00      	nop
 800c95c:	f3af 8000 	nop.w
 800c960:	636f4361 	.word	0x636f4361
 800c964:	3fd287a7 	.word	0x3fd287a7
 800c968:	8b60c8b3 	.word	0x8b60c8b3
 800c96c:	3fc68a28 	.word	0x3fc68a28
 800c970:	509f79fb 	.word	0x509f79fb
 800c974:	3fd34413 	.word	0x3fd34413
 800c978:	080115ce 	.word	0x080115ce
 800c97c:	080115e5 	.word	0x080115e5
 800c980:	7ff00000 	.word	0x7ff00000
 800c984:	080115ca 	.word	0x080115ca
 800c988:	08011599 	.word	0x08011599
 800c98c:	08011598 	.word	0x08011598
 800c990:	3ff80000 	.word	0x3ff80000
 800c994:	08011798 	.word	0x08011798
 800c998:	0801163d 	.word	0x0801163d
 800c99c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c9a0:	6018      	str	r0, [r3, #0]
 800c9a2:	9b08      	ldr	r3, [sp, #32]
 800c9a4:	2b0e      	cmp	r3, #14
 800c9a6:	f200 80a1 	bhi.w	800caec <_dtoa_r+0x44c>
 800c9aa:	2c00      	cmp	r4, #0
 800c9ac:	f000 809e 	beq.w	800caec <_dtoa_r+0x44c>
 800c9b0:	2f00      	cmp	r7, #0
 800c9b2:	dd33      	ble.n	800ca1c <_dtoa_r+0x37c>
 800c9b4:	4b9c      	ldr	r3, [pc, #624]	@ (800cc28 <_dtoa_r+0x588>)
 800c9b6:	f007 020f 	and.w	r2, r7, #15
 800c9ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9be:	05f8      	lsls	r0, r7, #23
 800c9c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c9c4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800c9c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c9cc:	d516      	bpl.n	800c9fc <_dtoa_r+0x35c>
 800c9ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9d2:	4b96      	ldr	r3, [pc, #600]	@ (800cc2c <_dtoa_r+0x58c>)
 800c9d4:	2603      	movs	r6, #3
 800c9d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c9da:	f7f3 ff17 	bl	800080c <__aeabi_ddiv>
 800c9de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c9e2:	f004 040f 	and.w	r4, r4, #15
 800c9e6:	4d91      	ldr	r5, [pc, #580]	@ (800cc2c <_dtoa_r+0x58c>)
 800c9e8:	b954      	cbnz	r4, 800ca00 <_dtoa_r+0x360>
 800c9ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c9ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9f2:	f7f3 ff0b 	bl	800080c <__aeabi_ddiv>
 800c9f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c9fa:	e028      	b.n	800ca4e <_dtoa_r+0x3ae>
 800c9fc:	2602      	movs	r6, #2
 800c9fe:	e7f2      	b.n	800c9e6 <_dtoa_r+0x346>
 800ca00:	07e1      	lsls	r1, r4, #31
 800ca02:	d508      	bpl.n	800ca16 <_dtoa_r+0x376>
 800ca04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ca08:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ca0c:	f7f3 fdd4 	bl	80005b8 <__aeabi_dmul>
 800ca10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ca14:	3601      	adds	r6, #1
 800ca16:	1064      	asrs	r4, r4, #1
 800ca18:	3508      	adds	r5, #8
 800ca1a:	e7e5      	b.n	800c9e8 <_dtoa_r+0x348>
 800ca1c:	f000 80af 	beq.w	800cb7e <_dtoa_r+0x4de>
 800ca20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca24:	427c      	negs	r4, r7
 800ca26:	4b80      	ldr	r3, [pc, #512]	@ (800cc28 <_dtoa_r+0x588>)
 800ca28:	f004 020f 	and.w	r2, r4, #15
 800ca2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca34:	f7f3 fdc0 	bl	80005b8 <__aeabi_dmul>
 800ca38:	2602      	movs	r6, #2
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ca40:	4d7a      	ldr	r5, [pc, #488]	@ (800cc2c <_dtoa_r+0x58c>)
 800ca42:	1124      	asrs	r4, r4, #4
 800ca44:	2c00      	cmp	r4, #0
 800ca46:	f040 808f 	bne.w	800cb68 <_dtoa_r+0x4c8>
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d1d3      	bne.n	800c9f6 <_dtoa_r+0x356>
 800ca4e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800ca52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	f000 8094 	beq.w	800cb82 <_dtoa_r+0x4e2>
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	4629      	mov	r1, r5
 800ca60:	4b73      	ldr	r3, [pc, #460]	@ (800cc30 <_dtoa_r+0x590>)
 800ca62:	f7f4 f81b 	bl	8000a9c <__aeabi_dcmplt>
 800ca66:	2800      	cmp	r0, #0
 800ca68:	f000 808b 	beq.w	800cb82 <_dtoa_r+0x4e2>
 800ca6c:	9b08      	ldr	r3, [sp, #32]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	f000 8087 	beq.w	800cb82 <_dtoa_r+0x4e2>
 800ca74:	f1bb 0f00 	cmp.w	fp, #0
 800ca78:	dd34      	ble.n	800cae4 <_dtoa_r+0x444>
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	4629      	mov	r1, r5
 800ca80:	4b6c      	ldr	r3, [pc, #432]	@ (800cc34 <_dtoa_r+0x594>)
 800ca82:	f7f3 fd99 	bl	80005b8 <__aeabi_dmul>
 800ca86:	465c      	mov	r4, fp
 800ca88:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ca8c:	f107 38ff 	add.w	r8, r7, #4294967295
 800ca90:	3601      	adds	r6, #1
 800ca92:	4630      	mov	r0, r6
 800ca94:	f7f3 fd26 	bl	80004e4 <__aeabi_i2d>
 800ca98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca9c:	f7f3 fd8c 	bl	80005b8 <__aeabi_dmul>
 800caa0:	2200      	movs	r2, #0
 800caa2:	4b65      	ldr	r3, [pc, #404]	@ (800cc38 <_dtoa_r+0x598>)
 800caa4:	f7f3 fbd2 	bl	800024c <__adddf3>
 800caa8:	4605      	mov	r5, r0
 800caaa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800caae:	2c00      	cmp	r4, #0
 800cab0:	d16a      	bne.n	800cb88 <_dtoa_r+0x4e8>
 800cab2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cab6:	2200      	movs	r2, #0
 800cab8:	4b60      	ldr	r3, [pc, #384]	@ (800cc3c <_dtoa_r+0x59c>)
 800caba:	f7f3 fbc5 	bl	8000248 <__aeabi_dsub>
 800cabe:	4602      	mov	r2, r0
 800cac0:	460b      	mov	r3, r1
 800cac2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cac6:	462a      	mov	r2, r5
 800cac8:	4633      	mov	r3, r6
 800caca:	f7f4 f805 	bl	8000ad8 <__aeabi_dcmpgt>
 800cace:	2800      	cmp	r0, #0
 800cad0:	f040 8298 	bne.w	800d004 <_dtoa_r+0x964>
 800cad4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cad8:	462a      	mov	r2, r5
 800cada:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cade:	f7f3 ffdd 	bl	8000a9c <__aeabi_dcmplt>
 800cae2:	bb38      	cbnz	r0, 800cb34 <_dtoa_r+0x494>
 800cae4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cae8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800caec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800caee:	2b00      	cmp	r3, #0
 800caf0:	f2c0 8157 	blt.w	800cda2 <_dtoa_r+0x702>
 800caf4:	2f0e      	cmp	r7, #14
 800caf6:	f300 8154 	bgt.w	800cda2 <_dtoa_r+0x702>
 800cafa:	4b4b      	ldr	r3, [pc, #300]	@ (800cc28 <_dtoa_r+0x588>)
 800cafc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cb00:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cb04:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cb08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	f280 80e5 	bge.w	800ccda <_dtoa_r+0x63a>
 800cb10:	9b08      	ldr	r3, [sp, #32]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	f300 80e1 	bgt.w	800ccda <_dtoa_r+0x63a>
 800cb18:	d10c      	bne.n	800cb34 <_dtoa_r+0x494>
 800cb1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	4b46      	ldr	r3, [pc, #280]	@ (800cc3c <_dtoa_r+0x59c>)
 800cb22:	f7f3 fd49 	bl	80005b8 <__aeabi_dmul>
 800cb26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cb2a:	f7f3 ffcb 	bl	8000ac4 <__aeabi_dcmpge>
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	f000 8266 	beq.w	800d000 <_dtoa_r+0x960>
 800cb34:	2400      	movs	r4, #0
 800cb36:	4625      	mov	r5, r4
 800cb38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cb3a:	4656      	mov	r6, sl
 800cb3c:	ea6f 0803 	mvn.w	r8, r3
 800cb40:	2700      	movs	r7, #0
 800cb42:	4621      	mov	r1, r4
 800cb44:	4648      	mov	r0, r9
 800cb46:	f000 fcbd 	bl	800d4c4 <_Bfree>
 800cb4a:	2d00      	cmp	r5, #0
 800cb4c:	f000 80bd 	beq.w	800ccca <_dtoa_r+0x62a>
 800cb50:	b12f      	cbz	r7, 800cb5e <_dtoa_r+0x4be>
 800cb52:	42af      	cmp	r7, r5
 800cb54:	d003      	beq.n	800cb5e <_dtoa_r+0x4be>
 800cb56:	4639      	mov	r1, r7
 800cb58:	4648      	mov	r0, r9
 800cb5a:	f000 fcb3 	bl	800d4c4 <_Bfree>
 800cb5e:	4629      	mov	r1, r5
 800cb60:	4648      	mov	r0, r9
 800cb62:	f000 fcaf 	bl	800d4c4 <_Bfree>
 800cb66:	e0b0      	b.n	800ccca <_dtoa_r+0x62a>
 800cb68:	07e2      	lsls	r2, r4, #31
 800cb6a:	d505      	bpl.n	800cb78 <_dtoa_r+0x4d8>
 800cb6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cb70:	f7f3 fd22 	bl	80005b8 <__aeabi_dmul>
 800cb74:	2301      	movs	r3, #1
 800cb76:	3601      	adds	r6, #1
 800cb78:	1064      	asrs	r4, r4, #1
 800cb7a:	3508      	adds	r5, #8
 800cb7c:	e762      	b.n	800ca44 <_dtoa_r+0x3a4>
 800cb7e:	2602      	movs	r6, #2
 800cb80:	e765      	b.n	800ca4e <_dtoa_r+0x3ae>
 800cb82:	46b8      	mov	r8, r7
 800cb84:	9c08      	ldr	r4, [sp, #32]
 800cb86:	e784      	b.n	800ca92 <_dtoa_r+0x3f2>
 800cb88:	4b27      	ldr	r3, [pc, #156]	@ (800cc28 <_dtoa_r+0x588>)
 800cb8a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cb8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cb90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb94:	4454      	add	r4, sl
 800cb96:	2900      	cmp	r1, #0
 800cb98:	d054      	beq.n	800cc44 <_dtoa_r+0x5a4>
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	4928      	ldr	r1, [pc, #160]	@ (800cc40 <_dtoa_r+0x5a0>)
 800cb9e:	f7f3 fe35 	bl	800080c <__aeabi_ddiv>
 800cba2:	4633      	mov	r3, r6
 800cba4:	462a      	mov	r2, r5
 800cba6:	f7f3 fb4f 	bl	8000248 <__aeabi_dsub>
 800cbaa:	4656      	mov	r6, sl
 800cbac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cbb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbb4:	f7f3 ffb0 	bl	8000b18 <__aeabi_d2iz>
 800cbb8:	4605      	mov	r5, r0
 800cbba:	f7f3 fc93 	bl	80004e4 <__aeabi_i2d>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbc6:	f7f3 fb3f 	bl	8000248 <__aeabi_dsub>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	460b      	mov	r3, r1
 800cbce:	3530      	adds	r5, #48	@ 0x30
 800cbd0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cbd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cbd8:	f806 5b01 	strb.w	r5, [r6], #1
 800cbdc:	f7f3 ff5e 	bl	8000a9c <__aeabi_dcmplt>
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	d172      	bne.n	800ccca <_dtoa_r+0x62a>
 800cbe4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbe8:	2000      	movs	r0, #0
 800cbea:	4911      	ldr	r1, [pc, #68]	@ (800cc30 <_dtoa_r+0x590>)
 800cbec:	f7f3 fb2c 	bl	8000248 <__aeabi_dsub>
 800cbf0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cbf4:	f7f3 ff52 	bl	8000a9c <__aeabi_dcmplt>
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	f040 80b4 	bne.w	800cd66 <_dtoa_r+0x6c6>
 800cbfe:	42a6      	cmp	r6, r4
 800cc00:	f43f af70 	beq.w	800cae4 <_dtoa_r+0x444>
 800cc04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cc08:	2200      	movs	r2, #0
 800cc0a:	4b0a      	ldr	r3, [pc, #40]	@ (800cc34 <_dtoa_r+0x594>)
 800cc0c:	f7f3 fcd4 	bl	80005b8 <__aeabi_dmul>
 800cc10:	2200      	movs	r2, #0
 800cc12:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cc16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc1a:	4b06      	ldr	r3, [pc, #24]	@ (800cc34 <_dtoa_r+0x594>)
 800cc1c:	f7f3 fccc 	bl	80005b8 <__aeabi_dmul>
 800cc20:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cc24:	e7c4      	b.n	800cbb0 <_dtoa_r+0x510>
 800cc26:	bf00      	nop
 800cc28:	08011798 	.word	0x08011798
 800cc2c:	08011770 	.word	0x08011770
 800cc30:	3ff00000 	.word	0x3ff00000
 800cc34:	40240000 	.word	0x40240000
 800cc38:	401c0000 	.word	0x401c0000
 800cc3c:	40140000 	.word	0x40140000
 800cc40:	3fe00000 	.word	0x3fe00000
 800cc44:	4631      	mov	r1, r6
 800cc46:	4628      	mov	r0, r5
 800cc48:	f7f3 fcb6 	bl	80005b8 <__aeabi_dmul>
 800cc4c:	4656      	mov	r6, sl
 800cc4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cc52:	9413      	str	r4, [sp, #76]	@ 0x4c
 800cc54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc58:	f7f3 ff5e 	bl	8000b18 <__aeabi_d2iz>
 800cc5c:	4605      	mov	r5, r0
 800cc5e:	f7f3 fc41 	bl	80004e4 <__aeabi_i2d>
 800cc62:	4602      	mov	r2, r0
 800cc64:	460b      	mov	r3, r1
 800cc66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc6a:	f7f3 faed 	bl	8000248 <__aeabi_dsub>
 800cc6e:	4602      	mov	r2, r0
 800cc70:	460b      	mov	r3, r1
 800cc72:	3530      	adds	r5, #48	@ 0x30
 800cc74:	f806 5b01 	strb.w	r5, [r6], #1
 800cc78:	42a6      	cmp	r6, r4
 800cc7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cc7e:	f04f 0200 	mov.w	r2, #0
 800cc82:	d124      	bne.n	800ccce <_dtoa_r+0x62e>
 800cc84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cc88:	4bae      	ldr	r3, [pc, #696]	@ (800cf44 <_dtoa_r+0x8a4>)
 800cc8a:	f7f3 fadf 	bl	800024c <__adddf3>
 800cc8e:	4602      	mov	r2, r0
 800cc90:	460b      	mov	r3, r1
 800cc92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc96:	f7f3 ff1f 	bl	8000ad8 <__aeabi_dcmpgt>
 800cc9a:	2800      	cmp	r0, #0
 800cc9c:	d163      	bne.n	800cd66 <_dtoa_r+0x6c6>
 800cc9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cca2:	2000      	movs	r0, #0
 800cca4:	49a7      	ldr	r1, [pc, #668]	@ (800cf44 <_dtoa_r+0x8a4>)
 800cca6:	f7f3 facf 	bl	8000248 <__aeabi_dsub>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	460b      	mov	r3, r1
 800ccae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccb2:	f7f3 fef3 	bl	8000a9c <__aeabi_dcmplt>
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	f43f af14 	beq.w	800cae4 <_dtoa_r+0x444>
 800ccbc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ccbe:	1e73      	subs	r3, r6, #1
 800ccc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ccc2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ccc6:	2b30      	cmp	r3, #48	@ 0x30
 800ccc8:	d0f8      	beq.n	800ccbc <_dtoa_r+0x61c>
 800ccca:	4647      	mov	r7, r8
 800cccc:	e03b      	b.n	800cd46 <_dtoa_r+0x6a6>
 800ccce:	4b9e      	ldr	r3, [pc, #632]	@ (800cf48 <_dtoa_r+0x8a8>)
 800ccd0:	f7f3 fc72 	bl	80005b8 <__aeabi_dmul>
 800ccd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ccd8:	e7bc      	b.n	800cc54 <_dtoa_r+0x5b4>
 800ccda:	4656      	mov	r6, sl
 800ccdc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800cce0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cce4:	4620      	mov	r0, r4
 800cce6:	4629      	mov	r1, r5
 800cce8:	f7f3 fd90 	bl	800080c <__aeabi_ddiv>
 800ccec:	f7f3 ff14 	bl	8000b18 <__aeabi_d2iz>
 800ccf0:	4680      	mov	r8, r0
 800ccf2:	f7f3 fbf7 	bl	80004e4 <__aeabi_i2d>
 800ccf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccfa:	f7f3 fc5d 	bl	80005b8 <__aeabi_dmul>
 800ccfe:	4602      	mov	r2, r0
 800cd00:	460b      	mov	r3, r1
 800cd02:	4620      	mov	r0, r4
 800cd04:	4629      	mov	r1, r5
 800cd06:	f7f3 fa9f 	bl	8000248 <__aeabi_dsub>
 800cd0a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cd0e:	9d08      	ldr	r5, [sp, #32]
 800cd10:	f806 4b01 	strb.w	r4, [r6], #1
 800cd14:	eba6 040a 	sub.w	r4, r6, sl
 800cd18:	42a5      	cmp	r5, r4
 800cd1a:	4602      	mov	r2, r0
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	d133      	bne.n	800cd88 <_dtoa_r+0x6e8>
 800cd20:	f7f3 fa94 	bl	800024c <__adddf3>
 800cd24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd28:	4604      	mov	r4, r0
 800cd2a:	460d      	mov	r5, r1
 800cd2c:	f7f3 fed4 	bl	8000ad8 <__aeabi_dcmpgt>
 800cd30:	b9c0      	cbnz	r0, 800cd64 <_dtoa_r+0x6c4>
 800cd32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd36:	4620      	mov	r0, r4
 800cd38:	4629      	mov	r1, r5
 800cd3a:	f7f3 fea5 	bl	8000a88 <__aeabi_dcmpeq>
 800cd3e:	b110      	cbz	r0, 800cd46 <_dtoa_r+0x6a6>
 800cd40:	f018 0f01 	tst.w	r8, #1
 800cd44:	d10e      	bne.n	800cd64 <_dtoa_r+0x6c4>
 800cd46:	4648      	mov	r0, r9
 800cd48:	9903      	ldr	r1, [sp, #12]
 800cd4a:	f000 fbbb 	bl	800d4c4 <_Bfree>
 800cd4e:	2300      	movs	r3, #0
 800cd50:	7033      	strb	r3, [r6, #0]
 800cd52:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800cd54:	3701      	adds	r7, #1
 800cd56:	601f      	str	r7, [r3, #0]
 800cd58:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	f000 824b 	beq.w	800d1f6 <_dtoa_r+0xb56>
 800cd60:	601e      	str	r6, [r3, #0]
 800cd62:	e248      	b.n	800d1f6 <_dtoa_r+0xb56>
 800cd64:	46b8      	mov	r8, r7
 800cd66:	4633      	mov	r3, r6
 800cd68:	461e      	mov	r6, r3
 800cd6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd6e:	2a39      	cmp	r2, #57	@ 0x39
 800cd70:	d106      	bne.n	800cd80 <_dtoa_r+0x6e0>
 800cd72:	459a      	cmp	sl, r3
 800cd74:	d1f8      	bne.n	800cd68 <_dtoa_r+0x6c8>
 800cd76:	2230      	movs	r2, #48	@ 0x30
 800cd78:	f108 0801 	add.w	r8, r8, #1
 800cd7c:	f88a 2000 	strb.w	r2, [sl]
 800cd80:	781a      	ldrb	r2, [r3, #0]
 800cd82:	3201      	adds	r2, #1
 800cd84:	701a      	strb	r2, [r3, #0]
 800cd86:	e7a0      	b.n	800ccca <_dtoa_r+0x62a>
 800cd88:	2200      	movs	r2, #0
 800cd8a:	4b6f      	ldr	r3, [pc, #444]	@ (800cf48 <_dtoa_r+0x8a8>)
 800cd8c:	f7f3 fc14 	bl	80005b8 <__aeabi_dmul>
 800cd90:	2200      	movs	r2, #0
 800cd92:	2300      	movs	r3, #0
 800cd94:	4604      	mov	r4, r0
 800cd96:	460d      	mov	r5, r1
 800cd98:	f7f3 fe76 	bl	8000a88 <__aeabi_dcmpeq>
 800cd9c:	2800      	cmp	r0, #0
 800cd9e:	d09f      	beq.n	800cce0 <_dtoa_r+0x640>
 800cda0:	e7d1      	b.n	800cd46 <_dtoa_r+0x6a6>
 800cda2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cda4:	2a00      	cmp	r2, #0
 800cda6:	f000 80ea 	beq.w	800cf7e <_dtoa_r+0x8de>
 800cdaa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cdac:	2a01      	cmp	r2, #1
 800cdae:	f300 80cd 	bgt.w	800cf4c <_dtoa_r+0x8ac>
 800cdb2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cdb4:	2a00      	cmp	r2, #0
 800cdb6:	f000 80c1 	beq.w	800cf3c <_dtoa_r+0x89c>
 800cdba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cdbe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cdc0:	9e04      	ldr	r6, [sp, #16]
 800cdc2:	9a04      	ldr	r2, [sp, #16]
 800cdc4:	2101      	movs	r1, #1
 800cdc6:	441a      	add	r2, r3
 800cdc8:	9204      	str	r2, [sp, #16]
 800cdca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdcc:	4648      	mov	r0, r9
 800cdce:	441a      	add	r2, r3
 800cdd0:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdd2:	f000 fc75 	bl	800d6c0 <__i2b>
 800cdd6:	4605      	mov	r5, r0
 800cdd8:	b166      	cbz	r6, 800cdf4 <_dtoa_r+0x754>
 800cdda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	dd09      	ble.n	800cdf4 <_dtoa_r+0x754>
 800cde0:	42b3      	cmp	r3, r6
 800cde2:	bfa8      	it	ge
 800cde4:	4633      	movge	r3, r6
 800cde6:	9a04      	ldr	r2, [sp, #16]
 800cde8:	1af6      	subs	r6, r6, r3
 800cdea:	1ad2      	subs	r2, r2, r3
 800cdec:	9204      	str	r2, [sp, #16]
 800cdee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdf0:	1ad3      	subs	r3, r2, r3
 800cdf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdf6:	b30b      	cbz	r3, 800ce3c <_dtoa_r+0x79c>
 800cdf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	f000 80c6 	beq.w	800cf8c <_dtoa_r+0x8ec>
 800ce00:	2c00      	cmp	r4, #0
 800ce02:	f000 80c0 	beq.w	800cf86 <_dtoa_r+0x8e6>
 800ce06:	4629      	mov	r1, r5
 800ce08:	4622      	mov	r2, r4
 800ce0a:	4648      	mov	r0, r9
 800ce0c:	f000 fd10 	bl	800d830 <__pow5mult>
 800ce10:	9a03      	ldr	r2, [sp, #12]
 800ce12:	4601      	mov	r1, r0
 800ce14:	4605      	mov	r5, r0
 800ce16:	4648      	mov	r0, r9
 800ce18:	f000 fc68 	bl	800d6ec <__multiply>
 800ce1c:	9903      	ldr	r1, [sp, #12]
 800ce1e:	4680      	mov	r8, r0
 800ce20:	4648      	mov	r0, r9
 800ce22:	f000 fb4f 	bl	800d4c4 <_Bfree>
 800ce26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce28:	1b1b      	subs	r3, r3, r4
 800ce2a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce2c:	f000 80b1 	beq.w	800cf92 <_dtoa_r+0x8f2>
 800ce30:	4641      	mov	r1, r8
 800ce32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce34:	4648      	mov	r0, r9
 800ce36:	f000 fcfb 	bl	800d830 <__pow5mult>
 800ce3a:	9003      	str	r0, [sp, #12]
 800ce3c:	2101      	movs	r1, #1
 800ce3e:	4648      	mov	r0, r9
 800ce40:	f000 fc3e 	bl	800d6c0 <__i2b>
 800ce44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce46:	4604      	mov	r4, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	f000 81d8 	beq.w	800d1fe <_dtoa_r+0xb5e>
 800ce4e:	461a      	mov	r2, r3
 800ce50:	4601      	mov	r1, r0
 800ce52:	4648      	mov	r0, r9
 800ce54:	f000 fcec 	bl	800d830 <__pow5mult>
 800ce58:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	f300 809f 	bgt.w	800cfa0 <_dtoa_r+0x900>
 800ce62:	9b06      	ldr	r3, [sp, #24]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	f040 8097 	bne.w	800cf98 <_dtoa_r+0x8f8>
 800ce6a:	9b07      	ldr	r3, [sp, #28]
 800ce6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	f040 8093 	bne.w	800cf9c <_dtoa_r+0x8fc>
 800ce76:	9b07      	ldr	r3, [sp, #28]
 800ce78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ce7c:	0d1b      	lsrs	r3, r3, #20
 800ce7e:	051b      	lsls	r3, r3, #20
 800ce80:	b133      	cbz	r3, 800ce90 <_dtoa_r+0x7f0>
 800ce82:	9b04      	ldr	r3, [sp, #16]
 800ce84:	3301      	adds	r3, #1
 800ce86:	9304      	str	r3, [sp, #16]
 800ce88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce8e:	2301      	movs	r3, #1
 800ce90:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	f000 81b8 	beq.w	800d20a <_dtoa_r+0xb6a>
 800ce9a:	6923      	ldr	r3, [r4, #16]
 800ce9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cea0:	6918      	ldr	r0, [r3, #16]
 800cea2:	f000 fbc1 	bl	800d628 <__hi0bits>
 800cea6:	f1c0 0020 	rsb	r0, r0, #32
 800ceaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceac:	4418      	add	r0, r3
 800ceae:	f010 001f 	ands.w	r0, r0, #31
 800ceb2:	f000 8082 	beq.w	800cfba <_dtoa_r+0x91a>
 800ceb6:	f1c0 0320 	rsb	r3, r0, #32
 800ceba:	2b04      	cmp	r3, #4
 800cebc:	dd73      	ble.n	800cfa6 <_dtoa_r+0x906>
 800cebe:	9b04      	ldr	r3, [sp, #16]
 800cec0:	f1c0 001c 	rsb	r0, r0, #28
 800cec4:	4403      	add	r3, r0
 800cec6:	9304      	str	r3, [sp, #16]
 800cec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceca:	4406      	add	r6, r0
 800cecc:	4403      	add	r3, r0
 800cece:	9309      	str	r3, [sp, #36]	@ 0x24
 800ced0:	9b04      	ldr	r3, [sp, #16]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	dd05      	ble.n	800cee2 <_dtoa_r+0x842>
 800ced6:	461a      	mov	r2, r3
 800ced8:	4648      	mov	r0, r9
 800ceda:	9903      	ldr	r1, [sp, #12]
 800cedc:	f000 fd02 	bl	800d8e4 <__lshift>
 800cee0:	9003      	str	r0, [sp, #12]
 800cee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	dd05      	ble.n	800cef4 <_dtoa_r+0x854>
 800cee8:	4621      	mov	r1, r4
 800ceea:	461a      	mov	r2, r3
 800ceec:	4648      	mov	r0, r9
 800ceee:	f000 fcf9 	bl	800d8e4 <__lshift>
 800cef2:	4604      	mov	r4, r0
 800cef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d061      	beq.n	800cfbe <_dtoa_r+0x91e>
 800cefa:	4621      	mov	r1, r4
 800cefc:	9803      	ldr	r0, [sp, #12]
 800cefe:	f000 fd5d 	bl	800d9bc <__mcmp>
 800cf02:	2800      	cmp	r0, #0
 800cf04:	da5b      	bge.n	800cfbe <_dtoa_r+0x91e>
 800cf06:	2300      	movs	r3, #0
 800cf08:	220a      	movs	r2, #10
 800cf0a:	4648      	mov	r0, r9
 800cf0c:	9903      	ldr	r1, [sp, #12]
 800cf0e:	f000 fafb 	bl	800d508 <__multadd>
 800cf12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf14:	f107 38ff 	add.w	r8, r7, #4294967295
 800cf18:	9003      	str	r0, [sp, #12]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	f000 8177 	beq.w	800d20e <_dtoa_r+0xb6e>
 800cf20:	4629      	mov	r1, r5
 800cf22:	2300      	movs	r3, #0
 800cf24:	220a      	movs	r2, #10
 800cf26:	4648      	mov	r0, r9
 800cf28:	f000 faee 	bl	800d508 <__multadd>
 800cf2c:	f1bb 0f00 	cmp.w	fp, #0
 800cf30:	4605      	mov	r5, r0
 800cf32:	dc6f      	bgt.n	800d014 <_dtoa_r+0x974>
 800cf34:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	dc49      	bgt.n	800cfce <_dtoa_r+0x92e>
 800cf3a:	e06b      	b.n	800d014 <_dtoa_r+0x974>
 800cf3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cf3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cf42:	e73c      	b.n	800cdbe <_dtoa_r+0x71e>
 800cf44:	3fe00000 	.word	0x3fe00000
 800cf48:	40240000 	.word	0x40240000
 800cf4c:	9b08      	ldr	r3, [sp, #32]
 800cf4e:	1e5c      	subs	r4, r3, #1
 800cf50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf52:	42a3      	cmp	r3, r4
 800cf54:	db09      	blt.n	800cf6a <_dtoa_r+0x8ca>
 800cf56:	1b1c      	subs	r4, r3, r4
 800cf58:	9b08      	ldr	r3, [sp, #32]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	f6bf af30 	bge.w	800cdc0 <_dtoa_r+0x720>
 800cf60:	9b04      	ldr	r3, [sp, #16]
 800cf62:	9a08      	ldr	r2, [sp, #32]
 800cf64:	1a9e      	subs	r6, r3, r2
 800cf66:	2300      	movs	r3, #0
 800cf68:	e72b      	b.n	800cdc2 <_dtoa_r+0x722>
 800cf6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf6e:	1ae3      	subs	r3, r4, r3
 800cf70:	441a      	add	r2, r3
 800cf72:	940a      	str	r4, [sp, #40]	@ 0x28
 800cf74:	9e04      	ldr	r6, [sp, #16]
 800cf76:	2400      	movs	r4, #0
 800cf78:	9b08      	ldr	r3, [sp, #32]
 800cf7a:	920e      	str	r2, [sp, #56]	@ 0x38
 800cf7c:	e721      	b.n	800cdc2 <_dtoa_r+0x722>
 800cf7e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cf80:	9e04      	ldr	r6, [sp, #16]
 800cf82:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cf84:	e728      	b.n	800cdd8 <_dtoa_r+0x738>
 800cf86:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cf8a:	e751      	b.n	800ce30 <_dtoa_r+0x790>
 800cf8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf8e:	9903      	ldr	r1, [sp, #12]
 800cf90:	e750      	b.n	800ce34 <_dtoa_r+0x794>
 800cf92:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf96:	e751      	b.n	800ce3c <_dtoa_r+0x79c>
 800cf98:	2300      	movs	r3, #0
 800cf9a:	e779      	b.n	800ce90 <_dtoa_r+0x7f0>
 800cf9c:	9b06      	ldr	r3, [sp, #24]
 800cf9e:	e777      	b.n	800ce90 <_dtoa_r+0x7f0>
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfa4:	e779      	b.n	800ce9a <_dtoa_r+0x7fa>
 800cfa6:	d093      	beq.n	800ced0 <_dtoa_r+0x830>
 800cfa8:	9a04      	ldr	r2, [sp, #16]
 800cfaa:	331c      	adds	r3, #28
 800cfac:	441a      	add	r2, r3
 800cfae:	9204      	str	r2, [sp, #16]
 800cfb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfb2:	441e      	add	r6, r3
 800cfb4:	441a      	add	r2, r3
 800cfb6:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfb8:	e78a      	b.n	800ced0 <_dtoa_r+0x830>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	e7f4      	b.n	800cfa8 <_dtoa_r+0x908>
 800cfbe:	9b08      	ldr	r3, [sp, #32]
 800cfc0:	46b8      	mov	r8, r7
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	dc20      	bgt.n	800d008 <_dtoa_r+0x968>
 800cfc6:	469b      	mov	fp, r3
 800cfc8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cfca:	2b02      	cmp	r3, #2
 800cfcc:	dd1e      	ble.n	800d00c <_dtoa_r+0x96c>
 800cfce:	f1bb 0f00 	cmp.w	fp, #0
 800cfd2:	f47f adb1 	bne.w	800cb38 <_dtoa_r+0x498>
 800cfd6:	4621      	mov	r1, r4
 800cfd8:	465b      	mov	r3, fp
 800cfda:	2205      	movs	r2, #5
 800cfdc:	4648      	mov	r0, r9
 800cfde:	f000 fa93 	bl	800d508 <__multadd>
 800cfe2:	4601      	mov	r1, r0
 800cfe4:	4604      	mov	r4, r0
 800cfe6:	9803      	ldr	r0, [sp, #12]
 800cfe8:	f000 fce8 	bl	800d9bc <__mcmp>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	f77f ada3 	ble.w	800cb38 <_dtoa_r+0x498>
 800cff2:	4656      	mov	r6, sl
 800cff4:	2331      	movs	r3, #49	@ 0x31
 800cff6:	f108 0801 	add.w	r8, r8, #1
 800cffa:	f806 3b01 	strb.w	r3, [r6], #1
 800cffe:	e59f      	b.n	800cb40 <_dtoa_r+0x4a0>
 800d000:	46b8      	mov	r8, r7
 800d002:	9c08      	ldr	r4, [sp, #32]
 800d004:	4625      	mov	r5, r4
 800d006:	e7f4      	b.n	800cff2 <_dtoa_r+0x952>
 800d008:	f8dd b020 	ldr.w	fp, [sp, #32]
 800d00c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d00e:	2b00      	cmp	r3, #0
 800d010:	f000 8101 	beq.w	800d216 <_dtoa_r+0xb76>
 800d014:	2e00      	cmp	r6, #0
 800d016:	dd05      	ble.n	800d024 <_dtoa_r+0x984>
 800d018:	4629      	mov	r1, r5
 800d01a:	4632      	mov	r2, r6
 800d01c:	4648      	mov	r0, r9
 800d01e:	f000 fc61 	bl	800d8e4 <__lshift>
 800d022:	4605      	mov	r5, r0
 800d024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d026:	2b00      	cmp	r3, #0
 800d028:	d05c      	beq.n	800d0e4 <_dtoa_r+0xa44>
 800d02a:	4648      	mov	r0, r9
 800d02c:	6869      	ldr	r1, [r5, #4]
 800d02e:	f000 fa09 	bl	800d444 <_Balloc>
 800d032:	4606      	mov	r6, r0
 800d034:	b928      	cbnz	r0, 800d042 <_dtoa_r+0x9a2>
 800d036:	4602      	mov	r2, r0
 800d038:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d03c:	4b80      	ldr	r3, [pc, #512]	@ (800d240 <_dtoa_r+0xba0>)
 800d03e:	f7ff bb43 	b.w	800c6c8 <_dtoa_r+0x28>
 800d042:	692a      	ldr	r2, [r5, #16]
 800d044:	f105 010c 	add.w	r1, r5, #12
 800d048:	3202      	adds	r2, #2
 800d04a:	0092      	lsls	r2, r2, #2
 800d04c:	300c      	adds	r0, #12
 800d04e:	f7ff fa8c 	bl	800c56a <memcpy>
 800d052:	2201      	movs	r2, #1
 800d054:	4631      	mov	r1, r6
 800d056:	4648      	mov	r0, r9
 800d058:	f000 fc44 	bl	800d8e4 <__lshift>
 800d05c:	462f      	mov	r7, r5
 800d05e:	4605      	mov	r5, r0
 800d060:	f10a 0301 	add.w	r3, sl, #1
 800d064:	9304      	str	r3, [sp, #16]
 800d066:	eb0a 030b 	add.w	r3, sl, fp
 800d06a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d06c:	9b06      	ldr	r3, [sp, #24]
 800d06e:	f003 0301 	and.w	r3, r3, #1
 800d072:	9309      	str	r3, [sp, #36]	@ 0x24
 800d074:	9b04      	ldr	r3, [sp, #16]
 800d076:	4621      	mov	r1, r4
 800d078:	9803      	ldr	r0, [sp, #12]
 800d07a:	f103 3bff 	add.w	fp, r3, #4294967295
 800d07e:	f7ff fa87 	bl	800c590 <quorem>
 800d082:	4603      	mov	r3, r0
 800d084:	4639      	mov	r1, r7
 800d086:	3330      	adds	r3, #48	@ 0x30
 800d088:	9006      	str	r0, [sp, #24]
 800d08a:	9803      	ldr	r0, [sp, #12]
 800d08c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d08e:	f000 fc95 	bl	800d9bc <__mcmp>
 800d092:	462a      	mov	r2, r5
 800d094:	9008      	str	r0, [sp, #32]
 800d096:	4621      	mov	r1, r4
 800d098:	4648      	mov	r0, r9
 800d09a:	f000 fcab 	bl	800d9f4 <__mdiff>
 800d09e:	68c2      	ldr	r2, [r0, #12]
 800d0a0:	4606      	mov	r6, r0
 800d0a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0a4:	bb02      	cbnz	r2, 800d0e8 <_dtoa_r+0xa48>
 800d0a6:	4601      	mov	r1, r0
 800d0a8:	9803      	ldr	r0, [sp, #12]
 800d0aa:	f000 fc87 	bl	800d9bc <__mcmp>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0b2:	4631      	mov	r1, r6
 800d0b4:	4648      	mov	r0, r9
 800d0b6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800d0ba:	f000 fa03 	bl	800d4c4 <_Bfree>
 800d0be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d0c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d0c2:	9e04      	ldr	r6, [sp, #16]
 800d0c4:	ea42 0103 	orr.w	r1, r2, r3
 800d0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0ca:	4319      	orrs	r1, r3
 800d0cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0ce:	d10d      	bne.n	800d0ec <_dtoa_r+0xa4c>
 800d0d0:	2b39      	cmp	r3, #57	@ 0x39
 800d0d2:	d027      	beq.n	800d124 <_dtoa_r+0xa84>
 800d0d4:	9a08      	ldr	r2, [sp, #32]
 800d0d6:	2a00      	cmp	r2, #0
 800d0d8:	dd01      	ble.n	800d0de <_dtoa_r+0xa3e>
 800d0da:	9b06      	ldr	r3, [sp, #24]
 800d0dc:	3331      	adds	r3, #49	@ 0x31
 800d0de:	f88b 3000 	strb.w	r3, [fp]
 800d0e2:	e52e      	b.n	800cb42 <_dtoa_r+0x4a2>
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	e7b9      	b.n	800d05c <_dtoa_r+0x9bc>
 800d0e8:	2201      	movs	r2, #1
 800d0ea:	e7e2      	b.n	800d0b2 <_dtoa_r+0xa12>
 800d0ec:	9908      	ldr	r1, [sp, #32]
 800d0ee:	2900      	cmp	r1, #0
 800d0f0:	db04      	blt.n	800d0fc <_dtoa_r+0xa5c>
 800d0f2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800d0f4:	4301      	orrs	r1, r0
 800d0f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0f8:	4301      	orrs	r1, r0
 800d0fa:	d120      	bne.n	800d13e <_dtoa_r+0xa9e>
 800d0fc:	2a00      	cmp	r2, #0
 800d0fe:	ddee      	ble.n	800d0de <_dtoa_r+0xa3e>
 800d100:	2201      	movs	r2, #1
 800d102:	9903      	ldr	r1, [sp, #12]
 800d104:	4648      	mov	r0, r9
 800d106:	9304      	str	r3, [sp, #16]
 800d108:	f000 fbec 	bl	800d8e4 <__lshift>
 800d10c:	4621      	mov	r1, r4
 800d10e:	9003      	str	r0, [sp, #12]
 800d110:	f000 fc54 	bl	800d9bc <__mcmp>
 800d114:	2800      	cmp	r0, #0
 800d116:	9b04      	ldr	r3, [sp, #16]
 800d118:	dc02      	bgt.n	800d120 <_dtoa_r+0xa80>
 800d11a:	d1e0      	bne.n	800d0de <_dtoa_r+0xa3e>
 800d11c:	07da      	lsls	r2, r3, #31
 800d11e:	d5de      	bpl.n	800d0de <_dtoa_r+0xa3e>
 800d120:	2b39      	cmp	r3, #57	@ 0x39
 800d122:	d1da      	bne.n	800d0da <_dtoa_r+0xa3a>
 800d124:	2339      	movs	r3, #57	@ 0x39
 800d126:	f88b 3000 	strb.w	r3, [fp]
 800d12a:	4633      	mov	r3, r6
 800d12c:	461e      	mov	r6, r3
 800d12e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d132:	3b01      	subs	r3, #1
 800d134:	2a39      	cmp	r2, #57	@ 0x39
 800d136:	d04e      	beq.n	800d1d6 <_dtoa_r+0xb36>
 800d138:	3201      	adds	r2, #1
 800d13a:	701a      	strb	r2, [r3, #0]
 800d13c:	e501      	b.n	800cb42 <_dtoa_r+0x4a2>
 800d13e:	2a00      	cmp	r2, #0
 800d140:	dd03      	ble.n	800d14a <_dtoa_r+0xaaa>
 800d142:	2b39      	cmp	r3, #57	@ 0x39
 800d144:	d0ee      	beq.n	800d124 <_dtoa_r+0xa84>
 800d146:	3301      	adds	r3, #1
 800d148:	e7c9      	b.n	800d0de <_dtoa_r+0xa3e>
 800d14a:	9a04      	ldr	r2, [sp, #16]
 800d14c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d14e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d152:	428a      	cmp	r2, r1
 800d154:	d028      	beq.n	800d1a8 <_dtoa_r+0xb08>
 800d156:	2300      	movs	r3, #0
 800d158:	220a      	movs	r2, #10
 800d15a:	9903      	ldr	r1, [sp, #12]
 800d15c:	4648      	mov	r0, r9
 800d15e:	f000 f9d3 	bl	800d508 <__multadd>
 800d162:	42af      	cmp	r7, r5
 800d164:	9003      	str	r0, [sp, #12]
 800d166:	f04f 0300 	mov.w	r3, #0
 800d16a:	f04f 020a 	mov.w	r2, #10
 800d16e:	4639      	mov	r1, r7
 800d170:	4648      	mov	r0, r9
 800d172:	d107      	bne.n	800d184 <_dtoa_r+0xae4>
 800d174:	f000 f9c8 	bl	800d508 <__multadd>
 800d178:	4607      	mov	r7, r0
 800d17a:	4605      	mov	r5, r0
 800d17c:	9b04      	ldr	r3, [sp, #16]
 800d17e:	3301      	adds	r3, #1
 800d180:	9304      	str	r3, [sp, #16]
 800d182:	e777      	b.n	800d074 <_dtoa_r+0x9d4>
 800d184:	f000 f9c0 	bl	800d508 <__multadd>
 800d188:	4629      	mov	r1, r5
 800d18a:	4607      	mov	r7, r0
 800d18c:	2300      	movs	r3, #0
 800d18e:	220a      	movs	r2, #10
 800d190:	4648      	mov	r0, r9
 800d192:	f000 f9b9 	bl	800d508 <__multadd>
 800d196:	4605      	mov	r5, r0
 800d198:	e7f0      	b.n	800d17c <_dtoa_r+0xadc>
 800d19a:	f1bb 0f00 	cmp.w	fp, #0
 800d19e:	bfcc      	ite	gt
 800d1a0:	465e      	movgt	r6, fp
 800d1a2:	2601      	movle	r6, #1
 800d1a4:	2700      	movs	r7, #0
 800d1a6:	4456      	add	r6, sl
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	9903      	ldr	r1, [sp, #12]
 800d1ac:	4648      	mov	r0, r9
 800d1ae:	9304      	str	r3, [sp, #16]
 800d1b0:	f000 fb98 	bl	800d8e4 <__lshift>
 800d1b4:	4621      	mov	r1, r4
 800d1b6:	9003      	str	r0, [sp, #12]
 800d1b8:	f000 fc00 	bl	800d9bc <__mcmp>
 800d1bc:	2800      	cmp	r0, #0
 800d1be:	dcb4      	bgt.n	800d12a <_dtoa_r+0xa8a>
 800d1c0:	d102      	bne.n	800d1c8 <_dtoa_r+0xb28>
 800d1c2:	9b04      	ldr	r3, [sp, #16]
 800d1c4:	07db      	lsls	r3, r3, #31
 800d1c6:	d4b0      	bmi.n	800d12a <_dtoa_r+0xa8a>
 800d1c8:	4633      	mov	r3, r6
 800d1ca:	461e      	mov	r6, r3
 800d1cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1d0:	2a30      	cmp	r2, #48	@ 0x30
 800d1d2:	d0fa      	beq.n	800d1ca <_dtoa_r+0xb2a>
 800d1d4:	e4b5      	b.n	800cb42 <_dtoa_r+0x4a2>
 800d1d6:	459a      	cmp	sl, r3
 800d1d8:	d1a8      	bne.n	800d12c <_dtoa_r+0xa8c>
 800d1da:	2331      	movs	r3, #49	@ 0x31
 800d1dc:	f108 0801 	add.w	r8, r8, #1
 800d1e0:	f88a 3000 	strb.w	r3, [sl]
 800d1e4:	e4ad      	b.n	800cb42 <_dtoa_r+0x4a2>
 800d1e6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d1e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d244 <_dtoa_r+0xba4>
 800d1ec:	b11b      	cbz	r3, 800d1f6 <_dtoa_r+0xb56>
 800d1ee:	f10a 0308 	add.w	r3, sl, #8
 800d1f2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d1f4:	6013      	str	r3, [r2, #0]
 800d1f6:	4650      	mov	r0, sl
 800d1f8:	b017      	add	sp, #92	@ 0x5c
 800d1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d200:	2b01      	cmp	r3, #1
 800d202:	f77f ae2e 	ble.w	800ce62 <_dtoa_r+0x7c2>
 800d206:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d208:	930a      	str	r3, [sp, #40]	@ 0x28
 800d20a:	2001      	movs	r0, #1
 800d20c:	e64d      	b.n	800ceaa <_dtoa_r+0x80a>
 800d20e:	f1bb 0f00 	cmp.w	fp, #0
 800d212:	f77f aed9 	ble.w	800cfc8 <_dtoa_r+0x928>
 800d216:	4656      	mov	r6, sl
 800d218:	4621      	mov	r1, r4
 800d21a:	9803      	ldr	r0, [sp, #12]
 800d21c:	f7ff f9b8 	bl	800c590 <quorem>
 800d220:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d224:	f806 3b01 	strb.w	r3, [r6], #1
 800d228:	eba6 020a 	sub.w	r2, r6, sl
 800d22c:	4593      	cmp	fp, r2
 800d22e:	ddb4      	ble.n	800d19a <_dtoa_r+0xafa>
 800d230:	2300      	movs	r3, #0
 800d232:	220a      	movs	r2, #10
 800d234:	4648      	mov	r0, r9
 800d236:	9903      	ldr	r1, [sp, #12]
 800d238:	f000 f966 	bl	800d508 <__multadd>
 800d23c:	9003      	str	r0, [sp, #12]
 800d23e:	e7eb      	b.n	800d218 <_dtoa_r+0xb78>
 800d240:	0801163d 	.word	0x0801163d
 800d244:	080115c1 	.word	0x080115c1

0800d248 <_free_r>:
 800d248:	b538      	push	{r3, r4, r5, lr}
 800d24a:	4605      	mov	r5, r0
 800d24c:	2900      	cmp	r1, #0
 800d24e:	d040      	beq.n	800d2d2 <_free_r+0x8a>
 800d250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d254:	1f0c      	subs	r4, r1, #4
 800d256:	2b00      	cmp	r3, #0
 800d258:	bfb8      	it	lt
 800d25a:	18e4      	addlt	r4, r4, r3
 800d25c:	f000 f8e6 	bl	800d42c <__malloc_lock>
 800d260:	4a1c      	ldr	r2, [pc, #112]	@ (800d2d4 <_free_r+0x8c>)
 800d262:	6813      	ldr	r3, [r2, #0]
 800d264:	b933      	cbnz	r3, 800d274 <_free_r+0x2c>
 800d266:	6063      	str	r3, [r4, #4]
 800d268:	6014      	str	r4, [r2, #0]
 800d26a:	4628      	mov	r0, r5
 800d26c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d270:	f000 b8e2 	b.w	800d438 <__malloc_unlock>
 800d274:	42a3      	cmp	r3, r4
 800d276:	d908      	bls.n	800d28a <_free_r+0x42>
 800d278:	6820      	ldr	r0, [r4, #0]
 800d27a:	1821      	adds	r1, r4, r0
 800d27c:	428b      	cmp	r3, r1
 800d27e:	bf01      	itttt	eq
 800d280:	6819      	ldreq	r1, [r3, #0]
 800d282:	685b      	ldreq	r3, [r3, #4]
 800d284:	1809      	addeq	r1, r1, r0
 800d286:	6021      	streq	r1, [r4, #0]
 800d288:	e7ed      	b.n	800d266 <_free_r+0x1e>
 800d28a:	461a      	mov	r2, r3
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	b10b      	cbz	r3, 800d294 <_free_r+0x4c>
 800d290:	42a3      	cmp	r3, r4
 800d292:	d9fa      	bls.n	800d28a <_free_r+0x42>
 800d294:	6811      	ldr	r1, [r2, #0]
 800d296:	1850      	adds	r0, r2, r1
 800d298:	42a0      	cmp	r0, r4
 800d29a:	d10b      	bne.n	800d2b4 <_free_r+0x6c>
 800d29c:	6820      	ldr	r0, [r4, #0]
 800d29e:	4401      	add	r1, r0
 800d2a0:	1850      	adds	r0, r2, r1
 800d2a2:	4283      	cmp	r3, r0
 800d2a4:	6011      	str	r1, [r2, #0]
 800d2a6:	d1e0      	bne.n	800d26a <_free_r+0x22>
 800d2a8:	6818      	ldr	r0, [r3, #0]
 800d2aa:	685b      	ldr	r3, [r3, #4]
 800d2ac:	4408      	add	r0, r1
 800d2ae:	6010      	str	r0, [r2, #0]
 800d2b0:	6053      	str	r3, [r2, #4]
 800d2b2:	e7da      	b.n	800d26a <_free_r+0x22>
 800d2b4:	d902      	bls.n	800d2bc <_free_r+0x74>
 800d2b6:	230c      	movs	r3, #12
 800d2b8:	602b      	str	r3, [r5, #0]
 800d2ba:	e7d6      	b.n	800d26a <_free_r+0x22>
 800d2bc:	6820      	ldr	r0, [r4, #0]
 800d2be:	1821      	adds	r1, r4, r0
 800d2c0:	428b      	cmp	r3, r1
 800d2c2:	bf01      	itttt	eq
 800d2c4:	6819      	ldreq	r1, [r3, #0]
 800d2c6:	685b      	ldreq	r3, [r3, #4]
 800d2c8:	1809      	addeq	r1, r1, r0
 800d2ca:	6021      	streq	r1, [r4, #0]
 800d2cc:	6063      	str	r3, [r4, #4]
 800d2ce:	6054      	str	r4, [r2, #4]
 800d2d0:	e7cb      	b.n	800d26a <_free_r+0x22>
 800d2d2:	bd38      	pop	{r3, r4, r5, pc}
 800d2d4:	2000ba2c 	.word	0x2000ba2c

0800d2d8 <malloc>:
 800d2d8:	4b02      	ldr	r3, [pc, #8]	@ (800d2e4 <malloc+0xc>)
 800d2da:	4601      	mov	r1, r0
 800d2dc:	6818      	ldr	r0, [r3, #0]
 800d2de:	f000 b825 	b.w	800d32c <_malloc_r>
 800d2e2:	bf00      	nop
 800d2e4:	200080ac 	.word	0x200080ac

0800d2e8 <sbrk_aligned>:
 800d2e8:	b570      	push	{r4, r5, r6, lr}
 800d2ea:	4e0f      	ldr	r6, [pc, #60]	@ (800d328 <sbrk_aligned+0x40>)
 800d2ec:	460c      	mov	r4, r1
 800d2ee:	6831      	ldr	r1, [r6, #0]
 800d2f0:	4605      	mov	r5, r0
 800d2f2:	b911      	cbnz	r1, 800d2fa <sbrk_aligned+0x12>
 800d2f4:	f001 ffb2 	bl	800f25c <_sbrk_r>
 800d2f8:	6030      	str	r0, [r6, #0]
 800d2fa:	4621      	mov	r1, r4
 800d2fc:	4628      	mov	r0, r5
 800d2fe:	f001 ffad 	bl	800f25c <_sbrk_r>
 800d302:	1c43      	adds	r3, r0, #1
 800d304:	d103      	bne.n	800d30e <sbrk_aligned+0x26>
 800d306:	f04f 34ff 	mov.w	r4, #4294967295
 800d30a:	4620      	mov	r0, r4
 800d30c:	bd70      	pop	{r4, r5, r6, pc}
 800d30e:	1cc4      	adds	r4, r0, #3
 800d310:	f024 0403 	bic.w	r4, r4, #3
 800d314:	42a0      	cmp	r0, r4
 800d316:	d0f8      	beq.n	800d30a <sbrk_aligned+0x22>
 800d318:	1a21      	subs	r1, r4, r0
 800d31a:	4628      	mov	r0, r5
 800d31c:	f001 ff9e 	bl	800f25c <_sbrk_r>
 800d320:	3001      	adds	r0, #1
 800d322:	d1f2      	bne.n	800d30a <sbrk_aligned+0x22>
 800d324:	e7ef      	b.n	800d306 <sbrk_aligned+0x1e>
 800d326:	bf00      	nop
 800d328:	2000ba28 	.word	0x2000ba28

0800d32c <_malloc_r>:
 800d32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d330:	1ccd      	adds	r5, r1, #3
 800d332:	f025 0503 	bic.w	r5, r5, #3
 800d336:	3508      	adds	r5, #8
 800d338:	2d0c      	cmp	r5, #12
 800d33a:	bf38      	it	cc
 800d33c:	250c      	movcc	r5, #12
 800d33e:	2d00      	cmp	r5, #0
 800d340:	4606      	mov	r6, r0
 800d342:	db01      	blt.n	800d348 <_malloc_r+0x1c>
 800d344:	42a9      	cmp	r1, r5
 800d346:	d904      	bls.n	800d352 <_malloc_r+0x26>
 800d348:	230c      	movs	r3, #12
 800d34a:	6033      	str	r3, [r6, #0]
 800d34c:	2000      	movs	r0, #0
 800d34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d352:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d428 <_malloc_r+0xfc>
 800d356:	f000 f869 	bl	800d42c <__malloc_lock>
 800d35a:	f8d8 3000 	ldr.w	r3, [r8]
 800d35e:	461c      	mov	r4, r3
 800d360:	bb44      	cbnz	r4, 800d3b4 <_malloc_r+0x88>
 800d362:	4629      	mov	r1, r5
 800d364:	4630      	mov	r0, r6
 800d366:	f7ff ffbf 	bl	800d2e8 <sbrk_aligned>
 800d36a:	1c43      	adds	r3, r0, #1
 800d36c:	4604      	mov	r4, r0
 800d36e:	d158      	bne.n	800d422 <_malloc_r+0xf6>
 800d370:	f8d8 4000 	ldr.w	r4, [r8]
 800d374:	4627      	mov	r7, r4
 800d376:	2f00      	cmp	r7, #0
 800d378:	d143      	bne.n	800d402 <_malloc_r+0xd6>
 800d37a:	2c00      	cmp	r4, #0
 800d37c:	d04b      	beq.n	800d416 <_malloc_r+0xea>
 800d37e:	6823      	ldr	r3, [r4, #0]
 800d380:	4639      	mov	r1, r7
 800d382:	4630      	mov	r0, r6
 800d384:	eb04 0903 	add.w	r9, r4, r3
 800d388:	f001 ff68 	bl	800f25c <_sbrk_r>
 800d38c:	4581      	cmp	r9, r0
 800d38e:	d142      	bne.n	800d416 <_malloc_r+0xea>
 800d390:	6821      	ldr	r1, [r4, #0]
 800d392:	4630      	mov	r0, r6
 800d394:	1a6d      	subs	r5, r5, r1
 800d396:	4629      	mov	r1, r5
 800d398:	f7ff ffa6 	bl	800d2e8 <sbrk_aligned>
 800d39c:	3001      	adds	r0, #1
 800d39e:	d03a      	beq.n	800d416 <_malloc_r+0xea>
 800d3a0:	6823      	ldr	r3, [r4, #0]
 800d3a2:	442b      	add	r3, r5
 800d3a4:	6023      	str	r3, [r4, #0]
 800d3a6:	f8d8 3000 	ldr.w	r3, [r8]
 800d3aa:	685a      	ldr	r2, [r3, #4]
 800d3ac:	bb62      	cbnz	r2, 800d408 <_malloc_r+0xdc>
 800d3ae:	f8c8 7000 	str.w	r7, [r8]
 800d3b2:	e00f      	b.n	800d3d4 <_malloc_r+0xa8>
 800d3b4:	6822      	ldr	r2, [r4, #0]
 800d3b6:	1b52      	subs	r2, r2, r5
 800d3b8:	d420      	bmi.n	800d3fc <_malloc_r+0xd0>
 800d3ba:	2a0b      	cmp	r2, #11
 800d3bc:	d917      	bls.n	800d3ee <_malloc_r+0xc2>
 800d3be:	1961      	adds	r1, r4, r5
 800d3c0:	42a3      	cmp	r3, r4
 800d3c2:	6025      	str	r5, [r4, #0]
 800d3c4:	bf18      	it	ne
 800d3c6:	6059      	strne	r1, [r3, #4]
 800d3c8:	6863      	ldr	r3, [r4, #4]
 800d3ca:	bf08      	it	eq
 800d3cc:	f8c8 1000 	streq.w	r1, [r8]
 800d3d0:	5162      	str	r2, [r4, r5]
 800d3d2:	604b      	str	r3, [r1, #4]
 800d3d4:	4630      	mov	r0, r6
 800d3d6:	f000 f82f 	bl	800d438 <__malloc_unlock>
 800d3da:	f104 000b 	add.w	r0, r4, #11
 800d3de:	1d23      	adds	r3, r4, #4
 800d3e0:	f020 0007 	bic.w	r0, r0, #7
 800d3e4:	1ac2      	subs	r2, r0, r3
 800d3e6:	bf1c      	itt	ne
 800d3e8:	1a1b      	subne	r3, r3, r0
 800d3ea:	50a3      	strne	r3, [r4, r2]
 800d3ec:	e7af      	b.n	800d34e <_malloc_r+0x22>
 800d3ee:	6862      	ldr	r2, [r4, #4]
 800d3f0:	42a3      	cmp	r3, r4
 800d3f2:	bf0c      	ite	eq
 800d3f4:	f8c8 2000 	streq.w	r2, [r8]
 800d3f8:	605a      	strne	r2, [r3, #4]
 800d3fa:	e7eb      	b.n	800d3d4 <_malloc_r+0xa8>
 800d3fc:	4623      	mov	r3, r4
 800d3fe:	6864      	ldr	r4, [r4, #4]
 800d400:	e7ae      	b.n	800d360 <_malloc_r+0x34>
 800d402:	463c      	mov	r4, r7
 800d404:	687f      	ldr	r7, [r7, #4]
 800d406:	e7b6      	b.n	800d376 <_malloc_r+0x4a>
 800d408:	461a      	mov	r2, r3
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	42a3      	cmp	r3, r4
 800d40e:	d1fb      	bne.n	800d408 <_malloc_r+0xdc>
 800d410:	2300      	movs	r3, #0
 800d412:	6053      	str	r3, [r2, #4]
 800d414:	e7de      	b.n	800d3d4 <_malloc_r+0xa8>
 800d416:	230c      	movs	r3, #12
 800d418:	4630      	mov	r0, r6
 800d41a:	6033      	str	r3, [r6, #0]
 800d41c:	f000 f80c 	bl	800d438 <__malloc_unlock>
 800d420:	e794      	b.n	800d34c <_malloc_r+0x20>
 800d422:	6005      	str	r5, [r0, #0]
 800d424:	e7d6      	b.n	800d3d4 <_malloc_r+0xa8>
 800d426:	bf00      	nop
 800d428:	2000ba2c 	.word	0x2000ba2c

0800d42c <__malloc_lock>:
 800d42c:	4801      	ldr	r0, [pc, #4]	@ (800d434 <__malloc_lock+0x8>)
 800d42e:	f7ff b88c 	b.w	800c54a <__retarget_lock_acquire_recursive>
 800d432:	bf00      	nop
 800d434:	2000ba24 	.word	0x2000ba24

0800d438 <__malloc_unlock>:
 800d438:	4801      	ldr	r0, [pc, #4]	@ (800d440 <__malloc_unlock+0x8>)
 800d43a:	f7ff b887 	b.w	800c54c <__retarget_lock_release_recursive>
 800d43e:	bf00      	nop
 800d440:	2000ba24 	.word	0x2000ba24

0800d444 <_Balloc>:
 800d444:	b570      	push	{r4, r5, r6, lr}
 800d446:	69c6      	ldr	r6, [r0, #28]
 800d448:	4604      	mov	r4, r0
 800d44a:	460d      	mov	r5, r1
 800d44c:	b976      	cbnz	r6, 800d46c <_Balloc+0x28>
 800d44e:	2010      	movs	r0, #16
 800d450:	f7ff ff42 	bl	800d2d8 <malloc>
 800d454:	4602      	mov	r2, r0
 800d456:	61e0      	str	r0, [r4, #28]
 800d458:	b920      	cbnz	r0, 800d464 <_Balloc+0x20>
 800d45a:	216b      	movs	r1, #107	@ 0x6b
 800d45c:	4b17      	ldr	r3, [pc, #92]	@ (800d4bc <_Balloc+0x78>)
 800d45e:	4818      	ldr	r0, [pc, #96]	@ (800d4c0 <_Balloc+0x7c>)
 800d460:	f001 ff12 	bl	800f288 <__assert_func>
 800d464:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d468:	6006      	str	r6, [r0, #0]
 800d46a:	60c6      	str	r6, [r0, #12]
 800d46c:	69e6      	ldr	r6, [r4, #28]
 800d46e:	68f3      	ldr	r3, [r6, #12]
 800d470:	b183      	cbz	r3, 800d494 <_Balloc+0x50>
 800d472:	69e3      	ldr	r3, [r4, #28]
 800d474:	68db      	ldr	r3, [r3, #12]
 800d476:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d47a:	b9b8      	cbnz	r0, 800d4ac <_Balloc+0x68>
 800d47c:	2101      	movs	r1, #1
 800d47e:	fa01 f605 	lsl.w	r6, r1, r5
 800d482:	1d72      	adds	r2, r6, #5
 800d484:	4620      	mov	r0, r4
 800d486:	0092      	lsls	r2, r2, #2
 800d488:	f001 ff1c 	bl	800f2c4 <_calloc_r>
 800d48c:	b160      	cbz	r0, 800d4a8 <_Balloc+0x64>
 800d48e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d492:	e00e      	b.n	800d4b2 <_Balloc+0x6e>
 800d494:	2221      	movs	r2, #33	@ 0x21
 800d496:	2104      	movs	r1, #4
 800d498:	4620      	mov	r0, r4
 800d49a:	f001 ff13 	bl	800f2c4 <_calloc_r>
 800d49e:	69e3      	ldr	r3, [r4, #28]
 800d4a0:	60f0      	str	r0, [r6, #12]
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d1e4      	bne.n	800d472 <_Balloc+0x2e>
 800d4a8:	2000      	movs	r0, #0
 800d4aa:	bd70      	pop	{r4, r5, r6, pc}
 800d4ac:	6802      	ldr	r2, [r0, #0]
 800d4ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4b8:	e7f7      	b.n	800d4aa <_Balloc+0x66>
 800d4ba:	bf00      	nop
 800d4bc:	080115ce 	.word	0x080115ce
 800d4c0:	0801164e 	.word	0x0801164e

0800d4c4 <_Bfree>:
 800d4c4:	b570      	push	{r4, r5, r6, lr}
 800d4c6:	69c6      	ldr	r6, [r0, #28]
 800d4c8:	4605      	mov	r5, r0
 800d4ca:	460c      	mov	r4, r1
 800d4cc:	b976      	cbnz	r6, 800d4ec <_Bfree+0x28>
 800d4ce:	2010      	movs	r0, #16
 800d4d0:	f7ff ff02 	bl	800d2d8 <malloc>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	61e8      	str	r0, [r5, #28]
 800d4d8:	b920      	cbnz	r0, 800d4e4 <_Bfree+0x20>
 800d4da:	218f      	movs	r1, #143	@ 0x8f
 800d4dc:	4b08      	ldr	r3, [pc, #32]	@ (800d500 <_Bfree+0x3c>)
 800d4de:	4809      	ldr	r0, [pc, #36]	@ (800d504 <_Bfree+0x40>)
 800d4e0:	f001 fed2 	bl	800f288 <__assert_func>
 800d4e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4e8:	6006      	str	r6, [r0, #0]
 800d4ea:	60c6      	str	r6, [r0, #12]
 800d4ec:	b13c      	cbz	r4, 800d4fe <_Bfree+0x3a>
 800d4ee:	69eb      	ldr	r3, [r5, #28]
 800d4f0:	6862      	ldr	r2, [r4, #4]
 800d4f2:	68db      	ldr	r3, [r3, #12]
 800d4f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d4f8:	6021      	str	r1, [r4, #0]
 800d4fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d4fe:	bd70      	pop	{r4, r5, r6, pc}
 800d500:	080115ce 	.word	0x080115ce
 800d504:	0801164e 	.word	0x0801164e

0800d508 <__multadd>:
 800d508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d50c:	4607      	mov	r7, r0
 800d50e:	460c      	mov	r4, r1
 800d510:	461e      	mov	r6, r3
 800d512:	2000      	movs	r0, #0
 800d514:	690d      	ldr	r5, [r1, #16]
 800d516:	f101 0c14 	add.w	ip, r1, #20
 800d51a:	f8dc 3000 	ldr.w	r3, [ip]
 800d51e:	3001      	adds	r0, #1
 800d520:	b299      	uxth	r1, r3
 800d522:	fb02 6101 	mla	r1, r2, r1, r6
 800d526:	0c1e      	lsrs	r6, r3, #16
 800d528:	0c0b      	lsrs	r3, r1, #16
 800d52a:	fb02 3306 	mla	r3, r2, r6, r3
 800d52e:	b289      	uxth	r1, r1
 800d530:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d534:	4285      	cmp	r5, r0
 800d536:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d53a:	f84c 1b04 	str.w	r1, [ip], #4
 800d53e:	dcec      	bgt.n	800d51a <__multadd+0x12>
 800d540:	b30e      	cbz	r6, 800d586 <__multadd+0x7e>
 800d542:	68a3      	ldr	r3, [r4, #8]
 800d544:	42ab      	cmp	r3, r5
 800d546:	dc19      	bgt.n	800d57c <__multadd+0x74>
 800d548:	6861      	ldr	r1, [r4, #4]
 800d54a:	4638      	mov	r0, r7
 800d54c:	3101      	adds	r1, #1
 800d54e:	f7ff ff79 	bl	800d444 <_Balloc>
 800d552:	4680      	mov	r8, r0
 800d554:	b928      	cbnz	r0, 800d562 <__multadd+0x5a>
 800d556:	4602      	mov	r2, r0
 800d558:	21ba      	movs	r1, #186	@ 0xba
 800d55a:	4b0c      	ldr	r3, [pc, #48]	@ (800d58c <__multadd+0x84>)
 800d55c:	480c      	ldr	r0, [pc, #48]	@ (800d590 <__multadd+0x88>)
 800d55e:	f001 fe93 	bl	800f288 <__assert_func>
 800d562:	6922      	ldr	r2, [r4, #16]
 800d564:	f104 010c 	add.w	r1, r4, #12
 800d568:	3202      	adds	r2, #2
 800d56a:	0092      	lsls	r2, r2, #2
 800d56c:	300c      	adds	r0, #12
 800d56e:	f7fe fffc 	bl	800c56a <memcpy>
 800d572:	4621      	mov	r1, r4
 800d574:	4638      	mov	r0, r7
 800d576:	f7ff ffa5 	bl	800d4c4 <_Bfree>
 800d57a:	4644      	mov	r4, r8
 800d57c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d580:	3501      	adds	r5, #1
 800d582:	615e      	str	r6, [r3, #20]
 800d584:	6125      	str	r5, [r4, #16]
 800d586:	4620      	mov	r0, r4
 800d588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d58c:	0801163d 	.word	0x0801163d
 800d590:	0801164e 	.word	0x0801164e

0800d594 <__s2b>:
 800d594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d598:	4615      	mov	r5, r2
 800d59a:	2209      	movs	r2, #9
 800d59c:	461f      	mov	r7, r3
 800d59e:	3308      	adds	r3, #8
 800d5a0:	460c      	mov	r4, r1
 800d5a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d5a6:	4606      	mov	r6, r0
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	2100      	movs	r1, #0
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	db09      	blt.n	800d5c4 <__s2b+0x30>
 800d5b0:	4630      	mov	r0, r6
 800d5b2:	f7ff ff47 	bl	800d444 <_Balloc>
 800d5b6:	b940      	cbnz	r0, 800d5ca <__s2b+0x36>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	21d3      	movs	r1, #211	@ 0xd3
 800d5bc:	4b18      	ldr	r3, [pc, #96]	@ (800d620 <__s2b+0x8c>)
 800d5be:	4819      	ldr	r0, [pc, #100]	@ (800d624 <__s2b+0x90>)
 800d5c0:	f001 fe62 	bl	800f288 <__assert_func>
 800d5c4:	0052      	lsls	r2, r2, #1
 800d5c6:	3101      	adds	r1, #1
 800d5c8:	e7f0      	b.n	800d5ac <__s2b+0x18>
 800d5ca:	9b08      	ldr	r3, [sp, #32]
 800d5cc:	2d09      	cmp	r5, #9
 800d5ce:	6143      	str	r3, [r0, #20]
 800d5d0:	f04f 0301 	mov.w	r3, #1
 800d5d4:	6103      	str	r3, [r0, #16]
 800d5d6:	dd16      	ble.n	800d606 <__s2b+0x72>
 800d5d8:	f104 0909 	add.w	r9, r4, #9
 800d5dc:	46c8      	mov	r8, r9
 800d5de:	442c      	add	r4, r5
 800d5e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d5e4:	4601      	mov	r1, r0
 800d5e6:	220a      	movs	r2, #10
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	3b30      	subs	r3, #48	@ 0x30
 800d5ec:	f7ff ff8c 	bl	800d508 <__multadd>
 800d5f0:	45a0      	cmp	r8, r4
 800d5f2:	d1f5      	bne.n	800d5e0 <__s2b+0x4c>
 800d5f4:	f1a5 0408 	sub.w	r4, r5, #8
 800d5f8:	444c      	add	r4, r9
 800d5fa:	1b2d      	subs	r5, r5, r4
 800d5fc:	1963      	adds	r3, r4, r5
 800d5fe:	42bb      	cmp	r3, r7
 800d600:	db04      	blt.n	800d60c <__s2b+0x78>
 800d602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d606:	2509      	movs	r5, #9
 800d608:	340a      	adds	r4, #10
 800d60a:	e7f6      	b.n	800d5fa <__s2b+0x66>
 800d60c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d610:	4601      	mov	r1, r0
 800d612:	220a      	movs	r2, #10
 800d614:	4630      	mov	r0, r6
 800d616:	3b30      	subs	r3, #48	@ 0x30
 800d618:	f7ff ff76 	bl	800d508 <__multadd>
 800d61c:	e7ee      	b.n	800d5fc <__s2b+0x68>
 800d61e:	bf00      	nop
 800d620:	0801163d 	.word	0x0801163d
 800d624:	0801164e 	.word	0x0801164e

0800d628 <__hi0bits>:
 800d628:	4603      	mov	r3, r0
 800d62a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d62e:	bf3a      	itte	cc
 800d630:	0403      	lslcc	r3, r0, #16
 800d632:	2010      	movcc	r0, #16
 800d634:	2000      	movcs	r0, #0
 800d636:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d63a:	bf3c      	itt	cc
 800d63c:	021b      	lslcc	r3, r3, #8
 800d63e:	3008      	addcc	r0, #8
 800d640:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d644:	bf3c      	itt	cc
 800d646:	011b      	lslcc	r3, r3, #4
 800d648:	3004      	addcc	r0, #4
 800d64a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d64e:	bf3c      	itt	cc
 800d650:	009b      	lslcc	r3, r3, #2
 800d652:	3002      	addcc	r0, #2
 800d654:	2b00      	cmp	r3, #0
 800d656:	db05      	blt.n	800d664 <__hi0bits+0x3c>
 800d658:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d65c:	f100 0001 	add.w	r0, r0, #1
 800d660:	bf08      	it	eq
 800d662:	2020      	moveq	r0, #32
 800d664:	4770      	bx	lr

0800d666 <__lo0bits>:
 800d666:	6803      	ldr	r3, [r0, #0]
 800d668:	4602      	mov	r2, r0
 800d66a:	f013 0007 	ands.w	r0, r3, #7
 800d66e:	d00b      	beq.n	800d688 <__lo0bits+0x22>
 800d670:	07d9      	lsls	r1, r3, #31
 800d672:	d421      	bmi.n	800d6b8 <__lo0bits+0x52>
 800d674:	0798      	lsls	r0, r3, #30
 800d676:	bf49      	itett	mi
 800d678:	085b      	lsrmi	r3, r3, #1
 800d67a:	089b      	lsrpl	r3, r3, #2
 800d67c:	2001      	movmi	r0, #1
 800d67e:	6013      	strmi	r3, [r2, #0]
 800d680:	bf5c      	itt	pl
 800d682:	2002      	movpl	r0, #2
 800d684:	6013      	strpl	r3, [r2, #0]
 800d686:	4770      	bx	lr
 800d688:	b299      	uxth	r1, r3
 800d68a:	b909      	cbnz	r1, 800d690 <__lo0bits+0x2a>
 800d68c:	2010      	movs	r0, #16
 800d68e:	0c1b      	lsrs	r3, r3, #16
 800d690:	b2d9      	uxtb	r1, r3
 800d692:	b909      	cbnz	r1, 800d698 <__lo0bits+0x32>
 800d694:	3008      	adds	r0, #8
 800d696:	0a1b      	lsrs	r3, r3, #8
 800d698:	0719      	lsls	r1, r3, #28
 800d69a:	bf04      	itt	eq
 800d69c:	091b      	lsreq	r3, r3, #4
 800d69e:	3004      	addeq	r0, #4
 800d6a0:	0799      	lsls	r1, r3, #30
 800d6a2:	bf04      	itt	eq
 800d6a4:	089b      	lsreq	r3, r3, #2
 800d6a6:	3002      	addeq	r0, #2
 800d6a8:	07d9      	lsls	r1, r3, #31
 800d6aa:	d403      	bmi.n	800d6b4 <__lo0bits+0x4e>
 800d6ac:	085b      	lsrs	r3, r3, #1
 800d6ae:	f100 0001 	add.w	r0, r0, #1
 800d6b2:	d003      	beq.n	800d6bc <__lo0bits+0x56>
 800d6b4:	6013      	str	r3, [r2, #0]
 800d6b6:	4770      	bx	lr
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	4770      	bx	lr
 800d6bc:	2020      	movs	r0, #32
 800d6be:	4770      	bx	lr

0800d6c0 <__i2b>:
 800d6c0:	b510      	push	{r4, lr}
 800d6c2:	460c      	mov	r4, r1
 800d6c4:	2101      	movs	r1, #1
 800d6c6:	f7ff febd 	bl	800d444 <_Balloc>
 800d6ca:	4602      	mov	r2, r0
 800d6cc:	b928      	cbnz	r0, 800d6da <__i2b+0x1a>
 800d6ce:	f240 1145 	movw	r1, #325	@ 0x145
 800d6d2:	4b04      	ldr	r3, [pc, #16]	@ (800d6e4 <__i2b+0x24>)
 800d6d4:	4804      	ldr	r0, [pc, #16]	@ (800d6e8 <__i2b+0x28>)
 800d6d6:	f001 fdd7 	bl	800f288 <__assert_func>
 800d6da:	2301      	movs	r3, #1
 800d6dc:	6144      	str	r4, [r0, #20]
 800d6de:	6103      	str	r3, [r0, #16]
 800d6e0:	bd10      	pop	{r4, pc}
 800d6e2:	bf00      	nop
 800d6e4:	0801163d 	.word	0x0801163d
 800d6e8:	0801164e 	.word	0x0801164e

0800d6ec <__multiply>:
 800d6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6f0:	4617      	mov	r7, r2
 800d6f2:	690a      	ldr	r2, [r1, #16]
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	4689      	mov	r9, r1
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	bfa2      	ittt	ge
 800d6fc:	463b      	movge	r3, r7
 800d6fe:	460f      	movge	r7, r1
 800d700:	4699      	movge	r9, r3
 800d702:	693d      	ldr	r5, [r7, #16]
 800d704:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	6879      	ldr	r1, [r7, #4]
 800d70c:	eb05 060a 	add.w	r6, r5, sl
 800d710:	42b3      	cmp	r3, r6
 800d712:	b085      	sub	sp, #20
 800d714:	bfb8      	it	lt
 800d716:	3101      	addlt	r1, #1
 800d718:	f7ff fe94 	bl	800d444 <_Balloc>
 800d71c:	b930      	cbnz	r0, 800d72c <__multiply+0x40>
 800d71e:	4602      	mov	r2, r0
 800d720:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d724:	4b40      	ldr	r3, [pc, #256]	@ (800d828 <__multiply+0x13c>)
 800d726:	4841      	ldr	r0, [pc, #260]	@ (800d82c <__multiply+0x140>)
 800d728:	f001 fdae 	bl	800f288 <__assert_func>
 800d72c:	f100 0414 	add.w	r4, r0, #20
 800d730:	4623      	mov	r3, r4
 800d732:	2200      	movs	r2, #0
 800d734:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d738:	4573      	cmp	r3, lr
 800d73a:	d320      	bcc.n	800d77e <__multiply+0x92>
 800d73c:	f107 0814 	add.w	r8, r7, #20
 800d740:	f109 0114 	add.w	r1, r9, #20
 800d744:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d748:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d74c:	9302      	str	r3, [sp, #8]
 800d74e:	1beb      	subs	r3, r5, r7
 800d750:	3b15      	subs	r3, #21
 800d752:	f023 0303 	bic.w	r3, r3, #3
 800d756:	3304      	adds	r3, #4
 800d758:	3715      	adds	r7, #21
 800d75a:	42bd      	cmp	r5, r7
 800d75c:	bf38      	it	cc
 800d75e:	2304      	movcc	r3, #4
 800d760:	9301      	str	r3, [sp, #4]
 800d762:	9b02      	ldr	r3, [sp, #8]
 800d764:	9103      	str	r1, [sp, #12]
 800d766:	428b      	cmp	r3, r1
 800d768:	d80c      	bhi.n	800d784 <__multiply+0x98>
 800d76a:	2e00      	cmp	r6, #0
 800d76c:	dd03      	ble.n	800d776 <__multiply+0x8a>
 800d76e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d772:	2b00      	cmp	r3, #0
 800d774:	d055      	beq.n	800d822 <__multiply+0x136>
 800d776:	6106      	str	r6, [r0, #16]
 800d778:	b005      	add	sp, #20
 800d77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d77e:	f843 2b04 	str.w	r2, [r3], #4
 800d782:	e7d9      	b.n	800d738 <__multiply+0x4c>
 800d784:	f8b1 a000 	ldrh.w	sl, [r1]
 800d788:	f1ba 0f00 	cmp.w	sl, #0
 800d78c:	d01f      	beq.n	800d7ce <__multiply+0xe2>
 800d78e:	46c4      	mov	ip, r8
 800d790:	46a1      	mov	r9, r4
 800d792:	2700      	movs	r7, #0
 800d794:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d798:	f8d9 3000 	ldr.w	r3, [r9]
 800d79c:	fa1f fb82 	uxth.w	fp, r2
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	fb0a 330b 	mla	r3, sl, fp, r3
 800d7a6:	443b      	add	r3, r7
 800d7a8:	f8d9 7000 	ldr.w	r7, [r9]
 800d7ac:	0c12      	lsrs	r2, r2, #16
 800d7ae:	0c3f      	lsrs	r7, r7, #16
 800d7b0:	fb0a 7202 	mla	r2, sl, r2, r7
 800d7b4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d7b8:	b29b      	uxth	r3, r3
 800d7ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7be:	4565      	cmp	r5, ip
 800d7c0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d7c4:	f849 3b04 	str.w	r3, [r9], #4
 800d7c8:	d8e4      	bhi.n	800d794 <__multiply+0xa8>
 800d7ca:	9b01      	ldr	r3, [sp, #4]
 800d7cc:	50e7      	str	r7, [r4, r3]
 800d7ce:	9b03      	ldr	r3, [sp, #12]
 800d7d0:	3104      	adds	r1, #4
 800d7d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d7d6:	f1b9 0f00 	cmp.w	r9, #0
 800d7da:	d020      	beq.n	800d81e <__multiply+0x132>
 800d7dc:	4647      	mov	r7, r8
 800d7de:	46a4      	mov	ip, r4
 800d7e0:	f04f 0a00 	mov.w	sl, #0
 800d7e4:	6823      	ldr	r3, [r4, #0]
 800d7e6:	f8b7 b000 	ldrh.w	fp, [r7]
 800d7ea:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d7ee:	b29b      	uxth	r3, r3
 800d7f0:	fb09 220b 	mla	r2, r9, fp, r2
 800d7f4:	4452      	add	r2, sl
 800d7f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7fa:	f84c 3b04 	str.w	r3, [ip], #4
 800d7fe:	f857 3b04 	ldr.w	r3, [r7], #4
 800d802:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d806:	f8bc 3000 	ldrh.w	r3, [ip]
 800d80a:	42bd      	cmp	r5, r7
 800d80c:	fb09 330a 	mla	r3, r9, sl, r3
 800d810:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d814:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d818:	d8e5      	bhi.n	800d7e6 <__multiply+0xfa>
 800d81a:	9a01      	ldr	r2, [sp, #4]
 800d81c:	50a3      	str	r3, [r4, r2]
 800d81e:	3404      	adds	r4, #4
 800d820:	e79f      	b.n	800d762 <__multiply+0x76>
 800d822:	3e01      	subs	r6, #1
 800d824:	e7a1      	b.n	800d76a <__multiply+0x7e>
 800d826:	bf00      	nop
 800d828:	0801163d 	.word	0x0801163d
 800d82c:	0801164e 	.word	0x0801164e

0800d830 <__pow5mult>:
 800d830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d834:	4615      	mov	r5, r2
 800d836:	f012 0203 	ands.w	r2, r2, #3
 800d83a:	4607      	mov	r7, r0
 800d83c:	460e      	mov	r6, r1
 800d83e:	d007      	beq.n	800d850 <__pow5mult+0x20>
 800d840:	4c25      	ldr	r4, [pc, #148]	@ (800d8d8 <__pow5mult+0xa8>)
 800d842:	3a01      	subs	r2, #1
 800d844:	2300      	movs	r3, #0
 800d846:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d84a:	f7ff fe5d 	bl	800d508 <__multadd>
 800d84e:	4606      	mov	r6, r0
 800d850:	10ad      	asrs	r5, r5, #2
 800d852:	d03d      	beq.n	800d8d0 <__pow5mult+0xa0>
 800d854:	69fc      	ldr	r4, [r7, #28]
 800d856:	b97c      	cbnz	r4, 800d878 <__pow5mult+0x48>
 800d858:	2010      	movs	r0, #16
 800d85a:	f7ff fd3d 	bl	800d2d8 <malloc>
 800d85e:	4602      	mov	r2, r0
 800d860:	61f8      	str	r0, [r7, #28]
 800d862:	b928      	cbnz	r0, 800d870 <__pow5mult+0x40>
 800d864:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d868:	4b1c      	ldr	r3, [pc, #112]	@ (800d8dc <__pow5mult+0xac>)
 800d86a:	481d      	ldr	r0, [pc, #116]	@ (800d8e0 <__pow5mult+0xb0>)
 800d86c:	f001 fd0c 	bl	800f288 <__assert_func>
 800d870:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d874:	6004      	str	r4, [r0, #0]
 800d876:	60c4      	str	r4, [r0, #12]
 800d878:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d87c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d880:	b94c      	cbnz	r4, 800d896 <__pow5mult+0x66>
 800d882:	f240 2171 	movw	r1, #625	@ 0x271
 800d886:	4638      	mov	r0, r7
 800d888:	f7ff ff1a 	bl	800d6c0 <__i2b>
 800d88c:	2300      	movs	r3, #0
 800d88e:	4604      	mov	r4, r0
 800d890:	f8c8 0008 	str.w	r0, [r8, #8]
 800d894:	6003      	str	r3, [r0, #0]
 800d896:	f04f 0900 	mov.w	r9, #0
 800d89a:	07eb      	lsls	r3, r5, #31
 800d89c:	d50a      	bpl.n	800d8b4 <__pow5mult+0x84>
 800d89e:	4631      	mov	r1, r6
 800d8a0:	4622      	mov	r2, r4
 800d8a2:	4638      	mov	r0, r7
 800d8a4:	f7ff ff22 	bl	800d6ec <__multiply>
 800d8a8:	4680      	mov	r8, r0
 800d8aa:	4631      	mov	r1, r6
 800d8ac:	4638      	mov	r0, r7
 800d8ae:	f7ff fe09 	bl	800d4c4 <_Bfree>
 800d8b2:	4646      	mov	r6, r8
 800d8b4:	106d      	asrs	r5, r5, #1
 800d8b6:	d00b      	beq.n	800d8d0 <__pow5mult+0xa0>
 800d8b8:	6820      	ldr	r0, [r4, #0]
 800d8ba:	b938      	cbnz	r0, 800d8cc <__pow5mult+0x9c>
 800d8bc:	4622      	mov	r2, r4
 800d8be:	4621      	mov	r1, r4
 800d8c0:	4638      	mov	r0, r7
 800d8c2:	f7ff ff13 	bl	800d6ec <__multiply>
 800d8c6:	6020      	str	r0, [r4, #0]
 800d8c8:	f8c0 9000 	str.w	r9, [r0]
 800d8cc:	4604      	mov	r4, r0
 800d8ce:	e7e4      	b.n	800d89a <__pow5mult+0x6a>
 800d8d0:	4630      	mov	r0, r6
 800d8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8d6:	bf00      	nop
 800d8d8:	08011760 	.word	0x08011760
 800d8dc:	080115ce 	.word	0x080115ce
 800d8e0:	0801164e 	.word	0x0801164e

0800d8e4 <__lshift>:
 800d8e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8e8:	460c      	mov	r4, r1
 800d8ea:	4607      	mov	r7, r0
 800d8ec:	4691      	mov	r9, r2
 800d8ee:	6923      	ldr	r3, [r4, #16]
 800d8f0:	6849      	ldr	r1, [r1, #4]
 800d8f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d8f6:	68a3      	ldr	r3, [r4, #8]
 800d8f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d8fc:	f108 0601 	add.w	r6, r8, #1
 800d900:	42b3      	cmp	r3, r6
 800d902:	db0b      	blt.n	800d91c <__lshift+0x38>
 800d904:	4638      	mov	r0, r7
 800d906:	f7ff fd9d 	bl	800d444 <_Balloc>
 800d90a:	4605      	mov	r5, r0
 800d90c:	b948      	cbnz	r0, 800d922 <__lshift+0x3e>
 800d90e:	4602      	mov	r2, r0
 800d910:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d914:	4b27      	ldr	r3, [pc, #156]	@ (800d9b4 <__lshift+0xd0>)
 800d916:	4828      	ldr	r0, [pc, #160]	@ (800d9b8 <__lshift+0xd4>)
 800d918:	f001 fcb6 	bl	800f288 <__assert_func>
 800d91c:	3101      	adds	r1, #1
 800d91e:	005b      	lsls	r3, r3, #1
 800d920:	e7ee      	b.n	800d900 <__lshift+0x1c>
 800d922:	2300      	movs	r3, #0
 800d924:	f100 0114 	add.w	r1, r0, #20
 800d928:	f100 0210 	add.w	r2, r0, #16
 800d92c:	4618      	mov	r0, r3
 800d92e:	4553      	cmp	r3, sl
 800d930:	db33      	blt.n	800d99a <__lshift+0xb6>
 800d932:	6920      	ldr	r0, [r4, #16]
 800d934:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d938:	f104 0314 	add.w	r3, r4, #20
 800d93c:	f019 091f 	ands.w	r9, r9, #31
 800d940:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d944:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d948:	d02b      	beq.n	800d9a2 <__lshift+0xbe>
 800d94a:	468a      	mov	sl, r1
 800d94c:	2200      	movs	r2, #0
 800d94e:	f1c9 0e20 	rsb	lr, r9, #32
 800d952:	6818      	ldr	r0, [r3, #0]
 800d954:	fa00 f009 	lsl.w	r0, r0, r9
 800d958:	4310      	orrs	r0, r2
 800d95a:	f84a 0b04 	str.w	r0, [sl], #4
 800d95e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d962:	459c      	cmp	ip, r3
 800d964:	fa22 f20e 	lsr.w	r2, r2, lr
 800d968:	d8f3      	bhi.n	800d952 <__lshift+0x6e>
 800d96a:	ebac 0304 	sub.w	r3, ip, r4
 800d96e:	3b15      	subs	r3, #21
 800d970:	f023 0303 	bic.w	r3, r3, #3
 800d974:	3304      	adds	r3, #4
 800d976:	f104 0015 	add.w	r0, r4, #21
 800d97a:	4560      	cmp	r0, ip
 800d97c:	bf88      	it	hi
 800d97e:	2304      	movhi	r3, #4
 800d980:	50ca      	str	r2, [r1, r3]
 800d982:	b10a      	cbz	r2, 800d988 <__lshift+0xa4>
 800d984:	f108 0602 	add.w	r6, r8, #2
 800d988:	3e01      	subs	r6, #1
 800d98a:	4638      	mov	r0, r7
 800d98c:	4621      	mov	r1, r4
 800d98e:	612e      	str	r6, [r5, #16]
 800d990:	f7ff fd98 	bl	800d4c4 <_Bfree>
 800d994:	4628      	mov	r0, r5
 800d996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d99a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d99e:	3301      	adds	r3, #1
 800d9a0:	e7c5      	b.n	800d92e <__lshift+0x4a>
 800d9a2:	3904      	subs	r1, #4
 800d9a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9a8:	459c      	cmp	ip, r3
 800d9aa:	f841 2f04 	str.w	r2, [r1, #4]!
 800d9ae:	d8f9      	bhi.n	800d9a4 <__lshift+0xc0>
 800d9b0:	e7ea      	b.n	800d988 <__lshift+0xa4>
 800d9b2:	bf00      	nop
 800d9b4:	0801163d 	.word	0x0801163d
 800d9b8:	0801164e 	.word	0x0801164e

0800d9bc <__mcmp>:
 800d9bc:	4603      	mov	r3, r0
 800d9be:	690a      	ldr	r2, [r1, #16]
 800d9c0:	6900      	ldr	r0, [r0, #16]
 800d9c2:	b530      	push	{r4, r5, lr}
 800d9c4:	1a80      	subs	r0, r0, r2
 800d9c6:	d10e      	bne.n	800d9e6 <__mcmp+0x2a>
 800d9c8:	3314      	adds	r3, #20
 800d9ca:	3114      	adds	r1, #20
 800d9cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d9d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d9d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d9d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d9dc:	4295      	cmp	r5, r2
 800d9de:	d003      	beq.n	800d9e8 <__mcmp+0x2c>
 800d9e0:	d205      	bcs.n	800d9ee <__mcmp+0x32>
 800d9e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d9e6:	bd30      	pop	{r4, r5, pc}
 800d9e8:	42a3      	cmp	r3, r4
 800d9ea:	d3f3      	bcc.n	800d9d4 <__mcmp+0x18>
 800d9ec:	e7fb      	b.n	800d9e6 <__mcmp+0x2a>
 800d9ee:	2001      	movs	r0, #1
 800d9f0:	e7f9      	b.n	800d9e6 <__mcmp+0x2a>
	...

0800d9f4 <__mdiff>:
 800d9f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f8:	4689      	mov	r9, r1
 800d9fa:	4606      	mov	r6, r0
 800d9fc:	4611      	mov	r1, r2
 800d9fe:	4648      	mov	r0, r9
 800da00:	4614      	mov	r4, r2
 800da02:	f7ff ffdb 	bl	800d9bc <__mcmp>
 800da06:	1e05      	subs	r5, r0, #0
 800da08:	d112      	bne.n	800da30 <__mdiff+0x3c>
 800da0a:	4629      	mov	r1, r5
 800da0c:	4630      	mov	r0, r6
 800da0e:	f7ff fd19 	bl	800d444 <_Balloc>
 800da12:	4602      	mov	r2, r0
 800da14:	b928      	cbnz	r0, 800da22 <__mdiff+0x2e>
 800da16:	f240 2137 	movw	r1, #567	@ 0x237
 800da1a:	4b3e      	ldr	r3, [pc, #248]	@ (800db14 <__mdiff+0x120>)
 800da1c:	483e      	ldr	r0, [pc, #248]	@ (800db18 <__mdiff+0x124>)
 800da1e:	f001 fc33 	bl	800f288 <__assert_func>
 800da22:	2301      	movs	r3, #1
 800da24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da28:	4610      	mov	r0, r2
 800da2a:	b003      	add	sp, #12
 800da2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da30:	bfbc      	itt	lt
 800da32:	464b      	movlt	r3, r9
 800da34:	46a1      	movlt	r9, r4
 800da36:	4630      	mov	r0, r6
 800da38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800da3c:	bfba      	itte	lt
 800da3e:	461c      	movlt	r4, r3
 800da40:	2501      	movlt	r5, #1
 800da42:	2500      	movge	r5, #0
 800da44:	f7ff fcfe 	bl	800d444 <_Balloc>
 800da48:	4602      	mov	r2, r0
 800da4a:	b918      	cbnz	r0, 800da54 <__mdiff+0x60>
 800da4c:	f240 2145 	movw	r1, #581	@ 0x245
 800da50:	4b30      	ldr	r3, [pc, #192]	@ (800db14 <__mdiff+0x120>)
 800da52:	e7e3      	b.n	800da1c <__mdiff+0x28>
 800da54:	f100 0b14 	add.w	fp, r0, #20
 800da58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800da5c:	f109 0310 	add.w	r3, r9, #16
 800da60:	60c5      	str	r5, [r0, #12]
 800da62:	f04f 0c00 	mov.w	ip, #0
 800da66:	f109 0514 	add.w	r5, r9, #20
 800da6a:	46d9      	mov	r9, fp
 800da6c:	6926      	ldr	r6, [r4, #16]
 800da6e:	f104 0e14 	add.w	lr, r4, #20
 800da72:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800da76:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800da7a:	9301      	str	r3, [sp, #4]
 800da7c:	9b01      	ldr	r3, [sp, #4]
 800da7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800da82:	f853 af04 	ldr.w	sl, [r3, #4]!
 800da86:	b281      	uxth	r1, r0
 800da88:	9301      	str	r3, [sp, #4]
 800da8a:	fa1f f38a 	uxth.w	r3, sl
 800da8e:	1a5b      	subs	r3, r3, r1
 800da90:	0c00      	lsrs	r0, r0, #16
 800da92:	4463      	add	r3, ip
 800da94:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800da98:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800daa2:	4576      	cmp	r6, lr
 800daa4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800daa8:	f849 3b04 	str.w	r3, [r9], #4
 800daac:	d8e6      	bhi.n	800da7c <__mdiff+0x88>
 800daae:	1b33      	subs	r3, r6, r4
 800dab0:	3b15      	subs	r3, #21
 800dab2:	f023 0303 	bic.w	r3, r3, #3
 800dab6:	3415      	adds	r4, #21
 800dab8:	3304      	adds	r3, #4
 800daba:	42a6      	cmp	r6, r4
 800dabc:	bf38      	it	cc
 800dabe:	2304      	movcc	r3, #4
 800dac0:	441d      	add	r5, r3
 800dac2:	445b      	add	r3, fp
 800dac4:	461e      	mov	r6, r3
 800dac6:	462c      	mov	r4, r5
 800dac8:	4544      	cmp	r4, r8
 800daca:	d30e      	bcc.n	800daea <__mdiff+0xf6>
 800dacc:	f108 0103 	add.w	r1, r8, #3
 800dad0:	1b49      	subs	r1, r1, r5
 800dad2:	f021 0103 	bic.w	r1, r1, #3
 800dad6:	3d03      	subs	r5, #3
 800dad8:	45a8      	cmp	r8, r5
 800dada:	bf38      	it	cc
 800dadc:	2100      	movcc	r1, #0
 800dade:	440b      	add	r3, r1
 800dae0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dae4:	b199      	cbz	r1, 800db0e <__mdiff+0x11a>
 800dae6:	6117      	str	r7, [r2, #16]
 800dae8:	e79e      	b.n	800da28 <__mdiff+0x34>
 800daea:	46e6      	mov	lr, ip
 800daec:	f854 1b04 	ldr.w	r1, [r4], #4
 800daf0:	fa1f fc81 	uxth.w	ip, r1
 800daf4:	44f4      	add	ip, lr
 800daf6:	0c08      	lsrs	r0, r1, #16
 800daf8:	4471      	add	r1, lr
 800dafa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dafe:	b289      	uxth	r1, r1
 800db00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800db04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800db08:	f846 1b04 	str.w	r1, [r6], #4
 800db0c:	e7dc      	b.n	800dac8 <__mdiff+0xd4>
 800db0e:	3f01      	subs	r7, #1
 800db10:	e7e6      	b.n	800dae0 <__mdiff+0xec>
 800db12:	bf00      	nop
 800db14:	0801163d 	.word	0x0801163d
 800db18:	0801164e 	.word	0x0801164e

0800db1c <__ulp>:
 800db1c:	4b0e      	ldr	r3, [pc, #56]	@ (800db58 <__ulp+0x3c>)
 800db1e:	400b      	ands	r3, r1
 800db20:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800db24:	2b00      	cmp	r3, #0
 800db26:	dc08      	bgt.n	800db3a <__ulp+0x1e>
 800db28:	425b      	negs	r3, r3
 800db2a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800db2e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800db32:	da04      	bge.n	800db3e <__ulp+0x22>
 800db34:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800db38:	4113      	asrs	r3, r2
 800db3a:	2200      	movs	r2, #0
 800db3c:	e008      	b.n	800db50 <__ulp+0x34>
 800db3e:	f1a2 0314 	sub.w	r3, r2, #20
 800db42:	2b1e      	cmp	r3, #30
 800db44:	bfd6      	itet	le
 800db46:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800db4a:	2201      	movgt	r2, #1
 800db4c:	40da      	lsrle	r2, r3
 800db4e:	2300      	movs	r3, #0
 800db50:	4619      	mov	r1, r3
 800db52:	4610      	mov	r0, r2
 800db54:	4770      	bx	lr
 800db56:	bf00      	nop
 800db58:	7ff00000 	.word	0x7ff00000

0800db5c <__b2d>:
 800db5c:	6902      	ldr	r2, [r0, #16]
 800db5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db60:	f100 0614 	add.w	r6, r0, #20
 800db64:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800db68:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800db6c:	4f1e      	ldr	r7, [pc, #120]	@ (800dbe8 <__b2d+0x8c>)
 800db6e:	4620      	mov	r0, r4
 800db70:	f7ff fd5a 	bl	800d628 <__hi0bits>
 800db74:	4603      	mov	r3, r0
 800db76:	f1c0 0020 	rsb	r0, r0, #32
 800db7a:	2b0a      	cmp	r3, #10
 800db7c:	f1a2 0504 	sub.w	r5, r2, #4
 800db80:	6008      	str	r0, [r1, #0]
 800db82:	dc12      	bgt.n	800dbaa <__b2d+0x4e>
 800db84:	42ae      	cmp	r6, r5
 800db86:	bf2c      	ite	cs
 800db88:	2200      	movcs	r2, #0
 800db8a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800db8e:	f1c3 0c0b 	rsb	ip, r3, #11
 800db92:	3315      	adds	r3, #21
 800db94:	fa24 fe0c 	lsr.w	lr, r4, ip
 800db98:	fa04 f303 	lsl.w	r3, r4, r3
 800db9c:	fa22 f20c 	lsr.w	r2, r2, ip
 800dba0:	ea4e 0107 	orr.w	r1, lr, r7
 800dba4:	431a      	orrs	r2, r3
 800dba6:	4610      	mov	r0, r2
 800dba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbaa:	42ae      	cmp	r6, r5
 800dbac:	bf36      	itet	cc
 800dbae:	f1a2 0508 	subcc.w	r5, r2, #8
 800dbb2:	2200      	movcs	r2, #0
 800dbb4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800dbb8:	3b0b      	subs	r3, #11
 800dbba:	d012      	beq.n	800dbe2 <__b2d+0x86>
 800dbbc:	f1c3 0720 	rsb	r7, r3, #32
 800dbc0:	fa22 f107 	lsr.w	r1, r2, r7
 800dbc4:	409c      	lsls	r4, r3
 800dbc6:	430c      	orrs	r4, r1
 800dbc8:	42b5      	cmp	r5, r6
 800dbca:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800dbce:	bf94      	ite	ls
 800dbd0:	2400      	movls	r4, #0
 800dbd2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800dbd6:	409a      	lsls	r2, r3
 800dbd8:	40fc      	lsrs	r4, r7
 800dbda:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800dbde:	4322      	orrs	r2, r4
 800dbe0:	e7e1      	b.n	800dba6 <__b2d+0x4a>
 800dbe2:	ea44 0107 	orr.w	r1, r4, r7
 800dbe6:	e7de      	b.n	800dba6 <__b2d+0x4a>
 800dbe8:	3ff00000 	.word	0x3ff00000

0800dbec <__d2b>:
 800dbec:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800dbf0:	2101      	movs	r1, #1
 800dbf2:	4690      	mov	r8, r2
 800dbf4:	4699      	mov	r9, r3
 800dbf6:	9e08      	ldr	r6, [sp, #32]
 800dbf8:	f7ff fc24 	bl	800d444 <_Balloc>
 800dbfc:	4604      	mov	r4, r0
 800dbfe:	b930      	cbnz	r0, 800dc0e <__d2b+0x22>
 800dc00:	4602      	mov	r2, r0
 800dc02:	f240 310f 	movw	r1, #783	@ 0x30f
 800dc06:	4b23      	ldr	r3, [pc, #140]	@ (800dc94 <__d2b+0xa8>)
 800dc08:	4823      	ldr	r0, [pc, #140]	@ (800dc98 <__d2b+0xac>)
 800dc0a:	f001 fb3d 	bl	800f288 <__assert_func>
 800dc0e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dc12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dc16:	b10d      	cbz	r5, 800dc1c <__d2b+0x30>
 800dc18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dc1c:	9301      	str	r3, [sp, #4]
 800dc1e:	f1b8 0300 	subs.w	r3, r8, #0
 800dc22:	d024      	beq.n	800dc6e <__d2b+0x82>
 800dc24:	4668      	mov	r0, sp
 800dc26:	9300      	str	r3, [sp, #0]
 800dc28:	f7ff fd1d 	bl	800d666 <__lo0bits>
 800dc2c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dc30:	b1d8      	cbz	r0, 800dc6a <__d2b+0x7e>
 800dc32:	f1c0 0320 	rsb	r3, r0, #32
 800dc36:	fa02 f303 	lsl.w	r3, r2, r3
 800dc3a:	430b      	orrs	r3, r1
 800dc3c:	40c2      	lsrs	r2, r0
 800dc3e:	6163      	str	r3, [r4, #20]
 800dc40:	9201      	str	r2, [sp, #4]
 800dc42:	9b01      	ldr	r3, [sp, #4]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	bf0c      	ite	eq
 800dc48:	2201      	moveq	r2, #1
 800dc4a:	2202      	movne	r2, #2
 800dc4c:	61a3      	str	r3, [r4, #24]
 800dc4e:	6122      	str	r2, [r4, #16]
 800dc50:	b1ad      	cbz	r5, 800dc7e <__d2b+0x92>
 800dc52:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dc56:	4405      	add	r5, r0
 800dc58:	6035      	str	r5, [r6, #0]
 800dc5a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dc5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc60:	6018      	str	r0, [r3, #0]
 800dc62:	4620      	mov	r0, r4
 800dc64:	b002      	add	sp, #8
 800dc66:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800dc6a:	6161      	str	r1, [r4, #20]
 800dc6c:	e7e9      	b.n	800dc42 <__d2b+0x56>
 800dc6e:	a801      	add	r0, sp, #4
 800dc70:	f7ff fcf9 	bl	800d666 <__lo0bits>
 800dc74:	9b01      	ldr	r3, [sp, #4]
 800dc76:	2201      	movs	r2, #1
 800dc78:	6163      	str	r3, [r4, #20]
 800dc7a:	3020      	adds	r0, #32
 800dc7c:	e7e7      	b.n	800dc4e <__d2b+0x62>
 800dc7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dc82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dc86:	6030      	str	r0, [r6, #0]
 800dc88:	6918      	ldr	r0, [r3, #16]
 800dc8a:	f7ff fccd 	bl	800d628 <__hi0bits>
 800dc8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dc92:	e7e4      	b.n	800dc5e <__d2b+0x72>
 800dc94:	0801163d 	.word	0x0801163d
 800dc98:	0801164e 	.word	0x0801164e

0800dc9c <__ratio>:
 800dc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca0:	b085      	sub	sp, #20
 800dca2:	e9cd 1000 	strd	r1, r0, [sp]
 800dca6:	a902      	add	r1, sp, #8
 800dca8:	f7ff ff58 	bl	800db5c <__b2d>
 800dcac:	468b      	mov	fp, r1
 800dcae:	4606      	mov	r6, r0
 800dcb0:	460f      	mov	r7, r1
 800dcb2:	9800      	ldr	r0, [sp, #0]
 800dcb4:	a903      	add	r1, sp, #12
 800dcb6:	f7ff ff51 	bl	800db5c <__b2d>
 800dcba:	460d      	mov	r5, r1
 800dcbc:	9b01      	ldr	r3, [sp, #4]
 800dcbe:	4689      	mov	r9, r1
 800dcc0:	6919      	ldr	r1, [r3, #16]
 800dcc2:	9b00      	ldr	r3, [sp, #0]
 800dcc4:	4604      	mov	r4, r0
 800dcc6:	691b      	ldr	r3, [r3, #16]
 800dcc8:	4630      	mov	r0, r6
 800dcca:	1ac9      	subs	r1, r1, r3
 800dccc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800dcd0:	1a9b      	subs	r3, r3, r2
 800dcd2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	bfcd      	iteet	gt
 800dcda:	463a      	movgt	r2, r7
 800dcdc:	462a      	movle	r2, r5
 800dcde:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dce2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800dce6:	bfd8      	it	le
 800dce8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800dcec:	464b      	mov	r3, r9
 800dcee:	4622      	mov	r2, r4
 800dcf0:	4659      	mov	r1, fp
 800dcf2:	f7f2 fd8b 	bl	800080c <__aeabi_ddiv>
 800dcf6:	b005      	add	sp, #20
 800dcf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dcfc <__copybits>:
 800dcfc:	3901      	subs	r1, #1
 800dcfe:	b570      	push	{r4, r5, r6, lr}
 800dd00:	1149      	asrs	r1, r1, #5
 800dd02:	6914      	ldr	r4, [r2, #16]
 800dd04:	3101      	adds	r1, #1
 800dd06:	f102 0314 	add.w	r3, r2, #20
 800dd0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dd0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dd12:	1f05      	subs	r5, r0, #4
 800dd14:	42a3      	cmp	r3, r4
 800dd16:	d30c      	bcc.n	800dd32 <__copybits+0x36>
 800dd18:	1aa3      	subs	r3, r4, r2
 800dd1a:	3b11      	subs	r3, #17
 800dd1c:	f023 0303 	bic.w	r3, r3, #3
 800dd20:	3211      	adds	r2, #17
 800dd22:	42a2      	cmp	r2, r4
 800dd24:	bf88      	it	hi
 800dd26:	2300      	movhi	r3, #0
 800dd28:	4418      	add	r0, r3
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	4288      	cmp	r0, r1
 800dd2e:	d305      	bcc.n	800dd3c <__copybits+0x40>
 800dd30:	bd70      	pop	{r4, r5, r6, pc}
 800dd32:	f853 6b04 	ldr.w	r6, [r3], #4
 800dd36:	f845 6f04 	str.w	r6, [r5, #4]!
 800dd3a:	e7eb      	b.n	800dd14 <__copybits+0x18>
 800dd3c:	f840 3b04 	str.w	r3, [r0], #4
 800dd40:	e7f4      	b.n	800dd2c <__copybits+0x30>

0800dd42 <__any_on>:
 800dd42:	f100 0214 	add.w	r2, r0, #20
 800dd46:	6900      	ldr	r0, [r0, #16]
 800dd48:	114b      	asrs	r3, r1, #5
 800dd4a:	4298      	cmp	r0, r3
 800dd4c:	b510      	push	{r4, lr}
 800dd4e:	db11      	blt.n	800dd74 <__any_on+0x32>
 800dd50:	dd0a      	ble.n	800dd68 <__any_on+0x26>
 800dd52:	f011 011f 	ands.w	r1, r1, #31
 800dd56:	d007      	beq.n	800dd68 <__any_on+0x26>
 800dd58:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dd5c:	fa24 f001 	lsr.w	r0, r4, r1
 800dd60:	fa00 f101 	lsl.w	r1, r0, r1
 800dd64:	428c      	cmp	r4, r1
 800dd66:	d10b      	bne.n	800dd80 <__any_on+0x3e>
 800dd68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d803      	bhi.n	800dd78 <__any_on+0x36>
 800dd70:	2000      	movs	r0, #0
 800dd72:	bd10      	pop	{r4, pc}
 800dd74:	4603      	mov	r3, r0
 800dd76:	e7f7      	b.n	800dd68 <__any_on+0x26>
 800dd78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dd7c:	2900      	cmp	r1, #0
 800dd7e:	d0f5      	beq.n	800dd6c <__any_on+0x2a>
 800dd80:	2001      	movs	r0, #1
 800dd82:	e7f6      	b.n	800dd72 <__any_on+0x30>

0800dd84 <sulp>:
 800dd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd88:	460f      	mov	r7, r1
 800dd8a:	4690      	mov	r8, r2
 800dd8c:	f7ff fec6 	bl	800db1c <__ulp>
 800dd90:	4604      	mov	r4, r0
 800dd92:	460d      	mov	r5, r1
 800dd94:	f1b8 0f00 	cmp.w	r8, #0
 800dd98:	d011      	beq.n	800ddbe <sulp+0x3a>
 800dd9a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800dd9e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	dd0b      	ble.n	800ddbe <sulp+0x3a>
 800dda6:	2400      	movs	r4, #0
 800dda8:	051b      	lsls	r3, r3, #20
 800ddaa:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ddae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ddb2:	4622      	mov	r2, r4
 800ddb4:	462b      	mov	r3, r5
 800ddb6:	f7f2 fbff 	bl	80005b8 <__aeabi_dmul>
 800ddba:	4604      	mov	r4, r0
 800ddbc:	460d      	mov	r5, r1
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ddc8 <_strtod_l>:
 800ddc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddcc:	b09f      	sub	sp, #124	@ 0x7c
 800ddce:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	460c      	mov	r4, r1
 800ddd4:	921a      	str	r2, [sp, #104]	@ 0x68
 800ddd6:	f04f 0a00 	mov.w	sl, #0
 800ddda:	f04f 0b00 	mov.w	fp, #0
 800ddde:	460a      	mov	r2, r1
 800dde0:	9005      	str	r0, [sp, #20]
 800dde2:	9219      	str	r2, [sp, #100]	@ 0x64
 800dde4:	7811      	ldrb	r1, [r2, #0]
 800dde6:	292b      	cmp	r1, #43	@ 0x2b
 800dde8:	d048      	beq.n	800de7c <_strtod_l+0xb4>
 800ddea:	d836      	bhi.n	800de5a <_strtod_l+0x92>
 800ddec:	290d      	cmp	r1, #13
 800ddee:	d830      	bhi.n	800de52 <_strtod_l+0x8a>
 800ddf0:	2908      	cmp	r1, #8
 800ddf2:	d830      	bhi.n	800de56 <_strtod_l+0x8e>
 800ddf4:	2900      	cmp	r1, #0
 800ddf6:	d039      	beq.n	800de6c <_strtod_l+0xa4>
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	920e      	str	r2, [sp, #56]	@ 0x38
 800ddfc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ddfe:	782a      	ldrb	r2, [r5, #0]
 800de00:	2a30      	cmp	r2, #48	@ 0x30
 800de02:	f040 80b0 	bne.w	800df66 <_strtod_l+0x19e>
 800de06:	786a      	ldrb	r2, [r5, #1]
 800de08:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800de0c:	2a58      	cmp	r2, #88	@ 0x58
 800de0e:	d16c      	bne.n	800deea <_strtod_l+0x122>
 800de10:	9302      	str	r3, [sp, #8]
 800de12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de14:	4a8f      	ldr	r2, [pc, #572]	@ (800e054 <_strtod_l+0x28c>)
 800de16:	9301      	str	r3, [sp, #4]
 800de18:	ab1a      	add	r3, sp, #104	@ 0x68
 800de1a:	9300      	str	r3, [sp, #0]
 800de1c:	9805      	ldr	r0, [sp, #20]
 800de1e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800de20:	a919      	add	r1, sp, #100	@ 0x64
 800de22:	f001 facb 	bl	800f3bc <__gethex>
 800de26:	f010 060f 	ands.w	r6, r0, #15
 800de2a:	4604      	mov	r4, r0
 800de2c:	d005      	beq.n	800de3a <_strtod_l+0x72>
 800de2e:	2e06      	cmp	r6, #6
 800de30:	d126      	bne.n	800de80 <_strtod_l+0xb8>
 800de32:	2300      	movs	r3, #0
 800de34:	3501      	adds	r5, #1
 800de36:	9519      	str	r5, [sp, #100]	@ 0x64
 800de38:	930e      	str	r3, [sp, #56]	@ 0x38
 800de3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	f040 8582 	bne.w	800e946 <_strtod_l+0xb7e>
 800de42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de44:	b1bb      	cbz	r3, 800de76 <_strtod_l+0xae>
 800de46:	4650      	mov	r0, sl
 800de48:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800de4c:	b01f      	add	sp, #124	@ 0x7c
 800de4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de52:	2920      	cmp	r1, #32
 800de54:	d1d0      	bne.n	800ddf8 <_strtod_l+0x30>
 800de56:	3201      	adds	r2, #1
 800de58:	e7c3      	b.n	800dde2 <_strtod_l+0x1a>
 800de5a:	292d      	cmp	r1, #45	@ 0x2d
 800de5c:	d1cc      	bne.n	800ddf8 <_strtod_l+0x30>
 800de5e:	2101      	movs	r1, #1
 800de60:	910e      	str	r1, [sp, #56]	@ 0x38
 800de62:	1c51      	adds	r1, r2, #1
 800de64:	9119      	str	r1, [sp, #100]	@ 0x64
 800de66:	7852      	ldrb	r2, [r2, #1]
 800de68:	2a00      	cmp	r2, #0
 800de6a:	d1c7      	bne.n	800ddfc <_strtod_l+0x34>
 800de6c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800de6e:	9419      	str	r4, [sp, #100]	@ 0x64
 800de70:	2b00      	cmp	r3, #0
 800de72:	f040 8566 	bne.w	800e942 <_strtod_l+0xb7a>
 800de76:	4650      	mov	r0, sl
 800de78:	4659      	mov	r1, fp
 800de7a:	e7e7      	b.n	800de4c <_strtod_l+0x84>
 800de7c:	2100      	movs	r1, #0
 800de7e:	e7ef      	b.n	800de60 <_strtod_l+0x98>
 800de80:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800de82:	b13a      	cbz	r2, 800de94 <_strtod_l+0xcc>
 800de84:	2135      	movs	r1, #53	@ 0x35
 800de86:	a81c      	add	r0, sp, #112	@ 0x70
 800de88:	f7ff ff38 	bl	800dcfc <__copybits>
 800de8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de8e:	9805      	ldr	r0, [sp, #20]
 800de90:	f7ff fb18 	bl	800d4c4 <_Bfree>
 800de94:	3e01      	subs	r6, #1
 800de96:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800de98:	2e04      	cmp	r6, #4
 800de9a:	d806      	bhi.n	800deaa <_strtod_l+0xe2>
 800de9c:	e8df f006 	tbb	[pc, r6]
 800dea0:	201d0314 	.word	0x201d0314
 800dea4:	14          	.byte	0x14
 800dea5:	00          	.byte	0x00
 800dea6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800deaa:	05e1      	lsls	r1, r4, #23
 800deac:	bf48      	it	mi
 800deae:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800deb2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800deb6:	0d1b      	lsrs	r3, r3, #20
 800deb8:	051b      	lsls	r3, r3, #20
 800deba:	2b00      	cmp	r3, #0
 800debc:	d1bd      	bne.n	800de3a <_strtod_l+0x72>
 800debe:	f7fe fb19 	bl	800c4f4 <__errno>
 800dec2:	2322      	movs	r3, #34	@ 0x22
 800dec4:	6003      	str	r3, [r0, #0]
 800dec6:	e7b8      	b.n	800de3a <_strtod_l+0x72>
 800dec8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800decc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ded0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ded4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ded8:	e7e7      	b.n	800deaa <_strtod_l+0xe2>
 800deda:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e058 <_strtod_l+0x290>
 800dede:	e7e4      	b.n	800deaa <_strtod_l+0xe2>
 800dee0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800dee4:	f04f 3aff 	mov.w	sl, #4294967295
 800dee8:	e7df      	b.n	800deaa <_strtod_l+0xe2>
 800deea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800deec:	1c5a      	adds	r2, r3, #1
 800deee:	9219      	str	r2, [sp, #100]	@ 0x64
 800def0:	785b      	ldrb	r3, [r3, #1]
 800def2:	2b30      	cmp	r3, #48	@ 0x30
 800def4:	d0f9      	beq.n	800deea <_strtod_l+0x122>
 800def6:	2b00      	cmp	r3, #0
 800def8:	d09f      	beq.n	800de3a <_strtod_l+0x72>
 800defa:	2301      	movs	r3, #1
 800defc:	2700      	movs	r7, #0
 800defe:	220a      	movs	r2, #10
 800df00:	46b9      	mov	r9, r7
 800df02:	9308      	str	r3, [sp, #32]
 800df04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df06:	970b      	str	r7, [sp, #44]	@ 0x2c
 800df08:	930c      	str	r3, [sp, #48]	@ 0x30
 800df0a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800df0c:	7805      	ldrb	r5, [r0, #0]
 800df0e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800df12:	b2d9      	uxtb	r1, r3
 800df14:	2909      	cmp	r1, #9
 800df16:	d928      	bls.n	800df6a <_strtod_l+0x1a2>
 800df18:	2201      	movs	r2, #1
 800df1a:	4950      	ldr	r1, [pc, #320]	@ (800e05c <_strtod_l+0x294>)
 800df1c:	f001 f969 	bl	800f1f2 <strncmp>
 800df20:	2800      	cmp	r0, #0
 800df22:	d032      	beq.n	800df8a <_strtod_l+0x1c2>
 800df24:	2000      	movs	r0, #0
 800df26:	462a      	mov	r2, r5
 800df28:	4603      	mov	r3, r0
 800df2a:	464d      	mov	r5, r9
 800df2c:	900a      	str	r0, [sp, #40]	@ 0x28
 800df2e:	2a65      	cmp	r2, #101	@ 0x65
 800df30:	d001      	beq.n	800df36 <_strtod_l+0x16e>
 800df32:	2a45      	cmp	r2, #69	@ 0x45
 800df34:	d114      	bne.n	800df60 <_strtod_l+0x198>
 800df36:	b91d      	cbnz	r5, 800df40 <_strtod_l+0x178>
 800df38:	9a08      	ldr	r2, [sp, #32]
 800df3a:	4302      	orrs	r2, r0
 800df3c:	d096      	beq.n	800de6c <_strtod_l+0xa4>
 800df3e:	2500      	movs	r5, #0
 800df40:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800df42:	1c62      	adds	r2, r4, #1
 800df44:	9219      	str	r2, [sp, #100]	@ 0x64
 800df46:	7862      	ldrb	r2, [r4, #1]
 800df48:	2a2b      	cmp	r2, #43	@ 0x2b
 800df4a:	d07a      	beq.n	800e042 <_strtod_l+0x27a>
 800df4c:	2a2d      	cmp	r2, #45	@ 0x2d
 800df4e:	d07e      	beq.n	800e04e <_strtod_l+0x286>
 800df50:	f04f 0c00 	mov.w	ip, #0
 800df54:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800df58:	2909      	cmp	r1, #9
 800df5a:	f240 8085 	bls.w	800e068 <_strtod_l+0x2a0>
 800df5e:	9419      	str	r4, [sp, #100]	@ 0x64
 800df60:	f04f 0800 	mov.w	r8, #0
 800df64:	e0a5      	b.n	800e0b2 <_strtod_l+0x2ea>
 800df66:	2300      	movs	r3, #0
 800df68:	e7c8      	b.n	800defc <_strtod_l+0x134>
 800df6a:	f1b9 0f08 	cmp.w	r9, #8
 800df6e:	bfd8      	it	le
 800df70:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800df72:	f100 0001 	add.w	r0, r0, #1
 800df76:	bfd6      	itet	le
 800df78:	fb02 3301 	mlale	r3, r2, r1, r3
 800df7c:	fb02 3707 	mlagt	r7, r2, r7, r3
 800df80:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800df82:	f109 0901 	add.w	r9, r9, #1
 800df86:	9019      	str	r0, [sp, #100]	@ 0x64
 800df88:	e7bf      	b.n	800df0a <_strtod_l+0x142>
 800df8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df8c:	1c5a      	adds	r2, r3, #1
 800df8e:	9219      	str	r2, [sp, #100]	@ 0x64
 800df90:	785a      	ldrb	r2, [r3, #1]
 800df92:	f1b9 0f00 	cmp.w	r9, #0
 800df96:	d03b      	beq.n	800e010 <_strtod_l+0x248>
 800df98:	464d      	mov	r5, r9
 800df9a:	900a      	str	r0, [sp, #40]	@ 0x28
 800df9c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800dfa0:	2b09      	cmp	r3, #9
 800dfa2:	d912      	bls.n	800dfca <_strtod_l+0x202>
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	e7c2      	b.n	800df2e <_strtod_l+0x166>
 800dfa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dfaa:	3001      	adds	r0, #1
 800dfac:	1c5a      	adds	r2, r3, #1
 800dfae:	9219      	str	r2, [sp, #100]	@ 0x64
 800dfb0:	785a      	ldrb	r2, [r3, #1]
 800dfb2:	2a30      	cmp	r2, #48	@ 0x30
 800dfb4:	d0f8      	beq.n	800dfa8 <_strtod_l+0x1e0>
 800dfb6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800dfba:	2b08      	cmp	r3, #8
 800dfbc:	f200 84c8 	bhi.w	800e950 <_strtod_l+0xb88>
 800dfc0:	900a      	str	r0, [sp, #40]	@ 0x28
 800dfc2:	2000      	movs	r0, #0
 800dfc4:	4605      	mov	r5, r0
 800dfc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dfc8:	930c      	str	r3, [sp, #48]	@ 0x30
 800dfca:	3a30      	subs	r2, #48	@ 0x30
 800dfcc:	f100 0301 	add.w	r3, r0, #1
 800dfd0:	d018      	beq.n	800e004 <_strtod_l+0x23c>
 800dfd2:	462e      	mov	r6, r5
 800dfd4:	f04f 0e0a 	mov.w	lr, #10
 800dfd8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dfda:	4419      	add	r1, r3
 800dfdc:	910a      	str	r1, [sp, #40]	@ 0x28
 800dfde:	1c71      	adds	r1, r6, #1
 800dfe0:	eba1 0c05 	sub.w	ip, r1, r5
 800dfe4:	4563      	cmp	r3, ip
 800dfe6:	dc15      	bgt.n	800e014 <_strtod_l+0x24c>
 800dfe8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800dfec:	182b      	adds	r3, r5, r0
 800dfee:	2b08      	cmp	r3, #8
 800dff0:	f105 0501 	add.w	r5, r5, #1
 800dff4:	4405      	add	r5, r0
 800dff6:	dc1a      	bgt.n	800e02e <_strtod_l+0x266>
 800dff8:	230a      	movs	r3, #10
 800dffa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dffc:	fb03 2301 	mla	r3, r3, r1, r2
 800e000:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e002:	2300      	movs	r3, #0
 800e004:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e006:	4618      	mov	r0, r3
 800e008:	1c51      	adds	r1, r2, #1
 800e00a:	9119      	str	r1, [sp, #100]	@ 0x64
 800e00c:	7852      	ldrb	r2, [r2, #1]
 800e00e:	e7c5      	b.n	800df9c <_strtod_l+0x1d4>
 800e010:	4648      	mov	r0, r9
 800e012:	e7ce      	b.n	800dfb2 <_strtod_l+0x1ea>
 800e014:	2e08      	cmp	r6, #8
 800e016:	dc05      	bgt.n	800e024 <_strtod_l+0x25c>
 800e018:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e01a:	fb0e f606 	mul.w	r6, lr, r6
 800e01e:	960b      	str	r6, [sp, #44]	@ 0x2c
 800e020:	460e      	mov	r6, r1
 800e022:	e7dc      	b.n	800dfde <_strtod_l+0x216>
 800e024:	2910      	cmp	r1, #16
 800e026:	bfd8      	it	le
 800e028:	fb0e f707 	mulle.w	r7, lr, r7
 800e02c:	e7f8      	b.n	800e020 <_strtod_l+0x258>
 800e02e:	2b0f      	cmp	r3, #15
 800e030:	bfdc      	itt	le
 800e032:	230a      	movle	r3, #10
 800e034:	fb03 2707 	mlale	r7, r3, r7, r2
 800e038:	e7e3      	b.n	800e002 <_strtod_l+0x23a>
 800e03a:	2300      	movs	r3, #0
 800e03c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e03e:	2301      	movs	r3, #1
 800e040:	e77a      	b.n	800df38 <_strtod_l+0x170>
 800e042:	f04f 0c00 	mov.w	ip, #0
 800e046:	1ca2      	adds	r2, r4, #2
 800e048:	9219      	str	r2, [sp, #100]	@ 0x64
 800e04a:	78a2      	ldrb	r2, [r4, #2]
 800e04c:	e782      	b.n	800df54 <_strtod_l+0x18c>
 800e04e:	f04f 0c01 	mov.w	ip, #1
 800e052:	e7f8      	b.n	800e046 <_strtod_l+0x27e>
 800e054:	08011874 	.word	0x08011874
 800e058:	7ff00000 	.word	0x7ff00000
 800e05c:	080116a7 	.word	0x080116a7
 800e060:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e062:	1c51      	adds	r1, r2, #1
 800e064:	9119      	str	r1, [sp, #100]	@ 0x64
 800e066:	7852      	ldrb	r2, [r2, #1]
 800e068:	2a30      	cmp	r2, #48	@ 0x30
 800e06a:	d0f9      	beq.n	800e060 <_strtod_l+0x298>
 800e06c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e070:	2908      	cmp	r1, #8
 800e072:	f63f af75 	bhi.w	800df60 <_strtod_l+0x198>
 800e076:	f04f 080a 	mov.w	r8, #10
 800e07a:	3a30      	subs	r2, #48	@ 0x30
 800e07c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e07e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e080:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e082:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e084:	1c56      	adds	r6, r2, #1
 800e086:	9619      	str	r6, [sp, #100]	@ 0x64
 800e088:	7852      	ldrb	r2, [r2, #1]
 800e08a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e08e:	f1be 0f09 	cmp.w	lr, #9
 800e092:	d939      	bls.n	800e108 <_strtod_l+0x340>
 800e094:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e096:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e09a:	1a76      	subs	r6, r6, r1
 800e09c:	2e08      	cmp	r6, #8
 800e09e:	dc03      	bgt.n	800e0a8 <_strtod_l+0x2e0>
 800e0a0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e0a2:	4588      	cmp	r8, r1
 800e0a4:	bfa8      	it	ge
 800e0a6:	4688      	movge	r8, r1
 800e0a8:	f1bc 0f00 	cmp.w	ip, #0
 800e0ac:	d001      	beq.n	800e0b2 <_strtod_l+0x2ea>
 800e0ae:	f1c8 0800 	rsb	r8, r8, #0
 800e0b2:	2d00      	cmp	r5, #0
 800e0b4:	d14e      	bne.n	800e154 <_strtod_l+0x38c>
 800e0b6:	9908      	ldr	r1, [sp, #32]
 800e0b8:	4308      	orrs	r0, r1
 800e0ba:	f47f aebe 	bne.w	800de3a <_strtod_l+0x72>
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	f47f aed4 	bne.w	800de6c <_strtod_l+0xa4>
 800e0c4:	2a69      	cmp	r2, #105	@ 0x69
 800e0c6:	d028      	beq.n	800e11a <_strtod_l+0x352>
 800e0c8:	dc25      	bgt.n	800e116 <_strtod_l+0x34e>
 800e0ca:	2a49      	cmp	r2, #73	@ 0x49
 800e0cc:	d025      	beq.n	800e11a <_strtod_l+0x352>
 800e0ce:	2a4e      	cmp	r2, #78	@ 0x4e
 800e0d0:	f47f aecc 	bne.w	800de6c <_strtod_l+0xa4>
 800e0d4:	4999      	ldr	r1, [pc, #612]	@ (800e33c <_strtod_l+0x574>)
 800e0d6:	a819      	add	r0, sp, #100	@ 0x64
 800e0d8:	f001 fb92 	bl	800f800 <__match>
 800e0dc:	2800      	cmp	r0, #0
 800e0de:	f43f aec5 	beq.w	800de6c <_strtod_l+0xa4>
 800e0e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	2b28      	cmp	r3, #40	@ 0x28
 800e0e8:	d12e      	bne.n	800e148 <_strtod_l+0x380>
 800e0ea:	4995      	ldr	r1, [pc, #596]	@ (800e340 <_strtod_l+0x578>)
 800e0ec:	aa1c      	add	r2, sp, #112	@ 0x70
 800e0ee:	a819      	add	r0, sp, #100	@ 0x64
 800e0f0:	f001 fb9a 	bl	800f828 <__hexnan>
 800e0f4:	2805      	cmp	r0, #5
 800e0f6:	d127      	bne.n	800e148 <_strtod_l+0x380>
 800e0f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e0fa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e0fe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e102:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e106:	e698      	b.n	800de3a <_strtod_l+0x72>
 800e108:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e10a:	fb08 2101 	mla	r1, r8, r1, r2
 800e10e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e112:	9209      	str	r2, [sp, #36]	@ 0x24
 800e114:	e7b5      	b.n	800e082 <_strtod_l+0x2ba>
 800e116:	2a6e      	cmp	r2, #110	@ 0x6e
 800e118:	e7da      	b.n	800e0d0 <_strtod_l+0x308>
 800e11a:	498a      	ldr	r1, [pc, #552]	@ (800e344 <_strtod_l+0x57c>)
 800e11c:	a819      	add	r0, sp, #100	@ 0x64
 800e11e:	f001 fb6f 	bl	800f800 <__match>
 800e122:	2800      	cmp	r0, #0
 800e124:	f43f aea2 	beq.w	800de6c <_strtod_l+0xa4>
 800e128:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e12a:	4987      	ldr	r1, [pc, #540]	@ (800e348 <_strtod_l+0x580>)
 800e12c:	3b01      	subs	r3, #1
 800e12e:	a819      	add	r0, sp, #100	@ 0x64
 800e130:	9319      	str	r3, [sp, #100]	@ 0x64
 800e132:	f001 fb65 	bl	800f800 <__match>
 800e136:	b910      	cbnz	r0, 800e13e <_strtod_l+0x376>
 800e138:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e13a:	3301      	adds	r3, #1
 800e13c:	9319      	str	r3, [sp, #100]	@ 0x64
 800e13e:	f04f 0a00 	mov.w	sl, #0
 800e142:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800e34c <_strtod_l+0x584>
 800e146:	e678      	b.n	800de3a <_strtod_l+0x72>
 800e148:	4881      	ldr	r0, [pc, #516]	@ (800e350 <_strtod_l+0x588>)
 800e14a:	f001 f897 	bl	800f27c <nan>
 800e14e:	4682      	mov	sl, r0
 800e150:	468b      	mov	fp, r1
 800e152:	e672      	b.n	800de3a <_strtod_l+0x72>
 800e154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e156:	f1b9 0f00 	cmp.w	r9, #0
 800e15a:	bf08      	it	eq
 800e15c:	46a9      	moveq	r9, r5
 800e15e:	eba8 0303 	sub.w	r3, r8, r3
 800e162:	2d10      	cmp	r5, #16
 800e164:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e166:	462c      	mov	r4, r5
 800e168:	9309      	str	r3, [sp, #36]	@ 0x24
 800e16a:	bfa8      	it	ge
 800e16c:	2410      	movge	r4, #16
 800e16e:	f7f2 f9a9 	bl	80004c4 <__aeabi_ui2d>
 800e172:	2d09      	cmp	r5, #9
 800e174:	4682      	mov	sl, r0
 800e176:	468b      	mov	fp, r1
 800e178:	dc11      	bgt.n	800e19e <_strtod_l+0x3d6>
 800e17a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	f43f ae5c 	beq.w	800de3a <_strtod_l+0x72>
 800e182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e184:	dd76      	ble.n	800e274 <_strtod_l+0x4ac>
 800e186:	2b16      	cmp	r3, #22
 800e188:	dc5d      	bgt.n	800e246 <_strtod_l+0x47e>
 800e18a:	4972      	ldr	r1, [pc, #456]	@ (800e354 <_strtod_l+0x58c>)
 800e18c:	4652      	mov	r2, sl
 800e18e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e192:	465b      	mov	r3, fp
 800e194:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e198:	f7f2 fa0e 	bl	80005b8 <__aeabi_dmul>
 800e19c:	e7d7      	b.n	800e14e <_strtod_l+0x386>
 800e19e:	4b6d      	ldr	r3, [pc, #436]	@ (800e354 <_strtod_l+0x58c>)
 800e1a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e1a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e1a8:	f7f2 fa06 	bl	80005b8 <__aeabi_dmul>
 800e1ac:	4682      	mov	sl, r0
 800e1ae:	4638      	mov	r0, r7
 800e1b0:	468b      	mov	fp, r1
 800e1b2:	f7f2 f987 	bl	80004c4 <__aeabi_ui2d>
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	4650      	mov	r0, sl
 800e1bc:	4659      	mov	r1, fp
 800e1be:	f7f2 f845 	bl	800024c <__adddf3>
 800e1c2:	2d0f      	cmp	r5, #15
 800e1c4:	4682      	mov	sl, r0
 800e1c6:	468b      	mov	fp, r1
 800e1c8:	ddd7      	ble.n	800e17a <_strtod_l+0x3b2>
 800e1ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1cc:	1b2c      	subs	r4, r5, r4
 800e1ce:	441c      	add	r4, r3
 800e1d0:	2c00      	cmp	r4, #0
 800e1d2:	f340 8093 	ble.w	800e2fc <_strtod_l+0x534>
 800e1d6:	f014 030f 	ands.w	r3, r4, #15
 800e1da:	d00a      	beq.n	800e1f2 <_strtod_l+0x42a>
 800e1dc:	495d      	ldr	r1, [pc, #372]	@ (800e354 <_strtod_l+0x58c>)
 800e1de:	4652      	mov	r2, sl
 800e1e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e1e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1e8:	465b      	mov	r3, fp
 800e1ea:	f7f2 f9e5 	bl	80005b8 <__aeabi_dmul>
 800e1ee:	4682      	mov	sl, r0
 800e1f0:	468b      	mov	fp, r1
 800e1f2:	f034 040f 	bics.w	r4, r4, #15
 800e1f6:	d073      	beq.n	800e2e0 <_strtod_l+0x518>
 800e1f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e1fc:	dd49      	ble.n	800e292 <_strtod_l+0x4ca>
 800e1fe:	2400      	movs	r4, #0
 800e200:	46a0      	mov	r8, r4
 800e202:	46a1      	mov	r9, r4
 800e204:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e206:	2322      	movs	r3, #34	@ 0x22
 800e208:	f04f 0a00 	mov.w	sl, #0
 800e20c:	9a05      	ldr	r2, [sp, #20]
 800e20e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800e34c <_strtod_l+0x584>
 800e212:	6013      	str	r3, [r2, #0]
 800e214:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e216:	2b00      	cmp	r3, #0
 800e218:	f43f ae0f 	beq.w	800de3a <_strtod_l+0x72>
 800e21c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e21e:	9805      	ldr	r0, [sp, #20]
 800e220:	f7ff f950 	bl	800d4c4 <_Bfree>
 800e224:	4649      	mov	r1, r9
 800e226:	9805      	ldr	r0, [sp, #20]
 800e228:	f7ff f94c 	bl	800d4c4 <_Bfree>
 800e22c:	4641      	mov	r1, r8
 800e22e:	9805      	ldr	r0, [sp, #20]
 800e230:	f7ff f948 	bl	800d4c4 <_Bfree>
 800e234:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e236:	9805      	ldr	r0, [sp, #20]
 800e238:	f7ff f944 	bl	800d4c4 <_Bfree>
 800e23c:	4621      	mov	r1, r4
 800e23e:	9805      	ldr	r0, [sp, #20]
 800e240:	f7ff f940 	bl	800d4c4 <_Bfree>
 800e244:	e5f9      	b.n	800de3a <_strtod_l+0x72>
 800e246:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e248:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e24c:	4293      	cmp	r3, r2
 800e24e:	dbbc      	blt.n	800e1ca <_strtod_l+0x402>
 800e250:	4c40      	ldr	r4, [pc, #256]	@ (800e354 <_strtod_l+0x58c>)
 800e252:	f1c5 050f 	rsb	r5, r5, #15
 800e256:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e25a:	4652      	mov	r2, sl
 800e25c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e260:	465b      	mov	r3, fp
 800e262:	f7f2 f9a9 	bl	80005b8 <__aeabi_dmul>
 800e266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e268:	1b5d      	subs	r5, r3, r5
 800e26a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e26e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e272:	e791      	b.n	800e198 <_strtod_l+0x3d0>
 800e274:	3316      	adds	r3, #22
 800e276:	dba8      	blt.n	800e1ca <_strtod_l+0x402>
 800e278:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e27a:	4650      	mov	r0, sl
 800e27c:	eba3 0808 	sub.w	r8, r3, r8
 800e280:	4b34      	ldr	r3, [pc, #208]	@ (800e354 <_strtod_l+0x58c>)
 800e282:	4659      	mov	r1, fp
 800e284:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e288:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e28c:	f7f2 fabe 	bl	800080c <__aeabi_ddiv>
 800e290:	e75d      	b.n	800e14e <_strtod_l+0x386>
 800e292:	2300      	movs	r3, #0
 800e294:	4650      	mov	r0, sl
 800e296:	4659      	mov	r1, fp
 800e298:	461e      	mov	r6, r3
 800e29a:	4f2f      	ldr	r7, [pc, #188]	@ (800e358 <_strtod_l+0x590>)
 800e29c:	1124      	asrs	r4, r4, #4
 800e29e:	2c01      	cmp	r4, #1
 800e2a0:	dc21      	bgt.n	800e2e6 <_strtod_l+0x51e>
 800e2a2:	b10b      	cbz	r3, 800e2a8 <_strtod_l+0x4e0>
 800e2a4:	4682      	mov	sl, r0
 800e2a6:	468b      	mov	fp, r1
 800e2a8:	492b      	ldr	r1, [pc, #172]	@ (800e358 <_strtod_l+0x590>)
 800e2aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e2ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e2b2:	4652      	mov	r2, sl
 800e2b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2b8:	465b      	mov	r3, fp
 800e2ba:	f7f2 f97d 	bl	80005b8 <__aeabi_dmul>
 800e2be:	4b23      	ldr	r3, [pc, #140]	@ (800e34c <_strtod_l+0x584>)
 800e2c0:	460a      	mov	r2, r1
 800e2c2:	400b      	ands	r3, r1
 800e2c4:	4925      	ldr	r1, [pc, #148]	@ (800e35c <_strtod_l+0x594>)
 800e2c6:	4682      	mov	sl, r0
 800e2c8:	428b      	cmp	r3, r1
 800e2ca:	d898      	bhi.n	800e1fe <_strtod_l+0x436>
 800e2cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e2d0:	428b      	cmp	r3, r1
 800e2d2:	bf86      	itte	hi
 800e2d4:	f04f 3aff 	movhi.w	sl, #4294967295
 800e2d8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800e360 <_strtod_l+0x598>
 800e2dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	9308      	str	r3, [sp, #32]
 800e2e4:	e076      	b.n	800e3d4 <_strtod_l+0x60c>
 800e2e6:	07e2      	lsls	r2, r4, #31
 800e2e8:	d504      	bpl.n	800e2f4 <_strtod_l+0x52c>
 800e2ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2ee:	f7f2 f963 	bl	80005b8 <__aeabi_dmul>
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	3601      	adds	r6, #1
 800e2f6:	1064      	asrs	r4, r4, #1
 800e2f8:	3708      	adds	r7, #8
 800e2fa:	e7d0      	b.n	800e29e <_strtod_l+0x4d6>
 800e2fc:	d0f0      	beq.n	800e2e0 <_strtod_l+0x518>
 800e2fe:	4264      	negs	r4, r4
 800e300:	f014 020f 	ands.w	r2, r4, #15
 800e304:	d00a      	beq.n	800e31c <_strtod_l+0x554>
 800e306:	4b13      	ldr	r3, [pc, #76]	@ (800e354 <_strtod_l+0x58c>)
 800e308:	4650      	mov	r0, sl
 800e30a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e30e:	4659      	mov	r1, fp
 800e310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e314:	f7f2 fa7a 	bl	800080c <__aeabi_ddiv>
 800e318:	4682      	mov	sl, r0
 800e31a:	468b      	mov	fp, r1
 800e31c:	1124      	asrs	r4, r4, #4
 800e31e:	d0df      	beq.n	800e2e0 <_strtod_l+0x518>
 800e320:	2c1f      	cmp	r4, #31
 800e322:	dd1f      	ble.n	800e364 <_strtod_l+0x59c>
 800e324:	2400      	movs	r4, #0
 800e326:	46a0      	mov	r8, r4
 800e328:	46a1      	mov	r9, r4
 800e32a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e32c:	2322      	movs	r3, #34	@ 0x22
 800e32e:	9a05      	ldr	r2, [sp, #20]
 800e330:	f04f 0a00 	mov.w	sl, #0
 800e334:	f04f 0b00 	mov.w	fp, #0
 800e338:	6013      	str	r3, [r2, #0]
 800e33a:	e76b      	b.n	800e214 <_strtod_l+0x44c>
 800e33c:	08011595 	.word	0x08011595
 800e340:	08011860 	.word	0x08011860
 800e344:	0801158d 	.word	0x0801158d
 800e348:	080115c4 	.word	0x080115c4
 800e34c:	7ff00000 	.word	0x7ff00000
 800e350:	080116fd 	.word	0x080116fd
 800e354:	08011798 	.word	0x08011798
 800e358:	08011770 	.word	0x08011770
 800e35c:	7ca00000 	.word	0x7ca00000
 800e360:	7fefffff 	.word	0x7fefffff
 800e364:	f014 0310 	ands.w	r3, r4, #16
 800e368:	bf18      	it	ne
 800e36a:	236a      	movne	r3, #106	@ 0x6a
 800e36c:	4650      	mov	r0, sl
 800e36e:	9308      	str	r3, [sp, #32]
 800e370:	4659      	mov	r1, fp
 800e372:	2300      	movs	r3, #0
 800e374:	4e77      	ldr	r6, [pc, #476]	@ (800e554 <_strtod_l+0x78c>)
 800e376:	07e7      	lsls	r7, r4, #31
 800e378:	d504      	bpl.n	800e384 <_strtod_l+0x5bc>
 800e37a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e37e:	f7f2 f91b 	bl	80005b8 <__aeabi_dmul>
 800e382:	2301      	movs	r3, #1
 800e384:	1064      	asrs	r4, r4, #1
 800e386:	f106 0608 	add.w	r6, r6, #8
 800e38a:	d1f4      	bne.n	800e376 <_strtod_l+0x5ae>
 800e38c:	b10b      	cbz	r3, 800e392 <_strtod_l+0x5ca>
 800e38e:	4682      	mov	sl, r0
 800e390:	468b      	mov	fp, r1
 800e392:	9b08      	ldr	r3, [sp, #32]
 800e394:	b1b3      	cbz	r3, 800e3c4 <_strtod_l+0x5fc>
 800e396:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e39a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	4659      	mov	r1, fp
 800e3a2:	dd0f      	ble.n	800e3c4 <_strtod_l+0x5fc>
 800e3a4:	2b1f      	cmp	r3, #31
 800e3a6:	dd58      	ble.n	800e45a <_strtod_l+0x692>
 800e3a8:	2b34      	cmp	r3, #52	@ 0x34
 800e3aa:	bfd8      	it	le
 800e3ac:	f04f 33ff 	movle.w	r3, #4294967295
 800e3b0:	f04f 0a00 	mov.w	sl, #0
 800e3b4:	bfcf      	iteee	gt
 800e3b6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e3ba:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e3be:	4093      	lslle	r3, r2
 800e3c0:	ea03 0b01 	andle.w	fp, r3, r1
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	4650      	mov	r0, sl
 800e3ca:	4659      	mov	r1, fp
 800e3cc:	f7f2 fb5c 	bl	8000a88 <__aeabi_dcmpeq>
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	d1a7      	bne.n	800e324 <_strtod_l+0x55c>
 800e3d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3d6:	464a      	mov	r2, r9
 800e3d8:	9300      	str	r3, [sp, #0]
 800e3da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e3dc:	462b      	mov	r3, r5
 800e3de:	9805      	ldr	r0, [sp, #20]
 800e3e0:	f7ff f8d8 	bl	800d594 <__s2b>
 800e3e4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	f43f af09 	beq.w	800e1fe <_strtod_l+0x436>
 800e3ec:	2400      	movs	r4, #0
 800e3ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3f2:	2a00      	cmp	r2, #0
 800e3f4:	eba3 0308 	sub.w	r3, r3, r8
 800e3f8:	bfa8      	it	ge
 800e3fa:	2300      	movge	r3, #0
 800e3fc:	46a0      	mov	r8, r4
 800e3fe:	9312      	str	r3, [sp, #72]	@ 0x48
 800e400:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e404:	9316      	str	r3, [sp, #88]	@ 0x58
 800e406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e408:	9805      	ldr	r0, [sp, #20]
 800e40a:	6859      	ldr	r1, [r3, #4]
 800e40c:	f7ff f81a 	bl	800d444 <_Balloc>
 800e410:	4681      	mov	r9, r0
 800e412:	2800      	cmp	r0, #0
 800e414:	f43f aef7 	beq.w	800e206 <_strtod_l+0x43e>
 800e418:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e41a:	300c      	adds	r0, #12
 800e41c:	691a      	ldr	r2, [r3, #16]
 800e41e:	f103 010c 	add.w	r1, r3, #12
 800e422:	3202      	adds	r2, #2
 800e424:	0092      	lsls	r2, r2, #2
 800e426:	f7fe f8a0 	bl	800c56a <memcpy>
 800e42a:	ab1c      	add	r3, sp, #112	@ 0x70
 800e42c:	9301      	str	r3, [sp, #4]
 800e42e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e430:	9300      	str	r3, [sp, #0]
 800e432:	4652      	mov	r2, sl
 800e434:	465b      	mov	r3, fp
 800e436:	9805      	ldr	r0, [sp, #20]
 800e438:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e43c:	f7ff fbd6 	bl	800dbec <__d2b>
 800e440:	901a      	str	r0, [sp, #104]	@ 0x68
 800e442:	2800      	cmp	r0, #0
 800e444:	f43f aedf 	beq.w	800e206 <_strtod_l+0x43e>
 800e448:	2101      	movs	r1, #1
 800e44a:	9805      	ldr	r0, [sp, #20]
 800e44c:	f7ff f938 	bl	800d6c0 <__i2b>
 800e450:	4680      	mov	r8, r0
 800e452:	b948      	cbnz	r0, 800e468 <_strtod_l+0x6a0>
 800e454:	f04f 0800 	mov.w	r8, #0
 800e458:	e6d5      	b.n	800e206 <_strtod_l+0x43e>
 800e45a:	f04f 32ff 	mov.w	r2, #4294967295
 800e45e:	fa02 f303 	lsl.w	r3, r2, r3
 800e462:	ea03 0a0a 	and.w	sl, r3, sl
 800e466:	e7ad      	b.n	800e3c4 <_strtod_l+0x5fc>
 800e468:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e46a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e46c:	2d00      	cmp	r5, #0
 800e46e:	bfab      	itete	ge
 800e470:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e472:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e474:	18ef      	addge	r7, r5, r3
 800e476:	1b5e      	sublt	r6, r3, r5
 800e478:	9b08      	ldr	r3, [sp, #32]
 800e47a:	bfa8      	it	ge
 800e47c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e47e:	eba5 0503 	sub.w	r5, r5, r3
 800e482:	4415      	add	r5, r2
 800e484:	4b34      	ldr	r3, [pc, #208]	@ (800e558 <_strtod_l+0x790>)
 800e486:	f105 35ff 	add.w	r5, r5, #4294967295
 800e48a:	bfb8      	it	lt
 800e48c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e48e:	429d      	cmp	r5, r3
 800e490:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e494:	da50      	bge.n	800e538 <_strtod_l+0x770>
 800e496:	1b5b      	subs	r3, r3, r5
 800e498:	2b1f      	cmp	r3, #31
 800e49a:	f04f 0101 	mov.w	r1, #1
 800e49e:	eba2 0203 	sub.w	r2, r2, r3
 800e4a2:	dc3d      	bgt.n	800e520 <_strtod_l+0x758>
 800e4a4:	fa01 f303 	lsl.w	r3, r1, r3
 800e4a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	9310      	str	r3, [sp, #64]	@ 0x40
 800e4ae:	18bd      	adds	r5, r7, r2
 800e4b0:	9b08      	ldr	r3, [sp, #32]
 800e4b2:	42af      	cmp	r7, r5
 800e4b4:	4416      	add	r6, r2
 800e4b6:	441e      	add	r6, r3
 800e4b8:	463b      	mov	r3, r7
 800e4ba:	bfa8      	it	ge
 800e4bc:	462b      	movge	r3, r5
 800e4be:	42b3      	cmp	r3, r6
 800e4c0:	bfa8      	it	ge
 800e4c2:	4633      	movge	r3, r6
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	bfc2      	ittt	gt
 800e4c8:	1aed      	subgt	r5, r5, r3
 800e4ca:	1af6      	subgt	r6, r6, r3
 800e4cc:	1aff      	subgt	r7, r7, r3
 800e4ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	dd16      	ble.n	800e502 <_strtod_l+0x73a>
 800e4d4:	4641      	mov	r1, r8
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	9805      	ldr	r0, [sp, #20]
 800e4da:	f7ff f9a9 	bl	800d830 <__pow5mult>
 800e4de:	4680      	mov	r8, r0
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	d0b7      	beq.n	800e454 <_strtod_l+0x68c>
 800e4e4:	4601      	mov	r1, r0
 800e4e6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e4e8:	9805      	ldr	r0, [sp, #20]
 800e4ea:	f7ff f8ff 	bl	800d6ec <__multiply>
 800e4ee:	900a      	str	r0, [sp, #40]	@ 0x28
 800e4f0:	2800      	cmp	r0, #0
 800e4f2:	f43f ae88 	beq.w	800e206 <_strtod_l+0x43e>
 800e4f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e4f8:	9805      	ldr	r0, [sp, #20]
 800e4fa:	f7fe ffe3 	bl	800d4c4 <_Bfree>
 800e4fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e500:	931a      	str	r3, [sp, #104]	@ 0x68
 800e502:	2d00      	cmp	r5, #0
 800e504:	dc1d      	bgt.n	800e542 <_strtod_l+0x77a>
 800e506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e508:	2b00      	cmp	r3, #0
 800e50a:	dd27      	ble.n	800e55c <_strtod_l+0x794>
 800e50c:	4649      	mov	r1, r9
 800e50e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e510:	9805      	ldr	r0, [sp, #20]
 800e512:	f7ff f98d 	bl	800d830 <__pow5mult>
 800e516:	4681      	mov	r9, r0
 800e518:	bb00      	cbnz	r0, 800e55c <_strtod_l+0x794>
 800e51a:	f04f 0900 	mov.w	r9, #0
 800e51e:	e672      	b.n	800e206 <_strtod_l+0x43e>
 800e520:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e524:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e528:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e52c:	35e2      	adds	r5, #226	@ 0xe2
 800e52e:	fa01 f305 	lsl.w	r3, r1, r5
 800e532:	9310      	str	r3, [sp, #64]	@ 0x40
 800e534:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e536:	e7ba      	b.n	800e4ae <_strtod_l+0x6e6>
 800e538:	2300      	movs	r3, #0
 800e53a:	9310      	str	r3, [sp, #64]	@ 0x40
 800e53c:	2301      	movs	r3, #1
 800e53e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e540:	e7b5      	b.n	800e4ae <_strtod_l+0x6e6>
 800e542:	462a      	mov	r2, r5
 800e544:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e546:	9805      	ldr	r0, [sp, #20]
 800e548:	f7ff f9cc 	bl	800d8e4 <__lshift>
 800e54c:	901a      	str	r0, [sp, #104]	@ 0x68
 800e54e:	2800      	cmp	r0, #0
 800e550:	d1d9      	bne.n	800e506 <_strtod_l+0x73e>
 800e552:	e658      	b.n	800e206 <_strtod_l+0x43e>
 800e554:	08011888 	.word	0x08011888
 800e558:	fffffc02 	.word	0xfffffc02
 800e55c:	2e00      	cmp	r6, #0
 800e55e:	dd07      	ble.n	800e570 <_strtod_l+0x7a8>
 800e560:	4649      	mov	r1, r9
 800e562:	4632      	mov	r2, r6
 800e564:	9805      	ldr	r0, [sp, #20]
 800e566:	f7ff f9bd 	bl	800d8e4 <__lshift>
 800e56a:	4681      	mov	r9, r0
 800e56c:	2800      	cmp	r0, #0
 800e56e:	d0d4      	beq.n	800e51a <_strtod_l+0x752>
 800e570:	2f00      	cmp	r7, #0
 800e572:	dd08      	ble.n	800e586 <_strtod_l+0x7be>
 800e574:	4641      	mov	r1, r8
 800e576:	463a      	mov	r2, r7
 800e578:	9805      	ldr	r0, [sp, #20]
 800e57a:	f7ff f9b3 	bl	800d8e4 <__lshift>
 800e57e:	4680      	mov	r8, r0
 800e580:	2800      	cmp	r0, #0
 800e582:	f43f ae40 	beq.w	800e206 <_strtod_l+0x43e>
 800e586:	464a      	mov	r2, r9
 800e588:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e58a:	9805      	ldr	r0, [sp, #20]
 800e58c:	f7ff fa32 	bl	800d9f4 <__mdiff>
 800e590:	4604      	mov	r4, r0
 800e592:	2800      	cmp	r0, #0
 800e594:	f43f ae37 	beq.w	800e206 <_strtod_l+0x43e>
 800e598:	68c3      	ldr	r3, [r0, #12]
 800e59a:	4641      	mov	r1, r8
 800e59c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e59e:	2300      	movs	r3, #0
 800e5a0:	60c3      	str	r3, [r0, #12]
 800e5a2:	f7ff fa0b 	bl	800d9bc <__mcmp>
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	da3d      	bge.n	800e626 <_strtod_l+0x85e>
 800e5aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5ac:	ea53 030a 	orrs.w	r3, r3, sl
 800e5b0:	d163      	bne.n	800e67a <_strtod_l+0x8b2>
 800e5b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d15f      	bne.n	800e67a <_strtod_l+0x8b2>
 800e5ba:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e5be:	0d1b      	lsrs	r3, r3, #20
 800e5c0:	051b      	lsls	r3, r3, #20
 800e5c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e5c6:	d958      	bls.n	800e67a <_strtod_l+0x8b2>
 800e5c8:	6963      	ldr	r3, [r4, #20]
 800e5ca:	b913      	cbnz	r3, 800e5d2 <_strtod_l+0x80a>
 800e5cc:	6923      	ldr	r3, [r4, #16]
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	dd53      	ble.n	800e67a <_strtod_l+0x8b2>
 800e5d2:	4621      	mov	r1, r4
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	9805      	ldr	r0, [sp, #20]
 800e5d8:	f7ff f984 	bl	800d8e4 <__lshift>
 800e5dc:	4641      	mov	r1, r8
 800e5de:	4604      	mov	r4, r0
 800e5e0:	f7ff f9ec 	bl	800d9bc <__mcmp>
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	dd48      	ble.n	800e67a <_strtod_l+0x8b2>
 800e5e8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e5ec:	9a08      	ldr	r2, [sp, #32]
 800e5ee:	0d1b      	lsrs	r3, r3, #20
 800e5f0:	051b      	lsls	r3, r3, #20
 800e5f2:	2a00      	cmp	r2, #0
 800e5f4:	d062      	beq.n	800e6bc <_strtod_l+0x8f4>
 800e5f6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e5fa:	d85f      	bhi.n	800e6bc <_strtod_l+0x8f4>
 800e5fc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e600:	f67f ae94 	bls.w	800e32c <_strtod_l+0x564>
 800e604:	4650      	mov	r0, sl
 800e606:	4659      	mov	r1, fp
 800e608:	4ba3      	ldr	r3, [pc, #652]	@ (800e898 <_strtod_l+0xad0>)
 800e60a:	2200      	movs	r2, #0
 800e60c:	f7f1 ffd4 	bl	80005b8 <__aeabi_dmul>
 800e610:	4ba2      	ldr	r3, [pc, #648]	@ (800e89c <_strtod_l+0xad4>)
 800e612:	4682      	mov	sl, r0
 800e614:	400b      	ands	r3, r1
 800e616:	468b      	mov	fp, r1
 800e618:	2b00      	cmp	r3, #0
 800e61a:	f47f adff 	bne.w	800e21c <_strtod_l+0x454>
 800e61e:	2322      	movs	r3, #34	@ 0x22
 800e620:	9a05      	ldr	r2, [sp, #20]
 800e622:	6013      	str	r3, [r2, #0]
 800e624:	e5fa      	b.n	800e21c <_strtod_l+0x454>
 800e626:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e62a:	d165      	bne.n	800e6f8 <_strtod_l+0x930>
 800e62c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e62e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e632:	b35a      	cbz	r2, 800e68c <_strtod_l+0x8c4>
 800e634:	4a9a      	ldr	r2, [pc, #616]	@ (800e8a0 <_strtod_l+0xad8>)
 800e636:	4293      	cmp	r3, r2
 800e638:	d12b      	bne.n	800e692 <_strtod_l+0x8ca>
 800e63a:	9b08      	ldr	r3, [sp, #32]
 800e63c:	4651      	mov	r1, sl
 800e63e:	b303      	cbz	r3, 800e682 <_strtod_l+0x8ba>
 800e640:	465a      	mov	r2, fp
 800e642:	4b96      	ldr	r3, [pc, #600]	@ (800e89c <_strtod_l+0xad4>)
 800e644:	4013      	ands	r3, r2
 800e646:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e64a:	f04f 32ff 	mov.w	r2, #4294967295
 800e64e:	d81b      	bhi.n	800e688 <_strtod_l+0x8c0>
 800e650:	0d1b      	lsrs	r3, r3, #20
 800e652:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e656:	fa02 f303 	lsl.w	r3, r2, r3
 800e65a:	4299      	cmp	r1, r3
 800e65c:	d119      	bne.n	800e692 <_strtod_l+0x8ca>
 800e65e:	4b91      	ldr	r3, [pc, #580]	@ (800e8a4 <_strtod_l+0xadc>)
 800e660:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e662:	429a      	cmp	r2, r3
 800e664:	d102      	bne.n	800e66c <_strtod_l+0x8a4>
 800e666:	3101      	adds	r1, #1
 800e668:	f43f adcd 	beq.w	800e206 <_strtod_l+0x43e>
 800e66c:	f04f 0a00 	mov.w	sl, #0
 800e670:	4b8a      	ldr	r3, [pc, #552]	@ (800e89c <_strtod_l+0xad4>)
 800e672:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e674:	401a      	ands	r2, r3
 800e676:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e67a:	9b08      	ldr	r3, [sp, #32]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d1c1      	bne.n	800e604 <_strtod_l+0x83c>
 800e680:	e5cc      	b.n	800e21c <_strtod_l+0x454>
 800e682:	f04f 33ff 	mov.w	r3, #4294967295
 800e686:	e7e8      	b.n	800e65a <_strtod_l+0x892>
 800e688:	4613      	mov	r3, r2
 800e68a:	e7e6      	b.n	800e65a <_strtod_l+0x892>
 800e68c:	ea53 030a 	orrs.w	r3, r3, sl
 800e690:	d0aa      	beq.n	800e5e8 <_strtod_l+0x820>
 800e692:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e694:	b1db      	cbz	r3, 800e6ce <_strtod_l+0x906>
 800e696:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e698:	4213      	tst	r3, r2
 800e69a:	d0ee      	beq.n	800e67a <_strtod_l+0x8b2>
 800e69c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e69e:	4650      	mov	r0, sl
 800e6a0:	4659      	mov	r1, fp
 800e6a2:	9a08      	ldr	r2, [sp, #32]
 800e6a4:	b1bb      	cbz	r3, 800e6d6 <_strtod_l+0x90e>
 800e6a6:	f7ff fb6d 	bl	800dd84 <sulp>
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	460b      	mov	r3, r1
 800e6ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e6b2:	f7f1 fdcb 	bl	800024c <__adddf3>
 800e6b6:	4682      	mov	sl, r0
 800e6b8:	468b      	mov	fp, r1
 800e6ba:	e7de      	b.n	800e67a <_strtod_l+0x8b2>
 800e6bc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e6c0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e6c4:	f04f 3aff 	mov.w	sl, #4294967295
 800e6c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e6cc:	e7d5      	b.n	800e67a <_strtod_l+0x8b2>
 800e6ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e6d0:	ea13 0f0a 	tst.w	r3, sl
 800e6d4:	e7e1      	b.n	800e69a <_strtod_l+0x8d2>
 800e6d6:	f7ff fb55 	bl	800dd84 <sulp>
 800e6da:	4602      	mov	r2, r0
 800e6dc:	460b      	mov	r3, r1
 800e6de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e6e2:	f7f1 fdb1 	bl	8000248 <__aeabi_dsub>
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	4682      	mov	sl, r0
 800e6ec:	468b      	mov	fp, r1
 800e6ee:	f7f2 f9cb 	bl	8000a88 <__aeabi_dcmpeq>
 800e6f2:	2800      	cmp	r0, #0
 800e6f4:	d0c1      	beq.n	800e67a <_strtod_l+0x8b2>
 800e6f6:	e619      	b.n	800e32c <_strtod_l+0x564>
 800e6f8:	4641      	mov	r1, r8
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	f7ff face 	bl	800dc9c <__ratio>
 800e700:	2200      	movs	r2, #0
 800e702:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e706:	4606      	mov	r6, r0
 800e708:	460f      	mov	r7, r1
 800e70a:	f7f2 f9d1 	bl	8000ab0 <__aeabi_dcmple>
 800e70e:	2800      	cmp	r0, #0
 800e710:	d06d      	beq.n	800e7ee <_strtod_l+0xa26>
 800e712:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e714:	2b00      	cmp	r3, #0
 800e716:	d178      	bne.n	800e80a <_strtod_l+0xa42>
 800e718:	f1ba 0f00 	cmp.w	sl, #0
 800e71c:	d156      	bne.n	800e7cc <_strtod_l+0xa04>
 800e71e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e724:	2b00      	cmp	r3, #0
 800e726:	d158      	bne.n	800e7da <_strtod_l+0xa12>
 800e728:	2200      	movs	r2, #0
 800e72a:	4630      	mov	r0, r6
 800e72c:	4639      	mov	r1, r7
 800e72e:	4b5e      	ldr	r3, [pc, #376]	@ (800e8a8 <_strtod_l+0xae0>)
 800e730:	f7f2 f9b4 	bl	8000a9c <__aeabi_dcmplt>
 800e734:	2800      	cmp	r0, #0
 800e736:	d157      	bne.n	800e7e8 <_strtod_l+0xa20>
 800e738:	4630      	mov	r0, r6
 800e73a:	4639      	mov	r1, r7
 800e73c:	2200      	movs	r2, #0
 800e73e:	4b5b      	ldr	r3, [pc, #364]	@ (800e8ac <_strtod_l+0xae4>)
 800e740:	f7f1 ff3a 	bl	80005b8 <__aeabi_dmul>
 800e744:	4606      	mov	r6, r0
 800e746:	460f      	mov	r7, r1
 800e748:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e74c:	9606      	str	r6, [sp, #24]
 800e74e:	9307      	str	r3, [sp, #28]
 800e750:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e754:	4d51      	ldr	r5, [pc, #324]	@ (800e89c <_strtod_l+0xad4>)
 800e756:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e75a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e75c:	401d      	ands	r5, r3
 800e75e:	4b54      	ldr	r3, [pc, #336]	@ (800e8b0 <_strtod_l+0xae8>)
 800e760:	429d      	cmp	r5, r3
 800e762:	f040 80ab 	bne.w	800e8bc <_strtod_l+0xaf4>
 800e766:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e768:	4650      	mov	r0, sl
 800e76a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e76e:	4659      	mov	r1, fp
 800e770:	f7ff f9d4 	bl	800db1c <__ulp>
 800e774:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e778:	f7f1 ff1e 	bl	80005b8 <__aeabi_dmul>
 800e77c:	4652      	mov	r2, sl
 800e77e:	465b      	mov	r3, fp
 800e780:	f7f1 fd64 	bl	800024c <__adddf3>
 800e784:	460b      	mov	r3, r1
 800e786:	4945      	ldr	r1, [pc, #276]	@ (800e89c <_strtod_l+0xad4>)
 800e788:	4a4a      	ldr	r2, [pc, #296]	@ (800e8b4 <_strtod_l+0xaec>)
 800e78a:	4019      	ands	r1, r3
 800e78c:	4291      	cmp	r1, r2
 800e78e:	4682      	mov	sl, r0
 800e790:	d942      	bls.n	800e818 <_strtod_l+0xa50>
 800e792:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e794:	4b43      	ldr	r3, [pc, #268]	@ (800e8a4 <_strtod_l+0xadc>)
 800e796:	429a      	cmp	r2, r3
 800e798:	d103      	bne.n	800e7a2 <_strtod_l+0x9da>
 800e79a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e79c:	3301      	adds	r3, #1
 800e79e:	f43f ad32 	beq.w	800e206 <_strtod_l+0x43e>
 800e7a2:	f04f 3aff 	mov.w	sl, #4294967295
 800e7a6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800e8a4 <_strtod_l+0xadc>
 800e7aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e7ac:	9805      	ldr	r0, [sp, #20]
 800e7ae:	f7fe fe89 	bl	800d4c4 <_Bfree>
 800e7b2:	4649      	mov	r1, r9
 800e7b4:	9805      	ldr	r0, [sp, #20]
 800e7b6:	f7fe fe85 	bl	800d4c4 <_Bfree>
 800e7ba:	4641      	mov	r1, r8
 800e7bc:	9805      	ldr	r0, [sp, #20]
 800e7be:	f7fe fe81 	bl	800d4c4 <_Bfree>
 800e7c2:	4621      	mov	r1, r4
 800e7c4:	9805      	ldr	r0, [sp, #20]
 800e7c6:	f7fe fe7d 	bl	800d4c4 <_Bfree>
 800e7ca:	e61c      	b.n	800e406 <_strtod_l+0x63e>
 800e7cc:	f1ba 0f01 	cmp.w	sl, #1
 800e7d0:	d103      	bne.n	800e7da <_strtod_l+0xa12>
 800e7d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	f43f ada9 	beq.w	800e32c <_strtod_l+0x564>
 800e7da:	2200      	movs	r2, #0
 800e7dc:	4b36      	ldr	r3, [pc, #216]	@ (800e8b8 <_strtod_l+0xaf0>)
 800e7de:	2600      	movs	r6, #0
 800e7e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e7e4:	4f30      	ldr	r7, [pc, #192]	@ (800e8a8 <_strtod_l+0xae0>)
 800e7e6:	e7b3      	b.n	800e750 <_strtod_l+0x988>
 800e7e8:	2600      	movs	r6, #0
 800e7ea:	4f30      	ldr	r7, [pc, #192]	@ (800e8ac <_strtod_l+0xae4>)
 800e7ec:	e7ac      	b.n	800e748 <_strtod_l+0x980>
 800e7ee:	4630      	mov	r0, r6
 800e7f0:	4639      	mov	r1, r7
 800e7f2:	4b2e      	ldr	r3, [pc, #184]	@ (800e8ac <_strtod_l+0xae4>)
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	f7f1 fedf 	bl	80005b8 <__aeabi_dmul>
 800e7fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7fc:	4606      	mov	r6, r0
 800e7fe:	460f      	mov	r7, r1
 800e800:	2b00      	cmp	r3, #0
 800e802:	d0a1      	beq.n	800e748 <_strtod_l+0x980>
 800e804:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e808:	e7a2      	b.n	800e750 <_strtod_l+0x988>
 800e80a:	2200      	movs	r2, #0
 800e80c:	4b26      	ldr	r3, [pc, #152]	@ (800e8a8 <_strtod_l+0xae0>)
 800e80e:	4616      	mov	r6, r2
 800e810:	461f      	mov	r7, r3
 800e812:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e816:	e79b      	b.n	800e750 <_strtod_l+0x988>
 800e818:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e81c:	9b08      	ldr	r3, [sp, #32]
 800e81e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e822:	2b00      	cmp	r3, #0
 800e824:	d1c1      	bne.n	800e7aa <_strtod_l+0x9e2>
 800e826:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e82a:	0d1b      	lsrs	r3, r3, #20
 800e82c:	051b      	lsls	r3, r3, #20
 800e82e:	429d      	cmp	r5, r3
 800e830:	d1bb      	bne.n	800e7aa <_strtod_l+0x9e2>
 800e832:	4630      	mov	r0, r6
 800e834:	4639      	mov	r1, r7
 800e836:	f7f2 fa1f 	bl	8000c78 <__aeabi_d2lz>
 800e83a:	f7f1 fe8f 	bl	800055c <__aeabi_l2d>
 800e83e:	4602      	mov	r2, r0
 800e840:	460b      	mov	r3, r1
 800e842:	4630      	mov	r0, r6
 800e844:	4639      	mov	r1, r7
 800e846:	f7f1 fcff 	bl	8000248 <__aeabi_dsub>
 800e84a:	460b      	mov	r3, r1
 800e84c:	4602      	mov	r2, r0
 800e84e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e852:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e856:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e858:	ea46 060a 	orr.w	r6, r6, sl
 800e85c:	431e      	orrs	r6, r3
 800e85e:	d06a      	beq.n	800e936 <_strtod_l+0xb6e>
 800e860:	a309      	add	r3, pc, #36	@ (adr r3, 800e888 <_strtod_l+0xac0>)
 800e862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e866:	f7f2 f919 	bl	8000a9c <__aeabi_dcmplt>
 800e86a:	2800      	cmp	r0, #0
 800e86c:	f47f acd6 	bne.w	800e21c <_strtod_l+0x454>
 800e870:	a307      	add	r3, pc, #28	@ (adr r3, 800e890 <_strtod_l+0xac8>)
 800e872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e87a:	f7f2 f92d 	bl	8000ad8 <__aeabi_dcmpgt>
 800e87e:	2800      	cmp	r0, #0
 800e880:	d093      	beq.n	800e7aa <_strtod_l+0x9e2>
 800e882:	e4cb      	b.n	800e21c <_strtod_l+0x454>
 800e884:	f3af 8000 	nop.w
 800e888:	94a03595 	.word	0x94a03595
 800e88c:	3fdfffff 	.word	0x3fdfffff
 800e890:	35afe535 	.word	0x35afe535
 800e894:	3fe00000 	.word	0x3fe00000
 800e898:	39500000 	.word	0x39500000
 800e89c:	7ff00000 	.word	0x7ff00000
 800e8a0:	000fffff 	.word	0x000fffff
 800e8a4:	7fefffff 	.word	0x7fefffff
 800e8a8:	3ff00000 	.word	0x3ff00000
 800e8ac:	3fe00000 	.word	0x3fe00000
 800e8b0:	7fe00000 	.word	0x7fe00000
 800e8b4:	7c9fffff 	.word	0x7c9fffff
 800e8b8:	bff00000 	.word	0xbff00000
 800e8bc:	9b08      	ldr	r3, [sp, #32]
 800e8be:	b323      	cbz	r3, 800e90a <_strtod_l+0xb42>
 800e8c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e8c4:	d821      	bhi.n	800e90a <_strtod_l+0xb42>
 800e8c6:	a328      	add	r3, pc, #160	@ (adr r3, 800e968 <_strtod_l+0xba0>)
 800e8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8cc:	4630      	mov	r0, r6
 800e8ce:	4639      	mov	r1, r7
 800e8d0:	f7f2 f8ee 	bl	8000ab0 <__aeabi_dcmple>
 800e8d4:	b1a0      	cbz	r0, 800e900 <_strtod_l+0xb38>
 800e8d6:	4639      	mov	r1, r7
 800e8d8:	4630      	mov	r0, r6
 800e8da:	f7f2 f945 	bl	8000b68 <__aeabi_d2uiz>
 800e8de:	2801      	cmp	r0, #1
 800e8e0:	bf38      	it	cc
 800e8e2:	2001      	movcc	r0, #1
 800e8e4:	f7f1 fdee 	bl	80004c4 <__aeabi_ui2d>
 800e8e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8ea:	4606      	mov	r6, r0
 800e8ec:	460f      	mov	r7, r1
 800e8ee:	b9fb      	cbnz	r3, 800e930 <_strtod_l+0xb68>
 800e8f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e8f4:	9014      	str	r0, [sp, #80]	@ 0x50
 800e8f6:	9315      	str	r3, [sp, #84]	@ 0x54
 800e8f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e8fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e900:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e902:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e906:	1b5b      	subs	r3, r3, r5
 800e908:	9311      	str	r3, [sp, #68]	@ 0x44
 800e90a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e90e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e912:	f7ff f903 	bl	800db1c <__ulp>
 800e916:	4602      	mov	r2, r0
 800e918:	460b      	mov	r3, r1
 800e91a:	4650      	mov	r0, sl
 800e91c:	4659      	mov	r1, fp
 800e91e:	f7f1 fe4b 	bl	80005b8 <__aeabi_dmul>
 800e922:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e926:	f7f1 fc91 	bl	800024c <__adddf3>
 800e92a:	4682      	mov	sl, r0
 800e92c:	468b      	mov	fp, r1
 800e92e:	e775      	b.n	800e81c <_strtod_l+0xa54>
 800e930:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e934:	e7e0      	b.n	800e8f8 <_strtod_l+0xb30>
 800e936:	a30e      	add	r3, pc, #56	@ (adr r3, 800e970 <_strtod_l+0xba8>)
 800e938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93c:	f7f2 f8ae 	bl	8000a9c <__aeabi_dcmplt>
 800e940:	e79d      	b.n	800e87e <_strtod_l+0xab6>
 800e942:	2300      	movs	r3, #0
 800e944:	930e      	str	r3, [sp, #56]	@ 0x38
 800e946:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e948:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e94a:	6013      	str	r3, [r2, #0]
 800e94c:	f7ff ba79 	b.w	800de42 <_strtod_l+0x7a>
 800e950:	2a65      	cmp	r2, #101	@ 0x65
 800e952:	f43f ab72 	beq.w	800e03a <_strtod_l+0x272>
 800e956:	2a45      	cmp	r2, #69	@ 0x45
 800e958:	f43f ab6f 	beq.w	800e03a <_strtod_l+0x272>
 800e95c:	2301      	movs	r3, #1
 800e95e:	f7ff bbaa 	b.w	800e0b6 <_strtod_l+0x2ee>
 800e962:	bf00      	nop
 800e964:	f3af 8000 	nop.w
 800e968:	ffc00000 	.word	0xffc00000
 800e96c:	41dfffff 	.word	0x41dfffff
 800e970:	94a03595 	.word	0x94a03595
 800e974:	3fcfffff 	.word	0x3fcfffff

0800e978 <_strtod_r>:
 800e978:	4b01      	ldr	r3, [pc, #4]	@ (800e980 <_strtod_r+0x8>)
 800e97a:	f7ff ba25 	b.w	800ddc8 <_strtod_l>
 800e97e:	bf00      	nop
 800e980:	200080fc 	.word	0x200080fc

0800e984 <_strtol_l.isra.0>:
 800e984:	2b24      	cmp	r3, #36	@ 0x24
 800e986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e98a:	4686      	mov	lr, r0
 800e98c:	4690      	mov	r8, r2
 800e98e:	d801      	bhi.n	800e994 <_strtol_l.isra.0+0x10>
 800e990:	2b01      	cmp	r3, #1
 800e992:	d106      	bne.n	800e9a2 <_strtol_l.isra.0+0x1e>
 800e994:	f7fd fdae 	bl	800c4f4 <__errno>
 800e998:	2316      	movs	r3, #22
 800e99a:	6003      	str	r3, [r0, #0]
 800e99c:	2000      	movs	r0, #0
 800e99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9a2:	460d      	mov	r5, r1
 800e9a4:	4833      	ldr	r0, [pc, #204]	@ (800ea74 <_strtol_l.isra.0+0xf0>)
 800e9a6:	462a      	mov	r2, r5
 800e9a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e9ac:	5d06      	ldrb	r6, [r0, r4]
 800e9ae:	f016 0608 	ands.w	r6, r6, #8
 800e9b2:	d1f8      	bne.n	800e9a6 <_strtol_l.isra.0+0x22>
 800e9b4:	2c2d      	cmp	r4, #45	@ 0x2d
 800e9b6:	d110      	bne.n	800e9da <_strtol_l.isra.0+0x56>
 800e9b8:	2601      	movs	r6, #1
 800e9ba:	782c      	ldrb	r4, [r5, #0]
 800e9bc:	1c95      	adds	r5, r2, #2
 800e9be:	f033 0210 	bics.w	r2, r3, #16
 800e9c2:	d115      	bne.n	800e9f0 <_strtol_l.isra.0+0x6c>
 800e9c4:	2c30      	cmp	r4, #48	@ 0x30
 800e9c6:	d10d      	bne.n	800e9e4 <_strtol_l.isra.0+0x60>
 800e9c8:	782a      	ldrb	r2, [r5, #0]
 800e9ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e9ce:	2a58      	cmp	r2, #88	@ 0x58
 800e9d0:	d108      	bne.n	800e9e4 <_strtol_l.isra.0+0x60>
 800e9d2:	786c      	ldrb	r4, [r5, #1]
 800e9d4:	3502      	adds	r5, #2
 800e9d6:	2310      	movs	r3, #16
 800e9d8:	e00a      	b.n	800e9f0 <_strtol_l.isra.0+0x6c>
 800e9da:	2c2b      	cmp	r4, #43	@ 0x2b
 800e9dc:	bf04      	itt	eq
 800e9de:	782c      	ldrbeq	r4, [r5, #0]
 800e9e0:	1c95      	addeq	r5, r2, #2
 800e9e2:	e7ec      	b.n	800e9be <_strtol_l.isra.0+0x3a>
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d1f6      	bne.n	800e9d6 <_strtol_l.isra.0+0x52>
 800e9e8:	2c30      	cmp	r4, #48	@ 0x30
 800e9ea:	bf14      	ite	ne
 800e9ec:	230a      	movne	r3, #10
 800e9ee:	2308      	moveq	r3, #8
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e9f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e9fa:	fbbc f9f3 	udiv	r9, ip, r3
 800e9fe:	4610      	mov	r0, r2
 800ea00:	fb03 ca19 	mls	sl, r3, r9, ip
 800ea04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ea08:	2f09      	cmp	r7, #9
 800ea0a:	d80f      	bhi.n	800ea2c <_strtol_l.isra.0+0xa8>
 800ea0c:	463c      	mov	r4, r7
 800ea0e:	42a3      	cmp	r3, r4
 800ea10:	dd1b      	ble.n	800ea4a <_strtol_l.isra.0+0xc6>
 800ea12:	1c57      	adds	r7, r2, #1
 800ea14:	d007      	beq.n	800ea26 <_strtol_l.isra.0+0xa2>
 800ea16:	4581      	cmp	r9, r0
 800ea18:	d314      	bcc.n	800ea44 <_strtol_l.isra.0+0xc0>
 800ea1a:	d101      	bne.n	800ea20 <_strtol_l.isra.0+0x9c>
 800ea1c:	45a2      	cmp	sl, r4
 800ea1e:	db11      	blt.n	800ea44 <_strtol_l.isra.0+0xc0>
 800ea20:	2201      	movs	r2, #1
 800ea22:	fb00 4003 	mla	r0, r0, r3, r4
 800ea26:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea2a:	e7eb      	b.n	800ea04 <_strtol_l.isra.0+0x80>
 800ea2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ea30:	2f19      	cmp	r7, #25
 800ea32:	d801      	bhi.n	800ea38 <_strtol_l.isra.0+0xb4>
 800ea34:	3c37      	subs	r4, #55	@ 0x37
 800ea36:	e7ea      	b.n	800ea0e <_strtol_l.isra.0+0x8a>
 800ea38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ea3c:	2f19      	cmp	r7, #25
 800ea3e:	d804      	bhi.n	800ea4a <_strtol_l.isra.0+0xc6>
 800ea40:	3c57      	subs	r4, #87	@ 0x57
 800ea42:	e7e4      	b.n	800ea0e <_strtol_l.isra.0+0x8a>
 800ea44:	f04f 32ff 	mov.w	r2, #4294967295
 800ea48:	e7ed      	b.n	800ea26 <_strtol_l.isra.0+0xa2>
 800ea4a:	1c53      	adds	r3, r2, #1
 800ea4c:	d108      	bne.n	800ea60 <_strtol_l.isra.0+0xdc>
 800ea4e:	2322      	movs	r3, #34	@ 0x22
 800ea50:	4660      	mov	r0, ip
 800ea52:	f8ce 3000 	str.w	r3, [lr]
 800ea56:	f1b8 0f00 	cmp.w	r8, #0
 800ea5a:	d0a0      	beq.n	800e99e <_strtol_l.isra.0+0x1a>
 800ea5c:	1e69      	subs	r1, r5, #1
 800ea5e:	e006      	b.n	800ea6e <_strtol_l.isra.0+0xea>
 800ea60:	b106      	cbz	r6, 800ea64 <_strtol_l.isra.0+0xe0>
 800ea62:	4240      	negs	r0, r0
 800ea64:	f1b8 0f00 	cmp.w	r8, #0
 800ea68:	d099      	beq.n	800e99e <_strtol_l.isra.0+0x1a>
 800ea6a:	2a00      	cmp	r2, #0
 800ea6c:	d1f6      	bne.n	800ea5c <_strtol_l.isra.0+0xd8>
 800ea6e:	f8c8 1000 	str.w	r1, [r8]
 800ea72:	e794      	b.n	800e99e <_strtol_l.isra.0+0x1a>
 800ea74:	080118b1 	.word	0x080118b1

0800ea78 <_strtol_r>:
 800ea78:	f7ff bf84 	b.w	800e984 <_strtol_l.isra.0>

0800ea7c <__ssputs_r>:
 800ea7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea80:	461f      	mov	r7, r3
 800ea82:	688e      	ldr	r6, [r1, #8]
 800ea84:	4682      	mov	sl, r0
 800ea86:	42be      	cmp	r6, r7
 800ea88:	460c      	mov	r4, r1
 800ea8a:	4690      	mov	r8, r2
 800ea8c:	680b      	ldr	r3, [r1, #0]
 800ea8e:	d82d      	bhi.n	800eaec <__ssputs_r+0x70>
 800ea90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ea98:	d026      	beq.n	800eae8 <__ssputs_r+0x6c>
 800ea9a:	6965      	ldr	r5, [r4, #20]
 800ea9c:	6909      	ldr	r1, [r1, #16]
 800ea9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eaa2:	eba3 0901 	sub.w	r9, r3, r1
 800eaa6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eaaa:	1c7b      	adds	r3, r7, #1
 800eaac:	444b      	add	r3, r9
 800eaae:	106d      	asrs	r5, r5, #1
 800eab0:	429d      	cmp	r5, r3
 800eab2:	bf38      	it	cc
 800eab4:	461d      	movcc	r5, r3
 800eab6:	0553      	lsls	r3, r2, #21
 800eab8:	d527      	bpl.n	800eb0a <__ssputs_r+0x8e>
 800eaba:	4629      	mov	r1, r5
 800eabc:	f7fe fc36 	bl	800d32c <_malloc_r>
 800eac0:	4606      	mov	r6, r0
 800eac2:	b360      	cbz	r0, 800eb1e <__ssputs_r+0xa2>
 800eac4:	464a      	mov	r2, r9
 800eac6:	6921      	ldr	r1, [r4, #16]
 800eac8:	f7fd fd4f 	bl	800c56a <memcpy>
 800eacc:	89a3      	ldrh	r3, [r4, #12]
 800eace:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ead2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ead6:	81a3      	strh	r3, [r4, #12]
 800ead8:	6126      	str	r6, [r4, #16]
 800eada:	444e      	add	r6, r9
 800eadc:	6026      	str	r6, [r4, #0]
 800eade:	463e      	mov	r6, r7
 800eae0:	6165      	str	r5, [r4, #20]
 800eae2:	eba5 0509 	sub.w	r5, r5, r9
 800eae6:	60a5      	str	r5, [r4, #8]
 800eae8:	42be      	cmp	r6, r7
 800eaea:	d900      	bls.n	800eaee <__ssputs_r+0x72>
 800eaec:	463e      	mov	r6, r7
 800eaee:	4632      	mov	r2, r6
 800eaf0:	4641      	mov	r1, r8
 800eaf2:	6820      	ldr	r0, [r4, #0]
 800eaf4:	f000 fb63 	bl	800f1be <memmove>
 800eaf8:	2000      	movs	r0, #0
 800eafa:	68a3      	ldr	r3, [r4, #8]
 800eafc:	1b9b      	subs	r3, r3, r6
 800eafe:	60a3      	str	r3, [r4, #8]
 800eb00:	6823      	ldr	r3, [r4, #0]
 800eb02:	4433      	add	r3, r6
 800eb04:	6023      	str	r3, [r4, #0]
 800eb06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb0a:	462a      	mov	r2, r5
 800eb0c:	f000 ff39 	bl	800f982 <_realloc_r>
 800eb10:	4606      	mov	r6, r0
 800eb12:	2800      	cmp	r0, #0
 800eb14:	d1e0      	bne.n	800ead8 <__ssputs_r+0x5c>
 800eb16:	4650      	mov	r0, sl
 800eb18:	6921      	ldr	r1, [r4, #16]
 800eb1a:	f7fe fb95 	bl	800d248 <_free_r>
 800eb1e:	230c      	movs	r3, #12
 800eb20:	f8ca 3000 	str.w	r3, [sl]
 800eb24:	89a3      	ldrh	r3, [r4, #12]
 800eb26:	f04f 30ff 	mov.w	r0, #4294967295
 800eb2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb2e:	81a3      	strh	r3, [r4, #12]
 800eb30:	e7e9      	b.n	800eb06 <__ssputs_r+0x8a>
	...

0800eb34 <_svfiprintf_r>:
 800eb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb38:	4698      	mov	r8, r3
 800eb3a:	898b      	ldrh	r3, [r1, #12]
 800eb3c:	4607      	mov	r7, r0
 800eb3e:	061b      	lsls	r3, r3, #24
 800eb40:	460d      	mov	r5, r1
 800eb42:	4614      	mov	r4, r2
 800eb44:	b09d      	sub	sp, #116	@ 0x74
 800eb46:	d510      	bpl.n	800eb6a <_svfiprintf_r+0x36>
 800eb48:	690b      	ldr	r3, [r1, #16]
 800eb4a:	b973      	cbnz	r3, 800eb6a <_svfiprintf_r+0x36>
 800eb4c:	2140      	movs	r1, #64	@ 0x40
 800eb4e:	f7fe fbed 	bl	800d32c <_malloc_r>
 800eb52:	6028      	str	r0, [r5, #0]
 800eb54:	6128      	str	r0, [r5, #16]
 800eb56:	b930      	cbnz	r0, 800eb66 <_svfiprintf_r+0x32>
 800eb58:	230c      	movs	r3, #12
 800eb5a:	603b      	str	r3, [r7, #0]
 800eb5c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb60:	b01d      	add	sp, #116	@ 0x74
 800eb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb66:	2340      	movs	r3, #64	@ 0x40
 800eb68:	616b      	str	r3, [r5, #20]
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb6e:	2320      	movs	r3, #32
 800eb70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eb74:	2330      	movs	r3, #48	@ 0x30
 800eb76:	f04f 0901 	mov.w	r9, #1
 800eb7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb7e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ed18 <_svfiprintf_r+0x1e4>
 800eb82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eb86:	4623      	mov	r3, r4
 800eb88:	469a      	mov	sl, r3
 800eb8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb8e:	b10a      	cbz	r2, 800eb94 <_svfiprintf_r+0x60>
 800eb90:	2a25      	cmp	r2, #37	@ 0x25
 800eb92:	d1f9      	bne.n	800eb88 <_svfiprintf_r+0x54>
 800eb94:	ebba 0b04 	subs.w	fp, sl, r4
 800eb98:	d00b      	beq.n	800ebb2 <_svfiprintf_r+0x7e>
 800eb9a:	465b      	mov	r3, fp
 800eb9c:	4622      	mov	r2, r4
 800eb9e:	4629      	mov	r1, r5
 800eba0:	4638      	mov	r0, r7
 800eba2:	f7ff ff6b 	bl	800ea7c <__ssputs_r>
 800eba6:	3001      	adds	r0, #1
 800eba8:	f000 80a7 	beq.w	800ecfa <_svfiprintf_r+0x1c6>
 800ebac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ebae:	445a      	add	r2, fp
 800ebb0:	9209      	str	r2, [sp, #36]	@ 0x24
 800ebb2:	f89a 3000 	ldrb.w	r3, [sl]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	f000 809f 	beq.w	800ecfa <_svfiprintf_r+0x1c6>
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	f04f 32ff 	mov.w	r2, #4294967295
 800ebc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebc6:	f10a 0a01 	add.w	sl, sl, #1
 800ebca:	9304      	str	r3, [sp, #16]
 800ebcc:	9307      	str	r3, [sp, #28]
 800ebce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ebd2:	931a      	str	r3, [sp, #104]	@ 0x68
 800ebd4:	4654      	mov	r4, sl
 800ebd6:	2205      	movs	r2, #5
 800ebd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebdc:	484e      	ldr	r0, [pc, #312]	@ (800ed18 <_svfiprintf_r+0x1e4>)
 800ebde:	f7fd fcb6 	bl	800c54e <memchr>
 800ebe2:	9a04      	ldr	r2, [sp, #16]
 800ebe4:	b9d8      	cbnz	r0, 800ec1e <_svfiprintf_r+0xea>
 800ebe6:	06d0      	lsls	r0, r2, #27
 800ebe8:	bf44      	itt	mi
 800ebea:	2320      	movmi	r3, #32
 800ebec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ebf0:	0711      	lsls	r1, r2, #28
 800ebf2:	bf44      	itt	mi
 800ebf4:	232b      	movmi	r3, #43	@ 0x2b
 800ebf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ebfa:	f89a 3000 	ldrb.w	r3, [sl]
 800ebfe:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec00:	d015      	beq.n	800ec2e <_svfiprintf_r+0xfa>
 800ec02:	4654      	mov	r4, sl
 800ec04:	2000      	movs	r0, #0
 800ec06:	f04f 0c0a 	mov.w	ip, #10
 800ec0a:	9a07      	ldr	r2, [sp, #28]
 800ec0c:	4621      	mov	r1, r4
 800ec0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec12:	3b30      	subs	r3, #48	@ 0x30
 800ec14:	2b09      	cmp	r3, #9
 800ec16:	d94b      	bls.n	800ecb0 <_svfiprintf_r+0x17c>
 800ec18:	b1b0      	cbz	r0, 800ec48 <_svfiprintf_r+0x114>
 800ec1a:	9207      	str	r2, [sp, #28]
 800ec1c:	e014      	b.n	800ec48 <_svfiprintf_r+0x114>
 800ec1e:	eba0 0308 	sub.w	r3, r0, r8
 800ec22:	fa09 f303 	lsl.w	r3, r9, r3
 800ec26:	4313      	orrs	r3, r2
 800ec28:	46a2      	mov	sl, r4
 800ec2a:	9304      	str	r3, [sp, #16]
 800ec2c:	e7d2      	b.n	800ebd4 <_svfiprintf_r+0xa0>
 800ec2e:	9b03      	ldr	r3, [sp, #12]
 800ec30:	1d19      	adds	r1, r3, #4
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	9103      	str	r1, [sp, #12]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	bfbb      	ittet	lt
 800ec3a:	425b      	neglt	r3, r3
 800ec3c:	f042 0202 	orrlt.w	r2, r2, #2
 800ec40:	9307      	strge	r3, [sp, #28]
 800ec42:	9307      	strlt	r3, [sp, #28]
 800ec44:	bfb8      	it	lt
 800ec46:	9204      	strlt	r2, [sp, #16]
 800ec48:	7823      	ldrb	r3, [r4, #0]
 800ec4a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ec4c:	d10a      	bne.n	800ec64 <_svfiprintf_r+0x130>
 800ec4e:	7863      	ldrb	r3, [r4, #1]
 800ec50:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec52:	d132      	bne.n	800ecba <_svfiprintf_r+0x186>
 800ec54:	9b03      	ldr	r3, [sp, #12]
 800ec56:	3402      	adds	r4, #2
 800ec58:	1d1a      	adds	r2, r3, #4
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	9203      	str	r2, [sp, #12]
 800ec5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ec62:	9305      	str	r3, [sp, #20]
 800ec64:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ed1c <_svfiprintf_r+0x1e8>
 800ec68:	2203      	movs	r2, #3
 800ec6a:	4650      	mov	r0, sl
 800ec6c:	7821      	ldrb	r1, [r4, #0]
 800ec6e:	f7fd fc6e 	bl	800c54e <memchr>
 800ec72:	b138      	cbz	r0, 800ec84 <_svfiprintf_r+0x150>
 800ec74:	2240      	movs	r2, #64	@ 0x40
 800ec76:	9b04      	ldr	r3, [sp, #16]
 800ec78:	eba0 000a 	sub.w	r0, r0, sl
 800ec7c:	4082      	lsls	r2, r0
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	3401      	adds	r4, #1
 800ec82:	9304      	str	r3, [sp, #16]
 800ec84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec88:	2206      	movs	r2, #6
 800ec8a:	4825      	ldr	r0, [pc, #148]	@ (800ed20 <_svfiprintf_r+0x1ec>)
 800ec8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ec90:	f7fd fc5d 	bl	800c54e <memchr>
 800ec94:	2800      	cmp	r0, #0
 800ec96:	d036      	beq.n	800ed06 <_svfiprintf_r+0x1d2>
 800ec98:	4b22      	ldr	r3, [pc, #136]	@ (800ed24 <_svfiprintf_r+0x1f0>)
 800ec9a:	bb1b      	cbnz	r3, 800ece4 <_svfiprintf_r+0x1b0>
 800ec9c:	9b03      	ldr	r3, [sp, #12]
 800ec9e:	3307      	adds	r3, #7
 800eca0:	f023 0307 	bic.w	r3, r3, #7
 800eca4:	3308      	adds	r3, #8
 800eca6:	9303      	str	r3, [sp, #12]
 800eca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecaa:	4433      	add	r3, r6
 800ecac:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecae:	e76a      	b.n	800eb86 <_svfiprintf_r+0x52>
 800ecb0:	460c      	mov	r4, r1
 800ecb2:	2001      	movs	r0, #1
 800ecb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecb8:	e7a8      	b.n	800ec0c <_svfiprintf_r+0xd8>
 800ecba:	2300      	movs	r3, #0
 800ecbc:	f04f 0c0a 	mov.w	ip, #10
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	3401      	adds	r4, #1
 800ecc4:	9305      	str	r3, [sp, #20]
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eccc:	3a30      	subs	r2, #48	@ 0x30
 800ecce:	2a09      	cmp	r2, #9
 800ecd0:	d903      	bls.n	800ecda <_svfiprintf_r+0x1a6>
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d0c6      	beq.n	800ec64 <_svfiprintf_r+0x130>
 800ecd6:	9105      	str	r1, [sp, #20]
 800ecd8:	e7c4      	b.n	800ec64 <_svfiprintf_r+0x130>
 800ecda:	4604      	mov	r4, r0
 800ecdc:	2301      	movs	r3, #1
 800ecde:	fb0c 2101 	mla	r1, ip, r1, r2
 800ece2:	e7f0      	b.n	800ecc6 <_svfiprintf_r+0x192>
 800ece4:	ab03      	add	r3, sp, #12
 800ece6:	9300      	str	r3, [sp, #0]
 800ece8:	462a      	mov	r2, r5
 800ecea:	4638      	mov	r0, r7
 800ecec:	4b0e      	ldr	r3, [pc, #56]	@ (800ed28 <_svfiprintf_r+0x1f4>)
 800ecee:	a904      	add	r1, sp, #16
 800ecf0:	f7fc fbce 	bl	800b490 <_printf_float>
 800ecf4:	1c42      	adds	r2, r0, #1
 800ecf6:	4606      	mov	r6, r0
 800ecf8:	d1d6      	bne.n	800eca8 <_svfiprintf_r+0x174>
 800ecfa:	89ab      	ldrh	r3, [r5, #12]
 800ecfc:	065b      	lsls	r3, r3, #25
 800ecfe:	f53f af2d 	bmi.w	800eb5c <_svfiprintf_r+0x28>
 800ed02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed04:	e72c      	b.n	800eb60 <_svfiprintf_r+0x2c>
 800ed06:	ab03      	add	r3, sp, #12
 800ed08:	9300      	str	r3, [sp, #0]
 800ed0a:	462a      	mov	r2, r5
 800ed0c:	4638      	mov	r0, r7
 800ed0e:	4b06      	ldr	r3, [pc, #24]	@ (800ed28 <_svfiprintf_r+0x1f4>)
 800ed10:	a904      	add	r1, sp, #16
 800ed12:	f7fc fe5b 	bl	800b9cc <_printf_i>
 800ed16:	e7ed      	b.n	800ecf4 <_svfiprintf_r+0x1c0>
 800ed18:	080116a9 	.word	0x080116a9
 800ed1c:	080116af 	.word	0x080116af
 800ed20:	080116b3 	.word	0x080116b3
 800ed24:	0800b491 	.word	0x0800b491
 800ed28:	0800ea7d 	.word	0x0800ea7d

0800ed2c <__sfputc_r>:
 800ed2c:	6893      	ldr	r3, [r2, #8]
 800ed2e:	b410      	push	{r4}
 800ed30:	3b01      	subs	r3, #1
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	6093      	str	r3, [r2, #8]
 800ed36:	da07      	bge.n	800ed48 <__sfputc_r+0x1c>
 800ed38:	6994      	ldr	r4, [r2, #24]
 800ed3a:	42a3      	cmp	r3, r4
 800ed3c:	db01      	blt.n	800ed42 <__sfputc_r+0x16>
 800ed3e:	290a      	cmp	r1, #10
 800ed40:	d102      	bne.n	800ed48 <__sfputc_r+0x1c>
 800ed42:	bc10      	pop	{r4}
 800ed44:	f7fd baef 	b.w	800c326 <__swbuf_r>
 800ed48:	6813      	ldr	r3, [r2, #0]
 800ed4a:	1c58      	adds	r0, r3, #1
 800ed4c:	6010      	str	r0, [r2, #0]
 800ed4e:	7019      	strb	r1, [r3, #0]
 800ed50:	4608      	mov	r0, r1
 800ed52:	bc10      	pop	{r4}
 800ed54:	4770      	bx	lr

0800ed56 <__sfputs_r>:
 800ed56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed58:	4606      	mov	r6, r0
 800ed5a:	460f      	mov	r7, r1
 800ed5c:	4614      	mov	r4, r2
 800ed5e:	18d5      	adds	r5, r2, r3
 800ed60:	42ac      	cmp	r4, r5
 800ed62:	d101      	bne.n	800ed68 <__sfputs_r+0x12>
 800ed64:	2000      	movs	r0, #0
 800ed66:	e007      	b.n	800ed78 <__sfputs_r+0x22>
 800ed68:	463a      	mov	r2, r7
 800ed6a:	4630      	mov	r0, r6
 800ed6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed70:	f7ff ffdc 	bl	800ed2c <__sfputc_r>
 800ed74:	1c43      	adds	r3, r0, #1
 800ed76:	d1f3      	bne.n	800ed60 <__sfputs_r+0xa>
 800ed78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed7c <_vfiprintf_r>:
 800ed7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed80:	460d      	mov	r5, r1
 800ed82:	4614      	mov	r4, r2
 800ed84:	4698      	mov	r8, r3
 800ed86:	4606      	mov	r6, r0
 800ed88:	b09d      	sub	sp, #116	@ 0x74
 800ed8a:	b118      	cbz	r0, 800ed94 <_vfiprintf_r+0x18>
 800ed8c:	6a03      	ldr	r3, [r0, #32]
 800ed8e:	b90b      	cbnz	r3, 800ed94 <_vfiprintf_r+0x18>
 800ed90:	f7fd f9d0 	bl	800c134 <__sinit>
 800ed94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed96:	07d9      	lsls	r1, r3, #31
 800ed98:	d405      	bmi.n	800eda6 <_vfiprintf_r+0x2a>
 800ed9a:	89ab      	ldrh	r3, [r5, #12]
 800ed9c:	059a      	lsls	r2, r3, #22
 800ed9e:	d402      	bmi.n	800eda6 <_vfiprintf_r+0x2a>
 800eda0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eda2:	f7fd fbd2 	bl	800c54a <__retarget_lock_acquire_recursive>
 800eda6:	89ab      	ldrh	r3, [r5, #12]
 800eda8:	071b      	lsls	r3, r3, #28
 800edaa:	d501      	bpl.n	800edb0 <_vfiprintf_r+0x34>
 800edac:	692b      	ldr	r3, [r5, #16]
 800edae:	b99b      	cbnz	r3, 800edd8 <_vfiprintf_r+0x5c>
 800edb0:	4629      	mov	r1, r5
 800edb2:	4630      	mov	r0, r6
 800edb4:	f7fd faf6 	bl	800c3a4 <__swsetup_r>
 800edb8:	b170      	cbz	r0, 800edd8 <_vfiprintf_r+0x5c>
 800edba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800edbc:	07dc      	lsls	r4, r3, #31
 800edbe:	d504      	bpl.n	800edca <_vfiprintf_r+0x4e>
 800edc0:	f04f 30ff 	mov.w	r0, #4294967295
 800edc4:	b01d      	add	sp, #116	@ 0x74
 800edc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edca:	89ab      	ldrh	r3, [r5, #12]
 800edcc:	0598      	lsls	r0, r3, #22
 800edce:	d4f7      	bmi.n	800edc0 <_vfiprintf_r+0x44>
 800edd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800edd2:	f7fd fbbb 	bl	800c54c <__retarget_lock_release_recursive>
 800edd6:	e7f3      	b.n	800edc0 <_vfiprintf_r+0x44>
 800edd8:	2300      	movs	r3, #0
 800edda:	9309      	str	r3, [sp, #36]	@ 0x24
 800eddc:	2320      	movs	r3, #32
 800edde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ede2:	2330      	movs	r3, #48	@ 0x30
 800ede4:	f04f 0901 	mov.w	r9, #1
 800ede8:	f8cd 800c 	str.w	r8, [sp, #12]
 800edec:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ef98 <_vfiprintf_r+0x21c>
 800edf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800edf4:	4623      	mov	r3, r4
 800edf6:	469a      	mov	sl, r3
 800edf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edfc:	b10a      	cbz	r2, 800ee02 <_vfiprintf_r+0x86>
 800edfe:	2a25      	cmp	r2, #37	@ 0x25
 800ee00:	d1f9      	bne.n	800edf6 <_vfiprintf_r+0x7a>
 800ee02:	ebba 0b04 	subs.w	fp, sl, r4
 800ee06:	d00b      	beq.n	800ee20 <_vfiprintf_r+0xa4>
 800ee08:	465b      	mov	r3, fp
 800ee0a:	4622      	mov	r2, r4
 800ee0c:	4629      	mov	r1, r5
 800ee0e:	4630      	mov	r0, r6
 800ee10:	f7ff ffa1 	bl	800ed56 <__sfputs_r>
 800ee14:	3001      	adds	r0, #1
 800ee16:	f000 80a7 	beq.w	800ef68 <_vfiprintf_r+0x1ec>
 800ee1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee1c:	445a      	add	r2, fp
 800ee1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee20:	f89a 3000 	ldrb.w	r3, [sl]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	f000 809f 	beq.w	800ef68 <_vfiprintf_r+0x1ec>
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ee30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee34:	f10a 0a01 	add.w	sl, sl, #1
 800ee38:	9304      	str	r3, [sp, #16]
 800ee3a:	9307      	str	r3, [sp, #28]
 800ee3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee40:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee42:	4654      	mov	r4, sl
 800ee44:	2205      	movs	r2, #5
 800ee46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee4a:	4853      	ldr	r0, [pc, #332]	@ (800ef98 <_vfiprintf_r+0x21c>)
 800ee4c:	f7fd fb7f 	bl	800c54e <memchr>
 800ee50:	9a04      	ldr	r2, [sp, #16]
 800ee52:	b9d8      	cbnz	r0, 800ee8c <_vfiprintf_r+0x110>
 800ee54:	06d1      	lsls	r1, r2, #27
 800ee56:	bf44      	itt	mi
 800ee58:	2320      	movmi	r3, #32
 800ee5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee5e:	0713      	lsls	r3, r2, #28
 800ee60:	bf44      	itt	mi
 800ee62:	232b      	movmi	r3, #43	@ 0x2b
 800ee64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee68:	f89a 3000 	ldrb.w	r3, [sl]
 800ee6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee6e:	d015      	beq.n	800ee9c <_vfiprintf_r+0x120>
 800ee70:	4654      	mov	r4, sl
 800ee72:	2000      	movs	r0, #0
 800ee74:	f04f 0c0a 	mov.w	ip, #10
 800ee78:	9a07      	ldr	r2, [sp, #28]
 800ee7a:	4621      	mov	r1, r4
 800ee7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee80:	3b30      	subs	r3, #48	@ 0x30
 800ee82:	2b09      	cmp	r3, #9
 800ee84:	d94b      	bls.n	800ef1e <_vfiprintf_r+0x1a2>
 800ee86:	b1b0      	cbz	r0, 800eeb6 <_vfiprintf_r+0x13a>
 800ee88:	9207      	str	r2, [sp, #28]
 800ee8a:	e014      	b.n	800eeb6 <_vfiprintf_r+0x13a>
 800ee8c:	eba0 0308 	sub.w	r3, r0, r8
 800ee90:	fa09 f303 	lsl.w	r3, r9, r3
 800ee94:	4313      	orrs	r3, r2
 800ee96:	46a2      	mov	sl, r4
 800ee98:	9304      	str	r3, [sp, #16]
 800ee9a:	e7d2      	b.n	800ee42 <_vfiprintf_r+0xc6>
 800ee9c:	9b03      	ldr	r3, [sp, #12]
 800ee9e:	1d19      	adds	r1, r3, #4
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	9103      	str	r1, [sp, #12]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	bfbb      	ittet	lt
 800eea8:	425b      	neglt	r3, r3
 800eeaa:	f042 0202 	orrlt.w	r2, r2, #2
 800eeae:	9307      	strge	r3, [sp, #28]
 800eeb0:	9307      	strlt	r3, [sp, #28]
 800eeb2:	bfb8      	it	lt
 800eeb4:	9204      	strlt	r2, [sp, #16]
 800eeb6:	7823      	ldrb	r3, [r4, #0]
 800eeb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800eeba:	d10a      	bne.n	800eed2 <_vfiprintf_r+0x156>
 800eebc:	7863      	ldrb	r3, [r4, #1]
 800eebe:	2b2a      	cmp	r3, #42	@ 0x2a
 800eec0:	d132      	bne.n	800ef28 <_vfiprintf_r+0x1ac>
 800eec2:	9b03      	ldr	r3, [sp, #12]
 800eec4:	3402      	adds	r4, #2
 800eec6:	1d1a      	adds	r2, r3, #4
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	9203      	str	r2, [sp, #12]
 800eecc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eed0:	9305      	str	r3, [sp, #20]
 800eed2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ef9c <_vfiprintf_r+0x220>
 800eed6:	2203      	movs	r2, #3
 800eed8:	4650      	mov	r0, sl
 800eeda:	7821      	ldrb	r1, [r4, #0]
 800eedc:	f7fd fb37 	bl	800c54e <memchr>
 800eee0:	b138      	cbz	r0, 800eef2 <_vfiprintf_r+0x176>
 800eee2:	2240      	movs	r2, #64	@ 0x40
 800eee4:	9b04      	ldr	r3, [sp, #16]
 800eee6:	eba0 000a 	sub.w	r0, r0, sl
 800eeea:	4082      	lsls	r2, r0
 800eeec:	4313      	orrs	r3, r2
 800eeee:	3401      	adds	r4, #1
 800eef0:	9304      	str	r3, [sp, #16]
 800eef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eef6:	2206      	movs	r2, #6
 800eef8:	4829      	ldr	r0, [pc, #164]	@ (800efa0 <_vfiprintf_r+0x224>)
 800eefa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eefe:	f7fd fb26 	bl	800c54e <memchr>
 800ef02:	2800      	cmp	r0, #0
 800ef04:	d03f      	beq.n	800ef86 <_vfiprintf_r+0x20a>
 800ef06:	4b27      	ldr	r3, [pc, #156]	@ (800efa4 <_vfiprintf_r+0x228>)
 800ef08:	bb1b      	cbnz	r3, 800ef52 <_vfiprintf_r+0x1d6>
 800ef0a:	9b03      	ldr	r3, [sp, #12]
 800ef0c:	3307      	adds	r3, #7
 800ef0e:	f023 0307 	bic.w	r3, r3, #7
 800ef12:	3308      	adds	r3, #8
 800ef14:	9303      	str	r3, [sp, #12]
 800ef16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef18:	443b      	add	r3, r7
 800ef1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef1c:	e76a      	b.n	800edf4 <_vfiprintf_r+0x78>
 800ef1e:	460c      	mov	r4, r1
 800ef20:	2001      	movs	r0, #1
 800ef22:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef26:	e7a8      	b.n	800ee7a <_vfiprintf_r+0xfe>
 800ef28:	2300      	movs	r3, #0
 800ef2a:	f04f 0c0a 	mov.w	ip, #10
 800ef2e:	4619      	mov	r1, r3
 800ef30:	3401      	adds	r4, #1
 800ef32:	9305      	str	r3, [sp, #20]
 800ef34:	4620      	mov	r0, r4
 800ef36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef3a:	3a30      	subs	r2, #48	@ 0x30
 800ef3c:	2a09      	cmp	r2, #9
 800ef3e:	d903      	bls.n	800ef48 <_vfiprintf_r+0x1cc>
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d0c6      	beq.n	800eed2 <_vfiprintf_r+0x156>
 800ef44:	9105      	str	r1, [sp, #20]
 800ef46:	e7c4      	b.n	800eed2 <_vfiprintf_r+0x156>
 800ef48:	4604      	mov	r4, r0
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef50:	e7f0      	b.n	800ef34 <_vfiprintf_r+0x1b8>
 800ef52:	ab03      	add	r3, sp, #12
 800ef54:	9300      	str	r3, [sp, #0]
 800ef56:	462a      	mov	r2, r5
 800ef58:	4630      	mov	r0, r6
 800ef5a:	4b13      	ldr	r3, [pc, #76]	@ (800efa8 <_vfiprintf_r+0x22c>)
 800ef5c:	a904      	add	r1, sp, #16
 800ef5e:	f7fc fa97 	bl	800b490 <_printf_float>
 800ef62:	4607      	mov	r7, r0
 800ef64:	1c78      	adds	r0, r7, #1
 800ef66:	d1d6      	bne.n	800ef16 <_vfiprintf_r+0x19a>
 800ef68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef6a:	07d9      	lsls	r1, r3, #31
 800ef6c:	d405      	bmi.n	800ef7a <_vfiprintf_r+0x1fe>
 800ef6e:	89ab      	ldrh	r3, [r5, #12]
 800ef70:	059a      	lsls	r2, r3, #22
 800ef72:	d402      	bmi.n	800ef7a <_vfiprintf_r+0x1fe>
 800ef74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef76:	f7fd fae9 	bl	800c54c <__retarget_lock_release_recursive>
 800ef7a:	89ab      	ldrh	r3, [r5, #12]
 800ef7c:	065b      	lsls	r3, r3, #25
 800ef7e:	f53f af1f 	bmi.w	800edc0 <_vfiprintf_r+0x44>
 800ef82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef84:	e71e      	b.n	800edc4 <_vfiprintf_r+0x48>
 800ef86:	ab03      	add	r3, sp, #12
 800ef88:	9300      	str	r3, [sp, #0]
 800ef8a:	462a      	mov	r2, r5
 800ef8c:	4630      	mov	r0, r6
 800ef8e:	4b06      	ldr	r3, [pc, #24]	@ (800efa8 <_vfiprintf_r+0x22c>)
 800ef90:	a904      	add	r1, sp, #16
 800ef92:	f7fc fd1b 	bl	800b9cc <_printf_i>
 800ef96:	e7e4      	b.n	800ef62 <_vfiprintf_r+0x1e6>
 800ef98:	080116a9 	.word	0x080116a9
 800ef9c:	080116af 	.word	0x080116af
 800efa0:	080116b3 	.word	0x080116b3
 800efa4:	0800b491 	.word	0x0800b491
 800efa8:	0800ed57 	.word	0x0800ed57

0800efac <__sflush_r>:
 800efac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800efb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efb2:	0716      	lsls	r6, r2, #28
 800efb4:	4605      	mov	r5, r0
 800efb6:	460c      	mov	r4, r1
 800efb8:	d454      	bmi.n	800f064 <__sflush_r+0xb8>
 800efba:	684b      	ldr	r3, [r1, #4]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	dc02      	bgt.n	800efc6 <__sflush_r+0x1a>
 800efc0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	dd48      	ble.n	800f058 <__sflush_r+0xac>
 800efc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800efc8:	2e00      	cmp	r6, #0
 800efca:	d045      	beq.n	800f058 <__sflush_r+0xac>
 800efcc:	2300      	movs	r3, #0
 800efce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800efd2:	682f      	ldr	r7, [r5, #0]
 800efd4:	6a21      	ldr	r1, [r4, #32]
 800efd6:	602b      	str	r3, [r5, #0]
 800efd8:	d030      	beq.n	800f03c <__sflush_r+0x90>
 800efda:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800efdc:	89a3      	ldrh	r3, [r4, #12]
 800efde:	0759      	lsls	r1, r3, #29
 800efe0:	d505      	bpl.n	800efee <__sflush_r+0x42>
 800efe2:	6863      	ldr	r3, [r4, #4]
 800efe4:	1ad2      	subs	r2, r2, r3
 800efe6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800efe8:	b10b      	cbz	r3, 800efee <__sflush_r+0x42>
 800efea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800efec:	1ad2      	subs	r2, r2, r3
 800efee:	2300      	movs	r3, #0
 800eff0:	4628      	mov	r0, r5
 800eff2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eff4:	6a21      	ldr	r1, [r4, #32]
 800eff6:	47b0      	blx	r6
 800eff8:	1c43      	adds	r3, r0, #1
 800effa:	89a3      	ldrh	r3, [r4, #12]
 800effc:	d106      	bne.n	800f00c <__sflush_r+0x60>
 800effe:	6829      	ldr	r1, [r5, #0]
 800f000:	291d      	cmp	r1, #29
 800f002:	d82b      	bhi.n	800f05c <__sflush_r+0xb0>
 800f004:	4a28      	ldr	r2, [pc, #160]	@ (800f0a8 <__sflush_r+0xfc>)
 800f006:	40ca      	lsrs	r2, r1
 800f008:	07d6      	lsls	r6, r2, #31
 800f00a:	d527      	bpl.n	800f05c <__sflush_r+0xb0>
 800f00c:	2200      	movs	r2, #0
 800f00e:	6062      	str	r2, [r4, #4]
 800f010:	6922      	ldr	r2, [r4, #16]
 800f012:	04d9      	lsls	r1, r3, #19
 800f014:	6022      	str	r2, [r4, #0]
 800f016:	d504      	bpl.n	800f022 <__sflush_r+0x76>
 800f018:	1c42      	adds	r2, r0, #1
 800f01a:	d101      	bne.n	800f020 <__sflush_r+0x74>
 800f01c:	682b      	ldr	r3, [r5, #0]
 800f01e:	b903      	cbnz	r3, 800f022 <__sflush_r+0x76>
 800f020:	6560      	str	r0, [r4, #84]	@ 0x54
 800f022:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f024:	602f      	str	r7, [r5, #0]
 800f026:	b1b9      	cbz	r1, 800f058 <__sflush_r+0xac>
 800f028:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f02c:	4299      	cmp	r1, r3
 800f02e:	d002      	beq.n	800f036 <__sflush_r+0x8a>
 800f030:	4628      	mov	r0, r5
 800f032:	f7fe f909 	bl	800d248 <_free_r>
 800f036:	2300      	movs	r3, #0
 800f038:	6363      	str	r3, [r4, #52]	@ 0x34
 800f03a:	e00d      	b.n	800f058 <__sflush_r+0xac>
 800f03c:	2301      	movs	r3, #1
 800f03e:	4628      	mov	r0, r5
 800f040:	47b0      	blx	r6
 800f042:	4602      	mov	r2, r0
 800f044:	1c50      	adds	r0, r2, #1
 800f046:	d1c9      	bne.n	800efdc <__sflush_r+0x30>
 800f048:	682b      	ldr	r3, [r5, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d0c6      	beq.n	800efdc <__sflush_r+0x30>
 800f04e:	2b1d      	cmp	r3, #29
 800f050:	d001      	beq.n	800f056 <__sflush_r+0xaa>
 800f052:	2b16      	cmp	r3, #22
 800f054:	d11d      	bne.n	800f092 <__sflush_r+0xe6>
 800f056:	602f      	str	r7, [r5, #0]
 800f058:	2000      	movs	r0, #0
 800f05a:	e021      	b.n	800f0a0 <__sflush_r+0xf4>
 800f05c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f060:	b21b      	sxth	r3, r3
 800f062:	e01a      	b.n	800f09a <__sflush_r+0xee>
 800f064:	690f      	ldr	r7, [r1, #16]
 800f066:	2f00      	cmp	r7, #0
 800f068:	d0f6      	beq.n	800f058 <__sflush_r+0xac>
 800f06a:	0793      	lsls	r3, r2, #30
 800f06c:	bf18      	it	ne
 800f06e:	2300      	movne	r3, #0
 800f070:	680e      	ldr	r6, [r1, #0]
 800f072:	bf08      	it	eq
 800f074:	694b      	ldreq	r3, [r1, #20]
 800f076:	1bf6      	subs	r6, r6, r7
 800f078:	600f      	str	r7, [r1, #0]
 800f07a:	608b      	str	r3, [r1, #8]
 800f07c:	2e00      	cmp	r6, #0
 800f07e:	ddeb      	ble.n	800f058 <__sflush_r+0xac>
 800f080:	4633      	mov	r3, r6
 800f082:	463a      	mov	r2, r7
 800f084:	4628      	mov	r0, r5
 800f086:	6a21      	ldr	r1, [r4, #32]
 800f088:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800f08c:	47e0      	blx	ip
 800f08e:	2800      	cmp	r0, #0
 800f090:	dc07      	bgt.n	800f0a2 <__sflush_r+0xf6>
 800f092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f09a:	f04f 30ff 	mov.w	r0, #4294967295
 800f09e:	81a3      	strh	r3, [r4, #12]
 800f0a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0a2:	4407      	add	r7, r0
 800f0a4:	1a36      	subs	r6, r6, r0
 800f0a6:	e7e9      	b.n	800f07c <__sflush_r+0xd0>
 800f0a8:	20400001 	.word	0x20400001

0800f0ac <_fflush_r>:
 800f0ac:	b538      	push	{r3, r4, r5, lr}
 800f0ae:	690b      	ldr	r3, [r1, #16]
 800f0b0:	4605      	mov	r5, r0
 800f0b2:	460c      	mov	r4, r1
 800f0b4:	b913      	cbnz	r3, 800f0bc <_fflush_r+0x10>
 800f0b6:	2500      	movs	r5, #0
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	bd38      	pop	{r3, r4, r5, pc}
 800f0bc:	b118      	cbz	r0, 800f0c6 <_fflush_r+0x1a>
 800f0be:	6a03      	ldr	r3, [r0, #32]
 800f0c0:	b90b      	cbnz	r3, 800f0c6 <_fflush_r+0x1a>
 800f0c2:	f7fd f837 	bl	800c134 <__sinit>
 800f0c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d0f3      	beq.n	800f0b6 <_fflush_r+0xa>
 800f0ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f0d0:	07d0      	lsls	r0, r2, #31
 800f0d2:	d404      	bmi.n	800f0de <_fflush_r+0x32>
 800f0d4:	0599      	lsls	r1, r3, #22
 800f0d6:	d402      	bmi.n	800f0de <_fflush_r+0x32>
 800f0d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f0da:	f7fd fa36 	bl	800c54a <__retarget_lock_acquire_recursive>
 800f0de:	4628      	mov	r0, r5
 800f0e0:	4621      	mov	r1, r4
 800f0e2:	f7ff ff63 	bl	800efac <__sflush_r>
 800f0e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f0e8:	4605      	mov	r5, r0
 800f0ea:	07da      	lsls	r2, r3, #31
 800f0ec:	d4e4      	bmi.n	800f0b8 <_fflush_r+0xc>
 800f0ee:	89a3      	ldrh	r3, [r4, #12]
 800f0f0:	059b      	lsls	r3, r3, #22
 800f0f2:	d4e1      	bmi.n	800f0b8 <_fflush_r+0xc>
 800f0f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f0f6:	f7fd fa29 	bl	800c54c <__retarget_lock_release_recursive>
 800f0fa:	e7dd      	b.n	800f0b8 <_fflush_r+0xc>

0800f0fc <__swhatbuf_r>:
 800f0fc:	b570      	push	{r4, r5, r6, lr}
 800f0fe:	460c      	mov	r4, r1
 800f100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f104:	4615      	mov	r5, r2
 800f106:	2900      	cmp	r1, #0
 800f108:	461e      	mov	r6, r3
 800f10a:	b096      	sub	sp, #88	@ 0x58
 800f10c:	da0c      	bge.n	800f128 <__swhatbuf_r+0x2c>
 800f10e:	89a3      	ldrh	r3, [r4, #12]
 800f110:	2100      	movs	r1, #0
 800f112:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f116:	bf14      	ite	ne
 800f118:	2340      	movne	r3, #64	@ 0x40
 800f11a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f11e:	2000      	movs	r0, #0
 800f120:	6031      	str	r1, [r6, #0]
 800f122:	602b      	str	r3, [r5, #0]
 800f124:	b016      	add	sp, #88	@ 0x58
 800f126:	bd70      	pop	{r4, r5, r6, pc}
 800f128:	466a      	mov	r2, sp
 800f12a:	f000 f875 	bl	800f218 <_fstat_r>
 800f12e:	2800      	cmp	r0, #0
 800f130:	dbed      	blt.n	800f10e <__swhatbuf_r+0x12>
 800f132:	9901      	ldr	r1, [sp, #4]
 800f134:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f138:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f13c:	4259      	negs	r1, r3
 800f13e:	4159      	adcs	r1, r3
 800f140:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f144:	e7eb      	b.n	800f11e <__swhatbuf_r+0x22>

0800f146 <__smakebuf_r>:
 800f146:	898b      	ldrh	r3, [r1, #12]
 800f148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f14a:	079d      	lsls	r5, r3, #30
 800f14c:	4606      	mov	r6, r0
 800f14e:	460c      	mov	r4, r1
 800f150:	d507      	bpl.n	800f162 <__smakebuf_r+0x1c>
 800f152:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f156:	6023      	str	r3, [r4, #0]
 800f158:	6123      	str	r3, [r4, #16]
 800f15a:	2301      	movs	r3, #1
 800f15c:	6163      	str	r3, [r4, #20]
 800f15e:	b003      	add	sp, #12
 800f160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f162:	466a      	mov	r2, sp
 800f164:	ab01      	add	r3, sp, #4
 800f166:	f7ff ffc9 	bl	800f0fc <__swhatbuf_r>
 800f16a:	9f00      	ldr	r7, [sp, #0]
 800f16c:	4605      	mov	r5, r0
 800f16e:	4639      	mov	r1, r7
 800f170:	4630      	mov	r0, r6
 800f172:	f7fe f8db 	bl	800d32c <_malloc_r>
 800f176:	b948      	cbnz	r0, 800f18c <__smakebuf_r+0x46>
 800f178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f17c:	059a      	lsls	r2, r3, #22
 800f17e:	d4ee      	bmi.n	800f15e <__smakebuf_r+0x18>
 800f180:	f023 0303 	bic.w	r3, r3, #3
 800f184:	f043 0302 	orr.w	r3, r3, #2
 800f188:	81a3      	strh	r3, [r4, #12]
 800f18a:	e7e2      	b.n	800f152 <__smakebuf_r+0xc>
 800f18c:	89a3      	ldrh	r3, [r4, #12]
 800f18e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f196:	81a3      	strh	r3, [r4, #12]
 800f198:	9b01      	ldr	r3, [sp, #4]
 800f19a:	6020      	str	r0, [r4, #0]
 800f19c:	b15b      	cbz	r3, 800f1b6 <__smakebuf_r+0x70>
 800f19e:	4630      	mov	r0, r6
 800f1a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1a4:	f000 f84a 	bl	800f23c <_isatty_r>
 800f1a8:	b128      	cbz	r0, 800f1b6 <__smakebuf_r+0x70>
 800f1aa:	89a3      	ldrh	r3, [r4, #12]
 800f1ac:	f023 0303 	bic.w	r3, r3, #3
 800f1b0:	f043 0301 	orr.w	r3, r3, #1
 800f1b4:	81a3      	strh	r3, [r4, #12]
 800f1b6:	89a3      	ldrh	r3, [r4, #12]
 800f1b8:	431d      	orrs	r5, r3
 800f1ba:	81a5      	strh	r5, [r4, #12]
 800f1bc:	e7cf      	b.n	800f15e <__smakebuf_r+0x18>

0800f1be <memmove>:
 800f1be:	4288      	cmp	r0, r1
 800f1c0:	b510      	push	{r4, lr}
 800f1c2:	eb01 0402 	add.w	r4, r1, r2
 800f1c6:	d902      	bls.n	800f1ce <memmove+0x10>
 800f1c8:	4284      	cmp	r4, r0
 800f1ca:	4623      	mov	r3, r4
 800f1cc:	d807      	bhi.n	800f1de <memmove+0x20>
 800f1ce:	1e43      	subs	r3, r0, #1
 800f1d0:	42a1      	cmp	r1, r4
 800f1d2:	d008      	beq.n	800f1e6 <memmove+0x28>
 800f1d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f1dc:	e7f8      	b.n	800f1d0 <memmove+0x12>
 800f1de:	4601      	mov	r1, r0
 800f1e0:	4402      	add	r2, r0
 800f1e2:	428a      	cmp	r2, r1
 800f1e4:	d100      	bne.n	800f1e8 <memmove+0x2a>
 800f1e6:	bd10      	pop	{r4, pc}
 800f1e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f1ec:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f1f0:	e7f7      	b.n	800f1e2 <memmove+0x24>

0800f1f2 <strncmp>:
 800f1f2:	b510      	push	{r4, lr}
 800f1f4:	b16a      	cbz	r2, 800f212 <strncmp+0x20>
 800f1f6:	3901      	subs	r1, #1
 800f1f8:	1884      	adds	r4, r0, r2
 800f1fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f202:	429a      	cmp	r2, r3
 800f204:	d103      	bne.n	800f20e <strncmp+0x1c>
 800f206:	42a0      	cmp	r0, r4
 800f208:	d001      	beq.n	800f20e <strncmp+0x1c>
 800f20a:	2a00      	cmp	r2, #0
 800f20c:	d1f5      	bne.n	800f1fa <strncmp+0x8>
 800f20e:	1ad0      	subs	r0, r2, r3
 800f210:	bd10      	pop	{r4, pc}
 800f212:	4610      	mov	r0, r2
 800f214:	e7fc      	b.n	800f210 <strncmp+0x1e>
	...

0800f218 <_fstat_r>:
 800f218:	b538      	push	{r3, r4, r5, lr}
 800f21a:	2300      	movs	r3, #0
 800f21c:	4d06      	ldr	r5, [pc, #24]	@ (800f238 <_fstat_r+0x20>)
 800f21e:	4604      	mov	r4, r0
 800f220:	4608      	mov	r0, r1
 800f222:	4611      	mov	r1, r2
 800f224:	602b      	str	r3, [r5, #0]
 800f226:	f7f7 fec6 	bl	8006fb6 <_fstat>
 800f22a:	1c43      	adds	r3, r0, #1
 800f22c:	d102      	bne.n	800f234 <_fstat_r+0x1c>
 800f22e:	682b      	ldr	r3, [r5, #0]
 800f230:	b103      	cbz	r3, 800f234 <_fstat_r+0x1c>
 800f232:	6023      	str	r3, [r4, #0]
 800f234:	bd38      	pop	{r3, r4, r5, pc}
 800f236:	bf00      	nop
 800f238:	2000ba20 	.word	0x2000ba20

0800f23c <_isatty_r>:
 800f23c:	b538      	push	{r3, r4, r5, lr}
 800f23e:	2300      	movs	r3, #0
 800f240:	4d05      	ldr	r5, [pc, #20]	@ (800f258 <_isatty_r+0x1c>)
 800f242:	4604      	mov	r4, r0
 800f244:	4608      	mov	r0, r1
 800f246:	602b      	str	r3, [r5, #0]
 800f248:	f7f7 feba 	bl	8006fc0 <_isatty>
 800f24c:	1c43      	adds	r3, r0, #1
 800f24e:	d102      	bne.n	800f256 <_isatty_r+0x1a>
 800f250:	682b      	ldr	r3, [r5, #0]
 800f252:	b103      	cbz	r3, 800f256 <_isatty_r+0x1a>
 800f254:	6023      	str	r3, [r4, #0]
 800f256:	bd38      	pop	{r3, r4, r5, pc}
 800f258:	2000ba20 	.word	0x2000ba20

0800f25c <_sbrk_r>:
 800f25c:	b538      	push	{r3, r4, r5, lr}
 800f25e:	2300      	movs	r3, #0
 800f260:	4d05      	ldr	r5, [pc, #20]	@ (800f278 <_sbrk_r+0x1c>)
 800f262:	4604      	mov	r4, r0
 800f264:	4608      	mov	r0, r1
 800f266:	602b      	str	r3, [r5, #0]
 800f268:	f7f7 feae 	bl	8006fc8 <_sbrk>
 800f26c:	1c43      	adds	r3, r0, #1
 800f26e:	d102      	bne.n	800f276 <_sbrk_r+0x1a>
 800f270:	682b      	ldr	r3, [r5, #0]
 800f272:	b103      	cbz	r3, 800f276 <_sbrk_r+0x1a>
 800f274:	6023      	str	r3, [r4, #0]
 800f276:	bd38      	pop	{r3, r4, r5, pc}
 800f278:	2000ba20 	.word	0x2000ba20

0800f27c <nan>:
 800f27c:	2000      	movs	r0, #0
 800f27e:	4901      	ldr	r1, [pc, #4]	@ (800f284 <nan+0x8>)
 800f280:	4770      	bx	lr
 800f282:	bf00      	nop
 800f284:	7ff80000 	.word	0x7ff80000

0800f288 <__assert_func>:
 800f288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f28a:	4614      	mov	r4, r2
 800f28c:	461a      	mov	r2, r3
 800f28e:	4b09      	ldr	r3, [pc, #36]	@ (800f2b4 <__assert_func+0x2c>)
 800f290:	4605      	mov	r5, r0
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	68d8      	ldr	r0, [r3, #12]
 800f296:	b14c      	cbz	r4, 800f2ac <__assert_func+0x24>
 800f298:	4b07      	ldr	r3, [pc, #28]	@ (800f2b8 <__assert_func+0x30>)
 800f29a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f29e:	9100      	str	r1, [sp, #0]
 800f2a0:	462b      	mov	r3, r5
 800f2a2:	4906      	ldr	r1, [pc, #24]	@ (800f2bc <__assert_func+0x34>)
 800f2a4:	f000 fba8 	bl	800f9f8 <fiprintf>
 800f2a8:	f000 fbb8 	bl	800fa1c <abort>
 800f2ac:	4b04      	ldr	r3, [pc, #16]	@ (800f2c0 <__assert_func+0x38>)
 800f2ae:	461c      	mov	r4, r3
 800f2b0:	e7f3      	b.n	800f29a <__assert_func+0x12>
 800f2b2:	bf00      	nop
 800f2b4:	200080ac 	.word	0x200080ac
 800f2b8:	080116c2 	.word	0x080116c2
 800f2bc:	080116cf 	.word	0x080116cf
 800f2c0:	080116fd 	.word	0x080116fd

0800f2c4 <_calloc_r>:
 800f2c4:	b570      	push	{r4, r5, r6, lr}
 800f2c6:	fba1 5402 	umull	r5, r4, r1, r2
 800f2ca:	b934      	cbnz	r4, 800f2da <_calloc_r+0x16>
 800f2cc:	4629      	mov	r1, r5
 800f2ce:	f7fe f82d 	bl	800d32c <_malloc_r>
 800f2d2:	4606      	mov	r6, r0
 800f2d4:	b928      	cbnz	r0, 800f2e2 <_calloc_r+0x1e>
 800f2d6:	4630      	mov	r0, r6
 800f2d8:	bd70      	pop	{r4, r5, r6, pc}
 800f2da:	220c      	movs	r2, #12
 800f2dc:	2600      	movs	r6, #0
 800f2de:	6002      	str	r2, [r0, #0]
 800f2e0:	e7f9      	b.n	800f2d6 <_calloc_r+0x12>
 800f2e2:	462a      	mov	r2, r5
 800f2e4:	4621      	mov	r1, r4
 800f2e6:	f7fd f8b3 	bl	800c450 <memset>
 800f2ea:	e7f4      	b.n	800f2d6 <_calloc_r+0x12>

0800f2ec <rshift>:
 800f2ec:	6903      	ldr	r3, [r0, #16]
 800f2ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f2f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f2f6:	f100 0414 	add.w	r4, r0, #20
 800f2fa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f2fe:	dd46      	ble.n	800f38e <rshift+0xa2>
 800f300:	f011 011f 	ands.w	r1, r1, #31
 800f304:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f308:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f30c:	d10c      	bne.n	800f328 <rshift+0x3c>
 800f30e:	4629      	mov	r1, r5
 800f310:	f100 0710 	add.w	r7, r0, #16
 800f314:	42b1      	cmp	r1, r6
 800f316:	d335      	bcc.n	800f384 <rshift+0x98>
 800f318:	1a9b      	subs	r3, r3, r2
 800f31a:	009b      	lsls	r3, r3, #2
 800f31c:	1eea      	subs	r2, r5, #3
 800f31e:	4296      	cmp	r6, r2
 800f320:	bf38      	it	cc
 800f322:	2300      	movcc	r3, #0
 800f324:	4423      	add	r3, r4
 800f326:	e015      	b.n	800f354 <rshift+0x68>
 800f328:	46a1      	mov	r9, r4
 800f32a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f32e:	f1c1 0820 	rsb	r8, r1, #32
 800f332:	40cf      	lsrs	r7, r1
 800f334:	f105 0e04 	add.w	lr, r5, #4
 800f338:	4576      	cmp	r6, lr
 800f33a:	46f4      	mov	ip, lr
 800f33c:	d816      	bhi.n	800f36c <rshift+0x80>
 800f33e:	1a9a      	subs	r2, r3, r2
 800f340:	0092      	lsls	r2, r2, #2
 800f342:	3a04      	subs	r2, #4
 800f344:	3501      	adds	r5, #1
 800f346:	42ae      	cmp	r6, r5
 800f348:	bf38      	it	cc
 800f34a:	2200      	movcc	r2, #0
 800f34c:	18a3      	adds	r3, r4, r2
 800f34e:	50a7      	str	r7, [r4, r2]
 800f350:	b107      	cbz	r7, 800f354 <rshift+0x68>
 800f352:	3304      	adds	r3, #4
 800f354:	42a3      	cmp	r3, r4
 800f356:	eba3 0204 	sub.w	r2, r3, r4
 800f35a:	bf08      	it	eq
 800f35c:	2300      	moveq	r3, #0
 800f35e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f362:	6102      	str	r2, [r0, #16]
 800f364:	bf08      	it	eq
 800f366:	6143      	streq	r3, [r0, #20]
 800f368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f36c:	f8dc c000 	ldr.w	ip, [ip]
 800f370:	fa0c fc08 	lsl.w	ip, ip, r8
 800f374:	ea4c 0707 	orr.w	r7, ip, r7
 800f378:	f849 7b04 	str.w	r7, [r9], #4
 800f37c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f380:	40cf      	lsrs	r7, r1
 800f382:	e7d9      	b.n	800f338 <rshift+0x4c>
 800f384:	f851 cb04 	ldr.w	ip, [r1], #4
 800f388:	f847 cf04 	str.w	ip, [r7, #4]!
 800f38c:	e7c2      	b.n	800f314 <rshift+0x28>
 800f38e:	4623      	mov	r3, r4
 800f390:	e7e0      	b.n	800f354 <rshift+0x68>

0800f392 <__hexdig_fun>:
 800f392:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f396:	2b09      	cmp	r3, #9
 800f398:	d802      	bhi.n	800f3a0 <__hexdig_fun+0xe>
 800f39a:	3820      	subs	r0, #32
 800f39c:	b2c0      	uxtb	r0, r0
 800f39e:	4770      	bx	lr
 800f3a0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f3a4:	2b05      	cmp	r3, #5
 800f3a6:	d801      	bhi.n	800f3ac <__hexdig_fun+0x1a>
 800f3a8:	3847      	subs	r0, #71	@ 0x47
 800f3aa:	e7f7      	b.n	800f39c <__hexdig_fun+0xa>
 800f3ac:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f3b0:	2b05      	cmp	r3, #5
 800f3b2:	d801      	bhi.n	800f3b8 <__hexdig_fun+0x26>
 800f3b4:	3827      	subs	r0, #39	@ 0x27
 800f3b6:	e7f1      	b.n	800f39c <__hexdig_fun+0xa>
 800f3b8:	2000      	movs	r0, #0
 800f3ba:	4770      	bx	lr

0800f3bc <__gethex>:
 800f3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c0:	468a      	mov	sl, r1
 800f3c2:	4690      	mov	r8, r2
 800f3c4:	b085      	sub	sp, #20
 800f3c6:	9302      	str	r3, [sp, #8]
 800f3c8:	680b      	ldr	r3, [r1, #0]
 800f3ca:	9001      	str	r0, [sp, #4]
 800f3cc:	1c9c      	adds	r4, r3, #2
 800f3ce:	46a1      	mov	r9, r4
 800f3d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f3d4:	2830      	cmp	r0, #48	@ 0x30
 800f3d6:	d0fa      	beq.n	800f3ce <__gethex+0x12>
 800f3d8:	eba9 0303 	sub.w	r3, r9, r3
 800f3dc:	f1a3 0b02 	sub.w	fp, r3, #2
 800f3e0:	f7ff ffd7 	bl	800f392 <__hexdig_fun>
 800f3e4:	4605      	mov	r5, r0
 800f3e6:	2800      	cmp	r0, #0
 800f3e8:	d168      	bne.n	800f4bc <__gethex+0x100>
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	4648      	mov	r0, r9
 800f3ee:	499f      	ldr	r1, [pc, #636]	@ (800f66c <__gethex+0x2b0>)
 800f3f0:	f7ff feff 	bl	800f1f2 <strncmp>
 800f3f4:	4607      	mov	r7, r0
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	d167      	bne.n	800f4ca <__gethex+0x10e>
 800f3fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f3fe:	4626      	mov	r6, r4
 800f400:	f7ff ffc7 	bl	800f392 <__hexdig_fun>
 800f404:	2800      	cmp	r0, #0
 800f406:	d062      	beq.n	800f4ce <__gethex+0x112>
 800f408:	4623      	mov	r3, r4
 800f40a:	7818      	ldrb	r0, [r3, #0]
 800f40c:	4699      	mov	r9, r3
 800f40e:	2830      	cmp	r0, #48	@ 0x30
 800f410:	f103 0301 	add.w	r3, r3, #1
 800f414:	d0f9      	beq.n	800f40a <__gethex+0x4e>
 800f416:	f7ff ffbc 	bl	800f392 <__hexdig_fun>
 800f41a:	fab0 f580 	clz	r5, r0
 800f41e:	f04f 0b01 	mov.w	fp, #1
 800f422:	096d      	lsrs	r5, r5, #5
 800f424:	464a      	mov	r2, r9
 800f426:	4616      	mov	r6, r2
 800f428:	7830      	ldrb	r0, [r6, #0]
 800f42a:	3201      	adds	r2, #1
 800f42c:	f7ff ffb1 	bl	800f392 <__hexdig_fun>
 800f430:	2800      	cmp	r0, #0
 800f432:	d1f8      	bne.n	800f426 <__gethex+0x6a>
 800f434:	2201      	movs	r2, #1
 800f436:	4630      	mov	r0, r6
 800f438:	498c      	ldr	r1, [pc, #560]	@ (800f66c <__gethex+0x2b0>)
 800f43a:	f7ff feda 	bl	800f1f2 <strncmp>
 800f43e:	2800      	cmp	r0, #0
 800f440:	d13f      	bne.n	800f4c2 <__gethex+0x106>
 800f442:	b944      	cbnz	r4, 800f456 <__gethex+0x9a>
 800f444:	1c74      	adds	r4, r6, #1
 800f446:	4622      	mov	r2, r4
 800f448:	4616      	mov	r6, r2
 800f44a:	7830      	ldrb	r0, [r6, #0]
 800f44c:	3201      	adds	r2, #1
 800f44e:	f7ff ffa0 	bl	800f392 <__hexdig_fun>
 800f452:	2800      	cmp	r0, #0
 800f454:	d1f8      	bne.n	800f448 <__gethex+0x8c>
 800f456:	1ba4      	subs	r4, r4, r6
 800f458:	00a7      	lsls	r7, r4, #2
 800f45a:	7833      	ldrb	r3, [r6, #0]
 800f45c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f460:	2b50      	cmp	r3, #80	@ 0x50
 800f462:	d13e      	bne.n	800f4e2 <__gethex+0x126>
 800f464:	7873      	ldrb	r3, [r6, #1]
 800f466:	2b2b      	cmp	r3, #43	@ 0x2b
 800f468:	d033      	beq.n	800f4d2 <__gethex+0x116>
 800f46a:	2b2d      	cmp	r3, #45	@ 0x2d
 800f46c:	d034      	beq.n	800f4d8 <__gethex+0x11c>
 800f46e:	2400      	movs	r4, #0
 800f470:	1c71      	adds	r1, r6, #1
 800f472:	7808      	ldrb	r0, [r1, #0]
 800f474:	f7ff ff8d 	bl	800f392 <__hexdig_fun>
 800f478:	1e43      	subs	r3, r0, #1
 800f47a:	b2db      	uxtb	r3, r3
 800f47c:	2b18      	cmp	r3, #24
 800f47e:	d830      	bhi.n	800f4e2 <__gethex+0x126>
 800f480:	f1a0 0210 	sub.w	r2, r0, #16
 800f484:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f488:	f7ff ff83 	bl	800f392 <__hexdig_fun>
 800f48c:	f100 3cff 	add.w	ip, r0, #4294967295
 800f490:	fa5f fc8c 	uxtb.w	ip, ip
 800f494:	f1bc 0f18 	cmp.w	ip, #24
 800f498:	f04f 030a 	mov.w	r3, #10
 800f49c:	d91e      	bls.n	800f4dc <__gethex+0x120>
 800f49e:	b104      	cbz	r4, 800f4a2 <__gethex+0xe6>
 800f4a0:	4252      	negs	r2, r2
 800f4a2:	4417      	add	r7, r2
 800f4a4:	f8ca 1000 	str.w	r1, [sl]
 800f4a8:	b1ed      	cbz	r5, 800f4e6 <__gethex+0x12a>
 800f4aa:	f1bb 0f00 	cmp.w	fp, #0
 800f4ae:	bf0c      	ite	eq
 800f4b0:	2506      	moveq	r5, #6
 800f4b2:	2500      	movne	r5, #0
 800f4b4:	4628      	mov	r0, r5
 800f4b6:	b005      	add	sp, #20
 800f4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4bc:	2500      	movs	r5, #0
 800f4be:	462c      	mov	r4, r5
 800f4c0:	e7b0      	b.n	800f424 <__gethex+0x68>
 800f4c2:	2c00      	cmp	r4, #0
 800f4c4:	d1c7      	bne.n	800f456 <__gethex+0x9a>
 800f4c6:	4627      	mov	r7, r4
 800f4c8:	e7c7      	b.n	800f45a <__gethex+0x9e>
 800f4ca:	464e      	mov	r6, r9
 800f4cc:	462f      	mov	r7, r5
 800f4ce:	2501      	movs	r5, #1
 800f4d0:	e7c3      	b.n	800f45a <__gethex+0x9e>
 800f4d2:	2400      	movs	r4, #0
 800f4d4:	1cb1      	adds	r1, r6, #2
 800f4d6:	e7cc      	b.n	800f472 <__gethex+0xb6>
 800f4d8:	2401      	movs	r4, #1
 800f4da:	e7fb      	b.n	800f4d4 <__gethex+0x118>
 800f4dc:	fb03 0002 	mla	r0, r3, r2, r0
 800f4e0:	e7ce      	b.n	800f480 <__gethex+0xc4>
 800f4e2:	4631      	mov	r1, r6
 800f4e4:	e7de      	b.n	800f4a4 <__gethex+0xe8>
 800f4e6:	4629      	mov	r1, r5
 800f4e8:	eba6 0309 	sub.w	r3, r6, r9
 800f4ec:	3b01      	subs	r3, #1
 800f4ee:	2b07      	cmp	r3, #7
 800f4f0:	dc0a      	bgt.n	800f508 <__gethex+0x14c>
 800f4f2:	9801      	ldr	r0, [sp, #4]
 800f4f4:	f7fd ffa6 	bl	800d444 <_Balloc>
 800f4f8:	4604      	mov	r4, r0
 800f4fa:	b940      	cbnz	r0, 800f50e <__gethex+0x152>
 800f4fc:	4602      	mov	r2, r0
 800f4fe:	21e4      	movs	r1, #228	@ 0xe4
 800f500:	4b5b      	ldr	r3, [pc, #364]	@ (800f670 <__gethex+0x2b4>)
 800f502:	485c      	ldr	r0, [pc, #368]	@ (800f674 <__gethex+0x2b8>)
 800f504:	f7ff fec0 	bl	800f288 <__assert_func>
 800f508:	3101      	adds	r1, #1
 800f50a:	105b      	asrs	r3, r3, #1
 800f50c:	e7ef      	b.n	800f4ee <__gethex+0x132>
 800f50e:	2300      	movs	r3, #0
 800f510:	f100 0a14 	add.w	sl, r0, #20
 800f514:	4655      	mov	r5, sl
 800f516:	469b      	mov	fp, r3
 800f518:	45b1      	cmp	r9, r6
 800f51a:	d337      	bcc.n	800f58c <__gethex+0x1d0>
 800f51c:	f845 bb04 	str.w	fp, [r5], #4
 800f520:	eba5 050a 	sub.w	r5, r5, sl
 800f524:	10ad      	asrs	r5, r5, #2
 800f526:	6125      	str	r5, [r4, #16]
 800f528:	4658      	mov	r0, fp
 800f52a:	f7fe f87d 	bl	800d628 <__hi0bits>
 800f52e:	016d      	lsls	r5, r5, #5
 800f530:	f8d8 6000 	ldr.w	r6, [r8]
 800f534:	1a2d      	subs	r5, r5, r0
 800f536:	42b5      	cmp	r5, r6
 800f538:	dd54      	ble.n	800f5e4 <__gethex+0x228>
 800f53a:	1bad      	subs	r5, r5, r6
 800f53c:	4629      	mov	r1, r5
 800f53e:	4620      	mov	r0, r4
 800f540:	f7fe fbff 	bl	800dd42 <__any_on>
 800f544:	4681      	mov	r9, r0
 800f546:	b178      	cbz	r0, 800f568 <__gethex+0x1ac>
 800f548:	f04f 0901 	mov.w	r9, #1
 800f54c:	1e6b      	subs	r3, r5, #1
 800f54e:	1159      	asrs	r1, r3, #5
 800f550:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f554:	f003 021f 	and.w	r2, r3, #31
 800f558:	fa09 f202 	lsl.w	r2, r9, r2
 800f55c:	420a      	tst	r2, r1
 800f55e:	d003      	beq.n	800f568 <__gethex+0x1ac>
 800f560:	454b      	cmp	r3, r9
 800f562:	dc36      	bgt.n	800f5d2 <__gethex+0x216>
 800f564:	f04f 0902 	mov.w	r9, #2
 800f568:	4629      	mov	r1, r5
 800f56a:	4620      	mov	r0, r4
 800f56c:	f7ff febe 	bl	800f2ec <rshift>
 800f570:	442f      	add	r7, r5
 800f572:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f576:	42bb      	cmp	r3, r7
 800f578:	da42      	bge.n	800f600 <__gethex+0x244>
 800f57a:	4621      	mov	r1, r4
 800f57c:	9801      	ldr	r0, [sp, #4]
 800f57e:	f7fd ffa1 	bl	800d4c4 <_Bfree>
 800f582:	2300      	movs	r3, #0
 800f584:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f586:	25a3      	movs	r5, #163	@ 0xa3
 800f588:	6013      	str	r3, [r2, #0]
 800f58a:	e793      	b.n	800f4b4 <__gethex+0xf8>
 800f58c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f590:	2a2e      	cmp	r2, #46	@ 0x2e
 800f592:	d012      	beq.n	800f5ba <__gethex+0x1fe>
 800f594:	2b20      	cmp	r3, #32
 800f596:	d104      	bne.n	800f5a2 <__gethex+0x1e6>
 800f598:	f845 bb04 	str.w	fp, [r5], #4
 800f59c:	f04f 0b00 	mov.w	fp, #0
 800f5a0:	465b      	mov	r3, fp
 800f5a2:	7830      	ldrb	r0, [r6, #0]
 800f5a4:	9303      	str	r3, [sp, #12]
 800f5a6:	f7ff fef4 	bl	800f392 <__hexdig_fun>
 800f5aa:	9b03      	ldr	r3, [sp, #12]
 800f5ac:	f000 000f 	and.w	r0, r0, #15
 800f5b0:	4098      	lsls	r0, r3
 800f5b2:	ea4b 0b00 	orr.w	fp, fp, r0
 800f5b6:	3304      	adds	r3, #4
 800f5b8:	e7ae      	b.n	800f518 <__gethex+0x15c>
 800f5ba:	45b1      	cmp	r9, r6
 800f5bc:	d8ea      	bhi.n	800f594 <__gethex+0x1d8>
 800f5be:	2201      	movs	r2, #1
 800f5c0:	4630      	mov	r0, r6
 800f5c2:	492a      	ldr	r1, [pc, #168]	@ (800f66c <__gethex+0x2b0>)
 800f5c4:	9303      	str	r3, [sp, #12]
 800f5c6:	f7ff fe14 	bl	800f1f2 <strncmp>
 800f5ca:	9b03      	ldr	r3, [sp, #12]
 800f5cc:	2800      	cmp	r0, #0
 800f5ce:	d1e1      	bne.n	800f594 <__gethex+0x1d8>
 800f5d0:	e7a2      	b.n	800f518 <__gethex+0x15c>
 800f5d2:	4620      	mov	r0, r4
 800f5d4:	1ea9      	subs	r1, r5, #2
 800f5d6:	f7fe fbb4 	bl	800dd42 <__any_on>
 800f5da:	2800      	cmp	r0, #0
 800f5dc:	d0c2      	beq.n	800f564 <__gethex+0x1a8>
 800f5de:	f04f 0903 	mov.w	r9, #3
 800f5e2:	e7c1      	b.n	800f568 <__gethex+0x1ac>
 800f5e4:	da09      	bge.n	800f5fa <__gethex+0x23e>
 800f5e6:	1b75      	subs	r5, r6, r5
 800f5e8:	4621      	mov	r1, r4
 800f5ea:	462a      	mov	r2, r5
 800f5ec:	9801      	ldr	r0, [sp, #4]
 800f5ee:	f7fe f979 	bl	800d8e4 <__lshift>
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	1b7f      	subs	r7, r7, r5
 800f5f6:	f100 0a14 	add.w	sl, r0, #20
 800f5fa:	f04f 0900 	mov.w	r9, #0
 800f5fe:	e7b8      	b.n	800f572 <__gethex+0x1b6>
 800f600:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f604:	42bd      	cmp	r5, r7
 800f606:	dd6f      	ble.n	800f6e8 <__gethex+0x32c>
 800f608:	1bed      	subs	r5, r5, r7
 800f60a:	42ae      	cmp	r6, r5
 800f60c:	dc34      	bgt.n	800f678 <__gethex+0x2bc>
 800f60e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f612:	2b02      	cmp	r3, #2
 800f614:	d022      	beq.n	800f65c <__gethex+0x2a0>
 800f616:	2b03      	cmp	r3, #3
 800f618:	d024      	beq.n	800f664 <__gethex+0x2a8>
 800f61a:	2b01      	cmp	r3, #1
 800f61c:	d115      	bne.n	800f64a <__gethex+0x28e>
 800f61e:	42ae      	cmp	r6, r5
 800f620:	d113      	bne.n	800f64a <__gethex+0x28e>
 800f622:	2e01      	cmp	r6, #1
 800f624:	d10b      	bne.n	800f63e <__gethex+0x282>
 800f626:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f62a:	9a02      	ldr	r2, [sp, #8]
 800f62c:	2562      	movs	r5, #98	@ 0x62
 800f62e:	6013      	str	r3, [r2, #0]
 800f630:	2301      	movs	r3, #1
 800f632:	6123      	str	r3, [r4, #16]
 800f634:	f8ca 3000 	str.w	r3, [sl]
 800f638:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f63a:	601c      	str	r4, [r3, #0]
 800f63c:	e73a      	b.n	800f4b4 <__gethex+0xf8>
 800f63e:	4620      	mov	r0, r4
 800f640:	1e71      	subs	r1, r6, #1
 800f642:	f7fe fb7e 	bl	800dd42 <__any_on>
 800f646:	2800      	cmp	r0, #0
 800f648:	d1ed      	bne.n	800f626 <__gethex+0x26a>
 800f64a:	4621      	mov	r1, r4
 800f64c:	9801      	ldr	r0, [sp, #4]
 800f64e:	f7fd ff39 	bl	800d4c4 <_Bfree>
 800f652:	2300      	movs	r3, #0
 800f654:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f656:	2550      	movs	r5, #80	@ 0x50
 800f658:	6013      	str	r3, [r2, #0]
 800f65a:	e72b      	b.n	800f4b4 <__gethex+0xf8>
 800f65c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d1f3      	bne.n	800f64a <__gethex+0x28e>
 800f662:	e7e0      	b.n	800f626 <__gethex+0x26a>
 800f664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f666:	2b00      	cmp	r3, #0
 800f668:	d1dd      	bne.n	800f626 <__gethex+0x26a>
 800f66a:	e7ee      	b.n	800f64a <__gethex+0x28e>
 800f66c:	080116a7 	.word	0x080116a7
 800f670:	0801163d 	.word	0x0801163d
 800f674:	080116fe 	.word	0x080116fe
 800f678:	1e6f      	subs	r7, r5, #1
 800f67a:	f1b9 0f00 	cmp.w	r9, #0
 800f67e:	d130      	bne.n	800f6e2 <__gethex+0x326>
 800f680:	b127      	cbz	r7, 800f68c <__gethex+0x2d0>
 800f682:	4639      	mov	r1, r7
 800f684:	4620      	mov	r0, r4
 800f686:	f7fe fb5c 	bl	800dd42 <__any_on>
 800f68a:	4681      	mov	r9, r0
 800f68c:	2301      	movs	r3, #1
 800f68e:	4629      	mov	r1, r5
 800f690:	1b76      	subs	r6, r6, r5
 800f692:	2502      	movs	r5, #2
 800f694:	117a      	asrs	r2, r7, #5
 800f696:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f69a:	f007 071f 	and.w	r7, r7, #31
 800f69e:	40bb      	lsls	r3, r7
 800f6a0:	4213      	tst	r3, r2
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	bf18      	it	ne
 800f6a6:	f049 0902 	orrne.w	r9, r9, #2
 800f6aa:	f7ff fe1f 	bl	800f2ec <rshift>
 800f6ae:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f6b2:	f1b9 0f00 	cmp.w	r9, #0
 800f6b6:	d047      	beq.n	800f748 <__gethex+0x38c>
 800f6b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f6bc:	2b02      	cmp	r3, #2
 800f6be:	d015      	beq.n	800f6ec <__gethex+0x330>
 800f6c0:	2b03      	cmp	r3, #3
 800f6c2:	d017      	beq.n	800f6f4 <__gethex+0x338>
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d109      	bne.n	800f6dc <__gethex+0x320>
 800f6c8:	f019 0f02 	tst.w	r9, #2
 800f6cc:	d006      	beq.n	800f6dc <__gethex+0x320>
 800f6ce:	f8da 3000 	ldr.w	r3, [sl]
 800f6d2:	ea49 0903 	orr.w	r9, r9, r3
 800f6d6:	f019 0f01 	tst.w	r9, #1
 800f6da:	d10e      	bne.n	800f6fa <__gethex+0x33e>
 800f6dc:	f045 0510 	orr.w	r5, r5, #16
 800f6e0:	e032      	b.n	800f748 <__gethex+0x38c>
 800f6e2:	f04f 0901 	mov.w	r9, #1
 800f6e6:	e7d1      	b.n	800f68c <__gethex+0x2d0>
 800f6e8:	2501      	movs	r5, #1
 800f6ea:	e7e2      	b.n	800f6b2 <__gethex+0x2f6>
 800f6ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6ee:	f1c3 0301 	rsb	r3, r3, #1
 800f6f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f6f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d0f0      	beq.n	800f6dc <__gethex+0x320>
 800f6fa:	f04f 0c00 	mov.w	ip, #0
 800f6fe:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f702:	f104 0314 	add.w	r3, r4, #20
 800f706:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f70a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f70e:	4618      	mov	r0, r3
 800f710:	f853 2b04 	ldr.w	r2, [r3], #4
 800f714:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f718:	d01b      	beq.n	800f752 <__gethex+0x396>
 800f71a:	3201      	adds	r2, #1
 800f71c:	6002      	str	r2, [r0, #0]
 800f71e:	2d02      	cmp	r5, #2
 800f720:	f104 0314 	add.w	r3, r4, #20
 800f724:	d13c      	bne.n	800f7a0 <__gethex+0x3e4>
 800f726:	f8d8 2000 	ldr.w	r2, [r8]
 800f72a:	3a01      	subs	r2, #1
 800f72c:	42b2      	cmp	r2, r6
 800f72e:	d109      	bne.n	800f744 <__gethex+0x388>
 800f730:	2201      	movs	r2, #1
 800f732:	1171      	asrs	r1, r6, #5
 800f734:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f738:	f006 061f 	and.w	r6, r6, #31
 800f73c:	fa02 f606 	lsl.w	r6, r2, r6
 800f740:	421e      	tst	r6, r3
 800f742:	d13a      	bne.n	800f7ba <__gethex+0x3fe>
 800f744:	f045 0520 	orr.w	r5, r5, #32
 800f748:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f74a:	601c      	str	r4, [r3, #0]
 800f74c:	9b02      	ldr	r3, [sp, #8]
 800f74e:	601f      	str	r7, [r3, #0]
 800f750:	e6b0      	b.n	800f4b4 <__gethex+0xf8>
 800f752:	4299      	cmp	r1, r3
 800f754:	f843 cc04 	str.w	ip, [r3, #-4]
 800f758:	d8d9      	bhi.n	800f70e <__gethex+0x352>
 800f75a:	68a3      	ldr	r3, [r4, #8]
 800f75c:	459b      	cmp	fp, r3
 800f75e:	db17      	blt.n	800f790 <__gethex+0x3d4>
 800f760:	6861      	ldr	r1, [r4, #4]
 800f762:	9801      	ldr	r0, [sp, #4]
 800f764:	3101      	adds	r1, #1
 800f766:	f7fd fe6d 	bl	800d444 <_Balloc>
 800f76a:	4681      	mov	r9, r0
 800f76c:	b918      	cbnz	r0, 800f776 <__gethex+0x3ba>
 800f76e:	4602      	mov	r2, r0
 800f770:	2184      	movs	r1, #132	@ 0x84
 800f772:	4b19      	ldr	r3, [pc, #100]	@ (800f7d8 <__gethex+0x41c>)
 800f774:	e6c5      	b.n	800f502 <__gethex+0x146>
 800f776:	6922      	ldr	r2, [r4, #16]
 800f778:	f104 010c 	add.w	r1, r4, #12
 800f77c:	3202      	adds	r2, #2
 800f77e:	0092      	lsls	r2, r2, #2
 800f780:	300c      	adds	r0, #12
 800f782:	f7fc fef2 	bl	800c56a <memcpy>
 800f786:	4621      	mov	r1, r4
 800f788:	9801      	ldr	r0, [sp, #4]
 800f78a:	f7fd fe9b 	bl	800d4c4 <_Bfree>
 800f78e:	464c      	mov	r4, r9
 800f790:	6923      	ldr	r3, [r4, #16]
 800f792:	1c5a      	adds	r2, r3, #1
 800f794:	6122      	str	r2, [r4, #16]
 800f796:	2201      	movs	r2, #1
 800f798:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f79c:	615a      	str	r2, [r3, #20]
 800f79e:	e7be      	b.n	800f71e <__gethex+0x362>
 800f7a0:	6922      	ldr	r2, [r4, #16]
 800f7a2:	455a      	cmp	r2, fp
 800f7a4:	dd0b      	ble.n	800f7be <__gethex+0x402>
 800f7a6:	2101      	movs	r1, #1
 800f7a8:	4620      	mov	r0, r4
 800f7aa:	f7ff fd9f 	bl	800f2ec <rshift>
 800f7ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f7b2:	3701      	adds	r7, #1
 800f7b4:	42bb      	cmp	r3, r7
 800f7b6:	f6ff aee0 	blt.w	800f57a <__gethex+0x1be>
 800f7ba:	2501      	movs	r5, #1
 800f7bc:	e7c2      	b.n	800f744 <__gethex+0x388>
 800f7be:	f016 061f 	ands.w	r6, r6, #31
 800f7c2:	d0fa      	beq.n	800f7ba <__gethex+0x3fe>
 800f7c4:	4453      	add	r3, sl
 800f7c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f7ca:	f7fd ff2d 	bl	800d628 <__hi0bits>
 800f7ce:	f1c6 0620 	rsb	r6, r6, #32
 800f7d2:	42b0      	cmp	r0, r6
 800f7d4:	dbe7      	blt.n	800f7a6 <__gethex+0x3ea>
 800f7d6:	e7f0      	b.n	800f7ba <__gethex+0x3fe>
 800f7d8:	0801163d 	.word	0x0801163d

0800f7dc <L_shift>:
 800f7dc:	f1c2 0208 	rsb	r2, r2, #8
 800f7e0:	0092      	lsls	r2, r2, #2
 800f7e2:	b570      	push	{r4, r5, r6, lr}
 800f7e4:	f1c2 0620 	rsb	r6, r2, #32
 800f7e8:	6843      	ldr	r3, [r0, #4]
 800f7ea:	6804      	ldr	r4, [r0, #0]
 800f7ec:	fa03 f506 	lsl.w	r5, r3, r6
 800f7f0:	432c      	orrs	r4, r5
 800f7f2:	40d3      	lsrs	r3, r2
 800f7f4:	6004      	str	r4, [r0, #0]
 800f7f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800f7fa:	4288      	cmp	r0, r1
 800f7fc:	d3f4      	bcc.n	800f7e8 <L_shift+0xc>
 800f7fe:	bd70      	pop	{r4, r5, r6, pc}

0800f800 <__match>:
 800f800:	b530      	push	{r4, r5, lr}
 800f802:	6803      	ldr	r3, [r0, #0]
 800f804:	3301      	adds	r3, #1
 800f806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f80a:	b914      	cbnz	r4, 800f812 <__match+0x12>
 800f80c:	6003      	str	r3, [r0, #0]
 800f80e:	2001      	movs	r0, #1
 800f810:	bd30      	pop	{r4, r5, pc}
 800f812:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f816:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f81a:	2d19      	cmp	r5, #25
 800f81c:	bf98      	it	ls
 800f81e:	3220      	addls	r2, #32
 800f820:	42a2      	cmp	r2, r4
 800f822:	d0f0      	beq.n	800f806 <__match+0x6>
 800f824:	2000      	movs	r0, #0
 800f826:	e7f3      	b.n	800f810 <__match+0x10>

0800f828 <__hexnan>:
 800f828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f82c:	2500      	movs	r5, #0
 800f82e:	680b      	ldr	r3, [r1, #0]
 800f830:	4682      	mov	sl, r0
 800f832:	115e      	asrs	r6, r3, #5
 800f834:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f838:	f013 031f 	ands.w	r3, r3, #31
 800f83c:	bf18      	it	ne
 800f83e:	3604      	addne	r6, #4
 800f840:	1f37      	subs	r7, r6, #4
 800f842:	4690      	mov	r8, r2
 800f844:	46b9      	mov	r9, r7
 800f846:	463c      	mov	r4, r7
 800f848:	46ab      	mov	fp, r5
 800f84a:	b087      	sub	sp, #28
 800f84c:	6801      	ldr	r1, [r0, #0]
 800f84e:	9301      	str	r3, [sp, #4]
 800f850:	f846 5c04 	str.w	r5, [r6, #-4]
 800f854:	9502      	str	r5, [sp, #8]
 800f856:	784a      	ldrb	r2, [r1, #1]
 800f858:	1c4b      	adds	r3, r1, #1
 800f85a:	9303      	str	r3, [sp, #12]
 800f85c:	b342      	cbz	r2, 800f8b0 <__hexnan+0x88>
 800f85e:	4610      	mov	r0, r2
 800f860:	9105      	str	r1, [sp, #20]
 800f862:	9204      	str	r2, [sp, #16]
 800f864:	f7ff fd95 	bl	800f392 <__hexdig_fun>
 800f868:	2800      	cmp	r0, #0
 800f86a:	d151      	bne.n	800f910 <__hexnan+0xe8>
 800f86c:	9a04      	ldr	r2, [sp, #16]
 800f86e:	9905      	ldr	r1, [sp, #20]
 800f870:	2a20      	cmp	r2, #32
 800f872:	d818      	bhi.n	800f8a6 <__hexnan+0x7e>
 800f874:	9b02      	ldr	r3, [sp, #8]
 800f876:	459b      	cmp	fp, r3
 800f878:	dd13      	ble.n	800f8a2 <__hexnan+0x7a>
 800f87a:	454c      	cmp	r4, r9
 800f87c:	d206      	bcs.n	800f88c <__hexnan+0x64>
 800f87e:	2d07      	cmp	r5, #7
 800f880:	dc04      	bgt.n	800f88c <__hexnan+0x64>
 800f882:	462a      	mov	r2, r5
 800f884:	4649      	mov	r1, r9
 800f886:	4620      	mov	r0, r4
 800f888:	f7ff ffa8 	bl	800f7dc <L_shift>
 800f88c:	4544      	cmp	r4, r8
 800f88e:	d952      	bls.n	800f936 <__hexnan+0x10e>
 800f890:	2300      	movs	r3, #0
 800f892:	f1a4 0904 	sub.w	r9, r4, #4
 800f896:	f844 3c04 	str.w	r3, [r4, #-4]
 800f89a:	461d      	mov	r5, r3
 800f89c:	464c      	mov	r4, r9
 800f89e:	f8cd b008 	str.w	fp, [sp, #8]
 800f8a2:	9903      	ldr	r1, [sp, #12]
 800f8a4:	e7d7      	b.n	800f856 <__hexnan+0x2e>
 800f8a6:	2a29      	cmp	r2, #41	@ 0x29
 800f8a8:	d157      	bne.n	800f95a <__hexnan+0x132>
 800f8aa:	3102      	adds	r1, #2
 800f8ac:	f8ca 1000 	str.w	r1, [sl]
 800f8b0:	f1bb 0f00 	cmp.w	fp, #0
 800f8b4:	d051      	beq.n	800f95a <__hexnan+0x132>
 800f8b6:	454c      	cmp	r4, r9
 800f8b8:	d206      	bcs.n	800f8c8 <__hexnan+0xa0>
 800f8ba:	2d07      	cmp	r5, #7
 800f8bc:	dc04      	bgt.n	800f8c8 <__hexnan+0xa0>
 800f8be:	462a      	mov	r2, r5
 800f8c0:	4649      	mov	r1, r9
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	f7ff ff8a 	bl	800f7dc <L_shift>
 800f8c8:	4544      	cmp	r4, r8
 800f8ca:	d936      	bls.n	800f93a <__hexnan+0x112>
 800f8cc:	4623      	mov	r3, r4
 800f8ce:	f1a8 0204 	sub.w	r2, r8, #4
 800f8d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800f8d6:	429f      	cmp	r7, r3
 800f8d8:	f842 1f04 	str.w	r1, [r2, #4]!
 800f8dc:	d2f9      	bcs.n	800f8d2 <__hexnan+0xaa>
 800f8de:	1b3b      	subs	r3, r7, r4
 800f8e0:	f023 0303 	bic.w	r3, r3, #3
 800f8e4:	3304      	adds	r3, #4
 800f8e6:	3401      	adds	r4, #1
 800f8e8:	3e03      	subs	r6, #3
 800f8ea:	42b4      	cmp	r4, r6
 800f8ec:	bf88      	it	hi
 800f8ee:	2304      	movhi	r3, #4
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	4443      	add	r3, r8
 800f8f4:	f843 2b04 	str.w	r2, [r3], #4
 800f8f8:	429f      	cmp	r7, r3
 800f8fa:	d2fb      	bcs.n	800f8f4 <__hexnan+0xcc>
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	b91b      	cbnz	r3, 800f908 <__hexnan+0xe0>
 800f900:	4547      	cmp	r7, r8
 800f902:	d128      	bne.n	800f956 <__hexnan+0x12e>
 800f904:	2301      	movs	r3, #1
 800f906:	603b      	str	r3, [r7, #0]
 800f908:	2005      	movs	r0, #5
 800f90a:	b007      	add	sp, #28
 800f90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f910:	3501      	adds	r5, #1
 800f912:	2d08      	cmp	r5, #8
 800f914:	f10b 0b01 	add.w	fp, fp, #1
 800f918:	dd06      	ble.n	800f928 <__hexnan+0x100>
 800f91a:	4544      	cmp	r4, r8
 800f91c:	d9c1      	bls.n	800f8a2 <__hexnan+0x7a>
 800f91e:	2300      	movs	r3, #0
 800f920:	2501      	movs	r5, #1
 800f922:	f844 3c04 	str.w	r3, [r4, #-4]
 800f926:	3c04      	subs	r4, #4
 800f928:	6822      	ldr	r2, [r4, #0]
 800f92a:	f000 000f 	and.w	r0, r0, #15
 800f92e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f932:	6020      	str	r0, [r4, #0]
 800f934:	e7b5      	b.n	800f8a2 <__hexnan+0x7a>
 800f936:	2508      	movs	r5, #8
 800f938:	e7b3      	b.n	800f8a2 <__hexnan+0x7a>
 800f93a:	9b01      	ldr	r3, [sp, #4]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d0dd      	beq.n	800f8fc <__hexnan+0xd4>
 800f940:	f04f 32ff 	mov.w	r2, #4294967295
 800f944:	f1c3 0320 	rsb	r3, r3, #32
 800f948:	40da      	lsrs	r2, r3
 800f94a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f94e:	4013      	ands	r3, r2
 800f950:	f846 3c04 	str.w	r3, [r6, #-4]
 800f954:	e7d2      	b.n	800f8fc <__hexnan+0xd4>
 800f956:	3f04      	subs	r7, #4
 800f958:	e7d0      	b.n	800f8fc <__hexnan+0xd4>
 800f95a:	2004      	movs	r0, #4
 800f95c:	e7d5      	b.n	800f90a <__hexnan+0xe2>

0800f95e <__ascii_mbtowc>:
 800f95e:	b082      	sub	sp, #8
 800f960:	b901      	cbnz	r1, 800f964 <__ascii_mbtowc+0x6>
 800f962:	a901      	add	r1, sp, #4
 800f964:	b142      	cbz	r2, 800f978 <__ascii_mbtowc+0x1a>
 800f966:	b14b      	cbz	r3, 800f97c <__ascii_mbtowc+0x1e>
 800f968:	7813      	ldrb	r3, [r2, #0]
 800f96a:	600b      	str	r3, [r1, #0]
 800f96c:	7812      	ldrb	r2, [r2, #0]
 800f96e:	1e10      	subs	r0, r2, #0
 800f970:	bf18      	it	ne
 800f972:	2001      	movne	r0, #1
 800f974:	b002      	add	sp, #8
 800f976:	4770      	bx	lr
 800f978:	4610      	mov	r0, r2
 800f97a:	e7fb      	b.n	800f974 <__ascii_mbtowc+0x16>
 800f97c:	f06f 0001 	mvn.w	r0, #1
 800f980:	e7f8      	b.n	800f974 <__ascii_mbtowc+0x16>

0800f982 <_realloc_r>:
 800f982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f986:	4607      	mov	r7, r0
 800f988:	4614      	mov	r4, r2
 800f98a:	460d      	mov	r5, r1
 800f98c:	b921      	cbnz	r1, 800f998 <_realloc_r+0x16>
 800f98e:	4611      	mov	r1, r2
 800f990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f994:	f7fd bcca 	b.w	800d32c <_malloc_r>
 800f998:	b92a      	cbnz	r2, 800f9a6 <_realloc_r+0x24>
 800f99a:	f7fd fc55 	bl	800d248 <_free_r>
 800f99e:	4625      	mov	r5, r4
 800f9a0:	4628      	mov	r0, r5
 800f9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9a6:	f000 f840 	bl	800fa2a <_malloc_usable_size_r>
 800f9aa:	4284      	cmp	r4, r0
 800f9ac:	4606      	mov	r6, r0
 800f9ae:	d802      	bhi.n	800f9b6 <_realloc_r+0x34>
 800f9b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f9b4:	d8f4      	bhi.n	800f9a0 <_realloc_r+0x1e>
 800f9b6:	4621      	mov	r1, r4
 800f9b8:	4638      	mov	r0, r7
 800f9ba:	f7fd fcb7 	bl	800d32c <_malloc_r>
 800f9be:	4680      	mov	r8, r0
 800f9c0:	b908      	cbnz	r0, 800f9c6 <_realloc_r+0x44>
 800f9c2:	4645      	mov	r5, r8
 800f9c4:	e7ec      	b.n	800f9a0 <_realloc_r+0x1e>
 800f9c6:	42b4      	cmp	r4, r6
 800f9c8:	4622      	mov	r2, r4
 800f9ca:	4629      	mov	r1, r5
 800f9cc:	bf28      	it	cs
 800f9ce:	4632      	movcs	r2, r6
 800f9d0:	f7fc fdcb 	bl	800c56a <memcpy>
 800f9d4:	4629      	mov	r1, r5
 800f9d6:	4638      	mov	r0, r7
 800f9d8:	f7fd fc36 	bl	800d248 <_free_r>
 800f9dc:	e7f1      	b.n	800f9c2 <_realloc_r+0x40>

0800f9de <__ascii_wctomb>:
 800f9de:	4603      	mov	r3, r0
 800f9e0:	4608      	mov	r0, r1
 800f9e2:	b141      	cbz	r1, 800f9f6 <__ascii_wctomb+0x18>
 800f9e4:	2aff      	cmp	r2, #255	@ 0xff
 800f9e6:	d904      	bls.n	800f9f2 <__ascii_wctomb+0x14>
 800f9e8:	228a      	movs	r2, #138	@ 0x8a
 800f9ea:	f04f 30ff 	mov.w	r0, #4294967295
 800f9ee:	601a      	str	r2, [r3, #0]
 800f9f0:	4770      	bx	lr
 800f9f2:	2001      	movs	r0, #1
 800f9f4:	700a      	strb	r2, [r1, #0]
 800f9f6:	4770      	bx	lr

0800f9f8 <fiprintf>:
 800f9f8:	b40e      	push	{r1, r2, r3}
 800f9fa:	b503      	push	{r0, r1, lr}
 800f9fc:	4601      	mov	r1, r0
 800f9fe:	ab03      	add	r3, sp, #12
 800fa00:	4805      	ldr	r0, [pc, #20]	@ (800fa18 <fiprintf+0x20>)
 800fa02:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa06:	6800      	ldr	r0, [r0, #0]
 800fa08:	9301      	str	r3, [sp, #4]
 800fa0a:	f7ff f9b7 	bl	800ed7c <_vfiprintf_r>
 800fa0e:	b002      	add	sp, #8
 800fa10:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa14:	b003      	add	sp, #12
 800fa16:	4770      	bx	lr
 800fa18:	200080ac 	.word	0x200080ac

0800fa1c <abort>:
 800fa1c:	2006      	movs	r0, #6
 800fa1e:	b508      	push	{r3, lr}
 800fa20:	f000 f834 	bl	800fa8c <raise>
 800fa24:	2001      	movs	r0, #1
 800fa26:	f7f7 fa9f 	bl	8006f68 <_exit>

0800fa2a <_malloc_usable_size_r>:
 800fa2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa2e:	1f18      	subs	r0, r3, #4
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	bfbc      	itt	lt
 800fa34:	580b      	ldrlt	r3, [r1, r0]
 800fa36:	18c0      	addlt	r0, r0, r3
 800fa38:	4770      	bx	lr

0800fa3a <_raise_r>:
 800fa3a:	291f      	cmp	r1, #31
 800fa3c:	b538      	push	{r3, r4, r5, lr}
 800fa3e:	4605      	mov	r5, r0
 800fa40:	460c      	mov	r4, r1
 800fa42:	d904      	bls.n	800fa4e <_raise_r+0x14>
 800fa44:	2316      	movs	r3, #22
 800fa46:	6003      	str	r3, [r0, #0]
 800fa48:	f04f 30ff 	mov.w	r0, #4294967295
 800fa4c:	bd38      	pop	{r3, r4, r5, pc}
 800fa4e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fa50:	b112      	cbz	r2, 800fa58 <_raise_r+0x1e>
 800fa52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa56:	b94b      	cbnz	r3, 800fa6c <_raise_r+0x32>
 800fa58:	4628      	mov	r0, r5
 800fa5a:	f000 f831 	bl	800fac0 <_getpid_r>
 800fa5e:	4622      	mov	r2, r4
 800fa60:	4601      	mov	r1, r0
 800fa62:	4628      	mov	r0, r5
 800fa64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa68:	f000 b818 	b.w	800fa9c <_kill_r>
 800fa6c:	2b01      	cmp	r3, #1
 800fa6e:	d00a      	beq.n	800fa86 <_raise_r+0x4c>
 800fa70:	1c59      	adds	r1, r3, #1
 800fa72:	d103      	bne.n	800fa7c <_raise_r+0x42>
 800fa74:	2316      	movs	r3, #22
 800fa76:	6003      	str	r3, [r0, #0]
 800fa78:	2001      	movs	r0, #1
 800fa7a:	e7e7      	b.n	800fa4c <_raise_r+0x12>
 800fa7c:	2100      	movs	r1, #0
 800fa7e:	4620      	mov	r0, r4
 800fa80:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fa84:	4798      	blx	r3
 800fa86:	2000      	movs	r0, #0
 800fa88:	e7e0      	b.n	800fa4c <_raise_r+0x12>
	...

0800fa8c <raise>:
 800fa8c:	4b02      	ldr	r3, [pc, #8]	@ (800fa98 <raise+0xc>)
 800fa8e:	4601      	mov	r1, r0
 800fa90:	6818      	ldr	r0, [r3, #0]
 800fa92:	f7ff bfd2 	b.w	800fa3a <_raise_r>
 800fa96:	bf00      	nop
 800fa98:	200080ac 	.word	0x200080ac

0800fa9c <_kill_r>:
 800fa9c:	b538      	push	{r3, r4, r5, lr}
 800fa9e:	2300      	movs	r3, #0
 800faa0:	4d06      	ldr	r5, [pc, #24]	@ (800fabc <_kill_r+0x20>)
 800faa2:	4604      	mov	r4, r0
 800faa4:	4608      	mov	r0, r1
 800faa6:	4611      	mov	r1, r2
 800faa8:	602b      	str	r3, [r5, #0]
 800faaa:	f7f7 fa55 	bl	8006f58 <_kill>
 800faae:	1c43      	adds	r3, r0, #1
 800fab0:	d102      	bne.n	800fab8 <_kill_r+0x1c>
 800fab2:	682b      	ldr	r3, [r5, #0]
 800fab4:	b103      	cbz	r3, 800fab8 <_kill_r+0x1c>
 800fab6:	6023      	str	r3, [r4, #0]
 800fab8:	bd38      	pop	{r3, r4, r5, pc}
 800faba:	bf00      	nop
 800fabc:	2000ba20 	.word	0x2000ba20

0800fac0 <_getpid_r>:
 800fac0:	f7f7 ba48 	b.w	8006f54 <_getpid>

0800fac4 <_init>:
 800fac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fac6:	bf00      	nop
 800fac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800faca:	bc08      	pop	{r3}
 800facc:	469e      	mov	lr, r3
 800face:	4770      	bx	lr

0800fad0 <_fini>:
 800fad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fad2:	bf00      	nop
 800fad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fad6:	bc08      	pop	{r3}
 800fad8:	469e      	mov	lr, r3
 800fada:	4770      	bx	lr
