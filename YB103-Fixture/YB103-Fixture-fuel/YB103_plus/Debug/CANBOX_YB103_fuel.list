
CANBOX_YB103_fuel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7fc  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fac  0800f9f0  0800f9f0  000109f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801099c  0801099c  00012798  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801099c  0801099c  0001199c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080109a4  080109a4  00012798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080109a4  080109a4  000119a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080109a8  080109a8  000119a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000798  20000000  080109ac  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005338  20000798  08011144  00012798  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005ad0  08011144  00012ad0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00012798  2**0
                  CONTENTS, READONLY
 12 .debug_info   000085d2  00000000  00000000  000127c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001753  00000000  00000000  0001ad93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e0  00000000  00000000  0001c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ac7  00000000  00000000  0001dec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f247  00000000  00000000  0001f98f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000041d2  00000000  00000000  0002ebd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00032da8  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000057b0  00000000  00000000  00032dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000062  00000000  00000000  0003859c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000798 	.word	0x20000798
 800020c:	00000000 	.word	0x00000000
 8000210:	0800f9d4 	.word	0x0800f9d4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000079c 	.word	0x2000079c
 800022c:	0800f9d4 	.word	0x0800f9d4

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	@ 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9c2 	b.w	8000fe4 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff0b 	bl	8000a9c <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <__aeabi_d2ulz+0x34>)
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fc81 	bl	80005b8 <__aeabi_dmul>
 8000cb6:	f7ff ff57 	bl	8000b68 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc02 	bl	80004c4 <__aeabi_ui2d>
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc4:	f7ff fc78 	bl	80005b8 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff faba 	bl	8000248 <__aeabi_dsub>
 8000cd4:	f7ff ff48 	bl	8000b68 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9d08      	ldr	r5, [sp, #32]
 8000cea:	468e      	mov	lr, r1
 8000cec:	4604      	mov	r4, r0
 8000cee:	4688      	mov	r8, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14a      	bne.n	8000d8a <__udivmoddi4+0xa6>
 8000cf4:	428a      	cmp	r2, r1
 8000cf6:	4617      	mov	r7, r2
 8000cf8:	d962      	bls.n	8000dc0 <__udivmoddi4+0xdc>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	b14e      	cbz	r6, 8000d14 <__udivmoddi4+0x30>
 8000d00:	f1c6 0320 	rsb	r3, r6, #32
 8000d04:	fa01 f806 	lsl.w	r8, r1, r6
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	40b7      	lsls	r7, r6
 8000d0e:	ea43 0808 	orr.w	r8, r3, r8
 8000d12:	40b4      	lsls	r4, r6
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d1c:	fa1f fc87 	uxth.w	ip, r7
 8000d20:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d24:	fb01 f20c 	mul.w	r2, r1, ip
 8000d28:	0c23      	lsrs	r3, r4, #16
 8000d2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x62>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d38:	f080 80eb 	bcs.w	8000f12 <__udivmoddi4+0x22e>
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	f240 80e8 	bls.w	8000f12 <__udivmoddi4+0x22e>
 8000d42:	3902      	subs	r1, #2
 8000d44:	443b      	add	r3, r7
 8000d46:	1a9a      	subs	r2, r3, r2
 8000d48:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d4c:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d50:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d54:	b2a3      	uxth	r3, r4
 8000d56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d5a:	459c      	cmp	ip, r3
 8000d5c:	d909      	bls.n	8000d72 <__udivmoddi4+0x8e>
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d64:	f080 80d7 	bcs.w	8000f16 <__udivmoddi4+0x232>
 8000d68:	459c      	cmp	ip, r3
 8000d6a:	f240 80d4 	bls.w	8000f16 <__udivmoddi4+0x232>
 8000d6e:	443b      	add	r3, r7
 8000d70:	3802      	subs	r0, #2
 8000d72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d76:	2100      	movs	r1, #0
 8000d78:	eba3 030c 	sub.w	r3, r3, ip
 8000d7c:	b11d      	cbz	r5, 8000d86 <__udivmoddi4+0xa2>
 8000d7e:	2200      	movs	r2, #0
 8000d80:	40f3      	lsrs	r3, r6
 8000d82:	e9c5 3200 	strd	r3, r2, [r5]
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d905      	bls.n	8000d9a <__udivmoddi4+0xb6>
 8000d8e:	b10d      	cbz	r5, 8000d94 <__udivmoddi4+0xb0>
 8000d90:	e9c5 0100 	strd	r0, r1, [r5]
 8000d94:	2100      	movs	r1, #0
 8000d96:	4608      	mov	r0, r1
 8000d98:	e7f5      	b.n	8000d86 <__udivmoddi4+0xa2>
 8000d9a:	fab3 f183 	clz	r1, r3
 8000d9e:	2900      	cmp	r1, #0
 8000da0:	d146      	bne.n	8000e30 <__udivmoddi4+0x14c>
 8000da2:	4573      	cmp	r3, lr
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xc8>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 8108 	bhi.w	8000fbc <__udivmoddi4+0x2d8>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb6e 0203 	sbc.w	r2, lr, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	4690      	mov	r8, r2
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0e5      	beq.n	8000d86 <__udivmoddi4+0xa2>
 8000dba:	e9c5 4800 	strd	r4, r8, [r5]
 8000dbe:	e7e2      	b.n	8000d86 <__udivmoddi4+0xa2>
 8000dc0:	2a00      	cmp	r2, #0
 8000dc2:	f000 8091 	beq.w	8000ee8 <__udivmoddi4+0x204>
 8000dc6:	fab2 f682 	clz	r6, r2
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	f040 80a5 	bne.w	8000f1a <__udivmoddi4+0x236>
 8000dd0:	1a8a      	subs	r2, r1, r2
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	0c03      	lsrs	r3, r0, #16
 8000dd6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dda:	b280      	uxth	r0, r0
 8000ddc:	b2bc      	uxth	r4, r7
 8000dde:	fbb2 fcfe 	udiv	ip, r2, lr
 8000de2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dea:	fb04 f20c 	mul.w	r2, r4, ip
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x11e>
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000df8:	d202      	bcs.n	8000e00 <__udivmoddi4+0x11c>
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	f200 80e3 	bhi.w	8000fc6 <__udivmoddi4+0x2e2>
 8000e00:	46c4      	mov	ip, r8
 8000e02:	1a9b      	subs	r3, r3, r2
 8000e04:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e08:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e0c:	fb02 f404 	mul.w	r4, r2, r4
 8000e10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e14:	429c      	cmp	r4, r3
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0x144>
 8000e18:	18fb      	adds	r3, r7, r3
 8000e1a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0x142>
 8000e20:	429c      	cmp	r4, r3
 8000e22:	f200 80cd 	bhi.w	8000fc0 <__udivmoddi4+0x2dc>
 8000e26:	4602      	mov	r2, r0
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e2e:	e7a5      	b.n	8000d7c <__udivmoddi4+0x98>
 8000e30:	f1c1 0620 	rsb	r6, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 f706 	lsr.w	r7, r2, r6
 8000e3a:	431f      	orrs	r7, r3
 8000e3c:	fa2e fa06 	lsr.w	sl, lr, r6
 8000e40:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e44:	fbba f8f9 	udiv	r8, sl, r9
 8000e48:	fa0e fe01 	lsl.w	lr, lr, r1
 8000e4c:	fa20 f306 	lsr.w	r3, r0, r6
 8000e50:	fb09 aa18 	mls	sl, r9, r8, sl
 8000e54:	fa1f fc87 	uxth.w	ip, r7
 8000e58:	ea43 030e 	orr.w	r3, r3, lr
 8000e5c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000e60:	fb08 f00c 	mul.w	r0, r8, ip
 8000e64:	0c1c      	lsrs	r4, r3, #16
 8000e66:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000e6a:	42a0      	cmp	r0, r4
 8000e6c:	fa02 f201 	lsl.w	r2, r2, r1
 8000e70:	d90a      	bls.n	8000e88 <__udivmoddi4+0x1a4>
 8000e72:	193c      	adds	r4, r7, r4
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e78:	f080 809e 	bcs.w	8000fb8 <__udivmoddi4+0x2d4>
 8000e7c:	42a0      	cmp	r0, r4
 8000e7e:	f240 809b 	bls.w	8000fb8 <__udivmoddi4+0x2d4>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	443c      	add	r4, r7
 8000e88:	1a24      	subs	r4, r4, r0
 8000e8a:	b298      	uxth	r0, r3
 8000e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e90:	fb09 4413 	mls	r4, r9, r3, r4
 8000e94:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e98:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000e9c:	45a4      	cmp	ip, r4
 8000e9e:	d909      	bls.n	8000eb4 <__udivmoddi4+0x1d0>
 8000ea0:	193c      	adds	r4, r7, r4
 8000ea2:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea6:	f080 8085 	bcs.w	8000fb4 <__udivmoddi4+0x2d0>
 8000eaa:	45a4      	cmp	ip, r4
 8000eac:	f240 8082 	bls.w	8000fb4 <__udivmoddi4+0x2d0>
 8000eb0:	3b02      	subs	r3, #2
 8000eb2:	443c      	add	r4, r7
 8000eb4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000eb8:	eba4 040c 	sub.w	r4, r4, ip
 8000ebc:	fba0 8c02 	umull	r8, ip, r0, r2
 8000ec0:	4564      	cmp	r4, ip
 8000ec2:	4643      	mov	r3, r8
 8000ec4:	46e1      	mov	r9, ip
 8000ec6:	d364      	bcc.n	8000f92 <__udivmoddi4+0x2ae>
 8000ec8:	d061      	beq.n	8000f8e <__udivmoddi4+0x2aa>
 8000eca:	b15d      	cbz	r5, 8000ee4 <__udivmoddi4+0x200>
 8000ecc:	ebbe 0203 	subs.w	r2, lr, r3
 8000ed0:	eb64 0409 	sbc.w	r4, r4, r9
 8000ed4:	fa04 f606 	lsl.w	r6, r4, r6
 8000ed8:	fa22 f301 	lsr.w	r3, r2, r1
 8000edc:	431e      	orrs	r6, r3
 8000ede:	40cc      	lsrs	r4, r1
 8000ee0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	e74e      	b.n	8000d86 <__udivmoddi4+0xa2>
 8000ee8:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eec:	0c01      	lsrs	r1, r0, #16
 8000eee:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ef2:	b280      	uxth	r0, r0
 8000ef4:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ef8:	463b      	mov	r3, r7
 8000efa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000efe:	4638      	mov	r0, r7
 8000f00:	463c      	mov	r4, r7
 8000f02:	46b8      	mov	r8, r7
 8000f04:	46be      	mov	lr, r7
 8000f06:	2620      	movs	r6, #32
 8000f08:	eba2 0208 	sub.w	r2, r2, r8
 8000f0c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f10:	e765      	b.n	8000dde <__udivmoddi4+0xfa>
 8000f12:	4601      	mov	r1, r0
 8000f14:	e717      	b.n	8000d46 <__udivmoddi4+0x62>
 8000f16:	4610      	mov	r0, r2
 8000f18:	e72b      	b.n	8000d72 <__udivmoddi4+0x8e>
 8000f1a:	f1c6 0120 	rsb	r1, r6, #32
 8000f1e:	fa2e fc01 	lsr.w	ip, lr, r1
 8000f22:	40b7      	lsls	r7, r6
 8000f24:	fa0e fe06 	lsl.w	lr, lr, r6
 8000f28:	fa20 f101 	lsr.w	r1, r0, r1
 8000f2c:	ea41 010e 	orr.w	r1, r1, lr
 8000f30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f34:	fbbc f8fe 	udiv	r8, ip, lr
 8000f38:	b2bc      	uxth	r4, r7
 8000f3a:	fb0e cc18 	mls	ip, lr, r8, ip
 8000f3e:	fb08 f904 	mul.w	r9, r8, r4
 8000f42:	0c0a      	lsrs	r2, r1, #16
 8000f44:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000f48:	40b0      	lsls	r0, r6
 8000f4a:	4591      	cmp	r9, r2
 8000f4c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	d93e      	bls.n	8000fd2 <__udivmoddi4+0x2ee>
 8000f54:	18ba      	adds	r2, r7, r2
 8000f56:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f5a:	d201      	bcs.n	8000f60 <__udivmoddi4+0x27c>
 8000f5c:	4591      	cmp	r9, r2
 8000f5e:	d81f      	bhi.n	8000fa0 <__udivmoddi4+0x2bc>
 8000f60:	eba2 0209 	sub.w	r2, r2, r9
 8000f64:	fbb2 f9fe 	udiv	r9, r2, lr
 8000f68:	fb09 f804 	mul.w	r8, r9, r4
 8000f6c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000f70:	b28a      	uxth	r2, r1
 8000f72:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000f76:	4542      	cmp	r2, r8
 8000f78:	d229      	bcs.n	8000fce <__udivmoddi4+0x2ea>
 8000f7a:	18ba      	adds	r2, r7, r2
 8000f7c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f80:	d2c2      	bcs.n	8000f08 <__udivmoddi4+0x224>
 8000f82:	4542      	cmp	r2, r8
 8000f84:	d2c0      	bcs.n	8000f08 <__udivmoddi4+0x224>
 8000f86:	f1a9 0102 	sub.w	r1, r9, #2
 8000f8a:	443a      	add	r2, r7
 8000f8c:	e7bc      	b.n	8000f08 <__udivmoddi4+0x224>
 8000f8e:	45c6      	cmp	lr, r8
 8000f90:	d29b      	bcs.n	8000eca <__udivmoddi4+0x1e6>
 8000f92:	ebb8 0302 	subs.w	r3, r8, r2
 8000f96:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	46e1      	mov	r9, ip
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e6>
 8000fa0:	eba7 0909 	sub.w	r9, r7, r9
 8000fa4:	444a      	add	r2, r9
 8000fa6:	fbb2 f9fe 	udiv	r9, r2, lr
 8000faa:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fae:	fb09 f804 	mul.w	r8, r9, r4
 8000fb2:	e7db      	b.n	8000f6c <__udivmoddi4+0x288>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	e77d      	b.n	8000eb4 <__udivmoddi4+0x1d0>
 8000fb8:	46d0      	mov	r8, sl
 8000fba:	e765      	b.n	8000e88 <__udivmoddi4+0x1a4>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e6fa      	b.n	8000db6 <__udivmoddi4+0xd2>
 8000fc0:	443b      	add	r3, r7
 8000fc2:	3a02      	subs	r2, #2
 8000fc4:	e730      	b.n	8000e28 <__udivmoddi4+0x144>
 8000fc6:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fca:	443b      	add	r3, r7
 8000fcc:	e719      	b.n	8000e02 <__udivmoddi4+0x11e>
 8000fce:	4649      	mov	r1, r9
 8000fd0:	e79a      	b.n	8000f08 <__udivmoddi4+0x224>
 8000fd2:	eba2 0209 	sub.w	r2, r2, r9
 8000fd6:	fbb2 f9fe 	udiv	r9, r2, lr
 8000fda:	46c4      	mov	ip, r8
 8000fdc:	fb09 f804 	mul.w	r8, r9, r4
 8000fe0:	e7c4      	b.n	8000f6c <__udivmoddi4+0x288>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <Adc_SetCoverChl>:
* Input 		 : None
* Output		 : None
* Return		 : None
******************************************************/
static void Adc_SetCoverChl(uint8_t LcChl)
{
 8000fe8:	b510      	push	{r4, lr}
 8000fea:	b084      	sub	sp, #16
	
	ADC_ChannelConfTypeDef AdcChlConfig;
	AdcChlConfig.Channel = LcChl;
 8000fec:	9001      	str	r0, [sp, #4]
	AdcChlConfig.Rank = ADC_REGULAR_RANK_1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	9302      	str	r3, [sp, #8]
	AdcChlConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	9303      	str	r3, [sp, #12]
	HAL_ADC_ConfigChannel(&hadc1,&AdcChlConfig);
 8000ff6:	4c05      	ldr	r4, [pc, #20]	@ (800100c <Adc_SetCoverChl+0x24>)
 8000ff8:	a901      	add	r1, sp, #4
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f006 f9ce 	bl	800739c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001000:	4620      	mov	r0, r4
 8001002:	f006 faaf 	bl	8007564 <HAL_ADC_Start>
}
 8001006:	b004      	add	sp, #16
 8001008:	bd10      	pop	{r4, pc}
 800100a:	bf00      	nop
 800100c:	20002a24 	.word	0x20002a24

08001010 <ADC_SamplingProcess>:
* Output		 : None
* Return		 : None
******************************************************/

void ADC_SamplingProcess(void)
{
 8001010:	b530      	push	{r4, r5, lr}
 8001012:	b085      	sub	sp, #20
	uint8_t LcChlNum[CHANNEL_NUM] = {ADC_CHANNEL_15,ADC_CHANNEL_14,ADC_CHANNEL_8};
 8001014:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <ADC_SamplingProcess+0x68>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f8ad 300c 	strh.w	r3, [sp, #12]
 800101c:	0c1b      	lsrs	r3, r3, #16
 800101e:	f88d 300e 	strb.w	r3, [sp, #14]

	uint32_t LcAdcData[CHANNEL_NUM] = {0u};
 8001022:	2300      	movs	r3, #0
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	9302      	str	r3, [sp, #8]
	
	if(GcChlNumIdx >= (CHANNEL_NUM - 1u))
 800102a:	4b14      	ldr	r3, [pc, #80]	@ (800107c <ADC_SamplingProcess+0x6c>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d91e      	bls.n	8001070 <ADC_SamplingProcess+0x60>
	{
		GcChlNumIdx = 0x00u;
 8001032:	4b12      	ldr	r3, [pc, #72]	@ (800107c <ADC_SamplingProcess+0x6c>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
	}
	else
	{
	    GcChlNumIdx++;
	}
	Adc_SetCoverChl(LcChlNum[GcChlNumIdx]);
 8001038:	4c10      	ldr	r4, [pc, #64]	@ (800107c <ADC_SamplingProcess+0x6c>)
 800103a:	7823      	ldrb	r3, [r4, #0]
 800103c:	3310      	adds	r3, #16
 800103e:	446b      	add	r3, sp
 8001040:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 8001044:	f7ff ffd0 	bl	8000fe8 <Adc_SetCoverChl>
	LcAdcData[GcChlNumIdx] = HAL_ADC_GetValue(&hadc1);
 8001048:	7825      	ldrb	r5, [r4, #0]
 800104a:	480d      	ldr	r0, [pc, #52]	@ (8001080 <ADC_SamplingProcess+0x70>)
 800104c:	f006 f9a2 	bl	8007394 <HAL_ADC_GetValue>
 8001050:	ab04      	add	r3, sp, #16
 8001052:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001056:	f845 0c10 	str.w	r0, [r5, #-16]
	Adc_DebouncingInfo[GcChlNumIdx].ResValue = LcAdcData[GcChlNumIdx];
 800105a:	7822      	ldrb	r2, [r4, #0]
 800105c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001060:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8001064:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <ADC_SamplingProcess+0x74>)
 8001066:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800106a:	60d9      	str	r1, [r3, #12]
}
 800106c:	b005      	add	sp, #20
 800106e:	bd30      	pop	{r4, r5, pc}
	    GcChlNumIdx++;
 8001070:	3301      	adds	r3, #1
 8001072:	4a02      	ldr	r2, [pc, #8]	@ (800107c <ADC_SamplingProcess+0x6c>)
 8001074:	7013      	strb	r3, [r2, #0]
 8001076:	e7df      	b.n	8001038 <ADC_SamplingProcess+0x28>
 8001078:	0800fab4 	.word	0x0800fab4
 800107c:	200007e4 	.word	0x200007e4
 8001080:	20002a24 	.word	0x20002a24
 8001084:	200007b4 	.word	0x200007b4

08001088 <ADC_GetResValue>:
* Output		 : None
* Return		 : None
******************************************************/
uint32_t ADC_GetResValue(uint8_t Lu8Chl)
{
	return Adc_DebouncingInfo[Lu8Chl].ResValue;
 8001088:	4b02      	ldr	r3, [pc, #8]	@ (8001094 <ADC_GetResValue+0xc>)
 800108a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800108e:	68d8      	ldr	r0, [r3, #12]
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	200007b4 	.word	0x200007b4

08001098 <Svc_CanCommUpInf_TxConfigTableInit>:
extern const CanTransmitConfig_t *ilTxTable;
extern uint8_t iBytesOfTxHandles;
extern CanMsgTxStateBuffer_Struct * CanMsgTxStateBufferPtr;
static uint8_t Svc_CanCommUpInf_TxConfigTableInit(CanTransmitConfig_t *p_TxTable)
{
   if(p_TxTable != NULL)
 8001098:	b118      	cbz	r0, 80010a2 <Svc_CanCommUpInf_TxConfigTableInit+0xa>
   {
      ilTxTable = p_TxTable;
 800109a:	4a03      	ldr	r2, [pc, #12]	@ (80010a8 <Svc_CanCommUpInf_TxConfigTableInit+0x10>)
 800109c:	6010      	str	r0, [r2, #0]
      return TRUE;
 800109e:	2001      	movs	r0, #1
 80010a0:	4770      	bx	lr
   }
   else
   {
      return FALSE;
 80010a2:	2000      	movs	r0, #0
   }
}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20005968 	.word	0x20005968

080010ac <Svc_CanCommUpInf_TxConfigTableLenInit>:

static uint8_t Svc_CanCommUpInf_TxConfigTableLenInit(uint8_t TxTableLen)
{
   if(TxTableLen != 0)
 80010ac:	4603      	mov	r3, r0
 80010ae:	b110      	cbz	r0, 80010b6 <Svc_CanCommUpInf_TxConfigTableLenInit+0xa>
   {
      iBytesOfTxHandles = TxTableLen;
 80010b0:	4a02      	ldr	r2, [pc, #8]	@ (80010bc <Svc_CanCommUpInf_TxConfigTableLenInit+0x10>)
 80010b2:	7010      	strb	r0, [r2, #0]
      return TRUE;
 80010b4:	2301      	movs	r3, #1
   }
   else
   {
      return FALSE;
   }
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20005967 	.word	0x20005967

080010c0 <Service_CanComm_CanMsgTxStateBufferInit>:

static uint8_t Service_CanComm_CanMsgTxStateBufferInit(CanMsgTxStateBuffer_Struct * p_StateBuffer)
{
   if(p_StateBuffer != NULL)
 80010c0:	b118      	cbz	r0, 80010ca <Service_CanComm_CanMsgTxStateBufferInit+0xa>
   {
      CanMsgTxStateBufferPtr = p_StateBuffer;
 80010c2:	4a03      	ldr	r2, [pc, #12]	@ (80010d0 <Service_CanComm_CanMsgTxStateBufferInit+0x10>)
 80010c4:	6010      	str	r0, [r2, #0]
      return TRUE;
 80010c6:	2001      	movs	r0, #1
 80010c8:	4770      	bx	lr
   }
   else
   {
      return FALSE;
 80010ca:	2000      	movs	r0, #0
   }
}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	2000596c 	.word	0x2000596c

080010d4 <Can_SendSts_Control>:

void Can_SendSts_Control(uint8_t CanSendSts)
{
 80010d4:	b508      	push	{r3, lr}
    if(E_CANSEND_OPEN == CanSendSts)
 80010d6:	b970      	cbnz	r0, 80010f6 <Can_SendSts_Control+0x22>
    {
        // Set_CanEventType_Cycle();
        HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2140      	movs	r1, #64	@ 0x40
 80010dc:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 80010e0:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 80010e4:	f007 fbce 	bl	8008884 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010ee:	4809      	ldr	r0, [pc, #36]	@ (8001114 <Can_SendSts_Control+0x40>)
 80010f0:	f007 fbc8 	bl	8008884 <HAL_GPIO_WritePin>
        // Set_CanCycleType_Event();
        HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_RESET);
        delay_us(100);
        HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_RESET);
    }
}
 80010f4:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2140      	movs	r1, #64	@ 0x40
 80010fa:	4807      	ldr	r0, [pc, #28]	@ (8001118 <Can_SendSts_Control+0x44>)
 80010fc:	f007 fbc2 	bl	8008884 <HAL_GPIO_WritePin>
        delay_us(100);
 8001100:	2064      	movs	r0, #100	@ 0x64
 8001102:	f000 fd51 	bl	8001ba8 <delay_us>
        HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800110c:	4801      	ldr	r0, [pc, #4]	@ (8001114 <Can_SendSts_Control+0x40>)
 800110e:	f007 fbb9 	bl	8008884 <HAL_GPIO_WritePin>
}
 8001112:	e7ef      	b.n	80010f4 <Can_SendSts_Control+0x20>
 8001114:	40010c00 	.word	0x40010c00
 8001118:	40011000 	.word	0x40011000

0800111c <App_Init>:

void App_Init(void)
{
 800111c:	b508      	push	{r3, lr}
    Svc_CanCommUpInf_TxConfigTableInit(CanTransmitConfig_Table);
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <App_Init+0x18>)
 8001120:	f7ff ffba 	bl	8001098 <Svc_CanCommUpInf_TxConfigTableInit>
    Svc_CanCommUpInf_TxConfigTableLenInit(CanTxMsgIndex_Max);
 8001124:	2027      	movs	r0, #39	@ 0x27
 8001126:	f7ff ffc1 	bl	80010ac <Svc_CanCommUpInf_TxConfigTableLenInit>
    Service_CanComm_CanMsgTxStateBufferInit(&CanMsgTxStateBuffer[0]);
 800112a:	4803      	ldr	r0, [pc, #12]	@ (8001138 <App_Init+0x1c>)
 800112c:	f7ff ffc8 	bl	80010c0 <Service_CanComm_CanMsgTxStateBufferInit>
}
 8001130:	bd08      	pop	{r3, pc}
 8001132:	bf00      	nop
 8001134:	080100e4 	.word	0x080100e4
 8001138:	200007e8 	.word	0x200007e8

0800113c <CanGetMsgSignal>:

void CanGetMsgSignal(void)
{
 800113c:	b510      	push	{r4, lr}
	//F1
	CanTx_SigSet_0x250_ABS_3_VehicleSpeed(GetF1Value(ABS_3_VehicleSpeed));
 800113e:	2000      	movs	r0, #0
 8001140:	f005 f87e 	bl	8006240 <GetF1Value>
 8001144:	4cfc      	ldr	r4, [pc, #1008]	@ (8001538 <CanGetMsgSignal+0x3fc>)
 8001146:	76e0      	strb	r0, [r4, #27]
 8001148:	2000      	movs	r0, #0
 800114a:	f005 f879 	bl	8006240 <GetF1Value>
 800114e:	f3c0 2004 	ubfx	r0, r0, #8, #5
 8001152:	7ea3      	ldrb	r3, [r4, #26]
 8001154:	f360 0304 	bfi	r3, r0, #0, #5
 8001158:	76a3      	strb	r3, [r4, #26]
	CanTx_SigSet_0x250_ABS_3_VehicleSpeedValid(GetF1Value(ABS_3_VehicleSpeedValid));
 800115a:	2001      	movs	r0, #1
 800115c:	f005 f870 	bl	8006240 <GetF1Value>
 8001160:	7ea3      	ldrb	r3, [r4, #26]
 8001162:	f360 1386 	bfi	r3, r0, #6, #1
 8001166:	76a3      	strb	r3, [r4, #26]
	CanTx_SigSet_0x250_ABS_3_Timeout_Flag(GetF1Value(ABS_3_Timeout_Flag));
 8001168:	2002      	movs	r0, #2
 800116a:	f005 f869 	bl	8006240 <GetF1Value>
 800116e:	7fe3      	ldrb	r3, [r4, #31]
 8001170:	f360 0382 	bfi	r3, r0, #2, #1
 8001174:	77e3      	strb	r3, [r4, #31]
	CanTx_SigSet_0x375_IC_DisplayVehicleSpeedUnit(GetF1Value(IC_DisplayVehicleSpeedUnit));
 8001176:	2003      	movs	r0, #3
 8001178:	f005 f862 	bl	8006240 <GetF1Value>
 800117c:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 8001180:	f360 0382 	bfi	r3, r0, #2, #1
 8001184:	f884 30a7 	strb.w	r3, [r4, #167]	@ 0xa7
	CanTx_SigSet_0x375_IC_DisplayVehicleSpeedValue(GetF1Value(IC_DisplayVehicleSpeedValue));
 8001188:	2004      	movs	r0, #4
 800118a:	f005 f859 	bl	8006240 <GetF1Value>
 800118e:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 8001192:	f360 03c7 	bfi	r3, r0, #3, #5
 8001196:	f884 30a7 	strb.w	r3, [r4, #167]	@ 0xa7
 800119a:	2004      	movs	r0, #4
 800119c:	f005 f850 	bl	8006240 <GetF1Value>
 80011a0:	f3c0 1043 	ubfx	r0, r0, #5, #4
 80011a4:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 80011a8:	f360 0303 	bfi	r3, r0, #0, #4
 80011ac:	f884 30a6 	strb.w	r3, [r4, #166]	@ 0xa6
	//F2
	CanTx_SigSet_0x150_EMS_2_EngineSpeed(GetF2Value(EMS_2_EngineSpeed));
 80011b0:	2000      	movs	r0, #0
 80011b2:	f005 f863 	bl	800627c <GetF2Value>
 80011b6:	f884 0109 	strb.w	r0, [r4, #265]	@ 0x109
 80011ba:	2000      	movs	r0, #0
 80011bc:	f005 f85e 	bl	800627c <GetF2Value>
 80011c0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80011c4:	f884 0108 	strb.w	r0, [r4, #264]	@ 0x108
	CanTx_SigSet_0x150_EMS_2_EngineSpeedValid(GetF2Value(EMS_2_EngineSpeedValid));
 80011c8:	2001      	movs	r0, #1
 80011ca:	f005 f857 	bl	800627c <GetF2Value>
 80011ce:	f894 310a 	ldrb.w	r3, [r4, #266]	@ 0x10a
 80011d2:	f360 0300 	bfi	r3, r0, #0, #1
 80011d6:	f884 310a 	strb.w	r3, [r4, #266]	@ 0x10a
	CanTx_SigSet_0x150_EMS_2_Timeout_Flag(GetF2Value(EMS_2_Timeout_Flag));
 80011da:	2002      	movs	r0, #2
 80011dc:	f005 f84e 	bl	800627c <GetF2Value>
 80011e0:	f894 310f 	ldrb.w	r3, [r4, #271]	@ 0x10f
 80011e4:	f360 0300 	bfi	r3, r0, #0, #1
 80011e8:	f884 310f 	strb.w	r3, [r4, #271]	@ 0x10f
	//F3
	CanTx_SigSet_0x375_IC_SurplusFuel(GetF3Value(IC_SurplusFuel));
 80011ec:	2006      	movs	r0, #6
 80011ee:	f005 f859 	bl	80062a4 <GetF3Value>
 80011f2:	f894 30a0 	ldrb.w	r3, [r4, #160]	@ 0xa0
 80011f6:	f360 0306 	bfi	r3, r0, #0, #7
 80011fa:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
	CanTx_SigSet_0x375_IC_SurplusFuelValid(GetF3Value(IC_SurplusFuelValid));
 80011fe:	2007      	movs	r0, #7
 8001200:	f005 f850 	bl	80062a4 <GetF3Value>
 8001204:	f894 30a3 	ldrb.w	r3, [r4, #163]	@ 0xa3
 8001208:	f360 1304 	bfi	r3, r0, #4, #1
 800120c:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
	CanTx_SigSet_0x375_IC_FuelSignalShortToGND(GetF3Value(IC_FuelSignalShortToGND));
 8001210:	2008      	movs	r0, #8
 8001212:	f005 f847 	bl	80062a4 <GetF3Value>
 8001216:	f894 30a1 	ldrb.w	r3, [r4, #161]	@ 0xa1
 800121a:	f360 03c3 	bfi	r3, r0, #3, #1
 800121e:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    CanTx_SigSet_0x375_IC_FuelSignalShortToBattery(GetF3Value(IC_FuelSignalShortToBattery));
 8001222:	2009      	movs	r0, #9
 8001224:	f005 f83e 	bl	80062a4 <GetF3Value>
 8001228:	f894 30a1 	ldrb.w	r3, [r4, #161]	@ 0xa1
 800122c:	f360 1304 	bfi	r3, r0, #4, #1
 8001230:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
	CanTx_SigSet_0x375_IC_FuelSignalOpen(GetF3Value(IC_FuelSignalOpen));
 8001234:	200a      	movs	r0, #10
 8001236:	f005 f835 	bl	80062a4 <GetF3Value>
 800123a:	f894 30a1 	ldrb.w	r3, [r4, #161]	@ 0xa1
 800123e:	f360 1345 	bfi	r3, r0, #5, #1
 8001242:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
	//F4
	CanTx_SigSet_0x155_EMS_4_EngineCoolantTemp(GetF4Value(EMS_4_EngineCoolantTemp));
 8001246:	2000      	movs	r0, #0
 8001248:	f005 f836 	bl	80062b8 <GetF4Value>
 800124c:	f884 0110 	strb.w	r0, [r4, #272]	@ 0x110
	CanTx_SigSet_0x155_EMS_4_EngineCoolantTempValid(GetF4Value(EMS_4_EngineCoolantTempValid));
 8001250:	2001      	movs	r0, #1
 8001252:	f005 f831 	bl	80062b8 <GetF4Value>
 8001256:	f894 3112 	ldrb.w	r3, [r4, #274]	@ 0x112
 800125a:	f360 1386 	bfi	r3, r0, #6, #1
 800125e:	f884 3112 	strb.w	r3, [r4, #274]	@ 0x112
	CanTx_SigSet_0x155_EMS_4_Timeout_Flag(GetF4Value(EMS_4_Timeout_Flag));
 8001262:	2002      	movs	r0, #2
 8001264:	f005 f828 	bl	80062b8 <GetF4Value>
 8001268:	f894 3117 	ldrb.w	r3, [r4, #279]	@ 0x117
 800126c:	f360 0300 	bfi	r3, r0, #0, #1
 8001270:	f884 3117 	strb.w	r3, [r4, #279]	@ 0x117
	//F5
	CanTx_SigSet_0x375_IC_OdoMeter(GetF5Value(IC_OdoMeter));
 8001274:	2003      	movs	r0, #3
 8001276:	f005 f82f 	bl	80062d8 <GetF5Value>
 800127a:	f884 00a5 	strb.w	r0, [r4, #165]	@ 0xa5
 800127e:	2003      	movs	r0, #3
 8001280:	f005 f82a 	bl	80062d8 <GetF5Value>
 8001284:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001288:	f884 00a4 	strb.w	r0, [r4, #164]	@ 0xa4
 800128c:	2003      	movs	r0, #3
 800128e:	f005 f823 	bl	80062d8 <GetF5Value>
 8001292:	f3c0 4003 	ubfx	r0, r0, #16, #4
 8001296:	f894 30a3 	ldrb.w	r3, [r4, #163]	@ 0xa3
 800129a:	f360 0303 	bfi	r3, r0, #0, #4
 800129e:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
	//F6
	CanTx_SigSet_0x155_EMS_4_FuelConsumption(GetF6Value(EMS_4_FuelConsumption));
 80012a2:	2006      	movs	r0, #6
 80012a4:	f005 f82c 	bl	8006300 <GetF6Value>
 80012a8:	f884 0111 	strb.w	r0, [r4, #273]	@ 0x111
	CanTx_SigSet_0x375_IC_SurplusMileage(GetF6Value(IC_SurplusMileage));
 80012ac:	2008      	movs	r0, #8
 80012ae:	f005 f827 	bl	8006300 <GetF6Value>
 80012b2:	f884 00a2 	strb.w	r0, [r4, #162]	@ 0xa2
 80012b6:	2008      	movs	r0, #8
 80012b8:	f005 f822 	bl	8006300 <GetF6Value>
 80012bc:	f3c0 2001 	ubfx	r0, r0, #8, #2
 80012c0:	f894 30a1 	ldrb.w	r3, [r4, #161]	@ 0xa1
 80012c4:	f360 0301 	bfi	r3, r0, #0, #2
 80012c8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
	//F7
	CanTx_SigSet_0x376_IC_TripAvgFuelConsRate(GetF7Value(IC_TripAvgFuelConsRate));
 80012cc:	2009      	movs	r0, #9
 80012ce:	f005 f833 	bl	8006338 <GetF7Value>
 80012d2:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 80012d6:	f360 13c7 	bfi	r3, r0, #7, #1
 80012da:	f884 30a9 	strb.w	r3, [r4, #169]	@ 0xa9
 80012de:	2009      	movs	r0, #9
 80012e0:	f005 f82a 	bl	8006338 <GetF7Value>
 80012e4:	f3c0 0047 	ubfx	r0, r0, #1, #8
 80012e8:	f884 00a8 	strb.w	r0, [r4, #168]	@ 0xa8
	CanTx_SigSet_0x376_IC_LifeTimeAvgFuelConsRate(GetF7Value(IC_LifeTimeAvgFuelConsRate));
 80012ec:	2008      	movs	r0, #8
 80012ee:	f005 f823 	bl	8006338 <GetF7Value>
 80012f2:	f894 30aa 	ldrb.w	r3, [r4, #170]	@ 0xaa
 80012f6:	f360 1387 	bfi	r3, r0, #6, #2
 80012fa:	f884 30aa 	strb.w	r3, [r4, #170]	@ 0xaa
 80012fe:	2008      	movs	r0, #8
 8001300:	f005 f81a 	bl	8006338 <GetF7Value>
 8001304:	f3c0 0086 	ubfx	r0, r0, #2, #7
 8001308:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 800130c:	f360 0306 	bfi	r3, r0, #0, #7
 8001310:	f884 30a9 	strb.w	r3, [r4, #169]	@ 0xa9
	//F8
	CanTx_SigSet_0x365_TPMS_SystemStatus(GetF8Value(TPMS_SystemStatus));
 8001314:	2000      	movs	r0, #0
 8001316:	f005 f825 	bl	8006364 <GetF8Value>
 800131a:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 800131e:	f360 0301 	bfi	r3, r0, #0, #2
 8001322:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
	CanTx_SigSet_0x365_TPMS_TireID(GetF8Value(TPMS_TireID));
 8001326:	2001      	movs	r0, #1
 8001328:	f005 f81c 	bl	8006364 <GetF8Value>
 800132c:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8001330:	f360 0383 	bfi	r3, r0, #2, #2
 8001334:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
    CanTx_SigSet_0x365_TPMS_SensorLost(GetF8Value(TPMS_SensorLost));
 8001338:	2002      	movs	r0, #2
 800133a:	f005 f813 	bl	8006364 <GetF8Value>
 800133e:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8001342:	f360 1304 	bfi	r3, r0, #4, #1
 8001346:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
    CanTx_SigSet_0x365_TPMS_TireLeakage(GetF8Value(TPMS_TireLeakage));
 800134a:	2003      	movs	r0, #3
 800134c:	f005 f80a 	bl	8006364 <GetF8Value>
 8001350:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8001354:	f360 1345 	bfi	r3, r0, #5, #1
 8001358:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
	CanTx_SigSet_0x365_TPMS_LearningStatus(GetF8Value(TPMS_LearningStatus));
 800135c:	2004      	movs	r0, #4
 800135e:	f005 f801 	bl	8006364 <GetF8Value>
 8001362:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8001366:	f360 1387 	bfi	r3, r0, #6, #2
 800136a:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
	CanTx_SigSet_0x365_TPMS_TirePressureStatus(GetF8Value(TPMS_TirePressureStatus));
 800136e:	2005      	movs	r0, #5
 8001370:	f004 fff8 	bl	8006364 <GetF8Value>
 8001374:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 8001378:	f360 1305 	bfi	r3, r0, #4, #2
 800137c:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
	CanTx_SigSet_0x365_TPMS_TirePressure(GetF8Value(TPMS_TirePressure));
 8001380:	2006      	movs	r0, #6
 8001382:	f004 ffef 	bl	8006364 <GetF8Value>
 8001386:	f884 009a 	strb.w	r0, [r4, #154]	@ 0x9a
	//F9
	CanTx_SigSet_0x3A7_BCM_1_FrontLeftDoorSts(GetF9Value(BCM_1_FrontLeftDoorSts));
 800138a:	2000      	movs	r0, #0
 800138c:	f004 fffc 	bl	8006388 <GetF9Value>
 8001390:	f894 312a 	ldrb.w	r3, [r4, #298]	@ 0x12a
 8001394:	f360 1345 	bfi	r3, r0, #5, #1
 8001398:	f884 312a 	strb.w	r3, [r4, #298]	@ 0x12a
	CanTx_SigSet_0x3A7_BCM_1_FrontRightDoorSts(GetF9Value(BCM_1_FrontRightDoorSts));
 800139c:	2001      	movs	r0, #1
 800139e:	f004 fff3 	bl	8006388 <GetF9Value>
 80013a2:	f894 312a 	ldrb.w	r3, [r4, #298]	@ 0x12a
 80013a6:	f360 1386 	bfi	r3, r0, #6, #1
 80013aa:	f884 312a 	strb.w	r3, [r4, #298]	@ 0x12a
    CanTx_SigSet_0x3A7_BCM_1_RearLeftDoorSts(GetF9Value(BCM_1_RearLeftDoorSts));
 80013ae:	2002      	movs	r0, #2
 80013b0:	f004 ffea 	bl	8006388 <GetF9Value>
 80013b4:	f894 312a 	ldrb.w	r3, [r4, #298]	@ 0x12a
 80013b8:	f360 13c7 	bfi	r3, r0, #7, #1
 80013bc:	f884 312a 	strb.w	r3, [r4, #298]	@ 0x12a
	CanTx_SigSet_0x3A7_BCM_1_RearRightDoorSts(GetF9Value(BCM_1_RearRightDoorSts));
 80013c0:	2003      	movs	r0, #3
 80013c2:	f004 ffe1 	bl	8006388 <GetF9Value>
 80013c6:	f894 312b 	ldrb.w	r3, [r4, #299]	@ 0x12b
 80013ca:	f360 0300 	bfi	r3, r0, #0, #1
 80013ce:	f884 312b 	strb.w	r3, [r4, #299]	@ 0x12b
	CanTx_SigSet_0x3A7_BCM_1_TailGateOpenSts(GetF9Value(BCM_1_TailGateOpenSts));
 80013d2:	2004      	movs	r0, #4
 80013d4:	f004 ffd8 	bl	8006388 <GetF9Value>
 80013d8:	f894 312b 	ldrb.w	r3, [r4, #299]	@ 0x12b
 80013dc:	f360 0341 	bfi	r3, r0, #1, #1
 80013e0:	f884 312b 	strb.w	r3, [r4, #299]	@ 0x12b
    CanTx_SigSet_0x3A7_BCM_1_HoodSts(GetF9Value(BCM_1_HoodSts));
 80013e4:	2005      	movs	r0, #5
 80013e6:	f004 ffcf 	bl	8006388 <GetF9Value>
 80013ea:	f894 312c 	ldrb.w	r3, [r4, #300]	@ 0x12c
 80013ee:	f360 0300 	bfi	r3, r0, #0, #1
 80013f2:	f884 312c 	strb.w	r3, [r4, #300]	@ 0x12c
    CanTx_SigSet_0x3A7_BCM_1_Timeout_Flag(GetF9Value(BCM_1_Timeout_Flag));
 80013f6:	2006      	movs	r0, #6
 80013f8:	f004 ffc6 	bl	8006388 <GetF9Value>
 80013fc:	f894 312f 	ldrb.w	r3, [r4, #303]	@ 0x12f
 8001400:	f360 0300 	bfi	r3, r0, #0, #1
 8001404:	f884 312f 	strb.w	r3, [r4, #303]	@ 0x12f
    //F10
    CanTx_SigSet_0x155_TCU_3_TargetGearValid(GetF10Value(TCU_3_TargetGearValid));
 8001408:	2001      	movs	r0, #1
 800140a:	f004 ffc7 	bl	800639c <GetF10Value>
 800140e:	f894 3113 	ldrb.w	r3, [r4, #275]	@ 0x113
 8001412:	f360 1386 	bfi	r3, r0, #6, #1
 8001416:	f884 3113 	strb.w	r3, [r4, #275]	@ 0x113
	CanTx_SigSet_0x155_TCU_3_TargetGear(GetF10Value(TCU_3_TargetGear));
 800141a:	2000      	movs	r0, #0
 800141c:	f004 ffbe 	bl	800639c <GetF10Value>
 8001420:	f894 3115 	ldrb.w	r3, [r4, #277]	@ 0x115
 8001424:	f360 1307 	bfi	r3, r0, #4, #4
 8001428:	f884 3115 	strb.w	r3, [r4, #277]	@ 0x115
	CanTx_SigSet_0x150_TCU_1_GearShiftPositionValid(GetF10Value(TCU_1_GearShiftPositionValid));
 800142c:	2003      	movs	r0, #3
 800142e:	f004 ffb5 	bl	800639c <GetF10Value>
 8001432:	f894 310c 	ldrb.w	r3, [r4, #268]	@ 0x10c
 8001436:	f360 0300 	bfi	r3, r0, #0, #1
 800143a:	f884 310c 	strb.w	r3, [r4, #268]	@ 0x10c
	CanTx_SigSet_0x150_TCU_1_GearShiftPosition(GetF10Value(TCU_1_GearShiftPosition));
 800143e:	2002      	movs	r0, #2
 8001440:	f004 ffac 	bl	800639c <GetF10Value>
 8001444:	f894 310d 	ldrb.w	r3, [r4, #269]	@ 0x10d
 8001448:	f360 1307 	bfi	r3, r0, #4, #4
 800144c:	f884 310d 	strb.w	r3, [r4, #269]	@ 0x10d
	CanTx_SigSet_0x155_TCU_3_Timeout_Flag1(GetF10Value(TCU_3_Timeout_Flag1));
 8001450:	2005      	movs	r0, #5
 8001452:	f004 ffa3 	bl	800639c <GetF10Value>
 8001456:	f894 3117 	ldrb.w	r3, [r4, #279]	@ 0x117
 800145a:	f360 0382 	bfi	r3, r0, #2, #1
 800145e:	f884 3117 	strb.w	r3, [r4, #279]	@ 0x117
	CanTx_SigSet_0x150_TCU_1_Timeout_Flag(GetF10Value(TCU_1_Timeout_Flag));
 8001462:	2004      	movs	r0, #4
 8001464:	f004 ff9a 	bl	800639c <GetF10Value>
 8001468:	f894 310f 	ldrb.w	r3, [r4, #271]	@ 0x10f
 800146c:	f360 0382 	bfi	r3, r0, #2, #1
 8001470:	f884 310f 	strb.w	r3, [r4, #271]	@ 0x10f
	//F11
	CanTx_SigSet_0x255_EDL_1_RearDiffLockGreenLamp(GetF11Value(EDL_1_RearDiffLockGreenLamp));
 8001474:	2000      	movs	r0, #0
 8001476:	f004 ff9b 	bl	80063b0 <GetF11Value>
 800147a:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 800147e:	f360 0301 	bfi	r3, r0, #0, #2
 8001482:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
	CanTx_SigSet_0x255_EDL_1_RearDiffLockYellowLamp(GetF11Value(EDL_1_RearDiffLockYellowLamp));
 8001486:	2001      	movs	r0, #1
 8001488:	f004 ff92 	bl	80063b0 <GetF11Value>
 800148c:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8001490:	f360 0383 	bfi	r3, r0, #2, #2
 8001494:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
	CanTx_SigSet_0x255_EDL_1_FrontDiffLockGreenLamp(GetF11Value(EDL_1_FrontDiffLockGreenLamp));
 8001498:	2002      	movs	r0, #2
 800149a:	f004 ff89 	bl	80063b0 <GetF11Value>
 800149e:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 80014a2:	f360 1305 	bfi	r3, r0, #4, #2
 80014a6:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
	CanTx_SigSet_0x255_EDL_1_FrontDiffLockYellowLamp(GetF11Value(EDL_1_FrontDiffLockYellowLamp));
 80014aa:	2003      	movs	r0, #3
 80014ac:	f004 ff80 	bl	80063b0 <GetF11Value>
 80014b0:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 80014b4:	f360 1387 	bfi	r3, r0, #6, #2
 80014b8:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
	CanTx_SigSet_0x255_EDL_1_Timeout_Flag(GetF11Value(EDL_1_Timeout_Flag));
 80014bc:	2004      	movs	r0, #4
 80014be:	f004 ff77 	bl	80063b0 <GetF11Value>
 80014c2:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 80014c6:	f360 0341 	bfi	r3, r0, #1, #1
 80014ca:	f884 3027 	strb.w	r3, [r4, #39]	@ 0x27
	//F12
	CanTx_SigSet_0x3AC_AC_2_OutsideTemperatureValid(GetF12Value(AC_2_OutsideTemperatureValid));
 80014ce:	2000      	movs	r0, #0
 80014d0:	f004 ff78 	bl	80063c4 <GetF12Value>
 80014d4:	f894 30bd 	ldrb.w	r3, [r4, #189]	@ 0xbd
 80014d8:	f360 0300 	bfi	r3, r0, #0, #1
 80014dc:	f884 30bd 	strb.w	r3, [r4, #189]	@ 0xbd
	CanTx_SigSet_0x3AC_AC_2_OutsideTemperature(GetF12Value(AC_2_OutsideTemperature));
 80014e0:	2001      	movs	r0, #1
 80014e2:	f004 ff6f 	bl	80063c4 <GetF12Value>
 80014e6:	f884 00bc 	strb.w	r0, [r4, #188]	@ 0xbc
	CanTx_SigSet_0x3AC_AC_2_Timeout_Flag(GetF12Value(AC_2_Timeout_Flag));
 80014ea:	2002      	movs	r0, #2
 80014ec:	f004 ff6a 	bl	80063c4 <GetF12Value>
 80014f0:	f894 30bf 	ldrb.w	r3, [r4, #191]	@ 0xbf
 80014f4:	f360 0341 	bfi	r3, r0, #1, #1
 80014f8:	f884 30bf 	strb.w	r3, [r4, #191]	@ 0xbf
	//F13
    CanTx_SigSet_0x304_FCM_EgoLeLineID(GetF13Value(FCM_EgoLeLineID));
 80014fc:	2000      	movs	r0, #0
 80014fe:	f004 ff6b 	bl	80063d8 <GetF13Value>
 8001502:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8001506:	f360 13c7 	bfi	r3, r0, #7, #1
 800150a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    CanTx_SigSet_0x304_FCM_EgoLeLineColor(GetF13Value(FCM_EgoLeLineColor));
 800150e:	2001      	movs	r0, #1
 8001510:	f004 ff62 	bl	80063d8 <GetF13Value>
 8001514:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8001518:	f360 1346 	bfi	r3, r0, #5, #2
 800151c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    CanTx_SigSet_0x304_FCM_EgoLeLineTyp(GetF13Value(FCM_EgoLeLineTyp));
 8001520:	2002      	movs	r0, #2
 8001522:	f004 ff59 	bl	80063d8 <GetF13Value>
 8001526:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800152a:	f360 03c4 	bfi	r3, r0, #3, #2
 800152e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    CanTx_SigSet_0x304_FCM_EgoLeLineHozlDst(GetF13Value(FCM_EgoLeLineHozlDst));
 8001532:	2003      	movs	r0, #3
 8001534:	e002      	b.n	800153c <CanGetMsgSignal+0x400>
 8001536:	bf00      	nop
 8001538:	20000948 	.word	0x20000948
 800153c:	f004 ff4c 	bl	80063d8 <GetF13Value>
 8001540:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8001544:	f360 0387 	bfi	r3, r0, #2, #6
 8001548:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
 800154c:	2003      	movs	r0, #3
 800154e:	f004 ff43 	bl	80063d8 <GetF13Value>
 8001552:	f3c0 1082 	ubfx	r0, r0, #6, #3
 8001556:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800155a:	f360 0302 	bfi	r3, r0, #0, #3
 800155e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    CanTx_SigSet_0x304_FCM_EgoLeLineCrvt(GetF13Value(FCM_EgoLeLineCrvt));
 8001562:	2004      	movs	r0, #4
 8001564:	f004 ff38 	bl	80063d8 <GetF13Value>
 8001568:	f884 0052 	strb.w	r0, [r4, #82]	@ 0x52
 800156c:	2004      	movs	r0, #4
 800156e:	f004 ff33 	bl	80063d8 <GetF13Value>
 8001572:	f3c0 2001 	ubfx	r0, r0, #8, #2
 8001576:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800157a:	f360 0301 	bfi	r3, r0, #0, #2
 800157e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
    CanTx_SigSet_0x304_FCM_EgoRiLineID(GetF13Value(FCM_EgoRiLineID));
 8001582:	2005      	movs	r0, #5
 8001584:	f004 ff28 	bl	80063d8 <GetF13Value>
 8001588:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 800158c:	f360 13c7 	bfi	r3, r0, #7, #1
 8001590:	f884 3053 	strb.w	r3, [r4, #83]	@ 0x53
    CanTx_SigSet_0x304_FCM_EgoRiLineColor(GetF13Value(FCM_EgoRiLineColor));
 8001594:	2006      	movs	r0, #6
 8001596:	f004 ff1f 	bl	80063d8 <GetF13Value>
 800159a:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 800159e:	f360 1346 	bfi	r3, r0, #5, #2
 80015a2:	f884 3053 	strb.w	r3, [r4, #83]	@ 0x53
    CanTx_SigSet_0x304_FCM_EgoRiLineTyp(GetF13Value(FCM_EgoRiLineTyp));
 80015a6:	2007      	movs	r0, #7
 80015a8:	f004 ff16 	bl	80063d8 <GetF13Value>
 80015ac:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 80015b0:	f360 03c4 	bfi	r3, r0, #3, #2
 80015b4:	f884 3053 	strb.w	r3, [r4, #83]	@ 0x53
    CanTx_SigSet_0x304_FCM_EgoRiLineHozlDst(GetF13Value(FCM_EgoRiLineHozlDst));
 80015b8:	2008      	movs	r0, #8
 80015ba:	f004 ff0d 	bl	80063d8 <GetF13Value>
 80015be:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80015c2:	f360 0387 	bfi	r3, r0, #2, #6
 80015c6:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80015ca:	2008      	movs	r0, #8
 80015cc:	f004 ff04 	bl	80063d8 <GetF13Value>
 80015d0:	f3c0 1082 	ubfx	r0, r0, #6, #3
 80015d4:	f894 3053 	ldrb.w	r3, [r4, #83]	@ 0x53
 80015d8:	f360 0302 	bfi	r3, r0, #0, #3
 80015dc:	f884 3053 	strb.w	r3, [r4, #83]	@ 0x53
    CanTx_SigSet_0x304_FCM_EgoRiLineCrvt(GetF13Value(FCM_EgoRiLineCrvt));
 80015e0:	2009      	movs	r0, #9
 80015e2:	f004 fef9 	bl	80063d8 <GetF13Value>
 80015e6:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80015ea:	2009      	movs	r0, #9
 80015ec:	f004 fef4 	bl	80063d8 <GetF13Value>
 80015f0:	f3c0 2001 	ubfx	r0, r0, #8, #2
 80015f4:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80015f8:	f360 0301 	bfi	r3, r0, #0, #2
 80015fc:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
    CanTx_SigSet_0x304_FCM_5_RollingCounter(GetF13Value(FCM_5_RollingCounter));
 8001600:	200a      	movs	r0, #10
 8001602:	f004 fee9 	bl	80063d8 <GetF13Value>
 8001606:	f894 3056 	ldrb.w	r3, [r4, #86]	@ 0x56
 800160a:	f360 0303 	bfi	r3, r0, #0, #4
 800160e:	f884 3056 	strb.w	r3, [r4, #86]	@ 0x56
    CanTx_SigSet_0x304_FCM_5_Checksum(GetF13Value(FCM_5_Checksum));
 8001612:	200b      	movs	r0, #11
 8001614:	f004 fee0 	bl	80063d8 <GetF13Value>
 8001618:	f884 0057 	strb.w	r0, [r4, #87]	@ 0x57

    CanTx_SigSet_0x305_FCM_NeborLeLineID(GetF13Value(FCM_NeborLeLineID));
 800161c:	200d      	movs	r0, #13
 800161e:	f004 fedb 	bl	80063d8 <GetF13Value>
 8001622:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8001626:	f360 13c7 	bfi	r3, r0, #7, #1
 800162a:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
    CanTx_SigSet_0x305_FCM_NeborLeLineColor(GetF13Value(FCM_NeborLeLineColor));
 800162e:	200e      	movs	r0, #14
 8001630:	f004 fed2 	bl	80063d8 <GetF13Value>
 8001634:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8001638:	f360 1346 	bfi	r3, r0, #5, #2
 800163c:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
    CanTx_SigSet_0x305_FCM_NeborLeLineTyp(GetF13Value(FCM_NeborLeLineTyp));
 8001640:	200f      	movs	r0, #15
 8001642:	f004 fec9 	bl	80063d8 <GetF13Value>
 8001646:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 800164a:	f360 03c4 	bfi	r3, r0, #3, #2
 800164e:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
    CanTx_SigSet_0x305_FCM_NeborLeLineHozlDst(GetF13Value(FCM_NeborLeLineHozlDst));
 8001652:	2010      	movs	r0, #16
 8001654:	f004 fec0 	bl	80063d8 <GetF13Value>
 8001658:	f894 3059 	ldrb.w	r3, [r4, #89]	@ 0x59
 800165c:	f360 0387 	bfi	r3, r0, #2, #6
 8001660:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8001664:	2010      	movs	r0, #16
 8001666:	f004 feb7 	bl	80063d8 <GetF13Value>
 800166a:	f3c0 1082 	ubfx	r0, r0, #6, #3
 800166e:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8001672:	f360 0302 	bfi	r3, r0, #0, #3
 8001676:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
    CanTx_SigSet_0x305_FCM_NeborLeLineCrvt(GetF13Value(FCM_NeborLeLineCrvt));
 800167a:	2011      	movs	r0, #17
 800167c:	f004 feac 	bl	80063d8 <GetF13Value>
 8001680:	f884 005a 	strb.w	r0, [r4, #90]	@ 0x5a
 8001684:	2011      	movs	r0, #17
 8001686:	f004 fea7 	bl	80063d8 <GetF13Value>
 800168a:	f3c0 2001 	ubfx	r0, r0, #8, #2
 800168e:	f894 3059 	ldrb.w	r3, [r4, #89]	@ 0x59
 8001692:	f360 0301 	bfi	r3, r0, #0, #2
 8001696:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
    CanTx_SigSet_0x305_FCM_NeborRiLineID(GetF13Value(FCM_NeborRiLineID));
 800169a:	2012      	movs	r0, #18
 800169c:	f004 fe9c 	bl	80063d8 <GetF13Value>
 80016a0:	f894 305b 	ldrb.w	r3, [r4, #91]	@ 0x5b
 80016a4:	f360 13c7 	bfi	r3, r0, #7, #1
 80016a8:	f884 305b 	strb.w	r3, [r4, #91]	@ 0x5b
    CanTx_SigSet_0x305_FCM_NeborRiLineColor(GetF13Value(FCM_NeborRiLineColor));
 80016ac:	2013      	movs	r0, #19
 80016ae:	f004 fe93 	bl	80063d8 <GetF13Value>
 80016b2:	f894 305b 	ldrb.w	r3, [r4, #91]	@ 0x5b
 80016b6:	f360 1346 	bfi	r3, r0, #5, #2
 80016ba:	f884 305b 	strb.w	r3, [r4, #91]	@ 0x5b
    CanTx_SigSet_0x305_FCM_NeborRiLineTyp(GetF13Value(FCM_NeborRiLineTyp));
 80016be:	2014      	movs	r0, #20
 80016c0:	f004 fe8a 	bl	80063d8 <GetF13Value>
 80016c4:	f894 305b 	ldrb.w	r3, [r4, #91]	@ 0x5b
 80016c8:	f360 03c4 	bfi	r3, r0, #3, #2
 80016cc:	f884 305b 	strb.w	r3, [r4, #91]	@ 0x5b
    CanTx_SigSet_0x305_FCM_NeborRiLineHozlDst(GetF13Value(FCM_NeborRiLineHozlDst));
 80016d0:	2015      	movs	r0, #21
 80016d2:	f004 fe81 	bl	80063d8 <GetF13Value>
 80016d6:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80016da:	f360 0387 	bfi	r3, r0, #2, #6
 80016de:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80016e2:	2015      	movs	r0, #21
 80016e4:	f004 fe78 	bl	80063d8 <GetF13Value>
 80016e8:	f3c0 1082 	ubfx	r0, r0, #6, #3
 80016ec:	f894 305b 	ldrb.w	r3, [r4, #91]	@ 0x5b
 80016f0:	f360 0302 	bfi	r3, r0, #0, #3
 80016f4:	f884 305b 	strb.w	r3, [r4, #91]	@ 0x5b
    CanTx_SigSet_0x305_FCM_NeborRiLineCrvt(GetF13Value(FCM_NeborRiLineCrvt));
 80016f8:	2016      	movs	r0, #22
 80016fa:	f004 fe6d 	bl	80063d8 <GetF13Value>
 80016fe:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
 8001702:	2016      	movs	r0, #22
 8001704:	f004 fe68 	bl	80063d8 <GetF13Value>
 8001708:	f3c0 2001 	ubfx	r0, r0, #8, #2
 800170c:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8001710:	f360 0301 	bfi	r3, r0, #0, #2
 8001714:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    CanTx_SigSet_0x305_FCM_6_RollingCounter(GetF13Value(FCM_6_RollingCounter));
 8001718:	2017      	movs	r0, #23
 800171a:	f004 fe5d 	bl	80063d8 <GetF13Value>
 800171e:	f894 305e 	ldrb.w	r3, [r4, #94]	@ 0x5e
 8001722:	f360 0303 	bfi	r3, r0, #0, #4
 8001726:	f884 305e 	strb.w	r3, [r4, #94]	@ 0x5e
    CanTx_SigSet_0x305_FCM_6_Checksum(GetF13Value(FCM_6_Checksum));
 800172a:	2018      	movs	r0, #24
 800172c:	f004 fe54 	bl	80063d8 <GetF13Value>
 8001730:	f884 005f 	strb.w	r0, [r4, #95]	@ 0x5f

    CanTx_SigSet_0x306_FCM_ACCObjID(GetF13Value(FCM_ACCObjID));
 8001734:	2019      	movs	r0, #25
 8001736:	f004 fe4f 	bl	80063d8 <GetF13Value>
 800173a:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800173e:	f360 13c7 	bfi	r3, r0, #7, #1
 8001742:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    CanTx_SigSet_0x306_FCM_ACCObjTyp(GetF13Value(FCM_ACCObjTyp));
 8001746:	201a      	movs	r0, #26
 8001748:	f004 fe46 	bl	80063d8 <GetF13Value>
 800174c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8001750:	f360 1306 	bfi	r3, r0, #4, #3
 8001754:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    CanTx_SigSet_0x306_FCM_ACC_TargetVehicleSubType(GetF13Value(FCM_ACC_TargetVehicleSubType));
 8001758:	201b      	movs	r0, #27
 800175a:	f004 fe3d 	bl	80063d8 <GetF13Value>
 800175e:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8001762:	f360 0343 	bfi	r3, r0, #1, #3
 8001766:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    CanTx_SigSet_0x306_FCM_dxTarObjcolor(GetF13Value(FCM_dxTarObjcolor));
 800176a:	201c      	movs	r0, #28
 800176c:	f004 fe34 	bl	80063d8 <GetF13Value>
 8001770:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8001774:	f360 1347 	bfi	r3, r0, #5, #3
 8001778:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
    CanTx_SigSet_0x306_FCM_ACCObjLgtDstX(GetF13Value(FCM_ACCObjLgtDstX));
 800177c:	201d      	movs	r0, #29
 800177e:	f004 fe2b 	bl	80063d8 <GetF13Value>
 8001782:	f894 3062 	ldrb.w	r3, [r4, #98]	@ 0x62
 8001786:	f360 1347 	bfi	r3, r0, #5, #3
 800178a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800178e:	201d      	movs	r0, #29
 8001790:	f004 fe22 	bl	80063d8 <GetF13Value>
 8001794:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8001798:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800179c:	f360 0304 	bfi	r3, r0, #0, #5
 80017a0:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
    CanTx_SigSet_0x306_FCM_ACCObjHozDstY(GetF13Value(FCM_ACCObjHozDstY));
 80017a4:	201e      	movs	r0, #30
 80017a6:	f004 fe17 	bl	80063d8 <GetF13Value>
 80017aa:	f894 3063 	ldrb.w	r3, [r4, #99]	@ 0x63
 80017ae:	f360 03c7 	bfi	r3, r0, #3, #5
 80017b2:	f884 3063 	strb.w	r3, [r4, #99]	@ 0x63
 80017b6:	201e      	movs	r0, #30
 80017b8:	f004 fe0e 	bl	80063d8 <GetF13Value>
 80017bc:	f3c0 1044 	ubfx	r0, r0, #5, #5
 80017c0:	f894 3062 	ldrb.w	r3, [r4, #98]	@ 0x62
 80017c4:	f360 0304 	bfi	r3, r0, #0, #5
 80017c8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
    CanTx_SigSet_0x306_FCM_FrntFarObjID(GetF13Value(FCM_FrntFarObjID));
 80017cc:	201f      	movs	r0, #31
 80017ce:	f004 fe03 	bl	80063d8 <GetF13Value>
 80017d2:	f894 3063 	ldrb.w	r3, [r4, #99]	@ 0x63
 80017d6:	f360 0382 	bfi	r3, r0, #2, #1
 80017da:	f884 3063 	strb.w	r3, [r4, #99]	@ 0x63
    CanTx_SigSet_0x306_FCM_FrntFarObjTyp(GetF13Value(FCM_FrntFarObjTyp));
 80017de:	2020      	movs	r0, #32
 80017e0:	f004 fdfa 	bl	80063d8 <GetF13Value>
 80017e4:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 80017e8:	f360 1387 	bfi	r3, r0, #6, #2
 80017ec:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 80017f0:	2020      	movs	r0, #32
 80017f2:	f004 fdf1 	bl	80063d8 <GetF13Value>
 80017f6:	f3c0 0081 	ubfx	r0, r0, #2, #2
 80017fa:	f894 3063 	ldrb.w	r3, [r4, #99]	@ 0x63
 80017fe:	f360 0301 	bfi	r3, r0, #0, #2
 8001802:	f884 3063 	strb.w	r3, [r4, #99]	@ 0x63
    CanTx_SigSet_0x306_FCM_FrntFarObjLgtDstX(GetF13Value(FCM_FrntFarObjLgtDstX));
 8001806:	2021      	movs	r0, #33	@ 0x21
 8001808:	f004 fde6 	bl	80063d8 <GetF13Value>
 800180c:	f894 3065 	ldrb.w	r3, [r4, #101]	@ 0x65
 8001810:	f360 1387 	bfi	r3, r0, #6, #2
 8001814:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
 8001818:	2021      	movs	r0, #33	@ 0x21
 800181a:	f004 fddd 	bl	80063d8 <GetF13Value>
 800181e:	f3c0 0085 	ubfx	r0, r0, #2, #6
 8001822:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 8001826:	f360 0305 	bfi	r3, r0, #0, #6
 800182a:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
    CanTx_SigSet_0x306_FCM_FrntFarObjHozDstY(GetF13Value(FCM_FrntFarObjHozDstY));
 800182e:	2022      	movs	r0, #34	@ 0x22
 8001830:	f004 fdd2 	bl	80063d8 <GetF13Value>
 8001834:	f894 3066 	ldrb.w	r3, [r4, #102]	@ 0x66
 8001838:	f360 1307 	bfi	r3, r0, #4, #4
 800183c:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8001840:	2022      	movs	r0, #34	@ 0x22
 8001842:	f004 fdc9 	bl	80063d8 <GetF13Value>
 8001846:	f3c0 1005 	ubfx	r0, r0, #4, #6
 800184a:	f894 3065 	ldrb.w	r3, [r4, #101]	@ 0x65
 800184e:	f360 0305 	bfi	r3, r0, #0, #6
 8001852:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
    CanTx_SigSet_0x306_FCM_7_RollingCounter(GetF13Value(FCM_7_RollingCounter));
 8001856:	2023      	movs	r0, #35	@ 0x23
 8001858:	f004 fdbe 	bl	80063d8 <GetF13Value>
 800185c:	f894 3066 	ldrb.w	r3, [r4, #102]	@ 0x66
 8001860:	f360 0303 	bfi	r3, r0, #0, #4
 8001864:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
    CanTx_SigSet_0x306_FCM_7_Checksum(GetF13Value(FCM_7_Checksum));
 8001868:	2024      	movs	r0, #36	@ 0x24
 800186a:	f004 fdb5 	bl	80063d8 <GetF13Value>
 800186e:	f884 0067 	strb.w	r0, [r4, #103]	@ 0x67

    CanTx_SigSet_0x307_FCM_RiObjID(GetF13Value(FCM_RiObjID));
 8001872:	2025      	movs	r0, #37	@ 0x25
 8001874:	f004 fdb0 	bl	80063d8 <GetF13Value>
 8001878:	f894 3068 	ldrb.w	r3, [r4, #104]	@ 0x68
 800187c:	f360 13c7 	bfi	r3, r0, #7, #1
 8001880:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
    CanTx_SigSet_0x307_FCM_LeObjID(GetF13Value(FCM_LeObjID));
 8001884:	2026      	movs	r0, #38	@ 0x26
 8001886:	f004 fda7 	bl	80063d8 <GetF13Value>
 800188a:	f894 3068 	ldrb.w	r3, [r4, #104]	@ 0x68
 800188e:	f360 1386 	bfi	r3, r0, #6, #1
 8001892:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
    CanTx_SigSet_0x307_FCM_LeObjTyp(GetF13Value(FCM_LeObjTyp));
 8001896:	2027      	movs	r0, #39	@ 0x27
 8001898:	f004 fd9e 	bl	80063d8 <GetF13Value>
 800189c:	f894 3068 	ldrb.w	r3, [r4, #104]	@ 0x68
 80018a0:	f360 03c5 	bfi	r3, r0, #3, #3
 80018a4:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
    CanTx_SigSet_0x307_FCM_ACC_LeftTargetVehicleSubType(GetF13Value(FCM_ACC_LeftTargetVehicleSubType));
 80018a8:	2028      	movs	r0, #40	@ 0x28
 80018aa:	f004 fd95 	bl	80063d8 <GetF13Value>
 80018ae:	f894 3068 	ldrb.w	r3, [r4, #104]	@ 0x68
 80018b2:	f360 0302 	bfi	r3, r0, #0, #3
 80018b6:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
    CanTx_SigSet_0x307_FCM_LeObjLgtDstX(GetF13Value(FCM_LeObjLgtDstX));
 80018ba:	2029      	movs	r0, #41	@ 0x29
 80018bc:	f004 fd8c 	bl	80063d8 <GetF13Value>
 80018c0:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
    CanTx_SigSet_0x307_FCM_LeObjHozDstY(GetF13Value(FCM_LeObjHozDstY));
 80018c4:	202a      	movs	r0, #42	@ 0x2a
 80018c6:	f004 fd87 	bl	80063d8 <GetF13Value>
 80018ca:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 80018ce:	f360 1387 	bfi	r3, r0, #6, #2
 80018d2:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80018d6:	202a      	movs	r0, #42	@ 0x2a
 80018d8:	f004 fd7e 	bl	80063d8 <GetF13Value>
 80018dc:	f3c0 0087 	ubfx	r0, r0, #2, #8
 80018e0:	f884 006a 	strb.w	r0, [r4, #106]	@ 0x6a
    CanTx_SigSet_0x307_FCM_RiObjTyp(GetF13Value(FCM_RiObjTyp));
 80018e4:	202b      	movs	r0, #43	@ 0x2b
 80018e6:	f004 fd77 	bl	80063d8 <GetF13Value>
 80018ea:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 80018ee:	f360 03c5 	bfi	r3, r0, #3, #3
 80018f2:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
    CanTx_SigSet_0x307_FCM_ACC_RightTargetVehicleSubTyp(GetF13Value(FCM_ACC_RightTargetVehicleSubTyp));
 80018f6:	202c      	movs	r0, #44	@ 0x2c
 80018f8:	f004 fd6e 	bl	80063d8 <GetF13Value>
 80018fc:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8001900:	f360 0302 	bfi	r3, r0, #0, #3
 8001904:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
    CanTx_SigSet_0x307_FCM_RiObjLgtDstX(GetF13Value(FCM_RiObjLgtDstX));
 8001908:	202d      	movs	r0, #45	@ 0x2d
 800190a:	f004 fd65 	bl	80063d8 <GetF13Value>
 800190e:	f884 006c 	strb.w	r0, [r4, #108]	@ 0x6c
    CanTx_SigSet_0x307_FCM_RiObjHozDstY(GetF13Value(FCM_RiObjHozDstY));
 8001912:	202e      	movs	r0, #46	@ 0x2e
 8001914:	f004 fd60 	bl	80063d8 <GetF13Value>
 8001918:	f894 306e 	ldrb.w	r3, [r4, #110]	@ 0x6e
 800191c:	f360 1387 	bfi	r3, r0, #6, #2
 8001920:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8001924:	202e      	movs	r0, #46	@ 0x2e
 8001926:	f004 fd57 	bl	80063d8 <GetF13Value>
 800192a:	f3c0 0087 	ubfx	r0, r0, #2, #8
 800192e:	f884 006d 	strb.w	r0, [r4, #109]	@ 0x6d
    CanTx_SigSet_0x307_FCM_8_RollingCounter(GetF13Value(FCM_8_RollingCounter));
 8001932:	202f      	movs	r0, #47	@ 0x2f
 8001934:	f004 fd50 	bl	80063d8 <GetF13Value>
 8001938:	f894 306e 	ldrb.w	r3, [r4, #110]	@ 0x6e
 800193c:	f360 0303 	bfi	r3, r0, #0, #4
 8001940:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
    CanTx_SigSet_0x307_FCM_8_Checksum(GetF13Value(FCM_8_Checksum));
 8001944:	2030      	movs	r0, #48	@ 0x30
 8001946:	f004 fd47 	bl	80063d8 <GetF13Value>
 800194a:	f884 006f 	strb.w	r0, [r4, #111]	@ 0x6f
//    CanTx_SigSet_0x3C7_BCM_2_WindowPosFL(GetGW_BD_24Value(BCM_2_WindowPosFL));
//    CanTx_SigSet_0x3C7_BCM_2_WindowPosFR(GetGW_BD_24Value(BCM_2_WindowPosFR));
//    CanTx_SigSet_0x3C7_BCM_2_WindowPosRL(GetGW_BD_24Value(BCM_2_WindowPosRL));
//    CanTx_SigSet_0x3C7_BCM_2_WindowPosRR(GetGW_BD_24Value(BCM_2_WindowPosRR));
//    CanTx_SigSet_0x3C7_BCM_2_Timeout_Flag(GetGW_BD_24Value(BCM_2_Timeout_Flag));
}
 800194e:	bd10      	pop	{r4, pc}

08001950 <CanTransmitFunction>:

void CanTransmitFunction(void const *pvParameters)
{
 8001950:	b508      	push	{r3, lr}
	(void)pvParameters;
   // printf("CanTransmitFunction\r\n");
	for(;;)
	{
      CanGetMsgSignal();
 8001952:	f7ff fbf3 	bl	800113c <CanGetMsgSignal>
      CanCcl_TickCntHnadler();
 8001956:	f009 f937 	bl	800abc8 <CanCcl_TickCntHnadler>
		// CanDbc_TxHandler();
		vTaskDelay(pdMS_TO_TICKS(5));
 800195a:	2005      	movs	r0, #5
 800195c:	f008 fd5e 	bl	800a41c <vTaskDelay>
 8001960:	e7f7      	b.n	8001952 <CanTransmitFunction+0x2>
	...

08001964 <volencode_polling>:
	}

}

void volencode_polling(uint8_t key_number)
{
 8001964:	b538      	push	{r3, r4, r5, lr}
 8001966:	4604      	mov	r4, r0

	int VolADValueFliter;
	static uint8_t count[KEY_MAX] = {0};
	static uint8_t lastcount[KEY_MAX] = {0};

    VolADValueFliter = ADC_GetResValue(stKeyValue[key_number].channel);
 8001968:	4b23      	ldr	r3, [pc, #140]	@ (80019f8 <volencode_polling+0x94>)
 800196a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800196e:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 8001972:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8001976:	f7ff fb87 	bl	8001088 <ADC_GetResValue>

    if((stKeyValue[key_number].AdcValue < VolADValueFliter + VOL_ADVALUE_ERROR) && (stKeyValue[key_number].AdcValue > VolADValueFliter - VOL_ADVALUE_ERROR))
 800197a:	f100 0263 	add.w	r2, r0, #99	@ 0x63
 800197e:	886b      	ldrh	r3, [r5, #2]
 8001980:	429a      	cmp	r2, r3
 8001982:	db09      	blt.n	8001998 <volencode_polling+0x34>
 8001984:	3863      	subs	r0, #99	@ 0x63
 8001986:	4283      	cmp	r3, r0
 8001988:	db06      	blt.n	8001998 <volencode_polling+0x34>
    {
        stKeyValue[key_number].KeySts = PRESS;
 800198a:	2201      	movs	r2, #1
 800198c:	712a      	strb	r2, [r5, #4]
		count[key_number] += 1;
 800198e:	4a1b      	ldr	r2, [pc, #108]	@ (80019fc <volencode_polling+0x98>)
 8001990:	5d13      	ldrb	r3, [r2, r4]
 8001992:	3301      	adds	r3, #1
 8001994:	5513      	strb	r3, [r2, r4]
 8001996:	e00b      	b.n	80019b0 <volencode_polling+0x4c>
    }
    else
    {
        stKeyValue[key_number].KeySts = RELEASE;
 8001998:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800199c:	4b16      	ldr	r3, [pc, #88]	@ (80019f8 <volencode_polling+0x94>)
 800199e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80019a2:	2200      	movs	r2, #0
 80019a4:	711a      	strb	r2, [r3, #4]
		lastcount[key_number] = count[key_number];
 80019a6:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <volencode_polling+0x98>)
 80019a8:	5d18      	ldrb	r0, [r3, r4]
 80019aa:	4915      	ldr	r1, [pc, #84]	@ (8001a00 <volencode_polling+0x9c>)
 80019ac:	5508      	strb	r0, [r1, r4]
		count[key_number] = 0;
 80019ae:	551a      	strb	r2, [r3, r4]
    }

	if((lastcount[key_number] >= 2) && (lastcount[key_number] < 100))
 80019b0:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <volencode_polling+0x9c>)
 80019b2:	5d1b      	ldrb	r3, [r3, r4]
 80019b4:	3b02      	subs	r3, #2
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b61      	cmp	r3, #97	@ 0x61
 80019ba:	d80a      	bhi.n	80019d2 <volencode_polling+0x6e>
	{
		stKeyValue[key_number].KeySts = SHORT_PRESS;
 80019bc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80019c0:	4b0d      	ldr	r3, [pc, #52]	@ (80019f8 <volencode_polling+0x94>)
 80019c2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80019c6:	2202      	movs	r2, #2
 80019c8:	711a      	strb	r2, [r3, #4]
		lastcount[key_number] = 0;
 80019ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001a00 <volencode_polling+0x9c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	551a      	strb	r2, [r3, r4]
	else
	{
		lastcount[key_number] = 0;
	}

}
 80019d0:	bd38      	pop	{r3, r4, r5, pc}
	else if(count[key_number] >= 100)
 80019d2:	4b0a      	ldr	r3, [pc, #40]	@ (80019fc <volencode_polling+0x98>)
 80019d4:	5d1b      	ldrb	r3, [r3, r4]
 80019d6:	2b63      	cmp	r3, #99	@ 0x63
 80019d8:	d90a      	bls.n	80019f0 <volencode_polling+0x8c>
		stKeyValue[key_number].KeySts = LONG_PRESS;
 80019da:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <volencode_polling+0x94>)
 80019e0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80019e4:	2203      	movs	r2, #3
 80019e6:	711a      	strb	r2, [r3, #4]
		lastcount[key_number] = 0;
 80019e8:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <volencode_polling+0x9c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	551a      	strb	r2, [r3, r4]
 80019ee:	e7ef      	b.n	80019d0 <volencode_polling+0x6c>
		lastcount[key_number] = 0;
 80019f0:	4b03      	ldr	r3, [pc, #12]	@ (8001a00 <volencode_polling+0x9c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	551a      	strb	r2, [r3, r4]
}
 80019f6:	e7eb      	b.n	80019d0 <volencode_polling+0x6c>
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000a8c 	.word	0x20000a8c
 8001a00:	20000a80 	.word	0x20000a80

08001a04 <ShortPress>:

void ShortPress(uint8_t key)
{
 8001a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a06:	4604      	mov	r4, r0
	key_menu_cnt = GetMenuIndex();
 8001a08:	f000 fa68 	bl	8001edc <GetMenuIndex>
 8001a0c:	4d55      	ldr	r5, [pc, #340]	@ (8001b64 <ShortPress+0x160>)
 8001a0e:	7028      	strb	r0, [r5, #0]
    key_item_cnt  = GetItemIndex();
 8001a10:	f000 fa6a 	bl	8001ee8 <GetItemIndex>
 8001a14:	4e54      	ldr	r6, [pc, #336]	@ (8001b68 <ShortPress+0x164>)
 8001a16:	7030      	strb	r0, [r6, #0]

	uint8_t max_item = GetItemMAXItem(key_menu_cnt);
 8001a18:	7828      	ldrb	r0, [r5, #0]
 8001a1a:	f003 fc85 	bl	8005328 <GetItemMAXItem>
 8001a1e:	b2c7      	uxtb	r7, r0
	uint16_t max_value = GetItemMAXValue(key_menu_cnt, key_item_cnt);
 8001a20:	7831      	ldrb	r1, [r6, #0]
 8001a22:	7828      	ldrb	r0, [r5, #0]
 8001a24:	f003 fca0 	bl	8005368 <GetItemMAXValue>
 8001a28:	b285      	uxth	r5, r0
	static uint8_t last_key_value_cnt = 0;

	switch(key)
 8001a2a:	2c08      	cmp	r4, #8
 8001a2c:	d816      	bhi.n	8001a5c <ShortPress+0x58>
 8001a2e:	e8df f004 	tbb	[pc, r4]
 8001a32:	1a05      	.short	0x1a05
 8001a34:	58443b2f 	.word	0x58443b2f
 8001a38:	6c15      	.short	0x6c15
 8001a3a:	82          	.byte	0x82
 8001a3b:	00          	.byte	0x00
	{
		case PREVIOUS:
			if(key_menu_cnt == 0)
 8001a3c:	4b49      	ldr	r3, [pc, #292]	@ (8001b64 <ShortPress+0x160>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	b96b      	cbnz	r3, 8001a5e <ShortPress+0x5a>
			{
				key_menu_cnt = MENU_MAX-1;
 8001a42:	4b48      	ldr	r3, [pc, #288]	@ (8001b64 <ShortPress+0x160>)
 8001a44:	224d      	movs	r2, #77	@ 0x4d
 8001a46:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				key_menu_cnt--;
			}
      		key_item_cnt = 0;
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4b47      	ldr	r3, [pc, #284]	@ (8001b68 <ShortPress+0x164>)
 8001a4c:	7019      	strb	r1, [r3, #0]
			key_value_cnt  = GetItemValue(key_menu_cnt, key_item_cnt, 0);
 8001a4e:	460a      	mov	r2, r1
 8001a50:	4b44      	ldr	r3, [pc, #272]	@ (8001b64 <ShortPress+0x160>)
 8001a52:	7818      	ldrb	r0, [r3, #0]
 8001a54:	f003 fbd8 	bl	8005208 <GetItemValue>
 8001a58:	4b44      	ldr	r3, [pc, #272]	@ (8001b6c <ShortPress+0x168>)
 8001a5a:	8018      	strh	r0, [r3, #0]
            }
			break;
		default:
			break;
	}
}
 8001a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				key_menu_cnt--;
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	4a40      	ldr	r2, [pc, #256]	@ (8001b64 <ShortPress+0x160>)
 8001a62:	7013      	strb	r3, [r2, #0]
 8001a64:	e7f0      	b.n	8001a48 <ShortPress+0x44>
			key_menu_cnt++;
 8001a66:	4a3f      	ldr	r2, [pc, #252]	@ (8001b64 <ShortPress+0x160>)
 8001a68:	7813      	ldrb	r3, [r2, #0]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	7013      	strb	r3, [r2, #0]
			if(key_menu_cnt >= MENU_MAX)
 8001a70:	2b4d      	cmp	r3, #77	@ 0x4d
 8001a72:	d902      	bls.n	8001a7a <ShortPress+0x76>
				key_menu_cnt = 0;
 8001a74:	4613      	mov	r3, r2
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
			key_item_cnt = 0;
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b68 <ShortPress+0x164>)
 8001a7e:	7019      	strb	r1, [r3, #0]
			key_value_cnt  = GetItemValue(key_menu_cnt, key_item_cnt, 0);
 8001a80:	460a      	mov	r2, r1
 8001a82:	4b38      	ldr	r3, [pc, #224]	@ (8001b64 <ShortPress+0x160>)
 8001a84:	7818      	ldrb	r0, [r3, #0]
 8001a86:	f003 fbbf 	bl	8005208 <GetItemValue>
 8001a8a:	4b38      	ldr	r3, [pc, #224]	@ (8001b6c <ShortPress+0x168>)
 8001a8c:	8018      	strh	r0, [r3, #0]
			break;
 8001a8e:	e7e5      	b.n	8001a5c <ShortPress+0x58>
			key_menu_cnt = 0;
 8001a90:	2000      	movs	r0, #0
 8001a92:	4b34      	ldr	r3, [pc, #208]	@ (8001b64 <ShortPress+0x160>)
 8001a94:	7018      	strb	r0, [r3, #0]
			key_item_cnt = 0;
 8001a96:	4b34      	ldr	r3, [pc, #208]	@ (8001b68 <ShortPress+0x164>)
 8001a98:	7018      	strb	r0, [r3, #0]
			key_value_cnt  = GetItemValue(key_menu_cnt, key_item_cnt, 0);
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	4601      	mov	r1, r0
 8001a9e:	f003 fbb3 	bl	8005208 <GetItemValue>
 8001aa2:	4b32      	ldr	r3, [pc, #200]	@ (8001b6c <ShortPress+0x168>)
 8001aa4:	8018      	strh	r0, [r3, #0]
			break;
 8001aa6:	e7d9      	b.n	8001a5c <ShortPress+0x58>
			Can_Send_Sts = !Can_Send_Sts;
 8001aa8:	4b31      	ldr	r3, [pc, #196]	@ (8001b70 <ShortPress+0x16c>)
 8001aaa:	7818      	ldrb	r0, [r3, #0]
 8001aac:	fab0 f080 	clz	r0, r0
 8001ab0:	0940      	lsrs	r0, r0, #5
 8001ab2:	7018      	strb	r0, [r3, #0]
			Can_SendSts_Control(Can_Send_Sts);
 8001ab4:	f7ff fb0e 	bl	80010d4 <Can_SendSts_Control>
			break;
 8001ab8:	e7d0      	b.n	8001a5c <ShortPress+0x58>
			if(key_item_cnt == 0U)
 8001aba:	4b2b      	ldr	r3, [pc, #172]	@ (8001b68 <ShortPress+0x164>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	b963      	cbnz	r3, 8001ada <ShortPress+0xd6>
				key_item_cnt = max_item - 1;
 8001ac0:	1e78      	subs	r0, r7, #1
 8001ac2:	4b29      	ldr	r3, [pc, #164]	@ (8001b68 <ShortPress+0x164>)
 8001ac4:	7018      	strb	r0, [r3, #0]
			key_value_cnt  = GetItemValue(key_menu_cnt, key_item_cnt, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	4b27      	ldr	r3, [pc, #156]	@ (8001b68 <ShortPress+0x164>)
 8001aca:	7819      	ldrb	r1, [r3, #0]
 8001acc:	4b25      	ldr	r3, [pc, #148]	@ (8001b64 <ShortPress+0x160>)
 8001ace:	7818      	ldrb	r0, [r3, #0]
 8001ad0:	f003 fb9a 	bl	8005208 <GetItemValue>
 8001ad4:	4b25      	ldr	r3, [pc, #148]	@ (8001b6c <ShortPress+0x168>)
 8001ad6:	8018      	strh	r0, [r3, #0]
			break;
 8001ad8:	e7c0      	b.n	8001a5c <ShortPress+0x58>
				key_item_cnt--;
 8001ada:	3b01      	subs	r3, #1
 8001adc:	4a22      	ldr	r2, [pc, #136]	@ (8001b68 <ShortPress+0x164>)
 8001ade:	7013      	strb	r3, [r2, #0]
 8001ae0:	e7f1      	b.n	8001ac6 <ShortPress+0xc2>
			key_item_cnt++;
 8001ae2:	4a21      	ldr	r2, [pc, #132]	@ (8001b68 <ShortPress+0x164>)
 8001ae4:	7813      	ldrb	r3, [r2, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	7013      	strb	r3, [r2, #0]
			if(key_item_cnt >=max_item)
 8001aec:	42bb      	cmp	r3, r7
 8001aee:	d302      	bcc.n	8001af6 <ShortPress+0xf2>
				key_item_cnt = 0;
 8001af0:	4613      	mov	r3, r2
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
			key_value_cnt  = GetItemValue(key_menu_cnt, key_item_cnt, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b68 <ShortPress+0x164>)
 8001afa:	7819      	ldrb	r1, [r3, #0]
 8001afc:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <ShortPress+0x160>)
 8001afe:	7818      	ldrb	r0, [r3, #0]
 8001b00:	f003 fb82 	bl	8005208 <GetItemValue>
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <ShortPress+0x168>)
 8001b06:	8018      	strh	r0, [r3, #0]
			break;
 8001b08:	e7a8      	b.n	8001a5c <ShortPress+0x58>
			if(key_value_cnt <= 0U)
 8001b0a:	4b18      	ldr	r3, [pc, #96]	@ (8001b6c <ShortPress+0x168>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	b11b      	cbz	r3, 8001b18 <ShortPress+0x114>
				key_value_cnt--;
 8001b10:	3b01      	subs	r3, #1
 8001b12:	4a16      	ldr	r2, [pc, #88]	@ (8001b6c <ShortPress+0x168>)
 8001b14:	8013      	strh	r3, [r2, #0]
 8001b16:	e7a1      	b.n	8001a5c <ShortPress+0x58>
                if (ItemValueLimit(key_menu_cnt, key_item_cnt))
 8001b18:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <ShortPress+0x164>)
 8001b1a:	7819      	ldrb	r1, [r3, #0]
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <ShortPress+0x160>)
 8001b1e:	7818      	ldrb	r0, [r3, #0]
 8001b20:	f003 fb70 	bl	8005204 <ItemValueLimit>
 8001b24:	b118      	cbz	r0, 8001b2e <ShortPress+0x12a>
                    key_value_cnt = 0;
 8001b26:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <ShortPress+0x168>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	801a      	strh	r2, [r3, #0]
 8001b2c:	e796      	b.n	8001a5c <ShortPress+0x58>
                    key_value_cnt = max_value-1;
 8001b2e:	1e68      	subs	r0, r5, #1
 8001b30:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <ShortPress+0x168>)
 8001b32:	8018      	strh	r0, [r3, #0]
 8001b34:	e792      	b.n	8001a5c <ShortPress+0x58>
			key_value_cnt++;
 8001b36:	4a0d      	ldr	r2, [pc, #52]	@ (8001b6c <ShortPress+0x168>)
 8001b38:	8813      	ldrh	r3, [r2, #0]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	8013      	strh	r3, [r2, #0]
            if (key_value_cnt >= max_value)
 8001b40:	42ab      	cmp	r3, r5
 8001b42:	d38b      	bcc.n	8001a5c <ShortPress+0x58>
                if (ItemValueLimit(key_menu_cnt, key_item_cnt)) 
 8001b44:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <ShortPress+0x164>)
 8001b46:	7819      	ldrb	r1, [r3, #0]
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <ShortPress+0x160>)
 8001b4a:	7818      	ldrb	r0, [r3, #0]
 8001b4c:	f003 fb5a 	bl	8005204 <ItemValueLimit>
 8001b50:	b118      	cbz	r0, 8001b5a <ShortPress+0x156>
                    key_value_cnt = max_value -1;
 8001b52:	1e68      	subs	r0, r5, #1
 8001b54:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <ShortPress+0x168>)
 8001b56:	8018      	strh	r0, [r3, #0]
 8001b58:	e780      	b.n	8001a5c <ShortPress+0x58>
                    key_value_cnt = 0;
 8001b5a:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <ShortPress+0x168>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	801a      	strh	r2, [r3, #0]
}
 8001b60:	e77c      	b.n	8001a5c <ShortPress+0x58>
 8001b62:	bf00      	nop
 8001b64:	20000a99 	.word	0x20000a99
 8001b68:	20000a98 	.word	0x20000a98
 8001b6c:	20000a96 	.word	0x20000a96
 8001b70:	20000a95 	.word	0x20000a95

08001b74 <Key_CheckProcess>:
{
 8001b74:	b510      	push	{r4, lr}
	for(i=0; i<KEY_MAX; i++)
 8001b76:	2400      	movs	r4, #0
 8001b78:	e001      	b.n	8001b7e <Key_CheckProcess+0xa>
 8001b7a:	3401      	adds	r4, #1
 8001b7c:	b2e4      	uxtb	r4, r4
 8001b7e:	2c08      	cmp	r4, #8
 8001b80:	d80e      	bhi.n	8001ba0 <Key_CheckProcess+0x2c>
		volencode_polling(i);
 8001b82:	4620      	mov	r0, r4
 8001b84:	f7ff feee 	bl	8001964 <volencode_polling>
		switch(stKeyValue[i].KeySts)
 8001b88:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001b8c:	005a      	lsls	r2, r3, #1
 8001b8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <Key_CheckProcess+0x30>)
 8001b90:	4413      	add	r3, r2
 8001b92:	791b      	ldrb	r3, [r3, #4]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d1f0      	bne.n	8001b7a <Key_CheckProcess+0x6>
				ShortPress(i);
 8001b98:	4620      	mov	r0, r4
 8001b9a:	f7ff ff33 	bl	8001a04 <ShortPress>
				break;
 8001b9e:	e7ec      	b.n	8001b7a <Key_CheckProcess+0x6>
}
 8001ba0:	bd10      	pop	{r4, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <delay_us>:

void delay_us(uint16_t nus)
{
	uint16_t i,j = 0u;

	for(i = 0u; i< nus; i++)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	e006      	b.n	8001bba <delay_us+0x12>
	{
		for(j = 0u; j < 20u; j++)
		{
			__NOP();
 8001bac:	bf00      	nop
		for(j = 0u; j < 20u; j++)
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	2b13      	cmp	r3, #19
 8001bb4:	d9fa      	bls.n	8001bac <delay_us+0x4>
	for(i = 0u; i< nus; i++)
 8001bb6:	3201      	adds	r2, #1
 8001bb8:	b292      	uxth	r2, r2
 8001bba:	4282      	cmp	r2, r0
 8001bbc:	d201      	bcs.n	8001bc2 <delay_us+0x1a>
		for(j = 0u; j < 20u; j++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e7f7      	b.n	8001bb2 <delay_us+0xa>
		}
	}
}
 8001bc2:	4770      	bx	lr

08001bc4 <delay>:

void delay(uint16_t nms)
{
 8001bc4:	b538      	push	{r3, r4, r5, lr}
 8001bc6:	4605      	mov	r5, r0
	uint16_t i = 0u;
	for(i =0u; i < nms; i++)
 8001bc8:	2400      	movs	r4, #0
 8001bca:	e004      	b.n	8001bd6 <delay+0x12>
	{
	delay_us(100);
 8001bcc:	2064      	movs	r0, #100	@ 0x64
 8001bce:	f7ff ffeb 	bl	8001ba8 <delay_us>
	for(i =0u; i < nms; i++)
 8001bd2:	3401      	adds	r4, #1
 8001bd4:	b2a4      	uxth	r4, r4
 8001bd6:	42ac      	cmp	r4, r5
 8001bd8:	d3f8      	bcc.n	8001bcc <delay+0x8>
	}
}
 8001bda:	bd38      	pop	{r3, r4, r5, pc}

08001bdc <lcd_hw_Init>:
	}
}
#endif
        
void lcd_hw_Init(void)
{
 8001bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bde:	b087      	sub	sp, #28
    GPIO_InitTypeDef  GPIO_Initure;

    __HAL_RCC_GPIOA_CLK_ENABLE();   
 8001be0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c54 <lcd_hw_Init+0x78>)
 8001be2:	699a      	ldr	r2, [r3, #24]
 8001be4:	f042 0204 	orr.w	r2, r2, #4
 8001be8:	619a      	str	r2, [r3, #24]
 8001bea:	699a      	ldr	r2, [r3, #24]
 8001bec:	f002 0204 	and.w	r2, r2, #4
 8001bf0:	9200      	str	r2, [sp, #0]
 8001bf2:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf4:	699a      	ldr	r2, [r3, #24]
 8001bf6:	f042 0210 	orr.w	r2, r2, #16
 8001bfa:	619a      	str	r2, [r3, #24]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	9301      	str	r3, [sp, #4]
 8001c04:	9b01      	ldr	r3, [sp, #4]
	
    GPIO_Initure.Pin=GPIO_PIN_7;	
 8001c06:	2780      	movs	r7, #128	@ 0x80
 8001c08:	9702      	str	r7, [sp, #8]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;	
 8001c0a:	2401      	movs	r4, #1
 8001c0c:	9403      	str	r4, [sp, #12]
    GPIO_Initure.Pull=GPIO_PULLUP;        	
 8001c0e:	9404      	str	r4, [sp, #16]
    GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;
 8001c10:	2603      	movs	r6, #3
 8001c12:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA,&GPIO_Initure);   	
 8001c14:	4d10      	ldr	r5, [pc, #64]	@ (8001c58 <lcd_hw_Init+0x7c>)
 8001c16:	a902      	add	r1, sp, #8
 8001c18:	4628      	mov	r0, r5
 8001c1a:	f006 fd25 	bl	8008668 <HAL_GPIO_Init>
	 
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);
 8001c1e:	4622      	mov	r2, r4
 8001c20:	4639      	mov	r1, r7
 8001c22:	4628      	mov	r0, r5
 8001c24:	f006 fe2e 	bl	8008884 <HAL_GPIO_WritePin>
    HAL_GPIO_Init(GPIOC,&GPIO_Initure);   	
	 
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14,GPIO_PIN_SET);	
*******************************************************/	

    GPIO_Initure.Pin=GPIO_PIN_5|GPIO_PIN_6;
 8001c28:	2360      	movs	r3, #96	@ 0x60
 8001c2a:	9302      	str	r3, [sp, #8]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;	
 8001c2c:	9403      	str	r4, [sp, #12]
    GPIO_Initure.Pull=GPIO_PULLUP;        	
 8001c2e:	9404      	str	r4, [sp, #16]
    GPIO_Initure.Speed=GPIO_SPEED_HIGH;   	
 8001c30:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA,&GPIO_Initure); 
 8001c32:	a902      	add	r1, sp, #8
 8001c34:	4628      	mov	r0, r5
 8001c36:	f006 fd17 	bl	8008668 <HAL_GPIO_Init>
  
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); 
 8001c3a:	4622      	mov	r2, r4
 8001c3c:	2120      	movs	r1, #32
 8001c3e:	4628      	mov	r0, r5
 8001c40:	f006 fe20 	bl	8008884 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET); 	
 8001c44:	4622      	mov	r2, r4
 8001c46:	2140      	movs	r1, #64	@ 0x40
 8001c48:	4628      	mov	r0, r5
 8001c4a:	f006 fe1b 	bl	8008884 <HAL_GPIO_WritePin>
	
}
 8001c4e:	b007      	add	sp, #28
 8001c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40010800 	.word	0x40010800

08001c5c <sendbyte>:

***********************************************************************/
void sendbyte(uint8_t zdata)
{
	unsigned int i;
	for(i=0; i<8; i++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	e00b      	b.n	8001c78 <sendbyte+0x1c>
		{
			SID = 1;
		}
		else 
		{
			SID = 0;
 8001c60:	4a0c      	ldr	r2, [pc, #48]	@ (8001c94 <sendbyte+0x38>)
 8001c62:	2100      	movs	r1, #0
 8001c64:	f8c2 1198 	str.w	r1, [r2, #408]	@ 0x198
		}
		SCLK = 0;
 8001c68:	4a0a      	ldr	r2, [pc, #40]	@ (8001c94 <sendbyte+0x38>)
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	f8c2 1194 	str.w	r1, [r2, #404]	@ 0x194
		SCLK = 1;
 8001c70:	2101      	movs	r1, #1
 8001c72:	f8c2 1194 	str.w	r1, [r2, #404]	@ 0x194
	for(i=0; i<8; i++)
 8001c76:	440b      	add	r3, r1
 8001c78:	2b07      	cmp	r3, #7
 8001c7a:	d809      	bhi.n	8001c90 <sendbyte+0x34>
		if((zdata << i) & 0x80)
 8001c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c80:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001c84:	d0ec      	beq.n	8001c60 <sendbyte+0x4>
			SID = 1;
 8001c86:	4a03      	ldr	r2, [pc, #12]	@ (8001c94 <sendbyte+0x38>)
 8001c88:	2101      	movs	r1, #1
 8001c8a:	f8c2 1198 	str.w	r1, [r2, #408]	@ 0x198
 8001c8e:	e7eb      	b.n	8001c68 <sendbyte+0xc>
	}
}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	42210000 	.word	0x42210000

08001c98 <write_com>:
{
 8001c98:	b510      	push	{r4, lr}
 8001c9a:	4604      	mov	r4, r0
	CS = 1;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <write_com+0x2c>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
	sendbyte(0xf8);
 8001ca4:	20f8      	movs	r0, #248	@ 0xf8
 8001ca6:	f7ff ffd9 	bl	8001c5c <sendbyte>
	sendbyte(cmdcode & 0xf0);
 8001caa:	f004 00f0 	and.w	r0, r4, #240	@ 0xf0
 8001cae:	f7ff ffd5 	bl	8001c5c <sendbyte>
	sendbyte((cmdcode << 4) & 0xf0);
 8001cb2:	0120      	lsls	r0, r4, #4
 8001cb4:	f000 00f0 	and.w	r0, r0, #240	@ 0xf0
 8001cb8:	f7ff ffd0 	bl	8001c5c <sendbyte>
	delay(2);
 8001cbc:	2002      	movs	r0, #2
 8001cbe:	f7ff ff81 	bl	8001bc4 <delay>
}
 8001cc2:	bd10      	pop	{r4, pc}
 8001cc4:	42210000 	.word	0x42210000

08001cc8 <write_data>:
{
 8001cc8:	b510      	push	{r4, lr}
 8001cca:	4604      	mov	r4, r0
	CS = 1;
 8001ccc:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <write_data+0x2c>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
	sendbyte(0xfa);
 8001cd4:	20fa      	movs	r0, #250	@ 0xfa
 8001cd6:	f7ff ffc1 	bl	8001c5c <sendbyte>
	sendbyte(Dispdata & 0xf0);
 8001cda:	f004 00f0 	and.w	r0, r4, #240	@ 0xf0
 8001cde:	f7ff ffbd 	bl	8001c5c <sendbyte>
	sendbyte((Dispdata << 4) & 0xf0);
 8001ce2:	0120      	lsls	r0, r4, #4
 8001ce4:	f000 00f0 	and.w	r0, r0, #240	@ 0xf0
 8001ce8:	f7ff ffb8 	bl	8001c5c <sendbyte>
	delay(2);
 8001cec:	2002      	movs	r0, #2
 8001cee:	f7ff ff69 	bl	8001bc4 <delay>
}
 8001cf2:	bd10      	pop	{r4, pc}
 8001cf4:	42210000 	.word	0x42210000

08001cf8 <hzkdis>:
/********************************************************************

***********************************************************************/

void hzkdis(char *s)
{
 8001cf8:	b510      	push	{r4, lr}
 8001cfa:	4604      	mov	r4, r0
	while(*s > 0)
 8001cfc:	e005      	b.n	8001d0a <hzkdis+0x12>
    { 
		write_data(*s);
 8001cfe:	f7ff ffe3 	bl	8001cc8 <write_data>
		s++;
 8001d02:	3401      	adds	r4, #1
		delay_us(50);
 8001d04:	2032      	movs	r0, #50	@ 0x32
 8001d06:	f7ff ff4f 	bl	8001ba8 <delay_us>
	while(*s > 0)
 8001d0a:	7820      	ldrb	r0, [r4, #0]
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	d1f6      	bne.n	8001cfe <hzkdis+0x6>
    }
}
 8001d10:	bd10      	pop	{r4, pc}
	...

08001d14 <LCD_ShowNumWithTwoDecimals>:

void LCD_ShowNumWithTwoDecimals(int32_t num)
{
 8001d14:	b570      	push	{r4, r5, r6, lr}
 8001d16:	b084      	sub	sp, #16
    uint8_t integerPart[5] = {0}; // 存储整数部分各位，最多 5 位（考虑符号等情况，可根据实际调整）
 8001d18:	2300      	movs	r3, #0
 8001d1a:	9302      	str	r3, [sp, #8]
 8001d1c:	f88d 300c 	strb.w	r3, [sp, #12]
    uint8_t decimalPart[2] = {0}; // 存储小数点后两位
 8001d20:	f8ad 3004 	strh.w	r3, [sp, #4]
    int32_t absNum = abs(num);
 8001d24:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8001d28:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    int i = 0, j = 0;
    int isNegative = num < 0 ? 1 : 0;
 8001d2c:	0fc0      	lsrs	r0, r0, #31

    // 拆分出小数点后两位
    decimalPart[0] = (absNum / 10) % 10;
 8001d2e:	492c      	ldr	r1, [pc, #176]	@ (8001de0 <LCD_ShowNumWithTwoDecimals+0xcc>)
 8001d30:	fb81 2503 	smull	r2, r5, r1, r3
 8001d34:	17da      	asrs	r2, r3, #31
 8001d36:	ebc2 05a5 	rsb	r5, r2, r5, asr #2
 8001d3a:	fb81 4105 	smull	r4, r1, r1, r5
 8001d3e:	17ee      	asrs	r6, r5, #31
 8001d40:	ebc6 06a1 	rsb	r6, r6, r1, asr #2
 8001d44:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8001d48:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8001d4c:	b2f6      	uxtb	r6, r6
 8001d4e:	f88d 6004 	strb.w	r6, [sp, #4]
    decimalPart[1] = absNum % 10;
 8001d52:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001d56:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
 8001d5a:	b2ed      	uxtb	r5, r5
 8001d5c:	f88d 5005 	strb.w	r5, [sp, #5]
    // 得到去掉小数部分后的整数（即原数放大 100 倍后的整数部分再除以 100）
    int32_t integerNum = absNum / 100;
 8001d60:	4920      	ldr	r1, [pc, #128]	@ (8001de4 <LCD_ShowNumWithTwoDecimals+0xd0>)
 8001d62:	fb81 1303 	smull	r1, r3, r1, r3

    // 处理整数部分，拆分成各个数字位存到数组
    if (integerNum == 0) {
 8001d66:	ebd2 1263 	rsbs	r2, r2, r3, asr #5
 8001d6a:	d015      	beq.n	8001d98 <LCD_ShowNumWithTwoDecimals+0x84>
    int i = 0, j = 0;
 8001d6c:	2400      	movs	r4, #0
        integerPart[i++] = 0;
    } else {
        while (integerNum > 0) {
 8001d6e:	2a00      	cmp	r2, #0
 8001d70:	dd13      	ble.n	8001d9a <LCD_ShowNumWithTwoDecimals+0x86>
            integerPart[i++] = integerNum % 10;
 8001d72:	491b      	ldr	r1, [pc, #108]	@ (8001de0 <LCD_ShowNumWithTwoDecimals+0xcc>)
 8001d74:	fb81 3102 	smull	r3, r1, r1, r2
 8001d78:	17d3      	asrs	r3, r2, #31
 8001d7a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d84:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8001d88:	f104 0210 	add.w	r2, r4, #16
 8001d8c:	446a      	add	r2, sp
 8001d8e:	f802 3c08 	strb.w	r3, [r2, #-8]
            integerNum /= 10;
 8001d92:	460a      	mov	r2, r1
            integerPart[i++] = integerNum % 10;
 8001d94:	3401      	adds	r4, #1
 8001d96:	e7ea      	b.n	8001d6e <LCD_ShowNumWithTwoDecimals+0x5a>
        integerPart[i++] = 0;
 8001d98:	2401      	movs	r4, #1
        }
    }

    // 显示负号
    if (isNegative) {
 8001d9a:	b908      	cbnz	r0, 8001da0 <LCD_ShowNumWithTwoDecimals+0x8c>
        write_data('-');
    }

    // 倒序显示整数部分数字
    for (j = i - 1; j >= 0; j--) {
 8001d9c:	3c01      	subs	r4, #1
 8001d9e:	e00d      	b.n	8001dbc <LCD_ShowNumWithTwoDecimals+0xa8>
        write_data('-');
 8001da0:	202d      	movs	r0, #45	@ 0x2d
 8001da2:	f7ff ff91 	bl	8001cc8 <write_data>
 8001da6:	e7f9      	b.n	8001d9c <LCD_ShowNumWithTwoDecimals+0x88>
        write_data(integerPart[j] + 0x30);
 8001da8:	f104 0310 	add.w	r3, r4, #16
 8001dac:	446b      	add	r3, sp
 8001dae:	f813 0c08 	ldrb.w	r0, [r3, #-8]
 8001db2:	3030      	adds	r0, #48	@ 0x30
 8001db4:	b2c0      	uxtb	r0, r0
 8001db6:	f7ff ff87 	bl	8001cc8 <write_data>
    for (j = i - 1; j >= 0; j--) {
 8001dba:	3c01      	subs	r4, #1
 8001dbc:	2c00      	cmp	r4, #0
 8001dbe:	daf3      	bge.n	8001da8 <LCD_ShowNumWithTwoDecimals+0x94>
    }

    // 显示小数点
    write_data('.');
 8001dc0:	202e      	movs	r0, #46	@ 0x2e
 8001dc2:	f7ff ff81 	bl	8001cc8 <write_data>

    // 显示小数点后两位
    write_data(decimalPart[0] + 0x30);
 8001dc6:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 8001dca:	b2c0      	uxtb	r0, r0
 8001dcc:	f7ff ff7c 	bl	8001cc8 <write_data>
    write_data(decimalPart[1] + 0x30);
 8001dd0:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8001dd4:	b2c0      	uxtb	r0, r0
 8001dd6:	f7ff ff77 	bl	8001cc8 <write_data>
}
 8001dda:	b004      	add	sp, #16
 8001ddc:	bd70      	pop	{r4, r5, r6, pc}
 8001dde:	bf00      	nop
 8001de0:	66666667 	.word	0x66666667
 8001de4:	51eb851f 	.word	0x51eb851f

08001de8 <LCD_ShowNum>:

void LCD_ShowNum(int16_t num)
{
 8001de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t i,j,k,l,n;
    if(num >= 65535)
    {
        num = 65535;
    }
    if (num < 0)
 8001dec:	1e05      	subs	r5, r0, #0
 8001dee:	db52      	blt.n	8001e96 <LCD_ShowNum+0xae>
    {
        write_data('-');
        num =abs(num);
    }

    i= num/10000;
 8001df0:	4e30      	ldr	r6, [pc, #192]	@ (8001eb4 <LCD_ShowNum+0xcc>)
 8001df2:	fb86 3605 	smull	r3, r6, r6, r5
 8001df6:	17ea      	asrs	r2, r5, #31
 8001df8:	ebc2 3626 	rsb	r6, r2, r6, asr #12
 8001dfc:	b2f6      	uxtb	r6, r6
    j= (num-10000*i)/1000;
 8001dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8001eb8 <LCD_ShowNum+0xd0>)
 8001e00:	fb03 5306 	mla	r3, r3, r6, r5
 8001e04:	492d      	ldr	r1, [pc, #180]	@ (8001ebc <LCD_ShowNum+0xd4>)
 8001e06:	fb81 0103 	smull	r0, r1, r1, r3
 8001e0a:	17df      	asrs	r7, r3, #31
 8001e0c:	ebc7 17a1 	rsb	r7, r7, r1, asr #6
 8001e10:	b2ff      	uxtb	r7, r7
    k= (num-10000*i-1000*j)/100;
 8001e12:	492b      	ldr	r1, [pc, #172]	@ (8001ec0 <LCD_ShowNum+0xd8>)
 8001e14:	fb01 3307 	mla	r3, r1, r7, r3
 8001e18:	492a      	ldr	r1, [pc, #168]	@ (8001ec4 <LCD_ShowNum+0xdc>)
 8001e1a:	fb81 0103 	smull	r0, r1, r1, r3
 8001e1e:	ea4f 78e3 	mov.w	r8, r3, asr #31
 8001e22:	ebc8 1861 	rsb	r8, r8, r1, asr #5
 8001e26:	fa5f f888 	uxtb.w	r8, r8
    l= (num-10000*i-1000*j-100*k)/10;
 8001e2a:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 8001e2e:	fb01 3308 	mla	r3, r1, r8, r3
 8001e32:	4925      	ldr	r1, [pc, #148]	@ (8001ec8 <LCD_ShowNum+0xe0>)
 8001e34:	fb81 4003 	smull	r4, r0, r1, r3
 8001e38:	17db      	asrs	r3, r3, #31
 8001e3a:	ebc3 04a0 	rsb	r4, r3, r0, asr #2
 8001e3e:	b2e4      	uxtb	r4, r4
    n= num%10;
 8001e40:	fb81 3105 	smull	r3, r1, r1, r5
 8001e44:	ebc2 03a1 	rsb	r3, r2, r1, asr #2
 8001e48:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e4c:	eba5 0543 	sub.w	r5, r5, r3, lsl #1
 8001e50:	b2ed      	uxtb	r5, r5

    if(i!=0)
 8001e52:	bb46      	cbnz	r6, 8001ea6 <LCD_ShowNum+0xbe>
    {
        write_data(i+0x30);
    }
    if((i!=0)||(j!=0))
 8001e54:	b127      	cbz	r7, 8001e60 <LCD_ShowNum+0x78>
    {
        write_data(j+0x30);
 8001e56:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001e5a:	b2c0      	uxtb	r0, r0
 8001e5c:	f7ff ff34 	bl	8001cc8 <write_data>
    }
    if((i!=0)||(j!=0)||(k!=0))
 8001e60:	b91e      	cbnz	r6, 8001e6a <LCD_ShowNum+0x82>
 8001e62:	b917      	cbnz	r7, 8001e6a <LCD_ShowNum+0x82>
 8001e64:	f1b8 0f00 	cmp.w	r8, #0
 8001e68:	d004      	beq.n	8001e74 <LCD_ShowNum+0x8c>
    {
        write_data(k+0x30);
 8001e6a:	f108 0030 	add.w	r0, r8, #48	@ 0x30
 8001e6e:	b2c0      	uxtb	r0, r0
 8001e70:	f7ff ff2a 	bl	8001cc8 <write_data>
    }
    if((i!=0)||(j!=0)||(k!=0)||(l!=0))
 8001e74:	b926      	cbnz	r6, 8001e80 <LCD_ShowNum+0x98>
 8001e76:	b91f      	cbnz	r7, 8001e80 <LCD_ShowNum+0x98>
 8001e78:	f1b8 0f00 	cmp.w	r8, #0
 8001e7c:	d100      	bne.n	8001e80 <LCD_ShowNum+0x98>
 8001e7e:	b124      	cbz	r4, 8001e8a <LCD_ShowNum+0xa2>
    {
        write_data(l+0x30);
 8001e80:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8001e84:	b2c0      	uxtb	r0, r0
 8001e86:	f7ff ff1f 	bl	8001cc8 <write_data>
    }
    write_data(n+0x30);
 8001e8a:	3530      	adds	r5, #48	@ 0x30
 8001e8c:	b2e8      	uxtb	r0, r5
 8001e8e:	f7ff ff1b 	bl	8001cc8 <write_data>
}
 8001e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        write_data('-');
 8001e96:	202d      	movs	r0, #45	@ 0x2d
 8001e98:	f7ff ff16 	bl	8001cc8 <write_data>
        num =abs(num);
 8001e9c:	2d00      	cmp	r5, #0
 8001e9e:	bfb8      	it	lt
 8001ea0:	426d      	neglt	r5, r5
 8001ea2:	b22d      	sxth	r5, r5
 8001ea4:	e7a4      	b.n	8001df0 <LCD_ShowNum+0x8>
        write_data(i+0x30);
 8001ea6:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 8001eaa:	b2c0      	uxtb	r0, r0
 8001eac:	f7ff ff0c 	bl	8001cc8 <write_data>
 8001eb0:	e7d1      	b.n	8001e56 <LCD_ShowNum+0x6e>
 8001eb2:	bf00      	nop
 8001eb4:	68db8bad 	.word	0x68db8bad
 8001eb8:	ffffd8f0 	.word	0xffffd8f0
 8001ebc:	10624dd3 	.word	0x10624dd3
 8001ec0:	fffffc18 	.word	0xfffffc18
 8001ec4:	51eb851f 	.word	0x51eb851f
 8001ec8:	66666667 	.word	0x66666667

08001ecc <Cls_screen>:
{
    write_data(Asci2[num]);
}

void Cls_screen(void)
{
 8001ecc:	b508      	push	{r3, lr}
	write_com(0x01);
 8001ece:	2001      	movs	r0, #1
 8001ed0:	f7ff fee2 	bl	8001c98 <write_com>
	delay(10);
 8001ed4:	200a      	movs	r0, #10
 8001ed6:	f7ff fe75 	bl	8001bc4 <delay>
}
 8001eda:	bd08      	pop	{r3, pc}

08001edc <GetMenuIndex>:

/**************************/
Pagedis_Func GetMenuIndex()
{
    return g_menu_index;
}
 8001edc:	4b01      	ldr	r3, [pc, #4]	@ (8001ee4 <GetMenuIndex+0x8>)
 8001ede:	7818      	ldrb	r0, [r3, #0]
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000a9b 	.word	0x20000a9b

08001ee8 <GetItemIndex>:

uint8_t GetItemIndex()
{
    return g_item_index;
}
 8001ee8:	4b01      	ldr	r3, [pc, #4]	@ (8001ef0 <GetItemIndex+0x8>)
 8001eea:	7818      	ldrb	r0, [r3, #0]
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000a9a 	.word	0x20000a9a

08001ef4 <LCD_menu>:
				 
void LCD_menu(Pagedis_Func menu) 
{
 8001ef4:	b538      	push	{r3, r4, r5, lr}
 8001ef6:	4604      	mov	r4, r0
    Pagedis_Func Fi = menu;
    Cls_screen();
 8001ef8:	f7ff ffe8 	bl	8001ecc <Cls_screen>
	write_com(0x03);
 8001efc:	2003      	movs	r0, #3
 8001efe:	f7ff fecb 	bl	8001c98 <write_com>
	delay(50);    
 8001f02:	2032      	movs	r0, #50	@ 0x32
 8001f04:	f7ff fe5e 	bl	8001bc4 <delay>
  
	write_com(0x80);
 8001f08:	2080      	movs	r0, #128	@ 0x80
 8001f0a:	f7ff fec5 	bl	8001c98 <write_com>
    Fi = GET_MENU(Fi, MENU_MAX);
 8001f0e:	2c4d      	cmp	r4, #77	@ 0x4d
 8001f10:	d901      	bls.n	8001f16 <LCD_menu+0x22>
 8001f12:	3c4e      	subs	r4, #78	@ 0x4e
 8001f14:	b2e4      	uxtb	r4, r4
	hzkdis(Func[Fi++]);
 8001f16:	1c65      	adds	r5, r4, #1
 8001f18:	b2ed      	uxtb	r5, r5
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f84 <LCD_menu+0x90>)
 8001f1c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001f20:	f7ff feea 	bl	8001cf8 <hzkdis>

	write_com(0x90);
 8001f24:	2090      	movs	r0, #144	@ 0x90
 8001f26:	f7ff feb7 	bl	8001c98 <write_com>
    Fi = GET_MENU(Fi, MENU_MAX);
 8001f2a:	2d4d      	cmp	r5, #77	@ 0x4d
 8001f2c:	d901      	bls.n	8001f32 <LCD_menu+0x3e>
 8001f2e:	3c4d      	subs	r4, #77	@ 0x4d
 8001f30:	b2e5      	uxtb	r5, r4
	hzkdis(Func[Fi++]);
 8001f32:	1c6c      	adds	r4, r5, #1
 8001f34:	b2e4      	uxtb	r4, r4
 8001f36:	4b13      	ldr	r3, [pc, #76]	@ (8001f84 <LCD_menu+0x90>)
 8001f38:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001f3c:	f7ff fedc 	bl	8001cf8 <hzkdis>
    
	write_com(0x88);
 8001f40:	2088      	movs	r0, #136	@ 0x88
 8001f42:	f7ff fea9 	bl	8001c98 <write_com>
    Fi = GET_MENU(Fi, MENU_MAX);
 8001f46:	2c4d      	cmp	r4, #77	@ 0x4d
 8001f48:	d901      	bls.n	8001f4e <LCD_menu+0x5a>
 8001f4a:	3d4d      	subs	r5, #77	@ 0x4d
 8001f4c:	b2ec      	uxtb	r4, r5
	hzkdis(Func[Fi++]);
 8001f4e:	1c65      	adds	r5, r4, #1
 8001f50:	b2ed      	uxtb	r5, r5
 8001f52:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <LCD_menu+0x90>)
 8001f54:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001f58:	f7ff fece 	bl	8001cf8 <hzkdis>
    
	write_com(0x98);
 8001f5c:	2098      	movs	r0, #152	@ 0x98
 8001f5e:	f7ff fe9b 	bl	8001c98 <write_com>
    Fi = GET_MENU(Fi, MENU_MAX);
 8001f62:	2d4d      	cmp	r5, #77	@ 0x4d
 8001f64:	d901      	bls.n	8001f6a <LCD_menu+0x76>
 8001f66:	3c4d      	subs	r4, #77	@ 0x4d
 8001f68:	b2e5      	uxtb	r5, r4
	hzkdis(Func[Fi]);
 8001f6a:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <LCD_menu+0x90>)
 8001f6c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001f70:	f7ff fec2 	bl	8001cf8 <hzkdis>
    
    write_com(0x82);
 8001f74:	2082      	movs	r0, #130	@ 0x82
 8001f76:	f7ff fe8f 	bl	8001c98 <write_com>
    hzkdis("*");
 8001f7a:	4803      	ldr	r0, [pc, #12]	@ (8001f88 <LCD_menu+0x94>)
 8001f7c:	f7ff febc 	bl	8001cf8 <hzkdis>
}				 
 8001f80:	bd38      	pop	{r3, r4, r5, pc}
 8001f82:	bf00      	nop
 8001f84:	20000470 	.word	0x20000470
 8001f88:	0800fab8 	.word	0x0800fab8

08001f8c <LCD_Menu_Display>:
				 
uint8_t LCD_Menu_Display(uint8_t menu, uint8_t item, int16_t value) {
 8001f8c:	b570      	push	{r4, r5, r6, lr}
 8001f8e:	4604      	mov	r4, r0
 8001f90:	460d      	mov	r5, r1
 8001f92:	4616      	mov	r6, r2
    menu = GET_MENU(menu, MENU_MAX);
 8001f94:	284d      	cmp	r0, #77	@ 0x4d
 8001f96:	d902      	bls.n	8001f9e <LCD_Menu_Display+0x12>
 8001f98:	f1a0 044e 	sub.w	r4, r0, #78	@ 0x4e
 8001f9c:	b2e4      	uxtb	r4, r4
    LCD_menu(menu);
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f7ff ffa8 	bl	8001ef4 <LCD_menu>
    LCD_Display_Func[menu](item, value);
 8001fa4:	4b03      	ldr	r3, [pc, #12]	@ (8001fb4 <LCD_Menu_Display+0x28>)
 8001fa6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8001faa:	4631      	mov	r1, r6
 8001fac:	4628      	mov	r0, r5
 8001fae:	4798      	blx	r3
    return DISPLAY_SUCCESS;
}
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	bd70      	pop	{r4, r5, r6, pc}
 8001fb4:	20000038 	.word	0x20000038

08001fb8 <LCD_Show_CANSendClose>:

void LCD_Show_CANSendClose(void)
{
 8001fb8:	b508      	push	{r3, lr}
    Cls_screen();
 8001fba:	f7ff ff87 	bl	8001ecc <Cls_screen>
    write_com(0x80);
 8001fbe:	2080      	movs	r0, #128	@ 0x80
 8001fc0:	f7ff fe6a 	bl	8001c98 <write_com>
    hzkdis("CAN Send OFF!");
 8001fc4:	4801      	ldr	r0, [pc, #4]	@ (8001fcc <LCD_Show_CANSendClose+0x14>)
 8001fc6:	f7ff fe97 	bl	8001cf8 <hzkdis>
}
 8001fca:	bd08      	pop	{r3, pc}
 8001fcc:	0800fabc 	.word	0x0800fabc

08001fd0 <Page_0>:

void Page_0(void)
{
 8001fd0:	b508      	push	{r3, lr}
	Cls_screen();
 8001fd2:	f7ff ff7b 	bl	8001ecc <Cls_screen>
	write_com(0x03);
 8001fd6:	2003      	movs	r0, #3
 8001fd8:	f7ff fe5e 	bl	8001c98 <write_com>
	delay(50);
 8001fdc:	2032      	movs	r0, #50	@ 0x32
 8001fde:	f7ff fdf1 	bl	8001bc4 <delay>
	write_com(0x80);
 8001fe2:	2080      	movs	r0, #128	@ 0x80
 8001fe4:	f7ff fe58 	bl	8001c98 <write_com>
	hzkdis("YB103_Fix_fuel");
 8001fe8:	4807      	ldr	r0, [pc, #28]	@ (8002008 <Page_0+0x38>)
 8001fea:	f7ff fe85 	bl	8001cf8 <hzkdis>
    write_com(0x90);
	hzkdis("SW_V1.0.5"); //1.0.1   SPS250_CAN,SPS250
	write_com(0x98);
	hzkdis("*:SWC-LIN ");
    #else
    write_com(0x90);
 8001fee:	2090      	movs	r0, #144	@ 0x90
 8001ff0:	f7ff fe52 	bl	8001c98 <write_com>
	hzkdis("SW_V1.0.0"); //1.0.1   SPS250_CAN,SPS250
 8001ff4:	4805      	ldr	r0, [pc, #20]	@ (800200c <Page_0+0x3c>)
 8001ff6:	f7ff fe7f 	bl	8001cf8 <hzkdis>
	write_com(0x98);
 8001ffa:	2098      	movs	r0, #152	@ 0x98
 8001ffc:	f7ff fe4c 	bl	8001c98 <write_com>
	hzkdis("*:Normal ");
 8002000:	4803      	ldr	r0, [pc, #12]	@ (8002010 <Page_0+0x40>)
 8002002:	f7ff fe79 	bl	8001cf8 <hzkdis>
    #endif
}
 8002006:	bd08      	pop	{r3, pc}
 8002008:	0800facc 	.word	0x0800facc
 800200c:	0800fae0 	.word	0x0800fae0
 8002010:	0800faec 	.word	0x0800faec

08002014 <lcd128_Init>:
{  
 8002014:	b508      	push	{r3, lr}
	lcd_hw_Init();
 8002016:	f7ff fde1 	bl	8001bdc <lcd_hw_Init>
	delay(2000);
 800201a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800201e:	f7ff fdd1 	bl	8001bc4 <delay>
	write_com(0x30);
 8002022:	2030      	movs	r0, #48	@ 0x30
 8002024:	f7ff fe38 	bl	8001c98 <write_com>
	delay(50);
 8002028:	2032      	movs	r0, #50	@ 0x32
 800202a:	f7ff fdcb 	bl	8001bc4 <delay>
	write_com(0x0c);
 800202e:	200c      	movs	r0, #12
 8002030:	f7ff fe32 	bl	8001c98 <write_com>
	delay(50);
 8002034:	2032      	movs	r0, #50	@ 0x32
 8002036:	f7ff fdc5 	bl	8001bc4 <delay>
	write_com(0x0F);
 800203a:	200f      	movs	r0, #15
 800203c:	f7ff fe2c 	bl	8001c98 <write_com>
    Page_0();
 8002040:	f7ff ffc6 	bl	8001fd0 <Page_0>
	delay(10000);
 8002044:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002048:	f7ff fdbc 	bl	8001bc4 <delay>
}
 800204c:	bd08      	pop	{r3, pc}
	...

08002050 <LCD_F1_item>:
    res = g_F78[item];
    return res;
}

void LCD_F1_item(uint8_t item, int16_t value)
{
 8002050:	b510      	push	{r4, lr}
 8002052:	4604      	mov	r4, r0
	item = GET_MENU(item, F1_ITEM_MAX);
 8002054:	2804      	cmp	r0, #4
 8002056:	d901      	bls.n	800205c <LCD_F1_item+0xc>
 8002058:	1f44      	subs	r4, r0, #5
 800205a:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 800205c:	2083      	movs	r0, #131	@ 0x83
 800205e:	f7ff fe1b 	bl	8001c98 <write_com>
    hzkdis(F1Item[item]);
 8002062:	4b23      	ldr	r3, [pc, #140]	@ (80020f0 <LCD_F1_item+0xa0>)
 8002064:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002068:	f7ff fe46 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 800206c:	2093      	movs	r0, #147	@ 0x93
 800206e:	f7ff fe13 	bl	8001c98 <write_com>
    if (strcmp(F1Value[item][0], "") != 0) {
 8002072:	01a3      	lsls	r3, r4, #6
 8002074:	4a1f      	ldr	r2, [pc, #124]	@ (80020f4 <LCD_F1_item+0xa4>)
 8002076:	58d3      	ldr	r3, [r2, r3]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b34b      	cbz	r3, 80020d0 <LCD_F1_item+0x80>
        hzkdis(F1Value[item][g_F1[item]]);
 800207c:	4b1e      	ldr	r3, [pc, #120]	@ (80020f8 <LCD_F1_item+0xa8>)
 800207e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002082:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002086:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800208a:	f7ff fe35 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F1[item]);
    }
	item = GET_MENU(item + 1, F1_ITEM_MAX);
 800208e:	2c03      	cmp	r4, #3
 8002090:	d924      	bls.n	80020dc <LCD_F1_item+0x8c>
 8002092:	3c04      	subs	r4, #4
 8002094:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8002096:	208b      	movs	r0, #139	@ 0x8b
 8002098:	f7ff fdfe 	bl	8001c98 <write_com>
    hzkdis(F1Item[item]);
 800209c:	4b14      	ldr	r3, [pc, #80]	@ (80020f0 <LCD_F1_item+0xa0>)
 800209e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80020a2:	f7ff fe29 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 80020a6:	209b      	movs	r0, #155	@ 0x9b
 80020a8:	f7ff fdf6 	bl	8001c98 <write_com>
    if (strcmp(F1Value[item][0], "") != 0) {
 80020ac:	01a3      	lsls	r3, r4, #6
 80020ae:	4a11      	ldr	r2, [pc, #68]	@ (80020f4 <LCD_F1_item+0xa4>)
 80020b0:	58d3      	ldr	r3, [r2, r3]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	b1ab      	cbz	r3, 80020e2 <LCD_F1_item+0x92>
        hzkdis(F1Value[item][g_F1[item]]);
 80020b6:	4b10      	ldr	r3, [pc, #64]	@ (80020f8 <LCD_F1_item+0xa8>)
 80020b8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80020bc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80020c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80020c4:	f7ff fe18 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F1[item]);
    }
    write_com(0x93);
 80020c8:	2093      	movs	r0, #147	@ 0x93
 80020ca:	f7ff fde5 	bl	8001c98 <write_com>
}
 80020ce:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F1[item]);
 80020d0:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <LCD_F1_item+0xa8>)
 80020d2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80020d6:	f7ff fe87 	bl	8001de8 <LCD_ShowNum>
 80020da:	e7d8      	b.n	800208e <LCD_F1_item+0x3e>
	item = GET_MENU(item + 1, F1_ITEM_MAX);
 80020dc:	3401      	adds	r4, #1
 80020de:	b2e4      	uxtb	r4, r4
 80020e0:	e7d9      	b.n	8002096 <LCD_F1_item+0x46>
        LCD_ShowNum(g_F1[item]);
 80020e2:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <LCD_F1_item+0xa8>)
 80020e4:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80020e8:	f7ff fe7e 	bl	8001de8 <LCD_ShowNum>
 80020ec:	e7ec      	b.n	80020c8 <LCD_F1_item+0x78>
 80020ee:	bf00      	nop
 80020f0:	2000045c 	.word	0x2000045c
 80020f4:	200028e4 	.word	0x200028e4
 80020f8:	200028d8 	.word	0x200028d8

080020fc <LCD_F2_item>:

void LCD_F2_item(uint8_t item, int16_t value)
{
 80020fc:	b538      	push	{r3, r4, r5, lr}
 80020fe:	4604      	mov	r4, r0
	item = GET_MENU(item, F2_ITEM_MAX);
 8002100:	2802      	cmp	r0, #2
 8002102:	d901      	bls.n	8002108 <LCD_F2_item+0xc>
 8002104:	1ec4      	subs	r4, r0, #3
 8002106:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8002108:	2083      	movs	r0, #131	@ 0x83
 800210a:	f7ff fdc5 	bl	8001c98 <write_com>
    hzkdis(F2Item[item]);
 800210e:	4b28      	ldr	r3, [pc, #160]	@ (80021b0 <LCD_F2_item+0xb4>)
 8002110:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002114:	f7ff fdf0 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8002118:	2093      	movs	r0, #147	@ 0x93
 800211a:	f7ff fdbd 	bl	8001c98 <write_com>
    if (strcmp(F2Value[item][0], "") != 0) {
 800211e:	01a3      	lsls	r3, r4, #6
 8002120:	4a24      	ldr	r2, [pc, #144]	@ (80021b4 <LCD_F2_item+0xb8>)
 8002122:	58d3      	ldr	r3, [r2, r3]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	bb4b      	cbnz	r3, 800217c <LCD_F2_item+0x80>
        hzkdis(F2Value[item][g_F2[item]]);
    } else {
        if(item == EMS_2_EngineSpeed){
 8002128:	bb94      	cbnz	r4, 8002190 <LCD_F2_item+0x94>
            LCD_ShowNum(g_F2[item] * 100);
 800212a:	4b23      	ldr	r3, [pc, #140]	@ (80021b8 <LCD_F2_item+0xbc>)
 800212c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002130:	2064      	movs	r0, #100	@ 0x64
 8002132:	fb03 f000 	mul.w	r0, r3, r0
 8002136:	f7ff fe57 	bl	8001de8 <LCD_ShowNum>
        }
        else{
        	LCD_ShowNum(g_F2[item]);
        }
    }
	item = GET_MENU(item + 1, F2_ITEM_MAX);
 800213a:	2c01      	cmp	r4, #1
 800213c:	d92e      	bls.n	800219c <LCD_F2_item+0xa0>
 800213e:	3c02      	subs	r4, #2
 8002140:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8002142:	208b      	movs	r0, #139	@ 0x8b
 8002144:	f7ff fda8 	bl	8001c98 <write_com>
    hzkdis(F2Item[item]);
 8002148:	4b19      	ldr	r3, [pc, #100]	@ (80021b0 <LCD_F2_item+0xb4>)
 800214a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800214e:	f7ff fdd3 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8002152:	209b      	movs	r0, #155	@ 0x9b
 8002154:	f7ff fda0 	bl	8001c98 <write_com>
    if (strcmp(F2Value[item][0], "") != 0) {
 8002158:	01a3      	lsls	r3, r4, #6
 800215a:	4a16      	ldr	r2, [pc, #88]	@ (80021b4 <LCD_F2_item+0xb8>)
 800215c:	58d3      	ldr	r3, [r2, r3]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b1fb      	cbz	r3, 80021a2 <LCD_F2_item+0xa6>
        hzkdis(F2Value[item][g_F2[item]]);
 8002162:	4b15      	ldr	r3, [pc, #84]	@ (80021b8 <LCD_F2_item+0xbc>)
 8002164:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002168:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800216c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002170:	f7ff fdc2 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F2[item]);
    }
    write_com(0x93);
 8002174:	2093      	movs	r0, #147	@ 0x93
 8002176:	f7ff fd8f 	bl	8001c98 <write_com>
}
 800217a:	bd38      	pop	{r3, r4, r5, pc}
        hzkdis(F2Value[item][g_F2[item]]);
 800217c:	4b0e      	ldr	r3, [pc, #56]	@ (80021b8 <LCD_F2_item+0xbc>)
 800217e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002182:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002186:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800218a:	f7ff fdb5 	bl	8001cf8 <hzkdis>
 800218e:	e7d4      	b.n	800213a <LCD_F2_item+0x3e>
        	LCD_ShowNum(g_F2[item]);
 8002190:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <LCD_F2_item+0xbc>)
 8002192:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002196:	f7ff fe27 	bl	8001de8 <LCD_ShowNum>
 800219a:	e7ce      	b.n	800213a <LCD_F2_item+0x3e>
	item = GET_MENU(item + 1, F2_ITEM_MAX);
 800219c:	3401      	adds	r4, #1
 800219e:	b2e4      	uxtb	r4, r4
 80021a0:	e7cf      	b.n	8002142 <LCD_F2_item+0x46>
        LCD_ShowNum(g_F2[item]);
 80021a2:	4b05      	ldr	r3, [pc, #20]	@ (80021b8 <LCD_F2_item+0xbc>)
 80021a4:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80021a8:	f7ff fe1e 	bl	8001de8 <LCD_ShowNum>
 80021ac:	e7e2      	b.n	8002174 <LCD_F2_item+0x78>
 80021ae:	bf00      	nop
 80021b0:	20000444 	.word	0x20000444
 80021b4:	20002818 	.word	0x20002818
 80021b8:	20002810 	.word	0x20002810

080021bc <LCD_F3_item>:

void LCD_F3_item(uint8_t item, int16_t value)
{
 80021bc:	b510      	push	{r4, lr}
 80021be:	4604      	mov	r4, r0
    item = GET_MENU(item, F3_ITEM_MAX);
 80021c0:	280a      	cmp	r0, #10
 80021c2:	d902      	bls.n	80021ca <LCD_F3_item+0xe>
 80021c4:	f1a0 040b 	sub.w	r4, r0, #11
 80021c8:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 80021ca:	2083      	movs	r0, #131	@ 0x83
 80021cc:	f7ff fd64 	bl	8001c98 <write_com>
    hzkdis(F3Item[item]);
 80021d0:	4b22      	ldr	r3, [pc, #136]	@ (800225c <LCD_F3_item+0xa0>)
 80021d2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80021d6:	f7ff fd8f 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 80021da:	2093      	movs	r0, #147	@ 0x93
 80021dc:	f7ff fd5c 	bl	8001c98 <write_com>
    if (strcmp(F3Value[item][0], "") != 0) {
 80021e0:	01a3      	lsls	r3, r4, #6
 80021e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002260 <LCD_F3_item+0xa4>)
 80021e4:	58d3      	ldr	r3, [r2, r3]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	b34b      	cbz	r3, 800223e <LCD_F3_item+0x82>
        hzkdis(F3Value[item][g_F3[item]]);
 80021ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002264 <LCD_F3_item+0xa8>)
 80021ec:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80021f0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80021f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80021f8:	f7ff fd7e 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F3[item]);
    }

    item = GET_MENU(item + 1, F3_ITEM_MAX);
 80021fc:	2c09      	cmp	r4, #9
 80021fe:	d924      	bls.n	800224a <LCD_F3_item+0x8e>
 8002200:	3c0a      	subs	r4, #10
 8002202:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8002204:	208b      	movs	r0, #139	@ 0x8b
 8002206:	f7ff fd47 	bl	8001c98 <write_com>
    hzkdis(F3Item[item]);
 800220a:	4b14      	ldr	r3, [pc, #80]	@ (800225c <LCD_F3_item+0xa0>)
 800220c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002210:	f7ff fd72 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8002214:	209b      	movs	r0, #155	@ 0x9b
 8002216:	f7ff fd3f 	bl	8001c98 <write_com>
    if (strcmp(F3Value[item][0], "") != 0) {
 800221a:	01a3      	lsls	r3, r4, #6
 800221c:	4a10      	ldr	r2, [pc, #64]	@ (8002260 <LCD_F3_item+0xa4>)
 800221e:	58d3      	ldr	r3, [r2, r3]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	b1ab      	cbz	r3, 8002250 <LCD_F3_item+0x94>
        hzkdis(F3Value[item][g_F3[item]]);
 8002224:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <LCD_F3_item+0xa8>)
 8002226:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800222a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800222e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002232:	f7ff fd61 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F3[item]);
    }
    write_com(0x93);
 8002236:	2093      	movs	r0, #147	@ 0x93
 8002238:	f7ff fd2e 	bl	8001c98 <write_com>
}
 800223c:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F3[item]);
 800223e:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <LCD_F3_item+0xa8>)
 8002240:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002244:	f7ff fdd0 	bl	8001de8 <LCD_ShowNum>
 8002248:	e7d8      	b.n	80021fc <LCD_F3_item+0x40>
    item = GET_MENU(item + 1, F3_ITEM_MAX);
 800224a:	3401      	adds	r4, #1
 800224c:	b2e4      	uxtb	r4, r4
 800224e:	e7d9      	b.n	8002204 <LCD_F3_item+0x48>
        LCD_ShowNum(g_F3[item]);
 8002250:	4b04      	ldr	r3, [pc, #16]	@ (8002264 <LCD_F3_item+0xa8>)
 8002252:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002256:	f7ff fdc7 	bl	8001de8 <LCD_ShowNum>
 800225a:	e7ec      	b.n	8002236 <LCD_F3_item+0x7a>
 800225c:	20000410 	.word	0x20000410
 8002260:	20002550 	.word	0x20002550
 8002264:	20002538 	.word	0x20002538

08002268 <LCD_F4_item>:

void LCD_F4_item(uint8_t item, int16_t value)
{
 8002268:	b538      	push	{r3, r4, r5, lr}
 800226a:	4604      	mov	r4, r0
    item = GET_MENU(item, F4_ITEM_MAX);
 800226c:	2802      	cmp	r0, #2
 800226e:	d901      	bls.n	8002274 <LCD_F4_item+0xc>
 8002270:	1ec4      	subs	r4, r0, #3
 8002272:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8002274:	2083      	movs	r0, #131	@ 0x83
 8002276:	f7ff fd0f 	bl	8001c98 <write_com>
    hzkdis(F4Item[item]);
 800227a:	4b38      	ldr	r3, [pc, #224]	@ (800235c <LCD_F4_item+0xf4>)
 800227c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002280:	f7ff fd3a 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8002284:	2093      	movs	r0, #147	@ 0x93
 8002286:	f7ff fd07 	bl	8001c98 <write_com>
    if (strcmp(F4Value[item][0], "") != 0) {
 800228a:	01a3      	lsls	r3, r4, #6
 800228c:	4a34      	ldr	r2, [pc, #208]	@ (8002360 <LCD_F4_item+0xf8>)
 800228e:	58d3      	ldr	r3, [r2, r3]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d13e      	bne.n	8002314 <LCD_F4_item+0xac>
        hzkdis(F4Value[item][g_F4[item]]);
    } else {
        if(item == EMS_4_EngineCoolantTemp){
 8002296:	2c00      	cmp	r4, #0
 8002298:	d146      	bne.n	8002328 <LCD_F4_item+0xc0>
        	int32_t tmp = g_F4[item] * 2 * 0.75 - 48;
 800229a:	4b32      	ldr	r3, [pc, #200]	@ (8002364 <LCD_F4_item+0xfc>)
 800229c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80022a0:	0040      	lsls	r0, r0, #1
 80022a2:	f7fe f91f 	bl	80004e4 <__aeabi_i2d>
 80022a6:	2200      	movs	r2, #0
 80022a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002368 <LCD_F4_item+0x100>)
 80022aa:	f7fe f985 	bl	80005b8 <__aeabi_dmul>
 80022ae:	2200      	movs	r2, #0
 80022b0:	4b2e      	ldr	r3, [pc, #184]	@ (800236c <LCD_F4_item+0x104>)
 80022b2:	f7fd ffc9 	bl	8000248 <__aeabi_dsub>
 80022b6:	f7fe fc2f 	bl	8000b18 <__aeabi_d2iz>
            LCD_ShowNum(tmp);
 80022ba:	f7ff fd95 	bl	8001de8 <LCD_ShowNum>
        else{
        	LCD_ShowNum(g_F4[item]);
        }
    }

    item = GET_MENU(item + 1, F4_ITEM_MAX);
 80022be:	2c01      	cmp	r4, #1
 80022c0:	d938      	bls.n	8002334 <LCD_F4_item+0xcc>
 80022c2:	3c02      	subs	r4, #2
 80022c4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80022c6:	208b      	movs	r0, #139	@ 0x8b
 80022c8:	f7ff fce6 	bl	8001c98 <write_com>
    hzkdis(F4Item[item]);
 80022cc:	4b23      	ldr	r3, [pc, #140]	@ (800235c <LCD_F4_item+0xf4>)
 80022ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80022d2:	f7ff fd11 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 80022d6:	209b      	movs	r0, #155	@ 0x9b
 80022d8:	f7ff fcde 	bl	8001c98 <write_com>
    if (strcmp(F4Value[item][0], "") != 0) {
 80022dc:	01a3      	lsls	r3, r4, #6
 80022de:	4a20      	ldr	r2, [pc, #128]	@ (8002360 <LCD_F4_item+0xf8>)
 80022e0:	58d3      	ldr	r3, [r2, r3]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	bb4b      	cbnz	r3, 800233a <LCD_F4_item+0xd2>
        hzkdis(F4Value[item][g_F4[item]]);
    } else {
        if(item == EMS_4_EngineCoolantTemp){
 80022e6:	bb94      	cbnz	r4, 800234e <LCD_F4_item+0xe6>
        	int32_t tmp = g_F4[item] * 2 * 0.75 - 48;
 80022e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002364 <LCD_F4_item+0xfc>)
 80022ea:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80022ee:	0040      	lsls	r0, r0, #1
 80022f0:	f7fe f8f8 	bl	80004e4 <__aeabi_i2d>
 80022f4:	2200      	movs	r2, #0
 80022f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002368 <LCD_F4_item+0x100>)
 80022f8:	f7fe f95e 	bl	80005b8 <__aeabi_dmul>
 80022fc:	2200      	movs	r2, #0
 80022fe:	4b1b      	ldr	r3, [pc, #108]	@ (800236c <LCD_F4_item+0x104>)
 8002300:	f7fd ffa2 	bl	8000248 <__aeabi_dsub>
 8002304:	f7fe fc08 	bl	8000b18 <__aeabi_d2iz>
            LCD_ShowNum(tmp);
 8002308:	f7ff fd6e 	bl	8001de8 <LCD_ShowNum>
        }
        else{
        	LCD_ShowNum(g_F4[item]);
        }
    }
    write_com(0x93);
 800230c:	2093      	movs	r0, #147	@ 0x93
 800230e:	f7ff fcc3 	bl	8001c98 <write_com>
}
 8002312:	bd38      	pop	{r3, r4, r5, pc}
        hzkdis(F4Value[item][g_F4[item]]);
 8002314:	4b13      	ldr	r3, [pc, #76]	@ (8002364 <LCD_F4_item+0xfc>)
 8002316:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800231a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800231e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002322:	f7ff fce9 	bl	8001cf8 <hzkdis>
 8002326:	e7ca      	b.n	80022be <LCD_F4_item+0x56>
        	LCD_ShowNum(g_F4[item]);
 8002328:	4b0e      	ldr	r3, [pc, #56]	@ (8002364 <LCD_F4_item+0xfc>)
 800232a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800232e:	f7ff fd5b 	bl	8001de8 <LCD_ShowNum>
 8002332:	e7c4      	b.n	80022be <LCD_F4_item+0x56>
    item = GET_MENU(item + 1, F4_ITEM_MAX);
 8002334:	3401      	adds	r4, #1
 8002336:	b2e4      	uxtb	r4, r4
 8002338:	e7c5      	b.n	80022c6 <LCD_F4_item+0x5e>
        hzkdis(F4Value[item][g_F4[item]]);
 800233a:	4b0a      	ldr	r3, [pc, #40]	@ (8002364 <LCD_F4_item+0xfc>)
 800233c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002340:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002344:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002348:	f7ff fcd6 	bl	8001cf8 <hzkdis>
 800234c:	e7de      	b.n	800230c <LCD_F4_item+0xa4>
        	LCD_ShowNum(g_F4[item]);
 800234e:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <LCD_F4_item+0xfc>)
 8002350:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002354:	f7ff fd48 	bl	8001de8 <LCD_ShowNum>
 8002358:	e7d8      	b.n	800230c <LCD_F4_item+0xa4>
 800235a:	bf00      	nop
 800235c:	200003ec 	.word	0x200003ec
 8002360:	20002478 	.word	0x20002478
 8002364:	200003dc 	.word	0x200003dc
 8002368:	3fe80000 	.word	0x3fe80000
 800236c:	40480000 	.word	0x40480000

08002370 <LCD_F5_item>:

void LCD_F5_item(uint8_t item, int16_t value)
{
 8002370:	b510      	push	{r4, lr}
 8002372:	4604      	mov	r4, r0
    item = GET_MENU(item, F5_ITEM_MAX);
 8002374:	2803      	cmp	r0, #3
 8002376:	d901      	bls.n	800237c <LCD_F5_item+0xc>
 8002378:	1f04      	subs	r4, r0, #4
 800237a:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 800237c:	2083      	movs	r0, #131	@ 0x83
 800237e:	f7ff fc8b 	bl	8001c98 <write_com>
    hzkdis(F5Item[item]);
 8002382:	4b23      	ldr	r3, [pc, #140]	@ (8002410 <LCD_F5_item+0xa0>)
 8002384:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002388:	f7ff fcb6 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 800238c:	2093      	movs	r0, #147	@ 0x93
 800238e:	f7ff fc83 	bl	8001c98 <write_com>
    if (strcmp(F5Value[item][0], "") != 0) {
 8002392:	01a3      	lsls	r3, r4, #6
 8002394:	4a1f      	ldr	r2, [pc, #124]	@ (8002414 <LCD_F5_item+0xa4>)
 8002396:	58d3      	ldr	r3, [r2, r3]
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	b34b      	cbz	r3, 80023f0 <LCD_F5_item+0x80>
        hzkdis(F5Value[item][g_F5[item]]);
 800239c:	4b1e      	ldr	r3, [pc, #120]	@ (8002418 <LCD_F5_item+0xa8>)
 800239e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80023a2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80023a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80023aa:	f7ff fca5 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F5[item]);
    }

    item = GET_MENU(item + 1, F5_ITEM_MAX);
 80023ae:	2c02      	cmp	r4, #2
 80023b0:	d924      	bls.n	80023fc <LCD_F5_item+0x8c>
 80023b2:	3c03      	subs	r4, #3
 80023b4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80023b6:	208b      	movs	r0, #139	@ 0x8b
 80023b8:	f7ff fc6e 	bl	8001c98 <write_com>
    hzkdis(F5Item[item]);
 80023bc:	4b14      	ldr	r3, [pc, #80]	@ (8002410 <LCD_F5_item+0xa0>)
 80023be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80023c2:	f7ff fc99 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 80023c6:	209b      	movs	r0, #155	@ 0x9b
 80023c8:	f7ff fc66 	bl	8001c98 <write_com>
    if (strcmp(F5Value[item][0], "") != 0) {
 80023cc:	01a3      	lsls	r3, r4, #6
 80023ce:	4a11      	ldr	r2, [pc, #68]	@ (8002414 <LCD_F5_item+0xa4>)
 80023d0:	58d3      	ldr	r3, [r2, r3]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b1ab      	cbz	r3, 8002402 <LCD_F5_item+0x92>
        hzkdis(F5Value[item][g_F5[item]]);
 80023d6:	4b10      	ldr	r3, [pc, #64]	@ (8002418 <LCD_F5_item+0xa8>)
 80023d8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80023dc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80023e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80023e4:	f7ff fc88 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F5[item]);
    }
    write_com(0x93);
 80023e8:	2093      	movs	r0, #147	@ 0x93
 80023ea:	f7ff fc55 	bl	8001c98 <write_com>
}
 80023ee:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F5[item]);
 80023f0:	4b09      	ldr	r3, [pc, #36]	@ (8002418 <LCD_F5_item+0xa8>)
 80023f2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80023f6:	f7ff fcf7 	bl	8001de8 <LCD_ShowNum>
 80023fa:	e7d8      	b.n	80023ae <LCD_F5_item+0x3e>
    item = GET_MENU(item + 1, F5_ITEM_MAX);
 80023fc:	3401      	adds	r4, #1
 80023fe:	b2e4      	uxtb	r4, r4
 8002400:	e7d9      	b.n	80023b6 <LCD_F5_item+0x46>
        LCD_ShowNum(g_F5[item]);
 8002402:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <LCD_F5_item+0xa8>)
 8002404:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002408:	f7ff fcee 	bl	8001de8 <LCD_ShowNum>
 800240c:	e7ec      	b.n	80023e8 <LCD_F5_item+0x78>
 800240e:	bf00      	nop
 8002410:	200003cc 	.word	0x200003cc
 8002414:	20002378 	.word	0x20002378
 8002418:	20002368 	.word	0x20002368

0800241c <LCD_F9_item>:
    }
    write_com(0x93);
}

void LCD_F9_item(uint8_t item, int16_t value)
{
 800241c:	b510      	push	{r4, lr}
 800241e:	4604      	mov	r4, r0
    item = GET_MENU(item, F9_ITEM_MAX);
 8002420:	2806      	cmp	r0, #6
 8002422:	d901      	bls.n	8002428 <LCD_F9_item+0xc>
 8002424:	1fc4      	subs	r4, r0, #7
 8002426:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8002428:	2083      	movs	r0, #131	@ 0x83
 800242a:	f7ff fc35 	bl	8001c98 <write_com>
    hzkdis(F9Item[item]);
 800242e:	4b23      	ldr	r3, [pc, #140]	@ (80024bc <LCD_F9_item+0xa0>)
 8002430:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002434:	f7ff fc60 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8002438:	2093      	movs	r0, #147	@ 0x93
 800243a:	f7ff fc2d 	bl	8001c98 <write_com>
    if (strcmp(F9Value[item][0], "") != 0) {
 800243e:	01a3      	lsls	r3, r4, #6
 8002440:	4a1f      	ldr	r2, [pc, #124]	@ (80024c0 <LCD_F9_item+0xa4>)
 8002442:	58d3      	ldr	r3, [r2, r3]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	b34b      	cbz	r3, 800249c <LCD_F9_item+0x80>
        hzkdis(F9Value[item][g_F9[item]]);
 8002448:	4b1e      	ldr	r3, [pc, #120]	@ (80024c4 <LCD_F9_item+0xa8>)
 800244a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800244e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002452:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002456:	f7ff fc4f 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F9[item]);
    }

    item = GET_MENU(item + 1, F9_ITEM_MAX);
 800245a:	2c05      	cmp	r4, #5
 800245c:	d924      	bls.n	80024a8 <LCD_F9_item+0x8c>
 800245e:	3c06      	subs	r4, #6
 8002460:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8002462:	208b      	movs	r0, #139	@ 0x8b
 8002464:	f7ff fc18 	bl	8001c98 <write_com>
    hzkdis(F9Item[item]);
 8002468:	4b14      	ldr	r3, [pc, #80]	@ (80024bc <LCD_F9_item+0xa0>)
 800246a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800246e:	f7ff fc43 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8002472:	209b      	movs	r0, #155	@ 0x9b
 8002474:	f7ff fc10 	bl	8001c98 <write_com>
    if (strcmp(F9Value[item][0], "") != 0) {
 8002478:	01a3      	lsls	r3, r4, #6
 800247a:	4a11      	ldr	r2, [pc, #68]	@ (80024c0 <LCD_F9_item+0xa4>)
 800247c:	58d3      	ldr	r3, [r2, r3]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	b1ab      	cbz	r3, 80024ae <LCD_F9_item+0x92>
        hzkdis(F9Value[item][g_F9[item]]);
 8002482:	4b10      	ldr	r3, [pc, #64]	@ (80024c4 <LCD_F9_item+0xa8>)
 8002484:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002488:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800248c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002490:	f7ff fc32 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F9[item]);
    }
    write_com(0x93);
 8002494:	2093      	movs	r0, #147	@ 0x93
 8002496:	f7ff fbff 	bl	8001c98 <write_com>
}
 800249a:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F9[item]);
 800249c:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <LCD_F9_item+0xa8>)
 800249e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80024a2:	f7ff fca1 	bl	8001de8 <LCD_ShowNum>
 80024a6:	e7d8      	b.n	800245a <LCD_F9_item+0x3e>
    item = GET_MENU(item + 1, F9_ITEM_MAX);
 80024a8:	3401      	adds	r4, #1
 80024aa:	b2e4      	uxtb	r4, r4
 80024ac:	e7d9      	b.n	8002462 <LCD_F9_item+0x46>
        LCD_ShowNum(g_F9[item]);
 80024ae:	4b05      	ldr	r3, [pc, #20]	@ (80024c4 <LCD_F9_item+0xa8>)
 80024b0:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80024b4:	f7ff fc98 	bl	8001de8 <LCD_ShowNum>
 80024b8:	e7ec      	b.n	8002494 <LCD_F9_item+0x78>
 80024ba:	bf00      	nop
 80024bc:	20000300 	.word	0x20000300
 80024c0:	20001af0 	.word	0x20001af0
 80024c4:	20001ae0 	.word	0x20001ae0

080024c8 <LCD_F10_item>:

void LCD_F10_item(uint8_t item, int16_t value)
{
 80024c8:	b510      	push	{r4, lr}
 80024ca:	4604      	mov	r4, r0
    item = GET_MENU(item, F10_ITEM_MAX);
 80024cc:	2805      	cmp	r0, #5
 80024ce:	d901      	bls.n	80024d4 <LCD_F10_item+0xc>
 80024d0:	1f84      	subs	r4, r0, #6
 80024d2:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 80024d4:	2083      	movs	r0, #131	@ 0x83
 80024d6:	f7ff fbdf 	bl	8001c98 <write_com>
    hzkdis(F10Item[item]);
 80024da:	4b23      	ldr	r3, [pc, #140]	@ (8002568 <LCD_F10_item+0xa0>)
 80024dc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80024e0:	f7ff fc0a 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 80024e4:	2093      	movs	r0, #147	@ 0x93
 80024e6:	f7ff fbd7 	bl	8001c98 <write_com>
    if (strcmp(F10Value[item][0], "") != 0) {
 80024ea:	01a3      	lsls	r3, r4, #6
 80024ec:	4a1f      	ldr	r2, [pc, #124]	@ (800256c <LCD_F10_item+0xa4>)
 80024ee:	58d3      	ldr	r3, [r2, r3]
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	b34b      	cbz	r3, 8002548 <LCD_F10_item+0x80>
        hzkdis(F10Value[item][g_F10[item]]);
 80024f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002570 <LCD_F10_item+0xa8>)
 80024f6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80024fa:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80024fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002502:	f7ff fbf9 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F10[item]);
    }

    item = GET_MENU(item + 1, F10_ITEM_MAX);
 8002506:	2c04      	cmp	r4, #4
 8002508:	d924      	bls.n	8002554 <LCD_F10_item+0x8c>
 800250a:	3c05      	subs	r4, #5
 800250c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800250e:	208b      	movs	r0, #139	@ 0x8b
 8002510:	f7ff fbc2 	bl	8001c98 <write_com>
    hzkdis(F10Item[item]);
 8002514:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <LCD_F10_item+0xa0>)
 8002516:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800251a:	f7ff fbed 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 800251e:	209b      	movs	r0, #155	@ 0x9b
 8002520:	f7ff fbba 	bl	8001c98 <write_com>
    if (strcmp(F10Value[item][0], "") != 0) {
 8002524:	01a3      	lsls	r3, r4, #6
 8002526:	4a11      	ldr	r2, [pc, #68]	@ (800256c <LCD_F10_item+0xa4>)
 8002528:	58d3      	ldr	r3, [r2, r3]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	b1ab      	cbz	r3, 800255a <LCD_F10_item+0x92>
        hzkdis(F10Value[item][g_F10[item]]);
 800252e:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <LCD_F10_item+0xa8>)
 8002530:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002534:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002538:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800253c:	f7ff fbdc 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F10[item]);
    }
    write_com(0x93);
 8002540:	2093      	movs	r0, #147	@ 0x93
 8002542:	f7ff fba9 	bl	8001c98 <write_com>
}
 8002546:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F10[item]);
 8002548:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <LCD_F10_item+0xa8>)
 800254a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800254e:	f7ff fc4b 	bl	8001de8 <LCD_ShowNum>
 8002552:	e7d8      	b.n	8002506 <LCD_F10_item+0x3e>
    item = GET_MENU(item + 1, F10_ITEM_MAX);
 8002554:	3401      	adds	r4, #1
 8002556:	b2e4      	uxtb	r4, r4
 8002558:	e7d9      	b.n	800250e <LCD_F10_item+0x46>
        LCD_ShowNum(g_F10[item]);
 800255a:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <LCD_F10_item+0xa8>)
 800255c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002560:	f7ff fc42 	bl	8001de8 <LCD_ShowNum>
 8002564:	e7ec      	b.n	8002540 <LCD_F10_item+0x78>
 8002566:	bf00      	nop
 8002568:	200002d8 	.word	0x200002d8
 800256c:	20001960 	.word	0x20001960
 8002570:	20001954 	.word	0x20001954

08002574 <LCD_F11_item>:

void LCD_F11_item(uint8_t item, int16_t value)
{
 8002574:	b510      	push	{r4, lr}
 8002576:	4604      	mov	r4, r0
    item = GET_MENU(item, F11_ITEM_MAX);
 8002578:	2804      	cmp	r0, #4
 800257a:	d901      	bls.n	8002580 <LCD_F11_item+0xc>
 800257c:	1f44      	subs	r4, r0, #5
 800257e:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8002580:	2083      	movs	r0, #131	@ 0x83
 8002582:	f7ff fb89 	bl	8001c98 <write_com>
    hzkdis(F11Item[item]);
 8002586:	4b23      	ldr	r3, [pc, #140]	@ (8002614 <LCD_F11_item+0xa0>)
 8002588:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800258c:	f7ff fbb4 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8002590:	2093      	movs	r0, #147	@ 0x93
 8002592:	f7ff fb81 	bl	8001c98 <write_com>
    if (strcmp(F11Value[item][0], "") != 0) {
 8002596:	01a3      	lsls	r3, r4, #6
 8002598:	4a1f      	ldr	r2, [pc, #124]	@ (8002618 <LCD_F11_item+0xa4>)
 800259a:	58d3      	ldr	r3, [r2, r3]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	b34b      	cbz	r3, 80025f4 <LCD_F11_item+0x80>
        hzkdis(F11Value[item][g_F11[item]]);
 80025a0:	4b1e      	ldr	r3, [pc, #120]	@ (800261c <LCD_F11_item+0xa8>)
 80025a2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80025a6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80025aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80025ae:	f7ff fba3 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F11[item]);
    }

    item = GET_MENU(item + 1, F11_ITEM_MAX);
 80025b2:	2c03      	cmp	r4, #3
 80025b4:	d924      	bls.n	8002600 <LCD_F11_item+0x8c>
 80025b6:	3c04      	subs	r4, #4
 80025b8:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80025ba:	208b      	movs	r0, #139	@ 0x8b
 80025bc:	f7ff fb6c 	bl	8001c98 <write_com>
    hzkdis(F11Item[item]);
 80025c0:	4b14      	ldr	r3, [pc, #80]	@ (8002614 <LCD_F11_item+0xa0>)
 80025c2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80025c6:	f7ff fb97 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 80025ca:	209b      	movs	r0, #155	@ 0x9b
 80025cc:	f7ff fb64 	bl	8001c98 <write_com>
    if (strcmp(F11Value[item][0], "") != 0) {
 80025d0:	01a3      	lsls	r3, r4, #6
 80025d2:	4a11      	ldr	r2, [pc, #68]	@ (8002618 <LCD_F11_item+0xa4>)
 80025d4:	58d3      	ldr	r3, [r2, r3]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	b1ab      	cbz	r3, 8002606 <LCD_F11_item+0x92>
        hzkdis(F11Value[item][g_F11[item]]);
 80025da:	4b10      	ldr	r3, [pc, #64]	@ (800261c <LCD_F11_item+0xa8>)
 80025dc:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80025e0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80025e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80025e8:	f7ff fb86 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F11[item]);
    }
    write_com(0x93);
 80025ec:	2093      	movs	r0, #147	@ 0x93
 80025ee:	f7ff fb53 	bl	8001c98 <write_com>
}
 80025f2:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F11[item]);
 80025f4:	4b09      	ldr	r3, [pc, #36]	@ (800261c <LCD_F11_item+0xa8>)
 80025f6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80025fa:	f7ff fbf5 	bl	8001de8 <LCD_ShowNum>
 80025fe:	e7d8      	b.n	80025b2 <LCD_F11_item+0x3e>
    item = GET_MENU(item + 1, F11_ITEM_MAX);
 8002600:	3401      	adds	r4, #1
 8002602:	b2e4      	uxtb	r4, r4
 8002604:	e7d9      	b.n	80025ba <LCD_F11_item+0x46>
        LCD_ShowNum(g_F11[item]);
 8002606:	4b05      	ldr	r3, [pc, #20]	@ (800261c <LCD_F11_item+0xa8>)
 8002608:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800260c:	f7ff fbec 	bl	8001de8 <LCD_ShowNum>
 8002610:	e7ec      	b.n	80025ec <LCD_F11_item+0x78>
 8002612:	bf00      	nop
 8002614:	200002b8 	.word	0x200002b8
 8002618:	20001814 	.word	0x20001814
 800261c:	20001808 	.word	0x20001808

08002620 <LCD_F13_item>:
    }
    write_com(0x93);
}

void LCD_F13_item(uint8_t item, int16_t value)
{
 8002620:	b510      	push	{r4, lr}
 8002622:	4604      	mov	r4, r0
    item = GET_MENU(item, F13_ITEM_MAX);
 8002624:	2830      	cmp	r0, #48	@ 0x30
 8002626:	d902      	bls.n	800262e <LCD_F13_item+0xe>
 8002628:	f1a0 0431 	sub.w	r4, r0, #49	@ 0x31
 800262c:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 800262e:	2083      	movs	r0, #131	@ 0x83
 8002630:	f7ff fb32 	bl	8001c98 <write_com>
    hzkdis(F13Item[item]);
 8002634:	4b22      	ldr	r3, [pc, #136]	@ (80026c0 <LCD_F13_item+0xa0>)
 8002636:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800263a:	f7ff fb5d 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 800263e:	2093      	movs	r0, #147	@ 0x93
 8002640:	f7ff fb2a 	bl	8001c98 <write_com>
    if (strcmp(F13Value[item][0], "") != 0) {
 8002644:	01a3      	lsls	r3, r4, #6
 8002646:	4a1f      	ldr	r2, [pc, #124]	@ (80026c4 <LCD_F13_item+0xa4>)
 8002648:	58d3      	ldr	r3, [r2, r3]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	b34b      	cbz	r3, 80026a2 <LCD_F13_item+0x82>
        hzkdis(F13Value[item][g_F13[item]]);
 800264e:	4b1e      	ldr	r3, [pc, #120]	@ (80026c8 <LCD_F13_item+0xa8>)
 8002650:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002654:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002658:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800265c:	f7ff fb4c 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F13[item]);
    }

    item = GET_MENU(item + 1, F13_ITEM_MAX);
 8002660:	2c2f      	cmp	r4, #47	@ 0x2f
 8002662:	d924      	bls.n	80026ae <LCD_F13_item+0x8e>
 8002664:	3c30      	subs	r4, #48	@ 0x30
 8002666:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8002668:	208b      	movs	r0, #139	@ 0x8b
 800266a:	f7ff fb15 	bl	8001c98 <write_com>
    hzkdis(F13Item[item]);
 800266e:	4b14      	ldr	r3, [pc, #80]	@ (80026c0 <LCD_F13_item+0xa0>)
 8002670:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002674:	f7ff fb40 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8002678:	209b      	movs	r0, #155	@ 0x9b
 800267a:	f7ff fb0d 	bl	8001c98 <write_com>
    if (strcmp(F13Value[item][0], "") != 0) {
 800267e:	01a3      	lsls	r3, r4, #6
 8002680:	4a10      	ldr	r2, [pc, #64]	@ (80026c4 <LCD_F13_item+0xa4>)
 8002682:	58d3      	ldr	r3, [r2, r3]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b1ab      	cbz	r3, 80026b4 <LCD_F13_item+0x94>
        hzkdis(F13Value[item][g_F13[item]]);
 8002688:	4b0f      	ldr	r3, [pc, #60]	@ (80026c8 <LCD_F13_item+0xa8>)
 800268a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800268e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002692:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002696:	f7ff fb2f 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F13[item]);
    }
    write_com(0x93);
 800269a:	2093      	movs	r0, #147	@ 0x93
 800269c:	f7ff fafc 	bl	8001c98 <write_com>
}
 80026a0:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F13[item]);
 80026a2:	4b09      	ldr	r3, [pc, #36]	@ (80026c8 <LCD_F13_item+0xa8>)
 80026a4:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80026a8:	f7ff fb9e 	bl	8001de8 <LCD_ShowNum>
 80026ac:	e7d8      	b.n	8002660 <LCD_F13_item+0x40>
    item = GET_MENU(item + 1, F13_ITEM_MAX);
 80026ae:	3401      	adds	r4, #1
 80026b0:	b2e4      	uxtb	r4, r4
 80026b2:	e7d9      	b.n	8002668 <LCD_F13_item+0x48>
        LCD_ShowNum(g_F13[item]);
 80026b4:	4b04      	ldr	r3, [pc, #16]	@ (80026c8 <LCD_F13_item+0xa8>)
 80026b6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80026ba:	f7ff fb95 	bl	8001de8 <LCD_ShowNum>
 80026be:	e7ec      	b.n	800269a <LCD_F13_item+0x7a>
 80026c0:	200001d4 	.word	0x200001d4
 80026c4:	20000b00 	.word	0x20000b00
 80026c8:	20000a9c 	.word	0x20000a9c

080026cc <LCD_F14_item>:

void LCD_F14_item(uint8_t item, int16_t value)
{
 80026cc:	b510      	push	{r4, lr}
 80026ce:	4604      	mov	r4, r0
    item = GET_MENU(item, F14_ITEM_MAX);
    write_com(0x83);
 80026d0:	2083      	movs	r0, #131	@ 0x83
 80026d2:	f7ff fae1 	bl	8001c98 <write_com>
    hzkdis(F14Item[item]);
 80026d6:	4b20      	ldr	r3, [pc, #128]	@ (8002758 <LCD_F14_item+0x8c>)
 80026d8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80026dc:	f7ff fb0c 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 80026e0:	2093      	movs	r0, #147	@ 0x93
 80026e2:	f7ff fad9 	bl	8001c98 <write_com>
    if (strcmp(F14Value[item][0], "") != 0) {
 80026e6:	01a3      	lsls	r3, r4, #6
 80026e8:	4a1c      	ldr	r2, [pc, #112]	@ (800275c <LCD_F14_item+0x90>)
 80026ea:	58d3      	ldr	r3, [r2, r3]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	b33b      	cbz	r3, 8002740 <LCD_F14_item+0x74>
        hzkdis(F14Value[item][g_F14[item]]);
 80026f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <LCD_F14_item+0x94>)
 80026f2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80026f6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80026fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80026fe:	f7ff fafb 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F14[item]);
    }

    item = GET_MENU(item + 1, F14_ITEM_MAX);
 8002702:	3401      	adds	r4, #1
 8002704:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8002706:	208b      	movs	r0, #139	@ 0x8b
 8002708:	f7ff fac6 	bl	8001c98 <write_com>
    hzkdis(F14Item[item]);
 800270c:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <LCD_F14_item+0x8c>)
 800270e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002712:	f7ff faf1 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8002716:	209b      	movs	r0, #155	@ 0x9b
 8002718:	f7ff fabe 	bl	8001c98 <write_com>
    if (strcmp(F14Value[item][0], "") != 0) {
 800271c:	01a3      	lsls	r3, r4, #6
 800271e:	4a0f      	ldr	r2, [pc, #60]	@ (800275c <LCD_F14_item+0x90>)
 8002720:	58d3      	ldr	r3, [r2, r3]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	b193      	cbz	r3, 800274c <LCD_F14_item+0x80>
        hzkdis(F14Value[item][g_F14[item]]);
 8002726:	4b0e      	ldr	r3, [pc, #56]	@ (8002760 <LCD_F14_item+0x94>)
 8002728:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800272c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002730:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002734:	f7ff fae0 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F14[item]);
    }
    write_com(0x93);
 8002738:	2093      	movs	r0, #147	@ 0x93
 800273a:	f7ff faad 	bl	8001c98 <write_com>
}
 800273e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F14[item]);
 8002740:	4b07      	ldr	r3, [pc, #28]	@ (8002760 <LCD_F14_item+0x94>)
 8002742:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002746:	f7ff fb4f 	bl	8001de8 <LCD_ShowNum>
 800274a:	e7da      	b.n	8002702 <LCD_F14_item+0x36>
        LCD_ShowNum(g_F14[item]);
 800274c:	4b04      	ldr	r3, [pc, #16]	@ (8002760 <LCD_F14_item+0x94>)
 800274e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002752:	f7ff fb49 	bl	8001de8 <LCD_ShowNum>
 8002756:	e7ef      	b.n	8002738 <LCD_F14_item+0x6c>
 8002758:	20000a9c 	.word	0x20000a9c
 800275c:	20000a9c 	.word	0x20000a9c
 8002760:	20000a9c 	.word	0x20000a9c

08002764 <LCD_F15_item>:

void LCD_F15_item(uint8_t item, int16_t value)
{
 8002764:	b510      	push	{r4, lr}
 8002766:	4604      	mov	r4, r0
    item = GET_MENU(item, F15_ITEM_MAX);
    write_com(0x83);
 8002768:	2083      	movs	r0, #131	@ 0x83
 800276a:	f7ff fa95 	bl	8001c98 <write_com>
    hzkdis(F15Item[item]);
 800276e:	4b20      	ldr	r3, [pc, #128]	@ (80027f0 <LCD_F15_item+0x8c>)
 8002770:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002774:	f7ff fac0 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8002778:	2093      	movs	r0, #147	@ 0x93
 800277a:	f7ff fa8d 	bl	8001c98 <write_com>
    if (strcmp(F15Value[item][0], "") != 0) {
 800277e:	01a3      	lsls	r3, r4, #6
 8002780:	4a1c      	ldr	r2, [pc, #112]	@ (80027f4 <LCD_F15_item+0x90>)
 8002782:	58d3      	ldr	r3, [r2, r3]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	b33b      	cbz	r3, 80027d8 <LCD_F15_item+0x74>
        hzkdis(F15Value[item][g_F15[item]]);
 8002788:	4b1b      	ldr	r3, [pc, #108]	@ (80027f8 <LCD_F15_item+0x94>)
 800278a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800278e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002792:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002796:	f7ff faaf 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F15[item]);
    }

    item = GET_MENU(item + 1, F15_ITEM_MAX);
 800279a:	3401      	adds	r4, #1
 800279c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800279e:	208b      	movs	r0, #139	@ 0x8b
 80027a0:	f7ff fa7a 	bl	8001c98 <write_com>
    hzkdis(F15Item[item]);
 80027a4:	4b12      	ldr	r3, [pc, #72]	@ (80027f0 <LCD_F15_item+0x8c>)
 80027a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80027aa:	f7ff faa5 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 80027ae:	209b      	movs	r0, #155	@ 0x9b
 80027b0:	f7ff fa72 	bl	8001c98 <write_com>
    if (strcmp(F15Value[item][0], "") != 0) {
 80027b4:	01a3      	lsls	r3, r4, #6
 80027b6:	4a0f      	ldr	r2, [pc, #60]	@ (80027f4 <LCD_F15_item+0x90>)
 80027b8:	58d3      	ldr	r3, [r2, r3]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	b193      	cbz	r3, 80027e4 <LCD_F15_item+0x80>
        hzkdis(F15Value[item][g_F15[item]]);
 80027be:	4b0e      	ldr	r3, [pc, #56]	@ (80027f8 <LCD_F15_item+0x94>)
 80027c0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80027c4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80027c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80027cc:	f7ff fa94 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F15[item]);
    }
    write_com(0x93);
 80027d0:	2093      	movs	r0, #147	@ 0x93
 80027d2:	f7ff fa61 	bl	8001c98 <write_com>
}
 80027d6:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F15[item]);
 80027d8:	4b07      	ldr	r3, [pc, #28]	@ (80027f8 <LCD_F15_item+0x94>)
 80027da:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80027de:	f7ff fb03 	bl	8001de8 <LCD_ShowNum>
 80027e2:	e7da      	b.n	800279a <LCD_F15_item+0x36>
        LCD_ShowNum(g_F15[item]);
 80027e4:	4b04      	ldr	r3, [pc, #16]	@ (80027f8 <LCD_F15_item+0x94>)
 80027e6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80027ea:	f7ff fafd 	bl	8001de8 <LCD_ShowNum>
 80027ee:	e7ef      	b.n	80027d0 <LCD_F15_item+0x6c>
 80027f0:	20000a9c 	.word	0x20000a9c
 80027f4:	20000a9c 	.word	0x20000a9c
 80027f8:	20000a9c 	.word	0x20000a9c

080027fc <LCD_F16_item>:

void LCD_F16_item(uint8_t item, int16_t value)
{
 80027fc:	b510      	push	{r4, lr}
 80027fe:	4604      	mov	r4, r0
    item = GET_MENU(item, F16_ITEM_MAX);
    write_com(0x83);
 8002800:	2083      	movs	r0, #131	@ 0x83
 8002802:	f7ff fa49 	bl	8001c98 <write_com>
    hzkdis(F16Item[item]);
 8002806:	4b20      	ldr	r3, [pc, #128]	@ (8002888 <LCD_F16_item+0x8c>)
 8002808:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800280c:	f7ff fa74 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8002810:	2093      	movs	r0, #147	@ 0x93
 8002812:	f7ff fa41 	bl	8001c98 <write_com>
    if (strcmp(F16Value[item][0], "") != 0) {
 8002816:	01a3      	lsls	r3, r4, #6
 8002818:	4a1c      	ldr	r2, [pc, #112]	@ (800288c <LCD_F16_item+0x90>)
 800281a:	58d3      	ldr	r3, [r2, r3]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	b33b      	cbz	r3, 8002870 <LCD_F16_item+0x74>
        hzkdis(F16Value[item][g_F16[item]]);
 8002820:	4b1b      	ldr	r3, [pc, #108]	@ (8002890 <LCD_F16_item+0x94>)
 8002822:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002826:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800282a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800282e:	f7ff fa63 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F16[item]);
    }

    item = GET_MENU(item + 1, F16_ITEM_MAX);
 8002832:	3401      	adds	r4, #1
 8002834:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8002836:	208b      	movs	r0, #139	@ 0x8b
 8002838:	f7ff fa2e 	bl	8001c98 <write_com>
    hzkdis(F16Item[item]);
 800283c:	4b12      	ldr	r3, [pc, #72]	@ (8002888 <LCD_F16_item+0x8c>)
 800283e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002842:	f7ff fa59 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8002846:	209b      	movs	r0, #155	@ 0x9b
 8002848:	f7ff fa26 	bl	8001c98 <write_com>
    if (strcmp(F16Value[item][0], "") != 0) {
 800284c:	01a3      	lsls	r3, r4, #6
 800284e:	4a0f      	ldr	r2, [pc, #60]	@ (800288c <LCD_F16_item+0x90>)
 8002850:	58d3      	ldr	r3, [r2, r3]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b193      	cbz	r3, 800287c <LCD_F16_item+0x80>
        hzkdis(F16Value[item][g_F16[item]]);
 8002856:	4b0e      	ldr	r3, [pc, #56]	@ (8002890 <LCD_F16_item+0x94>)
 8002858:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800285c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002860:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002864:	f7ff fa48 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F16[item]);
    }
    write_com(0x93);
 8002868:	2093      	movs	r0, #147	@ 0x93
 800286a:	f7ff fa15 	bl	8001c98 <write_com>
}
 800286e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F16[item]);
 8002870:	4b07      	ldr	r3, [pc, #28]	@ (8002890 <LCD_F16_item+0x94>)
 8002872:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002876:	f7ff fab7 	bl	8001de8 <LCD_ShowNum>
 800287a:	e7da      	b.n	8002832 <LCD_F16_item+0x36>
        LCD_ShowNum(g_F16[item]);
 800287c:	4b04      	ldr	r3, [pc, #16]	@ (8002890 <LCD_F16_item+0x94>)
 800287e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002882:	f7ff fab1 	bl	8001de8 <LCD_ShowNum>
 8002886:	e7ef      	b.n	8002868 <LCD_F16_item+0x6c>
 8002888:	20000a9c 	.word	0x20000a9c
 800288c:	20000a9c 	.word	0x20000a9c
 8002890:	20000a9c 	.word	0x20000a9c

08002894 <LCD_F17_item>:

void LCD_F17_item(uint8_t item, int16_t value)
{
 8002894:	b510      	push	{r4, lr}
 8002896:	4604      	mov	r4, r0
    item = GET_MENU(item, F17_ITEM_MAX);
    write_com(0x83);
 8002898:	2083      	movs	r0, #131	@ 0x83
 800289a:	f7ff f9fd 	bl	8001c98 <write_com>
    hzkdis(F17Item[item]);
 800289e:	4b20      	ldr	r3, [pc, #128]	@ (8002920 <LCD_F17_item+0x8c>)
 80028a0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80028a4:	f7ff fa28 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 80028a8:	2093      	movs	r0, #147	@ 0x93
 80028aa:	f7ff f9f5 	bl	8001c98 <write_com>
    if (strcmp(F17Value[item][0], "") != 0) {
 80028ae:	01a3      	lsls	r3, r4, #6
 80028b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002924 <LCD_F17_item+0x90>)
 80028b2:	58d3      	ldr	r3, [r2, r3]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	b33b      	cbz	r3, 8002908 <LCD_F17_item+0x74>
        hzkdis(F17Value[item][g_F17[item]]);
 80028b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002928 <LCD_F17_item+0x94>)
 80028ba:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80028be:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80028c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80028c6:	f7ff fa17 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F17[item]);
    }

    item = GET_MENU(item + 1, F17_ITEM_MAX);
 80028ca:	3401      	adds	r4, #1
 80028cc:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80028ce:	208b      	movs	r0, #139	@ 0x8b
 80028d0:	f7ff f9e2 	bl	8001c98 <write_com>
    hzkdis(F17Item[item]);
 80028d4:	4b12      	ldr	r3, [pc, #72]	@ (8002920 <LCD_F17_item+0x8c>)
 80028d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80028da:	f7ff fa0d 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 80028de:	209b      	movs	r0, #155	@ 0x9b
 80028e0:	f7ff f9da 	bl	8001c98 <write_com>
    if (strcmp(F17Value[item][0], "") != 0) {
 80028e4:	01a3      	lsls	r3, r4, #6
 80028e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002924 <LCD_F17_item+0x90>)
 80028e8:	58d3      	ldr	r3, [r2, r3]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	b193      	cbz	r3, 8002914 <LCD_F17_item+0x80>
        hzkdis(F17Value[item][g_F17[item]]);
 80028ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002928 <LCD_F17_item+0x94>)
 80028f0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80028f4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80028f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80028fc:	f7ff f9fc 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F17[item]);
    }
    write_com(0x93);
 8002900:	2093      	movs	r0, #147	@ 0x93
 8002902:	f7ff f9c9 	bl	8001c98 <write_com>
}
 8002906:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F17[item]);
 8002908:	4b07      	ldr	r3, [pc, #28]	@ (8002928 <LCD_F17_item+0x94>)
 800290a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800290e:	f7ff fa6b 	bl	8001de8 <LCD_ShowNum>
 8002912:	e7da      	b.n	80028ca <LCD_F17_item+0x36>
        LCD_ShowNum(g_F17[item]);
 8002914:	4b04      	ldr	r3, [pc, #16]	@ (8002928 <LCD_F17_item+0x94>)
 8002916:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800291a:	f7ff fa65 	bl	8001de8 <LCD_ShowNum>
 800291e:	e7ef      	b.n	8002900 <LCD_F17_item+0x6c>
 8002920:	20000a9c 	.word	0x20000a9c
 8002924:	20000a9c 	.word	0x20000a9c
 8002928:	20000a9c 	.word	0x20000a9c

0800292c <LCD_F18_item>:

void LCD_F18_item(uint8_t item, int16_t value)
{
 800292c:	b510      	push	{r4, lr}
 800292e:	4604      	mov	r4, r0
    item = GET_MENU(item, F18_ITEM_MAX);
    write_com(0x83);
 8002930:	2083      	movs	r0, #131	@ 0x83
 8002932:	f7ff f9b1 	bl	8001c98 <write_com>
    hzkdis(F18Item[item]);
 8002936:	4b20      	ldr	r3, [pc, #128]	@ (80029b8 <LCD_F18_item+0x8c>)
 8002938:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800293c:	f7ff f9dc 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8002940:	2093      	movs	r0, #147	@ 0x93
 8002942:	f7ff f9a9 	bl	8001c98 <write_com>
    if (strcmp(F18Value[item][0], "") != 0) {
 8002946:	01a3      	lsls	r3, r4, #6
 8002948:	4a1c      	ldr	r2, [pc, #112]	@ (80029bc <LCD_F18_item+0x90>)
 800294a:	58d3      	ldr	r3, [r2, r3]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	b33b      	cbz	r3, 80029a0 <LCD_F18_item+0x74>
        hzkdis(F18Value[item][g_F18[item]]);
 8002950:	4b1b      	ldr	r3, [pc, #108]	@ (80029c0 <LCD_F18_item+0x94>)
 8002952:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002956:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800295a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800295e:	f7ff f9cb 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F18[item]);
    }

    item = GET_MENU(item + 1, F18_ITEM_MAX);
 8002962:	3401      	adds	r4, #1
 8002964:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8002966:	208b      	movs	r0, #139	@ 0x8b
 8002968:	f7ff f996 	bl	8001c98 <write_com>
    hzkdis(F18Item[item]);
 800296c:	4b12      	ldr	r3, [pc, #72]	@ (80029b8 <LCD_F18_item+0x8c>)
 800296e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002972:	f7ff f9c1 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8002976:	209b      	movs	r0, #155	@ 0x9b
 8002978:	f7ff f98e 	bl	8001c98 <write_com>
    if (strcmp(F18Value[item][0], "") != 0) {
 800297c:	01a3      	lsls	r3, r4, #6
 800297e:	4a0f      	ldr	r2, [pc, #60]	@ (80029bc <LCD_F18_item+0x90>)
 8002980:	58d3      	ldr	r3, [r2, r3]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	b193      	cbz	r3, 80029ac <LCD_F18_item+0x80>
        hzkdis(F18Value[item][g_F18[item]]);
 8002986:	4b0e      	ldr	r3, [pc, #56]	@ (80029c0 <LCD_F18_item+0x94>)
 8002988:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800298c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002990:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002994:	f7ff f9b0 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F18[item]);
    }
    write_com(0x93);
 8002998:	2093      	movs	r0, #147	@ 0x93
 800299a:	f7ff f97d 	bl	8001c98 <write_com>
}
 800299e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F18[item]);
 80029a0:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <LCD_F18_item+0x94>)
 80029a2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80029a6:	f7ff fa1f 	bl	8001de8 <LCD_ShowNum>
 80029aa:	e7da      	b.n	8002962 <LCD_F18_item+0x36>
        LCD_ShowNum(g_F18[item]);
 80029ac:	4b04      	ldr	r3, [pc, #16]	@ (80029c0 <LCD_F18_item+0x94>)
 80029ae:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80029b2:	f7ff fa19 	bl	8001de8 <LCD_ShowNum>
 80029b6:	e7ef      	b.n	8002998 <LCD_F18_item+0x6c>
 80029b8:	20000a9c 	.word	0x20000a9c
 80029bc:	20000a9c 	.word	0x20000a9c
 80029c0:	20000a9c 	.word	0x20000a9c

080029c4 <LCD_F19_item>:

void LCD_F19_item(uint8_t item, int16_t value)
{
 80029c4:	b510      	push	{r4, lr}
 80029c6:	4604      	mov	r4, r0
    item = GET_MENU(item, F19_ITEM_MAX);
    write_com(0x83);
 80029c8:	2083      	movs	r0, #131	@ 0x83
 80029ca:	f7ff f965 	bl	8001c98 <write_com>
    hzkdis(F19Item[item]);
 80029ce:	4b20      	ldr	r3, [pc, #128]	@ (8002a50 <LCD_F19_item+0x8c>)
 80029d0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80029d4:	f7ff f990 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 80029d8:	2093      	movs	r0, #147	@ 0x93
 80029da:	f7ff f95d 	bl	8001c98 <write_com>
    if (strcmp(F19Value[item][0], "") != 0) {
 80029de:	01a3      	lsls	r3, r4, #6
 80029e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002a54 <LCD_F19_item+0x90>)
 80029e2:	58d3      	ldr	r3, [r2, r3]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	b33b      	cbz	r3, 8002a38 <LCD_F19_item+0x74>
        hzkdis(F19Value[item][g_F19[item]]);
 80029e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a58 <LCD_F19_item+0x94>)
 80029ea:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80029ee:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80029f2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80029f6:	f7ff f97f 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F19[item]);
    }

    item = GET_MENU(item + 1, F19_ITEM_MAX);
 80029fa:	3401      	adds	r4, #1
 80029fc:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80029fe:	208b      	movs	r0, #139	@ 0x8b
 8002a00:	f7ff f94a 	bl	8001c98 <write_com>
    hzkdis(F19Item[item]);
 8002a04:	4b12      	ldr	r3, [pc, #72]	@ (8002a50 <LCD_F19_item+0x8c>)
 8002a06:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002a0a:	f7ff f975 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8002a0e:	209b      	movs	r0, #155	@ 0x9b
 8002a10:	f7ff f942 	bl	8001c98 <write_com>
    if (strcmp(F19Value[item][0], "") != 0) {
 8002a14:	01a3      	lsls	r3, r4, #6
 8002a16:	4a0f      	ldr	r2, [pc, #60]	@ (8002a54 <LCD_F19_item+0x90>)
 8002a18:	58d3      	ldr	r3, [r2, r3]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	b193      	cbz	r3, 8002a44 <LCD_F19_item+0x80>
        hzkdis(F19Value[item][g_F19[item]]);
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <LCD_F19_item+0x94>)
 8002a20:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002a24:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002a28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a2c:	f7ff f964 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F19[item]);
    }
    write_com(0x93);
 8002a30:	2093      	movs	r0, #147	@ 0x93
 8002a32:	f7ff f931 	bl	8001c98 <write_com>
}
 8002a36:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F19[item]);
 8002a38:	4b07      	ldr	r3, [pc, #28]	@ (8002a58 <LCD_F19_item+0x94>)
 8002a3a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002a3e:	f7ff f9d3 	bl	8001de8 <LCD_ShowNum>
 8002a42:	e7da      	b.n	80029fa <LCD_F19_item+0x36>
        LCD_ShowNum(g_F19[item]);
 8002a44:	4b04      	ldr	r3, [pc, #16]	@ (8002a58 <LCD_F19_item+0x94>)
 8002a46:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002a4a:	f7ff f9cd 	bl	8001de8 <LCD_ShowNum>
 8002a4e:	e7ef      	b.n	8002a30 <LCD_F19_item+0x6c>
 8002a50:	20000a9c 	.word	0x20000a9c
 8002a54:	20000a9c 	.word	0x20000a9c
 8002a58:	20000a9c 	.word	0x20000a9c

08002a5c <LCD_F20_item>:

void LCD_F20_item(uint8_t item, int16_t value)
{
 8002a5c:	b510      	push	{r4, lr}
 8002a5e:	4604      	mov	r4, r0
    item = GET_MENU(item, F20_ITEM_MAX);
    write_com(0x83);
 8002a60:	2083      	movs	r0, #131	@ 0x83
 8002a62:	f7ff f919 	bl	8001c98 <write_com>
    hzkdis(F20Item[item]);
 8002a66:	4b20      	ldr	r3, [pc, #128]	@ (8002ae8 <LCD_F20_item+0x8c>)
 8002a68:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002a6c:	f7ff f944 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8002a70:	2093      	movs	r0, #147	@ 0x93
 8002a72:	f7ff f911 	bl	8001c98 <write_com>
    if (strcmp(F20Value[item][0], "") != 0) {
 8002a76:	01a3      	lsls	r3, r4, #6
 8002a78:	4a1c      	ldr	r2, [pc, #112]	@ (8002aec <LCD_F20_item+0x90>)
 8002a7a:	58d3      	ldr	r3, [r2, r3]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	b33b      	cbz	r3, 8002ad0 <LCD_F20_item+0x74>
        hzkdis(F20Value[item][g_F20[item]]);
 8002a80:	4b1b      	ldr	r3, [pc, #108]	@ (8002af0 <LCD_F20_item+0x94>)
 8002a82:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002a86:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002a8a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a8e:	f7ff f933 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F20[item]);
    }

    item = GET_MENU(item + 1, F20_ITEM_MAX);
 8002a92:	3401      	adds	r4, #1
 8002a94:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8002a96:	208b      	movs	r0, #139	@ 0x8b
 8002a98:	f7ff f8fe 	bl	8001c98 <write_com>
    hzkdis(F20Item[item]);
 8002a9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ae8 <LCD_F20_item+0x8c>)
 8002a9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002aa2:	f7ff f929 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8002aa6:	209b      	movs	r0, #155	@ 0x9b
 8002aa8:	f7ff f8f6 	bl	8001c98 <write_com>
    if (strcmp(F20Value[item][0], "") != 0) {
 8002aac:	01a3      	lsls	r3, r4, #6
 8002aae:	4a0f      	ldr	r2, [pc, #60]	@ (8002aec <LCD_F20_item+0x90>)
 8002ab0:	58d3      	ldr	r3, [r2, r3]
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	b193      	cbz	r3, 8002adc <LCD_F20_item+0x80>
        hzkdis(F20Value[item][g_F20[item]]);
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8002af0 <LCD_F20_item+0x94>)
 8002ab8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002abc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002ac0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ac4:	f7ff f918 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F20[item]);
    }
    write_com(0x93);
 8002ac8:	2093      	movs	r0, #147	@ 0x93
 8002aca:	f7ff f8e5 	bl	8001c98 <write_com>
}
 8002ace:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F20[item]);
 8002ad0:	4b07      	ldr	r3, [pc, #28]	@ (8002af0 <LCD_F20_item+0x94>)
 8002ad2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002ad6:	f7ff f987 	bl	8001de8 <LCD_ShowNum>
 8002ada:	e7da      	b.n	8002a92 <LCD_F20_item+0x36>
        LCD_ShowNum(g_F20[item]);
 8002adc:	4b04      	ldr	r3, [pc, #16]	@ (8002af0 <LCD_F20_item+0x94>)
 8002ade:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002ae2:	f7ff f981 	bl	8001de8 <LCD_ShowNum>
 8002ae6:	e7ef      	b.n	8002ac8 <LCD_F20_item+0x6c>
 8002ae8:	20000a9c 	.word	0x20000a9c
 8002aec:	20000a9c 	.word	0x20000a9c
 8002af0:	20000a9c 	.word	0x20000a9c

08002af4 <LCD_F21_item>:

void LCD_F21_item(uint8_t item, int16_t value)
{
 8002af4:	b510      	push	{r4, lr}
 8002af6:	4604      	mov	r4, r0
    item = GET_MENU(item, F21_ITEM_MAX);
    write_com(0x83);
 8002af8:	2083      	movs	r0, #131	@ 0x83
 8002afa:	f7ff f8cd 	bl	8001c98 <write_com>
    hzkdis(F21Item[item]);
 8002afe:	4b20      	ldr	r3, [pc, #128]	@ (8002b80 <LCD_F21_item+0x8c>)
 8002b00:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002b04:	f7ff f8f8 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8002b08:	2093      	movs	r0, #147	@ 0x93
 8002b0a:	f7ff f8c5 	bl	8001c98 <write_com>
    if (strcmp(F21Value[item][0], "") != 0) {
 8002b0e:	01a3      	lsls	r3, r4, #6
 8002b10:	4a1c      	ldr	r2, [pc, #112]	@ (8002b84 <LCD_F21_item+0x90>)
 8002b12:	58d3      	ldr	r3, [r2, r3]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	b33b      	cbz	r3, 8002b68 <LCD_F21_item+0x74>
        hzkdis(F21Value[item][g_F21[item]]);
 8002b18:	4b1b      	ldr	r3, [pc, #108]	@ (8002b88 <LCD_F21_item+0x94>)
 8002b1a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002b1e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002b22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b26:	f7ff f8e7 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F21[item]);
    }

    item = GET_MENU(item + 1, F21_ITEM_MAX);
 8002b2a:	3401      	adds	r4, #1
 8002b2c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8002b2e:	208b      	movs	r0, #139	@ 0x8b
 8002b30:	f7ff f8b2 	bl	8001c98 <write_com>
    hzkdis(F21Item[item]);
 8002b34:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <LCD_F21_item+0x8c>)
 8002b36:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002b3a:	f7ff f8dd 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8002b3e:	209b      	movs	r0, #155	@ 0x9b
 8002b40:	f7ff f8aa 	bl	8001c98 <write_com>
    if (strcmp(F21Value[item][0], "") != 0) {
 8002b44:	01a3      	lsls	r3, r4, #6
 8002b46:	4a0f      	ldr	r2, [pc, #60]	@ (8002b84 <LCD_F21_item+0x90>)
 8002b48:	58d3      	ldr	r3, [r2, r3]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	b193      	cbz	r3, 8002b74 <LCD_F21_item+0x80>
        hzkdis(F21Value[item][g_F21[item]]);
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b88 <LCD_F21_item+0x94>)
 8002b50:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002b54:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002b58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b5c:	f7ff f8cc 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F21[item]);
    }
    write_com(0x93);
 8002b60:	2093      	movs	r0, #147	@ 0x93
 8002b62:	f7ff f899 	bl	8001c98 <write_com>
}
 8002b66:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F21[item]);
 8002b68:	4b07      	ldr	r3, [pc, #28]	@ (8002b88 <LCD_F21_item+0x94>)
 8002b6a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002b6e:	f7ff f93b 	bl	8001de8 <LCD_ShowNum>
 8002b72:	e7da      	b.n	8002b2a <LCD_F21_item+0x36>
        LCD_ShowNum(g_F21[item]);
 8002b74:	4b04      	ldr	r3, [pc, #16]	@ (8002b88 <LCD_F21_item+0x94>)
 8002b76:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002b7a:	f7ff f935 	bl	8001de8 <LCD_ShowNum>
 8002b7e:	e7ef      	b.n	8002b60 <LCD_F21_item+0x6c>
 8002b80:	20000a9c 	.word	0x20000a9c
 8002b84:	20000a9c 	.word	0x20000a9c
 8002b88:	20000a9c 	.word	0x20000a9c

08002b8c <LCD_F22_item>:

void LCD_F22_item(uint8_t item, int16_t value)
{
 8002b8c:	b510      	push	{r4, lr}
 8002b8e:	4604      	mov	r4, r0
    item = GET_MENU(item, F22_ITEM_MAX);
    write_com(0x83);
 8002b90:	2083      	movs	r0, #131	@ 0x83
 8002b92:	f7ff f881 	bl	8001c98 <write_com>
    hzkdis(F22Item[item]);
 8002b96:	4b20      	ldr	r3, [pc, #128]	@ (8002c18 <LCD_F22_item+0x8c>)
 8002b98:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002b9c:	f7ff f8ac 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8002ba0:	2093      	movs	r0, #147	@ 0x93
 8002ba2:	f7ff f879 	bl	8001c98 <write_com>
    if (strcmp(F22Value[item][0], "") != 0) {
 8002ba6:	01a3      	lsls	r3, r4, #6
 8002ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c1c <LCD_F22_item+0x90>)
 8002baa:	58d3      	ldr	r3, [r2, r3]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	b33b      	cbz	r3, 8002c00 <LCD_F22_item+0x74>
        hzkdis(F22Value[item][g_F22[item]]);
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c20 <LCD_F22_item+0x94>)
 8002bb2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002bb6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002bba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002bbe:	f7ff f89b 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F22[item]);
    }

    item = GET_MENU(item + 1, F22_ITEM_MAX);
 8002bc2:	3401      	adds	r4, #1
 8002bc4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8002bc6:	208b      	movs	r0, #139	@ 0x8b
 8002bc8:	f7ff f866 	bl	8001c98 <write_com>
    hzkdis(F22Item[item]);
 8002bcc:	4b12      	ldr	r3, [pc, #72]	@ (8002c18 <LCD_F22_item+0x8c>)
 8002bce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002bd2:	f7ff f891 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8002bd6:	209b      	movs	r0, #155	@ 0x9b
 8002bd8:	f7ff f85e 	bl	8001c98 <write_com>
    if (strcmp(F22Value[item][0], "") != 0) {
 8002bdc:	01a3      	lsls	r3, r4, #6
 8002bde:	4a0f      	ldr	r2, [pc, #60]	@ (8002c1c <LCD_F22_item+0x90>)
 8002be0:	58d3      	ldr	r3, [r2, r3]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	b193      	cbz	r3, 8002c0c <LCD_F22_item+0x80>
        hzkdis(F22Value[item][g_F22[item]]);
 8002be6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c20 <LCD_F22_item+0x94>)
 8002be8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002bec:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002bf0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002bf4:	f7ff f880 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F22[item]);
    }
    write_com(0x93);
 8002bf8:	2093      	movs	r0, #147	@ 0x93
 8002bfa:	f7ff f84d 	bl	8001c98 <write_com>
}
 8002bfe:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F22[item]);
 8002c00:	4b07      	ldr	r3, [pc, #28]	@ (8002c20 <LCD_F22_item+0x94>)
 8002c02:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002c06:	f7ff f8ef 	bl	8001de8 <LCD_ShowNum>
 8002c0a:	e7da      	b.n	8002bc2 <LCD_F22_item+0x36>
        LCD_ShowNum(g_F22[item]);
 8002c0c:	4b04      	ldr	r3, [pc, #16]	@ (8002c20 <LCD_F22_item+0x94>)
 8002c0e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002c12:	f7ff f8e9 	bl	8001de8 <LCD_ShowNum>
 8002c16:	e7ef      	b.n	8002bf8 <LCD_F22_item+0x6c>
 8002c18:	20000a9c 	.word	0x20000a9c
 8002c1c:	20000a9c 	.word	0x20000a9c
 8002c20:	20000a9c 	.word	0x20000a9c

08002c24 <LCD_F23_item>:

void LCD_F23_item(uint8_t item, int16_t value)
{
 8002c24:	b510      	push	{r4, lr}
 8002c26:	4604      	mov	r4, r0
    item = GET_MENU(item, F23_ITEM_MAX);
    write_com(0x83);
 8002c28:	2083      	movs	r0, #131	@ 0x83
 8002c2a:	f7ff f835 	bl	8001c98 <write_com>
    hzkdis(F23Item[item]);
 8002c2e:	4b20      	ldr	r3, [pc, #128]	@ (8002cb0 <LCD_F23_item+0x8c>)
 8002c30:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002c34:	f7ff f860 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8002c38:	2093      	movs	r0, #147	@ 0x93
 8002c3a:	f7ff f82d 	bl	8001c98 <write_com>
    if (strcmp(F23Value[item][0], "") != 0) {
 8002c3e:	01a3      	lsls	r3, r4, #6
 8002c40:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb4 <LCD_F23_item+0x90>)
 8002c42:	58d3      	ldr	r3, [r2, r3]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	b33b      	cbz	r3, 8002c98 <LCD_F23_item+0x74>
        hzkdis(F23Value[item][g_F23[item]]);
 8002c48:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb8 <LCD_F23_item+0x94>)
 8002c4a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002c4e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002c52:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c56:	f7ff f84f 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F23[item]);
    }

    item = GET_MENU(item + 1, F23_ITEM_MAX);
 8002c5a:	3401      	adds	r4, #1
 8002c5c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8002c5e:	208b      	movs	r0, #139	@ 0x8b
 8002c60:	f7ff f81a 	bl	8001c98 <write_com>
    hzkdis(F23Item[item]);
 8002c64:	4b12      	ldr	r3, [pc, #72]	@ (8002cb0 <LCD_F23_item+0x8c>)
 8002c66:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002c6a:	f7ff f845 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8002c6e:	209b      	movs	r0, #155	@ 0x9b
 8002c70:	f7ff f812 	bl	8001c98 <write_com>
    if (strcmp(F23Value[item][0], "") != 0) {
 8002c74:	01a3      	lsls	r3, r4, #6
 8002c76:	4a0f      	ldr	r2, [pc, #60]	@ (8002cb4 <LCD_F23_item+0x90>)
 8002c78:	58d3      	ldr	r3, [r2, r3]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	b193      	cbz	r3, 8002ca4 <LCD_F23_item+0x80>
        hzkdis(F23Value[item][g_F23[item]]);
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb8 <LCD_F23_item+0x94>)
 8002c80:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002c84:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002c88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c8c:	f7ff f834 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F23[item]);
    }
    write_com(0x93);
 8002c90:	2093      	movs	r0, #147	@ 0x93
 8002c92:	f7ff f801 	bl	8001c98 <write_com>
}
 8002c96:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F23[item]);
 8002c98:	4b07      	ldr	r3, [pc, #28]	@ (8002cb8 <LCD_F23_item+0x94>)
 8002c9a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002c9e:	f7ff f8a3 	bl	8001de8 <LCD_ShowNum>
 8002ca2:	e7da      	b.n	8002c5a <LCD_F23_item+0x36>
        LCD_ShowNum(g_F23[item]);
 8002ca4:	4b04      	ldr	r3, [pc, #16]	@ (8002cb8 <LCD_F23_item+0x94>)
 8002ca6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002caa:	f7ff f89d 	bl	8001de8 <LCD_ShowNum>
 8002cae:	e7ef      	b.n	8002c90 <LCD_F23_item+0x6c>
 8002cb0:	20000a9c 	.word	0x20000a9c
 8002cb4:	20000a9c 	.word	0x20000a9c
 8002cb8:	20000a9c 	.word	0x20000a9c

08002cbc <LCD_F24_item>:

void LCD_F24_item(uint8_t item, int16_t value)
{
 8002cbc:	b510      	push	{r4, lr}
 8002cbe:	4604      	mov	r4, r0
    item = GET_MENU(item, F24_ITEM_MAX);
    write_com(0x83);
 8002cc0:	2083      	movs	r0, #131	@ 0x83
 8002cc2:	f7fe ffe9 	bl	8001c98 <write_com>
    hzkdis(F24Item[item]);
 8002cc6:	4b20      	ldr	r3, [pc, #128]	@ (8002d48 <LCD_F24_item+0x8c>)
 8002cc8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002ccc:	f7ff f814 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8002cd0:	2093      	movs	r0, #147	@ 0x93
 8002cd2:	f7fe ffe1 	bl	8001c98 <write_com>
    if (strcmp(F24Value[item][0], "") != 0) {
 8002cd6:	01a3      	lsls	r3, r4, #6
 8002cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8002d4c <LCD_F24_item+0x90>)
 8002cda:	58d3      	ldr	r3, [r2, r3]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b33b      	cbz	r3, 8002d30 <LCD_F24_item+0x74>
        hzkdis(F24Value[item][g_F24[item]]);
 8002ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d50 <LCD_F24_item+0x94>)
 8002ce2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002ce6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002cea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002cee:	f7ff f803 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F24[item]);
    }

    item = GET_MENU(item + 1, F24_ITEM_MAX);
 8002cf2:	3401      	adds	r4, #1
 8002cf4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8002cf6:	208b      	movs	r0, #139	@ 0x8b
 8002cf8:	f7fe ffce 	bl	8001c98 <write_com>
    hzkdis(F24Item[item]);
 8002cfc:	4b12      	ldr	r3, [pc, #72]	@ (8002d48 <LCD_F24_item+0x8c>)
 8002cfe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002d02:	f7fe fff9 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8002d06:	209b      	movs	r0, #155	@ 0x9b
 8002d08:	f7fe ffc6 	bl	8001c98 <write_com>
    if (strcmp(F24Value[item][0], "") != 0) {
 8002d0c:	01a3      	lsls	r3, r4, #6
 8002d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8002d4c <LCD_F24_item+0x90>)
 8002d10:	58d3      	ldr	r3, [r2, r3]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	b193      	cbz	r3, 8002d3c <LCD_F24_item+0x80>
        hzkdis(F24Value[item][g_F24[item]]);
 8002d16:	4b0e      	ldr	r3, [pc, #56]	@ (8002d50 <LCD_F24_item+0x94>)
 8002d18:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002d1c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002d20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002d24:	f7fe ffe8 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F24[item]);
    }
    write_com(0x93);
 8002d28:	2093      	movs	r0, #147	@ 0x93
 8002d2a:	f7fe ffb5 	bl	8001c98 <write_com>
}
 8002d2e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F24[item]);
 8002d30:	4b07      	ldr	r3, [pc, #28]	@ (8002d50 <LCD_F24_item+0x94>)
 8002d32:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002d36:	f7ff f857 	bl	8001de8 <LCD_ShowNum>
 8002d3a:	e7da      	b.n	8002cf2 <LCD_F24_item+0x36>
        LCD_ShowNum(g_F24[item]);
 8002d3c:	4b04      	ldr	r3, [pc, #16]	@ (8002d50 <LCD_F24_item+0x94>)
 8002d3e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002d42:	f7ff f851 	bl	8001de8 <LCD_ShowNum>
 8002d46:	e7ef      	b.n	8002d28 <LCD_F24_item+0x6c>
 8002d48:	20000a9c 	.word	0x20000a9c
 8002d4c:	20000a9c 	.word	0x20000a9c
 8002d50:	20000a9c 	.word	0x20000a9c

08002d54 <LCD_F25_item>:

void LCD_F25_item(uint8_t item, int16_t value)
{
 8002d54:	b510      	push	{r4, lr}
 8002d56:	4604      	mov	r4, r0
    item = GET_MENU(item, F25_ITEM_MAX);
    write_com(0x83);
 8002d58:	2083      	movs	r0, #131	@ 0x83
 8002d5a:	f7fe ff9d 	bl	8001c98 <write_com>
    hzkdis(F25Item[item]);
 8002d5e:	4b20      	ldr	r3, [pc, #128]	@ (8002de0 <LCD_F25_item+0x8c>)
 8002d60:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002d64:	f7fe ffc8 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8002d68:	2093      	movs	r0, #147	@ 0x93
 8002d6a:	f7fe ff95 	bl	8001c98 <write_com>
    if (strcmp(F25Value[item][0], "") != 0) {
 8002d6e:	01a3      	lsls	r3, r4, #6
 8002d70:	4a1c      	ldr	r2, [pc, #112]	@ (8002de4 <LCD_F25_item+0x90>)
 8002d72:	58d3      	ldr	r3, [r2, r3]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	b33b      	cbz	r3, 8002dc8 <LCD_F25_item+0x74>
        hzkdis(F25Value[item][g_F25[item]]);
 8002d78:	4b1b      	ldr	r3, [pc, #108]	@ (8002de8 <LCD_F25_item+0x94>)
 8002d7a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002d7e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002d82:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002d86:	f7fe ffb7 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F25[item]);
    }

    item = GET_MENU(item + 1, F25_ITEM_MAX);
 8002d8a:	3401      	adds	r4, #1
 8002d8c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8002d8e:	208b      	movs	r0, #139	@ 0x8b
 8002d90:	f7fe ff82 	bl	8001c98 <write_com>
    hzkdis(F25Item[item]);
 8002d94:	4b12      	ldr	r3, [pc, #72]	@ (8002de0 <LCD_F25_item+0x8c>)
 8002d96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002d9a:	f7fe ffad 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8002d9e:	209b      	movs	r0, #155	@ 0x9b
 8002da0:	f7fe ff7a 	bl	8001c98 <write_com>
    if (strcmp(F25Value[item][0], "") != 0) {
 8002da4:	01a3      	lsls	r3, r4, #6
 8002da6:	4a0f      	ldr	r2, [pc, #60]	@ (8002de4 <LCD_F25_item+0x90>)
 8002da8:	58d3      	ldr	r3, [r2, r3]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	b193      	cbz	r3, 8002dd4 <LCD_F25_item+0x80>
        hzkdis(F25Value[item][g_F25[item]]);
 8002dae:	4b0e      	ldr	r3, [pc, #56]	@ (8002de8 <LCD_F25_item+0x94>)
 8002db0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002db4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002db8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002dbc:	f7fe ff9c 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F25[item]);
    }
    write_com(0x93);
 8002dc0:	2093      	movs	r0, #147	@ 0x93
 8002dc2:	f7fe ff69 	bl	8001c98 <write_com>
}
 8002dc6:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F25[item]);
 8002dc8:	4b07      	ldr	r3, [pc, #28]	@ (8002de8 <LCD_F25_item+0x94>)
 8002dca:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002dce:	f7ff f80b 	bl	8001de8 <LCD_ShowNum>
 8002dd2:	e7da      	b.n	8002d8a <LCD_F25_item+0x36>
        LCD_ShowNum(g_F25[item]);
 8002dd4:	4b04      	ldr	r3, [pc, #16]	@ (8002de8 <LCD_F25_item+0x94>)
 8002dd6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002dda:	f7ff f805 	bl	8001de8 <LCD_ShowNum>
 8002dde:	e7ef      	b.n	8002dc0 <LCD_F25_item+0x6c>
 8002de0:	20000a9c 	.word	0x20000a9c
 8002de4:	20000a9c 	.word	0x20000a9c
 8002de8:	20000a9c 	.word	0x20000a9c

08002dec <LCD_F26_item>:

void LCD_F26_item(uint8_t item, int16_t value)
{
 8002dec:	b510      	push	{r4, lr}
 8002dee:	4604      	mov	r4, r0
    item = GET_MENU(item, F26_ITEM_MAX);
    write_com(0x83);
 8002df0:	2083      	movs	r0, #131	@ 0x83
 8002df2:	f7fe ff51 	bl	8001c98 <write_com>
    hzkdis(F26Item[item]);
 8002df6:	4b20      	ldr	r3, [pc, #128]	@ (8002e78 <LCD_F26_item+0x8c>)
 8002df8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002dfc:	f7fe ff7c 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8002e00:	2093      	movs	r0, #147	@ 0x93
 8002e02:	f7fe ff49 	bl	8001c98 <write_com>
    if (strcmp(F26Value[item][0], "") != 0) {
 8002e06:	01a3      	lsls	r3, r4, #6
 8002e08:	4a1c      	ldr	r2, [pc, #112]	@ (8002e7c <LCD_F26_item+0x90>)
 8002e0a:	58d3      	ldr	r3, [r2, r3]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	b33b      	cbz	r3, 8002e60 <LCD_F26_item+0x74>
        hzkdis(F26Value[item][g_F26[item]]);
 8002e10:	4b1b      	ldr	r3, [pc, #108]	@ (8002e80 <LCD_F26_item+0x94>)
 8002e12:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002e16:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002e1a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e1e:	f7fe ff6b 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F26[item]);
    }

    item = GET_MENU(item + 1, F26_ITEM_MAX);
 8002e22:	3401      	adds	r4, #1
 8002e24:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8002e26:	208b      	movs	r0, #139	@ 0x8b
 8002e28:	f7fe ff36 	bl	8001c98 <write_com>
    hzkdis(F26Item[item]);
 8002e2c:	4b12      	ldr	r3, [pc, #72]	@ (8002e78 <LCD_F26_item+0x8c>)
 8002e2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002e32:	f7fe ff61 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8002e36:	209b      	movs	r0, #155	@ 0x9b
 8002e38:	f7fe ff2e 	bl	8001c98 <write_com>
    if (strcmp(F26Value[item][0], "") != 0) {
 8002e3c:	01a3      	lsls	r3, r4, #6
 8002e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8002e7c <LCD_F26_item+0x90>)
 8002e40:	58d3      	ldr	r3, [r2, r3]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	b193      	cbz	r3, 8002e6c <LCD_F26_item+0x80>
        hzkdis(F26Value[item][g_F26[item]]);
 8002e46:	4b0e      	ldr	r3, [pc, #56]	@ (8002e80 <LCD_F26_item+0x94>)
 8002e48:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002e4c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002e50:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e54:	f7fe ff50 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F26[item]);
    }
    write_com(0x93);
 8002e58:	2093      	movs	r0, #147	@ 0x93
 8002e5a:	f7fe ff1d 	bl	8001c98 <write_com>
}
 8002e5e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F26[item]);
 8002e60:	4b07      	ldr	r3, [pc, #28]	@ (8002e80 <LCD_F26_item+0x94>)
 8002e62:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002e66:	f7fe ffbf 	bl	8001de8 <LCD_ShowNum>
 8002e6a:	e7da      	b.n	8002e22 <LCD_F26_item+0x36>
        LCD_ShowNum(g_F26[item]);
 8002e6c:	4b04      	ldr	r3, [pc, #16]	@ (8002e80 <LCD_F26_item+0x94>)
 8002e6e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002e72:	f7fe ffb9 	bl	8001de8 <LCD_ShowNum>
 8002e76:	e7ef      	b.n	8002e58 <LCD_F26_item+0x6c>
 8002e78:	20000a9c 	.word	0x20000a9c
 8002e7c:	20000a9c 	.word	0x20000a9c
 8002e80:	20000a9c 	.word	0x20000a9c

08002e84 <LCD_F27_item>:

void LCD_F27_item(uint8_t item, int16_t value)
{
 8002e84:	b510      	push	{r4, lr}
 8002e86:	4604      	mov	r4, r0
    item = GET_MENU(item, F27_ITEM_MAX);
    write_com(0x83);
 8002e88:	2083      	movs	r0, #131	@ 0x83
 8002e8a:	f7fe ff05 	bl	8001c98 <write_com>
    hzkdis(F27Item[item]);
 8002e8e:	4b20      	ldr	r3, [pc, #128]	@ (8002f10 <LCD_F27_item+0x8c>)
 8002e90:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002e94:	f7fe ff30 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8002e98:	2093      	movs	r0, #147	@ 0x93
 8002e9a:	f7fe fefd 	bl	8001c98 <write_com>
    if (strcmp(F27Value[item][0], "") != 0) {
 8002e9e:	01a3      	lsls	r3, r4, #6
 8002ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f14 <LCD_F27_item+0x90>)
 8002ea2:	58d3      	ldr	r3, [r2, r3]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	b33b      	cbz	r3, 8002ef8 <LCD_F27_item+0x74>
        hzkdis(F27Value[item][g_F27[item]]);
 8002ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f18 <LCD_F27_item+0x94>)
 8002eaa:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002eae:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002eb2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002eb6:	f7fe ff1f 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F27[item]);
    }

    item = GET_MENU(item + 1, F27_ITEM_MAX);
 8002eba:	3401      	adds	r4, #1
 8002ebc:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8002ebe:	208b      	movs	r0, #139	@ 0x8b
 8002ec0:	f7fe feea 	bl	8001c98 <write_com>
    hzkdis(F27Item[item]);
 8002ec4:	4b12      	ldr	r3, [pc, #72]	@ (8002f10 <LCD_F27_item+0x8c>)
 8002ec6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002eca:	f7fe ff15 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8002ece:	209b      	movs	r0, #155	@ 0x9b
 8002ed0:	f7fe fee2 	bl	8001c98 <write_com>
    if (strcmp(F27Value[item][0], "") != 0) {
 8002ed4:	01a3      	lsls	r3, r4, #6
 8002ed6:	4a0f      	ldr	r2, [pc, #60]	@ (8002f14 <LCD_F27_item+0x90>)
 8002ed8:	58d3      	ldr	r3, [r2, r3]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	b193      	cbz	r3, 8002f04 <LCD_F27_item+0x80>
        hzkdis(F27Value[item][g_F27[item]]);
 8002ede:	4b0e      	ldr	r3, [pc, #56]	@ (8002f18 <LCD_F27_item+0x94>)
 8002ee0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002ee4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002ee8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002eec:	f7fe ff04 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F27[item]);
    }
    write_com(0x93);
 8002ef0:	2093      	movs	r0, #147	@ 0x93
 8002ef2:	f7fe fed1 	bl	8001c98 <write_com>
}
 8002ef6:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F27[item]);
 8002ef8:	4b07      	ldr	r3, [pc, #28]	@ (8002f18 <LCD_F27_item+0x94>)
 8002efa:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002efe:	f7fe ff73 	bl	8001de8 <LCD_ShowNum>
 8002f02:	e7da      	b.n	8002eba <LCD_F27_item+0x36>
        LCD_ShowNum(g_F27[item]);
 8002f04:	4b04      	ldr	r3, [pc, #16]	@ (8002f18 <LCD_F27_item+0x94>)
 8002f06:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002f0a:	f7fe ff6d 	bl	8001de8 <LCD_ShowNum>
 8002f0e:	e7ef      	b.n	8002ef0 <LCD_F27_item+0x6c>
 8002f10:	20000a9c 	.word	0x20000a9c
 8002f14:	20000a9c 	.word	0x20000a9c
 8002f18:	20000a9c 	.word	0x20000a9c

08002f1c <LCD_F28_item>:

void LCD_F28_item(uint8_t item, int16_t value)
{
 8002f1c:	b510      	push	{r4, lr}
 8002f1e:	4604      	mov	r4, r0
    item = GET_MENU(item, F28_ITEM_MAX);
    write_com(0x83);
 8002f20:	2083      	movs	r0, #131	@ 0x83
 8002f22:	f7fe feb9 	bl	8001c98 <write_com>
    hzkdis(F28Item[item]);
 8002f26:	4b20      	ldr	r3, [pc, #128]	@ (8002fa8 <LCD_F28_item+0x8c>)
 8002f28:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002f2c:	f7fe fee4 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8002f30:	2093      	movs	r0, #147	@ 0x93
 8002f32:	f7fe feb1 	bl	8001c98 <write_com>
    if (strcmp(F28Value[item][0], "") != 0) {
 8002f36:	01a3      	lsls	r3, r4, #6
 8002f38:	4a1c      	ldr	r2, [pc, #112]	@ (8002fac <LCD_F28_item+0x90>)
 8002f3a:	58d3      	ldr	r3, [r2, r3]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	b33b      	cbz	r3, 8002f90 <LCD_F28_item+0x74>
        hzkdis(F28Value[item][g_F28[item]]);
 8002f40:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb0 <LCD_F28_item+0x94>)
 8002f42:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002f46:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002f4a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f4e:	f7fe fed3 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F28[item]);
    }

    item = GET_MENU(item + 1, F28_ITEM_MAX);
 8002f52:	3401      	adds	r4, #1
 8002f54:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8002f56:	208b      	movs	r0, #139	@ 0x8b
 8002f58:	f7fe fe9e 	bl	8001c98 <write_com>
    hzkdis(F28Item[item]);
 8002f5c:	4b12      	ldr	r3, [pc, #72]	@ (8002fa8 <LCD_F28_item+0x8c>)
 8002f5e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002f62:	f7fe fec9 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8002f66:	209b      	movs	r0, #155	@ 0x9b
 8002f68:	f7fe fe96 	bl	8001c98 <write_com>
    if (strcmp(F28Value[item][0], "") != 0) {
 8002f6c:	01a3      	lsls	r3, r4, #6
 8002f6e:	4a0f      	ldr	r2, [pc, #60]	@ (8002fac <LCD_F28_item+0x90>)
 8002f70:	58d3      	ldr	r3, [r2, r3]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	b193      	cbz	r3, 8002f9c <LCD_F28_item+0x80>
        hzkdis(F28Value[item][g_F28[item]]);
 8002f76:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb0 <LCD_F28_item+0x94>)
 8002f78:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002f7c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002f80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f84:	f7fe feb8 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F28[item]);
    }
    write_com(0x93);
 8002f88:	2093      	movs	r0, #147	@ 0x93
 8002f8a:	f7fe fe85 	bl	8001c98 <write_com>
}
 8002f8e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F28[item]);
 8002f90:	4b07      	ldr	r3, [pc, #28]	@ (8002fb0 <LCD_F28_item+0x94>)
 8002f92:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002f96:	f7fe ff27 	bl	8001de8 <LCD_ShowNum>
 8002f9a:	e7da      	b.n	8002f52 <LCD_F28_item+0x36>
        LCD_ShowNum(g_F28[item]);
 8002f9c:	4b04      	ldr	r3, [pc, #16]	@ (8002fb0 <LCD_F28_item+0x94>)
 8002f9e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002fa2:	f7fe ff21 	bl	8001de8 <LCD_ShowNum>
 8002fa6:	e7ef      	b.n	8002f88 <LCD_F28_item+0x6c>
 8002fa8:	20000a9c 	.word	0x20000a9c
 8002fac:	20000a9c 	.word	0x20000a9c
 8002fb0:	20000a9c 	.word	0x20000a9c

08002fb4 <LCD_F29_item>:

void LCD_F29_item(uint8_t item, int16_t value)
{
 8002fb4:	b510      	push	{r4, lr}
 8002fb6:	4604      	mov	r4, r0
    item = GET_MENU(item, F29_ITEM_MAX);
    write_com(0x83);
 8002fb8:	2083      	movs	r0, #131	@ 0x83
 8002fba:	f7fe fe6d 	bl	8001c98 <write_com>
    hzkdis(F29Item[item]);
 8002fbe:	4b20      	ldr	r3, [pc, #128]	@ (8003040 <LCD_F29_item+0x8c>)
 8002fc0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002fc4:	f7fe fe98 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8002fc8:	2093      	movs	r0, #147	@ 0x93
 8002fca:	f7fe fe65 	bl	8001c98 <write_com>
    if (strcmp(F29Value[item][0], "") != 0) {
 8002fce:	01a3      	lsls	r3, r4, #6
 8002fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8003044 <LCD_F29_item+0x90>)
 8002fd2:	58d3      	ldr	r3, [r2, r3]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	b33b      	cbz	r3, 8003028 <LCD_F29_item+0x74>
        hzkdis(F29Value[item][g_F29[item]]);
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003048 <LCD_F29_item+0x94>)
 8002fda:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002fde:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002fe2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002fe6:	f7fe fe87 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F29[item]);
    }

    item = GET_MENU(item + 1, F29_ITEM_MAX);
 8002fea:	3401      	adds	r4, #1
 8002fec:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8002fee:	208b      	movs	r0, #139	@ 0x8b
 8002ff0:	f7fe fe52 	bl	8001c98 <write_com>
    hzkdis(F29Item[item]);
 8002ff4:	4b12      	ldr	r3, [pc, #72]	@ (8003040 <LCD_F29_item+0x8c>)
 8002ff6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002ffa:	f7fe fe7d 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8002ffe:	209b      	movs	r0, #155	@ 0x9b
 8003000:	f7fe fe4a 	bl	8001c98 <write_com>
    if (strcmp(F29Value[item][0], "") != 0) {
 8003004:	01a3      	lsls	r3, r4, #6
 8003006:	4a0f      	ldr	r2, [pc, #60]	@ (8003044 <LCD_F29_item+0x90>)
 8003008:	58d3      	ldr	r3, [r2, r3]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	b193      	cbz	r3, 8003034 <LCD_F29_item+0x80>
        hzkdis(F29Value[item][g_F29[item]]);
 800300e:	4b0e      	ldr	r3, [pc, #56]	@ (8003048 <LCD_F29_item+0x94>)
 8003010:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003014:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003018:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800301c:	f7fe fe6c 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F29[item]);
    }
    write_com(0x93);
 8003020:	2093      	movs	r0, #147	@ 0x93
 8003022:	f7fe fe39 	bl	8001c98 <write_com>
}
 8003026:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F29[item]);
 8003028:	4b07      	ldr	r3, [pc, #28]	@ (8003048 <LCD_F29_item+0x94>)
 800302a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800302e:	f7fe fedb 	bl	8001de8 <LCD_ShowNum>
 8003032:	e7da      	b.n	8002fea <LCD_F29_item+0x36>
        LCD_ShowNum(g_F29[item]);
 8003034:	4b04      	ldr	r3, [pc, #16]	@ (8003048 <LCD_F29_item+0x94>)
 8003036:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800303a:	f7fe fed5 	bl	8001de8 <LCD_ShowNum>
 800303e:	e7ef      	b.n	8003020 <LCD_F29_item+0x6c>
 8003040:	20000a9c 	.word	0x20000a9c
 8003044:	20000a9c 	.word	0x20000a9c
 8003048:	20000a9c 	.word	0x20000a9c

0800304c <LCD_F30_item>:

void LCD_F30_item(uint8_t item, int16_t value)
{
 800304c:	b510      	push	{r4, lr}
 800304e:	4604      	mov	r4, r0
    item = GET_MENU(item, F30_ITEM_MAX);
    write_com(0x83);
 8003050:	2083      	movs	r0, #131	@ 0x83
 8003052:	f7fe fe21 	bl	8001c98 <write_com>
    hzkdis(F30Item[item]);
 8003056:	4b20      	ldr	r3, [pc, #128]	@ (80030d8 <LCD_F30_item+0x8c>)
 8003058:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800305c:	f7fe fe4c 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8003060:	2093      	movs	r0, #147	@ 0x93
 8003062:	f7fe fe19 	bl	8001c98 <write_com>
    if (strcmp(F30Value[item][0], "") != 0) {
 8003066:	01a3      	lsls	r3, r4, #6
 8003068:	4a1c      	ldr	r2, [pc, #112]	@ (80030dc <LCD_F30_item+0x90>)
 800306a:	58d3      	ldr	r3, [r2, r3]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	b33b      	cbz	r3, 80030c0 <LCD_F30_item+0x74>
        hzkdis(F30Value[item][g_F30[item]]);
 8003070:	4b1b      	ldr	r3, [pc, #108]	@ (80030e0 <LCD_F30_item+0x94>)
 8003072:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003076:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800307a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800307e:	f7fe fe3b 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F30[item]);
    }

    item = GET_MENU(item + 1, F30_ITEM_MAX);
 8003082:	3401      	adds	r4, #1
 8003084:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003086:	208b      	movs	r0, #139	@ 0x8b
 8003088:	f7fe fe06 	bl	8001c98 <write_com>
    hzkdis(F30Item[item]);
 800308c:	4b12      	ldr	r3, [pc, #72]	@ (80030d8 <LCD_F30_item+0x8c>)
 800308e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003092:	f7fe fe31 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8003096:	209b      	movs	r0, #155	@ 0x9b
 8003098:	f7fe fdfe 	bl	8001c98 <write_com>
    if (strcmp(F30Value[item][0], "") != 0) {
 800309c:	01a3      	lsls	r3, r4, #6
 800309e:	4a0f      	ldr	r2, [pc, #60]	@ (80030dc <LCD_F30_item+0x90>)
 80030a0:	58d3      	ldr	r3, [r2, r3]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	b193      	cbz	r3, 80030cc <LCD_F30_item+0x80>
        hzkdis(F30Value[item][g_F30[item]]);
 80030a6:	4b0e      	ldr	r3, [pc, #56]	@ (80030e0 <LCD_F30_item+0x94>)
 80030a8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80030ac:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80030b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80030b4:	f7fe fe20 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F30[item]);
    }
    write_com(0x93);
 80030b8:	2093      	movs	r0, #147	@ 0x93
 80030ba:	f7fe fded 	bl	8001c98 <write_com>
}
 80030be:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F30[item]);
 80030c0:	4b07      	ldr	r3, [pc, #28]	@ (80030e0 <LCD_F30_item+0x94>)
 80030c2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80030c6:	f7fe fe8f 	bl	8001de8 <LCD_ShowNum>
 80030ca:	e7da      	b.n	8003082 <LCD_F30_item+0x36>
        LCD_ShowNum(g_F30[item]);
 80030cc:	4b04      	ldr	r3, [pc, #16]	@ (80030e0 <LCD_F30_item+0x94>)
 80030ce:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80030d2:	f7fe fe89 	bl	8001de8 <LCD_ShowNum>
 80030d6:	e7ef      	b.n	80030b8 <LCD_F30_item+0x6c>
 80030d8:	20000a9c 	.word	0x20000a9c
 80030dc:	20000a9c 	.word	0x20000a9c
 80030e0:	20000a9c 	.word	0x20000a9c

080030e4 <LCD_F31_item>:

void LCD_F31_item(uint8_t item, int16_t value)
{
 80030e4:	b510      	push	{r4, lr}
 80030e6:	4604      	mov	r4, r0
    item = GET_MENU(item, F31_ITEM_MAX);
    write_com(0x83);
 80030e8:	2083      	movs	r0, #131	@ 0x83
 80030ea:	f7fe fdd5 	bl	8001c98 <write_com>
    hzkdis(F31Item[item]);
 80030ee:	4b20      	ldr	r3, [pc, #128]	@ (8003170 <LCD_F31_item+0x8c>)
 80030f0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80030f4:	f7fe fe00 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 80030f8:	2093      	movs	r0, #147	@ 0x93
 80030fa:	f7fe fdcd 	bl	8001c98 <write_com>
    if (strcmp(F31Value[item][0], "") != 0) {
 80030fe:	01a3      	lsls	r3, r4, #6
 8003100:	4a1c      	ldr	r2, [pc, #112]	@ (8003174 <LCD_F31_item+0x90>)
 8003102:	58d3      	ldr	r3, [r2, r3]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	b33b      	cbz	r3, 8003158 <LCD_F31_item+0x74>
        hzkdis(F31Value[item][g_F31[item]]);
 8003108:	4b1b      	ldr	r3, [pc, #108]	@ (8003178 <LCD_F31_item+0x94>)
 800310a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800310e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003112:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003116:	f7fe fdef 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F31[item]);
    }

    item = GET_MENU(item + 1, F31_ITEM_MAX);
 800311a:	3401      	adds	r4, #1
 800311c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800311e:	208b      	movs	r0, #139	@ 0x8b
 8003120:	f7fe fdba 	bl	8001c98 <write_com>
    hzkdis(F31Item[item]);
 8003124:	4b12      	ldr	r3, [pc, #72]	@ (8003170 <LCD_F31_item+0x8c>)
 8003126:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800312a:	f7fe fde5 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 800312e:	209b      	movs	r0, #155	@ 0x9b
 8003130:	f7fe fdb2 	bl	8001c98 <write_com>
    if (strcmp(F31Value[item][0], "") != 0) {
 8003134:	01a3      	lsls	r3, r4, #6
 8003136:	4a0f      	ldr	r2, [pc, #60]	@ (8003174 <LCD_F31_item+0x90>)
 8003138:	58d3      	ldr	r3, [r2, r3]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	b193      	cbz	r3, 8003164 <LCD_F31_item+0x80>
        hzkdis(F31Value[item][g_F31[item]]);
 800313e:	4b0e      	ldr	r3, [pc, #56]	@ (8003178 <LCD_F31_item+0x94>)
 8003140:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003144:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003148:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800314c:	f7fe fdd4 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F31[item]);
    }
    write_com(0x93);
 8003150:	2093      	movs	r0, #147	@ 0x93
 8003152:	f7fe fda1 	bl	8001c98 <write_com>
}
 8003156:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F31[item]);
 8003158:	4b07      	ldr	r3, [pc, #28]	@ (8003178 <LCD_F31_item+0x94>)
 800315a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800315e:	f7fe fe43 	bl	8001de8 <LCD_ShowNum>
 8003162:	e7da      	b.n	800311a <LCD_F31_item+0x36>
        LCD_ShowNum(g_F31[item]);
 8003164:	4b04      	ldr	r3, [pc, #16]	@ (8003178 <LCD_F31_item+0x94>)
 8003166:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800316a:	f7fe fe3d 	bl	8001de8 <LCD_ShowNum>
 800316e:	e7ef      	b.n	8003150 <LCD_F31_item+0x6c>
 8003170:	20000a9c 	.word	0x20000a9c
 8003174:	20000a9c 	.word	0x20000a9c
 8003178:	20000a9c 	.word	0x20000a9c

0800317c <LCD_F32_item>:

void LCD_F32_item(uint8_t item, int16_t value)
{
 800317c:	b510      	push	{r4, lr}
 800317e:	4604      	mov	r4, r0
    item = GET_MENU(item, F32_ITEM_MAX);
    write_com(0x83);
 8003180:	2083      	movs	r0, #131	@ 0x83
 8003182:	f7fe fd89 	bl	8001c98 <write_com>
    hzkdis(F32Item[item]);
 8003186:	4b20      	ldr	r3, [pc, #128]	@ (8003208 <LCD_F32_item+0x8c>)
 8003188:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800318c:	f7fe fdb4 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8003190:	2093      	movs	r0, #147	@ 0x93
 8003192:	f7fe fd81 	bl	8001c98 <write_com>
    if (strcmp(F32Value[item][0], "") != 0) {
 8003196:	01a3      	lsls	r3, r4, #6
 8003198:	4a1c      	ldr	r2, [pc, #112]	@ (800320c <LCD_F32_item+0x90>)
 800319a:	58d3      	ldr	r3, [r2, r3]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	b33b      	cbz	r3, 80031f0 <LCD_F32_item+0x74>
        hzkdis(F32Value[item][g_F32[item]]);
 80031a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003210 <LCD_F32_item+0x94>)
 80031a2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80031a6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80031aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80031ae:	f7fe fda3 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F32[item]);
    }

    item = GET_MENU(item + 1, F32_ITEM_MAX);
 80031b2:	3401      	adds	r4, #1
 80031b4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80031b6:	208b      	movs	r0, #139	@ 0x8b
 80031b8:	f7fe fd6e 	bl	8001c98 <write_com>
    hzkdis(F32Item[item]);
 80031bc:	4b12      	ldr	r3, [pc, #72]	@ (8003208 <LCD_F32_item+0x8c>)
 80031be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80031c2:	f7fe fd99 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 80031c6:	209b      	movs	r0, #155	@ 0x9b
 80031c8:	f7fe fd66 	bl	8001c98 <write_com>
    if (strcmp(F32Value[item][0], "") != 0) {
 80031cc:	01a3      	lsls	r3, r4, #6
 80031ce:	4a0f      	ldr	r2, [pc, #60]	@ (800320c <LCD_F32_item+0x90>)
 80031d0:	58d3      	ldr	r3, [r2, r3]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	b193      	cbz	r3, 80031fc <LCD_F32_item+0x80>
        hzkdis(F32Value[item][g_F32[item]]);
 80031d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003210 <LCD_F32_item+0x94>)
 80031d8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80031dc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80031e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80031e4:	f7fe fd88 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F32[item]);
    }
    write_com(0x93);
 80031e8:	2093      	movs	r0, #147	@ 0x93
 80031ea:	f7fe fd55 	bl	8001c98 <write_com>
}
 80031ee:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F32[item]);
 80031f0:	4b07      	ldr	r3, [pc, #28]	@ (8003210 <LCD_F32_item+0x94>)
 80031f2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80031f6:	f7fe fdf7 	bl	8001de8 <LCD_ShowNum>
 80031fa:	e7da      	b.n	80031b2 <LCD_F32_item+0x36>
        LCD_ShowNum(g_F32[item]);
 80031fc:	4b04      	ldr	r3, [pc, #16]	@ (8003210 <LCD_F32_item+0x94>)
 80031fe:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003202:	f7fe fdf1 	bl	8001de8 <LCD_ShowNum>
 8003206:	e7ef      	b.n	80031e8 <LCD_F32_item+0x6c>
 8003208:	20000a9c 	.word	0x20000a9c
 800320c:	20000a9c 	.word	0x20000a9c
 8003210:	20000a9c 	.word	0x20000a9c

08003214 <LCD_F33_item>:

void LCD_F33_item(uint8_t item, int16_t value)
{
 8003214:	b510      	push	{r4, lr}
 8003216:	4604      	mov	r4, r0
    item = GET_MENU(item, F33_ITEM_MAX);
    write_com(0x83);
 8003218:	2083      	movs	r0, #131	@ 0x83
 800321a:	f7fe fd3d 	bl	8001c98 <write_com>
    hzkdis(F33Item[item]);
 800321e:	4b20      	ldr	r3, [pc, #128]	@ (80032a0 <LCD_F33_item+0x8c>)
 8003220:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003224:	f7fe fd68 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8003228:	2093      	movs	r0, #147	@ 0x93
 800322a:	f7fe fd35 	bl	8001c98 <write_com>
    if (strcmp(F33Value[item][0], "") != 0) {
 800322e:	01a3      	lsls	r3, r4, #6
 8003230:	4a1c      	ldr	r2, [pc, #112]	@ (80032a4 <LCD_F33_item+0x90>)
 8003232:	58d3      	ldr	r3, [r2, r3]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	b33b      	cbz	r3, 8003288 <LCD_F33_item+0x74>
        hzkdis(F33Value[item][g_F33[item]]);
 8003238:	4b1b      	ldr	r3, [pc, #108]	@ (80032a8 <LCD_F33_item+0x94>)
 800323a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800323e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003242:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003246:	f7fe fd57 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F33[item]);
    }

    item = GET_MENU(item + 1, F33_ITEM_MAX);
 800324a:	3401      	adds	r4, #1
 800324c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800324e:	208b      	movs	r0, #139	@ 0x8b
 8003250:	f7fe fd22 	bl	8001c98 <write_com>
    hzkdis(F33Item[item]);
 8003254:	4b12      	ldr	r3, [pc, #72]	@ (80032a0 <LCD_F33_item+0x8c>)
 8003256:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800325a:	f7fe fd4d 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 800325e:	209b      	movs	r0, #155	@ 0x9b
 8003260:	f7fe fd1a 	bl	8001c98 <write_com>
    if (strcmp(F33Value[item][0], "") != 0) {
 8003264:	01a3      	lsls	r3, r4, #6
 8003266:	4a0f      	ldr	r2, [pc, #60]	@ (80032a4 <LCD_F33_item+0x90>)
 8003268:	58d3      	ldr	r3, [r2, r3]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	b193      	cbz	r3, 8003294 <LCD_F33_item+0x80>
        hzkdis(F33Value[item][g_F33[item]]);
 800326e:	4b0e      	ldr	r3, [pc, #56]	@ (80032a8 <LCD_F33_item+0x94>)
 8003270:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003274:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003278:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800327c:	f7fe fd3c 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F33[item]);
    }
    write_com(0x93);
 8003280:	2093      	movs	r0, #147	@ 0x93
 8003282:	f7fe fd09 	bl	8001c98 <write_com>
}
 8003286:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F33[item]);
 8003288:	4b07      	ldr	r3, [pc, #28]	@ (80032a8 <LCD_F33_item+0x94>)
 800328a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800328e:	f7fe fdab 	bl	8001de8 <LCD_ShowNum>
 8003292:	e7da      	b.n	800324a <LCD_F33_item+0x36>
        LCD_ShowNum(g_F33[item]);
 8003294:	4b04      	ldr	r3, [pc, #16]	@ (80032a8 <LCD_F33_item+0x94>)
 8003296:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800329a:	f7fe fda5 	bl	8001de8 <LCD_ShowNum>
 800329e:	e7ef      	b.n	8003280 <LCD_F33_item+0x6c>
 80032a0:	20000a9c 	.word	0x20000a9c
 80032a4:	20000a9c 	.word	0x20000a9c
 80032a8:	20000a9c 	.word	0x20000a9c

080032ac <LCD_F34_item>:

void LCD_F34_item(uint8_t item, int16_t value)
{
 80032ac:	b510      	push	{r4, lr}
 80032ae:	4604      	mov	r4, r0
    item = GET_MENU(item, F34_ITEM_MAX);
    write_com(0x83);
 80032b0:	2083      	movs	r0, #131	@ 0x83
 80032b2:	f7fe fcf1 	bl	8001c98 <write_com>
    hzkdis(F34Item[item]);
 80032b6:	4b20      	ldr	r3, [pc, #128]	@ (8003338 <LCD_F34_item+0x8c>)
 80032b8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80032bc:	f7fe fd1c 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 80032c0:	2093      	movs	r0, #147	@ 0x93
 80032c2:	f7fe fce9 	bl	8001c98 <write_com>
    if (strcmp(F34Value[item][0], "") != 0) {
 80032c6:	01a3      	lsls	r3, r4, #6
 80032c8:	4a1c      	ldr	r2, [pc, #112]	@ (800333c <LCD_F34_item+0x90>)
 80032ca:	58d3      	ldr	r3, [r2, r3]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	b33b      	cbz	r3, 8003320 <LCD_F34_item+0x74>
        hzkdis(F34Value[item][g_F34[item]]);
 80032d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <LCD_F34_item+0x94>)
 80032d2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80032d6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80032da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80032de:	f7fe fd0b 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F34[item]);
    }

    item = GET_MENU(item + 1, F34_ITEM_MAX);
 80032e2:	3401      	adds	r4, #1
 80032e4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80032e6:	208b      	movs	r0, #139	@ 0x8b
 80032e8:	f7fe fcd6 	bl	8001c98 <write_com>
    hzkdis(F34Item[item]);
 80032ec:	4b12      	ldr	r3, [pc, #72]	@ (8003338 <LCD_F34_item+0x8c>)
 80032ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80032f2:	f7fe fd01 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 80032f6:	209b      	movs	r0, #155	@ 0x9b
 80032f8:	f7fe fcce 	bl	8001c98 <write_com>
    if (strcmp(F34Value[item][0], "") != 0) {
 80032fc:	01a3      	lsls	r3, r4, #6
 80032fe:	4a0f      	ldr	r2, [pc, #60]	@ (800333c <LCD_F34_item+0x90>)
 8003300:	58d3      	ldr	r3, [r2, r3]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	b193      	cbz	r3, 800332c <LCD_F34_item+0x80>
        hzkdis(F34Value[item][g_F34[item]]);
 8003306:	4b0e      	ldr	r3, [pc, #56]	@ (8003340 <LCD_F34_item+0x94>)
 8003308:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800330c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003310:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003314:	f7fe fcf0 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F34[item]);
    }
    write_com(0x93);
 8003318:	2093      	movs	r0, #147	@ 0x93
 800331a:	f7fe fcbd 	bl	8001c98 <write_com>
}
 800331e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F34[item]);
 8003320:	4b07      	ldr	r3, [pc, #28]	@ (8003340 <LCD_F34_item+0x94>)
 8003322:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003326:	f7fe fd5f 	bl	8001de8 <LCD_ShowNum>
 800332a:	e7da      	b.n	80032e2 <LCD_F34_item+0x36>
        LCD_ShowNum(g_F34[item]);
 800332c:	4b04      	ldr	r3, [pc, #16]	@ (8003340 <LCD_F34_item+0x94>)
 800332e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003332:	f7fe fd59 	bl	8001de8 <LCD_ShowNum>
 8003336:	e7ef      	b.n	8003318 <LCD_F34_item+0x6c>
 8003338:	20000a9c 	.word	0x20000a9c
 800333c:	20000a9c 	.word	0x20000a9c
 8003340:	20000a9c 	.word	0x20000a9c

08003344 <LCD_F35_item>:

void LCD_F35_item(uint8_t item, int16_t value)
{
 8003344:	b510      	push	{r4, lr}
 8003346:	4604      	mov	r4, r0
    item = GET_MENU(item, F35_ITEM_MAX);
    write_com(0x83);
 8003348:	2083      	movs	r0, #131	@ 0x83
 800334a:	f7fe fca5 	bl	8001c98 <write_com>
    hzkdis(F35Item[item]);
 800334e:	4b20      	ldr	r3, [pc, #128]	@ (80033d0 <LCD_F35_item+0x8c>)
 8003350:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003354:	f7fe fcd0 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8003358:	2093      	movs	r0, #147	@ 0x93
 800335a:	f7fe fc9d 	bl	8001c98 <write_com>
    if (strcmp(F35Value[item][0], "") != 0) {
 800335e:	01a3      	lsls	r3, r4, #6
 8003360:	4a1c      	ldr	r2, [pc, #112]	@ (80033d4 <LCD_F35_item+0x90>)
 8003362:	58d3      	ldr	r3, [r2, r3]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	b33b      	cbz	r3, 80033b8 <LCD_F35_item+0x74>
        hzkdis(F35Value[item][g_F35[item]]);
 8003368:	4b1b      	ldr	r3, [pc, #108]	@ (80033d8 <LCD_F35_item+0x94>)
 800336a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800336e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003372:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003376:	f7fe fcbf 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F35[item]);
    }

    item = GET_MENU(item + 1, F35_ITEM_MAX);
 800337a:	3401      	adds	r4, #1
 800337c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800337e:	208b      	movs	r0, #139	@ 0x8b
 8003380:	f7fe fc8a 	bl	8001c98 <write_com>
    hzkdis(F35Item[item]);
 8003384:	4b12      	ldr	r3, [pc, #72]	@ (80033d0 <LCD_F35_item+0x8c>)
 8003386:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800338a:	f7fe fcb5 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 800338e:	209b      	movs	r0, #155	@ 0x9b
 8003390:	f7fe fc82 	bl	8001c98 <write_com>
    if (strcmp(F35Value[item][0], "") != 0) {
 8003394:	01a3      	lsls	r3, r4, #6
 8003396:	4a0f      	ldr	r2, [pc, #60]	@ (80033d4 <LCD_F35_item+0x90>)
 8003398:	58d3      	ldr	r3, [r2, r3]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	b193      	cbz	r3, 80033c4 <LCD_F35_item+0x80>
        hzkdis(F35Value[item][g_F35[item]]);
 800339e:	4b0e      	ldr	r3, [pc, #56]	@ (80033d8 <LCD_F35_item+0x94>)
 80033a0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80033a4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80033a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80033ac:	f7fe fca4 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F35[item]);
    }
    write_com(0x93);
 80033b0:	2093      	movs	r0, #147	@ 0x93
 80033b2:	f7fe fc71 	bl	8001c98 <write_com>
}
 80033b6:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F35[item]);
 80033b8:	4b07      	ldr	r3, [pc, #28]	@ (80033d8 <LCD_F35_item+0x94>)
 80033ba:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80033be:	f7fe fd13 	bl	8001de8 <LCD_ShowNum>
 80033c2:	e7da      	b.n	800337a <LCD_F35_item+0x36>
        LCD_ShowNum(g_F35[item]);
 80033c4:	4b04      	ldr	r3, [pc, #16]	@ (80033d8 <LCD_F35_item+0x94>)
 80033c6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80033ca:	f7fe fd0d 	bl	8001de8 <LCD_ShowNum>
 80033ce:	e7ef      	b.n	80033b0 <LCD_F35_item+0x6c>
 80033d0:	20000a9c 	.word	0x20000a9c
 80033d4:	20000a9c 	.word	0x20000a9c
 80033d8:	20000a9c 	.word	0x20000a9c

080033dc <LCD_F36_item>:

void LCD_F36_item(uint8_t item, int16_t value)
{
 80033dc:	b510      	push	{r4, lr}
 80033de:	4604      	mov	r4, r0
    item = GET_MENU(item, F36_ITEM_MAX);
    write_com(0x83);
 80033e0:	2083      	movs	r0, #131	@ 0x83
 80033e2:	f7fe fc59 	bl	8001c98 <write_com>
    hzkdis(F36Item[item]);
 80033e6:	4b20      	ldr	r3, [pc, #128]	@ (8003468 <LCD_F36_item+0x8c>)
 80033e8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80033ec:	f7fe fc84 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 80033f0:	2093      	movs	r0, #147	@ 0x93
 80033f2:	f7fe fc51 	bl	8001c98 <write_com>
    if (strcmp(F36Value[item][0], "") != 0) {
 80033f6:	01a3      	lsls	r3, r4, #6
 80033f8:	4a1c      	ldr	r2, [pc, #112]	@ (800346c <LCD_F36_item+0x90>)
 80033fa:	58d3      	ldr	r3, [r2, r3]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	b33b      	cbz	r3, 8003450 <LCD_F36_item+0x74>
        hzkdis(F36Value[item][g_F36[item]]);
 8003400:	4b1b      	ldr	r3, [pc, #108]	@ (8003470 <LCD_F36_item+0x94>)
 8003402:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003406:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800340a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800340e:	f7fe fc73 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F36[item]);
    }

    item = GET_MENU(item + 1, F36_ITEM_MAX);
 8003412:	3401      	adds	r4, #1
 8003414:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003416:	208b      	movs	r0, #139	@ 0x8b
 8003418:	f7fe fc3e 	bl	8001c98 <write_com>
    hzkdis(F36Item[item]);
 800341c:	4b12      	ldr	r3, [pc, #72]	@ (8003468 <LCD_F36_item+0x8c>)
 800341e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003422:	f7fe fc69 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8003426:	209b      	movs	r0, #155	@ 0x9b
 8003428:	f7fe fc36 	bl	8001c98 <write_com>
    if (strcmp(F36Value[item][0], "") != 0) {
 800342c:	01a3      	lsls	r3, r4, #6
 800342e:	4a0f      	ldr	r2, [pc, #60]	@ (800346c <LCD_F36_item+0x90>)
 8003430:	58d3      	ldr	r3, [r2, r3]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	b193      	cbz	r3, 800345c <LCD_F36_item+0x80>
        hzkdis(F36Value[item][g_F36[item]]);
 8003436:	4b0e      	ldr	r3, [pc, #56]	@ (8003470 <LCD_F36_item+0x94>)
 8003438:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800343c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003440:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003444:	f7fe fc58 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F36[item]);
    }
    write_com(0x93);
 8003448:	2093      	movs	r0, #147	@ 0x93
 800344a:	f7fe fc25 	bl	8001c98 <write_com>
}
 800344e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F36[item]);
 8003450:	4b07      	ldr	r3, [pc, #28]	@ (8003470 <LCD_F36_item+0x94>)
 8003452:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003456:	f7fe fcc7 	bl	8001de8 <LCD_ShowNum>
 800345a:	e7da      	b.n	8003412 <LCD_F36_item+0x36>
        LCD_ShowNum(g_F36[item]);
 800345c:	4b04      	ldr	r3, [pc, #16]	@ (8003470 <LCD_F36_item+0x94>)
 800345e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003462:	f7fe fcc1 	bl	8001de8 <LCD_ShowNum>
 8003466:	e7ef      	b.n	8003448 <LCD_F36_item+0x6c>
 8003468:	20000a9c 	.word	0x20000a9c
 800346c:	20000a9c 	.word	0x20000a9c
 8003470:	20000a9c 	.word	0x20000a9c

08003474 <LCD_F37_item>:

void LCD_F37_item(uint8_t item, int16_t value)
{
 8003474:	b510      	push	{r4, lr}
 8003476:	4604      	mov	r4, r0
    item = GET_MENU(item, F37_ITEM_MAX);
    write_com(0x83);
 8003478:	2083      	movs	r0, #131	@ 0x83
 800347a:	f7fe fc0d 	bl	8001c98 <write_com>
    hzkdis(F37Item[item]);
 800347e:	4b20      	ldr	r3, [pc, #128]	@ (8003500 <LCD_F37_item+0x8c>)
 8003480:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003484:	f7fe fc38 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8003488:	2093      	movs	r0, #147	@ 0x93
 800348a:	f7fe fc05 	bl	8001c98 <write_com>
    if (strcmp(F37Value[item][0], "") != 0) {
 800348e:	01a3      	lsls	r3, r4, #6
 8003490:	4a1c      	ldr	r2, [pc, #112]	@ (8003504 <LCD_F37_item+0x90>)
 8003492:	58d3      	ldr	r3, [r2, r3]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	b33b      	cbz	r3, 80034e8 <LCD_F37_item+0x74>
        hzkdis(F37Value[item][g_F37[item]]);
 8003498:	4b1b      	ldr	r3, [pc, #108]	@ (8003508 <LCD_F37_item+0x94>)
 800349a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800349e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80034a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80034a6:	f7fe fc27 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F37[item]);
    }

    item = GET_MENU(item + 1, F37_ITEM_MAX);
 80034aa:	3401      	adds	r4, #1
 80034ac:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80034ae:	208b      	movs	r0, #139	@ 0x8b
 80034b0:	f7fe fbf2 	bl	8001c98 <write_com>
    hzkdis(F37Item[item]);
 80034b4:	4b12      	ldr	r3, [pc, #72]	@ (8003500 <LCD_F37_item+0x8c>)
 80034b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80034ba:	f7fe fc1d 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 80034be:	209b      	movs	r0, #155	@ 0x9b
 80034c0:	f7fe fbea 	bl	8001c98 <write_com>
    if (strcmp(F37Value[item][0], "") != 0) {
 80034c4:	01a3      	lsls	r3, r4, #6
 80034c6:	4a0f      	ldr	r2, [pc, #60]	@ (8003504 <LCD_F37_item+0x90>)
 80034c8:	58d3      	ldr	r3, [r2, r3]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	b193      	cbz	r3, 80034f4 <LCD_F37_item+0x80>
        hzkdis(F37Value[item][g_F37[item]]);
 80034ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003508 <LCD_F37_item+0x94>)
 80034d0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80034d4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80034d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80034dc:	f7fe fc0c 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F37[item]);
    }
    write_com(0x93);
 80034e0:	2093      	movs	r0, #147	@ 0x93
 80034e2:	f7fe fbd9 	bl	8001c98 <write_com>
}
 80034e6:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F37[item]);
 80034e8:	4b07      	ldr	r3, [pc, #28]	@ (8003508 <LCD_F37_item+0x94>)
 80034ea:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80034ee:	f7fe fc7b 	bl	8001de8 <LCD_ShowNum>
 80034f2:	e7da      	b.n	80034aa <LCD_F37_item+0x36>
        LCD_ShowNum(g_F37[item]);
 80034f4:	4b04      	ldr	r3, [pc, #16]	@ (8003508 <LCD_F37_item+0x94>)
 80034f6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80034fa:	f7fe fc75 	bl	8001de8 <LCD_ShowNum>
 80034fe:	e7ef      	b.n	80034e0 <LCD_F37_item+0x6c>
 8003500:	20000a9c 	.word	0x20000a9c
 8003504:	20000a9c 	.word	0x20000a9c
 8003508:	20000a9c 	.word	0x20000a9c

0800350c <LCD_F38_item>:

void LCD_F38_item(uint8_t item, int16_t value)
{
 800350c:	b510      	push	{r4, lr}
 800350e:	4604      	mov	r4, r0
    item = GET_MENU(item, F38_ITEM_MAX);
    write_com(0x83);
 8003510:	2083      	movs	r0, #131	@ 0x83
 8003512:	f7fe fbc1 	bl	8001c98 <write_com>
    hzkdis(F38Item[item]);
 8003516:	4b20      	ldr	r3, [pc, #128]	@ (8003598 <LCD_F38_item+0x8c>)
 8003518:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800351c:	f7fe fbec 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8003520:	2093      	movs	r0, #147	@ 0x93
 8003522:	f7fe fbb9 	bl	8001c98 <write_com>
    if (strcmp(F38Value[item][0], "") != 0) {
 8003526:	01a3      	lsls	r3, r4, #6
 8003528:	4a1c      	ldr	r2, [pc, #112]	@ (800359c <LCD_F38_item+0x90>)
 800352a:	58d3      	ldr	r3, [r2, r3]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	b33b      	cbz	r3, 8003580 <LCD_F38_item+0x74>
        hzkdis(F38Value[item][g_F38[item]]);
 8003530:	4b1b      	ldr	r3, [pc, #108]	@ (80035a0 <LCD_F38_item+0x94>)
 8003532:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003536:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800353a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800353e:	f7fe fbdb 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F38[item]);
    }

    item = GET_MENU(item + 1, F38_ITEM_MAX);
 8003542:	3401      	adds	r4, #1
 8003544:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003546:	208b      	movs	r0, #139	@ 0x8b
 8003548:	f7fe fba6 	bl	8001c98 <write_com>
    hzkdis(F38Item[item]);
 800354c:	4b12      	ldr	r3, [pc, #72]	@ (8003598 <LCD_F38_item+0x8c>)
 800354e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003552:	f7fe fbd1 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8003556:	209b      	movs	r0, #155	@ 0x9b
 8003558:	f7fe fb9e 	bl	8001c98 <write_com>
    if (strcmp(F38Value[item][0], "") != 0) {
 800355c:	01a3      	lsls	r3, r4, #6
 800355e:	4a0f      	ldr	r2, [pc, #60]	@ (800359c <LCD_F38_item+0x90>)
 8003560:	58d3      	ldr	r3, [r2, r3]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	b193      	cbz	r3, 800358c <LCD_F38_item+0x80>
        hzkdis(F38Value[item][g_F38[item]]);
 8003566:	4b0e      	ldr	r3, [pc, #56]	@ (80035a0 <LCD_F38_item+0x94>)
 8003568:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800356c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003570:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003574:	f7fe fbc0 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F38[item]);
    }
    write_com(0x93);
 8003578:	2093      	movs	r0, #147	@ 0x93
 800357a:	f7fe fb8d 	bl	8001c98 <write_com>
}
 800357e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F38[item]);
 8003580:	4b07      	ldr	r3, [pc, #28]	@ (80035a0 <LCD_F38_item+0x94>)
 8003582:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003586:	f7fe fc2f 	bl	8001de8 <LCD_ShowNum>
 800358a:	e7da      	b.n	8003542 <LCD_F38_item+0x36>
        LCD_ShowNum(g_F38[item]);
 800358c:	4b04      	ldr	r3, [pc, #16]	@ (80035a0 <LCD_F38_item+0x94>)
 800358e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003592:	f7fe fc29 	bl	8001de8 <LCD_ShowNum>
 8003596:	e7ef      	b.n	8003578 <LCD_F38_item+0x6c>
 8003598:	20000a9c 	.word	0x20000a9c
 800359c:	20000a9c 	.word	0x20000a9c
 80035a0:	20000a9c 	.word	0x20000a9c

080035a4 <LCD_F39_item>:

void LCD_F39_item(uint8_t item, int16_t value)
{
 80035a4:	b510      	push	{r4, lr}
 80035a6:	4604      	mov	r4, r0
    item = GET_MENU(item, F39_ITEM_MAX);
    write_com(0x83);
 80035a8:	2083      	movs	r0, #131	@ 0x83
 80035aa:	f7fe fb75 	bl	8001c98 <write_com>
    hzkdis(F39Item[item]);
 80035ae:	4b20      	ldr	r3, [pc, #128]	@ (8003630 <LCD_F39_item+0x8c>)
 80035b0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80035b4:	f7fe fba0 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 80035b8:	2093      	movs	r0, #147	@ 0x93
 80035ba:	f7fe fb6d 	bl	8001c98 <write_com>
    if (strcmp(F39Value[item][0], "") != 0) {
 80035be:	01a3      	lsls	r3, r4, #6
 80035c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003634 <LCD_F39_item+0x90>)
 80035c2:	58d3      	ldr	r3, [r2, r3]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	b33b      	cbz	r3, 8003618 <LCD_F39_item+0x74>
        hzkdis(F39Value[item][g_F39[item]]);
 80035c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003638 <LCD_F39_item+0x94>)
 80035ca:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80035ce:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80035d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80035d6:	f7fe fb8f 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F39[item]);
    }

    item = GET_MENU(item + 1, F39_ITEM_MAX);
 80035da:	3401      	adds	r4, #1
 80035dc:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80035de:	208b      	movs	r0, #139	@ 0x8b
 80035e0:	f7fe fb5a 	bl	8001c98 <write_com>
    hzkdis(F39Item[item]);
 80035e4:	4b12      	ldr	r3, [pc, #72]	@ (8003630 <LCD_F39_item+0x8c>)
 80035e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80035ea:	f7fe fb85 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 80035ee:	209b      	movs	r0, #155	@ 0x9b
 80035f0:	f7fe fb52 	bl	8001c98 <write_com>
    if (strcmp(F39Value[item][0], "") != 0) {
 80035f4:	01a3      	lsls	r3, r4, #6
 80035f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003634 <LCD_F39_item+0x90>)
 80035f8:	58d3      	ldr	r3, [r2, r3]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	b193      	cbz	r3, 8003624 <LCD_F39_item+0x80>
        hzkdis(F39Value[item][g_F39[item]]);
 80035fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003638 <LCD_F39_item+0x94>)
 8003600:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003604:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003608:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800360c:	f7fe fb74 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F39[item]);
    }
    write_com(0x93);
 8003610:	2093      	movs	r0, #147	@ 0x93
 8003612:	f7fe fb41 	bl	8001c98 <write_com>
}
 8003616:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F39[item]);
 8003618:	4b07      	ldr	r3, [pc, #28]	@ (8003638 <LCD_F39_item+0x94>)
 800361a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800361e:	f7fe fbe3 	bl	8001de8 <LCD_ShowNum>
 8003622:	e7da      	b.n	80035da <LCD_F39_item+0x36>
        LCD_ShowNum(g_F39[item]);
 8003624:	4b04      	ldr	r3, [pc, #16]	@ (8003638 <LCD_F39_item+0x94>)
 8003626:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800362a:	f7fe fbdd 	bl	8001de8 <LCD_ShowNum>
 800362e:	e7ef      	b.n	8003610 <LCD_F39_item+0x6c>
 8003630:	20000a9c 	.word	0x20000a9c
 8003634:	20000a9c 	.word	0x20000a9c
 8003638:	20000a9c 	.word	0x20000a9c

0800363c <LCD_F40_item>:

void LCD_F40_item(uint8_t item, int16_t value)
{
 800363c:	b510      	push	{r4, lr}
 800363e:	4604      	mov	r4, r0
    item = GET_MENU(item, F40_ITEM_MAX);
    write_com(0x83);
 8003640:	2083      	movs	r0, #131	@ 0x83
 8003642:	f7fe fb29 	bl	8001c98 <write_com>
    hzkdis(F40Item[item]);
 8003646:	4b20      	ldr	r3, [pc, #128]	@ (80036c8 <LCD_F40_item+0x8c>)
 8003648:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800364c:	f7fe fb54 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8003650:	2093      	movs	r0, #147	@ 0x93
 8003652:	f7fe fb21 	bl	8001c98 <write_com>
    if (strcmp(F40Value[item][0], "") != 0) {
 8003656:	01a3      	lsls	r3, r4, #6
 8003658:	4a1c      	ldr	r2, [pc, #112]	@ (80036cc <LCD_F40_item+0x90>)
 800365a:	58d3      	ldr	r3, [r2, r3]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	b33b      	cbz	r3, 80036b0 <LCD_F40_item+0x74>
        hzkdis(F40Value[item][g_F40[item]]);
 8003660:	4b1b      	ldr	r3, [pc, #108]	@ (80036d0 <LCD_F40_item+0x94>)
 8003662:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003666:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800366a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800366e:	f7fe fb43 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F40[item]);
    }

    item = GET_MENU(item + 1, F40_ITEM_MAX);
 8003672:	3401      	adds	r4, #1
 8003674:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003676:	208b      	movs	r0, #139	@ 0x8b
 8003678:	f7fe fb0e 	bl	8001c98 <write_com>
    hzkdis(F40Item[item]);
 800367c:	4b12      	ldr	r3, [pc, #72]	@ (80036c8 <LCD_F40_item+0x8c>)
 800367e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003682:	f7fe fb39 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8003686:	209b      	movs	r0, #155	@ 0x9b
 8003688:	f7fe fb06 	bl	8001c98 <write_com>
    if (strcmp(F40Value[item][0], "") != 0) {
 800368c:	01a3      	lsls	r3, r4, #6
 800368e:	4a0f      	ldr	r2, [pc, #60]	@ (80036cc <LCD_F40_item+0x90>)
 8003690:	58d3      	ldr	r3, [r2, r3]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	b193      	cbz	r3, 80036bc <LCD_F40_item+0x80>
        hzkdis(F40Value[item][g_F40[item]]);
 8003696:	4b0e      	ldr	r3, [pc, #56]	@ (80036d0 <LCD_F40_item+0x94>)
 8003698:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800369c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80036a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80036a4:	f7fe fb28 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F40[item]);
    }
    write_com(0x93);
 80036a8:	2093      	movs	r0, #147	@ 0x93
 80036aa:	f7fe faf5 	bl	8001c98 <write_com>
}
 80036ae:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F40[item]);
 80036b0:	4b07      	ldr	r3, [pc, #28]	@ (80036d0 <LCD_F40_item+0x94>)
 80036b2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80036b6:	f7fe fb97 	bl	8001de8 <LCD_ShowNum>
 80036ba:	e7da      	b.n	8003672 <LCD_F40_item+0x36>
        LCD_ShowNum(g_F40[item]);
 80036bc:	4b04      	ldr	r3, [pc, #16]	@ (80036d0 <LCD_F40_item+0x94>)
 80036be:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80036c2:	f7fe fb91 	bl	8001de8 <LCD_ShowNum>
 80036c6:	e7ef      	b.n	80036a8 <LCD_F40_item+0x6c>
 80036c8:	20000a9c 	.word	0x20000a9c
 80036cc:	20000a9c 	.word	0x20000a9c
 80036d0:	20000a9c 	.word	0x20000a9c

080036d4 <LCD_F41_item>:

void LCD_F41_item(uint8_t item, int16_t value)
{
 80036d4:	b510      	push	{r4, lr}
 80036d6:	4604      	mov	r4, r0
    item = GET_MENU(item, F41_ITEM_MAX);
    write_com(0x83);
 80036d8:	2083      	movs	r0, #131	@ 0x83
 80036da:	f7fe fadd 	bl	8001c98 <write_com>
    hzkdis(F41Item[item]);
 80036de:	4b20      	ldr	r3, [pc, #128]	@ (8003760 <LCD_F41_item+0x8c>)
 80036e0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80036e4:	f7fe fb08 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 80036e8:	2093      	movs	r0, #147	@ 0x93
 80036ea:	f7fe fad5 	bl	8001c98 <write_com>
    if (strcmp(F41Value[item][0], "") != 0) {
 80036ee:	01a3      	lsls	r3, r4, #6
 80036f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003764 <LCD_F41_item+0x90>)
 80036f2:	58d3      	ldr	r3, [r2, r3]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	b33b      	cbz	r3, 8003748 <LCD_F41_item+0x74>
        hzkdis(F41Value[item][g_F41[item]]);
 80036f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003768 <LCD_F41_item+0x94>)
 80036fa:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80036fe:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003702:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003706:	f7fe faf7 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F41[item]);
    }

    item = GET_MENU(item + 1, F41_ITEM_MAX);
 800370a:	3401      	adds	r4, #1
 800370c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800370e:	208b      	movs	r0, #139	@ 0x8b
 8003710:	f7fe fac2 	bl	8001c98 <write_com>
    hzkdis(F41Item[item]);
 8003714:	4b12      	ldr	r3, [pc, #72]	@ (8003760 <LCD_F41_item+0x8c>)
 8003716:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800371a:	f7fe faed 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 800371e:	209b      	movs	r0, #155	@ 0x9b
 8003720:	f7fe faba 	bl	8001c98 <write_com>
    if (strcmp(F41Value[item][0], "") != 0) {
 8003724:	01a3      	lsls	r3, r4, #6
 8003726:	4a0f      	ldr	r2, [pc, #60]	@ (8003764 <LCD_F41_item+0x90>)
 8003728:	58d3      	ldr	r3, [r2, r3]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	b193      	cbz	r3, 8003754 <LCD_F41_item+0x80>
        hzkdis(F41Value[item][g_F41[item]]);
 800372e:	4b0e      	ldr	r3, [pc, #56]	@ (8003768 <LCD_F41_item+0x94>)
 8003730:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003734:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003738:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800373c:	f7fe fadc 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F41[item]);
    }
    write_com(0x93);
 8003740:	2093      	movs	r0, #147	@ 0x93
 8003742:	f7fe faa9 	bl	8001c98 <write_com>
}
 8003746:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F41[item]);
 8003748:	4b07      	ldr	r3, [pc, #28]	@ (8003768 <LCD_F41_item+0x94>)
 800374a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800374e:	f7fe fb4b 	bl	8001de8 <LCD_ShowNum>
 8003752:	e7da      	b.n	800370a <LCD_F41_item+0x36>
        LCD_ShowNum(g_F41[item]);
 8003754:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <LCD_F41_item+0x94>)
 8003756:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800375a:	f7fe fb45 	bl	8001de8 <LCD_ShowNum>
 800375e:	e7ef      	b.n	8003740 <LCD_F41_item+0x6c>
 8003760:	20000a9c 	.word	0x20000a9c
 8003764:	20000a9c 	.word	0x20000a9c
 8003768:	20000a9c 	.word	0x20000a9c

0800376c <LCD_F42_item>:

void LCD_F42_item(uint8_t item, int16_t value)
{
 800376c:	b510      	push	{r4, lr}
 800376e:	4604      	mov	r4, r0
    item = GET_MENU(item, F42_ITEM_MAX);
    write_com(0x83);
 8003770:	2083      	movs	r0, #131	@ 0x83
 8003772:	f7fe fa91 	bl	8001c98 <write_com>
    hzkdis(F42Item[item]);
 8003776:	4b20      	ldr	r3, [pc, #128]	@ (80037f8 <LCD_F42_item+0x8c>)
 8003778:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800377c:	f7fe fabc 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8003780:	2093      	movs	r0, #147	@ 0x93
 8003782:	f7fe fa89 	bl	8001c98 <write_com>
    if (strcmp(F42Value[item][0], "") != 0) {
 8003786:	01a3      	lsls	r3, r4, #6
 8003788:	4a1c      	ldr	r2, [pc, #112]	@ (80037fc <LCD_F42_item+0x90>)
 800378a:	58d3      	ldr	r3, [r2, r3]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	b33b      	cbz	r3, 80037e0 <LCD_F42_item+0x74>
        hzkdis(F42Value[item][g_F42[item]]);
 8003790:	4b1b      	ldr	r3, [pc, #108]	@ (8003800 <LCD_F42_item+0x94>)
 8003792:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003796:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800379a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800379e:	f7fe faab 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F42[item]);
    }

    item = GET_MENU(item + 1, F42_ITEM_MAX);
 80037a2:	3401      	adds	r4, #1
 80037a4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80037a6:	208b      	movs	r0, #139	@ 0x8b
 80037a8:	f7fe fa76 	bl	8001c98 <write_com>
    hzkdis(F42Item[item]);
 80037ac:	4b12      	ldr	r3, [pc, #72]	@ (80037f8 <LCD_F42_item+0x8c>)
 80037ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80037b2:	f7fe faa1 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 80037b6:	209b      	movs	r0, #155	@ 0x9b
 80037b8:	f7fe fa6e 	bl	8001c98 <write_com>
    if (strcmp(F42Value[item][0], "") != 0) {
 80037bc:	01a3      	lsls	r3, r4, #6
 80037be:	4a0f      	ldr	r2, [pc, #60]	@ (80037fc <LCD_F42_item+0x90>)
 80037c0:	58d3      	ldr	r3, [r2, r3]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	b193      	cbz	r3, 80037ec <LCD_F42_item+0x80>
        hzkdis(F42Value[item][g_F42[item]]);
 80037c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003800 <LCD_F42_item+0x94>)
 80037c8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80037cc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80037d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80037d4:	f7fe fa90 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F42[item]);
    }
    write_com(0x93);
 80037d8:	2093      	movs	r0, #147	@ 0x93
 80037da:	f7fe fa5d 	bl	8001c98 <write_com>
}
 80037de:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F42[item]);
 80037e0:	4b07      	ldr	r3, [pc, #28]	@ (8003800 <LCD_F42_item+0x94>)
 80037e2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80037e6:	f7fe faff 	bl	8001de8 <LCD_ShowNum>
 80037ea:	e7da      	b.n	80037a2 <LCD_F42_item+0x36>
        LCD_ShowNum(g_F42[item]);
 80037ec:	4b04      	ldr	r3, [pc, #16]	@ (8003800 <LCD_F42_item+0x94>)
 80037ee:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80037f2:	f7fe faf9 	bl	8001de8 <LCD_ShowNum>
 80037f6:	e7ef      	b.n	80037d8 <LCD_F42_item+0x6c>
 80037f8:	20000a9c 	.word	0x20000a9c
 80037fc:	20000a9c 	.word	0x20000a9c
 8003800:	20000a9c 	.word	0x20000a9c

08003804 <LCD_F43_item>:

void LCD_F43_item(uint8_t item, int16_t value)
{
 8003804:	b510      	push	{r4, lr}
 8003806:	4604      	mov	r4, r0
    item = GET_MENU(item, F43_ITEM_MAX);
    write_com(0x83);
 8003808:	2083      	movs	r0, #131	@ 0x83
 800380a:	f7fe fa45 	bl	8001c98 <write_com>
    hzkdis(F43Item[item]);
 800380e:	4b20      	ldr	r3, [pc, #128]	@ (8003890 <LCD_F43_item+0x8c>)
 8003810:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003814:	f7fe fa70 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8003818:	2093      	movs	r0, #147	@ 0x93
 800381a:	f7fe fa3d 	bl	8001c98 <write_com>
    if (strcmp(F43Value[item][0], "") != 0) {
 800381e:	01a3      	lsls	r3, r4, #6
 8003820:	4a1c      	ldr	r2, [pc, #112]	@ (8003894 <LCD_F43_item+0x90>)
 8003822:	58d3      	ldr	r3, [r2, r3]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	b33b      	cbz	r3, 8003878 <LCD_F43_item+0x74>
        hzkdis(F43Value[item][g_F43[item]]);
 8003828:	4b1b      	ldr	r3, [pc, #108]	@ (8003898 <LCD_F43_item+0x94>)
 800382a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800382e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003832:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003836:	f7fe fa5f 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F43[item]);
    }

    item = GET_MENU(item + 1, F43_ITEM_MAX);
 800383a:	3401      	adds	r4, #1
 800383c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800383e:	208b      	movs	r0, #139	@ 0x8b
 8003840:	f7fe fa2a 	bl	8001c98 <write_com>
    hzkdis(F43Item[item]);
 8003844:	4b12      	ldr	r3, [pc, #72]	@ (8003890 <LCD_F43_item+0x8c>)
 8003846:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800384a:	f7fe fa55 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 800384e:	209b      	movs	r0, #155	@ 0x9b
 8003850:	f7fe fa22 	bl	8001c98 <write_com>
    if (strcmp(F43Value[item][0], "") != 0) {
 8003854:	01a3      	lsls	r3, r4, #6
 8003856:	4a0f      	ldr	r2, [pc, #60]	@ (8003894 <LCD_F43_item+0x90>)
 8003858:	58d3      	ldr	r3, [r2, r3]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	b193      	cbz	r3, 8003884 <LCD_F43_item+0x80>
        hzkdis(F43Value[item][g_F43[item]]);
 800385e:	4b0e      	ldr	r3, [pc, #56]	@ (8003898 <LCD_F43_item+0x94>)
 8003860:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003864:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003868:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800386c:	f7fe fa44 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F43[item]);
    }
    write_com(0x93);
 8003870:	2093      	movs	r0, #147	@ 0x93
 8003872:	f7fe fa11 	bl	8001c98 <write_com>
}
 8003876:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F43[item]);
 8003878:	4b07      	ldr	r3, [pc, #28]	@ (8003898 <LCD_F43_item+0x94>)
 800387a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800387e:	f7fe fab3 	bl	8001de8 <LCD_ShowNum>
 8003882:	e7da      	b.n	800383a <LCD_F43_item+0x36>
        LCD_ShowNum(g_F43[item]);
 8003884:	4b04      	ldr	r3, [pc, #16]	@ (8003898 <LCD_F43_item+0x94>)
 8003886:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800388a:	f7fe faad 	bl	8001de8 <LCD_ShowNum>
 800388e:	e7ef      	b.n	8003870 <LCD_F43_item+0x6c>
 8003890:	20000a9c 	.word	0x20000a9c
 8003894:	20000a9c 	.word	0x20000a9c
 8003898:	20000a9c 	.word	0x20000a9c

0800389c <LCD_F44_item>:

void LCD_F44_item(uint8_t item, int16_t value)
{
 800389c:	b510      	push	{r4, lr}
 800389e:	4604      	mov	r4, r0
    item = GET_MENU(item, F44_ITEM_MAX);
    write_com(0x83);
 80038a0:	2083      	movs	r0, #131	@ 0x83
 80038a2:	f7fe f9f9 	bl	8001c98 <write_com>
    hzkdis(F44Item[item]);
 80038a6:	4b20      	ldr	r3, [pc, #128]	@ (8003928 <LCD_F44_item+0x8c>)
 80038a8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80038ac:	f7fe fa24 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 80038b0:	2093      	movs	r0, #147	@ 0x93
 80038b2:	f7fe f9f1 	bl	8001c98 <write_com>
    if (strcmp(F44Value[item][0], "") != 0) {
 80038b6:	01a3      	lsls	r3, r4, #6
 80038b8:	4a1c      	ldr	r2, [pc, #112]	@ (800392c <LCD_F44_item+0x90>)
 80038ba:	58d3      	ldr	r3, [r2, r3]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	b33b      	cbz	r3, 8003910 <LCD_F44_item+0x74>
        hzkdis(F44Value[item][g_F44[item]]);
 80038c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003930 <LCD_F44_item+0x94>)
 80038c2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80038c6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80038ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80038ce:	f7fe fa13 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F44[item]);
    }

    item = GET_MENU(item + 1, F44_ITEM_MAX);
 80038d2:	3401      	adds	r4, #1
 80038d4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80038d6:	208b      	movs	r0, #139	@ 0x8b
 80038d8:	f7fe f9de 	bl	8001c98 <write_com>
    hzkdis(F44Item[item]);
 80038dc:	4b12      	ldr	r3, [pc, #72]	@ (8003928 <LCD_F44_item+0x8c>)
 80038de:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80038e2:	f7fe fa09 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 80038e6:	209b      	movs	r0, #155	@ 0x9b
 80038e8:	f7fe f9d6 	bl	8001c98 <write_com>
    if (strcmp(F44Value[item][0], "") != 0) {
 80038ec:	01a3      	lsls	r3, r4, #6
 80038ee:	4a0f      	ldr	r2, [pc, #60]	@ (800392c <LCD_F44_item+0x90>)
 80038f0:	58d3      	ldr	r3, [r2, r3]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	b193      	cbz	r3, 800391c <LCD_F44_item+0x80>
        hzkdis(F44Value[item][g_F44[item]]);
 80038f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003930 <LCD_F44_item+0x94>)
 80038f8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80038fc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003900:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003904:	f7fe f9f8 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F44[item]);
    }
    write_com(0x93);
 8003908:	2093      	movs	r0, #147	@ 0x93
 800390a:	f7fe f9c5 	bl	8001c98 <write_com>
}
 800390e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F44[item]);
 8003910:	4b07      	ldr	r3, [pc, #28]	@ (8003930 <LCD_F44_item+0x94>)
 8003912:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003916:	f7fe fa67 	bl	8001de8 <LCD_ShowNum>
 800391a:	e7da      	b.n	80038d2 <LCD_F44_item+0x36>
        LCD_ShowNum(g_F44[item]);
 800391c:	4b04      	ldr	r3, [pc, #16]	@ (8003930 <LCD_F44_item+0x94>)
 800391e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003922:	f7fe fa61 	bl	8001de8 <LCD_ShowNum>
 8003926:	e7ef      	b.n	8003908 <LCD_F44_item+0x6c>
 8003928:	20000a9c 	.word	0x20000a9c
 800392c:	20000a9c 	.word	0x20000a9c
 8003930:	20000a9c 	.word	0x20000a9c

08003934 <LCD_F45_item>:

void LCD_F45_item(uint8_t item, int16_t value)
{
 8003934:	b510      	push	{r4, lr}
 8003936:	4604      	mov	r4, r0
    item = GET_MENU(item, F45_ITEM_MAX);
    write_com(0x83);
 8003938:	2083      	movs	r0, #131	@ 0x83
 800393a:	f7fe f9ad 	bl	8001c98 <write_com>
    hzkdis(F45Item[item]);
 800393e:	4b20      	ldr	r3, [pc, #128]	@ (80039c0 <LCD_F45_item+0x8c>)
 8003940:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003944:	f7fe f9d8 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8003948:	2093      	movs	r0, #147	@ 0x93
 800394a:	f7fe f9a5 	bl	8001c98 <write_com>
    if (strcmp(F45Value[item][0], "") != 0) {
 800394e:	01a3      	lsls	r3, r4, #6
 8003950:	4a1c      	ldr	r2, [pc, #112]	@ (80039c4 <LCD_F45_item+0x90>)
 8003952:	58d3      	ldr	r3, [r2, r3]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	b33b      	cbz	r3, 80039a8 <LCD_F45_item+0x74>
        hzkdis(F45Value[item][g_F45[item]]);
 8003958:	4b1b      	ldr	r3, [pc, #108]	@ (80039c8 <LCD_F45_item+0x94>)
 800395a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800395e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003962:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003966:	f7fe f9c7 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F45[item]);
    }

    item = GET_MENU(item + 1, F45_ITEM_MAX);
 800396a:	3401      	adds	r4, #1
 800396c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800396e:	208b      	movs	r0, #139	@ 0x8b
 8003970:	f7fe f992 	bl	8001c98 <write_com>
    hzkdis(F45Item[item]);
 8003974:	4b12      	ldr	r3, [pc, #72]	@ (80039c0 <LCD_F45_item+0x8c>)
 8003976:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800397a:	f7fe f9bd 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 800397e:	209b      	movs	r0, #155	@ 0x9b
 8003980:	f7fe f98a 	bl	8001c98 <write_com>
    if (strcmp(F45Value[item][0], "") != 0) {
 8003984:	01a3      	lsls	r3, r4, #6
 8003986:	4a0f      	ldr	r2, [pc, #60]	@ (80039c4 <LCD_F45_item+0x90>)
 8003988:	58d3      	ldr	r3, [r2, r3]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	b193      	cbz	r3, 80039b4 <LCD_F45_item+0x80>
        hzkdis(F45Value[item][g_F45[item]]);
 800398e:	4b0e      	ldr	r3, [pc, #56]	@ (80039c8 <LCD_F45_item+0x94>)
 8003990:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003994:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003998:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800399c:	f7fe f9ac 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F45[item]);
    }
    write_com(0x93);
 80039a0:	2093      	movs	r0, #147	@ 0x93
 80039a2:	f7fe f979 	bl	8001c98 <write_com>
}
 80039a6:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F45[item]);
 80039a8:	4b07      	ldr	r3, [pc, #28]	@ (80039c8 <LCD_F45_item+0x94>)
 80039aa:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80039ae:	f7fe fa1b 	bl	8001de8 <LCD_ShowNum>
 80039b2:	e7da      	b.n	800396a <LCD_F45_item+0x36>
        LCD_ShowNum(g_F45[item]);
 80039b4:	4b04      	ldr	r3, [pc, #16]	@ (80039c8 <LCD_F45_item+0x94>)
 80039b6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80039ba:	f7fe fa15 	bl	8001de8 <LCD_ShowNum>
 80039be:	e7ef      	b.n	80039a0 <LCD_F45_item+0x6c>
 80039c0:	20000a9c 	.word	0x20000a9c
 80039c4:	20000a9c 	.word	0x20000a9c
 80039c8:	20000a9c 	.word	0x20000a9c

080039cc <LCD_F46_item>:

void LCD_F46_item(uint8_t item, int16_t value)
{
 80039cc:	b510      	push	{r4, lr}
 80039ce:	4604      	mov	r4, r0
    item = GET_MENU(item, F46_ITEM_MAX);
    write_com(0x83);
 80039d0:	2083      	movs	r0, #131	@ 0x83
 80039d2:	f7fe f961 	bl	8001c98 <write_com>
    hzkdis(F46Item[item]);
 80039d6:	4b20      	ldr	r3, [pc, #128]	@ (8003a58 <LCD_F46_item+0x8c>)
 80039d8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80039dc:	f7fe f98c 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 80039e0:	2093      	movs	r0, #147	@ 0x93
 80039e2:	f7fe f959 	bl	8001c98 <write_com>
    if (strcmp(F46Value[item][0], "") != 0) {
 80039e6:	01a3      	lsls	r3, r4, #6
 80039e8:	4a1c      	ldr	r2, [pc, #112]	@ (8003a5c <LCD_F46_item+0x90>)
 80039ea:	58d3      	ldr	r3, [r2, r3]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	b33b      	cbz	r3, 8003a40 <LCD_F46_item+0x74>
        hzkdis(F46Value[item][g_F46[item]]);
 80039f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a60 <LCD_F46_item+0x94>)
 80039f2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80039f6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80039fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80039fe:	f7fe f97b 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F46[item]);
    }

    item = GET_MENU(item + 1, F46_ITEM_MAX);
 8003a02:	3401      	adds	r4, #1
 8003a04:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003a06:	208b      	movs	r0, #139	@ 0x8b
 8003a08:	f7fe f946 	bl	8001c98 <write_com>
    hzkdis(F46Item[item]);
 8003a0c:	4b12      	ldr	r3, [pc, #72]	@ (8003a58 <LCD_F46_item+0x8c>)
 8003a0e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003a12:	f7fe f971 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8003a16:	209b      	movs	r0, #155	@ 0x9b
 8003a18:	f7fe f93e 	bl	8001c98 <write_com>
    if (strcmp(F46Value[item][0], "") != 0) {
 8003a1c:	01a3      	lsls	r3, r4, #6
 8003a1e:	4a0f      	ldr	r2, [pc, #60]	@ (8003a5c <LCD_F46_item+0x90>)
 8003a20:	58d3      	ldr	r3, [r2, r3]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	b193      	cbz	r3, 8003a4c <LCD_F46_item+0x80>
        hzkdis(F46Value[item][g_F46[item]]);
 8003a26:	4b0e      	ldr	r3, [pc, #56]	@ (8003a60 <LCD_F46_item+0x94>)
 8003a28:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003a2c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003a30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003a34:	f7fe f960 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F46[item]);
    }
    write_com(0x93);
 8003a38:	2093      	movs	r0, #147	@ 0x93
 8003a3a:	f7fe f92d 	bl	8001c98 <write_com>
}
 8003a3e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F46[item]);
 8003a40:	4b07      	ldr	r3, [pc, #28]	@ (8003a60 <LCD_F46_item+0x94>)
 8003a42:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003a46:	f7fe f9cf 	bl	8001de8 <LCD_ShowNum>
 8003a4a:	e7da      	b.n	8003a02 <LCD_F46_item+0x36>
        LCD_ShowNum(g_F46[item]);
 8003a4c:	4b04      	ldr	r3, [pc, #16]	@ (8003a60 <LCD_F46_item+0x94>)
 8003a4e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003a52:	f7fe f9c9 	bl	8001de8 <LCD_ShowNum>
 8003a56:	e7ef      	b.n	8003a38 <LCD_F46_item+0x6c>
 8003a58:	20000a9c 	.word	0x20000a9c
 8003a5c:	20000a9c 	.word	0x20000a9c
 8003a60:	20000a9c 	.word	0x20000a9c

08003a64 <LCD_F47_item>:

void LCD_F47_item(uint8_t item, int16_t value)
{
 8003a64:	b510      	push	{r4, lr}
 8003a66:	4604      	mov	r4, r0
    item = GET_MENU(item, F47_ITEM_MAX);
    write_com(0x83);
 8003a68:	2083      	movs	r0, #131	@ 0x83
 8003a6a:	f7fe f915 	bl	8001c98 <write_com>
    hzkdis(F47Item[item]);
 8003a6e:	4b20      	ldr	r3, [pc, #128]	@ (8003af0 <LCD_F47_item+0x8c>)
 8003a70:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003a74:	f7fe f940 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8003a78:	2093      	movs	r0, #147	@ 0x93
 8003a7a:	f7fe f90d 	bl	8001c98 <write_com>
    if (strcmp(F47Value[item][0], "") != 0) {
 8003a7e:	01a3      	lsls	r3, r4, #6
 8003a80:	4a1c      	ldr	r2, [pc, #112]	@ (8003af4 <LCD_F47_item+0x90>)
 8003a82:	58d3      	ldr	r3, [r2, r3]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	b33b      	cbz	r3, 8003ad8 <LCD_F47_item+0x74>
        hzkdis(F47Value[item][g_F47[item]]);
 8003a88:	4b1b      	ldr	r3, [pc, #108]	@ (8003af8 <LCD_F47_item+0x94>)
 8003a8a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003a8e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003a92:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003a96:	f7fe f92f 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F47[item]);
    }

    item = GET_MENU(item + 1, F47_ITEM_MAX);
 8003a9a:	3401      	adds	r4, #1
 8003a9c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003a9e:	208b      	movs	r0, #139	@ 0x8b
 8003aa0:	f7fe f8fa 	bl	8001c98 <write_com>
    hzkdis(F47Item[item]);
 8003aa4:	4b12      	ldr	r3, [pc, #72]	@ (8003af0 <LCD_F47_item+0x8c>)
 8003aa6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003aaa:	f7fe f925 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8003aae:	209b      	movs	r0, #155	@ 0x9b
 8003ab0:	f7fe f8f2 	bl	8001c98 <write_com>
    if (strcmp(F47Value[item][0], "") != 0) {
 8003ab4:	01a3      	lsls	r3, r4, #6
 8003ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8003af4 <LCD_F47_item+0x90>)
 8003ab8:	58d3      	ldr	r3, [r2, r3]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	b193      	cbz	r3, 8003ae4 <LCD_F47_item+0x80>
        hzkdis(F47Value[item][g_F47[item]]);
 8003abe:	4b0e      	ldr	r3, [pc, #56]	@ (8003af8 <LCD_F47_item+0x94>)
 8003ac0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003ac4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003ac8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003acc:	f7fe f914 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F47[item]);
    }
    write_com(0x93);
 8003ad0:	2093      	movs	r0, #147	@ 0x93
 8003ad2:	f7fe f8e1 	bl	8001c98 <write_com>
}
 8003ad6:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F47[item]);
 8003ad8:	4b07      	ldr	r3, [pc, #28]	@ (8003af8 <LCD_F47_item+0x94>)
 8003ada:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003ade:	f7fe f983 	bl	8001de8 <LCD_ShowNum>
 8003ae2:	e7da      	b.n	8003a9a <LCD_F47_item+0x36>
        LCD_ShowNum(g_F47[item]);
 8003ae4:	4b04      	ldr	r3, [pc, #16]	@ (8003af8 <LCD_F47_item+0x94>)
 8003ae6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003aea:	f7fe f97d 	bl	8001de8 <LCD_ShowNum>
 8003aee:	e7ef      	b.n	8003ad0 <LCD_F47_item+0x6c>
 8003af0:	20000a9c 	.word	0x20000a9c
 8003af4:	20000a9c 	.word	0x20000a9c
 8003af8:	20000a9c 	.word	0x20000a9c

08003afc <LCD_F48_item>:

void LCD_F48_item(uint8_t item, int16_t value)
{
 8003afc:	b510      	push	{r4, lr}
 8003afe:	4604      	mov	r4, r0
    item = GET_MENU(item, F48_ITEM_MAX);
    write_com(0x83);
 8003b00:	2083      	movs	r0, #131	@ 0x83
 8003b02:	f7fe f8c9 	bl	8001c98 <write_com>
    hzkdis(F48Item[item]);
 8003b06:	4b20      	ldr	r3, [pc, #128]	@ (8003b88 <LCD_F48_item+0x8c>)
 8003b08:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003b0c:	f7fe f8f4 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8003b10:	2093      	movs	r0, #147	@ 0x93
 8003b12:	f7fe f8c1 	bl	8001c98 <write_com>
    if (strcmp(F48Value[item][0], "") != 0) {
 8003b16:	01a3      	lsls	r3, r4, #6
 8003b18:	4a1c      	ldr	r2, [pc, #112]	@ (8003b8c <LCD_F48_item+0x90>)
 8003b1a:	58d3      	ldr	r3, [r2, r3]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	b33b      	cbz	r3, 8003b70 <LCD_F48_item+0x74>
        hzkdis(F48Value[item][g_F48[item]]);
 8003b20:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <LCD_F48_item+0x94>)
 8003b22:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003b26:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003b2a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b2e:	f7fe f8e3 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F48[item]);
    }

    item = GET_MENU(item + 1, F48_ITEM_MAX);
 8003b32:	3401      	adds	r4, #1
 8003b34:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003b36:	208b      	movs	r0, #139	@ 0x8b
 8003b38:	f7fe f8ae 	bl	8001c98 <write_com>
    hzkdis(F48Item[item]);
 8003b3c:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <LCD_F48_item+0x8c>)
 8003b3e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003b42:	f7fe f8d9 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8003b46:	209b      	movs	r0, #155	@ 0x9b
 8003b48:	f7fe f8a6 	bl	8001c98 <write_com>
    if (strcmp(F48Value[item][0], "") != 0) {
 8003b4c:	01a3      	lsls	r3, r4, #6
 8003b4e:	4a0f      	ldr	r2, [pc, #60]	@ (8003b8c <LCD_F48_item+0x90>)
 8003b50:	58d3      	ldr	r3, [r2, r3]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	b193      	cbz	r3, 8003b7c <LCD_F48_item+0x80>
        hzkdis(F48Value[item][g_F48[item]]);
 8003b56:	4b0e      	ldr	r3, [pc, #56]	@ (8003b90 <LCD_F48_item+0x94>)
 8003b58:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003b5c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003b60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b64:	f7fe f8c8 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F48[item]);
    }
    write_com(0x93);
 8003b68:	2093      	movs	r0, #147	@ 0x93
 8003b6a:	f7fe f895 	bl	8001c98 <write_com>
}
 8003b6e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F48[item]);
 8003b70:	4b07      	ldr	r3, [pc, #28]	@ (8003b90 <LCD_F48_item+0x94>)
 8003b72:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003b76:	f7fe f937 	bl	8001de8 <LCD_ShowNum>
 8003b7a:	e7da      	b.n	8003b32 <LCD_F48_item+0x36>
        LCD_ShowNum(g_F48[item]);
 8003b7c:	4b04      	ldr	r3, [pc, #16]	@ (8003b90 <LCD_F48_item+0x94>)
 8003b7e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003b82:	f7fe f931 	bl	8001de8 <LCD_ShowNum>
 8003b86:	e7ef      	b.n	8003b68 <LCD_F48_item+0x6c>
 8003b88:	20000a9c 	.word	0x20000a9c
 8003b8c:	20000a9c 	.word	0x20000a9c
 8003b90:	20000a9c 	.word	0x20000a9c

08003b94 <LCD_F49_item>:

void LCD_F49_item(uint8_t item, int16_t value)
{
 8003b94:	b510      	push	{r4, lr}
 8003b96:	4604      	mov	r4, r0
    item = GET_MENU(item, F49_ITEM_MAX);
    write_com(0x83);
 8003b98:	2083      	movs	r0, #131	@ 0x83
 8003b9a:	f7fe f87d 	bl	8001c98 <write_com>
    hzkdis(F49Item[item]);
 8003b9e:	4b20      	ldr	r3, [pc, #128]	@ (8003c20 <LCD_F49_item+0x8c>)
 8003ba0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003ba4:	f7fe f8a8 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8003ba8:	2093      	movs	r0, #147	@ 0x93
 8003baa:	f7fe f875 	bl	8001c98 <write_com>
    if (strcmp(F49Value[item][0], "") != 0) {
 8003bae:	01a3      	lsls	r3, r4, #6
 8003bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8003c24 <LCD_F49_item+0x90>)
 8003bb2:	58d3      	ldr	r3, [r2, r3]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	b33b      	cbz	r3, 8003c08 <LCD_F49_item+0x74>
        hzkdis(F49Value[item][g_F49[item]]);
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c28 <LCD_F49_item+0x94>)
 8003bba:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003bbe:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003bc2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003bc6:	f7fe f897 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F49[item]);
    }

    item = GET_MENU(item + 1, F49_ITEM_MAX);
 8003bca:	3401      	adds	r4, #1
 8003bcc:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003bce:	208b      	movs	r0, #139	@ 0x8b
 8003bd0:	f7fe f862 	bl	8001c98 <write_com>
    hzkdis(F49Item[item]);
 8003bd4:	4b12      	ldr	r3, [pc, #72]	@ (8003c20 <LCD_F49_item+0x8c>)
 8003bd6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003bda:	f7fe f88d 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8003bde:	209b      	movs	r0, #155	@ 0x9b
 8003be0:	f7fe f85a 	bl	8001c98 <write_com>
    if (strcmp(F49Value[item][0], "") != 0) {
 8003be4:	01a3      	lsls	r3, r4, #6
 8003be6:	4a0f      	ldr	r2, [pc, #60]	@ (8003c24 <LCD_F49_item+0x90>)
 8003be8:	58d3      	ldr	r3, [r2, r3]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	b193      	cbz	r3, 8003c14 <LCD_F49_item+0x80>
        hzkdis(F49Value[item][g_F49[item]]);
 8003bee:	4b0e      	ldr	r3, [pc, #56]	@ (8003c28 <LCD_F49_item+0x94>)
 8003bf0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003bf4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003bf8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003bfc:	f7fe f87c 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F49[item]);
    }
    write_com(0x93);
 8003c00:	2093      	movs	r0, #147	@ 0x93
 8003c02:	f7fe f849 	bl	8001c98 <write_com>
}
 8003c06:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F49[item]);
 8003c08:	4b07      	ldr	r3, [pc, #28]	@ (8003c28 <LCD_F49_item+0x94>)
 8003c0a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003c0e:	f7fe f8eb 	bl	8001de8 <LCD_ShowNum>
 8003c12:	e7da      	b.n	8003bca <LCD_F49_item+0x36>
        LCD_ShowNum(g_F49[item]);
 8003c14:	4b04      	ldr	r3, [pc, #16]	@ (8003c28 <LCD_F49_item+0x94>)
 8003c16:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003c1a:	f7fe f8e5 	bl	8001de8 <LCD_ShowNum>
 8003c1e:	e7ef      	b.n	8003c00 <LCD_F49_item+0x6c>
 8003c20:	20000a9c 	.word	0x20000a9c
 8003c24:	20000a9c 	.word	0x20000a9c
 8003c28:	20000a9c 	.word	0x20000a9c

08003c2c <LCD_F50_item>:

void LCD_F50_item(uint8_t item, int16_t value)
{
 8003c2c:	b510      	push	{r4, lr}
 8003c2e:	4604      	mov	r4, r0
    item = GET_MENU(item, F50_ITEM_MAX);
    write_com(0x83);
 8003c30:	2083      	movs	r0, #131	@ 0x83
 8003c32:	f7fe f831 	bl	8001c98 <write_com>
    hzkdis(F50Item[item]);
 8003c36:	4b20      	ldr	r3, [pc, #128]	@ (8003cb8 <LCD_F50_item+0x8c>)
 8003c38:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003c3c:	f7fe f85c 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8003c40:	2093      	movs	r0, #147	@ 0x93
 8003c42:	f7fe f829 	bl	8001c98 <write_com>
    if (strcmp(F50Value[item][0], "") != 0) {
 8003c46:	01a3      	lsls	r3, r4, #6
 8003c48:	4a1c      	ldr	r2, [pc, #112]	@ (8003cbc <LCD_F50_item+0x90>)
 8003c4a:	58d3      	ldr	r3, [r2, r3]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	b33b      	cbz	r3, 8003ca0 <LCD_F50_item+0x74>
        hzkdis(F50Value[item][g_F50[item]]);
 8003c50:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc0 <LCD_F50_item+0x94>)
 8003c52:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003c56:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003c5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c5e:	f7fe f84b 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F50[item]);
    }

    item = GET_MENU(item + 1, F50_ITEM_MAX);
 8003c62:	3401      	adds	r4, #1
 8003c64:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003c66:	208b      	movs	r0, #139	@ 0x8b
 8003c68:	f7fe f816 	bl	8001c98 <write_com>
    hzkdis(F50Item[item]);
 8003c6c:	4b12      	ldr	r3, [pc, #72]	@ (8003cb8 <LCD_F50_item+0x8c>)
 8003c6e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003c72:	f7fe f841 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8003c76:	209b      	movs	r0, #155	@ 0x9b
 8003c78:	f7fe f80e 	bl	8001c98 <write_com>
    if (strcmp(F50Value[item][0], "") != 0) {
 8003c7c:	01a3      	lsls	r3, r4, #6
 8003c7e:	4a0f      	ldr	r2, [pc, #60]	@ (8003cbc <LCD_F50_item+0x90>)
 8003c80:	58d3      	ldr	r3, [r2, r3]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	b193      	cbz	r3, 8003cac <LCD_F50_item+0x80>
        hzkdis(F50Value[item][g_F50[item]]);
 8003c86:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc0 <LCD_F50_item+0x94>)
 8003c88:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003c8c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003c90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c94:	f7fe f830 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F50[item]);
    }
    write_com(0x93);
 8003c98:	2093      	movs	r0, #147	@ 0x93
 8003c9a:	f7fd fffd 	bl	8001c98 <write_com>
}
 8003c9e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F50[item]);
 8003ca0:	4b07      	ldr	r3, [pc, #28]	@ (8003cc0 <LCD_F50_item+0x94>)
 8003ca2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003ca6:	f7fe f89f 	bl	8001de8 <LCD_ShowNum>
 8003caa:	e7da      	b.n	8003c62 <LCD_F50_item+0x36>
        LCD_ShowNum(g_F50[item]);
 8003cac:	4b04      	ldr	r3, [pc, #16]	@ (8003cc0 <LCD_F50_item+0x94>)
 8003cae:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003cb2:	f7fe f899 	bl	8001de8 <LCD_ShowNum>
 8003cb6:	e7ef      	b.n	8003c98 <LCD_F50_item+0x6c>
 8003cb8:	20000a9c 	.word	0x20000a9c
 8003cbc:	20000a9c 	.word	0x20000a9c
 8003cc0:	20000a9c 	.word	0x20000a9c

08003cc4 <LCD_F51_item>:

void LCD_F51_item(uint8_t item, int16_t value)
{
 8003cc4:	b510      	push	{r4, lr}
 8003cc6:	4604      	mov	r4, r0
    item = GET_MENU(item, F51_ITEM_MAX);
    write_com(0x83);
 8003cc8:	2083      	movs	r0, #131	@ 0x83
 8003cca:	f7fd ffe5 	bl	8001c98 <write_com>
    hzkdis(F51Item[item]);
 8003cce:	4b20      	ldr	r3, [pc, #128]	@ (8003d50 <LCD_F51_item+0x8c>)
 8003cd0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003cd4:	f7fe f810 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8003cd8:	2093      	movs	r0, #147	@ 0x93
 8003cda:	f7fd ffdd 	bl	8001c98 <write_com>
    if (strcmp(F51Value[item][0], "") != 0) {
 8003cde:	01a3      	lsls	r3, r4, #6
 8003ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8003d54 <LCD_F51_item+0x90>)
 8003ce2:	58d3      	ldr	r3, [r2, r3]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	b33b      	cbz	r3, 8003d38 <LCD_F51_item+0x74>
        hzkdis(F51Value[item][g_F51[item]]);
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d58 <LCD_F51_item+0x94>)
 8003cea:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003cee:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003cf2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003cf6:	f7fd ffff 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F51[item]);
    }

    item = GET_MENU(item + 1, F51_ITEM_MAX);
 8003cfa:	3401      	adds	r4, #1
 8003cfc:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003cfe:	208b      	movs	r0, #139	@ 0x8b
 8003d00:	f7fd ffca 	bl	8001c98 <write_com>
    hzkdis(F51Item[item]);
 8003d04:	4b12      	ldr	r3, [pc, #72]	@ (8003d50 <LCD_F51_item+0x8c>)
 8003d06:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003d0a:	f7fd fff5 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8003d0e:	209b      	movs	r0, #155	@ 0x9b
 8003d10:	f7fd ffc2 	bl	8001c98 <write_com>
    if (strcmp(F51Value[item][0], "") != 0) {
 8003d14:	01a3      	lsls	r3, r4, #6
 8003d16:	4a0f      	ldr	r2, [pc, #60]	@ (8003d54 <LCD_F51_item+0x90>)
 8003d18:	58d3      	ldr	r3, [r2, r3]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	b193      	cbz	r3, 8003d44 <LCD_F51_item+0x80>
        hzkdis(F51Value[item][g_F51[item]]);
 8003d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d58 <LCD_F51_item+0x94>)
 8003d20:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003d24:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003d28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003d2c:	f7fd ffe4 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F51[item]);
    }
    write_com(0x93);
 8003d30:	2093      	movs	r0, #147	@ 0x93
 8003d32:	f7fd ffb1 	bl	8001c98 <write_com>
}
 8003d36:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F51[item]);
 8003d38:	4b07      	ldr	r3, [pc, #28]	@ (8003d58 <LCD_F51_item+0x94>)
 8003d3a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003d3e:	f7fe f853 	bl	8001de8 <LCD_ShowNum>
 8003d42:	e7da      	b.n	8003cfa <LCD_F51_item+0x36>
        LCD_ShowNum(g_F51[item]);
 8003d44:	4b04      	ldr	r3, [pc, #16]	@ (8003d58 <LCD_F51_item+0x94>)
 8003d46:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003d4a:	f7fe f84d 	bl	8001de8 <LCD_ShowNum>
 8003d4e:	e7ef      	b.n	8003d30 <LCD_F51_item+0x6c>
 8003d50:	20000a9c 	.word	0x20000a9c
 8003d54:	20000a9c 	.word	0x20000a9c
 8003d58:	20000a9c 	.word	0x20000a9c

08003d5c <LCD_F52_item>:

void LCD_F52_item(uint8_t item, int16_t value)
{
 8003d5c:	b510      	push	{r4, lr}
 8003d5e:	4604      	mov	r4, r0
    item = GET_MENU(item, F52_ITEM_MAX);
    write_com(0x83);
 8003d60:	2083      	movs	r0, #131	@ 0x83
 8003d62:	f7fd ff99 	bl	8001c98 <write_com>
    hzkdis(F52Item[item]);
 8003d66:	4b20      	ldr	r3, [pc, #128]	@ (8003de8 <LCD_F52_item+0x8c>)
 8003d68:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003d6c:	f7fd ffc4 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8003d70:	2093      	movs	r0, #147	@ 0x93
 8003d72:	f7fd ff91 	bl	8001c98 <write_com>
    if (strcmp(F52Value[item][0], "") != 0) {
 8003d76:	01a3      	lsls	r3, r4, #6
 8003d78:	4a1c      	ldr	r2, [pc, #112]	@ (8003dec <LCD_F52_item+0x90>)
 8003d7a:	58d3      	ldr	r3, [r2, r3]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	b33b      	cbz	r3, 8003dd0 <LCD_F52_item+0x74>
        hzkdis(F52Value[item][g_F52[item]]);
 8003d80:	4b1b      	ldr	r3, [pc, #108]	@ (8003df0 <LCD_F52_item+0x94>)
 8003d82:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003d86:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003d8a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003d8e:	f7fd ffb3 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F52[item]);
    }

    item = GET_MENU(item + 1, F52_ITEM_MAX);
 8003d92:	3401      	adds	r4, #1
 8003d94:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003d96:	208b      	movs	r0, #139	@ 0x8b
 8003d98:	f7fd ff7e 	bl	8001c98 <write_com>
    hzkdis(F52Item[item]);
 8003d9c:	4b12      	ldr	r3, [pc, #72]	@ (8003de8 <LCD_F52_item+0x8c>)
 8003d9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003da2:	f7fd ffa9 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8003da6:	209b      	movs	r0, #155	@ 0x9b
 8003da8:	f7fd ff76 	bl	8001c98 <write_com>
    if (strcmp(F52Value[item][0], "") != 0) {
 8003dac:	01a3      	lsls	r3, r4, #6
 8003dae:	4a0f      	ldr	r2, [pc, #60]	@ (8003dec <LCD_F52_item+0x90>)
 8003db0:	58d3      	ldr	r3, [r2, r3]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	b193      	cbz	r3, 8003ddc <LCD_F52_item+0x80>
        hzkdis(F52Value[item][g_F52[item]]);
 8003db6:	4b0e      	ldr	r3, [pc, #56]	@ (8003df0 <LCD_F52_item+0x94>)
 8003db8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003dbc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003dc0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003dc4:	f7fd ff98 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F52[item]);
    }
    write_com(0x93);
 8003dc8:	2093      	movs	r0, #147	@ 0x93
 8003dca:	f7fd ff65 	bl	8001c98 <write_com>
}
 8003dce:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F52[item]);
 8003dd0:	4b07      	ldr	r3, [pc, #28]	@ (8003df0 <LCD_F52_item+0x94>)
 8003dd2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003dd6:	f7fe f807 	bl	8001de8 <LCD_ShowNum>
 8003dda:	e7da      	b.n	8003d92 <LCD_F52_item+0x36>
        LCD_ShowNum(g_F52[item]);
 8003ddc:	4b04      	ldr	r3, [pc, #16]	@ (8003df0 <LCD_F52_item+0x94>)
 8003dde:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003de2:	f7fe f801 	bl	8001de8 <LCD_ShowNum>
 8003de6:	e7ef      	b.n	8003dc8 <LCD_F52_item+0x6c>
 8003de8:	20000a9c 	.word	0x20000a9c
 8003dec:	20000a9c 	.word	0x20000a9c
 8003df0:	20000a9c 	.word	0x20000a9c

08003df4 <LCD_F53_item>:

void LCD_F53_item(uint8_t item, int16_t value)
{
 8003df4:	b510      	push	{r4, lr}
 8003df6:	4604      	mov	r4, r0
    item = GET_MENU(item, F53_ITEM_MAX);
    write_com(0x83);
 8003df8:	2083      	movs	r0, #131	@ 0x83
 8003dfa:	f7fd ff4d 	bl	8001c98 <write_com>
    hzkdis(F53Item[item]);
 8003dfe:	4b20      	ldr	r3, [pc, #128]	@ (8003e80 <LCD_F53_item+0x8c>)
 8003e00:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003e04:	f7fd ff78 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8003e08:	2093      	movs	r0, #147	@ 0x93
 8003e0a:	f7fd ff45 	bl	8001c98 <write_com>
    if (strcmp(F53Value[item][0], "") != 0) {
 8003e0e:	01a3      	lsls	r3, r4, #6
 8003e10:	4a1c      	ldr	r2, [pc, #112]	@ (8003e84 <LCD_F53_item+0x90>)
 8003e12:	58d3      	ldr	r3, [r2, r3]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	b33b      	cbz	r3, 8003e68 <LCD_F53_item+0x74>
        hzkdis(F53Value[item][g_F53[item]]);
 8003e18:	4b1b      	ldr	r3, [pc, #108]	@ (8003e88 <LCD_F53_item+0x94>)
 8003e1a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003e1e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003e22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003e26:	f7fd ff67 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F53[item]);
    }

    item = GET_MENU(item + 1, F53_ITEM_MAX);
 8003e2a:	3401      	adds	r4, #1
 8003e2c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003e2e:	208b      	movs	r0, #139	@ 0x8b
 8003e30:	f7fd ff32 	bl	8001c98 <write_com>
    hzkdis(F53Item[item]);
 8003e34:	4b12      	ldr	r3, [pc, #72]	@ (8003e80 <LCD_F53_item+0x8c>)
 8003e36:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003e3a:	f7fd ff5d 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8003e3e:	209b      	movs	r0, #155	@ 0x9b
 8003e40:	f7fd ff2a 	bl	8001c98 <write_com>
    if (strcmp(F53Value[item][0], "") != 0) {
 8003e44:	01a3      	lsls	r3, r4, #6
 8003e46:	4a0f      	ldr	r2, [pc, #60]	@ (8003e84 <LCD_F53_item+0x90>)
 8003e48:	58d3      	ldr	r3, [r2, r3]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	b193      	cbz	r3, 8003e74 <LCD_F53_item+0x80>
        hzkdis(F53Value[item][g_F53[item]]);
 8003e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e88 <LCD_F53_item+0x94>)
 8003e50:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003e54:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003e58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003e5c:	f7fd ff4c 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F53[item]);
    }
    write_com(0x93);
 8003e60:	2093      	movs	r0, #147	@ 0x93
 8003e62:	f7fd ff19 	bl	8001c98 <write_com>
}
 8003e66:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F53[item]);
 8003e68:	4b07      	ldr	r3, [pc, #28]	@ (8003e88 <LCD_F53_item+0x94>)
 8003e6a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003e6e:	f7fd ffbb 	bl	8001de8 <LCD_ShowNum>
 8003e72:	e7da      	b.n	8003e2a <LCD_F53_item+0x36>
        LCD_ShowNum(g_F53[item]);
 8003e74:	4b04      	ldr	r3, [pc, #16]	@ (8003e88 <LCD_F53_item+0x94>)
 8003e76:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003e7a:	f7fd ffb5 	bl	8001de8 <LCD_ShowNum>
 8003e7e:	e7ef      	b.n	8003e60 <LCD_F53_item+0x6c>
 8003e80:	20000a9c 	.word	0x20000a9c
 8003e84:	20000a9c 	.word	0x20000a9c
 8003e88:	20000a9c 	.word	0x20000a9c

08003e8c <LCD_F54_item>:

void LCD_F54_item(uint8_t item, int16_t value)
{
 8003e8c:	b510      	push	{r4, lr}
 8003e8e:	4604      	mov	r4, r0
    item = GET_MENU(item, F54_ITEM_MAX);
    write_com(0x83);
 8003e90:	2083      	movs	r0, #131	@ 0x83
 8003e92:	f7fd ff01 	bl	8001c98 <write_com>
    hzkdis(F54Item[item]);
 8003e96:	4b20      	ldr	r3, [pc, #128]	@ (8003f18 <LCD_F54_item+0x8c>)
 8003e98:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003e9c:	f7fd ff2c 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8003ea0:	2093      	movs	r0, #147	@ 0x93
 8003ea2:	f7fd fef9 	bl	8001c98 <write_com>
    if (strcmp(F54Value[item][0], "") != 0) {
 8003ea6:	01a3      	lsls	r3, r4, #6
 8003ea8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f1c <LCD_F54_item+0x90>)
 8003eaa:	58d3      	ldr	r3, [r2, r3]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	b33b      	cbz	r3, 8003f00 <LCD_F54_item+0x74>
        hzkdis(F54Value[item][g_F54[item]]);
 8003eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f20 <LCD_F54_item+0x94>)
 8003eb2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003eb6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003eba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003ebe:	f7fd ff1b 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F54[item]);
    }

    item = GET_MENU(item + 1, F54_ITEM_MAX);
 8003ec2:	3401      	adds	r4, #1
 8003ec4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003ec6:	208b      	movs	r0, #139	@ 0x8b
 8003ec8:	f7fd fee6 	bl	8001c98 <write_com>
    hzkdis(F54Item[item]);
 8003ecc:	4b12      	ldr	r3, [pc, #72]	@ (8003f18 <LCD_F54_item+0x8c>)
 8003ece:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003ed2:	f7fd ff11 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8003ed6:	209b      	movs	r0, #155	@ 0x9b
 8003ed8:	f7fd fede 	bl	8001c98 <write_com>
    if (strcmp(F54Value[item][0], "") != 0) {
 8003edc:	01a3      	lsls	r3, r4, #6
 8003ede:	4a0f      	ldr	r2, [pc, #60]	@ (8003f1c <LCD_F54_item+0x90>)
 8003ee0:	58d3      	ldr	r3, [r2, r3]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	b193      	cbz	r3, 8003f0c <LCD_F54_item+0x80>
        hzkdis(F54Value[item][g_F54[item]]);
 8003ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8003f20 <LCD_F54_item+0x94>)
 8003ee8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003eec:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003ef0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003ef4:	f7fd ff00 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F54[item]);
    }
    write_com(0x93);
 8003ef8:	2093      	movs	r0, #147	@ 0x93
 8003efa:	f7fd fecd 	bl	8001c98 <write_com>
}
 8003efe:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F54[item]);
 8003f00:	4b07      	ldr	r3, [pc, #28]	@ (8003f20 <LCD_F54_item+0x94>)
 8003f02:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003f06:	f7fd ff6f 	bl	8001de8 <LCD_ShowNum>
 8003f0a:	e7da      	b.n	8003ec2 <LCD_F54_item+0x36>
        LCD_ShowNum(g_F54[item]);
 8003f0c:	4b04      	ldr	r3, [pc, #16]	@ (8003f20 <LCD_F54_item+0x94>)
 8003f0e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003f12:	f7fd ff69 	bl	8001de8 <LCD_ShowNum>
 8003f16:	e7ef      	b.n	8003ef8 <LCD_F54_item+0x6c>
 8003f18:	20000a9c 	.word	0x20000a9c
 8003f1c:	20000a9c 	.word	0x20000a9c
 8003f20:	20000a9c 	.word	0x20000a9c

08003f24 <LCD_F55_item>:

void LCD_F55_item(uint8_t item, int16_t value)
{
 8003f24:	b510      	push	{r4, lr}
 8003f26:	4604      	mov	r4, r0
    item = GET_MENU(item, F55_ITEM_MAX);
    write_com(0x83);
 8003f28:	2083      	movs	r0, #131	@ 0x83
 8003f2a:	f7fd feb5 	bl	8001c98 <write_com>
    hzkdis(F55Item[item]);
 8003f2e:	4b20      	ldr	r3, [pc, #128]	@ (8003fb0 <LCD_F55_item+0x8c>)
 8003f30:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003f34:	f7fd fee0 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8003f38:	2093      	movs	r0, #147	@ 0x93
 8003f3a:	f7fd fead 	bl	8001c98 <write_com>
    if (strcmp(F55Value[item][0], "") != 0) {
 8003f3e:	01a3      	lsls	r3, r4, #6
 8003f40:	4a1c      	ldr	r2, [pc, #112]	@ (8003fb4 <LCD_F55_item+0x90>)
 8003f42:	58d3      	ldr	r3, [r2, r3]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	b33b      	cbz	r3, 8003f98 <LCD_F55_item+0x74>
        hzkdis(F55Value[item][g_F55[item]]);
 8003f48:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb8 <LCD_F55_item+0x94>)
 8003f4a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003f4e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003f52:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003f56:	f7fd fecf 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F55[item]);
    }

    item = GET_MENU(item + 1, F55_ITEM_MAX);
 8003f5a:	3401      	adds	r4, #1
 8003f5c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003f5e:	208b      	movs	r0, #139	@ 0x8b
 8003f60:	f7fd fe9a 	bl	8001c98 <write_com>
    hzkdis(F55Item[item]);
 8003f64:	4b12      	ldr	r3, [pc, #72]	@ (8003fb0 <LCD_F55_item+0x8c>)
 8003f66:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003f6a:	f7fd fec5 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8003f6e:	209b      	movs	r0, #155	@ 0x9b
 8003f70:	f7fd fe92 	bl	8001c98 <write_com>
    if (strcmp(F55Value[item][0], "") != 0) {
 8003f74:	01a3      	lsls	r3, r4, #6
 8003f76:	4a0f      	ldr	r2, [pc, #60]	@ (8003fb4 <LCD_F55_item+0x90>)
 8003f78:	58d3      	ldr	r3, [r2, r3]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	b193      	cbz	r3, 8003fa4 <LCD_F55_item+0x80>
        hzkdis(F55Value[item][g_F55[item]]);
 8003f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb8 <LCD_F55_item+0x94>)
 8003f80:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003f84:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003f88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003f8c:	f7fd feb4 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F55[item]);
    }
    write_com(0x93);
 8003f90:	2093      	movs	r0, #147	@ 0x93
 8003f92:	f7fd fe81 	bl	8001c98 <write_com>
}
 8003f96:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F55[item]);
 8003f98:	4b07      	ldr	r3, [pc, #28]	@ (8003fb8 <LCD_F55_item+0x94>)
 8003f9a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003f9e:	f7fd ff23 	bl	8001de8 <LCD_ShowNum>
 8003fa2:	e7da      	b.n	8003f5a <LCD_F55_item+0x36>
        LCD_ShowNum(g_F55[item]);
 8003fa4:	4b04      	ldr	r3, [pc, #16]	@ (8003fb8 <LCD_F55_item+0x94>)
 8003fa6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8003faa:	f7fd ff1d 	bl	8001de8 <LCD_ShowNum>
 8003fae:	e7ef      	b.n	8003f90 <LCD_F55_item+0x6c>
 8003fb0:	20000a9c 	.word	0x20000a9c
 8003fb4:	20000a9c 	.word	0x20000a9c
 8003fb8:	20000a9c 	.word	0x20000a9c

08003fbc <LCD_F56_item>:

void LCD_F56_item(uint8_t item, int16_t value)
{
 8003fbc:	b510      	push	{r4, lr}
 8003fbe:	4604      	mov	r4, r0
    item = GET_MENU(item, F56_ITEM_MAX);
    write_com(0x83);
 8003fc0:	2083      	movs	r0, #131	@ 0x83
 8003fc2:	f7fd fe69 	bl	8001c98 <write_com>
    hzkdis(F56Item[item]);
 8003fc6:	4b20      	ldr	r3, [pc, #128]	@ (8004048 <LCD_F56_item+0x8c>)
 8003fc8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003fcc:	f7fd fe94 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8003fd0:	2093      	movs	r0, #147	@ 0x93
 8003fd2:	f7fd fe61 	bl	8001c98 <write_com>
    if (strcmp(F56Value[item][0], "") != 0) {
 8003fd6:	01a3      	lsls	r3, r4, #6
 8003fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800404c <LCD_F56_item+0x90>)
 8003fda:	58d3      	ldr	r3, [r2, r3]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	b33b      	cbz	r3, 8004030 <LCD_F56_item+0x74>
        hzkdis(F56Value[item][g_F56[item]]);
 8003fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8004050 <LCD_F56_item+0x94>)
 8003fe2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003fe6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003fea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003fee:	f7fd fe83 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F56[item]);
    }

    item = GET_MENU(item + 1, F56_ITEM_MAX);
 8003ff2:	3401      	adds	r4, #1
 8003ff4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8003ff6:	208b      	movs	r0, #139	@ 0x8b
 8003ff8:	f7fd fe4e 	bl	8001c98 <write_com>
    hzkdis(F56Item[item]);
 8003ffc:	4b12      	ldr	r3, [pc, #72]	@ (8004048 <LCD_F56_item+0x8c>)
 8003ffe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004002:	f7fd fe79 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8004006:	209b      	movs	r0, #155	@ 0x9b
 8004008:	f7fd fe46 	bl	8001c98 <write_com>
    if (strcmp(F56Value[item][0], "") != 0) {
 800400c:	01a3      	lsls	r3, r4, #6
 800400e:	4a0f      	ldr	r2, [pc, #60]	@ (800404c <LCD_F56_item+0x90>)
 8004010:	58d3      	ldr	r3, [r2, r3]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	b193      	cbz	r3, 800403c <LCD_F56_item+0x80>
        hzkdis(F56Value[item][g_F56[item]]);
 8004016:	4b0e      	ldr	r3, [pc, #56]	@ (8004050 <LCD_F56_item+0x94>)
 8004018:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800401c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004020:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004024:	f7fd fe68 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F56[item]);
    }
    write_com(0x93);
 8004028:	2093      	movs	r0, #147	@ 0x93
 800402a:	f7fd fe35 	bl	8001c98 <write_com>
}
 800402e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F56[item]);
 8004030:	4b07      	ldr	r3, [pc, #28]	@ (8004050 <LCD_F56_item+0x94>)
 8004032:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004036:	f7fd fed7 	bl	8001de8 <LCD_ShowNum>
 800403a:	e7da      	b.n	8003ff2 <LCD_F56_item+0x36>
        LCD_ShowNum(g_F56[item]);
 800403c:	4b04      	ldr	r3, [pc, #16]	@ (8004050 <LCD_F56_item+0x94>)
 800403e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004042:	f7fd fed1 	bl	8001de8 <LCD_ShowNum>
 8004046:	e7ef      	b.n	8004028 <LCD_F56_item+0x6c>
 8004048:	20000a9c 	.word	0x20000a9c
 800404c:	20000a9c 	.word	0x20000a9c
 8004050:	20000a9c 	.word	0x20000a9c

08004054 <LCD_F57_item>:

void LCD_F57_item(uint8_t item, int16_t value)
{
 8004054:	b510      	push	{r4, lr}
 8004056:	4604      	mov	r4, r0
    item = GET_MENU(item, F57_ITEM_MAX);
    write_com(0x83);
 8004058:	2083      	movs	r0, #131	@ 0x83
 800405a:	f7fd fe1d 	bl	8001c98 <write_com>
    hzkdis(F57Item[item]);
 800405e:	4b20      	ldr	r3, [pc, #128]	@ (80040e0 <LCD_F57_item+0x8c>)
 8004060:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004064:	f7fd fe48 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8004068:	2093      	movs	r0, #147	@ 0x93
 800406a:	f7fd fe15 	bl	8001c98 <write_com>
    if (strcmp(F57Value[item][0], "") != 0) {
 800406e:	01a3      	lsls	r3, r4, #6
 8004070:	4a1c      	ldr	r2, [pc, #112]	@ (80040e4 <LCD_F57_item+0x90>)
 8004072:	58d3      	ldr	r3, [r2, r3]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	b33b      	cbz	r3, 80040c8 <LCD_F57_item+0x74>
        hzkdis(F57Value[item][g_F57[item]]);
 8004078:	4b1b      	ldr	r3, [pc, #108]	@ (80040e8 <LCD_F57_item+0x94>)
 800407a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800407e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004082:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004086:	f7fd fe37 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F57[item]);
    }

    item = GET_MENU(item + 1, F57_ITEM_MAX);
 800408a:	3401      	adds	r4, #1
 800408c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800408e:	208b      	movs	r0, #139	@ 0x8b
 8004090:	f7fd fe02 	bl	8001c98 <write_com>
    hzkdis(F57Item[item]);
 8004094:	4b12      	ldr	r3, [pc, #72]	@ (80040e0 <LCD_F57_item+0x8c>)
 8004096:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800409a:	f7fd fe2d 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 800409e:	209b      	movs	r0, #155	@ 0x9b
 80040a0:	f7fd fdfa 	bl	8001c98 <write_com>
    if (strcmp(F57Value[item][0], "") != 0) {
 80040a4:	01a3      	lsls	r3, r4, #6
 80040a6:	4a0f      	ldr	r2, [pc, #60]	@ (80040e4 <LCD_F57_item+0x90>)
 80040a8:	58d3      	ldr	r3, [r2, r3]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	b193      	cbz	r3, 80040d4 <LCD_F57_item+0x80>
        hzkdis(F57Value[item][g_F57[item]]);
 80040ae:	4b0e      	ldr	r3, [pc, #56]	@ (80040e8 <LCD_F57_item+0x94>)
 80040b0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80040b4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80040b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80040bc:	f7fd fe1c 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F57[item]);
    }
    write_com(0x93);
 80040c0:	2093      	movs	r0, #147	@ 0x93
 80040c2:	f7fd fde9 	bl	8001c98 <write_com>
}
 80040c6:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F57[item]);
 80040c8:	4b07      	ldr	r3, [pc, #28]	@ (80040e8 <LCD_F57_item+0x94>)
 80040ca:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80040ce:	f7fd fe8b 	bl	8001de8 <LCD_ShowNum>
 80040d2:	e7da      	b.n	800408a <LCD_F57_item+0x36>
        LCD_ShowNum(g_F57[item]);
 80040d4:	4b04      	ldr	r3, [pc, #16]	@ (80040e8 <LCD_F57_item+0x94>)
 80040d6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80040da:	f7fd fe85 	bl	8001de8 <LCD_ShowNum>
 80040de:	e7ef      	b.n	80040c0 <LCD_F57_item+0x6c>
 80040e0:	20000a9c 	.word	0x20000a9c
 80040e4:	20000a9c 	.word	0x20000a9c
 80040e8:	20000a9c 	.word	0x20000a9c

080040ec <LCD_F58_item>:

void LCD_F58_item(uint8_t item, int16_t value)
{
 80040ec:	b510      	push	{r4, lr}
 80040ee:	4604      	mov	r4, r0
    item = GET_MENU(item, F58_ITEM_MAX);
    write_com(0x83);
 80040f0:	2083      	movs	r0, #131	@ 0x83
 80040f2:	f7fd fdd1 	bl	8001c98 <write_com>
    hzkdis(F58Item[item]);
 80040f6:	4b20      	ldr	r3, [pc, #128]	@ (8004178 <LCD_F58_item+0x8c>)
 80040f8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80040fc:	f7fd fdfc 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8004100:	2093      	movs	r0, #147	@ 0x93
 8004102:	f7fd fdc9 	bl	8001c98 <write_com>
    if (strcmp(F58Value[item][0], "") != 0) {
 8004106:	01a3      	lsls	r3, r4, #6
 8004108:	4a1c      	ldr	r2, [pc, #112]	@ (800417c <LCD_F58_item+0x90>)
 800410a:	58d3      	ldr	r3, [r2, r3]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	b33b      	cbz	r3, 8004160 <LCD_F58_item+0x74>
        hzkdis(F58Value[item][g_F58[item]]);
 8004110:	4b1b      	ldr	r3, [pc, #108]	@ (8004180 <LCD_F58_item+0x94>)
 8004112:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004116:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800411a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800411e:	f7fd fdeb 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F58[item]);
    }

    item = GET_MENU(item + 1, F58_ITEM_MAX);
 8004122:	3401      	adds	r4, #1
 8004124:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004126:	208b      	movs	r0, #139	@ 0x8b
 8004128:	f7fd fdb6 	bl	8001c98 <write_com>
    hzkdis(F58Item[item]);
 800412c:	4b12      	ldr	r3, [pc, #72]	@ (8004178 <LCD_F58_item+0x8c>)
 800412e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004132:	f7fd fde1 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8004136:	209b      	movs	r0, #155	@ 0x9b
 8004138:	f7fd fdae 	bl	8001c98 <write_com>
    if (strcmp(F58Value[item][0], "") != 0) {
 800413c:	01a3      	lsls	r3, r4, #6
 800413e:	4a0f      	ldr	r2, [pc, #60]	@ (800417c <LCD_F58_item+0x90>)
 8004140:	58d3      	ldr	r3, [r2, r3]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	b193      	cbz	r3, 800416c <LCD_F58_item+0x80>
        hzkdis(F58Value[item][g_F58[item]]);
 8004146:	4b0e      	ldr	r3, [pc, #56]	@ (8004180 <LCD_F58_item+0x94>)
 8004148:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800414c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004150:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004154:	f7fd fdd0 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F58[item]);
    }
    write_com(0x93);
 8004158:	2093      	movs	r0, #147	@ 0x93
 800415a:	f7fd fd9d 	bl	8001c98 <write_com>
}
 800415e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F58[item]);
 8004160:	4b07      	ldr	r3, [pc, #28]	@ (8004180 <LCD_F58_item+0x94>)
 8004162:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004166:	f7fd fe3f 	bl	8001de8 <LCD_ShowNum>
 800416a:	e7da      	b.n	8004122 <LCD_F58_item+0x36>
        LCD_ShowNum(g_F58[item]);
 800416c:	4b04      	ldr	r3, [pc, #16]	@ (8004180 <LCD_F58_item+0x94>)
 800416e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004172:	f7fd fe39 	bl	8001de8 <LCD_ShowNum>
 8004176:	e7ef      	b.n	8004158 <LCD_F58_item+0x6c>
 8004178:	20000a9c 	.word	0x20000a9c
 800417c:	20000a9c 	.word	0x20000a9c
 8004180:	20000a9c 	.word	0x20000a9c

08004184 <LCD_F59_item>:

void LCD_F59_item(uint8_t item, int16_t value)
{
 8004184:	b510      	push	{r4, lr}
 8004186:	4604      	mov	r4, r0
    item = GET_MENU(item, F59_ITEM_MAX);
    write_com(0x83);
 8004188:	2083      	movs	r0, #131	@ 0x83
 800418a:	f7fd fd85 	bl	8001c98 <write_com>
    hzkdis(F59Item[item]);
 800418e:	4b20      	ldr	r3, [pc, #128]	@ (8004210 <LCD_F59_item+0x8c>)
 8004190:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004194:	f7fd fdb0 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8004198:	2093      	movs	r0, #147	@ 0x93
 800419a:	f7fd fd7d 	bl	8001c98 <write_com>
    if (strcmp(F59Value[item][0], "") != 0) {
 800419e:	01a3      	lsls	r3, r4, #6
 80041a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004214 <LCD_F59_item+0x90>)
 80041a2:	58d3      	ldr	r3, [r2, r3]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b33b      	cbz	r3, 80041f8 <LCD_F59_item+0x74>
        hzkdis(F59Value[item][g_F59[item]]);
 80041a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004218 <LCD_F59_item+0x94>)
 80041aa:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80041ae:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80041b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80041b6:	f7fd fd9f 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F59[item]);
    }

    item = GET_MENU(item + 1, F59_ITEM_MAX);
 80041ba:	3401      	adds	r4, #1
 80041bc:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80041be:	208b      	movs	r0, #139	@ 0x8b
 80041c0:	f7fd fd6a 	bl	8001c98 <write_com>
    hzkdis(F59Item[item]);
 80041c4:	4b12      	ldr	r3, [pc, #72]	@ (8004210 <LCD_F59_item+0x8c>)
 80041c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80041ca:	f7fd fd95 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 80041ce:	209b      	movs	r0, #155	@ 0x9b
 80041d0:	f7fd fd62 	bl	8001c98 <write_com>
    if (strcmp(F59Value[item][0], "") != 0) {
 80041d4:	01a3      	lsls	r3, r4, #6
 80041d6:	4a0f      	ldr	r2, [pc, #60]	@ (8004214 <LCD_F59_item+0x90>)
 80041d8:	58d3      	ldr	r3, [r2, r3]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	b193      	cbz	r3, 8004204 <LCD_F59_item+0x80>
        hzkdis(F59Value[item][g_F59[item]]);
 80041de:	4b0e      	ldr	r3, [pc, #56]	@ (8004218 <LCD_F59_item+0x94>)
 80041e0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80041e4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80041e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80041ec:	f7fd fd84 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F59[item]);
    }
    write_com(0x93);
 80041f0:	2093      	movs	r0, #147	@ 0x93
 80041f2:	f7fd fd51 	bl	8001c98 <write_com>
}
 80041f6:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F59[item]);
 80041f8:	4b07      	ldr	r3, [pc, #28]	@ (8004218 <LCD_F59_item+0x94>)
 80041fa:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80041fe:	f7fd fdf3 	bl	8001de8 <LCD_ShowNum>
 8004202:	e7da      	b.n	80041ba <LCD_F59_item+0x36>
        LCD_ShowNum(g_F59[item]);
 8004204:	4b04      	ldr	r3, [pc, #16]	@ (8004218 <LCD_F59_item+0x94>)
 8004206:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800420a:	f7fd fded 	bl	8001de8 <LCD_ShowNum>
 800420e:	e7ef      	b.n	80041f0 <LCD_F59_item+0x6c>
 8004210:	20000a9c 	.word	0x20000a9c
 8004214:	20000a9c 	.word	0x20000a9c
 8004218:	20000a9c 	.word	0x20000a9c

0800421c <LCD_F60_item>:

void LCD_F60_item(uint8_t item, int16_t value)
{
 800421c:	b510      	push	{r4, lr}
 800421e:	4604      	mov	r4, r0
    item = GET_MENU(item, F60_ITEM_MAX);
    write_com(0x83);
 8004220:	2083      	movs	r0, #131	@ 0x83
 8004222:	f7fd fd39 	bl	8001c98 <write_com>
    hzkdis(F60Item[item]);
 8004226:	4b20      	ldr	r3, [pc, #128]	@ (80042a8 <LCD_F60_item+0x8c>)
 8004228:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800422c:	f7fd fd64 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8004230:	2093      	movs	r0, #147	@ 0x93
 8004232:	f7fd fd31 	bl	8001c98 <write_com>
    if (strcmp(F60Value[item][0], "") != 0) {
 8004236:	01a3      	lsls	r3, r4, #6
 8004238:	4a1c      	ldr	r2, [pc, #112]	@ (80042ac <LCD_F60_item+0x90>)
 800423a:	58d3      	ldr	r3, [r2, r3]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	b33b      	cbz	r3, 8004290 <LCD_F60_item+0x74>
        hzkdis(F60Value[item][g_F60[item]]);
 8004240:	4b1b      	ldr	r3, [pc, #108]	@ (80042b0 <LCD_F60_item+0x94>)
 8004242:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004246:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800424a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800424e:	f7fd fd53 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F60[item]);
    }

    item = GET_MENU(item + 1, F60_ITEM_MAX);
 8004252:	3401      	adds	r4, #1
 8004254:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004256:	208b      	movs	r0, #139	@ 0x8b
 8004258:	f7fd fd1e 	bl	8001c98 <write_com>
    hzkdis(F60Item[item]);
 800425c:	4b12      	ldr	r3, [pc, #72]	@ (80042a8 <LCD_F60_item+0x8c>)
 800425e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004262:	f7fd fd49 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8004266:	209b      	movs	r0, #155	@ 0x9b
 8004268:	f7fd fd16 	bl	8001c98 <write_com>
    if (strcmp(F60Value[item][0], "") != 0) {
 800426c:	01a3      	lsls	r3, r4, #6
 800426e:	4a0f      	ldr	r2, [pc, #60]	@ (80042ac <LCD_F60_item+0x90>)
 8004270:	58d3      	ldr	r3, [r2, r3]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	b193      	cbz	r3, 800429c <LCD_F60_item+0x80>
        hzkdis(F60Value[item][g_F60[item]]);
 8004276:	4b0e      	ldr	r3, [pc, #56]	@ (80042b0 <LCD_F60_item+0x94>)
 8004278:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800427c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004280:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004284:	f7fd fd38 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F60[item]);
    }
    write_com(0x93);
 8004288:	2093      	movs	r0, #147	@ 0x93
 800428a:	f7fd fd05 	bl	8001c98 <write_com>
}
 800428e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F60[item]);
 8004290:	4b07      	ldr	r3, [pc, #28]	@ (80042b0 <LCD_F60_item+0x94>)
 8004292:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004296:	f7fd fda7 	bl	8001de8 <LCD_ShowNum>
 800429a:	e7da      	b.n	8004252 <LCD_F60_item+0x36>
        LCD_ShowNum(g_F60[item]);
 800429c:	4b04      	ldr	r3, [pc, #16]	@ (80042b0 <LCD_F60_item+0x94>)
 800429e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80042a2:	f7fd fda1 	bl	8001de8 <LCD_ShowNum>
 80042a6:	e7ef      	b.n	8004288 <LCD_F60_item+0x6c>
 80042a8:	20000a9c 	.word	0x20000a9c
 80042ac:	20000a9c 	.word	0x20000a9c
 80042b0:	20000a9c 	.word	0x20000a9c

080042b4 <LCD_F61_item>:

void LCD_F61_item(uint8_t item, int16_t value)
{
 80042b4:	b510      	push	{r4, lr}
 80042b6:	4604      	mov	r4, r0
    item = GET_MENU(item, F61_ITEM_MAX);
    write_com(0x83);
 80042b8:	2083      	movs	r0, #131	@ 0x83
 80042ba:	f7fd fced 	bl	8001c98 <write_com>
    hzkdis(F61Item[item]);
 80042be:	4b20      	ldr	r3, [pc, #128]	@ (8004340 <LCD_F61_item+0x8c>)
 80042c0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80042c4:	f7fd fd18 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 80042c8:	2093      	movs	r0, #147	@ 0x93
 80042ca:	f7fd fce5 	bl	8001c98 <write_com>
    if (strcmp(F61Value[item][0], "") != 0) {
 80042ce:	01a3      	lsls	r3, r4, #6
 80042d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004344 <LCD_F61_item+0x90>)
 80042d2:	58d3      	ldr	r3, [r2, r3]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	b33b      	cbz	r3, 8004328 <LCD_F61_item+0x74>
        hzkdis(F61Value[item][g_F61[item]]);
 80042d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004348 <LCD_F61_item+0x94>)
 80042da:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80042de:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80042e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80042e6:	f7fd fd07 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F61[item]);
    }

    item = GET_MENU(item + 1, F61_ITEM_MAX);
 80042ea:	3401      	adds	r4, #1
 80042ec:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80042ee:	208b      	movs	r0, #139	@ 0x8b
 80042f0:	f7fd fcd2 	bl	8001c98 <write_com>
    hzkdis(F61Item[item]);
 80042f4:	4b12      	ldr	r3, [pc, #72]	@ (8004340 <LCD_F61_item+0x8c>)
 80042f6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80042fa:	f7fd fcfd 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 80042fe:	209b      	movs	r0, #155	@ 0x9b
 8004300:	f7fd fcca 	bl	8001c98 <write_com>
    if (strcmp(F61Value[item][0], "") != 0) {
 8004304:	01a3      	lsls	r3, r4, #6
 8004306:	4a0f      	ldr	r2, [pc, #60]	@ (8004344 <LCD_F61_item+0x90>)
 8004308:	58d3      	ldr	r3, [r2, r3]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	b193      	cbz	r3, 8004334 <LCD_F61_item+0x80>
        hzkdis(F61Value[item][g_F61[item]]);
 800430e:	4b0e      	ldr	r3, [pc, #56]	@ (8004348 <LCD_F61_item+0x94>)
 8004310:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004314:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004318:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800431c:	f7fd fcec 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F61[item]);
    }
    write_com(0x93);
 8004320:	2093      	movs	r0, #147	@ 0x93
 8004322:	f7fd fcb9 	bl	8001c98 <write_com>
}
 8004326:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F61[item]);
 8004328:	4b07      	ldr	r3, [pc, #28]	@ (8004348 <LCD_F61_item+0x94>)
 800432a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800432e:	f7fd fd5b 	bl	8001de8 <LCD_ShowNum>
 8004332:	e7da      	b.n	80042ea <LCD_F61_item+0x36>
        LCD_ShowNum(g_F61[item]);
 8004334:	4b04      	ldr	r3, [pc, #16]	@ (8004348 <LCD_F61_item+0x94>)
 8004336:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800433a:	f7fd fd55 	bl	8001de8 <LCD_ShowNum>
 800433e:	e7ef      	b.n	8004320 <LCD_F61_item+0x6c>
 8004340:	20000a9c 	.word	0x20000a9c
 8004344:	20000a9c 	.word	0x20000a9c
 8004348:	20000a9c 	.word	0x20000a9c

0800434c <LCD_F62_item>:

void LCD_F62_item(uint8_t item, int16_t value)
{
 800434c:	b510      	push	{r4, lr}
 800434e:	4604      	mov	r4, r0
    item = GET_MENU(item, F62_ITEM_MAX);
    write_com(0x83);
 8004350:	2083      	movs	r0, #131	@ 0x83
 8004352:	f7fd fca1 	bl	8001c98 <write_com>
    hzkdis(F62Item[item]);
 8004356:	4b20      	ldr	r3, [pc, #128]	@ (80043d8 <LCD_F62_item+0x8c>)
 8004358:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800435c:	f7fd fccc 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8004360:	2093      	movs	r0, #147	@ 0x93
 8004362:	f7fd fc99 	bl	8001c98 <write_com>
    if (strcmp(F62Value[item][0], "") != 0) {
 8004366:	01a3      	lsls	r3, r4, #6
 8004368:	4a1c      	ldr	r2, [pc, #112]	@ (80043dc <LCD_F62_item+0x90>)
 800436a:	58d3      	ldr	r3, [r2, r3]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	b33b      	cbz	r3, 80043c0 <LCD_F62_item+0x74>
        hzkdis(F62Value[item][g_F62[item]]);
 8004370:	4b1b      	ldr	r3, [pc, #108]	@ (80043e0 <LCD_F62_item+0x94>)
 8004372:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004376:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800437a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800437e:	f7fd fcbb 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F62[item]);
    }

    item = GET_MENU(item + 1, F62_ITEM_MAX);
 8004382:	3401      	adds	r4, #1
 8004384:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004386:	208b      	movs	r0, #139	@ 0x8b
 8004388:	f7fd fc86 	bl	8001c98 <write_com>
    hzkdis(F62Item[item]);
 800438c:	4b12      	ldr	r3, [pc, #72]	@ (80043d8 <LCD_F62_item+0x8c>)
 800438e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004392:	f7fd fcb1 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8004396:	209b      	movs	r0, #155	@ 0x9b
 8004398:	f7fd fc7e 	bl	8001c98 <write_com>
    if (strcmp(F62Value[item][0], "") != 0) {
 800439c:	01a3      	lsls	r3, r4, #6
 800439e:	4a0f      	ldr	r2, [pc, #60]	@ (80043dc <LCD_F62_item+0x90>)
 80043a0:	58d3      	ldr	r3, [r2, r3]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	b193      	cbz	r3, 80043cc <LCD_F62_item+0x80>
        hzkdis(F62Value[item][g_F62[item]]);
 80043a6:	4b0e      	ldr	r3, [pc, #56]	@ (80043e0 <LCD_F62_item+0x94>)
 80043a8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80043ac:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80043b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80043b4:	f7fd fca0 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F62[item]);
    }
    write_com(0x93);
 80043b8:	2093      	movs	r0, #147	@ 0x93
 80043ba:	f7fd fc6d 	bl	8001c98 <write_com>
}
 80043be:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F62[item]);
 80043c0:	4b07      	ldr	r3, [pc, #28]	@ (80043e0 <LCD_F62_item+0x94>)
 80043c2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80043c6:	f7fd fd0f 	bl	8001de8 <LCD_ShowNum>
 80043ca:	e7da      	b.n	8004382 <LCD_F62_item+0x36>
        LCD_ShowNum(g_F62[item]);
 80043cc:	4b04      	ldr	r3, [pc, #16]	@ (80043e0 <LCD_F62_item+0x94>)
 80043ce:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80043d2:	f7fd fd09 	bl	8001de8 <LCD_ShowNum>
 80043d6:	e7ef      	b.n	80043b8 <LCD_F62_item+0x6c>
 80043d8:	20000a9c 	.word	0x20000a9c
 80043dc:	20000a9c 	.word	0x20000a9c
 80043e0:	20000a9c 	.word	0x20000a9c

080043e4 <LCD_F63_item>:

void LCD_F63_item(uint8_t item, int16_t value)
{
 80043e4:	b510      	push	{r4, lr}
 80043e6:	4604      	mov	r4, r0
    item = GET_MENU(item, F63_ITEM_MAX);
    write_com(0x83);
 80043e8:	2083      	movs	r0, #131	@ 0x83
 80043ea:	f7fd fc55 	bl	8001c98 <write_com>
    hzkdis(F63Item[item]);
 80043ee:	4b20      	ldr	r3, [pc, #128]	@ (8004470 <LCD_F63_item+0x8c>)
 80043f0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80043f4:	f7fd fc80 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 80043f8:	2093      	movs	r0, #147	@ 0x93
 80043fa:	f7fd fc4d 	bl	8001c98 <write_com>
    if (strcmp(F63Value[item][0], "") != 0) {
 80043fe:	01a3      	lsls	r3, r4, #6
 8004400:	4a1c      	ldr	r2, [pc, #112]	@ (8004474 <LCD_F63_item+0x90>)
 8004402:	58d3      	ldr	r3, [r2, r3]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	b33b      	cbz	r3, 8004458 <LCD_F63_item+0x74>
        hzkdis(F63Value[item][g_F63[item]]);
 8004408:	4b1b      	ldr	r3, [pc, #108]	@ (8004478 <LCD_F63_item+0x94>)
 800440a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800440e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004412:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004416:	f7fd fc6f 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F63[item]);
    }

    item = GET_MENU(item + 1, F63_ITEM_MAX);
 800441a:	3401      	adds	r4, #1
 800441c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800441e:	208b      	movs	r0, #139	@ 0x8b
 8004420:	f7fd fc3a 	bl	8001c98 <write_com>
    hzkdis(F63Item[item]);
 8004424:	4b12      	ldr	r3, [pc, #72]	@ (8004470 <LCD_F63_item+0x8c>)
 8004426:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800442a:	f7fd fc65 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 800442e:	209b      	movs	r0, #155	@ 0x9b
 8004430:	f7fd fc32 	bl	8001c98 <write_com>
    if (strcmp(F63Value[item][0], "") != 0) {
 8004434:	01a3      	lsls	r3, r4, #6
 8004436:	4a0f      	ldr	r2, [pc, #60]	@ (8004474 <LCD_F63_item+0x90>)
 8004438:	58d3      	ldr	r3, [r2, r3]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	b193      	cbz	r3, 8004464 <LCD_F63_item+0x80>
        hzkdis(F63Value[item][g_F63[item]]);
 800443e:	4b0e      	ldr	r3, [pc, #56]	@ (8004478 <LCD_F63_item+0x94>)
 8004440:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004444:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004448:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800444c:	f7fd fc54 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F63[item]);
    }
    write_com(0x93);
 8004450:	2093      	movs	r0, #147	@ 0x93
 8004452:	f7fd fc21 	bl	8001c98 <write_com>
}
 8004456:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F63[item]);
 8004458:	4b07      	ldr	r3, [pc, #28]	@ (8004478 <LCD_F63_item+0x94>)
 800445a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800445e:	f7fd fcc3 	bl	8001de8 <LCD_ShowNum>
 8004462:	e7da      	b.n	800441a <LCD_F63_item+0x36>
        LCD_ShowNum(g_F63[item]);
 8004464:	4b04      	ldr	r3, [pc, #16]	@ (8004478 <LCD_F63_item+0x94>)
 8004466:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800446a:	f7fd fcbd 	bl	8001de8 <LCD_ShowNum>
 800446e:	e7ef      	b.n	8004450 <LCD_F63_item+0x6c>
 8004470:	20000a9c 	.word	0x20000a9c
 8004474:	20000a9c 	.word	0x20000a9c
 8004478:	20000a9c 	.word	0x20000a9c

0800447c <LCD_F64_item>:

void LCD_F64_item(uint8_t item, int16_t value)
{
 800447c:	b510      	push	{r4, lr}
 800447e:	4604      	mov	r4, r0
    item = GET_MENU(item, F64_ITEM_MAX);
    write_com(0x83);
 8004480:	2083      	movs	r0, #131	@ 0x83
 8004482:	f7fd fc09 	bl	8001c98 <write_com>
    hzkdis(F64Item[item]);
 8004486:	4b20      	ldr	r3, [pc, #128]	@ (8004508 <LCD_F64_item+0x8c>)
 8004488:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800448c:	f7fd fc34 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8004490:	2093      	movs	r0, #147	@ 0x93
 8004492:	f7fd fc01 	bl	8001c98 <write_com>
    if (strcmp(F64Value[item][0], "") != 0) {
 8004496:	01a3      	lsls	r3, r4, #6
 8004498:	4a1c      	ldr	r2, [pc, #112]	@ (800450c <LCD_F64_item+0x90>)
 800449a:	58d3      	ldr	r3, [r2, r3]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	b33b      	cbz	r3, 80044f0 <LCD_F64_item+0x74>
        hzkdis(F64Value[item][g_F64[item]]);
 80044a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004510 <LCD_F64_item+0x94>)
 80044a2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80044a6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80044aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80044ae:	f7fd fc23 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F64[item]);
    }

    item = GET_MENU(item + 1, F64_ITEM_MAX);
 80044b2:	3401      	adds	r4, #1
 80044b4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80044b6:	208b      	movs	r0, #139	@ 0x8b
 80044b8:	f7fd fbee 	bl	8001c98 <write_com>
    hzkdis(F64Item[item]);
 80044bc:	4b12      	ldr	r3, [pc, #72]	@ (8004508 <LCD_F64_item+0x8c>)
 80044be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80044c2:	f7fd fc19 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 80044c6:	209b      	movs	r0, #155	@ 0x9b
 80044c8:	f7fd fbe6 	bl	8001c98 <write_com>
    if (strcmp(F64Value[item][0], "") != 0) {
 80044cc:	01a3      	lsls	r3, r4, #6
 80044ce:	4a0f      	ldr	r2, [pc, #60]	@ (800450c <LCD_F64_item+0x90>)
 80044d0:	58d3      	ldr	r3, [r2, r3]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	b193      	cbz	r3, 80044fc <LCD_F64_item+0x80>
        hzkdis(F64Value[item][g_F64[item]]);
 80044d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004510 <LCD_F64_item+0x94>)
 80044d8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80044dc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80044e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80044e4:	f7fd fc08 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F64[item]);
    }
    write_com(0x93);
 80044e8:	2093      	movs	r0, #147	@ 0x93
 80044ea:	f7fd fbd5 	bl	8001c98 <write_com>
}
 80044ee:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F64[item]);
 80044f0:	4b07      	ldr	r3, [pc, #28]	@ (8004510 <LCD_F64_item+0x94>)
 80044f2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80044f6:	f7fd fc77 	bl	8001de8 <LCD_ShowNum>
 80044fa:	e7da      	b.n	80044b2 <LCD_F64_item+0x36>
        LCD_ShowNum(g_F64[item]);
 80044fc:	4b04      	ldr	r3, [pc, #16]	@ (8004510 <LCD_F64_item+0x94>)
 80044fe:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004502:	f7fd fc71 	bl	8001de8 <LCD_ShowNum>
 8004506:	e7ef      	b.n	80044e8 <LCD_F64_item+0x6c>
 8004508:	20000a9c 	.word	0x20000a9c
 800450c:	20000a9c 	.word	0x20000a9c
 8004510:	20000a9c 	.word	0x20000a9c

08004514 <LCD_F65_item>:

void LCD_F65_item(uint8_t item, int16_t value)
{
 8004514:	b510      	push	{r4, lr}
 8004516:	4604      	mov	r4, r0
    item = GET_MENU(item, F65_ITEM_MAX);
    write_com(0x83);
 8004518:	2083      	movs	r0, #131	@ 0x83
 800451a:	f7fd fbbd 	bl	8001c98 <write_com>
    hzkdis(F65Item[item]);
 800451e:	4b20      	ldr	r3, [pc, #128]	@ (80045a0 <LCD_F65_item+0x8c>)
 8004520:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004524:	f7fd fbe8 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8004528:	2093      	movs	r0, #147	@ 0x93
 800452a:	f7fd fbb5 	bl	8001c98 <write_com>
    if (strcmp(F65Value[item][0], "") != 0) {
 800452e:	01a3      	lsls	r3, r4, #6
 8004530:	4a1c      	ldr	r2, [pc, #112]	@ (80045a4 <LCD_F65_item+0x90>)
 8004532:	58d3      	ldr	r3, [r2, r3]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	b33b      	cbz	r3, 8004588 <LCD_F65_item+0x74>
        hzkdis(F65Value[item][g_F65[item]]);
 8004538:	4b1b      	ldr	r3, [pc, #108]	@ (80045a8 <LCD_F65_item+0x94>)
 800453a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800453e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004542:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004546:	f7fd fbd7 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F65[item]);
    }

    item = GET_MENU(item + 1, F65_ITEM_MAX);
 800454a:	3401      	adds	r4, #1
 800454c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800454e:	208b      	movs	r0, #139	@ 0x8b
 8004550:	f7fd fba2 	bl	8001c98 <write_com>
    hzkdis(F65Item[item]);
 8004554:	4b12      	ldr	r3, [pc, #72]	@ (80045a0 <LCD_F65_item+0x8c>)
 8004556:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800455a:	f7fd fbcd 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 800455e:	209b      	movs	r0, #155	@ 0x9b
 8004560:	f7fd fb9a 	bl	8001c98 <write_com>
    if (strcmp(F65Value[item][0], "") != 0) {
 8004564:	01a3      	lsls	r3, r4, #6
 8004566:	4a0f      	ldr	r2, [pc, #60]	@ (80045a4 <LCD_F65_item+0x90>)
 8004568:	58d3      	ldr	r3, [r2, r3]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	b193      	cbz	r3, 8004594 <LCD_F65_item+0x80>
        hzkdis(F65Value[item][g_F65[item]]);
 800456e:	4b0e      	ldr	r3, [pc, #56]	@ (80045a8 <LCD_F65_item+0x94>)
 8004570:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004574:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004578:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800457c:	f7fd fbbc 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F65[item]);
    }
    write_com(0x93);
 8004580:	2093      	movs	r0, #147	@ 0x93
 8004582:	f7fd fb89 	bl	8001c98 <write_com>
}
 8004586:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F65[item]);
 8004588:	4b07      	ldr	r3, [pc, #28]	@ (80045a8 <LCD_F65_item+0x94>)
 800458a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800458e:	f7fd fc2b 	bl	8001de8 <LCD_ShowNum>
 8004592:	e7da      	b.n	800454a <LCD_F65_item+0x36>
        LCD_ShowNum(g_F65[item]);
 8004594:	4b04      	ldr	r3, [pc, #16]	@ (80045a8 <LCD_F65_item+0x94>)
 8004596:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800459a:	f7fd fc25 	bl	8001de8 <LCD_ShowNum>
 800459e:	e7ef      	b.n	8004580 <LCD_F65_item+0x6c>
 80045a0:	20000a9c 	.word	0x20000a9c
 80045a4:	20000a9c 	.word	0x20000a9c
 80045a8:	20000a9c 	.word	0x20000a9c

080045ac <LCD_F66_item>:

void LCD_F66_item(uint8_t item, int16_t value)
{
 80045ac:	b510      	push	{r4, lr}
 80045ae:	4604      	mov	r4, r0
    item = GET_MENU(item, F66_ITEM_MAX);
    write_com(0x83);
 80045b0:	2083      	movs	r0, #131	@ 0x83
 80045b2:	f7fd fb71 	bl	8001c98 <write_com>
    hzkdis(F66Item[item]);
 80045b6:	4b20      	ldr	r3, [pc, #128]	@ (8004638 <LCD_F66_item+0x8c>)
 80045b8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80045bc:	f7fd fb9c 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 80045c0:	2093      	movs	r0, #147	@ 0x93
 80045c2:	f7fd fb69 	bl	8001c98 <write_com>
    if (strcmp(F66Value[item][0], "") != 0) {
 80045c6:	01a3      	lsls	r3, r4, #6
 80045c8:	4a1c      	ldr	r2, [pc, #112]	@ (800463c <LCD_F66_item+0x90>)
 80045ca:	58d3      	ldr	r3, [r2, r3]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	b33b      	cbz	r3, 8004620 <LCD_F66_item+0x74>
        hzkdis(F66Value[item][g_F66[item]]);
 80045d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004640 <LCD_F66_item+0x94>)
 80045d2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80045d6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80045da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80045de:	f7fd fb8b 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F66[item]);
    }

    item = GET_MENU(item + 1, F66_ITEM_MAX);
 80045e2:	3401      	adds	r4, #1
 80045e4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80045e6:	208b      	movs	r0, #139	@ 0x8b
 80045e8:	f7fd fb56 	bl	8001c98 <write_com>
    hzkdis(F66Item[item]);
 80045ec:	4b12      	ldr	r3, [pc, #72]	@ (8004638 <LCD_F66_item+0x8c>)
 80045ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80045f2:	f7fd fb81 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 80045f6:	209b      	movs	r0, #155	@ 0x9b
 80045f8:	f7fd fb4e 	bl	8001c98 <write_com>
    if (strcmp(F66Value[item][0], "") != 0) {
 80045fc:	01a3      	lsls	r3, r4, #6
 80045fe:	4a0f      	ldr	r2, [pc, #60]	@ (800463c <LCD_F66_item+0x90>)
 8004600:	58d3      	ldr	r3, [r2, r3]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	b193      	cbz	r3, 800462c <LCD_F66_item+0x80>
        hzkdis(F66Value[item][g_F66[item]]);
 8004606:	4b0e      	ldr	r3, [pc, #56]	@ (8004640 <LCD_F66_item+0x94>)
 8004608:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800460c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004610:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004614:	f7fd fb70 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F66[item]);
    }
    write_com(0x93);
 8004618:	2093      	movs	r0, #147	@ 0x93
 800461a:	f7fd fb3d 	bl	8001c98 <write_com>
}
 800461e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F66[item]);
 8004620:	4b07      	ldr	r3, [pc, #28]	@ (8004640 <LCD_F66_item+0x94>)
 8004622:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004626:	f7fd fbdf 	bl	8001de8 <LCD_ShowNum>
 800462a:	e7da      	b.n	80045e2 <LCD_F66_item+0x36>
        LCD_ShowNum(g_F66[item]);
 800462c:	4b04      	ldr	r3, [pc, #16]	@ (8004640 <LCD_F66_item+0x94>)
 800462e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004632:	f7fd fbd9 	bl	8001de8 <LCD_ShowNum>
 8004636:	e7ef      	b.n	8004618 <LCD_F66_item+0x6c>
 8004638:	20000a9c 	.word	0x20000a9c
 800463c:	20000a9c 	.word	0x20000a9c
 8004640:	20000a9c 	.word	0x20000a9c

08004644 <LCD_F67_item>:

void LCD_F67_item(uint8_t item, int16_t value)
{
 8004644:	b510      	push	{r4, lr}
 8004646:	4604      	mov	r4, r0
    item = GET_MENU(item, F67_ITEM_MAX);
    write_com(0x83);
 8004648:	2083      	movs	r0, #131	@ 0x83
 800464a:	f7fd fb25 	bl	8001c98 <write_com>
    hzkdis(F67Item[item]);
 800464e:	4b20      	ldr	r3, [pc, #128]	@ (80046d0 <LCD_F67_item+0x8c>)
 8004650:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004654:	f7fd fb50 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8004658:	2093      	movs	r0, #147	@ 0x93
 800465a:	f7fd fb1d 	bl	8001c98 <write_com>
    if (strcmp(F67Value[item][0], "") != 0) {
 800465e:	01a3      	lsls	r3, r4, #6
 8004660:	4a1c      	ldr	r2, [pc, #112]	@ (80046d4 <LCD_F67_item+0x90>)
 8004662:	58d3      	ldr	r3, [r2, r3]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	b33b      	cbz	r3, 80046b8 <LCD_F67_item+0x74>
        hzkdis(F67Value[item][g_F67[item]]);
 8004668:	4b1b      	ldr	r3, [pc, #108]	@ (80046d8 <LCD_F67_item+0x94>)
 800466a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800466e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004672:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004676:	f7fd fb3f 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F67[item]);
    }

    item = GET_MENU(item + 1, F67_ITEM_MAX);
 800467a:	3401      	adds	r4, #1
 800467c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800467e:	208b      	movs	r0, #139	@ 0x8b
 8004680:	f7fd fb0a 	bl	8001c98 <write_com>
    hzkdis(F67Item[item]);
 8004684:	4b12      	ldr	r3, [pc, #72]	@ (80046d0 <LCD_F67_item+0x8c>)
 8004686:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800468a:	f7fd fb35 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 800468e:	209b      	movs	r0, #155	@ 0x9b
 8004690:	f7fd fb02 	bl	8001c98 <write_com>
    if (strcmp(F67Value[item][0], "") != 0) {
 8004694:	01a3      	lsls	r3, r4, #6
 8004696:	4a0f      	ldr	r2, [pc, #60]	@ (80046d4 <LCD_F67_item+0x90>)
 8004698:	58d3      	ldr	r3, [r2, r3]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	b193      	cbz	r3, 80046c4 <LCD_F67_item+0x80>
        hzkdis(F67Value[item][g_F67[item]]);
 800469e:	4b0e      	ldr	r3, [pc, #56]	@ (80046d8 <LCD_F67_item+0x94>)
 80046a0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80046a4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80046a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80046ac:	f7fd fb24 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F67[item]);
    }
    write_com(0x93);
 80046b0:	2093      	movs	r0, #147	@ 0x93
 80046b2:	f7fd faf1 	bl	8001c98 <write_com>
}
 80046b6:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F67[item]);
 80046b8:	4b07      	ldr	r3, [pc, #28]	@ (80046d8 <LCD_F67_item+0x94>)
 80046ba:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80046be:	f7fd fb93 	bl	8001de8 <LCD_ShowNum>
 80046c2:	e7da      	b.n	800467a <LCD_F67_item+0x36>
        LCD_ShowNum(g_F67[item]);
 80046c4:	4b04      	ldr	r3, [pc, #16]	@ (80046d8 <LCD_F67_item+0x94>)
 80046c6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80046ca:	f7fd fb8d 	bl	8001de8 <LCD_ShowNum>
 80046ce:	e7ef      	b.n	80046b0 <LCD_F67_item+0x6c>
 80046d0:	20000a9c 	.word	0x20000a9c
 80046d4:	20000a9c 	.word	0x20000a9c
 80046d8:	20000a9c 	.word	0x20000a9c

080046dc <LCD_F68_item>:

void LCD_F68_item(uint8_t item, int16_t value)
{
 80046dc:	b510      	push	{r4, lr}
 80046de:	4604      	mov	r4, r0
    item = GET_MENU(item, F68_ITEM_MAX);
    write_com(0x83);
 80046e0:	2083      	movs	r0, #131	@ 0x83
 80046e2:	f7fd fad9 	bl	8001c98 <write_com>
    hzkdis(F68Item[item]);
 80046e6:	4b20      	ldr	r3, [pc, #128]	@ (8004768 <LCD_F68_item+0x8c>)
 80046e8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80046ec:	f7fd fb04 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 80046f0:	2093      	movs	r0, #147	@ 0x93
 80046f2:	f7fd fad1 	bl	8001c98 <write_com>
    if (strcmp(F68Value[item][0], "") != 0) {
 80046f6:	01a3      	lsls	r3, r4, #6
 80046f8:	4a1c      	ldr	r2, [pc, #112]	@ (800476c <LCD_F68_item+0x90>)
 80046fa:	58d3      	ldr	r3, [r2, r3]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	b33b      	cbz	r3, 8004750 <LCD_F68_item+0x74>
        hzkdis(F68Value[item][g_F68[item]]);
 8004700:	4b1b      	ldr	r3, [pc, #108]	@ (8004770 <LCD_F68_item+0x94>)
 8004702:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004706:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800470a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800470e:	f7fd faf3 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F68[item]);
    }

    item = GET_MENU(item + 1, F68_ITEM_MAX);
 8004712:	3401      	adds	r4, #1
 8004714:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004716:	208b      	movs	r0, #139	@ 0x8b
 8004718:	f7fd fabe 	bl	8001c98 <write_com>
    hzkdis(F68Item[item]);
 800471c:	4b12      	ldr	r3, [pc, #72]	@ (8004768 <LCD_F68_item+0x8c>)
 800471e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004722:	f7fd fae9 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8004726:	209b      	movs	r0, #155	@ 0x9b
 8004728:	f7fd fab6 	bl	8001c98 <write_com>
    if (strcmp(F68Value[item][0], "") != 0) {
 800472c:	01a3      	lsls	r3, r4, #6
 800472e:	4a0f      	ldr	r2, [pc, #60]	@ (800476c <LCD_F68_item+0x90>)
 8004730:	58d3      	ldr	r3, [r2, r3]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	b193      	cbz	r3, 800475c <LCD_F68_item+0x80>
        hzkdis(F68Value[item][g_F68[item]]);
 8004736:	4b0e      	ldr	r3, [pc, #56]	@ (8004770 <LCD_F68_item+0x94>)
 8004738:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800473c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004740:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004744:	f7fd fad8 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F68[item]);
    }
    write_com(0x93);
 8004748:	2093      	movs	r0, #147	@ 0x93
 800474a:	f7fd faa5 	bl	8001c98 <write_com>
}
 800474e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F68[item]);
 8004750:	4b07      	ldr	r3, [pc, #28]	@ (8004770 <LCD_F68_item+0x94>)
 8004752:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004756:	f7fd fb47 	bl	8001de8 <LCD_ShowNum>
 800475a:	e7da      	b.n	8004712 <LCD_F68_item+0x36>
        LCD_ShowNum(g_F68[item]);
 800475c:	4b04      	ldr	r3, [pc, #16]	@ (8004770 <LCD_F68_item+0x94>)
 800475e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004762:	f7fd fb41 	bl	8001de8 <LCD_ShowNum>
 8004766:	e7ef      	b.n	8004748 <LCD_F68_item+0x6c>
 8004768:	20000a9c 	.word	0x20000a9c
 800476c:	20000a9c 	.word	0x20000a9c
 8004770:	20000a9c 	.word	0x20000a9c

08004774 <LCD_F69_item>:

void LCD_F69_item(uint8_t item, int16_t value)
{
 8004774:	b510      	push	{r4, lr}
 8004776:	4604      	mov	r4, r0
    item = GET_MENU(item, F69_ITEM_MAX);
    write_com(0x83);
 8004778:	2083      	movs	r0, #131	@ 0x83
 800477a:	f7fd fa8d 	bl	8001c98 <write_com>
    hzkdis(F69Item[item]);
 800477e:	4b20      	ldr	r3, [pc, #128]	@ (8004800 <LCD_F69_item+0x8c>)
 8004780:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004784:	f7fd fab8 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8004788:	2093      	movs	r0, #147	@ 0x93
 800478a:	f7fd fa85 	bl	8001c98 <write_com>
    if (strcmp(F69Value[item][0], "") != 0) {
 800478e:	01a3      	lsls	r3, r4, #6
 8004790:	4a1c      	ldr	r2, [pc, #112]	@ (8004804 <LCD_F69_item+0x90>)
 8004792:	58d3      	ldr	r3, [r2, r3]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	b33b      	cbz	r3, 80047e8 <LCD_F69_item+0x74>
        hzkdis(F69Value[item][g_F69[item]]);
 8004798:	4b1b      	ldr	r3, [pc, #108]	@ (8004808 <LCD_F69_item+0x94>)
 800479a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800479e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80047a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80047a6:	f7fd faa7 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F69[item]);
    }

    item = GET_MENU(item + 1, F69_ITEM_MAX);
 80047aa:	3401      	adds	r4, #1
 80047ac:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80047ae:	208b      	movs	r0, #139	@ 0x8b
 80047b0:	f7fd fa72 	bl	8001c98 <write_com>
    hzkdis(F69Item[item]);
 80047b4:	4b12      	ldr	r3, [pc, #72]	@ (8004800 <LCD_F69_item+0x8c>)
 80047b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80047ba:	f7fd fa9d 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 80047be:	209b      	movs	r0, #155	@ 0x9b
 80047c0:	f7fd fa6a 	bl	8001c98 <write_com>
    if (strcmp(F69Value[item][0], "") != 0) {
 80047c4:	01a3      	lsls	r3, r4, #6
 80047c6:	4a0f      	ldr	r2, [pc, #60]	@ (8004804 <LCD_F69_item+0x90>)
 80047c8:	58d3      	ldr	r3, [r2, r3]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	b193      	cbz	r3, 80047f4 <LCD_F69_item+0x80>
        hzkdis(F69Value[item][g_F69[item]]);
 80047ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004808 <LCD_F69_item+0x94>)
 80047d0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80047d4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80047d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80047dc:	f7fd fa8c 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F69[item]);
    }
    write_com(0x93);
 80047e0:	2093      	movs	r0, #147	@ 0x93
 80047e2:	f7fd fa59 	bl	8001c98 <write_com>
}
 80047e6:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F69[item]);
 80047e8:	4b07      	ldr	r3, [pc, #28]	@ (8004808 <LCD_F69_item+0x94>)
 80047ea:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80047ee:	f7fd fafb 	bl	8001de8 <LCD_ShowNum>
 80047f2:	e7da      	b.n	80047aa <LCD_F69_item+0x36>
        LCD_ShowNum(g_F69[item]);
 80047f4:	4b04      	ldr	r3, [pc, #16]	@ (8004808 <LCD_F69_item+0x94>)
 80047f6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80047fa:	f7fd faf5 	bl	8001de8 <LCD_ShowNum>
 80047fe:	e7ef      	b.n	80047e0 <LCD_F69_item+0x6c>
 8004800:	20000a9c 	.word	0x20000a9c
 8004804:	20000a9c 	.word	0x20000a9c
 8004808:	20000a9c 	.word	0x20000a9c

0800480c <LCD_F70_item>:

void LCD_F70_item(uint8_t item, int16_t value)
{
 800480c:	b510      	push	{r4, lr}
 800480e:	4604      	mov	r4, r0
    item = GET_MENU(item, F70_ITEM_MAX);
    write_com(0x83);
 8004810:	2083      	movs	r0, #131	@ 0x83
 8004812:	f7fd fa41 	bl	8001c98 <write_com>
    hzkdis(F70Item[item]);
 8004816:	4b20      	ldr	r3, [pc, #128]	@ (8004898 <LCD_F70_item+0x8c>)
 8004818:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800481c:	f7fd fa6c 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8004820:	2093      	movs	r0, #147	@ 0x93
 8004822:	f7fd fa39 	bl	8001c98 <write_com>
    if (strcmp(F70Value[item][0], "") != 0) {
 8004826:	01a3      	lsls	r3, r4, #6
 8004828:	4a1c      	ldr	r2, [pc, #112]	@ (800489c <LCD_F70_item+0x90>)
 800482a:	58d3      	ldr	r3, [r2, r3]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	b33b      	cbz	r3, 8004880 <LCD_F70_item+0x74>
        hzkdis(F70Value[item][g_F70[item]]);
 8004830:	4b1b      	ldr	r3, [pc, #108]	@ (80048a0 <LCD_F70_item+0x94>)
 8004832:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004836:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800483a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800483e:	f7fd fa5b 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F70[item]);
    }

    item = GET_MENU(item + 1, F70_ITEM_MAX);
 8004842:	3401      	adds	r4, #1
 8004844:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004846:	208b      	movs	r0, #139	@ 0x8b
 8004848:	f7fd fa26 	bl	8001c98 <write_com>
    hzkdis(F70Item[item]);
 800484c:	4b12      	ldr	r3, [pc, #72]	@ (8004898 <LCD_F70_item+0x8c>)
 800484e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004852:	f7fd fa51 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8004856:	209b      	movs	r0, #155	@ 0x9b
 8004858:	f7fd fa1e 	bl	8001c98 <write_com>
    if (strcmp(F70Value[item][0], "") != 0) {
 800485c:	01a3      	lsls	r3, r4, #6
 800485e:	4a0f      	ldr	r2, [pc, #60]	@ (800489c <LCD_F70_item+0x90>)
 8004860:	58d3      	ldr	r3, [r2, r3]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	b193      	cbz	r3, 800488c <LCD_F70_item+0x80>
        hzkdis(F70Value[item][g_F70[item]]);
 8004866:	4b0e      	ldr	r3, [pc, #56]	@ (80048a0 <LCD_F70_item+0x94>)
 8004868:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800486c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004870:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004874:	f7fd fa40 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F70[item]);
    }
    write_com(0x93);
 8004878:	2093      	movs	r0, #147	@ 0x93
 800487a:	f7fd fa0d 	bl	8001c98 <write_com>
}
 800487e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F70[item]);
 8004880:	4b07      	ldr	r3, [pc, #28]	@ (80048a0 <LCD_F70_item+0x94>)
 8004882:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004886:	f7fd faaf 	bl	8001de8 <LCD_ShowNum>
 800488a:	e7da      	b.n	8004842 <LCD_F70_item+0x36>
        LCD_ShowNum(g_F70[item]);
 800488c:	4b04      	ldr	r3, [pc, #16]	@ (80048a0 <LCD_F70_item+0x94>)
 800488e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004892:	f7fd faa9 	bl	8001de8 <LCD_ShowNum>
 8004896:	e7ef      	b.n	8004878 <LCD_F70_item+0x6c>
 8004898:	20000a9c 	.word	0x20000a9c
 800489c:	20000a9c 	.word	0x20000a9c
 80048a0:	20000a9c 	.word	0x20000a9c

080048a4 <LCD_F71_item>:

void LCD_F71_item(uint8_t item, int16_t value)
{
 80048a4:	b510      	push	{r4, lr}
 80048a6:	4604      	mov	r4, r0
    item = GET_MENU(item, F71_ITEM_MAX);
    write_com(0x83);
 80048a8:	2083      	movs	r0, #131	@ 0x83
 80048aa:	f7fd f9f5 	bl	8001c98 <write_com>
    hzkdis(F71Item[item]);
 80048ae:	4b20      	ldr	r3, [pc, #128]	@ (8004930 <LCD_F71_item+0x8c>)
 80048b0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80048b4:	f7fd fa20 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 80048b8:	2093      	movs	r0, #147	@ 0x93
 80048ba:	f7fd f9ed 	bl	8001c98 <write_com>
    if (strcmp(F71Value[item][0], "") != 0) {
 80048be:	01a3      	lsls	r3, r4, #6
 80048c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004934 <LCD_F71_item+0x90>)
 80048c2:	58d3      	ldr	r3, [r2, r3]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	b33b      	cbz	r3, 8004918 <LCD_F71_item+0x74>
        hzkdis(F71Value[item][g_F71[item]]);
 80048c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004938 <LCD_F71_item+0x94>)
 80048ca:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80048ce:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80048d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80048d6:	f7fd fa0f 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F71[item]);
    }

    item = GET_MENU(item + 1, F71_ITEM_MAX);
 80048da:	3401      	adds	r4, #1
 80048dc:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 80048de:	208b      	movs	r0, #139	@ 0x8b
 80048e0:	f7fd f9da 	bl	8001c98 <write_com>
    hzkdis(F71Item[item]);
 80048e4:	4b12      	ldr	r3, [pc, #72]	@ (8004930 <LCD_F71_item+0x8c>)
 80048e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80048ea:	f7fd fa05 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 80048ee:	209b      	movs	r0, #155	@ 0x9b
 80048f0:	f7fd f9d2 	bl	8001c98 <write_com>
    if (strcmp(F71Value[item][0], "") != 0) {
 80048f4:	01a3      	lsls	r3, r4, #6
 80048f6:	4a0f      	ldr	r2, [pc, #60]	@ (8004934 <LCD_F71_item+0x90>)
 80048f8:	58d3      	ldr	r3, [r2, r3]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	b193      	cbz	r3, 8004924 <LCD_F71_item+0x80>
        hzkdis(F71Value[item][g_F71[item]]);
 80048fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004938 <LCD_F71_item+0x94>)
 8004900:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004904:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004908:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800490c:	f7fd f9f4 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F71[item]);
    }
    write_com(0x93);
 8004910:	2093      	movs	r0, #147	@ 0x93
 8004912:	f7fd f9c1 	bl	8001c98 <write_com>
}
 8004916:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F71[item]);
 8004918:	4b07      	ldr	r3, [pc, #28]	@ (8004938 <LCD_F71_item+0x94>)
 800491a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800491e:	f7fd fa63 	bl	8001de8 <LCD_ShowNum>
 8004922:	e7da      	b.n	80048da <LCD_F71_item+0x36>
        LCD_ShowNum(g_F71[item]);
 8004924:	4b04      	ldr	r3, [pc, #16]	@ (8004938 <LCD_F71_item+0x94>)
 8004926:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800492a:	f7fd fa5d 	bl	8001de8 <LCD_ShowNum>
 800492e:	e7ef      	b.n	8004910 <LCD_F71_item+0x6c>
 8004930:	20000a9c 	.word	0x20000a9c
 8004934:	20000a9c 	.word	0x20000a9c
 8004938:	20000a9c 	.word	0x20000a9c

0800493c <LCD_F72_item>:

void LCD_F72_item(uint8_t item, int16_t value)
{
 800493c:	b510      	push	{r4, lr}
 800493e:	4604      	mov	r4, r0
    item = GET_MENU(item, F72_ITEM_MAX);
    write_com(0x83);
 8004940:	2083      	movs	r0, #131	@ 0x83
 8004942:	f7fd f9a9 	bl	8001c98 <write_com>
    hzkdis(F72Item[item]);
 8004946:	4b20      	ldr	r3, [pc, #128]	@ (80049c8 <LCD_F72_item+0x8c>)
 8004948:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800494c:	f7fd f9d4 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8004950:	2093      	movs	r0, #147	@ 0x93
 8004952:	f7fd f9a1 	bl	8001c98 <write_com>
    if (strcmp(F72Value[item][0], "") != 0) {
 8004956:	01a3      	lsls	r3, r4, #6
 8004958:	4a1c      	ldr	r2, [pc, #112]	@ (80049cc <LCD_F72_item+0x90>)
 800495a:	58d3      	ldr	r3, [r2, r3]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	b33b      	cbz	r3, 80049b0 <LCD_F72_item+0x74>
        hzkdis(F72Value[item][g_F72[item]]);
 8004960:	4b1b      	ldr	r3, [pc, #108]	@ (80049d0 <LCD_F72_item+0x94>)
 8004962:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004966:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800496a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800496e:	f7fd f9c3 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F72[item]);
    }

    item = GET_MENU(item + 1, F72_ITEM_MAX);
 8004972:	3401      	adds	r4, #1
 8004974:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004976:	208b      	movs	r0, #139	@ 0x8b
 8004978:	f7fd f98e 	bl	8001c98 <write_com>
    hzkdis(F72Item[item]);
 800497c:	4b12      	ldr	r3, [pc, #72]	@ (80049c8 <LCD_F72_item+0x8c>)
 800497e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004982:	f7fd f9b9 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8004986:	209b      	movs	r0, #155	@ 0x9b
 8004988:	f7fd f986 	bl	8001c98 <write_com>
    if (strcmp(F72Value[item][0], "") != 0) {
 800498c:	01a3      	lsls	r3, r4, #6
 800498e:	4a0f      	ldr	r2, [pc, #60]	@ (80049cc <LCD_F72_item+0x90>)
 8004990:	58d3      	ldr	r3, [r2, r3]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	b193      	cbz	r3, 80049bc <LCD_F72_item+0x80>
        hzkdis(F72Value[item][g_F72[item]]);
 8004996:	4b0e      	ldr	r3, [pc, #56]	@ (80049d0 <LCD_F72_item+0x94>)
 8004998:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800499c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80049a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80049a4:	f7fd f9a8 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F72[item]);
    }
    write_com(0x93);
 80049a8:	2093      	movs	r0, #147	@ 0x93
 80049aa:	f7fd f975 	bl	8001c98 <write_com>
}
 80049ae:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F72[item]);
 80049b0:	4b07      	ldr	r3, [pc, #28]	@ (80049d0 <LCD_F72_item+0x94>)
 80049b2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80049b6:	f7fd fa17 	bl	8001de8 <LCD_ShowNum>
 80049ba:	e7da      	b.n	8004972 <LCD_F72_item+0x36>
        LCD_ShowNum(g_F72[item]);
 80049bc:	4b04      	ldr	r3, [pc, #16]	@ (80049d0 <LCD_F72_item+0x94>)
 80049be:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80049c2:	f7fd fa11 	bl	8001de8 <LCD_ShowNum>
 80049c6:	e7ef      	b.n	80049a8 <LCD_F72_item+0x6c>
 80049c8:	20000a9c 	.word	0x20000a9c
 80049cc:	20000a9c 	.word	0x20000a9c
 80049d0:	20000a9c 	.word	0x20000a9c

080049d4 <LCD_F73_item>:

void LCD_F73_item(uint8_t item, int16_t value)
{
 80049d4:	b510      	push	{r4, lr}
 80049d6:	4604      	mov	r4, r0
    item = GET_MENU(item, F73_ITEM_MAX);
    write_com(0x83);
 80049d8:	2083      	movs	r0, #131	@ 0x83
 80049da:	f7fd f95d 	bl	8001c98 <write_com>
    hzkdis(F73Item[item]);
 80049de:	4b20      	ldr	r3, [pc, #128]	@ (8004a60 <LCD_F73_item+0x8c>)
 80049e0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80049e4:	f7fd f988 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 80049e8:	2093      	movs	r0, #147	@ 0x93
 80049ea:	f7fd f955 	bl	8001c98 <write_com>
    if (strcmp(F73Value[item][0], "") != 0) {
 80049ee:	01a3      	lsls	r3, r4, #6
 80049f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004a64 <LCD_F73_item+0x90>)
 80049f2:	58d3      	ldr	r3, [r2, r3]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	b33b      	cbz	r3, 8004a48 <LCD_F73_item+0x74>
        hzkdis(F73Value[item][g_F73[item]]);
 80049f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a68 <LCD_F73_item+0x94>)
 80049fa:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80049fe:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004a02:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a06:	f7fd f977 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F73[item]);
    }

    item = GET_MENU(item + 1, F73_ITEM_MAX);
 8004a0a:	3401      	adds	r4, #1
 8004a0c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004a0e:	208b      	movs	r0, #139	@ 0x8b
 8004a10:	f7fd f942 	bl	8001c98 <write_com>
    hzkdis(F73Item[item]);
 8004a14:	4b12      	ldr	r3, [pc, #72]	@ (8004a60 <LCD_F73_item+0x8c>)
 8004a16:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004a1a:	f7fd f96d 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8004a1e:	209b      	movs	r0, #155	@ 0x9b
 8004a20:	f7fd f93a 	bl	8001c98 <write_com>
    if (strcmp(F73Value[item][0], "") != 0) {
 8004a24:	01a3      	lsls	r3, r4, #6
 8004a26:	4a0f      	ldr	r2, [pc, #60]	@ (8004a64 <LCD_F73_item+0x90>)
 8004a28:	58d3      	ldr	r3, [r2, r3]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	b193      	cbz	r3, 8004a54 <LCD_F73_item+0x80>
        hzkdis(F73Value[item][g_F73[item]]);
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a68 <LCD_F73_item+0x94>)
 8004a30:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004a34:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004a38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a3c:	f7fd f95c 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F73[item]);
    }
    write_com(0x93);
 8004a40:	2093      	movs	r0, #147	@ 0x93
 8004a42:	f7fd f929 	bl	8001c98 <write_com>
}
 8004a46:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F73[item]);
 8004a48:	4b07      	ldr	r3, [pc, #28]	@ (8004a68 <LCD_F73_item+0x94>)
 8004a4a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004a4e:	f7fd f9cb 	bl	8001de8 <LCD_ShowNum>
 8004a52:	e7da      	b.n	8004a0a <LCD_F73_item+0x36>
        LCD_ShowNum(g_F73[item]);
 8004a54:	4b04      	ldr	r3, [pc, #16]	@ (8004a68 <LCD_F73_item+0x94>)
 8004a56:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004a5a:	f7fd f9c5 	bl	8001de8 <LCD_ShowNum>
 8004a5e:	e7ef      	b.n	8004a40 <LCD_F73_item+0x6c>
 8004a60:	20000a9c 	.word	0x20000a9c
 8004a64:	20000a9c 	.word	0x20000a9c
 8004a68:	20000a9c 	.word	0x20000a9c

08004a6c <LCD_F74_item>:

void LCD_F74_item(uint8_t item, int16_t value)
{
 8004a6c:	b510      	push	{r4, lr}
 8004a6e:	4604      	mov	r4, r0
    item = GET_MENU(item, F74_ITEM_MAX);
    write_com(0x83);
 8004a70:	2083      	movs	r0, #131	@ 0x83
 8004a72:	f7fd f911 	bl	8001c98 <write_com>
    hzkdis(F74Item[item]);
 8004a76:	4b20      	ldr	r3, [pc, #128]	@ (8004af8 <LCD_F74_item+0x8c>)
 8004a78:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004a7c:	f7fd f93c 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8004a80:	2093      	movs	r0, #147	@ 0x93
 8004a82:	f7fd f909 	bl	8001c98 <write_com>
    if (strcmp(F74Value[item][0], "") != 0) {
 8004a86:	01a3      	lsls	r3, r4, #6
 8004a88:	4a1c      	ldr	r2, [pc, #112]	@ (8004afc <LCD_F74_item+0x90>)
 8004a8a:	58d3      	ldr	r3, [r2, r3]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	b33b      	cbz	r3, 8004ae0 <LCD_F74_item+0x74>
        hzkdis(F74Value[item][g_F74[item]]);
 8004a90:	4b1b      	ldr	r3, [pc, #108]	@ (8004b00 <LCD_F74_item+0x94>)
 8004a92:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004a96:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004a9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a9e:	f7fd f92b 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F74[item]);
    }

    item = GET_MENU(item + 1, F74_ITEM_MAX);
 8004aa2:	3401      	adds	r4, #1
 8004aa4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004aa6:	208b      	movs	r0, #139	@ 0x8b
 8004aa8:	f7fd f8f6 	bl	8001c98 <write_com>
    hzkdis(F74Item[item]);
 8004aac:	4b12      	ldr	r3, [pc, #72]	@ (8004af8 <LCD_F74_item+0x8c>)
 8004aae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004ab2:	f7fd f921 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8004ab6:	209b      	movs	r0, #155	@ 0x9b
 8004ab8:	f7fd f8ee 	bl	8001c98 <write_com>
    if (strcmp(F74Value[item][0], "") != 0) {
 8004abc:	01a3      	lsls	r3, r4, #6
 8004abe:	4a0f      	ldr	r2, [pc, #60]	@ (8004afc <LCD_F74_item+0x90>)
 8004ac0:	58d3      	ldr	r3, [r2, r3]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	b193      	cbz	r3, 8004aec <LCD_F74_item+0x80>
        hzkdis(F74Value[item][g_F74[item]]);
 8004ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8004b00 <LCD_F74_item+0x94>)
 8004ac8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004acc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004ad0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004ad4:	f7fd f910 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F74[item]);
    }
    write_com(0x93);
 8004ad8:	2093      	movs	r0, #147	@ 0x93
 8004ada:	f7fd f8dd 	bl	8001c98 <write_com>
}
 8004ade:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F74[item]);
 8004ae0:	4b07      	ldr	r3, [pc, #28]	@ (8004b00 <LCD_F74_item+0x94>)
 8004ae2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004ae6:	f7fd f97f 	bl	8001de8 <LCD_ShowNum>
 8004aea:	e7da      	b.n	8004aa2 <LCD_F74_item+0x36>
        LCD_ShowNum(g_F74[item]);
 8004aec:	4b04      	ldr	r3, [pc, #16]	@ (8004b00 <LCD_F74_item+0x94>)
 8004aee:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004af2:	f7fd f979 	bl	8001de8 <LCD_ShowNum>
 8004af6:	e7ef      	b.n	8004ad8 <LCD_F74_item+0x6c>
 8004af8:	20000a9c 	.word	0x20000a9c
 8004afc:	20000a9c 	.word	0x20000a9c
 8004b00:	20000a9c 	.word	0x20000a9c

08004b04 <LCD_F75_item>:

void LCD_F75_item(uint8_t item, int16_t value)
{
 8004b04:	b510      	push	{r4, lr}
 8004b06:	4604      	mov	r4, r0
    item = GET_MENU(item, F75_ITEM_MAX);
    write_com(0x83);
 8004b08:	2083      	movs	r0, #131	@ 0x83
 8004b0a:	f7fd f8c5 	bl	8001c98 <write_com>
    hzkdis(F75Item[item]);
 8004b0e:	4b20      	ldr	r3, [pc, #128]	@ (8004b90 <LCD_F75_item+0x8c>)
 8004b10:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004b14:	f7fd f8f0 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8004b18:	2093      	movs	r0, #147	@ 0x93
 8004b1a:	f7fd f8bd 	bl	8001c98 <write_com>
    if (strcmp(F75Value[item][0], "") != 0) {
 8004b1e:	01a3      	lsls	r3, r4, #6
 8004b20:	4a1c      	ldr	r2, [pc, #112]	@ (8004b94 <LCD_F75_item+0x90>)
 8004b22:	58d3      	ldr	r3, [r2, r3]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	b33b      	cbz	r3, 8004b78 <LCD_F75_item+0x74>
        hzkdis(F75Value[item][g_F75[item]]);
 8004b28:	4b1b      	ldr	r3, [pc, #108]	@ (8004b98 <LCD_F75_item+0x94>)
 8004b2a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004b2e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004b32:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004b36:	f7fd f8df 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F75[item]);
    }

    item = GET_MENU(item + 1, F75_ITEM_MAX);
 8004b3a:	3401      	adds	r4, #1
 8004b3c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004b3e:	208b      	movs	r0, #139	@ 0x8b
 8004b40:	f7fd f8aa 	bl	8001c98 <write_com>
    hzkdis(F75Item[item]);
 8004b44:	4b12      	ldr	r3, [pc, #72]	@ (8004b90 <LCD_F75_item+0x8c>)
 8004b46:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004b4a:	f7fd f8d5 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8004b4e:	209b      	movs	r0, #155	@ 0x9b
 8004b50:	f7fd f8a2 	bl	8001c98 <write_com>
    if (strcmp(F75Value[item][0], "") != 0) {
 8004b54:	01a3      	lsls	r3, r4, #6
 8004b56:	4a0f      	ldr	r2, [pc, #60]	@ (8004b94 <LCD_F75_item+0x90>)
 8004b58:	58d3      	ldr	r3, [r2, r3]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	b193      	cbz	r3, 8004b84 <LCD_F75_item+0x80>
        hzkdis(F75Value[item][g_F75[item]]);
 8004b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b98 <LCD_F75_item+0x94>)
 8004b60:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004b64:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004b68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004b6c:	f7fd f8c4 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F75[item]);
    }
    write_com(0x93);
 8004b70:	2093      	movs	r0, #147	@ 0x93
 8004b72:	f7fd f891 	bl	8001c98 <write_com>
}
 8004b76:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F75[item]);
 8004b78:	4b07      	ldr	r3, [pc, #28]	@ (8004b98 <LCD_F75_item+0x94>)
 8004b7a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004b7e:	f7fd f933 	bl	8001de8 <LCD_ShowNum>
 8004b82:	e7da      	b.n	8004b3a <LCD_F75_item+0x36>
        LCD_ShowNum(g_F75[item]);
 8004b84:	4b04      	ldr	r3, [pc, #16]	@ (8004b98 <LCD_F75_item+0x94>)
 8004b86:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004b8a:	f7fd f92d 	bl	8001de8 <LCD_ShowNum>
 8004b8e:	e7ef      	b.n	8004b70 <LCD_F75_item+0x6c>
 8004b90:	20000a9c 	.word	0x20000a9c
 8004b94:	20000a9c 	.word	0x20000a9c
 8004b98:	20000a9c 	.word	0x20000a9c

08004b9c <LCD_F76_item>:

void LCD_F76_item(uint8_t item, int16_t value)
{
 8004b9c:	b510      	push	{r4, lr}
 8004b9e:	4604      	mov	r4, r0
    item = GET_MENU(item, F76_ITEM_MAX);
    write_com(0x83);
 8004ba0:	2083      	movs	r0, #131	@ 0x83
 8004ba2:	f7fd f879 	bl	8001c98 <write_com>
    hzkdis(F76Item[item]);
 8004ba6:	4b20      	ldr	r3, [pc, #128]	@ (8004c28 <LCD_F76_item+0x8c>)
 8004ba8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004bac:	f7fd f8a4 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8004bb0:	2093      	movs	r0, #147	@ 0x93
 8004bb2:	f7fd f871 	bl	8001c98 <write_com>
    if (strcmp(F76Value[item][0], "") != 0) {
 8004bb6:	01a3      	lsls	r3, r4, #6
 8004bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8004c2c <LCD_F76_item+0x90>)
 8004bba:	58d3      	ldr	r3, [r2, r3]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	b33b      	cbz	r3, 8004c10 <LCD_F76_item+0x74>
        hzkdis(F76Value[item][g_F76[item]]);
 8004bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c30 <LCD_F76_item+0x94>)
 8004bc2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004bc6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004bca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004bce:	f7fd f893 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F76[item]);
    }

    item = GET_MENU(item + 1, F76_ITEM_MAX);
 8004bd2:	3401      	adds	r4, #1
 8004bd4:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004bd6:	208b      	movs	r0, #139	@ 0x8b
 8004bd8:	f7fd f85e 	bl	8001c98 <write_com>
    hzkdis(F76Item[item]);
 8004bdc:	4b12      	ldr	r3, [pc, #72]	@ (8004c28 <LCD_F76_item+0x8c>)
 8004bde:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004be2:	f7fd f889 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8004be6:	209b      	movs	r0, #155	@ 0x9b
 8004be8:	f7fd f856 	bl	8001c98 <write_com>
    if (strcmp(F76Value[item][0], "") != 0) {
 8004bec:	01a3      	lsls	r3, r4, #6
 8004bee:	4a0f      	ldr	r2, [pc, #60]	@ (8004c2c <LCD_F76_item+0x90>)
 8004bf0:	58d3      	ldr	r3, [r2, r3]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	b193      	cbz	r3, 8004c1c <LCD_F76_item+0x80>
        hzkdis(F76Value[item][g_F76[item]]);
 8004bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8004c30 <LCD_F76_item+0x94>)
 8004bf8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004bfc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004c00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c04:	f7fd f878 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F76[item]);
    }
    write_com(0x93);
 8004c08:	2093      	movs	r0, #147	@ 0x93
 8004c0a:	f7fd f845 	bl	8001c98 <write_com>
}
 8004c0e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F76[item]);
 8004c10:	4b07      	ldr	r3, [pc, #28]	@ (8004c30 <LCD_F76_item+0x94>)
 8004c12:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004c16:	f7fd f8e7 	bl	8001de8 <LCD_ShowNum>
 8004c1a:	e7da      	b.n	8004bd2 <LCD_F76_item+0x36>
        LCD_ShowNum(g_F76[item]);
 8004c1c:	4b04      	ldr	r3, [pc, #16]	@ (8004c30 <LCD_F76_item+0x94>)
 8004c1e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004c22:	f7fd f8e1 	bl	8001de8 <LCD_ShowNum>
 8004c26:	e7ef      	b.n	8004c08 <LCD_F76_item+0x6c>
 8004c28:	20000a9c 	.word	0x20000a9c
 8004c2c:	20000a9c 	.word	0x20000a9c
 8004c30:	20000a9c 	.word	0x20000a9c

08004c34 <LCD_F77_item>:

void LCD_F77_item(uint8_t item, int16_t value)
{
 8004c34:	b510      	push	{r4, lr}
 8004c36:	4604      	mov	r4, r0
    item = GET_MENU(item, F77_ITEM_MAX);
    write_com(0x83);
 8004c38:	2083      	movs	r0, #131	@ 0x83
 8004c3a:	f7fd f82d 	bl	8001c98 <write_com>
    hzkdis(F77Item[item]);
 8004c3e:	4b20      	ldr	r3, [pc, #128]	@ (8004cc0 <LCD_F77_item+0x8c>)
 8004c40:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004c44:	f7fd f858 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8004c48:	2093      	movs	r0, #147	@ 0x93
 8004c4a:	f7fd f825 	bl	8001c98 <write_com>
    if (strcmp(F77Value[item][0], "") != 0) {
 8004c4e:	01a3      	lsls	r3, r4, #6
 8004c50:	4a1c      	ldr	r2, [pc, #112]	@ (8004cc4 <LCD_F77_item+0x90>)
 8004c52:	58d3      	ldr	r3, [r2, r3]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	b33b      	cbz	r3, 8004ca8 <LCD_F77_item+0x74>
        hzkdis(F77Value[item][g_F77[item]]);
 8004c58:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc8 <LCD_F77_item+0x94>)
 8004c5a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004c5e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004c62:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c66:	f7fd f847 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F77[item]);
    }

    item = GET_MENU(item + 1, F77_ITEM_MAX);
 8004c6a:	3401      	adds	r4, #1
 8004c6c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004c6e:	208b      	movs	r0, #139	@ 0x8b
 8004c70:	f7fd f812 	bl	8001c98 <write_com>
    hzkdis(F77Item[item]);
 8004c74:	4b12      	ldr	r3, [pc, #72]	@ (8004cc0 <LCD_F77_item+0x8c>)
 8004c76:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004c7a:	f7fd f83d 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8004c7e:	209b      	movs	r0, #155	@ 0x9b
 8004c80:	f7fd f80a 	bl	8001c98 <write_com>
    if (strcmp(F77Value[item][0], "") != 0) {
 8004c84:	01a3      	lsls	r3, r4, #6
 8004c86:	4a0f      	ldr	r2, [pc, #60]	@ (8004cc4 <LCD_F77_item+0x90>)
 8004c88:	58d3      	ldr	r3, [r2, r3]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	b193      	cbz	r3, 8004cb4 <LCD_F77_item+0x80>
        hzkdis(F77Value[item][g_F77[item]]);
 8004c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004cc8 <LCD_F77_item+0x94>)
 8004c90:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004c94:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004c98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c9c:	f7fd f82c 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F77[item]);
    }
    write_com(0x93);
 8004ca0:	2093      	movs	r0, #147	@ 0x93
 8004ca2:	f7fc fff9 	bl	8001c98 <write_com>
}
 8004ca6:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F77[item]);
 8004ca8:	4b07      	ldr	r3, [pc, #28]	@ (8004cc8 <LCD_F77_item+0x94>)
 8004caa:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004cae:	f7fd f89b 	bl	8001de8 <LCD_ShowNum>
 8004cb2:	e7da      	b.n	8004c6a <LCD_F77_item+0x36>
        LCD_ShowNum(g_F77[item]);
 8004cb4:	4b04      	ldr	r3, [pc, #16]	@ (8004cc8 <LCD_F77_item+0x94>)
 8004cb6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004cba:	f7fd f895 	bl	8001de8 <LCD_ShowNum>
 8004cbe:	e7ef      	b.n	8004ca0 <LCD_F77_item+0x6c>
 8004cc0:	20000a9c 	.word	0x20000a9c
 8004cc4:	20000a9c 	.word	0x20000a9c
 8004cc8:	20000a9c 	.word	0x20000a9c

08004ccc <LCD_F78_item>:

void LCD_F78_item(uint8_t item, int16_t value)
{
 8004ccc:	b510      	push	{r4, lr}
 8004cce:	4604      	mov	r4, r0
    item = GET_MENU(item, F78_ITEM_MAX);
    write_com(0x83);
 8004cd0:	2083      	movs	r0, #131	@ 0x83
 8004cd2:	f7fc ffe1 	bl	8001c98 <write_com>
    hzkdis(F78Item[item]);
 8004cd6:	4b20      	ldr	r3, [pc, #128]	@ (8004d58 <LCD_F78_item+0x8c>)
 8004cd8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004cdc:	f7fd f80c 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8004ce0:	2093      	movs	r0, #147	@ 0x93
 8004ce2:	f7fc ffd9 	bl	8001c98 <write_com>
    if (strcmp(F78Value[item][0], "") != 0) {
 8004ce6:	01a3      	lsls	r3, r4, #6
 8004ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8004d5c <LCD_F78_item+0x90>)
 8004cea:	58d3      	ldr	r3, [r2, r3]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	b33b      	cbz	r3, 8004d40 <LCD_F78_item+0x74>
        hzkdis(F78Value[item][g_F78[item]]);
 8004cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d60 <LCD_F78_item+0x94>)
 8004cf2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004cf6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004cfa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004cfe:	f7fc fffb 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F78[item]);
    }

    item = GET_MENU(item + 1, F78_ITEM_MAX);
 8004d02:	3401      	adds	r4, #1
 8004d04:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004d06:	208b      	movs	r0, #139	@ 0x8b
 8004d08:	f7fc ffc6 	bl	8001c98 <write_com>
    hzkdis(F78Item[item]);
 8004d0c:	4b12      	ldr	r3, [pc, #72]	@ (8004d58 <LCD_F78_item+0x8c>)
 8004d0e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004d12:	f7fc fff1 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8004d16:	209b      	movs	r0, #155	@ 0x9b
 8004d18:	f7fc ffbe 	bl	8001c98 <write_com>
    if (strcmp(F78Value[item][0], "") != 0) {
 8004d1c:	01a3      	lsls	r3, r4, #6
 8004d1e:	4a0f      	ldr	r2, [pc, #60]	@ (8004d5c <LCD_F78_item+0x90>)
 8004d20:	58d3      	ldr	r3, [r2, r3]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	b193      	cbz	r3, 8004d4c <LCD_F78_item+0x80>
        hzkdis(F78Value[item][g_F78[item]]);
 8004d26:	4b0e      	ldr	r3, [pc, #56]	@ (8004d60 <LCD_F78_item+0x94>)
 8004d28:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004d2c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004d30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004d34:	f7fc ffe0 	bl	8001cf8 <hzkdis>
    } else {
        LCD_ShowNum(g_F78[item]);
    }
    write_com(0x93);
 8004d38:	2093      	movs	r0, #147	@ 0x93
 8004d3a:	f7fc ffad 	bl	8001c98 <write_com>
}
 8004d3e:	bd10      	pop	{r4, pc}
        LCD_ShowNum(g_F78[item]);
 8004d40:	4b07      	ldr	r3, [pc, #28]	@ (8004d60 <LCD_F78_item+0x94>)
 8004d42:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004d46:	f7fd f84f 	bl	8001de8 <LCD_ShowNum>
 8004d4a:	e7da      	b.n	8004d02 <LCD_F78_item+0x36>
        LCD_ShowNum(g_F78[item]);
 8004d4c:	4b04      	ldr	r3, [pc, #16]	@ (8004d60 <LCD_F78_item+0x94>)
 8004d4e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004d52:	f7fd f849 	bl	8001de8 <LCD_ShowNum>
 8004d56:	e7ef      	b.n	8004d38 <LCD_F78_item+0x6c>
 8004d58:	20000a9c 	.word	0x20000a9c
 8004d5c:	20000a9c 	.word	0x20000a9c
 8004d60:	20000a9c 	.word	0x20000a9c
 8004d64:	00000000 	.word	0x00000000

08004d68 <LCD_F6_item>:
{
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	4604      	mov	r4, r0
    item = GET_MENU(item, F6_ITEM_MAX);
 8004d6c:	2808      	cmp	r0, #8
 8004d6e:	d902      	bls.n	8004d76 <LCD_F6_item+0xe>
 8004d70:	f1a0 0409 	sub.w	r4, r0, #9
 8004d74:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004d76:	2083      	movs	r0, #131	@ 0x83
 8004d78:	f7fc ff8e 	bl	8001c98 <write_com>
    hzkdis(F6Item[item]);
 8004d7c:	4b50      	ldr	r3, [pc, #320]	@ (8004ec0 <LCD_F6_item+0x158>)
 8004d7e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004d82:	f7fc ffb9 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8004d86:	2093      	movs	r0, #147	@ 0x93
 8004d88:	f7fc ff86 	bl	8001c98 <write_com>
    if (strcmp(F6Value[item][0], "") != 0) {
 8004d8c:	01a3      	lsls	r3, r4, #6
 8004d8e:	4a4d      	ldr	r2, [pc, #308]	@ (8004ec4 <LCD_F6_item+0x15c>)
 8004d90:	58d3      	ldr	r3, [r2, r3]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	b95b      	cbnz	r3, 8004dae <LCD_F6_item+0x46>
        if(item == EMS_4_FuelConsumption){
 8004d96:	2c06      	cmp	r4, #6
 8004d98:	d032      	beq.n	8004e00 <LCD_F6_item+0x98>
        else if(item == IC_SurplusMileage){
 8004d9a:	2c08      	cmp	r4, #8
 8004d9c:	d043      	beq.n	8004e26 <LCD_F6_item+0xbe>
        else if(item == F6_EMS_2_EngineSpeed){
 8004d9e:	2c03      	cmp	r4, #3
 8004da0:	d04a      	beq.n	8004e38 <LCD_F6_item+0xd0>
        	LCD_ShowNum(g_F6[item]);
 8004da2:	4b49      	ldr	r3, [pc, #292]	@ (8004ec8 <LCD_F6_item+0x160>)
 8004da4:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004da8:	f7fd f81e 	bl	8001de8 <LCD_ShowNum>
 8004dac:	e008      	b.n	8004dc0 <LCD_F6_item+0x58>
        hzkdis(F6Value[item][g_F6[item]]);
 8004dae:	4b46      	ldr	r3, [pc, #280]	@ (8004ec8 <LCD_F6_item+0x160>)
 8004db0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004db4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004db8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004dbc:	f7fc ff9c 	bl	8001cf8 <hzkdis>
    item = GET_MENU(item + 1, F6_ITEM_MAX);
 8004dc0:	2c07      	cmp	r4, #7
 8004dc2:	d942      	bls.n	8004e4a <LCD_F6_item+0xe2>
 8004dc4:	3c08      	subs	r4, #8
 8004dc6:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004dc8:	208b      	movs	r0, #139	@ 0x8b
 8004dca:	f7fc ff65 	bl	8001c98 <write_com>
    hzkdis(F6Item[item]);
 8004dce:	4b3c      	ldr	r3, [pc, #240]	@ (8004ec0 <LCD_F6_item+0x158>)
 8004dd0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004dd4:	f7fc ff90 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8004dd8:	209b      	movs	r0, #155	@ 0x9b
 8004dda:	f7fc ff5d 	bl	8001c98 <write_com>
    if (strcmp(F6Value[item][0], "") != 0) {
 8004dde:	01a3      	lsls	r3, r4, #6
 8004de0:	4a38      	ldr	r2, [pc, #224]	@ (8004ec4 <LCD_F6_item+0x15c>)
 8004de2:	58d3      	ldr	r3, [r2, r3]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	bb9b      	cbnz	r3, 8004e50 <LCD_F6_item+0xe8>
        if(item == EMS_4_FuelConsumption){
 8004de8:	2c06      	cmp	r4, #6
 8004dea:	d03e      	beq.n	8004e6a <LCD_F6_item+0x102>
        else if(item == IC_SurplusMileage){
 8004dec:	2c08      	cmp	r4, #8
 8004dee:	d04f      	beq.n	8004e90 <LCD_F6_item+0x128>
        else if(item == F6_EMS_2_EngineSpeed){
 8004df0:	2c03      	cmp	r4, #3
 8004df2:	d056      	beq.n	8004ea2 <LCD_F6_item+0x13a>
        	LCD_ShowNum(g_F6[item]);
 8004df4:	4b34      	ldr	r3, [pc, #208]	@ (8004ec8 <LCD_F6_item+0x160>)
 8004df6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004dfa:	f7fc fff5 	bl	8001de8 <LCD_ShowNum>
 8004dfe:	e030      	b.n	8004e62 <LCD_F6_item+0xfa>
        	uint32_t tmp = g_F6[item] * 100 * 5 * 0.004;
 8004e00:	4b31      	ldr	r3, [pc, #196]	@ (8004ec8 <LCD_F6_item+0x160>)
 8004e02:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004e06:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004e0a:	fb03 f000 	mul.w	r0, r3, r0
 8004e0e:	f7fb fb69 	bl	80004e4 <__aeabi_i2d>
 8004e12:	a329      	add	r3, pc, #164	@ (adr r3, 8004eb8 <LCD_F6_item+0x150>)
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	f7fb fbce 	bl	80005b8 <__aeabi_dmul>
 8004e1c:	f7fb fea4 	bl	8000b68 <__aeabi_d2uiz>
        	LCD_ShowNumWithTwoDecimals(tmp);
 8004e20:	f7fc ff78 	bl	8001d14 <LCD_ShowNumWithTwoDecimals>
 8004e24:	e7cc      	b.n	8004dc0 <LCD_F6_item+0x58>
        	LCD_ShowNum(g_F6[item] * 100);
 8004e26:	4b28      	ldr	r3, [pc, #160]	@ (8004ec8 <LCD_F6_item+0x160>)
 8004e28:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004e2c:	2064      	movs	r0, #100	@ 0x64
 8004e2e:	fb03 f000 	mul.w	r0, r3, r0
 8004e32:	f7fc ffd9 	bl	8001de8 <LCD_ShowNum>
 8004e36:	e7c3      	b.n	8004dc0 <LCD_F6_item+0x58>
            LCD_ShowNum(g_F6[item] * 100);
 8004e38:	4b23      	ldr	r3, [pc, #140]	@ (8004ec8 <LCD_F6_item+0x160>)
 8004e3a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004e3e:	2064      	movs	r0, #100	@ 0x64
 8004e40:	fb03 f000 	mul.w	r0, r3, r0
 8004e44:	f7fc ffd0 	bl	8001de8 <LCD_ShowNum>
 8004e48:	e7ba      	b.n	8004dc0 <LCD_F6_item+0x58>
    item = GET_MENU(item + 1, F6_ITEM_MAX);
 8004e4a:	3401      	adds	r4, #1
 8004e4c:	b2e4      	uxtb	r4, r4
 8004e4e:	e7bb      	b.n	8004dc8 <LCD_F6_item+0x60>
        hzkdis(F6Value[item][g_F6[item]]);
 8004e50:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec8 <LCD_F6_item+0x160>)
 8004e52:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004e56:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004e5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004e5e:	f7fc ff4b 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8004e62:	2093      	movs	r0, #147	@ 0x93
 8004e64:	f7fc ff18 	bl	8001c98 <write_com>
}
 8004e68:	bd38      	pop	{r3, r4, r5, pc}
        	uint32_t tmp = g_F6[item] * 100 * 5  * 0.004;
 8004e6a:	4b17      	ldr	r3, [pc, #92]	@ (8004ec8 <LCD_F6_item+0x160>)
 8004e6c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004e70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004e74:	fb03 f000 	mul.w	r0, r3, r0
 8004e78:	f7fb fb34 	bl	80004e4 <__aeabi_i2d>
 8004e7c:	a30e      	add	r3, pc, #56	@ (adr r3, 8004eb8 <LCD_F6_item+0x150>)
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	f7fb fb99 	bl	80005b8 <__aeabi_dmul>
 8004e86:	f7fb fe6f 	bl	8000b68 <__aeabi_d2uiz>
        	LCD_ShowNumWithTwoDecimals(tmp);
 8004e8a:	f7fc ff43 	bl	8001d14 <LCD_ShowNumWithTwoDecimals>
 8004e8e:	e7e8      	b.n	8004e62 <LCD_F6_item+0xfa>
        	LCD_ShowNum(g_F6[item] * 100);
 8004e90:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec8 <LCD_F6_item+0x160>)
 8004e92:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004e96:	2064      	movs	r0, #100	@ 0x64
 8004e98:	fb03 f000 	mul.w	r0, r3, r0
 8004e9c:	f7fc ffa4 	bl	8001de8 <LCD_ShowNum>
 8004ea0:	e7df      	b.n	8004e62 <LCD_F6_item+0xfa>
            LCD_ShowNum(g_F6[item] * 100);
 8004ea2:	4b09      	ldr	r3, [pc, #36]	@ (8004ec8 <LCD_F6_item+0x160>)
 8004ea4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004ea8:	2064      	movs	r0, #100	@ 0x64
 8004eaa:	fb03 f000 	mul.w	r0, r3, r0
 8004eae:	f7fc ff9b 	bl	8001de8 <LCD_ShowNum>
 8004eb2:	e7d6      	b.n	8004e62 <LCD_F6_item+0xfa>
 8004eb4:	f3af 8000 	nop.w
 8004eb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8004ebc:	3f70624d 	.word	0x3f70624d
 8004ec0:	20000398 	.word	0x20000398
 8004ec4:	20002128 	.word	0x20002128
 8004ec8:	20002114 	.word	0x20002114
 8004ecc:	00000000 	.word	0x00000000

08004ed0 <LCD_F7_item>:
{
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	4604      	mov	r4, r0
    item = GET_MENU(item, F7_ITEM_MAX);
 8004ed4:	2809      	cmp	r0, #9
 8004ed6:	d902      	bls.n	8004ede <LCD_F7_item+0xe>
 8004ed8:	f1a0 040a 	sub.w	r4, r0, #10
 8004edc:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8004ede:	2083      	movs	r0, #131	@ 0x83
 8004ee0:	f7fc feda 	bl	8001c98 <write_com>
    hzkdis(F7Item[item]);
 8004ee4:	4b44      	ldr	r3, [pc, #272]	@ (8004ff8 <LCD_F7_item+0x128>)
 8004ee6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004eea:	f7fc ff05 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8004eee:	2093      	movs	r0, #147	@ 0x93
 8004ef0:	f7fc fed2 	bl	8001c98 <write_com>
    if (strcmp(F7Value[item][0], "") != 0) {
 8004ef4:	01a3      	lsls	r3, r4, #6
 8004ef6:	4a41      	ldr	r2, [pc, #260]	@ (8004ffc <LCD_F7_item+0x12c>)
 8004ef8:	58d3      	ldr	r3, [r2, r3]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	bb4b      	cbnz	r3, 8004f52 <LCD_F7_item+0x82>
        if(item == F7_EMS_4_FuelConsumption){
 8004efe:	2c06      	cmp	r4, #6
 8004f00:	d031      	beq.n	8004f66 <LCD_F7_item+0x96>
        else if(item == F7_EMS_2_EngineSpeed){
 8004f02:	2c03      	cmp	r4, #3
 8004f04:	d042      	beq.n	8004f8c <LCD_F7_item+0xbc>
        	LCD_ShowNum(g_F7[item]);
 8004f06:	4b3e      	ldr	r3, [pc, #248]	@ (8005000 <LCD_F7_item+0x130>)
 8004f08:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004f0c:	f7fc ff6c 	bl	8001de8 <LCD_ShowNum>
    item = GET_MENU(item + 1, F7_ITEM_MAX);
 8004f10:	2c08      	cmp	r4, #8
 8004f12:	d944      	bls.n	8004f9e <LCD_F7_item+0xce>
 8004f14:	3c09      	subs	r4, #9
 8004f16:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8004f18:	208b      	movs	r0, #139	@ 0x8b
 8004f1a:	f7fc febd 	bl	8001c98 <write_com>
    hzkdis(F7Item[item]);
 8004f1e:	4b36      	ldr	r3, [pc, #216]	@ (8004ff8 <LCD_F7_item+0x128>)
 8004f20:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004f24:	f7fc fee8 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8004f28:	209b      	movs	r0, #155	@ 0x9b
 8004f2a:	f7fc feb5 	bl	8001c98 <write_com>
    if (strcmp(F7Value[item][0], "") != 0) {
 8004f2e:	01a3      	lsls	r3, r4, #6
 8004f30:	4a32      	ldr	r2, [pc, #200]	@ (8004ffc <LCD_F7_item+0x12c>)
 8004f32:	58d3      	ldr	r3, [r2, r3]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	bbab      	cbnz	r3, 8004fa4 <LCD_F7_item+0xd4>
        if(item == F7_EMS_4_FuelConsumption){
 8004f38:	2c06      	cmp	r4, #6
 8004f3a:	d03d      	beq.n	8004fb8 <LCD_F7_item+0xe8>
        else if(item == F7_EMS_2_EngineSpeed){
 8004f3c:	2c03      	cmp	r4, #3
 8004f3e:	d04e      	beq.n	8004fde <LCD_F7_item+0x10e>
        	LCD_ShowNum(g_F7[item]);
 8004f40:	4b2f      	ldr	r3, [pc, #188]	@ (8005000 <LCD_F7_item+0x130>)
 8004f42:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004f46:	f7fc ff4f 	bl	8001de8 <LCD_ShowNum>
    write_com(0x93);
 8004f4a:	2093      	movs	r0, #147	@ 0x93
 8004f4c:	f7fc fea4 	bl	8001c98 <write_com>
}
 8004f50:	bd38      	pop	{r3, r4, r5, pc}
        hzkdis(F7Value[item][g_F7[item]]);
 8004f52:	4b2b      	ldr	r3, [pc, #172]	@ (8005000 <LCD_F7_item+0x130>)
 8004f54:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004f58:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004f5c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004f60:	f7fc feca 	bl	8001cf8 <hzkdis>
 8004f64:	e7d4      	b.n	8004f10 <LCD_F7_item+0x40>
        	uint32_t tmp = g_F7[item] * 100 * 5  * 0.004;
 8004f66:	4b26      	ldr	r3, [pc, #152]	@ (8005000 <LCD_F7_item+0x130>)
 8004f68:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004f6c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004f70:	fb03 f000 	mul.w	r0, r3, r0
 8004f74:	f7fb fab6 	bl	80004e4 <__aeabi_i2d>
 8004f78:	a31d      	add	r3, pc, #116	@ (adr r3, 8004ff0 <LCD_F7_item+0x120>)
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	f7fb fb1b 	bl	80005b8 <__aeabi_dmul>
 8004f82:	f7fb fdf1 	bl	8000b68 <__aeabi_d2uiz>
        	LCD_ShowNumWithTwoDecimals(tmp);
 8004f86:	f7fc fec5 	bl	8001d14 <LCD_ShowNumWithTwoDecimals>
 8004f8a:	e7c1      	b.n	8004f10 <LCD_F7_item+0x40>
        	LCD_ShowNum(g_F7[item] * 100);
 8004f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8005000 <LCD_F7_item+0x130>)
 8004f8e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004f92:	2064      	movs	r0, #100	@ 0x64
 8004f94:	fb03 f000 	mul.w	r0, r3, r0
 8004f98:	f7fc ff26 	bl	8001de8 <LCD_ShowNum>
 8004f9c:	e7b8      	b.n	8004f10 <LCD_F7_item+0x40>
    item = GET_MENU(item + 1, F7_ITEM_MAX);
 8004f9e:	3401      	adds	r4, #1
 8004fa0:	b2e4      	uxtb	r4, r4
 8004fa2:	e7b9      	b.n	8004f18 <LCD_F7_item+0x48>
        hzkdis(F7Value[item][g_F7[item]]);
 8004fa4:	4b16      	ldr	r3, [pc, #88]	@ (8005000 <LCD_F7_item+0x130>)
 8004fa6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004faa:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004fae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004fb2:	f7fc fea1 	bl	8001cf8 <hzkdis>
 8004fb6:	e7c8      	b.n	8004f4a <LCD_F7_item+0x7a>
        	uint32_t tmp = g_F7[item] * 100 * 5  * 0.004;
 8004fb8:	4b11      	ldr	r3, [pc, #68]	@ (8005000 <LCD_F7_item+0x130>)
 8004fba:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004fbe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004fc2:	fb03 f000 	mul.w	r0, r3, r0
 8004fc6:	f7fb fa8d 	bl	80004e4 <__aeabi_i2d>
 8004fca:	a309      	add	r3, pc, #36	@ (adr r3, 8004ff0 <LCD_F7_item+0x120>)
 8004fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd0:	f7fb faf2 	bl	80005b8 <__aeabi_dmul>
 8004fd4:	f7fb fdc8 	bl	8000b68 <__aeabi_d2uiz>
        	LCD_ShowNumWithTwoDecimals(tmp);
 8004fd8:	f7fc fe9c 	bl	8001d14 <LCD_ShowNumWithTwoDecimals>
 8004fdc:	e7b5      	b.n	8004f4a <LCD_F7_item+0x7a>
        	LCD_ShowNum(g_F7[item] * 100);
 8004fde:	4b08      	ldr	r3, [pc, #32]	@ (8005000 <LCD_F7_item+0x130>)
 8004fe0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004fe4:	2064      	movs	r0, #100	@ 0x64
 8004fe6:	fb03 f000 	mul.w	r0, r3, r0
 8004fea:	f7fc fefd 	bl	8001de8 <LCD_ShowNum>
 8004fee:	e7ac      	b.n	8004f4a <LCD_F7_item+0x7a>
 8004ff0:	d2f1a9fc 	.word	0xd2f1a9fc
 8004ff4:	3f70624d 	.word	0x3f70624d
 8004ff8:	2000035c 	.word	0x2000035c
 8004ffc:	20001e94 	.word	0x20001e94
 8005000:	20001e80 	.word	0x20001e80

08005004 <LCD_F8_item>:
{
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4604      	mov	r4, r0
    item = GET_MENU(item, F8_ITEM_MAX);
 8005008:	2806      	cmp	r0, #6
 800500a:	d901      	bls.n	8005010 <LCD_F8_item+0xc>
 800500c:	1fc4      	subs	r4, r0, #7
 800500e:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 8005010:	2083      	movs	r0, #131	@ 0x83
 8005012:	f7fc fe41 	bl	8001c98 <write_com>
    hzkdis(F8Item[item]);
 8005016:	4b30      	ldr	r3, [pc, #192]	@ (80050d8 <LCD_F8_item+0xd4>)
 8005018:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800501c:	f7fc fe6c 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8005020:	2093      	movs	r0, #147	@ 0x93
 8005022:	f7fc fe39 	bl	8001c98 <write_com>
    if (strcmp(F8Value[item][0], "") != 0) {
 8005026:	01a3      	lsls	r3, r4, #6
 8005028:	4a2c      	ldr	r2, [pc, #176]	@ (80050dc <LCD_F8_item+0xd8>)
 800502a:	58d3      	ldr	r3, [r2, r3]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	bb3b      	cbnz	r3, 8005080 <LCD_F8_item+0x7c>
        if(item == TPMS_TirePressure){
 8005030:	2c06      	cmp	r4, #6
 8005032:	d02f      	beq.n	8005094 <LCD_F8_item+0x90>
        	LCD_ShowNum(g_F8[item]);
 8005034:	4b2a      	ldr	r3, [pc, #168]	@ (80050e0 <LCD_F8_item+0xdc>)
 8005036:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800503a:	f7fc fed5 	bl	8001de8 <LCD_ShowNum>
    item = GET_MENU(item + 1, F8_ITEM_MAX);
 800503e:	2c05      	cmp	r4, #5
 8005040:	d940      	bls.n	80050c4 <LCD_F8_item+0xc0>
 8005042:	3c06      	subs	r4, #6
 8005044:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 8005046:	208b      	movs	r0, #139	@ 0x8b
 8005048:	f7fc fe26 	bl	8001c98 <write_com>
    hzkdis(F8Item[item]);
 800504c:	4b22      	ldr	r3, [pc, #136]	@ (80050d8 <LCD_F8_item+0xd4>)
 800504e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005052:	f7fc fe51 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 8005056:	209b      	movs	r0, #155	@ 0x9b
 8005058:	f7fc fe1e 	bl	8001c98 <write_com>
    if (strcmp(F8Value[item][0], "") != 0) {
 800505c:	01a3      	lsls	r3, r4, #6
 800505e:	4a1f      	ldr	r2, [pc, #124]	@ (80050dc <LCD_F8_item+0xd8>)
 8005060:	58d3      	ldr	r3, [r2, r3]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	b38b      	cbz	r3, 80050ca <LCD_F8_item+0xc6>
        hzkdis(F8Value[item][g_F8[item]]);
 8005066:	4b1e      	ldr	r3, [pc, #120]	@ (80050e0 <LCD_F8_item+0xdc>)
 8005068:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800506c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8005070:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005074:	f7fc fe40 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8005078:	2093      	movs	r0, #147	@ 0x93
 800507a:	f7fc fe0d 	bl	8001c98 <write_com>
}
 800507e:	bd38      	pop	{r3, r4, r5, pc}
        hzkdis(F8Value[item][g_F8[item]]);
 8005080:	4b17      	ldr	r3, [pc, #92]	@ (80050e0 <LCD_F8_item+0xdc>)
 8005082:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8005086:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800508a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800508e:	f7fc fe33 	bl	8001cf8 <hzkdis>
 8005092:	e7d4      	b.n	800503e <LCD_F8_item+0x3a>
        	uint32_t tmp = (g_F8[item] * 15  * 2.75 + 100) * 100;
 8005094:	4b12      	ldr	r3, [pc, #72]	@ (80050e0 <LCD_F8_item+0xdc>)
 8005096:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800509a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800509e:	f7fb fa21 	bl	80004e4 <__aeabi_i2d>
 80050a2:	2200      	movs	r2, #0
 80050a4:	4b0f      	ldr	r3, [pc, #60]	@ (80050e4 <LCD_F8_item+0xe0>)
 80050a6:	f7fb fa87 	bl	80005b8 <__aeabi_dmul>
 80050aa:	2200      	movs	r2, #0
 80050ac:	4b0e      	ldr	r3, [pc, #56]	@ (80050e8 <LCD_F8_item+0xe4>)
 80050ae:	f7fb f8cd 	bl	800024c <__adddf3>
 80050b2:	2200      	movs	r2, #0
 80050b4:	4b0c      	ldr	r3, [pc, #48]	@ (80050e8 <LCD_F8_item+0xe4>)
 80050b6:	f7fb fa7f 	bl	80005b8 <__aeabi_dmul>
 80050ba:	f7fb fd55 	bl	8000b68 <__aeabi_d2uiz>
        	LCD_ShowNumWithTwoDecimals(tmp);
 80050be:	f7fc fe29 	bl	8001d14 <LCD_ShowNumWithTwoDecimals>
 80050c2:	e7bc      	b.n	800503e <LCD_F8_item+0x3a>
    item = GET_MENU(item + 1, F8_ITEM_MAX);
 80050c4:	3401      	adds	r4, #1
 80050c6:	b2e4      	uxtb	r4, r4
 80050c8:	e7bd      	b.n	8005046 <LCD_F8_item+0x42>
        LCD_ShowNum(g_F8[item]);
 80050ca:	4b05      	ldr	r3, [pc, #20]	@ (80050e0 <LCD_F8_item+0xdc>)
 80050cc:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80050d0:	f7fc fe8a 	bl	8001de8 <LCD_ShowNum>
 80050d4:	e7d0      	b.n	8005078 <LCD_F8_item+0x74>
 80050d6:	bf00      	nop
 80050d8:	2000032c 	.word	0x2000032c
 80050dc:	20001cc0 	.word	0x20001cc0
 80050e0:	20001cb0 	.word	0x20001cb0
 80050e4:	40060000 	.word	0x40060000
 80050e8:	40590000 	.word	0x40590000

080050ec <LCD_F12_item>:
{
 80050ec:	b538      	push	{r3, r4, r5, lr}
 80050ee:	4604      	mov	r4, r0
    item = GET_MENU(item, F12_ITEM_MAX);
 80050f0:	2802      	cmp	r0, #2
 80050f2:	d901      	bls.n	80050f8 <LCD_F12_item+0xc>
 80050f4:	1ec4      	subs	r4, r0, #3
 80050f6:	b2e4      	uxtb	r4, r4
    write_com(0x83);
 80050f8:	2083      	movs	r0, #131	@ 0x83
 80050fa:	f7fc fdcd 	bl	8001c98 <write_com>
    hzkdis(F12Item[item]);
 80050fe:	4b3b      	ldr	r3, [pc, #236]	@ (80051ec <LCD_F12_item+0x100>)
 8005100:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005104:	f7fc fdf8 	bl	8001cf8 <hzkdis>
    write_com(0x93);
 8005108:	2093      	movs	r0, #147	@ 0x93
 800510a:	f7fc fdc5 	bl	8001c98 <write_com>
    if (strcmp(F12Value[item][0], "") != 0) {
 800510e:	01a3      	lsls	r3, r4, #6
 8005110:	4a37      	ldr	r2, [pc, #220]	@ (80051f0 <LCD_F12_item+0x104>)
 8005112:	58d3      	ldr	r3, [r2, r3]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	bb2b      	cbnz	r3, 8005164 <LCD_F12_item+0x78>
        if(item == AC_2_OutsideTemperature){
 8005118:	2c01      	cmp	r4, #1
 800511a:	d02d      	beq.n	8005178 <LCD_F12_item+0x8c>
        	LCD_ShowNum(g_F12[item]);
 800511c:	4b35      	ldr	r3, [pc, #212]	@ (80051f4 <LCD_F12_item+0x108>)
 800511e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8005122:	f7fc fe61 	bl	8001de8 <LCD_ShowNum>
    item = GET_MENU(item + 1, F12_ITEM_MAX);
 8005126:	2c01      	cmp	r4, #1
 8005128:	d93c      	bls.n	80051a4 <LCD_F12_item+0xb8>
 800512a:	3c02      	subs	r4, #2
 800512c:	b2e4      	uxtb	r4, r4
    write_com(0x8b);
 800512e:	208b      	movs	r0, #139	@ 0x8b
 8005130:	f7fc fdb2 	bl	8001c98 <write_com>
    hzkdis(F12Item[item]);
 8005134:	4b2d      	ldr	r3, [pc, #180]	@ (80051ec <LCD_F12_item+0x100>)
 8005136:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800513a:	f7fc fddd 	bl	8001cf8 <hzkdis>
    write_com(0x9b);
 800513e:	209b      	movs	r0, #155	@ 0x9b
 8005140:	f7fc fdaa 	bl	8001c98 <write_com>
    if (strcmp(F12Value[item][0], "") != 0) {
 8005144:	01a3      	lsls	r3, r4, #6
 8005146:	4a2a      	ldr	r2, [pc, #168]	@ (80051f0 <LCD_F12_item+0x104>)
 8005148:	58d3      	ldr	r3, [r2, r3]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	bb6b      	cbnz	r3, 80051aa <LCD_F12_item+0xbe>
        if(item == AC_2_OutsideTemperature){
 800514e:	2c01      	cmp	r4, #1
 8005150:	d035      	beq.n	80051be <LCD_F12_item+0xd2>
        	LCD_ShowNum(g_F12[item]);
 8005152:	4b28      	ldr	r3, [pc, #160]	@ (80051f4 <LCD_F12_item+0x108>)
 8005154:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8005158:	f7fc fe46 	bl	8001de8 <LCD_ShowNum>
    write_com(0x93);
 800515c:	2093      	movs	r0, #147	@ 0x93
 800515e:	f7fc fd9b 	bl	8001c98 <write_com>
}
 8005162:	bd38      	pop	{r3, r4, r5, pc}
        hzkdis(F12Value[item][g_F12[item]]);
 8005164:	4b23      	ldr	r3, [pc, #140]	@ (80051f4 <LCD_F12_item+0x108>)
 8005166:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800516a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800516e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005172:	f7fc fdc1 	bl	8001cf8 <hzkdis>
 8005176:	e7d6      	b.n	8005126 <LCD_F12_item+0x3a>
        	int32_t tmp = (g_F12[item] * 0.5) * 100 - 4000;
 8005178:	4b1e      	ldr	r3, [pc, #120]	@ (80051f4 <LCD_F12_item+0x108>)
 800517a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800517e:	f7fb f9b1 	bl	80004e4 <__aeabi_i2d>
 8005182:	2200      	movs	r2, #0
 8005184:	4b1c      	ldr	r3, [pc, #112]	@ (80051f8 <LCD_F12_item+0x10c>)
 8005186:	f7fb fa17 	bl	80005b8 <__aeabi_dmul>
 800518a:	2200      	movs	r2, #0
 800518c:	4b1b      	ldr	r3, [pc, #108]	@ (80051fc <LCD_F12_item+0x110>)
 800518e:	f7fb fa13 	bl	80005b8 <__aeabi_dmul>
 8005192:	2200      	movs	r2, #0
 8005194:	4b1a      	ldr	r3, [pc, #104]	@ (8005200 <LCD_F12_item+0x114>)
 8005196:	f7fb f857 	bl	8000248 <__aeabi_dsub>
 800519a:	f7fb fcbd 	bl	8000b18 <__aeabi_d2iz>
        	LCD_ShowNumWithTwoDecimals(tmp);
 800519e:	f7fc fdb9 	bl	8001d14 <LCD_ShowNumWithTwoDecimals>
 80051a2:	e7c0      	b.n	8005126 <LCD_F12_item+0x3a>
    item = GET_MENU(item + 1, F12_ITEM_MAX);
 80051a4:	3401      	adds	r4, #1
 80051a6:	b2e4      	uxtb	r4, r4
 80051a8:	e7c1      	b.n	800512e <LCD_F12_item+0x42>
        hzkdis(F12Value[item][g_F12[item]]);
 80051aa:	4b12      	ldr	r3, [pc, #72]	@ (80051f4 <LCD_F12_item+0x108>)
 80051ac:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80051b0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80051b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80051b8:	f7fc fd9e 	bl	8001cf8 <hzkdis>
 80051bc:	e7ce      	b.n	800515c <LCD_F12_item+0x70>
        	int32_t tmp = (g_F12[item] * 0.5) * 100 - 4000;
 80051be:	4b0d      	ldr	r3, [pc, #52]	@ (80051f4 <LCD_F12_item+0x108>)
 80051c0:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80051c4:	f7fb f98e 	bl	80004e4 <__aeabi_i2d>
 80051c8:	2200      	movs	r2, #0
 80051ca:	4b0b      	ldr	r3, [pc, #44]	@ (80051f8 <LCD_F12_item+0x10c>)
 80051cc:	f7fb f9f4 	bl	80005b8 <__aeabi_dmul>
 80051d0:	2200      	movs	r2, #0
 80051d2:	4b0a      	ldr	r3, [pc, #40]	@ (80051fc <LCD_F12_item+0x110>)
 80051d4:	f7fb f9f0 	bl	80005b8 <__aeabi_dmul>
 80051d8:	2200      	movs	r2, #0
 80051da:	4b09      	ldr	r3, [pc, #36]	@ (8005200 <LCD_F12_item+0x114>)
 80051dc:	f7fb f834 	bl	8000248 <__aeabi_dsub>
 80051e0:	f7fb fc9a 	bl	8000b18 <__aeabi_d2iz>
        	LCD_ShowNumWithTwoDecimals(tmp);
 80051e4:	f7fc fd96 	bl	8001d14 <LCD_ShowNumWithTwoDecimals>
 80051e8:	e7b8      	b.n	800515c <LCD_F12_item+0x70>
 80051ea:	bf00      	nop
 80051ec:	200002a0 	.word	0x200002a0
 80051f0:	20001748 	.word	0x20001748
 80051f4:	20001740 	.word	0x20001740
 80051f8:	3fe00000 	.word	0x3fe00000
 80051fc:	40590000 	.word	0x40590000
 8005200:	40af4000 	.word	0x40af4000

08005204 <ItemValueLimit>:
}
 8005204:	2000      	movs	r0, #0
 8005206:	4770      	bx	lr

08005208 <GetItemValue>:
    switch(menu)
 8005208:	280c      	cmp	r0, #12
 800520a:	d856      	bhi.n	80052ba <GetItemValue+0xb2>
 800520c:	e8df f000 	tbb	[pc, r0]
 8005210:	19130d07 	.word	0x19130d07
 8005214:	312b251f 	.word	0x312b251f
 8005218:	49433d37 	.word	0x49433d37
 800521c:	4f          	.byte	0x4f
 800521d:	00          	.byte	0x00
            if(item < F1_ITEM_MAX)
 800521e:	2904      	cmp	r1, #4
 8005220:	d84d      	bhi.n	80052be <GetItemValue+0xb6>
                res = g_F1[item];
 8005222:	4b34      	ldr	r3, [pc, #208]	@ (80052f4 <GetItemValue+0xec>)
 8005224:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005228:	4770      	bx	lr
            if(item < F2_ITEM_MAX)
 800522a:	2902      	cmp	r1, #2
 800522c:	d849      	bhi.n	80052c2 <GetItemValue+0xba>
                res = g_F2[item];
 800522e:	4b32      	ldr	r3, [pc, #200]	@ (80052f8 <GetItemValue+0xf0>)
 8005230:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005234:	4770      	bx	lr
            if(item < F3_ITEM_MAX)
 8005236:	290a      	cmp	r1, #10
 8005238:	d845      	bhi.n	80052c6 <GetItemValue+0xbe>
                res = g_F3[item];
 800523a:	4b30      	ldr	r3, [pc, #192]	@ (80052fc <GetItemValue+0xf4>)
 800523c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005240:	4770      	bx	lr
            if(item < F4_ITEM_MAX)
 8005242:	2902      	cmp	r1, #2
 8005244:	d841      	bhi.n	80052ca <GetItemValue+0xc2>
                res = g_F4[item];
 8005246:	4b2e      	ldr	r3, [pc, #184]	@ (8005300 <GetItemValue+0xf8>)
 8005248:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800524c:	4770      	bx	lr
            if(item < F5_ITEM_MAX)
 800524e:	2903      	cmp	r1, #3
 8005250:	d83d      	bhi.n	80052ce <GetItemValue+0xc6>
                res = g_F5[item];
 8005252:	4b2c      	ldr	r3, [pc, #176]	@ (8005304 <GetItemValue+0xfc>)
 8005254:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8005258:	4770      	bx	lr
            if(item < F6_ITEM_MAX)
 800525a:	2908      	cmp	r1, #8
 800525c:	d839      	bhi.n	80052d2 <GetItemValue+0xca>
                res = g_F6[item];
 800525e:	4b2a      	ldr	r3, [pc, #168]	@ (8005308 <GetItemValue+0x100>)
 8005260:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005264:	4770      	bx	lr
            if(item < F7_ITEM_MAX)
 8005266:	2909      	cmp	r1, #9
 8005268:	d835      	bhi.n	80052d6 <GetItemValue+0xce>
                res = g_F7[item];
 800526a:	4b28      	ldr	r3, [pc, #160]	@ (800530c <GetItemValue+0x104>)
 800526c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005270:	4770      	bx	lr
            if(item < F8_ITEM_MAX)
 8005272:	2906      	cmp	r1, #6
 8005274:	d831      	bhi.n	80052da <GetItemValue+0xd2>
                res = g_F8[item];
 8005276:	4b26      	ldr	r3, [pc, #152]	@ (8005310 <GetItemValue+0x108>)
 8005278:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800527c:	4770      	bx	lr
            if(item < F9_ITEM_MAX)
 800527e:	2906      	cmp	r1, #6
 8005280:	d82d      	bhi.n	80052de <GetItemValue+0xd6>
                res = g_F9[item];
 8005282:	4b24      	ldr	r3, [pc, #144]	@ (8005314 <GetItemValue+0x10c>)
 8005284:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005288:	4770      	bx	lr
            if(item < F10_ITEM_MAX)
 800528a:	2905      	cmp	r1, #5
 800528c:	d829      	bhi.n	80052e2 <GetItemValue+0xda>
                res = g_F10[item];
 800528e:	4b22      	ldr	r3, [pc, #136]	@ (8005318 <GetItemValue+0x110>)
 8005290:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005294:	4770      	bx	lr
            if(item < F11_ITEM_MAX)
 8005296:	2904      	cmp	r1, #4
 8005298:	d825      	bhi.n	80052e6 <GetItemValue+0xde>
                res = g_F11[item];
 800529a:	4b20      	ldr	r3, [pc, #128]	@ (800531c <GetItemValue+0x114>)
 800529c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80052a0:	4770      	bx	lr
            if(item < F12_ITEM_MAX)
 80052a2:	2902      	cmp	r1, #2
 80052a4:	d821      	bhi.n	80052ea <GetItemValue+0xe2>
                res = g_F12[item];
 80052a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005320 <GetItemValue+0x118>)
 80052a8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80052ac:	4770      	bx	lr
            if(item < F13_ITEM_MAX)
 80052ae:	2930      	cmp	r1, #48	@ 0x30
 80052b0:	d81d      	bhi.n	80052ee <GetItemValue+0xe6>
                res = g_F13[item];
 80052b2:	4b1c      	ldr	r3, [pc, #112]	@ (8005324 <GetItemValue+0x11c>)
 80052b4:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80052b8:	4770      	bx	lr
    switch(menu)
 80052ba:	2000      	movs	r0, #0
 80052bc:	4770      	bx	lr
    uint32_t res = 0U;
 80052be:	2000      	movs	r0, #0
 80052c0:	4770      	bx	lr
 80052c2:	2000      	movs	r0, #0
 80052c4:	4770      	bx	lr
 80052c6:	2000      	movs	r0, #0
 80052c8:	4770      	bx	lr
 80052ca:	2000      	movs	r0, #0
 80052cc:	4770      	bx	lr
 80052ce:	2000      	movs	r0, #0
 80052d0:	4770      	bx	lr
 80052d2:	2000      	movs	r0, #0
 80052d4:	4770      	bx	lr
 80052d6:	2000      	movs	r0, #0
 80052d8:	4770      	bx	lr
 80052da:	2000      	movs	r0, #0
 80052dc:	4770      	bx	lr
 80052de:	2000      	movs	r0, #0
 80052e0:	4770      	bx	lr
 80052e2:	2000      	movs	r0, #0
 80052e4:	4770      	bx	lr
 80052e6:	2000      	movs	r0, #0
 80052e8:	4770      	bx	lr
 80052ea:	2000      	movs	r0, #0
 80052ec:	4770      	bx	lr
 80052ee:	2000      	movs	r0, #0
}
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	200028d8 	.word	0x200028d8
 80052f8:	20002810 	.word	0x20002810
 80052fc:	20002538 	.word	0x20002538
 8005300:	200003dc 	.word	0x200003dc
 8005304:	20002368 	.word	0x20002368
 8005308:	20002114 	.word	0x20002114
 800530c:	20001e80 	.word	0x20001e80
 8005310:	20001cb0 	.word	0x20001cb0
 8005314:	20001ae0 	.word	0x20001ae0
 8005318:	20001954 	.word	0x20001954
 800531c:	20001808 	.word	0x20001808
 8005320:	20001740 	.word	0x20001740
 8005324:	20000a9c 	.word	0x20000a9c

08005328 <GetItemMAXItem>:
    switch(menu){
 8005328:	280c      	cmp	r0, #12
 800532a:	d808      	bhi.n	800533e <GetItemMAXItem+0x16>
 800532c:	e8df f000 	tbb	[pc, r0]
 8005330:	1a0b0919 	.word	0x1a0b0919
 8005334:	1a0f0d1a 	.word	0x1a0f0d1a
 8005338:	15191311 	.word	0x15191311
 800533c:	17          	.byte	0x17
 800533d:	00          	.byte	0x00
 800533e:	2000      	movs	r0, #0
 8005340:	4770      	bx	lr
            temp = F2_ITEM_MAX;
 8005342:	2003      	movs	r0, #3
            break;
 8005344:	4770      	bx	lr
            temp = F3_ITEM_MAX;
 8005346:	200b      	movs	r0, #11
            break;
 8005348:	4770      	bx	lr
            temp = F6_ITEM_MAX;
 800534a:	2009      	movs	r0, #9
            break;
 800534c:	4770      	bx	lr
            temp = F7_ITEM_MAX;
 800534e:	200a      	movs	r0, #10
            break;
 8005350:	4770      	bx	lr
            temp = F9_ITEM_MAX;
 8005352:	2007      	movs	r0, #7
            break;
 8005354:	4770      	bx	lr
            temp = F10_ITEM_MAX;
 8005356:	2006      	movs	r0, #6
            break;
 8005358:	4770      	bx	lr
            temp = F12_ITEM_MAX;
 800535a:	2003      	movs	r0, #3
            break;
 800535c:	4770      	bx	lr
            temp = F13_ITEM_MAX;
 800535e:	2031      	movs	r0, #49	@ 0x31
            break;
 8005360:	4770      	bx	lr
            temp = F1_ITEM_MAX;
 8005362:	2005      	movs	r0, #5
}
 8005364:	4770      	bx	lr
	...

08005368 <GetItemMAXValue>:
    switch(menu)
 8005368:	284d      	cmp	r0, #77	@ 0x4d
 800536a:	f200 8188 	bhi.w	800567e <GetItemMAXValue+0x316>
 800536e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8005372:	004e      	.short	0x004e
 8005374:	00560052 	.word	0x00560052
 8005378:	005e005a 	.word	0x005e005a
 800537c:	00660062 	.word	0x00660062
 8005380:	006e006a 	.word	0x006e006a
 8005384:	00760072 	.word	0x00760072
 8005388:	007e007a 	.word	0x007e007a
 800538c:	00860082 	.word	0x00860082
 8005390:	008e008a 	.word	0x008e008a
 8005394:	00960092 	.word	0x00960092
 8005398:	009e009a 	.word	0x009e009a
 800539c:	00a600a2 	.word	0x00a600a2
 80053a0:	00ae00aa 	.word	0x00ae00aa
 80053a4:	00b600b2 	.word	0x00b600b2
 80053a8:	00be00ba 	.word	0x00be00ba
 80053ac:	00c600c2 	.word	0x00c600c2
 80053b0:	00ce00ca 	.word	0x00ce00ca
 80053b4:	00d600d2 	.word	0x00d600d2
 80053b8:	00de00da 	.word	0x00de00da
 80053bc:	00e600e2 	.word	0x00e600e2
 80053c0:	00ee00ea 	.word	0x00ee00ea
 80053c4:	00f600f2 	.word	0x00f600f2
 80053c8:	00fe00fa 	.word	0x00fe00fa
 80053cc:	01060102 	.word	0x01060102
 80053d0:	010e010a 	.word	0x010e010a
 80053d4:	01160112 	.word	0x01160112
 80053d8:	011e011a 	.word	0x011e011a
 80053dc:	01260122 	.word	0x01260122
 80053e0:	012e012a 	.word	0x012e012a
 80053e4:	01360132 	.word	0x01360132
 80053e8:	013e013a 	.word	0x013e013a
 80053ec:	01460142 	.word	0x01460142
 80053f0:	014e014a 	.word	0x014e014a
 80053f4:	01560152 	.word	0x01560152
 80053f8:	015e015a 	.word	0x015e015a
 80053fc:	01660162 	.word	0x01660162
 8005400:	016e016a 	.word	0x016e016a
 8005404:	01760172 	.word	0x01760172
 8005408:	017e017a 	.word	0x017e017a
 800540c:	0182      	.short	0x0182
			res = F1Max[item];
 800540e:	4b9d      	ldr	r3, [pc, #628]	@ (8005684 <GetItemMAXValue+0x31c>)
 8005410:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005414:	4770      	bx	lr
			res = F2Max[item];
 8005416:	4b9c      	ldr	r3, [pc, #624]	@ (8005688 <GetItemMAXValue+0x320>)
 8005418:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800541c:	4770      	bx	lr
			res = F3Max[item];
 800541e:	4b9b      	ldr	r3, [pc, #620]	@ (800568c <GetItemMAXValue+0x324>)
 8005420:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005424:	4770      	bx	lr
			res = F4Max[item];
 8005426:	4b9a      	ldr	r3, [pc, #616]	@ (8005690 <GetItemMAXValue+0x328>)
 8005428:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800542c:	4770      	bx	lr
			res = F5Max[item];
 800542e:	4b99      	ldr	r3, [pc, #612]	@ (8005694 <GetItemMAXValue+0x32c>)
 8005430:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
			break;
 8005434:	4770      	bx	lr
			res = F6Max[item];
 8005436:	4b98      	ldr	r3, [pc, #608]	@ (8005698 <GetItemMAXValue+0x330>)
 8005438:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800543c:	4770      	bx	lr
			res = F7Max[item];
 800543e:	4b97      	ldr	r3, [pc, #604]	@ (800569c <GetItemMAXValue+0x334>)
 8005440:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005444:	4770      	bx	lr
			res = F8Max[item];
 8005446:	4b96      	ldr	r3, [pc, #600]	@ (80056a0 <GetItemMAXValue+0x338>)
 8005448:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800544c:	4770      	bx	lr
			res = F9Max[item];
 800544e:	4b95      	ldr	r3, [pc, #596]	@ (80056a4 <GetItemMAXValue+0x33c>)
 8005450:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005454:	4770      	bx	lr
			res = F10Max[item];
 8005456:	4b94      	ldr	r3, [pc, #592]	@ (80056a8 <GetItemMAXValue+0x340>)
 8005458:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800545c:	4770      	bx	lr
			res = F11Max[item];
 800545e:	4b93      	ldr	r3, [pc, #588]	@ (80056ac <GetItemMAXValue+0x344>)
 8005460:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005464:	4770      	bx	lr
			res = F12Max[item];
 8005466:	4b92      	ldr	r3, [pc, #584]	@ (80056b0 <GetItemMAXValue+0x348>)
 8005468:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800546c:	4770      	bx	lr
			res = F13Max[item];
 800546e:	4b91      	ldr	r3, [pc, #580]	@ (80056b4 <GetItemMAXValue+0x34c>)
 8005470:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005474:	4770      	bx	lr
			res = F14Max[item];
 8005476:	4b90      	ldr	r3, [pc, #576]	@ (80056b8 <GetItemMAXValue+0x350>)
 8005478:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800547c:	4770      	bx	lr
			res = F15Max[item];
 800547e:	4b8f      	ldr	r3, [pc, #572]	@ (80056bc <GetItemMAXValue+0x354>)
 8005480:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005484:	4770      	bx	lr
			res = F16Max[item];
 8005486:	4b8e      	ldr	r3, [pc, #568]	@ (80056c0 <GetItemMAXValue+0x358>)
 8005488:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800548c:	4770      	bx	lr
			res = F17Max[item];
 800548e:	4b8d      	ldr	r3, [pc, #564]	@ (80056c4 <GetItemMAXValue+0x35c>)
 8005490:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005494:	4770      	bx	lr
			res = F18Max[item];
 8005496:	4b8c      	ldr	r3, [pc, #560]	@ (80056c8 <GetItemMAXValue+0x360>)
 8005498:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800549c:	4770      	bx	lr
			res = F19Max[item];
 800549e:	4b8b      	ldr	r3, [pc, #556]	@ (80056cc <GetItemMAXValue+0x364>)
 80054a0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80054a4:	4770      	bx	lr
			res = F20Max[item];
 80054a6:	4b8a      	ldr	r3, [pc, #552]	@ (80056d0 <GetItemMAXValue+0x368>)
 80054a8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80054ac:	4770      	bx	lr
			res = F21Max[item];
 80054ae:	4b89      	ldr	r3, [pc, #548]	@ (80056d4 <GetItemMAXValue+0x36c>)
 80054b0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80054b4:	4770      	bx	lr
			res = F22Max[item];
 80054b6:	4b88      	ldr	r3, [pc, #544]	@ (80056d8 <GetItemMAXValue+0x370>)
 80054b8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80054bc:	4770      	bx	lr
			res = F23Max[item];
 80054be:	4b87      	ldr	r3, [pc, #540]	@ (80056dc <GetItemMAXValue+0x374>)
 80054c0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80054c4:	4770      	bx	lr
			res = F24Max[item];
 80054c6:	4b86      	ldr	r3, [pc, #536]	@ (80056e0 <GetItemMAXValue+0x378>)
 80054c8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80054cc:	4770      	bx	lr
			res = F25Max[item];
 80054ce:	4b85      	ldr	r3, [pc, #532]	@ (80056e4 <GetItemMAXValue+0x37c>)
 80054d0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80054d4:	4770      	bx	lr
			res = F26Max[item];
 80054d6:	4b84      	ldr	r3, [pc, #528]	@ (80056e8 <GetItemMAXValue+0x380>)
 80054d8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80054dc:	4770      	bx	lr
			res = F27Max[item];
 80054de:	4b83      	ldr	r3, [pc, #524]	@ (80056ec <GetItemMAXValue+0x384>)
 80054e0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80054e4:	4770      	bx	lr
			res = F28Max[item];
 80054e6:	4b82      	ldr	r3, [pc, #520]	@ (80056f0 <GetItemMAXValue+0x388>)
 80054e8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80054ec:	4770      	bx	lr
			res = F29Max[item];
 80054ee:	4b81      	ldr	r3, [pc, #516]	@ (80056f4 <GetItemMAXValue+0x38c>)
 80054f0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80054f4:	4770      	bx	lr
			res = F30Max[item];
 80054f6:	4b80      	ldr	r3, [pc, #512]	@ (80056f8 <GetItemMAXValue+0x390>)
 80054f8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80054fc:	4770      	bx	lr
			res = F31Max[item];
 80054fe:	4b7f      	ldr	r3, [pc, #508]	@ (80056fc <GetItemMAXValue+0x394>)
 8005500:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005504:	4770      	bx	lr
			res = F32Max[item];
 8005506:	4b7e      	ldr	r3, [pc, #504]	@ (8005700 <GetItemMAXValue+0x398>)
 8005508:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800550c:	4770      	bx	lr
			res = F33Max[item];
 800550e:	4b7d      	ldr	r3, [pc, #500]	@ (8005704 <GetItemMAXValue+0x39c>)
 8005510:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005514:	4770      	bx	lr
			res = F34Max[item];
 8005516:	4b7c      	ldr	r3, [pc, #496]	@ (8005708 <GetItemMAXValue+0x3a0>)
 8005518:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800551c:	4770      	bx	lr
			res = F35Max[item];
 800551e:	4b7b      	ldr	r3, [pc, #492]	@ (800570c <GetItemMAXValue+0x3a4>)
 8005520:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005524:	4770      	bx	lr
			res = F36Max[item];
 8005526:	4b7a      	ldr	r3, [pc, #488]	@ (8005710 <GetItemMAXValue+0x3a8>)
 8005528:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800552c:	4770      	bx	lr
			res = F37Max[item];
 800552e:	4b79      	ldr	r3, [pc, #484]	@ (8005714 <GetItemMAXValue+0x3ac>)
 8005530:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005534:	4770      	bx	lr
			res = F38Max[item];
 8005536:	4b78      	ldr	r3, [pc, #480]	@ (8005718 <GetItemMAXValue+0x3b0>)
 8005538:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800553c:	4770      	bx	lr
			res = F39Max[item];
 800553e:	4b77      	ldr	r3, [pc, #476]	@ (800571c <GetItemMAXValue+0x3b4>)
 8005540:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005544:	4770      	bx	lr
			res = F40Max[item];
 8005546:	4b76      	ldr	r3, [pc, #472]	@ (8005720 <GetItemMAXValue+0x3b8>)
 8005548:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800554c:	4770      	bx	lr
			res = F41Max[item];
 800554e:	4b75      	ldr	r3, [pc, #468]	@ (8005724 <GetItemMAXValue+0x3bc>)
 8005550:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005554:	4770      	bx	lr
			res = F42Max[item];
 8005556:	4b74      	ldr	r3, [pc, #464]	@ (8005728 <GetItemMAXValue+0x3c0>)
 8005558:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800555c:	4770      	bx	lr
			res = F43Max[item];
 800555e:	4b73      	ldr	r3, [pc, #460]	@ (800572c <GetItemMAXValue+0x3c4>)
 8005560:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005564:	4770      	bx	lr
			res = F44Max[item];
 8005566:	4b72      	ldr	r3, [pc, #456]	@ (8005730 <GetItemMAXValue+0x3c8>)
 8005568:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800556c:	4770      	bx	lr
			res = F45Max[item];
 800556e:	4b71      	ldr	r3, [pc, #452]	@ (8005734 <GetItemMAXValue+0x3cc>)
 8005570:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005574:	4770      	bx	lr
			res = F46Max[item];
 8005576:	4b70      	ldr	r3, [pc, #448]	@ (8005738 <GetItemMAXValue+0x3d0>)
 8005578:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800557c:	4770      	bx	lr
			res = F47Max[item];
 800557e:	4b6f      	ldr	r3, [pc, #444]	@ (800573c <GetItemMAXValue+0x3d4>)
 8005580:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005584:	4770      	bx	lr
			res = F48Max[item];
 8005586:	4b6e      	ldr	r3, [pc, #440]	@ (8005740 <GetItemMAXValue+0x3d8>)
 8005588:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800558c:	4770      	bx	lr
			res = F49Max[item];
 800558e:	4b6d      	ldr	r3, [pc, #436]	@ (8005744 <GetItemMAXValue+0x3dc>)
 8005590:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005594:	4770      	bx	lr
			res = F50Max[item];
 8005596:	4b6c      	ldr	r3, [pc, #432]	@ (8005748 <GetItemMAXValue+0x3e0>)
 8005598:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800559c:	4770      	bx	lr
			res = F51Max[item];
 800559e:	4b6b      	ldr	r3, [pc, #428]	@ (800574c <GetItemMAXValue+0x3e4>)
 80055a0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80055a4:	4770      	bx	lr
			res = F52Max[item];
 80055a6:	4b6a      	ldr	r3, [pc, #424]	@ (8005750 <GetItemMAXValue+0x3e8>)
 80055a8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80055ac:	4770      	bx	lr
			res = F53Max[item];
 80055ae:	4b69      	ldr	r3, [pc, #420]	@ (8005754 <GetItemMAXValue+0x3ec>)
 80055b0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80055b4:	4770      	bx	lr
			res = F54Max[item];
 80055b6:	4b68      	ldr	r3, [pc, #416]	@ (8005758 <GetItemMAXValue+0x3f0>)
 80055b8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80055bc:	4770      	bx	lr
			res = F55Max[item];
 80055be:	4b67      	ldr	r3, [pc, #412]	@ (800575c <GetItemMAXValue+0x3f4>)
 80055c0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80055c4:	4770      	bx	lr
			res = F56Max[item];
 80055c6:	4b66      	ldr	r3, [pc, #408]	@ (8005760 <GetItemMAXValue+0x3f8>)
 80055c8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80055cc:	4770      	bx	lr
			res = F57Max[item];
 80055ce:	4b65      	ldr	r3, [pc, #404]	@ (8005764 <GetItemMAXValue+0x3fc>)
 80055d0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80055d4:	4770      	bx	lr
			res = F58Max[item];
 80055d6:	4b64      	ldr	r3, [pc, #400]	@ (8005768 <GetItemMAXValue+0x400>)
 80055d8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80055dc:	4770      	bx	lr
			res = F59Max[item];
 80055de:	4b63      	ldr	r3, [pc, #396]	@ (800576c <GetItemMAXValue+0x404>)
 80055e0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80055e4:	4770      	bx	lr
			res = F60Max[item];
 80055e6:	4b62      	ldr	r3, [pc, #392]	@ (8005770 <GetItemMAXValue+0x408>)
 80055e8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80055ec:	4770      	bx	lr
			res = F61Max[item];
 80055ee:	4b61      	ldr	r3, [pc, #388]	@ (8005774 <GetItemMAXValue+0x40c>)
 80055f0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80055f4:	4770      	bx	lr
			res = F62Max[item];
 80055f6:	4b60      	ldr	r3, [pc, #384]	@ (8005778 <GetItemMAXValue+0x410>)
 80055f8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 80055fc:	4770      	bx	lr
			res = F63Max[item];
 80055fe:	4b5f      	ldr	r3, [pc, #380]	@ (800577c <GetItemMAXValue+0x414>)
 8005600:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005604:	4770      	bx	lr
			res = F64Max[item];
 8005606:	4b5e      	ldr	r3, [pc, #376]	@ (8005780 <GetItemMAXValue+0x418>)
 8005608:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800560c:	4770      	bx	lr
			res = F65Max[item];
 800560e:	4b5d      	ldr	r3, [pc, #372]	@ (8005784 <GetItemMAXValue+0x41c>)
 8005610:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005614:	4770      	bx	lr
			res = F66Max[item];
 8005616:	4b5c      	ldr	r3, [pc, #368]	@ (8005788 <GetItemMAXValue+0x420>)
 8005618:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800561c:	4770      	bx	lr
			res = F67Max[item];
 800561e:	4b5b      	ldr	r3, [pc, #364]	@ (800578c <GetItemMAXValue+0x424>)
 8005620:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005624:	4770      	bx	lr
			res = F68Max[item];
 8005626:	4b5a      	ldr	r3, [pc, #360]	@ (8005790 <GetItemMAXValue+0x428>)
 8005628:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800562c:	4770      	bx	lr
			res = F69Max[item];
 800562e:	4b59      	ldr	r3, [pc, #356]	@ (8005794 <GetItemMAXValue+0x42c>)
 8005630:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005634:	4770      	bx	lr
			res = F70Max[item];
 8005636:	4b58      	ldr	r3, [pc, #352]	@ (8005798 <GetItemMAXValue+0x430>)
 8005638:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800563c:	4770      	bx	lr
			res = F71Max[item];
 800563e:	4b57      	ldr	r3, [pc, #348]	@ (800579c <GetItemMAXValue+0x434>)
 8005640:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005644:	4770      	bx	lr
			res = F72Max[item];
 8005646:	4b56      	ldr	r3, [pc, #344]	@ (80057a0 <GetItemMAXValue+0x438>)
 8005648:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800564c:	4770      	bx	lr
			res = F73Max[item];
 800564e:	4b55      	ldr	r3, [pc, #340]	@ (80057a4 <GetItemMAXValue+0x43c>)
 8005650:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005654:	4770      	bx	lr
			res = F74Max[item];
 8005656:	4b54      	ldr	r3, [pc, #336]	@ (80057a8 <GetItemMAXValue+0x440>)
 8005658:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800565c:	4770      	bx	lr
			res = F75Max[item];
 800565e:	4b53      	ldr	r3, [pc, #332]	@ (80057ac <GetItemMAXValue+0x444>)
 8005660:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005664:	4770      	bx	lr
			res = F76Max[item];
 8005666:	4b52      	ldr	r3, [pc, #328]	@ (80057b0 <GetItemMAXValue+0x448>)
 8005668:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800566c:	4770      	bx	lr
			res = F77Max[item];
 800566e:	4b51      	ldr	r3, [pc, #324]	@ (80057b4 <GetItemMAXValue+0x44c>)
 8005670:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 8005674:	4770      	bx	lr
			res = F78Max[item];
 8005676:	4b50      	ldr	r3, [pc, #320]	@ (80057b8 <GetItemMAXValue+0x450>)
 8005678:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
			break;
 800567c:	4770      	bx	lr
    switch(menu)
 800567e:	2000      	movs	r0, #0
}
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	20000450 	.word	0x20000450
 8005688:	2000043c 	.word	0x2000043c
 800568c:	200003f8 	.word	0x200003f8
 8005690:	200003e4 	.word	0x200003e4
 8005694:	200003bc 	.word	0x200003bc
 8005698:	20000384 	.word	0x20000384
 800569c:	20000348 	.word	0x20000348
 80056a0:	2000031c 	.word	0x2000031c
 80056a4:	200002f0 	.word	0x200002f0
 80056a8:	200002cc 	.word	0x200002cc
 80056ac:	200002ac 	.word	0x200002ac
 80056b0:	20000298 	.word	0x20000298
 80056b4:	20000170 	.word	0x20000170
 80056b8:	20000a9c 	.word	0x20000a9c
 80056bc:	20000a9c 	.word	0x20000a9c
 80056c0:	20000a9c 	.word	0x20000a9c
 80056c4:	20000a9c 	.word	0x20000a9c
 80056c8:	20000a9c 	.word	0x20000a9c
 80056cc:	20000a9c 	.word	0x20000a9c
 80056d0:	20000a9c 	.word	0x20000a9c
 80056d4:	20000a9c 	.word	0x20000a9c
 80056d8:	20000a9c 	.word	0x20000a9c
 80056dc:	20000a9c 	.word	0x20000a9c
 80056e0:	20000a9c 	.word	0x20000a9c
 80056e4:	20000a9c 	.word	0x20000a9c
 80056e8:	20000a9c 	.word	0x20000a9c
 80056ec:	20000a9c 	.word	0x20000a9c
 80056f0:	20000a9c 	.word	0x20000a9c
 80056f4:	20000a9c 	.word	0x20000a9c
 80056f8:	20000a9c 	.word	0x20000a9c
 80056fc:	20000a9c 	.word	0x20000a9c
 8005700:	20000a9c 	.word	0x20000a9c
 8005704:	20000a9c 	.word	0x20000a9c
 8005708:	20000a9c 	.word	0x20000a9c
 800570c:	20000a9c 	.word	0x20000a9c
 8005710:	20000a9c 	.word	0x20000a9c
 8005714:	20000a9c 	.word	0x20000a9c
 8005718:	20000a9c 	.word	0x20000a9c
 800571c:	20000a9c 	.word	0x20000a9c
 8005720:	20000a9c 	.word	0x20000a9c
 8005724:	20000a9c 	.word	0x20000a9c
 8005728:	20000a9c 	.word	0x20000a9c
 800572c:	20000a9c 	.word	0x20000a9c
 8005730:	20000a9c 	.word	0x20000a9c
 8005734:	20000a9c 	.word	0x20000a9c
 8005738:	20000a9c 	.word	0x20000a9c
 800573c:	20000a9c 	.word	0x20000a9c
 8005740:	20000a9c 	.word	0x20000a9c
 8005744:	20000a9c 	.word	0x20000a9c
 8005748:	20000a9c 	.word	0x20000a9c
 800574c:	20000a9c 	.word	0x20000a9c
 8005750:	20000a9c 	.word	0x20000a9c
 8005754:	20000a9c 	.word	0x20000a9c
 8005758:	20000a9c 	.word	0x20000a9c
 800575c:	20000a9c 	.word	0x20000a9c
 8005760:	20000a9c 	.word	0x20000a9c
 8005764:	20000a9c 	.word	0x20000a9c
 8005768:	20000a9c 	.word	0x20000a9c
 800576c:	20000a9c 	.word	0x20000a9c
 8005770:	20000a9c 	.word	0x20000a9c
 8005774:	20000a9c 	.word	0x20000a9c
 8005778:	20000a9c 	.word	0x20000a9c
 800577c:	20000a9c 	.word	0x20000a9c
 8005780:	20000a9c 	.word	0x20000a9c
 8005784:	20000a9c 	.word	0x20000a9c
 8005788:	20000a9c 	.word	0x20000a9c
 800578c:	20000a9c 	.word	0x20000a9c
 8005790:	20000a9c 	.word	0x20000a9c
 8005794:	20000a9c 	.word	0x20000a9c
 8005798:	20000a9c 	.word	0x20000a9c
 800579c:	20000a9c 	.word	0x20000a9c
 80057a0:	20000a9c 	.word	0x20000a9c
 80057a4:	20000a9c 	.word	0x20000a9c
 80057a8:	20000a9c 	.word	0x20000a9c
 80057ac:	20000a9c 	.word	0x20000a9c
 80057b0:	20000a9c 	.word	0x20000a9c
 80057b4:	20000a9c 	.word	0x20000a9c
 80057b8:	20000a9c 	.word	0x20000a9c

080057bc <SaveItemValue>:
    g_menu_index = GET_MENU(menu, MENU_MAX);
 80057bc:	284d      	cmp	r0, #77	@ 0x4d
 80057be:	d901      	bls.n	80057c4 <SaveItemValue+0x8>
 80057c0:	384e      	subs	r0, #78	@ 0x4e
 80057c2:	b2c0      	uxtb	r0, r0
 80057c4:	4b8f      	ldr	r3, [pc, #572]	@ (8005a04 <SaveItemValue+0x248>)
 80057c6:	7018      	strb	r0, [r3, #0]
    switch (g_menu_index)
 80057c8:	284d      	cmp	r0, #77	@ 0x4d
 80057ca:	d859      	bhi.n	8005880 <SaveItemValue+0xc4>
 80057cc:	e8df f010 	tbh	[pc, r0, lsl #1]
 80057d0:	005b004e 	.word	0x005b004e
 80057d4:	00800066 	.word	0x00800066
 80057d8:	009b008b 	.word	0x009b008b
 80057dc:	00e200bc 	.word	0x00e200bc
 80057e0:	00f800ed 	.word	0x00f800ed
 80057e4:	010e0103 	.word	0x010e0103
 80057e8:	0159014e 	.word	0x0159014e
 80057ec:	016f0164 	.word	0x016f0164
 80057f0:	0185017a 	.word	0x0185017a
 80057f4:	019b0190 	.word	0x019b0190
 80057f8:	01b101a6 	.word	0x01b101a6
 80057fc:	01c701bc 	.word	0x01c701bc
 8005800:	01dd01d2 	.word	0x01dd01d2
 8005804:	01f301e8 	.word	0x01f301e8
 8005808:	020901fe 	.word	0x020901fe
 800580c:	021f0214 	.word	0x021f0214
 8005810:	0235022a 	.word	0x0235022a
 8005814:	024b0240 	.word	0x024b0240
 8005818:	02610256 	.word	0x02610256
 800581c:	0277026c 	.word	0x0277026c
 8005820:	03020282 	.word	0x03020282
 8005824:	0318030d 	.word	0x0318030d
 8005828:	032e0323 	.word	0x032e0323
 800582c:	03440339 	.word	0x03440339
 8005830:	035a034f 	.word	0x035a034f
 8005834:	03700365 	.word	0x03700365
 8005838:	0386037b 	.word	0x0386037b
 800583c:	039c0391 	.word	0x039c0391
 8005840:	03b203a7 	.word	0x03b203a7
 8005844:	03c803bd 	.word	0x03c803bd
 8005848:	03de03d3 	.word	0x03de03d3
 800584c:	03f403e9 	.word	0x03f403e9
 8005850:	040a03ff 	.word	0x040a03ff
 8005854:	04200415 	.word	0x04200415
 8005858:	0436042b 	.word	0x0436042b
 800585c:	04c204b6 	.word	0x04c204b6
 8005860:	04da04ce 	.word	0x04da04ce
 8005864:	04f204e6 	.word	0x04f204e6
 8005868:	050a04fe 	.word	0x050a04fe
        value = CHECK_VALUE(value, F1Max[item]);
 800586c:	4b66      	ldr	r3, [pc, #408]	@ (8005a08 <SaveItemValue+0x24c>)
 800586e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005872:	429a      	cmp	r2, r3
 8005874:	db01      	blt.n	800587a <SaveItemValue+0xbe>
 8005876:	3b01      	subs	r3, #1
 8005878:	b21a      	sxth	r2, r3
        g_F1[item] = value;
 800587a:	4b64      	ldr	r3, [pc, #400]	@ (8005a0c <SaveItemValue+0x250>)
 800587c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    g_item_index = item;
 8005880:	4b63      	ldr	r3, [pc, #396]	@ (8005a10 <SaveItemValue+0x254>)
 8005882:	7019      	strb	r1, [r3, #0]
}
 8005884:	4770      	bx	lr
        value = CHECK_VALUE(value, F2Max[item]);
 8005886:	4b63      	ldr	r3, [pc, #396]	@ (8005a14 <SaveItemValue+0x258>)
 8005888:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800588c:	429a      	cmp	r2, r3
 800588e:	db01      	blt.n	8005894 <SaveItemValue+0xd8>
 8005890:	3b01      	subs	r3, #1
 8005892:	b21a      	sxth	r2, r3
        g_F2[item] = value;
 8005894:	4b60      	ldr	r3, [pc, #384]	@ (8005a18 <SaveItemValue+0x25c>)
 8005896:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 800589a:	e7f1      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F3Max[item]);
 800589c:	4b5f      	ldr	r3, [pc, #380]	@ (8005a1c <SaveItemValue+0x260>)
 800589e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	db01      	blt.n	80058aa <SaveItemValue+0xee>
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b21a      	sxth	r2, r3
        g_F3[item] = value;
 80058aa:	b292      	uxth	r2, r2
 80058ac:	4b5c      	ldr	r3, [pc, #368]	@ (8005a20 <SaveItemValue+0x264>)
 80058ae:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		if(item == F3_ABS_3_VehicleSpeed || item == F3_ABS_3_VehicleSpeedValid || item == F3_ABS_3_Timeout_Flag){
 80058b2:	2902      	cmp	r1, #2
 80058b4:	d803      	bhi.n	80058be <SaveItemValue+0x102>
			g_F1[item] = g_F3[item];
 80058b6:	4b55      	ldr	r3, [pc, #340]	@ (8005a0c <SaveItemValue+0x250>)
 80058b8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 80058bc:	e7e0      	b.n	8005880 <SaveItemValue+0xc4>
		else if(item == F3_EMS_2_EngineSpeed || item == F3_EMS_2_EngineSpeedValid || item == F3_EMS_2_Timeout_Flag){
 80058be:	1ecb      	subs	r3, r1, #3
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d8dc      	bhi.n	8005880 <SaveItemValue+0xc4>
			g_F2[item - 3] = g_F3[item];
 80058c6:	1ecb      	subs	r3, r1, #3
 80058c8:	4853      	ldr	r0, [pc, #332]	@ (8005a18 <SaveItemValue+0x25c>)
 80058ca:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 80058ce:	e7d7      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F4Max[item]);
 80058d0:	4b54      	ldr	r3, [pc, #336]	@ (8005a24 <SaveItemValue+0x268>)
 80058d2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	db01      	blt.n	80058de <SaveItemValue+0x122>
 80058da:	3b01      	subs	r3, #1
 80058dc:	b21a      	sxth	r2, r3
        g_F4[item] = value;
 80058de:	4b52      	ldr	r3, [pc, #328]	@ (8005a28 <SaveItemValue+0x26c>)
 80058e0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 80058e4:	e7cc      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F5Max[item]);
 80058e6:	4b51      	ldr	r3, [pc, #324]	@ (8005a2c <SaveItemValue+0x270>)
 80058e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d301      	bcc.n	80058f4 <SaveItemValue+0x138>
 80058f0:	3b01      	subs	r3, #1
 80058f2:	b21a      	sxth	r2, r3
        g_F5[item] = value;
 80058f4:	4b4e      	ldr	r3, [pc, #312]	@ (8005a30 <SaveItemValue+0x274>)
 80058f6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		if(item == F5_ABS_3_VehicleSpeed || item == F5_ABS_3_VehicleSpeedValid || item == F5_ABS_3_Timeout_Flag){
 80058fa:	2902      	cmp	r1, #2
 80058fc:	d8c0      	bhi.n	8005880 <SaveItemValue+0xc4>
			g_F1[item] = g_F5[item];
 80058fe:	4b43      	ldr	r3, [pc, #268]	@ (8005a0c <SaveItemValue+0x250>)
 8005900:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8005904:	e7bc      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F6Max[item]);
 8005906:	4b4b      	ldr	r3, [pc, #300]	@ (8005a34 <SaveItemValue+0x278>)
 8005908:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800590c:	429a      	cmp	r2, r3
 800590e:	db01      	blt.n	8005914 <SaveItemValue+0x158>
 8005910:	3b01      	subs	r3, #1
 8005912:	b21a      	sxth	r2, r3
        g_F6[item] = value;
 8005914:	b292      	uxth	r2, r2
 8005916:	4b48      	ldr	r3, [pc, #288]	@ (8005a38 <SaveItemValue+0x27c>)
 8005918:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		if(item == F6_ABS_3_VehicleSpeed || item == F6_ABS_3_VehicleSpeedValid || item == F6_ABS_3_Timeout_Flag){
 800591c:	2902      	cmp	r1, #2
 800591e:	d803      	bhi.n	8005928 <SaveItemValue+0x16c>
			g_F1[item] = g_F6[item];
 8005920:	4b3a      	ldr	r3, [pc, #232]	@ (8005a0c <SaveItemValue+0x250>)
 8005922:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8005926:	e7ab      	b.n	8005880 <SaveItemValue+0xc4>
		else if(item == F6_EMS_2_EngineSpeed || item == F6_EMS_2_EngineSpeedValid || item == F6_EMS_2_Timeout_Flag){
 8005928:	1ecb      	subs	r3, r1, #3
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d804      	bhi.n	800593a <SaveItemValue+0x17e>
			g_F2[item - 3] = g_F6[item];
 8005930:	1ecb      	subs	r3, r1, #3
 8005932:	4839      	ldr	r0, [pc, #228]	@ (8005a18 <SaveItemValue+0x25c>)
 8005934:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8005938:	e7a2      	b.n	8005880 <SaveItemValue+0xc4>
		else if(item == F6_EMS_4_Timeout_Flag){
 800593a:	2907      	cmp	r1, #7
 800593c:	d1a0      	bne.n	8005880 <SaveItemValue+0xc4>
			g_F4[EMS_4_Timeout_Flag] = g_F6[F6_EMS_4_Timeout_Flag];
 800593e:	4b3e      	ldr	r3, [pc, #248]	@ (8005a38 <SaveItemValue+0x27c>)
 8005940:	89da      	ldrh	r2, [r3, #14]
 8005942:	4b39      	ldr	r3, [pc, #228]	@ (8005a28 <SaveItemValue+0x26c>)
 8005944:	809a      	strh	r2, [r3, #4]
 8005946:	e79b      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F7Max[item]);
 8005948:	4b3c      	ldr	r3, [pc, #240]	@ (8005a3c <SaveItemValue+0x280>)
 800594a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800594e:	429a      	cmp	r2, r3
 8005950:	db01      	blt.n	8005956 <SaveItemValue+0x19a>
 8005952:	3b01      	subs	r3, #1
 8005954:	b21a      	sxth	r2, r3
        g_F7[item] = value;
 8005956:	b292      	uxth	r2, r2
 8005958:	4b39      	ldr	r3, [pc, #228]	@ (8005a40 <SaveItemValue+0x284>)
 800595a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 800595e:	2907      	cmp	r1, #7
 8005960:	d88e      	bhi.n	8005880 <SaveItemValue+0xc4>
 8005962:	e8df f001 	tbb	[pc, r1]
 8005966:	0404      	.short	0x0404
 8005968:	08080804 	.word	0x08080804
 800596c:	0d12      	.short	0x0d12
			g_F1[item] = g_F7[item];
 800596e:	4b27      	ldr	r3, [pc, #156]	@ (8005a0c <SaveItemValue+0x250>)
 8005970:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8005974:	e784      	b.n	8005880 <SaveItemValue+0xc4>
			g_F2[item - 3] = g_F7[item];
 8005976:	1ecb      	subs	r3, r1, #3
 8005978:	4827      	ldr	r0, [pc, #156]	@ (8005a18 <SaveItemValue+0x25c>)
 800597a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800597e:	e77f      	b.n	8005880 <SaveItemValue+0xc4>
			g_F4[EMS_4_Timeout_Flag] = g_F7[F7_EMS_4_Timeout_Flag];
 8005980:	4b2f      	ldr	r3, [pc, #188]	@ (8005a40 <SaveItemValue+0x284>)
 8005982:	89da      	ldrh	r2, [r3, #14]
 8005984:	4b28      	ldr	r3, [pc, #160]	@ (8005a28 <SaveItemValue+0x26c>)
 8005986:	809a      	strh	r2, [r3, #4]
 8005988:	e77a      	b.n	8005880 <SaveItemValue+0xc4>
			g_F6[EMS_4_FuelConsumption] = g_F7[F7_EMS_4_FuelConsumption];
 800598a:	4b2d      	ldr	r3, [pc, #180]	@ (8005a40 <SaveItemValue+0x284>)
 800598c:	899a      	ldrh	r2, [r3, #12]
 800598e:	4b2a      	ldr	r3, [pc, #168]	@ (8005a38 <SaveItemValue+0x27c>)
 8005990:	819a      	strh	r2, [r3, #12]
 8005992:	e775      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F8Max[item]);
 8005994:	4b2b      	ldr	r3, [pc, #172]	@ (8005a44 <SaveItemValue+0x288>)
 8005996:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800599a:	429a      	cmp	r2, r3
 800599c:	db01      	blt.n	80059a2 <SaveItemValue+0x1e6>
 800599e:	3b01      	subs	r3, #1
 80059a0:	b21a      	sxth	r2, r3
        g_F8[item] = value;
 80059a2:	4b29      	ldr	r3, [pc, #164]	@ (8005a48 <SaveItemValue+0x28c>)
 80059a4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 80059a8:	e76a      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F9Max[item]);
 80059aa:	4b28      	ldr	r3, [pc, #160]	@ (8005a4c <SaveItemValue+0x290>)
 80059ac:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	db01      	blt.n	80059b8 <SaveItemValue+0x1fc>
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b21a      	sxth	r2, r3
        g_F9[item] = value;
 80059b8:	4b25      	ldr	r3, [pc, #148]	@ (8005a50 <SaveItemValue+0x294>)
 80059ba:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 80059be:	e75f      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F10Max[item]);
 80059c0:	4b24      	ldr	r3, [pc, #144]	@ (8005a54 <SaveItemValue+0x298>)
 80059c2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	db01      	blt.n	80059ce <SaveItemValue+0x212>
 80059ca:	3b01      	subs	r3, #1
 80059cc:	b21a      	sxth	r2, r3
        g_F10[item] = value;
 80059ce:	4b22      	ldr	r3, [pc, #136]	@ (8005a58 <SaveItemValue+0x29c>)
 80059d0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 80059d4:	e754      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F11Max[item]);
 80059d6:	4b21      	ldr	r3, [pc, #132]	@ (8005a5c <SaveItemValue+0x2a0>)
 80059d8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80059dc:	429a      	cmp	r2, r3
 80059de:	db01      	blt.n	80059e4 <SaveItemValue+0x228>
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b21a      	sxth	r2, r3
        g_F11[item] = value;
 80059e4:	4b1e      	ldr	r3, [pc, #120]	@ (8005a60 <SaveItemValue+0x2a4>)
 80059e6:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 80059ea:	e749      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F12Max[item]);
 80059ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005a64 <SaveItemValue+0x2a8>)
 80059ee:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	db01      	blt.n	80059fa <SaveItemValue+0x23e>
 80059f6:	3b01      	subs	r3, #1
 80059f8:	b21a      	sxth	r2, r3
        g_F12[item] = value;
 80059fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005a68 <SaveItemValue+0x2ac>)
 80059fc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005a00:	e73e      	b.n	8005880 <SaveItemValue+0xc4>
 8005a02:	bf00      	nop
 8005a04:	20000a9b 	.word	0x20000a9b
 8005a08:	20000450 	.word	0x20000450
 8005a0c:	200028d8 	.word	0x200028d8
 8005a10:	20000a9a 	.word	0x20000a9a
 8005a14:	2000043c 	.word	0x2000043c
 8005a18:	20002810 	.word	0x20002810
 8005a1c:	200003f8 	.word	0x200003f8
 8005a20:	20002538 	.word	0x20002538
 8005a24:	200003e4 	.word	0x200003e4
 8005a28:	200003dc 	.word	0x200003dc
 8005a2c:	200003bc 	.word	0x200003bc
 8005a30:	20002368 	.word	0x20002368
 8005a34:	20000384 	.word	0x20000384
 8005a38:	20002114 	.word	0x20002114
 8005a3c:	20000348 	.word	0x20000348
 8005a40:	20001e80 	.word	0x20001e80
 8005a44:	2000031c 	.word	0x2000031c
 8005a48:	20001cb0 	.word	0x20001cb0
 8005a4c:	200002f0 	.word	0x200002f0
 8005a50:	20001ae0 	.word	0x20001ae0
 8005a54:	200002cc 	.word	0x200002cc
 8005a58:	20001954 	.word	0x20001954
 8005a5c:	200002ac 	.word	0x200002ac
 8005a60:	20001808 	.word	0x20001808
 8005a64:	20000298 	.word	0x20000298
 8005a68:	20001740 	.word	0x20001740
        value = CHECK_VALUE(value, F13Max[item]);
 8005a6c:	4b9f      	ldr	r3, [pc, #636]	@ (8005cec <SaveItemValue+0x530>)
 8005a6e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	db01      	blt.n	8005a7a <SaveItemValue+0x2be>
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b21a      	sxth	r2, r3
        g_F13[item] = value;
 8005a7a:	4b9d      	ldr	r3, [pc, #628]	@ (8005cf0 <SaveItemValue+0x534>)
 8005a7c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005a80:	e6fe      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F14Max[item]);
 8005a82:	4b9c      	ldr	r3, [pc, #624]	@ (8005cf4 <SaveItemValue+0x538>)
 8005a84:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	db01      	blt.n	8005a90 <SaveItemValue+0x2d4>
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b21a      	sxth	r2, r3
        g_F14[item] = value;
 8005a90:	4b99      	ldr	r3, [pc, #612]	@ (8005cf8 <SaveItemValue+0x53c>)
 8005a92:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005a96:	e6f3      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F15Max[item]);
 8005a98:	4b98      	ldr	r3, [pc, #608]	@ (8005cfc <SaveItemValue+0x540>)
 8005a9a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	db01      	blt.n	8005aa6 <SaveItemValue+0x2ea>
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b21a      	sxth	r2, r3
        g_F15[item] = value;
 8005aa6:	4b96      	ldr	r3, [pc, #600]	@ (8005d00 <SaveItemValue+0x544>)
 8005aa8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005aac:	e6e8      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F16Max[item]);
 8005aae:	4b95      	ldr	r3, [pc, #596]	@ (8005d04 <SaveItemValue+0x548>)
 8005ab0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	db01      	blt.n	8005abc <SaveItemValue+0x300>
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	b21a      	sxth	r2, r3
        g_F16[item] = value;
 8005abc:	4b92      	ldr	r3, [pc, #584]	@ (8005d08 <SaveItemValue+0x54c>)
 8005abe:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005ac2:	e6dd      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F17Max[item]);
 8005ac4:	4b91      	ldr	r3, [pc, #580]	@ (8005d0c <SaveItemValue+0x550>)
 8005ac6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	db01      	blt.n	8005ad2 <SaveItemValue+0x316>
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b21a      	sxth	r2, r3
        g_F17[item] = value;
 8005ad2:	4b8f      	ldr	r3, [pc, #572]	@ (8005d10 <SaveItemValue+0x554>)
 8005ad4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005ad8:	e6d2      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F18Max[item]);
 8005ada:	4b8e      	ldr	r3, [pc, #568]	@ (8005d14 <SaveItemValue+0x558>)
 8005adc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	db01      	blt.n	8005ae8 <SaveItemValue+0x32c>
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b21a      	sxth	r2, r3
        g_F18[item] = value;
 8005ae8:	4b8b      	ldr	r3, [pc, #556]	@ (8005d18 <SaveItemValue+0x55c>)
 8005aea:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005aee:	e6c7      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F19Max[item]);
 8005af0:	4b8a      	ldr	r3, [pc, #552]	@ (8005d1c <SaveItemValue+0x560>)
 8005af2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	db01      	blt.n	8005afe <SaveItemValue+0x342>
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b21a      	sxth	r2, r3
        g_F19[item] = value;
 8005afe:	4b88      	ldr	r3, [pc, #544]	@ (8005d20 <SaveItemValue+0x564>)
 8005b00:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005b04:	e6bc      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F20Max[item]);
 8005b06:	4b87      	ldr	r3, [pc, #540]	@ (8005d24 <SaveItemValue+0x568>)
 8005b08:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	db01      	blt.n	8005b14 <SaveItemValue+0x358>
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b21a      	sxth	r2, r3
        g_F20[item] = value;
 8005b14:	4b84      	ldr	r3, [pc, #528]	@ (8005d28 <SaveItemValue+0x56c>)
 8005b16:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005b1a:	e6b1      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F21Max[item]);
 8005b1c:	4b83      	ldr	r3, [pc, #524]	@ (8005d2c <SaveItemValue+0x570>)
 8005b1e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	db01      	blt.n	8005b2a <SaveItemValue+0x36e>
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b21a      	sxth	r2, r3
        g_F21[item] = value;
 8005b2a:	4b81      	ldr	r3, [pc, #516]	@ (8005d30 <SaveItemValue+0x574>)
 8005b2c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005b30:	e6a6      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F22Max[item]);
 8005b32:	4b80      	ldr	r3, [pc, #512]	@ (8005d34 <SaveItemValue+0x578>)
 8005b34:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	db01      	blt.n	8005b40 <SaveItemValue+0x384>
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b21a      	sxth	r2, r3
        g_F22[item] = value;
 8005b40:	4b7d      	ldr	r3, [pc, #500]	@ (8005d38 <SaveItemValue+0x57c>)
 8005b42:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005b46:	e69b      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F23Max[item]);
 8005b48:	4b7c      	ldr	r3, [pc, #496]	@ (8005d3c <SaveItemValue+0x580>)
 8005b4a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	db01      	blt.n	8005b56 <SaveItemValue+0x39a>
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b21a      	sxth	r2, r3
        g_F23[item] = value;
 8005b56:	4b7a      	ldr	r3, [pc, #488]	@ (8005d40 <SaveItemValue+0x584>)
 8005b58:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005b5c:	e690      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F24Max[item]);
 8005b5e:	4b79      	ldr	r3, [pc, #484]	@ (8005d44 <SaveItemValue+0x588>)
 8005b60:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	db01      	blt.n	8005b6c <SaveItemValue+0x3b0>
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b21a      	sxth	r2, r3
        g_F24[item] = value;
 8005b6c:	4b76      	ldr	r3, [pc, #472]	@ (8005d48 <SaveItemValue+0x58c>)
 8005b6e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005b72:	e685      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F25Max[item]);
 8005b74:	4b75      	ldr	r3, [pc, #468]	@ (8005d4c <SaveItemValue+0x590>)
 8005b76:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	db01      	blt.n	8005b82 <SaveItemValue+0x3c6>
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b21a      	sxth	r2, r3
        g_F25[item] = value;
 8005b82:	4b73      	ldr	r3, [pc, #460]	@ (8005d50 <SaveItemValue+0x594>)
 8005b84:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005b88:	e67a      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F26Max[item]);
 8005b8a:	4b72      	ldr	r3, [pc, #456]	@ (8005d54 <SaveItemValue+0x598>)
 8005b8c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	db01      	blt.n	8005b98 <SaveItemValue+0x3dc>
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b21a      	sxth	r2, r3
        g_F26[item] = value;
 8005b98:	4b6f      	ldr	r3, [pc, #444]	@ (8005d58 <SaveItemValue+0x59c>)
 8005b9a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005b9e:	e66f      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F27Max[item]);
 8005ba0:	4b6e      	ldr	r3, [pc, #440]	@ (8005d5c <SaveItemValue+0x5a0>)
 8005ba2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	db01      	blt.n	8005bae <SaveItemValue+0x3f2>
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b21a      	sxth	r2, r3
        g_F27[item] = value;
 8005bae:	4b6c      	ldr	r3, [pc, #432]	@ (8005d60 <SaveItemValue+0x5a4>)
 8005bb0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005bb4:	e664      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F28Max[item]);
 8005bb6:	4b6b      	ldr	r3, [pc, #428]	@ (8005d64 <SaveItemValue+0x5a8>)
 8005bb8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	db01      	blt.n	8005bc4 <SaveItemValue+0x408>
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b21a      	sxth	r2, r3
        g_F28[item] = value;
 8005bc4:	4b68      	ldr	r3, [pc, #416]	@ (8005d68 <SaveItemValue+0x5ac>)
 8005bc6:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005bca:	e659      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F29Max[item]);
 8005bcc:	4b67      	ldr	r3, [pc, #412]	@ (8005d6c <SaveItemValue+0x5b0>)
 8005bce:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	db01      	blt.n	8005bda <SaveItemValue+0x41e>
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	b21a      	sxth	r2, r3
        g_F29[item] = value;
 8005bda:	4b65      	ldr	r3, [pc, #404]	@ (8005d70 <SaveItemValue+0x5b4>)
 8005bdc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005be0:	e64e      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F30Max[item]);
 8005be2:	4b64      	ldr	r3, [pc, #400]	@ (8005d74 <SaveItemValue+0x5b8>)
 8005be4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	db01      	blt.n	8005bf0 <SaveItemValue+0x434>
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b21a      	sxth	r2, r3
        g_F30[item] = value;
 8005bf0:	4b61      	ldr	r3, [pc, #388]	@ (8005d78 <SaveItemValue+0x5bc>)
 8005bf2:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005bf6:	e643      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F31Max[item]);
 8005bf8:	4b60      	ldr	r3, [pc, #384]	@ (8005d7c <SaveItemValue+0x5c0>)
 8005bfa:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	db01      	blt.n	8005c06 <SaveItemValue+0x44a>
 8005c02:	3b01      	subs	r3, #1
 8005c04:	b21a      	sxth	r2, r3
        g_F31[item] = value;
 8005c06:	4b5e      	ldr	r3, [pc, #376]	@ (8005d80 <SaveItemValue+0x5c4>)
 8005c08:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005c0c:	e638      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F32Max[item]);
 8005c0e:	4b5d      	ldr	r3, [pc, #372]	@ (8005d84 <SaveItemValue+0x5c8>)
 8005c10:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	db01      	blt.n	8005c1c <SaveItemValue+0x460>
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	b21a      	sxth	r2, r3
        g_F32[item] = value;
 8005c1c:	4b5a      	ldr	r3, [pc, #360]	@ (8005d88 <SaveItemValue+0x5cc>)
 8005c1e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005c22:	e62d      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F33Max[item]);
 8005c24:	4b59      	ldr	r3, [pc, #356]	@ (8005d8c <SaveItemValue+0x5d0>)
 8005c26:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	db01      	blt.n	8005c32 <SaveItemValue+0x476>
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b21a      	sxth	r2, r3
        g_F33[item] = value;
 8005c32:	4b57      	ldr	r3, [pc, #348]	@ (8005d90 <SaveItemValue+0x5d4>)
 8005c34:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005c38:	e622      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F34Max[item]);
 8005c3a:	4b56      	ldr	r3, [pc, #344]	@ (8005d94 <SaveItemValue+0x5d8>)
 8005c3c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	db01      	blt.n	8005c48 <SaveItemValue+0x48c>
 8005c44:	3b01      	subs	r3, #1
 8005c46:	b21a      	sxth	r2, r3
        g_F34[item] = value;
 8005c48:	4b53      	ldr	r3, [pc, #332]	@ (8005d98 <SaveItemValue+0x5dc>)
 8005c4a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005c4e:	e617      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F35Max[item]);
 8005c50:	4b52      	ldr	r3, [pc, #328]	@ (8005d9c <SaveItemValue+0x5e0>)
 8005c52:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	db01      	blt.n	8005c5e <SaveItemValue+0x4a2>
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b21a      	sxth	r2, r3
        g_F35[item] = value;
 8005c5e:	4b50      	ldr	r3, [pc, #320]	@ (8005da0 <SaveItemValue+0x5e4>)
 8005c60:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005c64:	e60c      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F36Max[item]);
 8005c66:	4b4f      	ldr	r3, [pc, #316]	@ (8005da4 <SaveItemValue+0x5e8>)
 8005c68:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	db01      	blt.n	8005c74 <SaveItemValue+0x4b8>
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b21a      	sxth	r2, r3
        g_F36[item] = value;
 8005c74:	4b4c      	ldr	r3, [pc, #304]	@ (8005da8 <SaveItemValue+0x5ec>)
 8005c76:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005c7a:	e601      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F37Max[item]);
 8005c7c:	4b4b      	ldr	r3, [pc, #300]	@ (8005dac <SaveItemValue+0x5f0>)
 8005c7e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	db01      	blt.n	8005c8a <SaveItemValue+0x4ce>
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b21a      	sxth	r2, r3
        g_F37[item] = value;
 8005c8a:	4b49      	ldr	r3, [pc, #292]	@ (8005db0 <SaveItemValue+0x5f4>)
 8005c8c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005c90:	e5f6      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F38Max[item]);
 8005c92:	4b48      	ldr	r3, [pc, #288]	@ (8005db4 <SaveItemValue+0x5f8>)
 8005c94:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	db01      	blt.n	8005ca0 <SaveItemValue+0x4e4>
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b21a      	sxth	r2, r3
        g_F38[item] = value;
 8005ca0:	4b45      	ldr	r3, [pc, #276]	@ (8005db8 <SaveItemValue+0x5fc>)
 8005ca2:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005ca6:	e5eb      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F39Max[item]);
 8005ca8:	4b44      	ldr	r3, [pc, #272]	@ (8005dbc <SaveItemValue+0x600>)
 8005caa:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	db01      	blt.n	8005cb6 <SaveItemValue+0x4fa>
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b21a      	sxth	r2, r3
        g_F39[item] = value;
 8005cb6:	4b42      	ldr	r3, [pc, #264]	@ (8005dc0 <SaveItemValue+0x604>)
 8005cb8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005cbc:	e5e0      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F40Max[item]);
 8005cbe:	4b41      	ldr	r3, [pc, #260]	@ (8005dc4 <SaveItemValue+0x608>)
 8005cc0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	db01      	blt.n	8005ccc <SaveItemValue+0x510>
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b21a      	sxth	r2, r3
        g_F40[item] = value;
 8005ccc:	4b3e      	ldr	r3, [pc, #248]	@ (8005dc8 <SaveItemValue+0x60c>)
 8005cce:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005cd2:	e5d5      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F41Max[item]);
 8005cd4:	4b3d      	ldr	r3, [pc, #244]	@ (8005dcc <SaveItemValue+0x610>)
 8005cd6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	db01      	blt.n	8005ce2 <SaveItemValue+0x526>
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b21a      	sxth	r2, r3
        g_F41[item] = value;
 8005ce2:	4b3b      	ldr	r3, [pc, #236]	@ (8005dd0 <SaveItemValue+0x614>)
 8005ce4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005ce8:	e5ca      	b.n	8005880 <SaveItemValue+0xc4>
 8005cea:	bf00      	nop
 8005cec:	20000170 	.word	0x20000170
 8005cf0:	20000a9c 	.word	0x20000a9c
 8005cf4:	20000a9c 	.word	0x20000a9c
 8005cf8:	20000a9c 	.word	0x20000a9c
 8005cfc:	20000a9c 	.word	0x20000a9c
 8005d00:	20000a9c 	.word	0x20000a9c
 8005d04:	20000a9c 	.word	0x20000a9c
 8005d08:	20000a9c 	.word	0x20000a9c
 8005d0c:	20000a9c 	.word	0x20000a9c
 8005d10:	20000a9c 	.word	0x20000a9c
 8005d14:	20000a9c 	.word	0x20000a9c
 8005d18:	20000a9c 	.word	0x20000a9c
 8005d1c:	20000a9c 	.word	0x20000a9c
 8005d20:	20000a9c 	.word	0x20000a9c
 8005d24:	20000a9c 	.word	0x20000a9c
 8005d28:	20000a9c 	.word	0x20000a9c
 8005d2c:	20000a9c 	.word	0x20000a9c
 8005d30:	20000a9c 	.word	0x20000a9c
 8005d34:	20000a9c 	.word	0x20000a9c
 8005d38:	20000a9c 	.word	0x20000a9c
 8005d3c:	20000a9c 	.word	0x20000a9c
 8005d40:	20000a9c 	.word	0x20000a9c
 8005d44:	20000a9c 	.word	0x20000a9c
 8005d48:	20000a9c 	.word	0x20000a9c
 8005d4c:	20000a9c 	.word	0x20000a9c
 8005d50:	20000a9c 	.word	0x20000a9c
 8005d54:	20000a9c 	.word	0x20000a9c
 8005d58:	20000a9c 	.word	0x20000a9c
 8005d5c:	20000a9c 	.word	0x20000a9c
 8005d60:	20000a9c 	.word	0x20000a9c
 8005d64:	20000a9c 	.word	0x20000a9c
 8005d68:	20000a9c 	.word	0x20000a9c
 8005d6c:	20000a9c 	.word	0x20000a9c
 8005d70:	20000a9c 	.word	0x20000a9c
 8005d74:	20000a9c 	.word	0x20000a9c
 8005d78:	20000a9c 	.word	0x20000a9c
 8005d7c:	20000a9c 	.word	0x20000a9c
 8005d80:	20000a9c 	.word	0x20000a9c
 8005d84:	20000a9c 	.word	0x20000a9c
 8005d88:	20000a9c 	.word	0x20000a9c
 8005d8c:	20000a9c 	.word	0x20000a9c
 8005d90:	20000a9c 	.word	0x20000a9c
 8005d94:	20000a9c 	.word	0x20000a9c
 8005d98:	20000a9c 	.word	0x20000a9c
 8005d9c:	20000a9c 	.word	0x20000a9c
 8005da0:	20000a9c 	.word	0x20000a9c
 8005da4:	20000a9c 	.word	0x20000a9c
 8005da8:	20000a9c 	.word	0x20000a9c
 8005dac:	20000a9c 	.word	0x20000a9c
 8005db0:	20000a9c 	.word	0x20000a9c
 8005db4:	20000a9c 	.word	0x20000a9c
 8005db8:	20000a9c 	.word	0x20000a9c
 8005dbc:	20000a9c 	.word	0x20000a9c
 8005dc0:	20000a9c 	.word	0x20000a9c
 8005dc4:	20000a9c 	.word	0x20000a9c
 8005dc8:	20000a9c 	.word	0x20000a9c
 8005dcc:	20000a9c 	.word	0x20000a9c
 8005dd0:	20000a9c 	.word	0x20000a9c
        value = CHECK_VALUE(value, F42Max[item]);
 8005dd4:	4b9f      	ldr	r3, [pc, #636]	@ (8006054 <SaveItemValue+0x898>)
 8005dd6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	db01      	blt.n	8005de2 <SaveItemValue+0x626>
 8005dde:	3b01      	subs	r3, #1
 8005de0:	b21a      	sxth	r2, r3
        g_F42[item] = value;
 8005de2:	4b9d      	ldr	r3, [pc, #628]	@ (8006058 <SaveItemValue+0x89c>)
 8005de4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005de8:	e54a      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F43Max[item]);
 8005dea:	4b9c      	ldr	r3, [pc, #624]	@ (800605c <SaveItemValue+0x8a0>)
 8005dec:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	db01      	blt.n	8005df8 <SaveItemValue+0x63c>
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b21a      	sxth	r2, r3
        g_F43[item] = value;
 8005df8:	4b99      	ldr	r3, [pc, #612]	@ (8006060 <SaveItemValue+0x8a4>)
 8005dfa:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005dfe:	e53f      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F44Max[item]);
 8005e00:	4b98      	ldr	r3, [pc, #608]	@ (8006064 <SaveItemValue+0x8a8>)
 8005e02:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	db01      	blt.n	8005e0e <SaveItemValue+0x652>
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b21a      	sxth	r2, r3
        g_F44[item] = value;
 8005e0e:	4b96      	ldr	r3, [pc, #600]	@ (8006068 <SaveItemValue+0x8ac>)
 8005e10:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005e14:	e534      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F45Max[item]);
 8005e16:	4b95      	ldr	r3, [pc, #596]	@ (800606c <SaveItemValue+0x8b0>)
 8005e18:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	db01      	blt.n	8005e24 <SaveItemValue+0x668>
 8005e20:	3b01      	subs	r3, #1
 8005e22:	b21a      	sxth	r2, r3
        g_F45[item] = value;
 8005e24:	4b92      	ldr	r3, [pc, #584]	@ (8006070 <SaveItemValue+0x8b4>)
 8005e26:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005e2a:	e529      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F46Max[item]);
 8005e2c:	4b91      	ldr	r3, [pc, #580]	@ (8006074 <SaveItemValue+0x8b8>)
 8005e2e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	db01      	blt.n	8005e3a <SaveItemValue+0x67e>
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b21a      	sxth	r2, r3
        g_F46[item] = value;
 8005e3a:	4b8f      	ldr	r3, [pc, #572]	@ (8006078 <SaveItemValue+0x8bc>)
 8005e3c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005e40:	e51e      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F47Max[item]);
 8005e42:	4b8e      	ldr	r3, [pc, #568]	@ (800607c <SaveItemValue+0x8c0>)
 8005e44:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	db01      	blt.n	8005e50 <SaveItemValue+0x694>
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b21a      	sxth	r2, r3
        g_F47[item] = value;
 8005e50:	4b8b      	ldr	r3, [pc, #556]	@ (8006080 <SaveItemValue+0x8c4>)
 8005e52:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005e56:	e513      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F48Max[item]);
 8005e58:	4b8a      	ldr	r3, [pc, #552]	@ (8006084 <SaveItemValue+0x8c8>)
 8005e5a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	db01      	blt.n	8005e66 <SaveItemValue+0x6aa>
 8005e62:	3b01      	subs	r3, #1
 8005e64:	b21a      	sxth	r2, r3
        g_F48[item] = value;
 8005e66:	4b88      	ldr	r3, [pc, #544]	@ (8006088 <SaveItemValue+0x8cc>)
 8005e68:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005e6c:	e508      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F49Max[item]);
 8005e6e:	4b87      	ldr	r3, [pc, #540]	@ (800608c <SaveItemValue+0x8d0>)
 8005e70:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	db01      	blt.n	8005e7c <SaveItemValue+0x6c0>
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b21a      	sxth	r2, r3
        g_F49[item] = value;
 8005e7c:	4b84      	ldr	r3, [pc, #528]	@ (8006090 <SaveItemValue+0x8d4>)
 8005e7e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005e82:	e4fd      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F50Max[item]);
 8005e84:	4b83      	ldr	r3, [pc, #524]	@ (8006094 <SaveItemValue+0x8d8>)
 8005e86:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	db01      	blt.n	8005e92 <SaveItemValue+0x6d6>
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	b21a      	sxth	r2, r3
        g_F50[item] = value;
 8005e92:	4b81      	ldr	r3, [pc, #516]	@ (8006098 <SaveItemValue+0x8dc>)
 8005e94:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005e98:	e4f2      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F51Max[item]);
 8005e9a:	4b80      	ldr	r3, [pc, #512]	@ (800609c <SaveItemValue+0x8e0>)
 8005e9c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	db01      	blt.n	8005ea8 <SaveItemValue+0x6ec>
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	b21a      	sxth	r2, r3
        g_F51[item] = value;
 8005ea8:	4b7d      	ldr	r3, [pc, #500]	@ (80060a0 <SaveItemValue+0x8e4>)
 8005eaa:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005eae:	e4e7      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F52Max[item]);
 8005eb0:	4b7c      	ldr	r3, [pc, #496]	@ (80060a4 <SaveItemValue+0x8e8>)
 8005eb2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	db01      	blt.n	8005ebe <SaveItemValue+0x702>
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b21a      	sxth	r2, r3
        g_F52[item] = value;
 8005ebe:	4b7a      	ldr	r3, [pc, #488]	@ (80060a8 <SaveItemValue+0x8ec>)
 8005ec0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005ec4:	e4dc      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F53Max[item]);
 8005ec6:	4b79      	ldr	r3, [pc, #484]	@ (80060ac <SaveItemValue+0x8f0>)
 8005ec8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	db01      	blt.n	8005ed4 <SaveItemValue+0x718>
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b21a      	sxth	r2, r3
        g_F53[item] = value;
 8005ed4:	4b76      	ldr	r3, [pc, #472]	@ (80060b0 <SaveItemValue+0x8f4>)
 8005ed6:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005eda:	e4d1      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F54Max[item]);
 8005edc:	4b75      	ldr	r3, [pc, #468]	@ (80060b4 <SaveItemValue+0x8f8>)
 8005ede:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	db01      	blt.n	8005eea <SaveItemValue+0x72e>
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b21a      	sxth	r2, r3
        g_F54[item] = value;
 8005eea:	4b73      	ldr	r3, [pc, #460]	@ (80060b8 <SaveItemValue+0x8fc>)
 8005eec:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005ef0:	e4c6      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F55Max[item]);
 8005ef2:	4b72      	ldr	r3, [pc, #456]	@ (80060bc <SaveItemValue+0x900>)
 8005ef4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	db01      	blt.n	8005f00 <SaveItemValue+0x744>
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b21a      	sxth	r2, r3
        g_F55[item] = value;
 8005f00:	4b6f      	ldr	r3, [pc, #444]	@ (80060c0 <SaveItemValue+0x904>)
 8005f02:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005f06:	e4bb      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F56Max[item]);
 8005f08:	4b6e      	ldr	r3, [pc, #440]	@ (80060c4 <SaveItemValue+0x908>)
 8005f0a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	db01      	blt.n	8005f16 <SaveItemValue+0x75a>
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b21a      	sxth	r2, r3
        g_F56[item] = value;
 8005f16:	4b6c      	ldr	r3, [pc, #432]	@ (80060c8 <SaveItemValue+0x90c>)
 8005f18:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005f1c:	e4b0      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F57Max[item]);
 8005f1e:	4b6b      	ldr	r3, [pc, #428]	@ (80060cc <SaveItemValue+0x910>)
 8005f20:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	db01      	blt.n	8005f2c <SaveItemValue+0x770>
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	b21a      	sxth	r2, r3
        g_F57[item] = value;
 8005f2c:	4b68      	ldr	r3, [pc, #416]	@ (80060d0 <SaveItemValue+0x914>)
 8005f2e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005f32:	e4a5      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F58Max[item]);
 8005f34:	4b67      	ldr	r3, [pc, #412]	@ (80060d4 <SaveItemValue+0x918>)
 8005f36:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	db01      	blt.n	8005f42 <SaveItemValue+0x786>
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b21a      	sxth	r2, r3
        g_F58[item] = value;
 8005f42:	4b65      	ldr	r3, [pc, #404]	@ (80060d8 <SaveItemValue+0x91c>)
 8005f44:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005f48:	e49a      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F59Max[item]);
 8005f4a:	4b64      	ldr	r3, [pc, #400]	@ (80060dc <SaveItemValue+0x920>)
 8005f4c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	db01      	blt.n	8005f58 <SaveItemValue+0x79c>
 8005f54:	3b01      	subs	r3, #1
 8005f56:	b21a      	sxth	r2, r3
        g_F59[item] = value;
 8005f58:	4b61      	ldr	r3, [pc, #388]	@ (80060e0 <SaveItemValue+0x924>)
 8005f5a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005f5e:	e48f      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F60Max[item]);
 8005f60:	4b60      	ldr	r3, [pc, #384]	@ (80060e4 <SaveItemValue+0x928>)
 8005f62:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	db01      	blt.n	8005f6e <SaveItemValue+0x7b2>
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	b21a      	sxth	r2, r3
        g_F60[item] = value;
 8005f6e:	4b5e      	ldr	r3, [pc, #376]	@ (80060e8 <SaveItemValue+0x92c>)
 8005f70:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005f74:	e484      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F61Max[item]);
 8005f76:	4b5d      	ldr	r3, [pc, #372]	@ (80060ec <SaveItemValue+0x930>)
 8005f78:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	db01      	blt.n	8005f84 <SaveItemValue+0x7c8>
 8005f80:	3b01      	subs	r3, #1
 8005f82:	b21a      	sxth	r2, r3
        g_F61[item] = value;
 8005f84:	4b5a      	ldr	r3, [pc, #360]	@ (80060f0 <SaveItemValue+0x934>)
 8005f86:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005f8a:	e479      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F62Max[item]);
 8005f8c:	4b59      	ldr	r3, [pc, #356]	@ (80060f4 <SaveItemValue+0x938>)
 8005f8e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	db01      	blt.n	8005f9a <SaveItemValue+0x7de>
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b21a      	sxth	r2, r3
        g_F62[item] = value;
 8005f9a:	4b57      	ldr	r3, [pc, #348]	@ (80060f8 <SaveItemValue+0x93c>)
 8005f9c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005fa0:	e46e      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F63Max[item]);
 8005fa2:	4b56      	ldr	r3, [pc, #344]	@ (80060fc <SaveItemValue+0x940>)
 8005fa4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	db01      	blt.n	8005fb0 <SaveItemValue+0x7f4>
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b21a      	sxth	r2, r3
        g_F63[item] = value;
 8005fb0:	4b53      	ldr	r3, [pc, #332]	@ (8006100 <SaveItemValue+0x944>)
 8005fb2:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005fb6:	e463      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F64Max[item]);
 8005fb8:	4b52      	ldr	r3, [pc, #328]	@ (8006104 <SaveItemValue+0x948>)
 8005fba:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	db01      	blt.n	8005fc6 <SaveItemValue+0x80a>
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	b21a      	sxth	r2, r3
        g_F64[item] = value;
 8005fc6:	4b50      	ldr	r3, [pc, #320]	@ (8006108 <SaveItemValue+0x94c>)
 8005fc8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005fcc:	e458      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F65Max[item]);
 8005fce:	4b4f      	ldr	r3, [pc, #316]	@ (800610c <SaveItemValue+0x950>)
 8005fd0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	db01      	blt.n	8005fdc <SaveItemValue+0x820>
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b21a      	sxth	r2, r3
        g_F65[item] = value;
 8005fdc:	4b4c      	ldr	r3, [pc, #304]	@ (8006110 <SaveItemValue+0x954>)
 8005fde:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005fe2:	e44d      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F66Max[item]);
 8005fe4:	4b4b      	ldr	r3, [pc, #300]	@ (8006114 <SaveItemValue+0x958>)
 8005fe6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	db01      	blt.n	8005ff2 <SaveItemValue+0x836>
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	b21a      	sxth	r2, r3
        g_F66[item] = value;
 8005ff2:	4b49      	ldr	r3, [pc, #292]	@ (8006118 <SaveItemValue+0x95c>)
 8005ff4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8005ff8:	e442      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F67Max[item]);
 8005ffa:	4b48      	ldr	r3, [pc, #288]	@ (800611c <SaveItemValue+0x960>)
 8005ffc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006000:	429a      	cmp	r2, r3
 8006002:	db01      	blt.n	8006008 <SaveItemValue+0x84c>
 8006004:	3b01      	subs	r3, #1
 8006006:	b21a      	sxth	r2, r3
        g_F67[item] = value;
 8006008:	4b45      	ldr	r3, [pc, #276]	@ (8006120 <SaveItemValue+0x964>)
 800600a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 800600e:	e437      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F68Max[item]);
 8006010:	4b44      	ldr	r3, [pc, #272]	@ (8006124 <SaveItemValue+0x968>)
 8006012:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006016:	429a      	cmp	r2, r3
 8006018:	db01      	blt.n	800601e <SaveItemValue+0x862>
 800601a:	3b01      	subs	r3, #1
 800601c:	b21a      	sxth	r2, r3
        g_F68[item] = value;
 800601e:	4b42      	ldr	r3, [pc, #264]	@ (8006128 <SaveItemValue+0x96c>)
 8006020:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8006024:	e42c      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F69Max[item]);
 8006026:	4b41      	ldr	r3, [pc, #260]	@ (800612c <SaveItemValue+0x970>)
 8006028:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800602c:	429a      	cmp	r2, r3
 800602e:	db01      	blt.n	8006034 <SaveItemValue+0x878>
 8006030:	3b01      	subs	r3, #1
 8006032:	b21a      	sxth	r2, r3
        g_F69[item] = value;
 8006034:	4b3e      	ldr	r3, [pc, #248]	@ (8006130 <SaveItemValue+0x974>)
 8006036:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 800603a:	e421      	b.n	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F70Max[item]);
 800603c:	4b3d      	ldr	r3, [pc, #244]	@ (8006134 <SaveItemValue+0x978>)
 800603e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006042:	429a      	cmp	r2, r3
 8006044:	db01      	blt.n	800604a <SaveItemValue+0x88e>
 8006046:	3b01      	subs	r3, #1
 8006048:	b21a      	sxth	r2, r3
        g_F70[item] = value;
 800604a:	4b3b      	ldr	r3, [pc, #236]	@ (8006138 <SaveItemValue+0x97c>)
 800604c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8006050:	e416      	b.n	8005880 <SaveItemValue+0xc4>
 8006052:	bf00      	nop
 8006054:	20000a9c 	.word	0x20000a9c
 8006058:	20000a9c 	.word	0x20000a9c
 800605c:	20000a9c 	.word	0x20000a9c
 8006060:	20000a9c 	.word	0x20000a9c
 8006064:	20000a9c 	.word	0x20000a9c
 8006068:	20000a9c 	.word	0x20000a9c
 800606c:	20000a9c 	.word	0x20000a9c
 8006070:	20000a9c 	.word	0x20000a9c
 8006074:	20000a9c 	.word	0x20000a9c
 8006078:	20000a9c 	.word	0x20000a9c
 800607c:	20000a9c 	.word	0x20000a9c
 8006080:	20000a9c 	.word	0x20000a9c
 8006084:	20000a9c 	.word	0x20000a9c
 8006088:	20000a9c 	.word	0x20000a9c
 800608c:	20000a9c 	.word	0x20000a9c
 8006090:	20000a9c 	.word	0x20000a9c
 8006094:	20000a9c 	.word	0x20000a9c
 8006098:	20000a9c 	.word	0x20000a9c
 800609c:	20000a9c 	.word	0x20000a9c
 80060a0:	20000a9c 	.word	0x20000a9c
 80060a4:	20000a9c 	.word	0x20000a9c
 80060a8:	20000a9c 	.word	0x20000a9c
 80060ac:	20000a9c 	.word	0x20000a9c
 80060b0:	20000a9c 	.word	0x20000a9c
 80060b4:	20000a9c 	.word	0x20000a9c
 80060b8:	20000a9c 	.word	0x20000a9c
 80060bc:	20000a9c 	.word	0x20000a9c
 80060c0:	20000a9c 	.word	0x20000a9c
 80060c4:	20000a9c 	.word	0x20000a9c
 80060c8:	20000a9c 	.word	0x20000a9c
 80060cc:	20000a9c 	.word	0x20000a9c
 80060d0:	20000a9c 	.word	0x20000a9c
 80060d4:	20000a9c 	.word	0x20000a9c
 80060d8:	20000a9c 	.word	0x20000a9c
 80060dc:	20000a9c 	.word	0x20000a9c
 80060e0:	20000a9c 	.word	0x20000a9c
 80060e4:	20000a9c 	.word	0x20000a9c
 80060e8:	20000a9c 	.word	0x20000a9c
 80060ec:	20000a9c 	.word	0x20000a9c
 80060f0:	20000a9c 	.word	0x20000a9c
 80060f4:	20000a9c 	.word	0x20000a9c
 80060f8:	20000a9c 	.word	0x20000a9c
 80060fc:	20000a9c 	.word	0x20000a9c
 8006100:	20000a9c 	.word	0x20000a9c
 8006104:	20000a9c 	.word	0x20000a9c
 8006108:	20000a9c 	.word	0x20000a9c
 800610c:	20000a9c 	.word	0x20000a9c
 8006110:	20000a9c 	.word	0x20000a9c
 8006114:	20000a9c 	.word	0x20000a9c
 8006118:	20000a9c 	.word	0x20000a9c
 800611c:	20000a9c 	.word	0x20000a9c
 8006120:	20000a9c 	.word	0x20000a9c
 8006124:	20000a9c 	.word	0x20000a9c
 8006128:	20000a9c 	.word	0x20000a9c
 800612c:	20000a9c 	.word	0x20000a9c
 8006130:	20000a9c 	.word	0x20000a9c
 8006134:	20000a9c 	.word	0x20000a9c
 8006138:	20000a9c 	.word	0x20000a9c
        value = CHECK_VALUE(value, F71Max[item]);
 800613c:	4b2f      	ldr	r3, [pc, #188]	@ (80061fc <SaveItemValue+0xa40>)
 800613e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006142:	429a      	cmp	r2, r3
 8006144:	db01      	blt.n	800614a <SaveItemValue+0x98e>
 8006146:	3b01      	subs	r3, #1
 8006148:	b21a      	sxth	r2, r3
        g_F71[item] = value;
 800614a:	4b2d      	ldr	r3, [pc, #180]	@ (8006200 <SaveItemValue+0xa44>)
 800614c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8006150:	f7ff bb96 	b.w	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F72Max[item]);
 8006154:	4b2b      	ldr	r3, [pc, #172]	@ (8006204 <SaveItemValue+0xa48>)
 8006156:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800615a:	429a      	cmp	r2, r3
 800615c:	db01      	blt.n	8006162 <SaveItemValue+0x9a6>
 800615e:	3b01      	subs	r3, #1
 8006160:	b21a      	sxth	r2, r3
        g_F72[item] = value;
 8006162:	4b29      	ldr	r3, [pc, #164]	@ (8006208 <SaveItemValue+0xa4c>)
 8006164:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8006168:	f7ff bb8a 	b.w	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F73Max[item]);
 800616c:	4b27      	ldr	r3, [pc, #156]	@ (800620c <SaveItemValue+0xa50>)
 800616e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006172:	429a      	cmp	r2, r3
 8006174:	db01      	blt.n	800617a <SaveItemValue+0x9be>
 8006176:	3b01      	subs	r3, #1
 8006178:	b21a      	sxth	r2, r3
        g_F73[item] = value;
 800617a:	4b25      	ldr	r3, [pc, #148]	@ (8006210 <SaveItemValue+0xa54>)
 800617c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8006180:	f7ff bb7e 	b.w	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F74Max[item]);
 8006184:	4b23      	ldr	r3, [pc, #140]	@ (8006214 <SaveItemValue+0xa58>)
 8006186:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800618a:	429a      	cmp	r2, r3
 800618c:	db01      	blt.n	8006192 <SaveItemValue+0x9d6>
 800618e:	3b01      	subs	r3, #1
 8006190:	b21a      	sxth	r2, r3
        g_F74[item] = value;
 8006192:	4b21      	ldr	r3, [pc, #132]	@ (8006218 <SaveItemValue+0xa5c>)
 8006194:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 8006198:	f7ff bb72 	b.w	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F75Max[item]);
 800619c:	4b1f      	ldr	r3, [pc, #124]	@ (800621c <SaveItemValue+0xa60>)
 800619e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	db01      	blt.n	80061aa <SaveItemValue+0x9ee>
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b21a      	sxth	r2, r3
        g_F75[item] = value;
 80061aa:	4b1d      	ldr	r3, [pc, #116]	@ (8006220 <SaveItemValue+0xa64>)
 80061ac:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 80061b0:	f7ff bb66 	b.w	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F76Max[item]);
 80061b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006224 <SaveItemValue+0xa68>)
 80061b6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	db01      	blt.n	80061c2 <SaveItemValue+0xa06>
 80061be:	3b01      	subs	r3, #1
 80061c0:	b21a      	sxth	r2, r3
        g_F76[item] = value;
 80061c2:	4b19      	ldr	r3, [pc, #100]	@ (8006228 <SaveItemValue+0xa6c>)
 80061c4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 80061c8:	f7ff bb5a 	b.w	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F77Max[item]);
 80061cc:	4b17      	ldr	r3, [pc, #92]	@ (800622c <SaveItemValue+0xa70>)
 80061ce:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	db01      	blt.n	80061da <SaveItemValue+0xa1e>
 80061d6:	3b01      	subs	r3, #1
 80061d8:	b21a      	sxth	r2, r3
        g_F77[item] = value;
 80061da:	4b15      	ldr	r3, [pc, #84]	@ (8006230 <SaveItemValue+0xa74>)
 80061dc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 80061e0:	f7ff bb4e 	b.w	8005880 <SaveItemValue+0xc4>
        value = CHECK_VALUE(value, F78Max[item]);
 80061e4:	4b13      	ldr	r3, [pc, #76]	@ (8006234 <SaveItemValue+0xa78>)
 80061e6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	db01      	blt.n	80061f2 <SaveItemValue+0xa36>
 80061ee:	3b01      	subs	r3, #1
 80061f0:	b21a      	sxth	r2, r3
        g_F78[item] = value;
 80061f2:	4b11      	ldr	r3, [pc, #68]	@ (8006238 <SaveItemValue+0xa7c>)
 80061f4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        break;
 80061f8:	f7ff bb42 	b.w	8005880 <SaveItemValue+0xc4>
 80061fc:	20000a9c 	.word	0x20000a9c
 8006200:	20000a9c 	.word	0x20000a9c
 8006204:	20000a9c 	.word	0x20000a9c
 8006208:	20000a9c 	.word	0x20000a9c
 800620c:	20000a9c 	.word	0x20000a9c
 8006210:	20000a9c 	.word	0x20000a9c
 8006214:	20000a9c 	.word	0x20000a9c
 8006218:	20000a9c 	.word	0x20000a9c
 800621c:	20000a9c 	.word	0x20000a9c
 8006220:	20000a9c 	.word	0x20000a9c
 8006224:	20000a9c 	.word	0x20000a9c
 8006228:	20000a9c 	.word	0x20000a9c
 800622c:	20000a9c 	.word	0x20000a9c
 8006230:	20000a9c 	.word	0x20000a9c
 8006234:	20000a9c 	.word	0x20000a9c
 8006238:	20000a9c 	.word	0x20000a9c
 800623c:	00000000 	.word	0x00000000

08006240 <GetF1Value>:
{
 8006240:	b508      	push	{r3, lr}
    item = GET_MENU(item, F1_ITEM_MAX);
 8006242:	2804      	cmp	r0, #4
 8006244:	d901      	bls.n	800624a <GetF1Value+0xa>
 8006246:	3805      	subs	r0, #5
 8006248:	b2c0      	uxtb	r0, r0
    if(item == ABS_3_VehicleSpeed){
 800624a:	b960      	cbnz	r0, 8006266 <GetF1Value+0x26>
        res = g_F1[item] / 0.05625;
 800624c:	4b0a      	ldr	r3, [pc, #40]	@ (8006278 <GetF1Value+0x38>)
 800624e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006252:	f7fa f947 	bl	80004e4 <__aeabi_i2d>
 8006256:	a306      	add	r3, pc, #24	@ (adr r3, 8006270 <GetF1Value+0x30>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f7fa fad6 	bl	800080c <__aeabi_ddiv>
 8006260:	f7fa fc82 	bl	8000b68 <__aeabi_d2uiz>
}
 8006264:	bd08      	pop	{r3, pc}
        res = g_F1[item];
 8006266:	4b04      	ldr	r3, [pc, #16]	@ (8006278 <GetF1Value+0x38>)
 8006268:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    return res;
 800626c:	e7fa      	b.n	8006264 <GetF1Value+0x24>
 800626e:	bf00      	nop
 8006270:	cccccccd 	.word	0xcccccccd
 8006274:	3faccccc 	.word	0x3faccccc
 8006278:	200028d8 	.word	0x200028d8

0800627c <GetF2Value>:
    item = GET_MENU(item, F1_ITEM_MAX);
 800627c:	2804      	cmp	r0, #4
 800627e:	d901      	bls.n	8006284 <GetF2Value+0x8>
 8006280:	3805      	subs	r0, #5
 8006282:	b2c0      	uxtb	r0, r0
    if(item == EMS_2_EngineSpeed){
 8006284:	b938      	cbnz	r0, 8006296 <GetF2Value+0x1a>
        res = g_F2[item] * 400;
 8006286:	4b06      	ldr	r3, [pc, #24]	@ (80062a0 <GetF2Value+0x24>)
 8006288:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800628c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8006290:	fb03 f000 	mul.w	r0, r3, r0
 8006294:	4770      	bx	lr
        res = g_F2[item];
 8006296:	4b02      	ldr	r3, [pc, #8]	@ (80062a0 <GetF2Value+0x24>)
 8006298:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	20002810 	.word	0x20002810

080062a4 <GetF3Value>:
    item = GET_MENU(item, F3_ITEM_MAX);
 80062a4:	280a      	cmp	r0, #10
 80062a6:	d901      	bls.n	80062ac <GetF3Value+0x8>
 80062a8:	380b      	subs	r0, #11
 80062aa:	b2c0      	uxtb	r0, r0
}
 80062ac:	4b01      	ldr	r3, [pc, #4]	@ (80062b4 <GetF3Value+0x10>)
 80062ae:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80062b2:	4770      	bx	lr
 80062b4:	20002538 	.word	0x20002538

080062b8 <GetF4Value>:
    item = GET_MENU(item, F4_ITEM_MAX);
 80062b8:	2802      	cmp	r0, #2
 80062ba:	d901      	bls.n	80062c0 <GetF4Value+0x8>
 80062bc:	3803      	subs	r0, #3
 80062be:	b2c0      	uxtb	r0, r0
    if(item == EMS_4_EngineCoolantTemp){
 80062c0:	b920      	cbnz	r0, 80062cc <GetF4Value+0x14>
        res = g_F4[item] * 2;
 80062c2:	4b04      	ldr	r3, [pc, #16]	@ (80062d4 <GetF4Value+0x1c>)
 80062c4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80062c8:	0040      	lsls	r0, r0, #1
 80062ca:	4770      	bx	lr
        res = g_F4[item];
 80062cc:	4b01      	ldr	r3, [pc, #4]	@ (80062d4 <GetF4Value+0x1c>)
 80062ce:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 80062d2:	4770      	bx	lr
 80062d4:	200003dc 	.word	0x200003dc

080062d8 <GetF5Value>:
    item = GET_MENU(item, F5_ITEM_MAX);
 80062d8:	2803      	cmp	r0, #3
 80062da:	d901      	bls.n	80062e0 <GetF5Value+0x8>
 80062dc:	3804      	subs	r0, #4
 80062de:	b2c0      	uxtb	r0, r0
    if(item == IC_OdoMeter){
 80062e0:	2803      	cmp	r0, #3
 80062e2:	d003      	beq.n	80062ec <GetF5Value+0x14>
        res = g_F5[item];
 80062e4:	4b05      	ldr	r3, [pc, #20]	@ (80062fc <GetF5Value+0x24>)
 80062e6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 80062ea:	4770      	bx	lr
        res = g_F5[item] * 10000;
 80062ec:	4b03      	ldr	r3, [pc, #12]	@ (80062fc <GetF5Value+0x24>)
 80062ee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80062f2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80062f6:	fb03 f000 	mul.w	r0, r3, r0
 80062fa:	4770      	bx	lr
 80062fc:	20002368 	.word	0x20002368

08006300 <GetF6Value>:
    item = GET_MENU(item, F6_ITEM_MAX);
 8006300:	2808      	cmp	r0, #8
 8006302:	d901      	bls.n	8006308 <GetF6Value+0x8>
 8006304:	3809      	subs	r0, #9
 8006306:	b2c0      	uxtb	r0, r0
    if(item == EMS_4_FuelConsumption){
 8006308:	2806      	cmp	r0, #6
 800630a:	d005      	beq.n	8006318 <GetF6Value+0x18>
    else if(item == IC_SurplusMileage){
 800630c:	2808      	cmp	r0, #8
 800630e:	d009      	beq.n	8006324 <GetF6Value+0x24>
        res = g_F6[item];
 8006310:	4b08      	ldr	r3, [pc, #32]	@ (8006334 <GetF6Value+0x34>)
 8006312:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 8006316:	4770      	bx	lr
        res = g_F6[item] * 5;
 8006318:	4b06      	ldr	r3, [pc, #24]	@ (8006334 <GetF6Value+0x34>)
 800631a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800631e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006322:	4770      	bx	lr
    	res = g_F6[item] * 100;
 8006324:	4b03      	ldr	r3, [pc, #12]	@ (8006334 <GetF6Value+0x34>)
 8006326:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800632a:	2364      	movs	r3, #100	@ 0x64
 800632c:	fb03 f000 	mul.w	r0, r3, r0
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	20002114 	.word	0x20002114

08006338 <GetF7Value>:
    item = GET_MENU(item, F7_ITEM_MAX);
 8006338:	2809      	cmp	r0, #9
 800633a:	d901      	bls.n	8006340 <GetF7Value+0x8>
 800633c:	380a      	subs	r0, #10
 800633e:	b2c0      	uxtb	r0, r0
    if(item == IC_LifeTimeAvgFuelConsRate || item == IC_TripAvgFuelConsRate){
 8006340:	f1a0 0308 	sub.w	r3, r0, #8
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b01      	cmp	r3, #1
 8006348:	d903      	bls.n	8006352 <GetF7Value+0x1a>
    	res = g_F7[item];
 800634a:	4b05      	ldr	r3, [pc, #20]	@ (8006360 <GetF7Value+0x28>)
 800634c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 8006350:	4770      	bx	lr
        res = g_F7[item] * 10;
 8006352:	4b03      	ldr	r3, [pc, #12]	@ (8006360 <GetF7Value+0x28>)
 8006354:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006358:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800635c:	0040      	lsls	r0, r0, #1
 800635e:	4770      	bx	lr
 8006360:	20001e80 	.word	0x20001e80

08006364 <GetF8Value>:
    item = GET_MENU(item, F8_ITEM_MAX);
 8006364:	2806      	cmp	r0, #6
 8006366:	d901      	bls.n	800636c <GetF8Value+0x8>
 8006368:	3807      	subs	r0, #7
 800636a:	b2c0      	uxtb	r0, r0
    if(item == TPMS_TirePressure){
 800636c:	2806      	cmp	r0, #6
 800636e:	d003      	beq.n	8006378 <GetF8Value+0x14>
    	res = g_F8[item];
 8006370:	4b04      	ldr	r3, [pc, #16]	@ (8006384 <GetF8Value+0x20>)
 8006372:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 8006376:	4770      	bx	lr
        res = g_F8[item] * 15;
 8006378:	4b02      	ldr	r3, [pc, #8]	@ (8006384 <GetF8Value+0x20>)
 800637a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800637e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8006382:	4770      	bx	lr
 8006384:	20001cb0 	.word	0x20001cb0

08006388 <GetF9Value>:
    item = GET_MENU(item, F9_ITEM_MAX);
 8006388:	2806      	cmp	r0, #6
 800638a:	d901      	bls.n	8006390 <GetF9Value+0x8>
 800638c:	3807      	subs	r0, #7
 800638e:	b2c0      	uxtb	r0, r0
}
 8006390:	4b01      	ldr	r3, [pc, #4]	@ (8006398 <GetF9Value+0x10>)
 8006392:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006396:	4770      	bx	lr
 8006398:	20001ae0 	.word	0x20001ae0

0800639c <GetF10Value>:
    item = GET_MENU(item, F10_ITEM_MAX);
 800639c:	2805      	cmp	r0, #5
 800639e:	d901      	bls.n	80063a4 <GetF10Value+0x8>
 80063a0:	3806      	subs	r0, #6
 80063a2:	b2c0      	uxtb	r0, r0
}
 80063a4:	4b01      	ldr	r3, [pc, #4]	@ (80063ac <GetF10Value+0x10>)
 80063a6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80063aa:	4770      	bx	lr
 80063ac:	20001954 	.word	0x20001954

080063b0 <GetF11Value>:
    item = GET_MENU(item, F11_ITEM_MAX);
 80063b0:	2804      	cmp	r0, #4
 80063b2:	d901      	bls.n	80063b8 <GetF11Value+0x8>
 80063b4:	3805      	subs	r0, #5
 80063b6:	b2c0      	uxtb	r0, r0
}
 80063b8:	4b01      	ldr	r3, [pc, #4]	@ (80063c0 <GetF11Value+0x10>)
 80063ba:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80063be:	4770      	bx	lr
 80063c0:	20001808 	.word	0x20001808

080063c4 <GetF12Value>:
    item = GET_MENU(item, F12_ITEM_MAX);
 80063c4:	2802      	cmp	r0, #2
 80063c6:	d901      	bls.n	80063cc <GetF12Value+0x8>
 80063c8:	3803      	subs	r0, #3
 80063ca:	b2c0      	uxtb	r0, r0
}
 80063cc:	4b01      	ldr	r3, [pc, #4]	@ (80063d4 <GetF12Value+0x10>)
 80063ce:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80063d2:	4770      	bx	lr
 80063d4:	20001740 	.word	0x20001740

080063d8 <GetF13Value>:
    item = GET_MENU(item, F13_ITEM_MAX);
 80063d8:	2830      	cmp	r0, #48	@ 0x30
 80063da:	d901      	bls.n	80063e0 <GetF13Value+0x8>
 80063dc:	3831      	subs	r0, #49	@ 0x31
 80063de:	b2c0      	uxtb	r0, r0
}
 80063e0:	4b01      	ldr	r3, [pc, #4]	@ (80063e8 <GetF13Value+0x10>)
 80063e2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80063e6:	4770      	bx	lr
 80063e8:	20000a9c 	.word	0x20000a9c

080063ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80063ec:	b500      	push	{lr}
 80063ee:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80063f0:	2300      	movs	r3, #0
 80063f2:	9301      	str	r3, [sp, #4]
 80063f4:	9302      	str	r3, [sp, #8]
 80063f6:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80063f8:	482c      	ldr	r0, [pc, #176]	@ (80064ac <MX_ADC1_Init+0xc0>)
 80063fa:	4a2d      	ldr	r2, [pc, #180]	@ (80064b0 <MX_ADC1_Init+0xc4>)
 80063fc:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80063fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006402:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006404:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8006406:	2201      	movs	r2, #1
 8006408:	7502      	strb	r2, [r0, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 800640a:	6182      	str	r2, [r0, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800640c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8006410:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006412:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 5;
 8006414:	2305      	movs	r3, #5
 8006416:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006418:	f001 f944 	bl	80076a4 <HAL_ADC_Init>
 800641c:	2800      	cmp	r0, #0
 800641e:	d132      	bne.n	8006486 <MX_ADC1_Init+0x9a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006420:	2308      	movs	r3, #8
 8006422:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006424:	2301      	movs	r3, #1
 8006426:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006428:	2300      	movs	r3, #0
 800642a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800642c:	a901      	add	r1, sp, #4
 800642e:	481f      	ldr	r0, [pc, #124]	@ (80064ac <MX_ADC1_Init+0xc0>)
 8006430:	f000 ffb4 	bl	800739c <HAL_ADC_ConfigChannel>
 8006434:	bb50      	cbnz	r0, 800648c <MX_ADC1_Init+0xa0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006436:	230e      	movs	r3, #14
 8006438:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800643a:	2302      	movs	r3, #2
 800643c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800643e:	a901      	add	r1, sp, #4
 8006440:	481a      	ldr	r0, [pc, #104]	@ (80064ac <MX_ADC1_Init+0xc0>)
 8006442:	f000 ffab 	bl	800739c <HAL_ADC_ConfigChannel>
 8006446:	bb20      	cbnz	r0, 8006492 <MX_ADC1_Init+0xa6>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006448:	230f      	movs	r3, #15
 800644a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800644c:	2303      	movs	r3, #3
 800644e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006450:	a901      	add	r1, sp, #4
 8006452:	4816      	ldr	r0, [pc, #88]	@ (80064ac <MX_ADC1_Init+0xc0>)
 8006454:	f000 ffa2 	bl	800739c <HAL_ADC_ConfigChannel>
 8006458:	b9f0      	cbnz	r0, 8006498 <MX_ADC1_Init+0xac>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800645a:	230b      	movs	r3, #11
 800645c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800645e:	2304      	movs	r3, #4
 8006460:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006462:	eb0d 0103 	add.w	r1, sp, r3
 8006466:	4811      	ldr	r0, [pc, #68]	@ (80064ac <MX_ADC1_Init+0xc0>)
 8006468:	f000 ff98 	bl	800739c <HAL_ADC_ConfigChannel>
 800646c:	b9b8      	cbnz	r0, 800649e <MX_ADC1_Init+0xb2>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800646e:	230c      	movs	r3, #12
 8006470:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8006472:	2305      	movs	r3, #5
 8006474:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006476:	a901      	add	r1, sp, #4
 8006478:	480c      	ldr	r0, [pc, #48]	@ (80064ac <MX_ADC1_Init+0xc0>)
 800647a:	f000 ff8f 	bl	800739c <HAL_ADC_ConfigChannel>
 800647e:	b988      	cbnz	r0, 80064a4 <MX_ADC1_Init+0xb8>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006480:	b005      	add	sp, #20
 8006482:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006486:	f000 fc2b 	bl	8006ce0 <Error_Handler>
 800648a:	e7c9      	b.n	8006420 <MX_ADC1_Init+0x34>
    Error_Handler();
 800648c:	f000 fc28 	bl	8006ce0 <Error_Handler>
 8006490:	e7d1      	b.n	8006436 <MX_ADC1_Init+0x4a>
    Error_Handler();
 8006492:	f000 fc25 	bl	8006ce0 <Error_Handler>
 8006496:	e7d7      	b.n	8006448 <MX_ADC1_Init+0x5c>
    Error_Handler();
 8006498:	f000 fc22 	bl	8006ce0 <Error_Handler>
 800649c:	e7dd      	b.n	800645a <MX_ADC1_Init+0x6e>
    Error_Handler();
 800649e:	f000 fc1f 	bl	8006ce0 <Error_Handler>
 80064a2:	e7e4      	b.n	800646e <MX_ADC1_Init+0x82>
    Error_Handler();
 80064a4:	f000 fc1c 	bl	8006ce0 <Error_Handler>
}
 80064a8:	e7ea      	b.n	8006480 <MX_ADC1_Init+0x94>
 80064aa:	bf00      	nop
 80064ac:	20002a24 	.word	0x20002a24
 80064b0:	40012400 	.word	0x40012400

080064b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80064b4:	b510      	push	{r4, lr}
 80064b6:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064b8:	2300      	movs	r3, #0
 80064ba:	9304      	str	r3, [sp, #16]
 80064bc:	9305      	str	r3, [sp, #20]
 80064be:	9306      	str	r3, [sp, #24]
 80064c0:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 80064c2:	6802      	ldr	r2, [r0, #0]
 80064c4:	4b18      	ldr	r3, [pc, #96]	@ (8006528 <HAL_ADC_MspInit+0x74>)
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d001      	beq.n	80064ce <HAL_ADC_MspInit+0x1a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80064ca:	b008      	add	sp, #32
 80064cc:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80064ce:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 80064d2:	699a      	ldr	r2, [r3, #24]
 80064d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064d8:	619a      	str	r2, [r3, #24]
 80064da:	699a      	ldr	r2, [r3, #24]
 80064dc:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80064e0:	9201      	str	r2, [sp, #4]
 80064e2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80064e4:	699a      	ldr	r2, [r3, #24]
 80064e6:	f042 0210 	orr.w	r2, r2, #16
 80064ea:	619a      	str	r2, [r3, #24]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	f002 0210 	and.w	r2, r2, #16
 80064f2:	9202      	str	r2, [sp, #8]
 80064f4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064f6:	699a      	ldr	r2, [r3, #24]
 80064f8:	f042 0208 	orr.w	r2, r2, #8
 80064fc:	619a      	str	r2, [r3, #24]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	f003 0308 	and.w	r3, r3, #8
 8006504:	9303      	str	r3, [sp, #12]
 8006506:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8006508:	2336      	movs	r3, #54	@ 0x36
 800650a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800650c:	2403      	movs	r4, #3
 800650e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006510:	a904      	add	r1, sp, #16
 8006512:	4806      	ldr	r0, [pc, #24]	@ (800652c <HAL_ADC_MspInit+0x78>)
 8006514:	f002 f8a8 	bl	8008668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006518:	2301      	movs	r3, #1
 800651a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800651c:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800651e:	a904      	add	r1, sp, #16
 8006520:	4803      	ldr	r0, [pc, #12]	@ (8006530 <HAL_ADC_MspInit+0x7c>)
 8006522:	f002 f8a1 	bl	8008668 <HAL_GPIO_Init>
}
 8006526:	e7d0      	b.n	80064ca <HAL_ADC_MspInit+0x16>
 8006528:	40012400 	.word	0x40012400
 800652c:	40011000 	.word	0x40011000
 8006530:	40010c00 	.word	0x40010c00

08006534 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8006534:	b510      	push	{r4, lr}
 8006536:	b08a      	sub	sp, #40	@ 0x28
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8006538:	481c      	ldr	r0, [pc, #112]	@ (80065ac <MX_CAN1_Init+0x78>)
 800653a:	4b1d      	ldr	r3, [pc, #116]	@ (80065b0 <MX_CAN1_Init+0x7c>)
 800653c:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = GET_PRESCALER(CCAN1_BAUDRATE);;
 800653e:	2309      	movs	r3, #9
 8006540:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006542:	2300      	movs	r3, #0
 8006544:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006546:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8006548:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800654c:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800654e:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8006552:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006554:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8006556:	2201      	movs	r2, #1
 8006558:	7642      	strb	r2, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800655a:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800655c:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800655e:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8006560:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006562:	f001 f923 	bl	80077ac <HAL_CAN_Init>
 8006566:	b9d0      	cbnz	r0, 800659e <MX_CAN1_Init+0x6a>
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  Filter.FilterIdHigh = 0;
 8006568:	2300      	movs	r3, #0
 800656a:	9300      	str	r3, [sp, #0]
	Filter.FilterIdLow = 0;
 800656c:	9301      	str	r3, [sp, #4]
	Filter.FilterMaskIdHigh = 0;
 800656e:	9302      	str	r3, [sp, #8]
	Filter.FilterMaskIdLow = 0;
 8006570:	9303      	str	r3, [sp, #12]
	Filter.SlaveStartFilterBank = 0;
 8006572:	9309      	str	r3, [sp, #36]	@ 0x24
	Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8006574:	2201      	movs	r2, #1
 8006576:	9207      	str	r2, [sp, #28]
	Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8006578:	9306      	str	r3, [sp, #24]
	Filter.FilterBank = 0;
 800657a:	9305      	str	r3, [sp, #20]
	Filter.FilterFIFOAssignment = CAN_FilterFIFO0;
 800657c:	9304      	str	r3, [sp, #16]
	Filter.FilterActivation = CAN_FILTER_ENABLE;
 800657e:	9208      	str	r2, [sp, #32]

  HAL_CAN_ConfigFilter(&hcan1, &Filter);
 8006580:	4c0a      	ldr	r4, [pc, #40]	@ (80065ac <MX_CAN1_Init+0x78>)
 8006582:	4669      	mov	r1, sp
 8006584:	4620      	mov	r0, r4
 8006586:	f001 f9b7 	bl	80078f8 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan1);
 800658a:	4620      	mov	r0, r4
 800658c:	f001 fa52 	bl	8007a34 <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8006590:	2102      	movs	r1, #2
 8006592:	4620      	mov	r0, r4
 8006594:	f001 fbbf 	bl	8007d16 <HAL_CAN_ActivateNotification>
 8006598:	b920      	cbnz	r0, 80065a4 <MX_CAN1_Init+0x70>
		/* Notification Error */
		Error_Handler();
	}
  /* USER CODE END CAN1_Init 2 */

}
 800659a:	b00a      	add	sp, #40	@ 0x28
 800659c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800659e:	f000 fb9f 	bl	8006ce0 <Error_Handler>
 80065a2:	e7e1      	b.n	8006568 <MX_CAN1_Init+0x34>
		Error_Handler();
 80065a4:	f000 fb9c 	bl	8006ce0 <Error_Handler>
}
 80065a8:	e7f7      	b.n	800659a <MX_CAN1_Init+0x66>
 80065aa:	bf00      	nop
 80065ac:	20002a88 	.word	0x20002a88
 80065b0:	40006400 	.word	0x40006400

080065b4 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80065b4:	b510      	push	{r4, lr}
 80065b6:	b08a      	sub	sp, #40	@ 0x28
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80065b8:	481c      	ldr	r0, [pc, #112]	@ (800662c <MX_CAN2_Init+0x78>)
 80065ba:	4b1d      	ldr	r3, [pc, #116]	@ (8006630 <MX_CAN2_Init+0x7c>)
 80065bc:	6003      	str	r3, [r0, #0]
  hcan2.Init.Prescaler = GET_PRESCALER(BCAN_BAUDRATE);
 80065be:	2309      	movs	r3, #9
 80065c0:	6043      	str	r3, [r0, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80065c2:	2300      	movs	r3, #0
 80065c4:	6083      	str	r3, [r0, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80065c6:	60c3      	str	r3, [r0, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 80065c8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80065cc:	6102      	str	r2, [r0, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 80065ce:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80065d2:	6142      	str	r2, [r0, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80065d4:	7603      	strb	r3, [r0, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 80065d6:	2201      	movs	r2, #1
 80065d8:	7642      	strb	r2, [r0, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80065da:	7683      	strb	r3, [r0, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80065dc:	76c3      	strb	r3, [r0, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80065de:	7703      	strb	r3, [r0, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80065e0:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80065e2:	f001 f8e3 	bl	80077ac <HAL_CAN_Init>
 80065e6:	b9d8      	cbnz	r0, 8006620 <MX_CAN2_Init+0x6c>
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  Filter.FilterIdHigh = 0;
 80065e8:	2300      	movs	r3, #0
 80065ea:	9300      	str	r3, [sp, #0]
	Filter.FilterIdLow = 0;
 80065ec:	9301      	str	r3, [sp, #4]
	Filter.FilterMaskIdHigh = 0;
 80065ee:	9302      	str	r3, [sp, #8]
	Filter.FilterMaskIdLow = 0;
 80065f0:	9303      	str	r3, [sp, #12]
	Filter.SlaveStartFilterBank = 14;
 80065f2:	210e      	movs	r1, #14
 80065f4:	9109      	str	r1, [sp, #36]	@ 0x24
	Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80065f6:	2201      	movs	r2, #1
 80065f8:	9207      	str	r2, [sp, #28]
	Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80065fa:	9306      	str	r3, [sp, #24]
	Filter.FilterBank = 14;
 80065fc:	9105      	str	r1, [sp, #20]
	Filter.FilterFIFOAssignment = CAN_FilterFIFO0;
 80065fe:	9304      	str	r3, [sp, #16]
	Filter.FilterActivation = CAN_FILTER_ENABLE;
 8006600:	9208      	str	r2, [sp, #32]

	HAL_CAN_ConfigFilter(&hcan2, &Filter);
 8006602:	4c0a      	ldr	r4, [pc, #40]	@ (800662c <MX_CAN2_Init+0x78>)
 8006604:	4669      	mov	r1, sp
 8006606:	4620      	mov	r0, r4
 8006608:	f001 f976 	bl	80078f8 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan2);
 800660c:	4620      	mov	r0, r4
 800660e:	f001 fa11 	bl	8007a34 <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8006612:	2102      	movs	r1, #2
 8006614:	4620      	mov	r0, r4
 8006616:	f001 fb7e 	bl	8007d16 <HAL_CAN_ActivateNotification>
 800661a:	b920      	cbnz	r0, 8006626 <MX_CAN2_Init+0x72>
		/* Notification Error */
		Error_Handler();
	}
  /* USER CODE END CAN2_Init 2 */

}
 800661c:	b00a      	add	sp, #40	@ 0x28
 800661e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006620:	f000 fb5e 	bl	8006ce0 <Error_Handler>
 8006624:	e7e0      	b.n	80065e8 <MX_CAN2_Init+0x34>
		Error_Handler();
 8006626:	f000 fb5b 	bl	8006ce0 <Error_Handler>
}
 800662a:	e7f7      	b.n	800661c <MX_CAN2_Init+0x68>
 800662c:	20002a60 	.word	0x20002a60
 8006630:	40006800 	.word	0x40006800

08006634 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8006634:	b510      	push	{r4, lr}
 8006636:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006638:	2300      	movs	r3, #0
 800663a:	9306      	str	r3, [sp, #24]
 800663c:	9307      	str	r3, [sp, #28]
 800663e:	9308      	str	r3, [sp, #32]
 8006640:	9309      	str	r3, [sp, #36]	@ 0x24
  if(canHandle->Instance==CAN1)
 8006642:	6803      	ldr	r3, [r0, #0]
 8006644:	4a3f      	ldr	r2, [pc, #252]	@ (8006744 <HAL_CAN_MspInit+0x110>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d004      	beq.n	8006654 <HAL_CAN_MspInit+0x20>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
  else if(canHandle->Instance==CAN2)
 800664a:	4a3f      	ldr	r2, [pc, #252]	@ (8006748 <HAL_CAN_MspInit+0x114>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d038      	beq.n	80066c2 <HAL_CAN_MspInit+0x8e>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8006650:	b00a      	add	sp, #40	@ 0x28
 8006652:	bd10      	pop	{r4, pc}
    HAL_RCC_CAN1_CLK_ENABLED++;
 8006654:	4a3d      	ldr	r2, [pc, #244]	@ (800674c <HAL_CAN_MspInit+0x118>)
 8006656:	6813      	ldr	r3, [r2, #0]
 8006658:	3301      	adds	r3, #1
 800665a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800665c:	2b01      	cmp	r3, #1
 800665e:	d025      	beq.n	80066ac <HAL_CAN_MspInit+0x78>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006660:	4b3b      	ldr	r3, [pc, #236]	@ (8006750 <HAL_CAN_MspInit+0x11c>)
 8006662:	699a      	ldr	r2, [r3, #24]
 8006664:	f042 0204 	orr.w	r2, r2, #4
 8006668:	619a      	str	r2, [r3, #24]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	9302      	str	r3, [sp, #8]
 8006672:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006674:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006678:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800667a:	4c36      	ldr	r4, [pc, #216]	@ (8006754 <HAL_CAN_MspInit+0x120>)
 800667c:	a906      	add	r1, sp, #24
 800667e:	4620      	mov	r0, r4
 8006680:	f001 fff2 	bl	8008668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006684:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006688:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800668a:	2302      	movs	r3, #2
 800668c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800668e:	2303      	movs	r3, #3
 8006690:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006692:	a906      	add	r1, sp, #24
 8006694:	4620      	mov	r0, r4
 8006696:	f001 ffe7 	bl	8008668 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800669a:	2200      	movs	r2, #0
 800669c:	2105      	movs	r1, #5
 800669e:	2014      	movs	r0, #20
 80066a0:	f001 fcc6 	bl	8008030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80066a4:	2014      	movs	r0, #20
 80066a6:	f001 fcd3 	bl	8008050 <HAL_NVIC_EnableIRQ>
 80066aa:	e7d1      	b.n	8006650 <HAL_CAN_MspInit+0x1c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80066ac:	4b28      	ldr	r3, [pc, #160]	@ (8006750 <HAL_CAN_MspInit+0x11c>)
 80066ae:	69da      	ldr	r2, [r3, #28]
 80066b0:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80066b4:	61da      	str	r2, [r3, #28]
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066bc:	9301      	str	r3, [sp, #4]
 80066be:	9b01      	ldr	r3, [sp, #4]
 80066c0:	e7ce      	b.n	8006660 <HAL_CAN_MspInit+0x2c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80066c2:	4b23      	ldr	r3, [pc, #140]	@ (8006750 <HAL_CAN_MspInit+0x11c>)
 80066c4:	69da      	ldr	r2, [r3, #28]
 80066c6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80066ca:	61da      	str	r2, [r3, #28]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80066d2:	9303      	str	r3, [sp, #12]
 80066d4:	9b03      	ldr	r3, [sp, #12]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80066d6:	4a1d      	ldr	r2, [pc, #116]	@ (800674c <HAL_CAN_MspInit+0x118>)
 80066d8:	6813      	ldr	r3, [r2, #0]
 80066da:	3301      	adds	r3, #1
 80066dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d025      	beq.n	800672e <HAL_CAN_MspInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006750 <HAL_CAN_MspInit+0x11c>)
 80066e4:	699a      	ldr	r2, [r3, #24]
 80066e6:	f042 0208 	orr.w	r2, r2, #8
 80066ea:	619a      	str	r2, [r3, #24]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	9305      	str	r3, [sp, #20]
 80066f4:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80066f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80066fa:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066fc:	4c16      	ldr	r4, [pc, #88]	@ (8006758 <HAL_CAN_MspInit+0x124>)
 80066fe:	a906      	add	r1, sp, #24
 8006700:	4620      	mov	r0, r4
 8006702:	f001 ffb1 	bl	8008668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006706:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800670a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800670c:	2302      	movs	r3, #2
 800670e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006710:	2303      	movs	r3, #3
 8006712:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006714:	a906      	add	r1, sp, #24
 8006716:	4620      	mov	r0, r4
 8006718:	f001 ffa6 	bl	8008668 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 800671c:	2200      	movs	r2, #0
 800671e:	2105      	movs	r1, #5
 8006720:	2040      	movs	r0, #64	@ 0x40
 8006722:	f001 fc85 	bl	8008030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8006726:	2040      	movs	r0, #64	@ 0x40
 8006728:	f001 fc92 	bl	8008050 <HAL_NVIC_EnableIRQ>
}
 800672c:	e790      	b.n	8006650 <HAL_CAN_MspInit+0x1c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800672e:	4b08      	ldr	r3, [pc, #32]	@ (8006750 <HAL_CAN_MspInit+0x11c>)
 8006730:	69da      	ldr	r2, [r3, #28]
 8006732:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8006736:	61da      	str	r2, [r3, #28]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800673e:	9304      	str	r3, [sp, #16]
 8006740:	9b04      	ldr	r3, [sp, #16]
 8006742:	e7ce      	b.n	80066e2 <HAL_CAN_MspInit+0xae>
 8006744:	40006400 	.word	0x40006400
 8006748:	40006800 	.word	0x40006800
 800674c:	20002a5c 	.word	0x20002a5c
 8006750:	40021000 	.word	0x40021000
 8006754:	40010800 	.word	0x40010800
 8006758:	40010c00 	.word	0x40010c00

0800675c <HAL_CAN_RxFifo0MsgPendingCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 800675c:	b500      	push	{lr}
 800675e:	b087      	sub	sp, #28
    CanMsg_t RxMessageObject;
    BaseType_t xHigherPriorityTaskWoken = 0;
 8006760:	2100      	movs	r1, #0
 8006762:	9101      	str	r1, [sp, #4]
	/* Get RX message */
	if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8006764:	4b18      	ldr	r3, [pc, #96]	@ (80067c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8006766:	4a19      	ldr	r2, [pc, #100]	@ (80067cc <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8006768:	f001 fa20 	bl	8007bac <HAL_CAN_GetRxMessage>
 800676c:	b938      	cbnz	r0, 800677e <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		/* Reception Error */
		Error_Handler();
	}
    
    RxMessageObject.MsgID = RxHeader.StdId;
 800676e:	4b17      	ldr	r3, [pc, #92]	@ (80067cc <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	9202      	str	r2, [sp, #8]
    RxMessageObject.MsgLen = RxHeader.DLC;
 8006774:	7c18      	ldrb	r0, [r3, #16]
 8006776:	f88d 000c 	strb.w	r0, [sp, #12]
    
    for(uint8_t i = 0;i<RxMessageObject.MsgLen;++i)
 800677a:	2300      	movs	r3, #0
 800677c:	e00b      	b.n	8006796 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
		Error_Handler();
 800677e:	f000 faaf 	bl	8006ce0 <Error_Handler>
 8006782:	e7f4      	b.n	800676e <HAL_CAN_RxFifo0MsgPendingCallback+0x12>
    {
        RxMessageObject.Msg[i] = RxData[i];
 8006784:	4a10      	ldr	r2, [pc, #64]	@ (80067c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8006786:	5cd1      	ldrb	r1, [r2, r3]
 8006788:	f103 0218 	add.w	r2, r3, #24
 800678c:	446a      	add	r2, sp
 800678e:	f802 1c0b 	strb.w	r1, [r2, #-11]
    for(uint8_t i = 0;i<RxMessageObject.MsgLen;++i)
 8006792:	3301      	adds	r3, #1
 8006794:	b2db      	uxtb	r3, r3
 8006796:	4298      	cmp	r0, r3
 8006798:	d8f4      	bhi.n	8006784 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
    }
    
    if(ReceiveQueue != NULL)
 800679a:	4b0d      	ldr	r3, [pc, #52]	@ (80067d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800679c:	6818      	ldr	r0, [r3, #0]
 800679e:	b120      	cbz	r0, 80067aa <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
    {
        if(errQUEUE_FULL == xQueueSendFromISR(ReceiveQueue, &RxMessageObject, &xHigherPriorityTaskWoken))
 80067a0:	2300      	movs	r3, #0
 80067a2:	aa01      	add	r2, sp, #4
 80067a4:	a902      	add	r1, sp, #8
 80067a6:	f003 fa7b 	bl	8009ca0 <xQueueGenericSendFromISR>
        {
            //printf("ERR: CAN queue is full for buffer\r\n");
        }
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80067aa:	9b01      	ldr	r3, [sp, #4]
 80067ac:	b14b      	cbz	r3, 80067c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
 80067ae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80067b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	f3bf 8f6f 	isb	sy
}
 80067c2:	b007      	add	sp, #28
 80067c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80067c8:	20002ab0 	.word	0x20002ab0
 80067cc:	20002ab8 	.word	0x20002ab8
 80067d0:	20002b1c 	.word	0x20002b1c

080067d4 <CAN2_SendMsg>:

uint8_t CAN2_SendMsg(uint8_t *msgdata, uint32_t msgID, uint8_t msglen)
{
 80067d4:	b500      	push	{lr}
 80067d6:	b089      	sub	sp, #36	@ 0x24
	static uint32_t Gu32CurTxMailBox;
	uint8_t tmpdata[8] = {0u};
 80067d8:	2300      	movs	r3, #0
 80067da:	9306      	str	r3, [sp, #24]
 80067dc:	9307      	str	r3, [sp, #28]
	uint8_t i = 0, res = 0u;
	uint32_t freelevel = 0u;
	CAN_TxHeaderTypeDef TxHeader;
    if(msgID > 0x7ffu)
 80067de:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80067e2:	d308      	bcc.n	80067f6 <CAN2_SendMsg+0x22>
	{
		TxHeader.IDE = CAN_ID_EXT;
 80067e4:	2304      	movs	r3, #4
 80067e6:	9302      	str	r3, [sp, #8]
		
		TxHeader.ExtId = msgID;
 80067e8:	9101      	str	r1, [sp, #4]
	else
	{
		TxHeader.IDE = CAN_ID_STD;
		TxHeader.StdId = msgID;
	}
	TxHeader.DLC = msglen;
 80067ea:	9204      	str	r2, [sp, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 80067ec:	2300      	movs	r3, #0
 80067ee:	9303      	str	r3, [sp, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80067f0:	f88d 3014 	strb.w	r3, [sp, #20]

	for(i = 0u; i < msglen; i++) {
 80067f4:	e00c      	b.n	8006810 <CAN2_SendMsg+0x3c>
		TxHeader.IDE = CAN_ID_STD;
 80067f6:	2300      	movs	r3, #0
 80067f8:	9302      	str	r3, [sp, #8]
		TxHeader.StdId = msgID;
 80067fa:	9100      	str	r1, [sp, #0]
 80067fc:	e7f5      	b.n	80067ea <CAN2_SendMsg+0x16>
		tmpdata[i] = msgdata[i];
 80067fe:	f810 c003 	ldrb.w	ip, [r0, r3]
 8006802:	f103 0120 	add.w	r1, r3, #32
 8006806:	4469      	add	r1, sp
 8006808:	f801 cc08 	strb.w	ip, [r1, #-8]
	for(i = 0u; i < msglen; i++) {
 800680c:	3301      	adds	r3, #1
 800680e:	b2db      	uxtb	r3, r3
 8006810:	4293      	cmp	r3, r2
 8006812:	d3f4      	bcc.n	80067fe <CAN2_SendMsg+0x2a>
	}
	freelevel = HAL_CAN_GetTxMailboxesFreeLevel(&hcan2);
 8006814:	4809      	ldr	r0, [pc, #36]	@ (800683c <CAN2_SendMsg+0x68>)
 8006816:	f001 f9b0 	bl	8007b7a <HAL_CAN_GetTxMailboxesFreeLevel>
	if(freelevel != 0u) {
 800681a:	b918      	cbnz	r0, 8006824 <CAN2_SendMsg+0x50>
	uint8_t i = 0, res = 0u;
 800681c:	2000      	movs	r0, #0
		if(HAL_CAN_AddTxMessage(&hcan2, &TxHeader, tmpdata, &Gu32CurTxMailBox)!=HAL_OK){
            res = 0u;
        }
	}
	return res;
}
 800681e:	b009      	add	sp, #36	@ 0x24
 8006820:	f85d fb04 	ldr.w	pc, [sp], #4
		if(HAL_CAN_AddTxMessage(&hcan2, &TxHeader, tmpdata, &Gu32CurTxMailBox)!=HAL_OK){
 8006824:	4b06      	ldr	r3, [pc, #24]	@ (8006840 <CAN2_SendMsg+0x6c>)
 8006826:	aa06      	add	r2, sp, #24
 8006828:	4669      	mov	r1, sp
 800682a:	4804      	ldr	r0, [pc, #16]	@ (800683c <CAN2_SendMsg+0x68>)
 800682c:	f001 f930 	bl	8007a90 <HAL_CAN_AddTxMessage>
 8006830:	b908      	cbnz	r0, 8006836 <CAN2_SendMsg+0x62>
		res = 1u;
 8006832:	2001      	movs	r0, #1
 8006834:	e7f3      	b.n	800681e <CAN2_SendMsg+0x4a>
            res = 0u;
 8006836:	2000      	movs	r0, #0
 8006838:	e7f1      	b.n	800681e <CAN2_SendMsg+0x4a>
 800683a:	bf00      	nop
 800683c:	20002a60 	.word	0x20002a60
 8006840:	20002a58 	.word	0x20002a58

08006844 <CAN_SendMsg>:

uint8_t CAN_SendMsg(uint8_t *msgdata, uint32_t msgID, uint8_t msglen)
{
 8006844:	b500      	push	{lr}
 8006846:	b089      	sub	sp, #36	@ 0x24
	static uint32_t Gu32CurTxMailBox;
	uint8_t tmpdata[8] = {0u};
 8006848:	2300      	movs	r3, #0
 800684a:	9306      	str	r3, [sp, #24]
 800684c:	9307      	str	r3, [sp, #28]
	uint8_t i = 0, res = 0u;
	uint32_t freelevel = 0u;
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.IDE = CAN_ID_STD;
 800684e:	9302      	str	r3, [sp, #8]
	TxHeader.StdId = msgID;
 8006850:	9100      	str	r1, [sp, #0]
	TxHeader.DLC = msglen;
 8006852:	9204      	str	r2, [sp, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8006854:	9303      	str	r3, [sp, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8006856:	f88d 3014 	strb.w	r3, [sp, #20]

	for(i = 0u; i < msglen; i++) {
 800685a:	e008      	b.n	800686e <CAN_SendMsg+0x2a>
		tmpdata[i] = msgdata[i];
 800685c:	f810 c003 	ldrb.w	ip, [r0, r3]
 8006860:	f103 0120 	add.w	r1, r3, #32
 8006864:	4469      	add	r1, sp
 8006866:	f801 cc08 	strb.w	ip, [r1, #-8]
	for(i = 0u; i < msglen; i++) {
 800686a:	3301      	adds	r3, #1
 800686c:	b2db      	uxtb	r3, r3
 800686e:	4293      	cmp	r3, r2
 8006870:	d3f4      	bcc.n	800685c <CAN_SendMsg+0x18>
	}
	freelevel = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 8006872:	4808      	ldr	r0, [pc, #32]	@ (8006894 <CAN_SendMsg+0x50>)
 8006874:	f001 f981 	bl	8007b7a <HAL_CAN_GetTxMailboxesFreeLevel>
	if(freelevel != 0u) {
 8006878:	b918      	cbnz	r0, 8006882 <CAN_SendMsg+0x3e>
	uint8_t i = 0, res = 0u;
 800687a:	2000      	movs	r0, #0
		res = 1u;
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, tmpdata, &Gu32CurTxMailBox);
	}
	return res;
}
 800687c:	b009      	add	sp, #36	@ 0x24
 800687e:	f85d fb04 	ldr.w	pc, [sp], #4
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, tmpdata, &Gu32CurTxMailBox);
 8006882:	4b05      	ldr	r3, [pc, #20]	@ (8006898 <CAN_SendMsg+0x54>)
 8006884:	aa06      	add	r2, sp, #24
 8006886:	4669      	mov	r1, sp
 8006888:	4802      	ldr	r0, [pc, #8]	@ (8006894 <CAN_SendMsg+0x50>)
 800688a:	f001 f901 	bl	8007a90 <HAL_CAN_AddTxMessage>
		res = 1u;
 800688e:	2001      	movs	r0, #1
 8006890:	e7f4      	b.n	800687c <CAN_SendMsg+0x38>
 8006892:	bf00      	nop
 8006894:	20002a88 	.word	0x20002a88
 8006898:	20002a54 	.word	0x20002a54

0800689c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_channel1
  */
void MX_DMA_Init(void)
{
 800689c:	b500      	push	{lr}
 800689e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80068a0:	4b18      	ldr	r3, [pc, #96]	@ (8006904 <MX_DMA_Init+0x68>)
 80068a2:	695a      	ldr	r2, [r3, #20]
 80068a4:	f042 0202 	orr.w	r2, r2, #2
 80068a8:	615a      	str	r2, [r3, #20]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	9301      	str	r3, [sp, #4]
 80068b2:	9b01      	ldr	r3, [sp, #4]

  /* Configure DMA request hdma_memtomem_dma2_channel1 on DMA2_Channel1 */
  hdma_memtomem_dma2_channel1.Instance = DMA2_Channel1;
 80068b4:	4814      	ldr	r0, [pc, #80]	@ (8006908 <MX_DMA_Init+0x6c>)
 80068b6:	4b15      	ldr	r3, [pc, #84]	@ (800690c <MX_DMA_Init+0x70>)
 80068b8:	6003      	str	r3, [r0, #0]
  hdma_memtomem_dma2_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80068ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80068be:	6043      	str	r3, [r0, #4]
  hdma_memtomem_dma2_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 80068c0:	2340      	movs	r3, #64	@ 0x40
 80068c2:	6083      	str	r3, [r0, #8]
  hdma_memtomem_dma2_channel1.Init.MemInc = DMA_MINC_ENABLE;
 80068c4:	2380      	movs	r3, #128	@ 0x80
 80068c6:	60c3      	str	r3, [r0, #12]
  hdma_memtomem_dma2_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80068c8:	2300      	movs	r3, #0
 80068ca:	6103      	str	r3, [r0, #16]
  hdma_memtomem_dma2_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80068cc:	6143      	str	r3, [r0, #20]
  hdma_memtomem_dma2_channel1.Init.Mode = DMA_NORMAL;
 80068ce:	6183      	str	r3, [r0, #24]
  hdma_memtomem_dma2_channel1.Init.Priority = DMA_PRIORITY_LOW;
 80068d0:	61c3      	str	r3, [r0, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma2_channel1) != HAL_OK)
 80068d2:	f001 fbf5 	bl	80080c0 <HAL_DMA_Init>
 80068d6:	b990      	cbnz	r0, 80068fe <MX_DMA_Init+0x62>
    Error_Handler();
  }

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 5, 0);
 80068d8:	2200      	movs	r2, #0
 80068da:	2105      	movs	r1, #5
 80068dc:	203a      	movs	r0, #58	@ 0x3a
 80068de:	f001 fba7 	bl	8008030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80068e2:	203a      	movs	r0, #58	@ 0x3a
 80068e4:	f001 fbb4 	bl	8008050 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 80068e8:	2200      	movs	r2, #0
 80068ea:	2105      	movs	r1, #5
 80068ec:	203c      	movs	r0, #60	@ 0x3c
 80068ee:	f001 fb9f 	bl	8008030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80068f2:	203c      	movs	r0, #60	@ 0x3c
 80068f4:	f001 fbac 	bl	8008050 <HAL_NVIC_EnableIRQ>

}
 80068f8:	b003      	add	sp, #12
 80068fa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80068fe:	f000 f9ef 	bl	8006ce0 <Error_Handler>
 8006902:	e7e9      	b.n	80068d8 <MX_DMA_Init+0x3c>
 8006904:	40021000 	.word	0x40021000
 8006908:	20002ad4 	.word	0x20002ad4
 800690c:	40020408 	.word	0x40020408

08006910 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8006910:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8006912:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006916:	f003 f93c 	bl	8009b92 <osDelay>
 800691a:	e7fa      	b.n	8006912 <StartDefaultTask+0x2>

0800691c <heartbeat_task>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void heartbeat_task(void const * argument)
{
 800691c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN heartbeat_task */
    UserTimer_Initial();
 800691e:	f004 fc0b 	bl	800b138 <UserTimer_Initial>
    printf("heartbeat_task\r\n");
 8006922:	4803      	ldr	r0, [pc, #12]	@ (8006930 <heartbeat_task+0x14>)
 8006924:	f005 fc18 	bl	800c158 <puts>
  /* Infinite loop */
  for(;;)
  {
      UserTimer_Handler();
 8006928:	f004 fc2e 	bl	800b188 <UserTimer_Handler>
 800692c:	e7fc      	b.n	8006928 <heartbeat_task+0xc>
 800692e:	bf00      	nop
 8006930:	08010070 	.word	0x08010070

08006934 <task0_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_can_task */
void task0_task(void const * argument)
{
 8006934:	b508      	push	{r3, lr}
    (void)*argument;
    for(;;)
    {
        vTaskDelay(pdMS_TO_TICKS(1));
 8006936:	2001      	movs	r0, #1
 8006938:	f003 fd70 	bl	800a41c <vTaskDelay>
 800693c:	e7fb      	b.n	8006936 <task0_task+0x2>

0800693e <task1_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gpio_task */
void task1_task(void const * argument)
{
 800693e:	b508      	push	{r3, lr}
    (void)*argument;
    for(;;)
    {
			//printf("task1\r\n");
        ADC_SamplingProcess();
 8006940:	f7fa fb66 	bl	8001010 <ADC_SamplingProcess>
        vTaskDelay(pdMS_TO_TICKS(5));
 8006944:	2005      	movs	r0, #5
 8006946:	f003 fd69 	bl	800a41c <vTaskDelay>
 800694a:	e7f9      	b.n	8006940 <task1_task+0x2>

0800694c <task2_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_button_task */
void task2_task(void const * argument)
{
 800694c:	b508      	push	{r3, lr}
 800694e:	e00a      	b.n	8006966 <task2_task+0x1a>
        // Key_Rotary_CheckProcess();
        Key_CheckProcess();
        if (key_menu_cnt != GetMenuIndex() || 
            key_item_cnt != GetItemIndex() || 
            key_value_cnt != GetItemValue(GetMenuIndex(), GetItemIndex(), 0)) {
            SaveItemValue(key_menu_cnt,key_item_cnt,key_value_cnt);
 8006950:	4b13      	ldr	r3, [pc, #76]	@ (80069a0 <task2_task+0x54>)
 8006952:	881a      	ldrh	r2, [r3, #0]
 8006954:	4b13      	ldr	r3, [pc, #76]	@ (80069a4 <task2_task+0x58>)
 8006956:	7819      	ldrb	r1, [r3, #0]
 8006958:	4b13      	ldr	r3, [pc, #76]	@ (80069a8 <task2_task+0x5c>)
 800695a:	7818      	ldrb	r0, [r3, #0]
 800695c:	f7fe ff2e 	bl	80057bc <SaveItemValue>
        }   
        vTaskDelay(pdMS_TO_TICKS(10));
 8006960:	200a      	movs	r0, #10
 8006962:	f003 fd5b 	bl	800a41c <vTaskDelay>
        Key_CheckProcess();
 8006966:	f7fb f905 	bl	8001b74 <Key_CheckProcess>
        if (key_menu_cnt != GetMenuIndex() || 
 800696a:	f7fb fab7 	bl	8001edc <GetMenuIndex>
 800696e:	4b0e      	ldr	r3, [pc, #56]	@ (80069a8 <task2_task+0x5c>)
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	4298      	cmp	r0, r3
 8006974:	d1ec      	bne.n	8006950 <task2_task+0x4>
            key_item_cnt != GetItemIndex() || 
 8006976:	f7fb fab7 	bl	8001ee8 <GetItemIndex>
 800697a:	4b0a      	ldr	r3, [pc, #40]	@ (80069a4 <task2_task+0x58>)
 800697c:	781b      	ldrb	r3, [r3, #0]
        if (key_menu_cnt != GetMenuIndex() || 
 800697e:	4298      	cmp	r0, r3
 8006980:	d1e6      	bne.n	8006950 <task2_task+0x4>
            key_value_cnt != GetItemValue(GetMenuIndex(), GetItemIndex(), 0)) {
 8006982:	4b07      	ldr	r3, [pc, #28]	@ (80069a0 <task2_task+0x54>)
 8006984:	881d      	ldrh	r5, [r3, #0]
 8006986:	f7fb faa9 	bl	8001edc <GetMenuIndex>
 800698a:	4604      	mov	r4, r0
 800698c:	f7fb faac 	bl	8001ee8 <GetItemIndex>
 8006990:	4601      	mov	r1, r0
 8006992:	2200      	movs	r2, #0
 8006994:	4620      	mov	r0, r4
 8006996:	f7fe fc37 	bl	8005208 <GetItemValue>
            key_item_cnt != GetItemIndex() || 
 800699a:	4285      	cmp	r5, r0
 800699c:	d1d8      	bne.n	8006950 <task2_task+0x4>
 800699e:	e7df      	b.n	8006960 <task2_task+0x14>
 80069a0:	20000a96 	.word	0x20000a96
 80069a4:	20000a98 	.word	0x20000a98
 80069a8:	20000a99 	.word	0x20000a99

080069ac <task3_task>:
*/
/* USER CODE END Header_menu_task */
extern uint8_t Can_Send_Sts;

void task3_task(void const * argument)
{
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	e00f      	b.n	80069d0 <task3_task+0x24>
        {
            if(Last_CAN_SendSts != Can_Send_Sts)
            {
                Last_CAN_SendSts = Can_Send_Sts;
            }
            if (v_menu != s_menu || v_item != s_item || v_value != s_value) {
 80069b0:	4b22      	ldr	r3, [pc, #136]	@ (8006a3c <task3_task+0x90>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	42ab      	cmp	r3, r5
 80069b6:	d126      	bne.n	8006a06 <task3_task+0x5a>
 80069b8:	4b21      	ldr	r3, [pc, #132]	@ (8006a40 <task3_task+0x94>)
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d122      	bne.n	8006a06 <task3_task+0x5a>
 80069c0:	e003      	b.n	80069ca <task3_task+0x1e>
                }
            }
        }
        else
        {
            if(Last_CAN_SendSts != Can_Send_Sts)
 80069c2:	4a20      	ldr	r2, [pc, #128]	@ (8006a44 <task3_task+0x98>)
 80069c4:	7812      	ldrb	r2, [r2, #0]
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d12a      	bne.n	8006a20 <task3_task+0x74>
                s_menu = 0xFF;
                s_item = 0xFF;
                s_value = 0xFFFF;
            }
        }
        vTaskDelay(pdMS_TO_TICKS(20));
 80069ca:	2014      	movs	r0, #20
 80069cc:	f003 fd26 	bl	800a41c <vTaskDelay>
        v_menu = GetMenuIndex();
 80069d0:	f7fb fa84 	bl	8001edc <GetMenuIndex>
 80069d4:	4604      	mov	r4, r0
        v_item = GetItemIndex();
 80069d6:	f7fb fa87 	bl	8001ee8 <GetItemIndex>
 80069da:	4605      	mov	r5, r0
        v_value = GetItemValue(v_menu, v_item, 0);
 80069dc:	2200      	movs	r2, #0
 80069de:	4601      	mov	r1, r0
 80069e0:	4620      	mov	r0, r4
 80069e2:	f7fe fc11 	bl	8005208 <GetItemValue>
        if(Can_Send_Sts == E_CANSEND_OPEN)
 80069e6:	4b18      	ldr	r3, [pc, #96]	@ (8006a48 <task3_task+0x9c>)
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e9      	bne.n	80069c2 <task3_task+0x16>
 80069ee:	4606      	mov	r6, r0
 80069f0:	b202      	sxth	r2, r0
            if(Last_CAN_SendSts != Can_Send_Sts)
 80069f2:	4914      	ldr	r1, [pc, #80]	@ (8006a44 <task3_task+0x98>)
 80069f4:	7809      	ldrb	r1, [r1, #0]
 80069f6:	428b      	cmp	r3, r1
 80069f8:	d001      	beq.n	80069fe <task3_task+0x52>
                Last_CAN_SendSts = Can_Send_Sts;
 80069fa:	4912      	ldr	r1, [pc, #72]	@ (8006a44 <task3_task+0x98>)
 80069fc:	700b      	strb	r3, [r1, #0]
            if (v_menu != s_menu || v_item != s_item || v_value != s_value) {
 80069fe:	4b13      	ldr	r3, [pc, #76]	@ (8006a4c <task3_task+0xa0>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	42a3      	cmp	r3, r4
 8006a04:	d0d4      	beq.n	80069b0 <task3_task+0x4>
                if (LCD_Menu_Display(v_menu, v_item, v_value) == DISPLAY_SUCCESS) {
 8006a06:	4629      	mov	r1, r5
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f7fb fabf 	bl	8001f8c <LCD_Menu_Display>
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	d1db      	bne.n	80069ca <task3_task+0x1e>
                    s_menu = v_menu;
 8006a12:	4b0e      	ldr	r3, [pc, #56]	@ (8006a4c <task3_task+0xa0>)
 8006a14:	701c      	strb	r4, [r3, #0]
                    s_item = v_item;
 8006a16:	4b09      	ldr	r3, [pc, #36]	@ (8006a3c <task3_task+0x90>)
 8006a18:	701d      	strb	r5, [r3, #0]
                    s_value = v_value;
 8006a1a:	4b09      	ldr	r3, [pc, #36]	@ (8006a40 <task3_task+0x94>)
 8006a1c:	801e      	strh	r6, [r3, #0]
 8006a1e:	e7d4      	b.n	80069ca <task3_task+0x1e>
                Last_CAN_SendSts = Can_Send_Sts;
 8006a20:	4a08      	ldr	r2, [pc, #32]	@ (8006a44 <task3_task+0x98>)
 8006a22:	7013      	strb	r3, [r2, #0]
                LCD_Show_CANSendClose();
 8006a24:	f7fb fac8 	bl	8001fb8 <LCD_Show_CANSendClose>
                s_menu = 0xFF;
 8006a28:	23ff      	movs	r3, #255	@ 0xff
 8006a2a:	4a08      	ldr	r2, [pc, #32]	@ (8006a4c <task3_task+0xa0>)
 8006a2c:	7013      	strb	r3, [r2, #0]
                s_item = 0xFF;
 8006a2e:	4a03      	ldr	r2, [pc, #12]	@ (8006a3c <task3_task+0x90>)
 8006a30:	7013      	strb	r3, [r2, #0]
                s_value = 0xFFFF;
 8006a32:	4b03      	ldr	r3, [pc, #12]	@ (8006a40 <task3_task+0x94>)
 8006a34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a38:	801a      	strh	r2, [r3, #0]
 8006a3a:	e7c6      	b.n	80069ca <task3_task+0x1e>
 8006a3c:	20002b1a 	.word	0x20002b1a
 8006a40:	20002b18 	.word	0x20002b18
 8006a44:	20002b1b 	.word	0x20002b1b
 8006a48:	20000a95 	.word	0x20000a95
 8006a4c:	200005a8 	.word	0x200005a8

08006a50 <vApplicationTickHook>:
}
 8006a50:	4770      	bx	lr

08006a52 <vApplicationStackOverflowHook>:
}
 8006a52:	4770      	bx	lr

08006a54 <vApplicationMallocFailedHook>:
}
 8006a54:	4770      	bx	lr
	...

08006a58 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8006a58:	4b03      	ldr	r3, [pc, #12]	@ (8006a68 <vApplicationGetIdleTaskMemory+0x10>)
 8006a5a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8006a5c:	4b03      	ldr	r3, [pc, #12]	@ (8006a6c <vApplicationGetIdleTaskMemory+0x14>)
 8006a5e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006a60:	2380      	movs	r3, #128	@ 0x80
 8006a62:	6013      	str	r3, [r2, #0]
}
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	20002d20 	.word	0x20002d20
 8006a6c:	20002b20 	.word	0x20002b20

08006a70 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8006a70:	b510      	push	{r4, lr}
 8006a72:	b0b2      	sub	sp, #200	@ 0xc8
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8006a74:	4c3f      	ldr	r4, [pc, #252]	@ (8006b74 <MX_FREERTOS_Init+0x104>)
 8006a76:	f10d 0cac 	add.w	ip, sp, #172	@ 0xac
 8006a7a:	46a6      	mov	lr, r4
 8006a7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006a80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006a84:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8006a88:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	a82b      	add	r0, sp, #172	@ 0xac
 8006a90:	f003 f84c 	bl	8009b2c <osThreadCreate>
 8006a94:	4b38      	ldr	r3, [pc, #224]	@ (8006b78 <MX_FREERTOS_Init+0x108>)
 8006a96:	6018      	str	r0, [r3, #0]
  osThreadDef(heartbeattask, heartbeat_task, osPriorityIdle, 0, 128);
 8006a98:	f10d 0c90 	add.w	ip, sp, #144	@ 0x90
 8006a9c:	f104 0e1c 	add.w	lr, r4, #28
 8006aa0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006aa4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006aa8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8006aac:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  heartbeattaskHandle = osThreadCreate(osThread(heartbeattask), NULL);
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	a824      	add	r0, sp, #144	@ 0x90
 8006ab4:	f003 f83a 	bl	8009b2c <osThreadCreate>
 8006ab8:	4b30      	ldr	r3, [pc, #192]	@ (8006b7c <MX_FREERTOS_Init+0x10c>)
 8006aba:	6018      	str	r0, [r3, #0]
  osThreadDef(task0task, task0_task, osPriorityIdle, 0, 128);
 8006abc:	f10d 0c74 	add.w	ip, sp, #116	@ 0x74
 8006ac0:	f104 0e38 	add.w	lr, r4, #56	@ 0x38
 8006ac4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006ac8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006acc:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8006ad0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  task0Handle = osThreadCreate(osThread(task0task), NULL);
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	a81d      	add	r0, sp, #116	@ 0x74
 8006ad8:	f003 f828 	bl	8009b2c <osThreadCreate>
 8006adc:	4b28      	ldr	r3, [pc, #160]	@ (8006b80 <MX_FREERTOS_Init+0x110>)
 8006ade:	6018      	str	r0, [r3, #0]
  osThreadDef(task1task, task1_task, osPriorityIdle, 0, 128);
 8006ae0:	f10d 0c58 	add.w	ip, sp, #88	@ 0x58
 8006ae4:	f104 0e54 	add.w	lr, r4, #84	@ 0x54
 8006ae8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006aec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006af0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8006af4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1task), NULL);
 8006af8:	2100      	movs	r1, #0
 8006afa:	a816      	add	r0, sp, #88	@ 0x58
 8006afc:	f003 f816 	bl	8009b2c <osThreadCreate>
 8006b00:	4b20      	ldr	r3, [pc, #128]	@ (8006b84 <MX_FREERTOS_Init+0x114>)
 8006b02:	6018      	str	r0, [r3, #0]
  osThreadDef(task2task, task2_task, osPriorityIdle, 0, 128);
 8006b04:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8006b08:	f104 0e70 	add.w	lr, r4, #112	@ 0x70
 8006b0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006b10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006b14:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8006b18:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2task), NULL);
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	a80f      	add	r0, sp, #60	@ 0x3c
 8006b20:	f003 f804 	bl	8009b2c <osThreadCreate>
 8006b24:	4b18      	ldr	r3, [pc, #96]	@ (8006b88 <MX_FREERTOS_Init+0x118>)
 8006b26:	6018      	str	r0, [r3, #0]
  osThreadDef(task3task, task3_task, osPriorityIdle, 0, 128);
 8006b28:	f10d 0c20 	add.w	ip, sp, #32
 8006b2c:	f104 0e8c 	add.w	lr, r4, #140	@ 0x8c
 8006b30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006b34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006b38:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8006b3c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3task), NULL);
 8006b40:	2100      	movs	r1, #0
 8006b42:	a808      	add	r0, sp, #32
 8006b44:	f002 fff2 	bl	8009b2c <osThreadCreate>
 8006b48:	4b10      	ldr	r3, [pc, #64]	@ (8006b8c <MX_FREERTOS_Init+0x11c>)
 8006b4a:	6018      	str	r0, [r3, #0]
  osThreadDef(cantransmittask, CanTransmitFunction, osPriorityIdle, 0, 128);
 8006b4c:	f10d 0e04 	add.w	lr, sp, #4
 8006b50:	f104 0ca8 	add.w	ip, r4, #168	@ 0xa8
 8006b54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006b58:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8006b5c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8006b60:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  CanTransmitHandle = osThreadCreate(osThread(cantransmittask), NULL);
 8006b64:	2100      	movs	r1, #0
 8006b66:	a801      	add	r0, sp, #4
 8006b68:	f002 ffe0 	bl	8009b2c <osThreadCreate>
 8006b6c:	4b08      	ldr	r3, [pc, #32]	@ (8006b90 <MX_FREERTOS_Init+0x120>)
 8006b6e:	6018      	str	r0, [r3, #0]
}
 8006b70:	b032      	add	sp, #200	@ 0xc8
 8006b72:	bd10      	pop	{r4, pc}
 8006b74:	0800f9f0 	.word	0x0800f9f0
 8006b78:	20002d7c 	.word	0x20002d7c
 8006b7c:	20002d94 	.word	0x20002d94
 8006b80:	20002d90 	.word	0x20002d90
 8006b84:	20002d8c 	.word	0x20002d8c
 8006b88:	20002d88 	.word	0x20002d88
 8006b8c:	20002d84 	.word	0x20002d84
 8006b90:	20002d80 	.word	0x20002d80

08006b94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b98:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b9a:	2500      	movs	r5, #0
 8006b9c:	9504      	str	r5, [sp, #16]
 8006b9e:	9505      	str	r5, [sp, #20]
 8006ba0:	9506      	str	r5, [sp, #24]
 8006ba2:	9507      	str	r5, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ba4:	4b42      	ldr	r3, [pc, #264]	@ (8006cb0 <MX_GPIO_Init+0x11c>)
 8006ba6:	699a      	ldr	r2, [r3, #24]
 8006ba8:	f042 0210 	orr.w	r2, r2, #16
 8006bac:	619a      	str	r2, [r3, #24]
 8006bae:	699a      	ldr	r2, [r3, #24]
 8006bb0:	f002 0210 	and.w	r2, r2, #16
 8006bb4:	9200      	str	r2, [sp, #0]
 8006bb6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006bb8:	699a      	ldr	r2, [r3, #24]
 8006bba:	f042 0220 	orr.w	r2, r2, #32
 8006bbe:	619a      	str	r2, [r3, #24]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	f002 0220 	and.w	r2, r2, #32
 8006bc6:	9201      	str	r2, [sp, #4]
 8006bc8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bca:	699a      	ldr	r2, [r3, #24]
 8006bcc:	f042 0204 	orr.w	r2, r2, #4
 8006bd0:	619a      	str	r2, [r3, #24]
 8006bd2:	699a      	ldr	r2, [r3, #24]
 8006bd4:	f002 0204 	and.w	r2, r2, #4
 8006bd8:	9202      	str	r2, [sp, #8]
 8006bda:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bdc:	699a      	ldr	r2, [r3, #24]
 8006bde:	f042 0208 	orr.w	r2, r2, #8
 8006be2:	619a      	str	r2, [r3, #24]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	f003 0308 	and.w	r3, r3, #8
 8006bea:	9303      	str	r3, [sp, #12]
 8006bec:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_SET);
 8006bee:	f8df 90c4 	ldr.w	r9, [pc, #196]	@ 8006cb4 <MX_GPIO_Init+0x120>
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	2148      	movs	r1, #72	@ 0x48
 8006bf6:	4648      	mov	r0, r9
 8006bf8:	f001 fe44 	bl	8008884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8006bfc:	4f2e      	ldr	r7, [pc, #184]	@ (8006cb8 <MX_GPIO_Init+0x124>)
 8006bfe:	2201      	movs	r2, #1
 8006c00:	21f1      	movs	r1, #241	@ 0xf1
 8006c02:	4638      	mov	r0, r7
 8006c04:	f001 fe3e 	bl	8008884 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8006c08:	4e2c      	ldr	r6, [pc, #176]	@ (8006cbc <MX_GPIO_Init+0x128>)
 8006c0a:	462a      	mov	r2, r5
 8006c0c:	210a      	movs	r1, #10
 8006c0e:	4630      	mov	r0, r6
 8006c10:	f001 fe38 	bl	8008884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_SET);
 8006c14:	2201      	movs	r2, #1
 8006c16:	f44f 410c 	mov.w	r1, #35840	@ 0x8c00
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	f001 fe32 	bl	8008884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006c20:	462a      	mov	r2, r5
 8006c22:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006c26:	4638      	mov	r0, r7
 8006c28:	f001 fe2c 	bl	8008884 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8006c2c:	f44f 530e 	mov.w	r3, #9088	@ 0x2380
 8006c30:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c32:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c34:	2401      	movs	r4, #1
 8006c36:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c38:	a904      	add	r1, sp, #16
 8006c3a:	4648      	mov	r0, r9
 8006c3c:	f001 fd14 	bl	8008668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8006c40:	2348      	movs	r3, #72	@ 0x48
 8006c42:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c44:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c46:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c48:	f04f 0803 	mov.w	r8, #3
 8006c4c:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c50:	a904      	add	r1, sp, #16
 8006c52:	4648      	mov	r0, r9
 8006c54:	f001 fd08 	bl	8008668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA6
                           PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8006c58:	f240 63f1 	movw	r3, #1777	@ 0x6f1
 8006c5c:	9304      	str	r3, [sp, #16]
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c5e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c60:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c62:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c66:	a904      	add	r1, sp, #16
 8006c68:	4638      	mov	r0, r7
 8006c6a:	f001 fcfd 	bl	8008668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_15;
 8006c6e:	f248 1302 	movw	r3, #33026	@ 0x8102
 8006c72:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c74:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c76:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c78:	a904      	add	r1, sp, #16
 8006c7a:	4638      	mov	r0, r7
 8006c7c:	f001 fcf4 	bl	8008668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB10 PB11 PB15
                           PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15
 8006c80:	f648 430a 	movw	r3, #35850	@ 0x8c0a
 8006c84:	9304      	str	r3, [sp, #16]
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c86:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c88:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c8a:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c8e:	a904      	add	r1, sp, #16
 8006c90:	4630      	mov	r0, r6
 8006c92:	f001 fce9 	bl	8008668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8006c96:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 8006c9a:	9304      	str	r3, [sp, #16]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c9c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c9e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ca0:	a904      	add	r1, sp, #16
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	f001 fce0 	bl	8008668 <HAL_GPIO_Init>

}
 8006ca8:	b009      	add	sp, #36	@ 0x24
 8006caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cae:	bf00      	nop
 8006cb0:	40021000 	.word	0x40021000
 8006cb4:	40011000 	.word	0x40011000
 8006cb8:	40010800 	.word	0x40010800
 8006cbc:	40010c00 	.word	0x40010c00

08006cc0 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8006cc0:	b500      	push	{lr}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	9001      	str	r0, [sp, #4]
    HAL_UART_Transmit(&huart4 , (uint8_t *)&ch, 1, 0xFFFF);
 8006cc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006cca:	2201      	movs	r2, #1
 8006ccc:	a901      	add	r1, sp, #4
 8006cce:	4803      	ldr	r0, [pc, #12]	@ (8006cdc <__io_putchar+0x1c>)
 8006cd0:	f002 fbfe 	bl	80094d0 <HAL_UART_Transmit>
    return ch;
}
 8006cd4:	9801      	ldr	r0, [sp, #4]
 8006cd6:	b003      	add	sp, #12
 8006cd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8006cdc:	20002fb4 	.word	0x20002fb4

08006ce0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006ce0:	b672      	cpsid	i
 8006ce2:	e7fe      	b.n	8006ce2 <Error_Handler+0x2>

08006ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006ce4:	b500      	push	{lr}
 8006ce6:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006ce8:	2238      	movs	r2, #56	@ 0x38
 8006cea:	2100      	movs	r1, #0
 8006cec:	eb0d 0002 	add.w	r0, sp, r2
 8006cf0:	f005 fb34 	bl	800c35c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	9109      	str	r1, [sp, #36]	@ 0x24
 8006cf8:	910a      	str	r1, [sp, #40]	@ 0x28
 8006cfa:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006cfc:	910c      	str	r1, [sp, #48]	@ 0x30
 8006cfe:	910d      	str	r1, [sp, #52]	@ 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006d00:	2220      	movs	r2, #32
 8006d02:	a801      	add	r0, sp, #4
 8006d04:	f005 fb2a 	bl	800c35c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006d08:	2201      	movs	r2, #1
 8006d0a:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006d0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006d10:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006d12:	9213      	str	r2, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006d14:	2202      	movs	r2, #2
 8006d16:	9216      	str	r2, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006d18:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006d1a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8006d1e:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d20:	a80e      	add	r0, sp, #56	@ 0x38
 8006d22:	f001 fdcb 	bl	80088bc <HAL_RCC_OscConfig>
 8006d26:	b9e0      	cbnz	r0, 8006d62 <SystemClock_Config+0x7e>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006d28:	230f      	movs	r3, #15
 8006d2a:	9309      	str	r3, [sp, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006d2c:	2102      	movs	r1, #2
 8006d2e:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006d30:	2300      	movs	r3, #0
 8006d32:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006d34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006d38:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006d3a:	930d      	str	r3, [sp, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006d3c:	a809      	add	r0, sp, #36	@ 0x24
 8006d3e:	f002 f895 	bl	8008e6c <HAL_RCC_ClockConfig>
 8006d42:	b980      	cbnz	r0, 8006d66 <SystemClock_Config+0x82>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006d44:	2302      	movs	r3, #2
 8006d46:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8006d48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d4c:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006d4e:	a801      	add	r0, sp, #4
 8006d50:	f002 f968 	bl	8009024 <HAL_RCCEx_PeriphCLKConfig>
 8006d54:	b948      	cbnz	r0, 8006d6a <SystemClock_Config+0x86>
    Error_Handler();
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8006d56:	4b06      	ldr	r3, [pc, #24]	@ (8006d70 <SystemClock_Config+0x8c>)
 8006d58:	2201      	movs	r2, #1
 8006d5a:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8006d5c:	b01d      	add	sp, #116	@ 0x74
 8006d5e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006d62:	f7ff ffbd 	bl	8006ce0 <Error_Handler>
    Error_Handler();
 8006d66:	f7ff ffbb 	bl	8006ce0 <Error_Handler>
    Error_Handler();
 8006d6a:	f7ff ffb9 	bl	8006ce0 <Error_Handler>
 8006d6e:	bf00      	nop
 8006d70:	42420000 	.word	0x42420000

08006d74 <main>:
{
 8006d74:	b508      	push	{r3, lr}
  HAL_Init();
 8006d76:	f000 fae9 	bl	800734c <HAL_Init>
  SystemClock_Config();
 8006d7a:	f7ff ffb3 	bl	8006ce4 <SystemClock_Config>
  MX_GPIO_Init();
 8006d7e:	f7ff ff09 	bl	8006b94 <MX_GPIO_Init>
  MX_DMA_Init();
 8006d82:	f7ff fd8b 	bl	800689c <MX_DMA_Init>
  MX_ADC1_Init();
 8006d86:	f7ff fb31 	bl	80063ec <MX_ADC1_Init>
  MX_CAN1_Init();
 8006d8a:	f7ff fbd3 	bl	8006534 <MX_CAN1_Init>
  MX_CAN2_Init();
 8006d8e:	f7ff fc11 	bl	80065b4 <MX_CAN2_Init>
  MX_UART4_Init();
 8006d92:	f000 f8e3 	bl	8006f5c <MX_UART4_Init>
  MX_UART5_Init();
 8006d96:	f000 f8fb 	bl	8006f90 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8006d9a:	f000 f913 	bl	8006fc4 <MX_USART2_UART_Init>
  App_Init(); //DBC CAN
 8006d9e:	f7fa f9bd 	bl	800111c <App_Init>
  lcd128_Init(); //LCD
 8006da2:	f7fb f937 	bl	8002014 <lcd128_Init>
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE); //ʹ��IDLE�ж�
 8006da6:	4809      	ldr	r0, [pc, #36]	@ (8006dcc <main+0x58>)
 8006da8:	6802      	ldr	r2, [r0, #0]
 8006daa:	68d3      	ldr	r3, [r2, #12]
 8006dac:	f043 0310 	orr.w	r3, r3, #16
 8006db0:	60d3      	str	r3, [r2, #12]
  HAL_UART_Receive_DMA(&huart4, usart4_rx_buffer_data, 256);
 8006db2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006db6:	4906      	ldr	r1, [pc, #24]	@ (8006dd0 <main+0x5c>)
 8006db8:	f002 fe9a 	bl	8009af0 <HAL_UART_Receive_DMA>
  CanCcl_vPoweronInit(); //CAN
 8006dbc:	f003 ff00 	bl	800abc0 <CanCcl_vPoweronInit>
  MX_FREERTOS_Init();
 8006dc0:	f7ff fe56 	bl	8006a70 <MX_FREERTOS_Init>
  osKernelStart();
 8006dc4:	f002 fead 	bl	8009b22 <osKernelStart>
 8006dc8:	e7fe      	b.n	8006dc8 <main+0x54>
 8006dca:	bf00      	nop
 8006dcc:	20002fb4 	.word	0x20002fb4
 8006dd0:	20002d98 	.word	0x20002d98

08006dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006dd4:	b500      	push	{lr}
 8006dd6:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006dd8:	4b11      	ldr	r3, [pc, #68]	@ (8006e20 <HAL_MspInit+0x4c>)
 8006dda:	699a      	ldr	r2, [r3, #24]
 8006ddc:	f042 0201 	orr.w	r2, r2, #1
 8006de0:	619a      	str	r2, [r3, #24]
 8006de2:	699a      	ldr	r2, [r3, #24]
 8006de4:	f002 0201 	and.w	r2, r2, #1
 8006de8:	9200      	str	r2, [sp, #0]
 8006dea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006dec:	69da      	ldr	r2, [r3, #28]
 8006dee:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006df2:	61da      	str	r2, [r3, #28]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dfa:	9301      	str	r3, [sp, #4]
 8006dfc:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006dfe:	2200      	movs	r2, #0
 8006e00:	210f      	movs	r1, #15
 8006e02:	f06f 0001 	mvn.w	r0, #1
 8006e06:	f001 f913 	bl	8008030 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8006e0a:	4a06      	ldr	r2, [pc, #24]	@ (8006e24 <HAL_MspInit+0x50>)
 8006e0c:	6853      	ldr	r3, [r2, #4]
 8006e0e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8006e12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e16:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006e18:	b003      	add	sp, #12
 8006e1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e1e:	bf00      	nop
 8006e20:	40021000 	.word	0x40021000
 8006e24:	40010000 	.word	0x40010000

08006e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006e28:	e7fe      	b.n	8006e28 <NMI_Handler>

08006e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006e2a:	e7fe      	b.n	8006e2a <HardFault_Handler>

08006e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006e2c:	e7fe      	b.n	8006e2c <MemManage_Handler>

08006e2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006e2e:	e7fe      	b.n	8006e2e <BusFault_Handler>

08006e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006e30:	e7fe      	b.n	8006e30 <UsageFault_Handler>

08006e32 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006e32:	4770      	bx	lr

08006e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006e34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006e36:	f000 fa9b 	bl	8007370 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006e3a:	f003 fbb5 	bl	800a5a8 <xTaskGetSchedulerState>
 8006e3e:	2801      	cmp	r0, #1
 8006e40:	d100      	bne.n	8006e44 <SysTick_Handler+0x10>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006e42:	bd08      	pop	{r3, pc}
  xPortSysTickHandler();
 8006e44:	f003 fcce 	bl	800a7e4 <xPortSysTickHandler>
}
 8006e48:	e7fb      	b.n	8006e42 <SysTick_Handler+0xe>
	...

08006e4c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006e4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006e4e:	4802      	ldr	r0, [pc, #8]	@ (8006e58 <CAN1_RX0_IRQHandler+0xc>)
 8006e50:	f000 ff7f 	bl	8007d52 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006e54:	bd08      	pop	{r3, pc}
 8006e56:	bf00      	nop
 8006e58:	20002a88 	.word	0x20002a88

08006e5c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006e5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006e5e:	4802      	ldr	r0, [pc, #8]	@ (8006e68 <UART4_IRQHandler+0xc>)
 8006e60:	f002 fc56 	bl	8009710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006e64:	bd08      	pop	{r3, pc}
 8006e66:	bf00      	nop
 8006e68:	20002fb4 	.word	0x20002fb4

08006e6c <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8006e6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8006e6e:	4802      	ldr	r0, [pc, #8]	@ (8006e78 <DMA2_Channel3_IRQHandler+0xc>)
 8006e70:	f001 fa84 	bl	800837c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8006e74:	bd08      	pop	{r3, pc}
 8006e76:	bf00      	nop
 8006e78:	20002ee0 	.word	0x20002ee0

08006e7c <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8006e7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8006e7e:	4802      	ldr	r0, [pc, #8]	@ (8006e88 <DMA2_Channel5_IRQHandler+0xc>)
 8006e80:	f001 fa7c 	bl	800837c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8006e84:	bd08      	pop	{r3, pc}
 8006e86:	bf00      	nop
 8006e88:	20002e9c 	.word	0x20002e9c

08006e8c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8006e8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8006e8e:	4802      	ldr	r0, [pc, #8]	@ (8006e98 <CAN2_RX0_IRQHandler+0xc>)
 8006e90:	f000 ff5f 	bl	8007d52 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8006e94:	bd08      	pop	{r3, pc}
 8006e96:	bf00      	nop
 8006e98:	20002a60 	.word	0x20002a60

08006e9c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8006e9c:	2001      	movs	r0, #1
 8006e9e:	4770      	bx	lr

08006ea0 <_kill>:

int _kill(int pid, int sig)
{
 8006ea0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006ea2:	f005 faad 	bl	800c400 <__errno>
 8006ea6:	2316      	movs	r3, #22
 8006ea8:	6003      	str	r3, [r0, #0]
  return -1;
}
 8006eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8006eae:	bd08      	pop	{r3, pc}

08006eb0 <_exit>:

void _exit (int status)
{
 8006eb0:	b508      	push	{r3, lr}
  _kill(status, -1);
 8006eb2:	f04f 31ff 	mov.w	r1, #4294967295
 8006eb6:	f7ff fff3 	bl	8006ea0 <_kill>
 8006eba:	e7fe      	b.n	8006eba <_exit+0xa>

08006ebc <_read>:
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006ebc:	b570      	push	{r4, r5, r6, lr}
 8006ebe:	460c      	mov	r4, r1
 8006ec0:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ec2:	2500      	movs	r5, #0
 8006ec4:	e006      	b.n	8006ed4 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8006ec6:	f3af 8000 	nop.w
 8006eca:	4621      	mov	r1, r4
 8006ecc:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ed0:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8006ed2:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ed4:	42b5      	cmp	r5, r6
 8006ed6:	dbf6      	blt.n	8006ec6 <_read+0xa>
  }

  return len;
}
 8006ed8:	4630      	mov	r0, r6
 8006eda:	bd70      	pop	{r4, r5, r6, pc}

08006edc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006edc:	b570      	push	{r4, r5, r6, lr}
 8006ede:	460c      	mov	r4, r1
 8006ee0:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ee2:	2500      	movs	r5, #0
 8006ee4:	e004      	b.n	8006ef0 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8006ee6:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006eea:	f7ff fee9 	bl	8006cc0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006eee:	3501      	adds	r5, #1
 8006ef0:	42b5      	cmp	r5, r6
 8006ef2:	dbf8      	blt.n	8006ee6 <_write+0xa>
  }
  return len;
}
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}

08006ef8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8006ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8006efc:	4770      	bx	lr

08006efe <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8006efe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006f02:	604b      	str	r3, [r1, #4]
  return 0;
}
 8006f04:	2000      	movs	r0, #0
 8006f06:	4770      	bx	lr

08006f08 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8006f08:	2001      	movs	r0, #1
 8006f0a:	4770      	bx	lr

08006f0c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	4770      	bx	lr

08006f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006f10:	b510      	push	{r4, lr}
 8006f12:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f14:	4a0c      	ldr	r2, [pc, #48]	@ (8006f48 <_sbrk+0x38>)
 8006f16:	490d      	ldr	r1, [pc, #52]	@ (8006f4c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006f18:	480d      	ldr	r0, [pc, #52]	@ (8006f50 <_sbrk+0x40>)
 8006f1a:	6800      	ldr	r0, [r0, #0]
 8006f1c:	b140      	cbz	r0, 8006f30 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006f1e:	480c      	ldr	r0, [pc, #48]	@ (8006f50 <_sbrk+0x40>)
 8006f20:	6800      	ldr	r0, [r0, #0]
 8006f22:	4403      	add	r3, r0
 8006f24:	1a52      	subs	r2, r2, r1
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d806      	bhi.n	8006f38 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8006f2a:	4a09      	ldr	r2, [pc, #36]	@ (8006f50 <_sbrk+0x40>)
 8006f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8006f2e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8006f30:	4807      	ldr	r0, [pc, #28]	@ (8006f50 <_sbrk+0x40>)
 8006f32:	4c08      	ldr	r4, [pc, #32]	@ (8006f54 <_sbrk+0x44>)
 8006f34:	6004      	str	r4, [r0, #0]
 8006f36:	e7f2      	b.n	8006f1e <_sbrk+0xe>
    errno = ENOMEM;
 8006f38:	f005 fa62 	bl	800c400 <__errno>
 8006f3c:	230c      	movs	r3, #12
 8006f3e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8006f40:	f04f 30ff 	mov.w	r0, #4294967295
 8006f44:	e7f3      	b.n	8006f2e <_sbrk+0x1e>
 8006f46:	bf00      	nop
 8006f48:	20010000 	.word	0x20010000
 8006f4c:	00000400 	.word	0x00000400
 8006f50:	20002e98 	.word	0x20002e98
 8006f54:	20005ad0 	.word	0x20005ad0

08006f58 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006f58:	4770      	bx	lr
	...

08006f5c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8006f5c:	b508      	push	{r3, lr}
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8006f5e:	480a      	ldr	r0, [pc, #40]	@ (8006f88 <MX_UART4_Init+0x2c>)
 8006f60:	4b0a      	ldr	r3, [pc, #40]	@ (8006f8c <MX_UART4_Init+0x30>)
 8006f62:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 8006f64:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8006f68:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006f6e:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8006f70:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006f72:	220c      	movs	r2, #12
 8006f74:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f76:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f78:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006f7a:	f002 fa38 	bl	80093ee <HAL_UART_Init>
 8006f7e:	b900      	cbnz	r0, 8006f82 <MX_UART4_Init+0x26>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8006f80:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006f82:	f7ff fead 	bl	8006ce0 <Error_Handler>
}
 8006f86:	e7fb      	b.n	8006f80 <MX_UART4_Init+0x24>
 8006f88:	20002fb4 	.word	0x20002fb4
 8006f8c:	40004c00 	.word	0x40004c00

08006f90 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8006f90:	b508      	push	{r3, lr}
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8006f92:	480a      	ldr	r0, [pc, #40]	@ (8006fbc <MX_UART5_Init+0x2c>)
 8006f94:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc0 <MX_UART5_Init+0x30>)
 8006f96:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 8006f98:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8006f9c:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006fa2:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006fa4:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8006fa6:	220c      	movs	r2, #12
 8006fa8:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006faa:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006fac:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8006fae:	f002 fa1e 	bl	80093ee <HAL_UART_Init>
 8006fb2:	b900      	cbnz	r0, 8006fb6 <MX_UART5_Init+0x26>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8006fb4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006fb6:	f7ff fe93 	bl	8006ce0 <Error_Handler>
}
 8006fba:	e7fb      	b.n	8006fb4 <MX_UART5_Init+0x24>
 8006fbc:	20002f6c 	.word	0x20002f6c
 8006fc0:	40005000 	.word	0x40005000

08006fc4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006fc4:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006fc6:	480a      	ldr	r0, [pc, #40]	@ (8006ff0 <MX_USART2_UART_Init+0x2c>)
 8006fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ff4 <MX_USART2_UART_Init+0x30>)
 8006fca:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8006fcc:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8006fd0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	6081      	str	r1, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006fd6:	60c1      	str	r1, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006fd8:	6101      	str	r1, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006fda:	230c      	movs	r3, #12
 8006fdc:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006fde:	6181      	str	r1, [r0, #24]
  if (HAL_LIN_Init(&huart2, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 8006fe0:	f002 fa35 	bl	800944e <HAL_LIN_Init>
 8006fe4:	b900      	cbnz	r0, 8006fe8 <MX_USART2_UART_Init+0x24>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006fe6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006fe8:	f7ff fe7a 	bl	8006ce0 <Error_Handler>
}
 8006fec:	e7fb      	b.n	8006fe6 <MX_USART2_UART_Init+0x22>
 8006fee:	bf00      	nop
 8006ff0:	20002f24 	.word	0x20002f24
 8006ff4:	40004400 	.word	0x40004400

08006ff8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	b090      	sub	sp, #64	@ 0x40

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	930c      	str	r3, [sp, #48]	@ 0x30
 8007000:	930d      	str	r3, [sp, #52]	@ 0x34
 8007002:	930e      	str	r3, [sp, #56]	@ 0x38
 8007004:	930f      	str	r3, [sp, #60]	@ 0x3c
  if(uartHandle->Instance==UART4)
 8007006:	6803      	ldr	r3, [r0, #0]
 8007008:	4a9c      	ldr	r2, [pc, #624]	@ (800727c <HAL_UART_MspInit+0x284>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d010      	beq.n	8007030 <HAL_UART_MspInit+0x38>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==UART5)
 800700e:	4a9c      	ldr	r2, [pc, #624]	@ (8007280 <HAL_UART_MspInit+0x288>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d06e      	beq.n	80070f2 <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  #ifdef SPS250_LIN
  else if(uartHandle->Instance==USART1)
 8007014:	4a9b      	ldr	r2, [pc, #620]	@ (8007284 <HAL_UART_MspInit+0x28c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	f000 809c 	beq.w	8007154 <HAL_UART_MspInit+0x15c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 800701c:	4a9a      	ldr	r2, [pc, #616]	@ (8007288 <HAL_UART_MspInit+0x290>)
 800701e:	4293      	cmp	r3, r2
 8007020:	f000 80ca 	beq.w	80071b8 <HAL_UART_MspInit+0x1c0>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8007024:	4a99      	ldr	r2, [pc, #612]	@ (800728c <HAL_UART_MspInit+0x294>)
 8007026:	4293      	cmp	r3, r2
 8007028:	f000 80f6 	beq.w	8007218 <HAL_UART_MspInit+0x220>
  // /* USER CODE BEGIN USART2_MspInit 1 */

  // /* USER CODE END USART2_MspInit 1 */
  // }
  #endif
}
 800702c:	b010      	add	sp, #64	@ 0x40
 800702e:	bd70      	pop	{r4, r5, r6, pc}
 8007030:	4604      	mov	r4, r0
    __HAL_RCC_UART4_CLK_ENABLE();
 8007032:	4b97      	ldr	r3, [pc, #604]	@ (8007290 <HAL_UART_MspInit+0x298>)
 8007034:	69da      	ldr	r2, [r3, #28]
 8007036:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800703a:	61da      	str	r2, [r3, #28]
 800703c:	69da      	ldr	r2, [r3, #28]
 800703e:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 8007042:	9201      	str	r2, [sp, #4]
 8007044:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007046:	699a      	ldr	r2, [r3, #24]
 8007048:	f042 0210 	orr.w	r2, r2, #16
 800704c:	619a      	str	r2, [r3, #24]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	f003 0310 	and.w	r3, r3, #16
 8007054:	9302      	str	r3, [sp, #8]
 8007056:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007058:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800705c:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800705e:	2302      	movs	r3, #2
 8007060:	930d      	str	r3, [sp, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007062:	2303      	movs	r3, #3
 8007064:	930f      	str	r3, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007066:	4e8b      	ldr	r6, [pc, #556]	@ (8007294 <HAL_UART_MspInit+0x29c>)
 8007068:	a90c      	add	r1, sp, #48	@ 0x30
 800706a:	4630      	mov	r0, r6
 800706c:	f001 fafc 	bl	8008668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007070:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007074:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007076:	2500      	movs	r5, #0
 8007078:	950d      	str	r5, [sp, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800707a:	950e      	str	r5, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800707c:	a90c      	add	r1, sp, #48	@ 0x30
 800707e:	4630      	mov	r0, r6
 8007080:	f001 faf2 	bl	8008668 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA2_Channel3;
 8007084:	4884      	ldr	r0, [pc, #528]	@ (8007298 <HAL_UART_MspInit+0x2a0>)
 8007086:	4b85      	ldr	r3, [pc, #532]	@ (800729c <HAL_UART_MspInit+0x2a4>)
 8007088:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800708a:	6045      	str	r5, [r0, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800708c:	6085      	str	r5, [r0, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800708e:	2380      	movs	r3, #128	@ 0x80
 8007090:	60c3      	str	r3, [r0, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007092:	6105      	str	r5, [r0, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007094:	6145      	str	r5, [r0, #20]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8007096:	6185      	str	r5, [r0, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007098:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800709c:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800709e:	f001 f80f 	bl	80080c0 <HAL_DMA_Init>
 80070a2:	bb00      	cbnz	r0, 80070e6 <HAL_UART_MspInit+0xee>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80070a4:	4b7c      	ldr	r3, [pc, #496]	@ (8007298 <HAL_UART_MspInit+0x2a0>)
 80070a6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80070a8:	625c      	str	r4, [r3, #36]	@ 0x24
    hdma_uart4_tx.Instance = DMA2_Channel5;
 80070aa:	487d      	ldr	r0, [pc, #500]	@ (80072a0 <HAL_UART_MspInit+0x2a8>)
 80070ac:	4b7d      	ldr	r3, [pc, #500]	@ (80072a4 <HAL_UART_MspInit+0x2ac>)
 80070ae:	6003      	str	r3, [r0, #0]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80070b0:	2310      	movs	r3, #16
 80070b2:	6043      	str	r3, [r0, #4]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80070b4:	2300      	movs	r3, #0
 80070b6:	6083      	str	r3, [r0, #8]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80070b8:	2280      	movs	r2, #128	@ 0x80
 80070ba:	60c2      	str	r2, [r0, #12]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80070bc:	6103      	str	r3, [r0, #16]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80070be:	6143      	str	r3, [r0, #20]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80070c0:	6183      	str	r3, [r0, #24]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80070c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80070c6:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80070c8:	f000 fffa 	bl	80080c0 <HAL_DMA_Init>
 80070cc:	b970      	cbnz	r0, 80070ec <HAL_UART_MspInit+0xf4>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80070ce:	4b74      	ldr	r3, [pc, #464]	@ (80072a0 <HAL_UART_MspInit+0x2a8>)
 80070d0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80070d2:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80070d4:	2200      	movs	r2, #0
 80070d6:	2105      	movs	r1, #5
 80070d8:	2034      	movs	r0, #52	@ 0x34
 80070da:	f000 ffa9 	bl	8008030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80070de:	2034      	movs	r0, #52	@ 0x34
 80070e0:	f000 ffb6 	bl	8008050 <HAL_NVIC_EnableIRQ>
 80070e4:	e7a2      	b.n	800702c <HAL_UART_MspInit+0x34>
      Error_Handler();
 80070e6:	f7ff fdfb 	bl	8006ce0 <Error_Handler>
 80070ea:	e7db      	b.n	80070a4 <HAL_UART_MspInit+0xac>
      Error_Handler();
 80070ec:	f7ff fdf8 	bl	8006ce0 <Error_Handler>
 80070f0:	e7ed      	b.n	80070ce <HAL_UART_MspInit+0xd6>
    __HAL_RCC_UART5_CLK_ENABLE();
 80070f2:	4b67      	ldr	r3, [pc, #412]	@ (8007290 <HAL_UART_MspInit+0x298>)
 80070f4:	69da      	ldr	r2, [r3, #28]
 80070f6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80070fa:	61da      	str	r2, [r3, #28]
 80070fc:	69da      	ldr	r2, [r3, #28]
 80070fe:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007102:	9203      	str	r2, [sp, #12]
 8007104:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007106:	699a      	ldr	r2, [r3, #24]
 8007108:	f042 0210 	orr.w	r2, r2, #16
 800710c:	619a      	str	r2, [r3, #24]
 800710e:	699a      	ldr	r2, [r3, #24]
 8007110:	f002 0210 	and.w	r2, r2, #16
 8007114:	9204      	str	r2, [sp, #16]
 8007116:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007118:	699a      	ldr	r2, [r3, #24]
 800711a:	f042 0220 	orr.w	r2, r2, #32
 800711e:	619a      	str	r2, [r3, #24]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f003 0320 	and.w	r3, r3, #32
 8007126:	9305      	str	r3, [sp, #20]
 8007128:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800712a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800712e:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007130:	2302      	movs	r3, #2
 8007132:	930d      	str	r3, [sp, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007134:	2303      	movs	r3, #3
 8007136:	930f      	str	r3, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007138:	a90c      	add	r1, sp, #48	@ 0x30
 800713a:	4856      	ldr	r0, [pc, #344]	@ (8007294 <HAL_UART_MspInit+0x29c>)
 800713c:	f001 fa94 	bl	8008668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007140:	2304      	movs	r3, #4
 8007142:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007144:	2300      	movs	r3, #0
 8007146:	930d      	str	r3, [sp, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007148:	930e      	str	r3, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800714a:	a90c      	add	r1, sp, #48	@ 0x30
 800714c:	4856      	ldr	r0, [pc, #344]	@ (80072a8 <HAL_UART_MspInit+0x2b0>)
 800714e:	f001 fa8b 	bl	8008668 <HAL_GPIO_Init>
 8007152:	e76b      	b.n	800702c <HAL_UART_MspInit+0x34>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007154:	4b4e      	ldr	r3, [pc, #312]	@ (8007290 <HAL_UART_MspInit+0x298>)
 8007156:	699a      	ldr	r2, [r3, #24]
 8007158:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800715c:	619a      	str	r2, [r3, #24]
 800715e:	699a      	ldr	r2, [r3, #24]
 8007160:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8007164:	9206      	str	r2, [sp, #24]
 8007166:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007168:	699a      	ldr	r2, [r3, #24]
 800716a:	f042 0204 	orr.w	r2, r2, #4
 800716e:	619a      	str	r2, [r3, #24]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	f003 0304 	and.w	r3, r3, #4
 8007176:	9307      	str	r3, [sp, #28]
 8007178:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800717a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800717e:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007180:	2302      	movs	r3, #2
 8007182:	930d      	str	r3, [sp, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007184:	2303      	movs	r3, #3
 8007186:	930f      	str	r3, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007188:	4d48      	ldr	r5, [pc, #288]	@ (80072ac <HAL_UART_MspInit+0x2b4>)
 800718a:	a90c      	add	r1, sp, #48	@ 0x30
 800718c:	4628      	mov	r0, r5
 800718e:	f001 fa6b 	bl	8008668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007192:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007196:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007198:	2400      	movs	r4, #0
 800719a:	940d      	str	r4, [sp, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800719c:	940e      	str	r4, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800719e:	a90c      	add	r1, sp, #48	@ 0x30
 80071a0:	4628      	mov	r0, r5
 80071a2:	f001 fa61 	bl	8008668 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80071a6:	4622      	mov	r2, r4
 80071a8:	4621      	mov	r1, r4
 80071aa:	2025      	movs	r0, #37	@ 0x25
 80071ac:	f000 ff40 	bl	8008030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80071b0:	2025      	movs	r0, #37	@ 0x25
 80071b2:	f000 ff4d 	bl	8008050 <HAL_NVIC_EnableIRQ>
 80071b6:	e739      	b.n	800702c <HAL_UART_MspInit+0x34>
    __HAL_RCC_USART2_CLK_ENABLE();
 80071b8:	4b35      	ldr	r3, [pc, #212]	@ (8007290 <HAL_UART_MspInit+0x298>)
 80071ba:	69da      	ldr	r2, [r3, #28]
 80071bc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80071c0:	61da      	str	r2, [r3, #28]
 80071c2:	69da      	ldr	r2, [r3, #28]
 80071c4:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80071c8:	9208      	str	r2, [sp, #32]
 80071ca:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071cc:	699a      	ldr	r2, [r3, #24]
 80071ce:	f042 0204 	orr.w	r2, r2, #4
 80071d2:	619a      	str	r2, [r3, #24]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	f003 0304 	and.w	r3, r3, #4
 80071da:	9309      	str	r3, [sp, #36]	@ 0x24
 80071dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80071de:	2304      	movs	r3, #4
 80071e0:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071e2:	2302      	movs	r3, #2
 80071e4:	930d      	str	r3, [sp, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80071e6:	2303      	movs	r3, #3
 80071e8:	930f      	str	r3, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071ea:	4d30      	ldr	r5, [pc, #192]	@ (80072ac <HAL_UART_MspInit+0x2b4>)
 80071ec:	a90c      	add	r1, sp, #48	@ 0x30
 80071ee:	4628      	mov	r0, r5
 80071f0:	f001 fa3a 	bl	8008668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80071f4:	2308      	movs	r3, #8
 80071f6:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071f8:	2400      	movs	r4, #0
 80071fa:	940d      	str	r4, [sp, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071fc:	940e      	str	r4, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071fe:	a90c      	add	r1, sp, #48	@ 0x30
 8007200:	4628      	mov	r0, r5
 8007202:	f001 fa31 	bl	8008668 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007206:	4622      	mov	r2, r4
 8007208:	4621      	mov	r1, r4
 800720a:	2026      	movs	r0, #38	@ 0x26
 800720c:	f000 ff10 	bl	8008030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007210:	2026      	movs	r0, #38	@ 0x26
 8007212:	f000 ff1d 	bl	8008050 <HAL_NVIC_EnableIRQ>
 8007216:	e709      	b.n	800702c <HAL_UART_MspInit+0x34>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007218:	4b1d      	ldr	r3, [pc, #116]	@ (8007290 <HAL_UART_MspInit+0x298>)
 800721a:	69da      	ldr	r2, [r3, #28]
 800721c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007220:	61da      	str	r2, [r3, #28]
 8007222:	69da      	ldr	r2, [r3, #28]
 8007224:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8007228:	920a      	str	r2, [sp, #40]	@ 0x28
 800722a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800722c:	699a      	ldr	r2, [r3, #24]
 800722e:	f042 0208 	orr.w	r2, r2, #8
 8007232:	619a      	str	r2, [r3, #24]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	f003 0308 	and.w	r3, r3, #8
 800723a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800723c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800723e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007242:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007244:	2302      	movs	r3, #2
 8007246:	930d      	str	r3, [sp, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007248:	2303      	movs	r3, #3
 800724a:	930f      	str	r3, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800724c:	4d18      	ldr	r5, [pc, #96]	@ (80072b0 <HAL_UART_MspInit+0x2b8>)
 800724e:	a90c      	add	r1, sp, #48	@ 0x30
 8007250:	4628      	mov	r0, r5
 8007252:	f001 fa09 	bl	8008668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007256:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800725a:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800725c:	2400      	movs	r4, #0
 800725e:	940d      	str	r4, [sp, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007260:	940e      	str	r4, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007262:	a90c      	add	r1, sp, #48	@ 0x30
 8007264:	4628      	mov	r0, r5
 8007266:	f001 f9ff 	bl	8008668 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800726a:	4622      	mov	r2, r4
 800726c:	4621      	mov	r1, r4
 800726e:	2027      	movs	r0, #39	@ 0x27
 8007270:	f000 fede 	bl	8008030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007274:	2027      	movs	r0, #39	@ 0x27
 8007276:	f000 feeb 	bl	8008050 <HAL_NVIC_EnableIRQ>
}
 800727a:	e6d7      	b.n	800702c <HAL_UART_MspInit+0x34>
 800727c:	40004c00 	.word	0x40004c00
 8007280:	40005000 	.word	0x40005000
 8007284:	40013800 	.word	0x40013800
 8007288:	40004400 	.word	0x40004400
 800728c:	40004800 	.word	0x40004800
 8007290:	40021000 	.word	0x40021000
 8007294:	40011000 	.word	0x40011000
 8007298:	20002ee0 	.word	0x20002ee0
 800729c:	40020430 	.word	0x40020430
 80072a0:	20002e9c 	.word	0x20002e9c
 80072a4:	40020458 	.word	0x40020458
 80072a8:	40011400 	.word	0x40011400
 80072ac:	40010800 	.word	0x40010800
 80072b0:	40010c00 	.word	0x40010c00

080072b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80072b4:	f7ff fe50 	bl	8006f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80072b8:	480b      	ldr	r0, [pc, #44]	@ (80072e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80072ba:	490c      	ldr	r1, [pc, #48]	@ (80072ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80072bc:	4a0c      	ldr	r2, [pc, #48]	@ (80072f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80072be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80072c0:	e002      	b.n	80072c8 <LoopCopyDataInit>

080072c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80072c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80072c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80072c6:	3304      	adds	r3, #4

080072c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80072c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80072ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80072cc:	d3f9      	bcc.n	80072c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80072ce:	4a09      	ldr	r2, [pc, #36]	@ (80072f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80072d0:	4c09      	ldr	r4, [pc, #36]	@ (80072f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80072d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80072d4:	e001      	b.n	80072da <LoopFillZerobss>

080072d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80072d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80072d8:	3204      	adds	r2, #4

080072da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80072da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80072dc:	d3fb      	bcc.n	80072d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80072de:	f005 f895 	bl	800c40c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80072e2:	f7ff fd47 	bl	8006d74 <main>
  bx lr
 80072e6:	4770      	bx	lr
  ldr r0, =_sdata
 80072e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80072ec:	20000798 	.word	0x20000798
  ldr r2, =_sidata
 80072f0:	080109ac 	.word	0x080109ac
  ldr r2, =_sbss
 80072f4:	20000798 	.word	0x20000798
  ldr r4, =_ebss
 80072f8:	20005ad0 	.word	0x20005ad0

080072fc <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80072fc:	e7fe      	b.n	80072fc <ADC1_2_IRQHandler>
	...

08007300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007300:	b510      	push	{r4, lr}
 8007302:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007304:	4b0e      	ldr	r3, [pc, #56]	@ (8007340 <HAL_InitTick+0x40>)
 8007306:	781a      	ldrb	r2, [r3, #0]
 8007308:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800730c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007310:	4a0c      	ldr	r2, [pc, #48]	@ (8007344 <HAL_InitTick+0x44>)
 8007312:	6810      	ldr	r0, [r2, #0]
 8007314:	fbb0 f0f3 	udiv	r0, r0, r3
 8007318:	f000 fea8 	bl	800806c <HAL_SYSTICK_Config>
 800731c:	b968      	cbnz	r0, 800733a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800731e:	2c0f      	cmp	r4, #15
 8007320:	d901      	bls.n	8007326 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8007322:	2001      	movs	r0, #1
 8007324:	e00a      	b.n	800733c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007326:	2200      	movs	r2, #0
 8007328:	4621      	mov	r1, r4
 800732a:	f04f 30ff 	mov.w	r0, #4294967295
 800732e:	f000 fe7f 	bl	8008030 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007332:	4b05      	ldr	r3, [pc, #20]	@ (8007348 <HAL_InitTick+0x48>)
 8007334:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007336:	2000      	movs	r0, #0
 8007338:	e000      	b.n	800733c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800733a:	2001      	movs	r0, #1
}
 800733c:	bd10      	pop	{r4, pc}
 800733e:	bf00      	nop
 8007340:	200005b0 	.word	0x200005b0
 8007344:	200005ac 	.word	0x200005ac
 8007348:	200005b4 	.word	0x200005b4

0800734c <HAL_Init>:
{
 800734c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800734e:	4a07      	ldr	r2, [pc, #28]	@ (800736c <HAL_Init+0x20>)
 8007350:	6813      	ldr	r3, [r2, #0]
 8007352:	f043 0310 	orr.w	r3, r3, #16
 8007356:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007358:	2003      	movs	r0, #3
 800735a:	f000 fe57 	bl	800800c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800735e:	200f      	movs	r0, #15
 8007360:	f7ff ffce 	bl	8007300 <HAL_InitTick>
  HAL_MspInit();
 8007364:	f7ff fd36 	bl	8006dd4 <HAL_MspInit>
}
 8007368:	2000      	movs	r0, #0
 800736a:	bd08      	pop	{r3, pc}
 800736c:	40022000 	.word	0x40022000

08007370 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007370:	4a03      	ldr	r2, [pc, #12]	@ (8007380 <HAL_IncTick+0x10>)
 8007372:	6811      	ldr	r1, [r2, #0]
 8007374:	4b03      	ldr	r3, [pc, #12]	@ (8007384 <HAL_IncTick+0x14>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	440b      	add	r3, r1
 800737a:	6013      	str	r3, [r2, #0]
}
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	20002ffc 	.word	0x20002ffc
 8007384:	200005b0 	.word	0x200005b0

08007388 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007388:	4b01      	ldr	r3, [pc, #4]	@ (8007390 <HAL_GetTick+0x8>)
 800738a:	6818      	ldr	r0, [r3, #0]
}
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	20002ffc 	.word	0x20002ffc

08007394 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8007394:	6803      	ldr	r3, [r0, #0]
 8007396:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8007398:	4770      	bx	lr
	...

0800739c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800739c:	b430      	push	{r4, r5}
 800739e:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80073a0:	2200      	movs	r2, #0
 80073a2:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80073a4:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80073a8:	2a01      	cmp	r2, #1
 80073aa:	f000 808f 	beq.w	80074cc <HAL_ADC_ConfigChannel+0x130>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2201      	movs	r2, #1
 80073b2:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80073b6:	684a      	ldr	r2, [r1, #4]
 80073b8:	2a06      	cmp	r2, #6
 80073ba:	d82d      	bhi.n	8007418 <HAL_ADC_ConfigChannel+0x7c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80073bc:	6804      	ldr	r4, [r0, #0]
 80073be:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80073c0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80073c4:	3a05      	subs	r2, #5
 80073c6:	f04f 0c1f 	mov.w	ip, #31
 80073ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80073ce:	ea20 000c 	bic.w	r0, r0, ip
 80073d2:	680d      	ldr	r5, [r1, #0]
 80073d4:	fa05 f202 	lsl.w	r2, r5, r2
 80073d8:	4302      	orrs	r2, r0
 80073da:	6362      	str	r2, [r4, #52]	@ 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80073dc:	680a      	ldr	r2, [r1, #0]
 80073de:	2a09      	cmp	r2, #9
 80073e0:	d938      	bls.n	8007454 <HAL_ADC_ConfigChannel+0xb8>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80073e2:	681c      	ldr	r4, [r3, #0]
 80073e4:	68e0      	ldr	r0, [r4, #12]
 80073e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80073ea:	3a1e      	subs	r2, #30
 80073ec:	f04f 0c07 	mov.w	ip, #7
 80073f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80073f4:	ea20 000c 	bic.w	r0, r0, ip
 80073f8:	688d      	ldr	r5, [r1, #8]
 80073fa:	fa05 f202 	lsl.w	r2, r5, r2
 80073fe:	4302      	orrs	r2, r0
 8007400:	60e2      	str	r2, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007402:	680a      	ldr	r2, [r1, #0]
 8007404:	3a10      	subs	r2, #16
 8007406:	2a01      	cmp	r2, #1
 8007408:	d934      	bls.n	8007474 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800740a:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8007412:	b002      	add	sp, #8
 8007414:	bc30      	pop	{r4, r5}
 8007416:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8007418:	2a0c      	cmp	r2, #12
 800741a:	d80d      	bhi.n	8007438 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800741c:	6805      	ldr	r5, [r0, #0]
 800741e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8007420:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007424:	3a23      	subs	r2, #35	@ 0x23
 8007426:	241f      	movs	r4, #31
 8007428:	4094      	lsls	r4, r2
 800742a:	ea20 0004 	bic.w	r0, r0, r4
 800742e:	680c      	ldr	r4, [r1, #0]
 8007430:	4094      	lsls	r4, r2
 8007432:	4320      	orrs	r0, r4
 8007434:	6328      	str	r0, [r5, #48]	@ 0x30
 8007436:	e7d1      	b.n	80073dc <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007438:	6805      	ldr	r5, [r0, #0]
 800743a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800743c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007440:	3a41      	subs	r2, #65	@ 0x41
 8007442:	241f      	movs	r4, #31
 8007444:	4094      	lsls	r4, r2
 8007446:	ea20 0004 	bic.w	r0, r0, r4
 800744a:	680c      	ldr	r4, [r1, #0]
 800744c:	4094      	lsls	r4, r2
 800744e:	4320      	orrs	r0, r4
 8007450:	62e8      	str	r0, [r5, #44]	@ 0x2c
 8007452:	e7c3      	b.n	80073dc <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007454:	681c      	ldr	r4, [r3, #0]
 8007456:	6920      	ldr	r0, [r4, #16]
 8007458:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800745c:	f04f 0c07 	mov.w	ip, #7
 8007460:	fa0c fc02 	lsl.w	ip, ip, r2
 8007464:	ea20 000c 	bic.w	r0, r0, ip
 8007468:	688d      	ldr	r5, [r1, #8]
 800746a:	fa05 f202 	lsl.w	r2, r5, r2
 800746e:	4302      	orrs	r2, r0
 8007470:	6122      	str	r2, [r4, #16]
 8007472:	e7c6      	b.n	8007402 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	4816      	ldr	r0, [pc, #88]	@ (80074d0 <HAL_ADC_ConfigChannel+0x134>)
 8007478:	4282      	cmp	r2, r0
 800747a:	d005      	beq.n	8007488 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800747c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800747e:	f042 0220 	orr.w	r2, r2, #32
 8007482:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8007484:	2001      	movs	r0, #1
 8007486:	e7c1      	b.n	800740c <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007488:	6890      	ldr	r0, [r2, #8]
 800748a:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 800748e:	d11b      	bne.n	80074c8 <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007490:	6890      	ldr	r0, [r2, #8]
 8007492:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8007496:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007498:	680a      	ldr	r2, [r1, #0]
 800749a:	2a10      	cmp	r2, #16
 800749c:	d001      	beq.n	80074a2 <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800749e:	2000      	movs	r0, #0
 80074a0:	e7b4      	b.n	800740c <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80074a2:	4a0c      	ldr	r2, [pc, #48]	@ (80074d4 <HAL_ADC_ConfigChannel+0x138>)
 80074a4:	6812      	ldr	r2, [r2, #0]
 80074a6:	490c      	ldr	r1, [pc, #48]	@ (80074d8 <HAL_ADC_ConfigChannel+0x13c>)
 80074a8:	fba1 1202 	umull	r1, r2, r1, r2
 80074ac:	0c92      	lsrs	r2, r2, #18
 80074ae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80074b2:	0052      	lsls	r2, r2, #1
 80074b4:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80074b6:	e002      	b.n	80074be <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 80074b8:	9a01      	ldr	r2, [sp, #4]
 80074ba:	3a01      	subs	r2, #1
 80074bc:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80074be:	9a01      	ldr	r2, [sp, #4]
 80074c0:	2a00      	cmp	r2, #0
 80074c2:	d1f9      	bne.n	80074b8 <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80074c4:	2000      	movs	r0, #0
 80074c6:	e7a1      	b.n	800740c <HAL_ADC_ConfigChannel+0x70>
 80074c8:	2000      	movs	r0, #0
 80074ca:	e79f      	b.n	800740c <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80074cc:	2002      	movs	r0, #2
 80074ce:	e7a0      	b.n	8007412 <HAL_ADC_ConfigChannel+0x76>
 80074d0:	40012400 	.word	0x40012400
 80074d4:	200005ac 	.word	0x200005ac
 80074d8:	431bde83 	.word	0x431bde83

080074dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80074dc:	b530      	push	{r4, r5, lr}
 80074de:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80074e4:	6803      	ldr	r3, [r0, #0]
 80074e6:	689a      	ldr	r2, [r3, #8]
 80074e8:	f012 0f01 	tst.w	r2, #1
 80074ec:	d133      	bne.n	8007556 <ADC_Enable+0x7a>
 80074ee:	4604      	mov	r4, r0
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80074f0:	689a      	ldr	r2, [r3, #8]
 80074f2:	f042 0201 	orr.w	r2, r2, #1
 80074f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80074f8:	4b18      	ldr	r3, [pc, #96]	@ (800755c <ADC_Enable+0x80>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a18      	ldr	r2, [pc, #96]	@ (8007560 <ADC_Enable+0x84>)
 80074fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007502:	0c9b      	lsrs	r3, r3, #18
 8007504:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8007506:	e002      	b.n	800750e <ADC_Enable+0x32>
    {
      wait_loop_index--;
 8007508:	9b01      	ldr	r3, [sp, #4]
 800750a:	3b01      	subs	r3, #1
 800750c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800750e:	9b01      	ldr	r3, [sp, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1f9      	bne.n	8007508 <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007514:	f7ff ff38 	bl	8007388 <HAL_GetTick>
 8007518:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f013 0f01 	tst.w	r3, #1
 8007522:	d116      	bne.n	8007552 <ADC_Enable+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007524:	f7ff ff30 	bl	8007388 <HAL_GetTick>
 8007528:	1b43      	subs	r3, r0, r5
 800752a:	2b02      	cmp	r3, #2
 800752c:	d9f5      	bls.n	800751a <ADC_Enable+0x3e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f013 0f01 	tst.w	r3, #1
 8007536:	d1f0      	bne.n	800751a <ADC_Enable+0x3e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007538:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800753a:	f043 0310 	orr.w	r3, r3, #16
 800753e:	62a3      	str	r3, [r4, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007540:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007542:	f043 0301 	orr.w	r3, r3, #1
 8007546:	62e3      	str	r3, [r4, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007548:	2300      	movs	r3, #0
 800754a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24

          return HAL_ERROR;
 800754e:	2001      	movs	r0, #1
 8007550:	e002      	b.n	8007558 <ADC_Enable+0x7c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007552:	2000      	movs	r0, #0
 8007554:	e000      	b.n	8007558 <ADC_Enable+0x7c>
 8007556:	2000      	movs	r0, #0
}
 8007558:	b003      	add	sp, #12
 800755a:	bd30      	pop	{r4, r5, pc}
 800755c:	200005ac 	.word	0x200005ac
 8007560:	431bde83 	.word	0x431bde83

08007564 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8007564:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8007568:	2b01      	cmp	r3, #1
 800756a:	d068      	beq.n	800763e <HAL_ADC_Start+0xda>
{
 800756c:	b510      	push	{r4, lr}
 800756e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8007570:	2301      	movs	r3, #1
 8007572:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8007576:	f7ff ffb1 	bl	80074dc <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800757a:	2800      	cmp	r0, #0
 800757c:	d15b      	bne.n	8007636 <HAL_ADC_Start+0xd2>
    ADC_STATE_CLR_SET(hadc->State,
 800757e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007580:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007584:	f023 0301 	bic.w	r3, r3, #1
 8007588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800758c:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	4a2c      	ldr	r2, [pc, #176]	@ (8007644 <HAL_ADC_Start+0xe0>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d027      	beq.n	80075e6 <HAL_ADC_Start+0x82>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007596:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007598:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800759c:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80075a4:	d005      	beq.n	80075b2 <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80075a6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80075a8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80075ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80075b0:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80075b2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80075b4:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 80075b8:	d02b      	beq.n	8007612 <HAL_ADC_Start+0xae>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80075ba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80075bc:	f022 0206 	bic.w	r2, r2, #6
 80075c0:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_UNLOCK(hadc);
 80075c2:	2200      	movs	r2, #0
 80075c4:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80075c8:	f06f 0202 	mvn.w	r2, #2
 80075cc:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	689a      	ldr	r2, [r3, #8]
 80075d2:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 80075d6:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 80075da:	d01d      	beq.n	8007618 <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80075e2:	609a      	str	r2, [r3, #8]
 80075e4:	e02a      	b.n	800763c <HAL_ADC_Start+0xd8>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80075e6:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80075ea:	6852      	ldr	r2, [r2, #4]
 80075ec:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 80075f0:	d0d1      	beq.n	8007596 <HAL_ADC_Start+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80075f2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80075f4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80075f8:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80075fa:	4a13      	ldr	r2, [pc, #76]	@ (8007648 <HAL_ADC_Start+0xe4>)
 80075fc:	6852      	ldr	r2, [r2, #4]
 80075fe:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8007602:	d0d6      	beq.n	80075b2 <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007604:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007606:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800760a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800760e:	62a2      	str	r2, [r4, #40]	@ 0x28
 8007610:	e7cf      	b.n	80075b2 <HAL_ADC_Start+0x4e>
      ADC_CLEAR_ERRORCODE(hadc);
 8007612:	2200      	movs	r2, #0
 8007614:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8007616:	e7d4      	b.n	80075c2 <HAL_ADC_Start+0x5e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8007618:	4a0a      	ldr	r2, [pc, #40]	@ (8007644 <HAL_ADC_Start+0xe0>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d004      	beq.n	8007628 <HAL_ADC_Start+0xc4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8007624:	609a      	str	r2, [r3, #8]
 8007626:	e009      	b.n	800763c <HAL_ADC_Start+0xd8>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8007628:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800762c:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800762e:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 8007632:	d1d3      	bne.n	80075dc <HAL_ADC_Start+0x78>
 8007634:	e7f3      	b.n	800761e <HAL_ADC_Start+0xba>
    __HAL_UNLOCK(hadc);
 8007636:	2300      	movs	r3, #0
 8007638:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 800763c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800763e:	2002      	movs	r0, #2
}
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	40012800 	.word	0x40012800
 8007648:	40012400 	.word	0x40012400

0800764c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800764c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800764e:	6803      	ldr	r3, [r0, #0]
 8007650:	689a      	ldr	r2, [r3, #8]
 8007652:	f012 0f01 	tst.w	r2, #1
 8007656:	d101      	bne.n	800765c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007658:	2000      	movs	r0, #0
}
 800765a:	bd38      	pop	{r3, r4, r5, pc}
 800765c:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	f022 0201 	bic.w	r2, r2, #1
 8007664:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8007666:	f7ff fe8f 	bl	8007388 <HAL_GetTick>
 800766a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	f013 0f01 	tst.w	r3, #1
 8007674:	d013      	beq.n	800769e <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007676:	f7ff fe87 	bl	8007388 <HAL_GetTick>
 800767a:	1b43      	subs	r3, r0, r5
 800767c:	2b02      	cmp	r3, #2
 800767e:	d9f5      	bls.n	800766c <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f013 0f01 	tst.w	r3, #1
 8007688:	d0f0      	beq.n	800766c <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800768a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800768c:	f043 0310 	orr.w	r3, r3, #16
 8007690:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007692:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007694:	f043 0301 	orr.w	r3, r3, #1
 8007698:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 800769a:	2001      	movs	r0, #1
 800769c:	e7dd      	b.n	800765a <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 800769e:	2000      	movs	r0, #0
 80076a0:	e7db      	b.n	800765a <ADC_ConversionStop_Disable+0xe>
	...

080076a4 <HAL_ADC_Init>:
  if(hadc == NULL)
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d07b      	beq.n	80077a0 <HAL_ADC_Init+0xfc>
{
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80076ac:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d04d      	beq.n	800774e <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80076b2:	4620      	mov	r0, r4
 80076b4:	f7ff ffca 	bl	800764c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80076b8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80076ba:	f013 0310 	ands.w	r3, r3, #16
 80076be:	d169      	bne.n	8007794 <HAL_ADC_Init+0xf0>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d167      	bne.n	8007794 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 80076c4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80076c6:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 80076ca:	f022 0202 	bic.w	r2, r2, #2
 80076ce:	f042 0202 	orr.w	r2, r2, #2
 80076d2:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80076d4:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80076d6:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80076d8:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80076da:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80076dc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80076e0:	68a5      	ldr	r5, [r4, #8]
 80076e2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80076e6:	d002      	beq.n	80076ee <HAL_ADC_Init+0x4a>
 80076e8:	2d01      	cmp	r5, #1
 80076ea:	d036      	beq.n	800775a <HAL_ADC_Init+0xb6>
 80076ec:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80076ee:	7d26      	ldrb	r6, [r4, #20]
 80076f0:	2e01      	cmp	r6, #1
 80076f2:	d035      	beq.n	8007760 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 80076f4:	6826      	ldr	r6, [r4, #0]
 80076f6:	6871      	ldr	r1, [r6, #4]
 80076f8:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 80076fc:	4329      	orrs	r1, r5
 80076fe:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8007700:	6825      	ldr	r5, [r4, #0]
 8007702:	68ae      	ldr	r6, [r5, #8]
 8007704:	4927      	ldr	r1, [pc, #156]	@ (80077a4 <HAL_ADC_Init+0x100>)
 8007706:	4031      	ands	r1, r6
 8007708:	4311      	orrs	r1, r2
 800770a:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800770c:	68a1      	ldr	r1, [r4, #8]
 800770e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8007712:	d001      	beq.n	8007718 <HAL_ADC_Init+0x74>
 8007714:	2901      	cmp	r1, #1
 8007716:	d102      	bne.n	800771e <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8007718:	6923      	ldr	r3, [r4, #16]
 800771a:	3b01      	subs	r3, #1
 800771c:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800771e:	6825      	ldr	r5, [r4, #0]
 8007720:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8007722:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 8007726:	430b      	orrs	r3, r1
 8007728:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	6899      	ldr	r1, [r3, #8]
 800772e:	4b1e      	ldr	r3, [pc, #120]	@ (80077a8 <HAL_ADC_Init+0x104>)
 8007730:	400b      	ands	r3, r1
 8007732:	429a      	cmp	r2, r3
 8007734:	d025      	beq.n	8007782 <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 8007736:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007738:	f023 0312 	bic.w	r3, r3, #18
 800773c:	f043 0310 	orr.w	r3, r3, #16
 8007740:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007742:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007744:	f043 0301 	orr.w	r3, r3, #1
 8007748:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 800774a:	2001      	movs	r0, #1
 800774c:	e027      	b.n	800779e <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 800774e:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8007750:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8007754:	f7fe feae 	bl	80064b4 <HAL_ADC_MspInit>
 8007758:	e7ab      	b.n	80076b2 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800775a:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800775e:	e7c6      	b.n	80076ee <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007760:	b931      	cbnz	r1, 8007770 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8007762:	69a1      	ldr	r1, [r4, #24]
 8007764:	3901      	subs	r1, #1
 8007766:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 800776a:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 800776e:	e7c1      	b.n	80076f4 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007770:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8007772:	f041 0120 	orr.w	r1, r1, #32
 8007776:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007778:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800777a:	f041 0101 	orr.w	r1, r1, #1
 800777e:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8007780:	e7b8      	b.n	80076f4 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 8007782:	2300      	movs	r3, #0
 8007784:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8007786:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007788:	f023 0303 	bic.w	r3, r3, #3
 800778c:	f043 0301 	orr.w	r3, r3, #1
 8007790:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007792:	e004      	b.n	800779e <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007794:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007796:	f043 0310 	orr.w	r3, r3, #16
 800779a:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 800779c:	2001      	movs	r0, #1
}
 800779e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80077a0:	2001      	movs	r0, #1
}
 80077a2:	4770      	bx	lr
 80077a4:	ffe1f7fd 	.word	0xffe1f7fd
 80077a8:	ff1f0efe 	.word	0xff1f0efe

080077ac <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80077ac:	2800      	cmp	r0, #0
 80077ae:	f000 80a1 	beq.w	80078f4 <HAL_CAN_Init+0x148>
{
 80077b2:	b538      	push	{r3, r4, r5, lr}
 80077b4:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80077b6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80077ba:	b1d3      	cbz	r3, 80077f2 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80077bc:	6822      	ldr	r2, [r4, #0]
 80077be:	6813      	ldr	r3, [r2, #0]
 80077c0:	f043 0301 	orr.w	r3, r3, #1
 80077c4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077c6:	f7ff fddf 	bl	8007388 <HAL_GetTick>
 80077ca:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	f012 0f01 	tst.w	r2, #1
 80077d4:	d110      	bne.n	80077f8 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80077d6:	f7ff fdd7 	bl	8007388 <HAL_GetTick>
 80077da:	1b40      	subs	r0, r0, r5
 80077dc:	280a      	cmp	r0, #10
 80077de:	d9f5      	bls.n	80077cc <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80077e0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80077e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077e6:	6263      	str	r3, [r4, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80077e8:	2305      	movs	r3, #5
 80077ea:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 80077ee:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80077f0:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80077f2:	f7fe ff1f 	bl	8006634 <HAL_CAN_MspInit>
 80077f6:	e7e1      	b.n	80077bc <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	f022 0202 	bic.w	r2, r2, #2
 80077fe:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8007800:	f7ff fdc2 	bl	8007388 <HAL_GetTick>
 8007804:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	685a      	ldr	r2, [r3, #4]
 800780a:	f012 0f02 	tst.w	r2, #2
 800780e:	d00d      	beq.n	800782c <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007810:	f7ff fdba 	bl	8007388 <HAL_GetTick>
 8007814:	1b40      	subs	r0, r0, r5
 8007816:	280a      	cmp	r0, #10
 8007818:	d9f5      	bls.n	8007806 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800781a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800781c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007820:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8007822:	2305      	movs	r3, #5
 8007824:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8007828:	2001      	movs	r0, #1
 800782a:	e7e1      	b.n	80077f0 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800782c:	7e22      	ldrb	r2, [r4, #24]
 800782e:	2a01      	cmp	r2, #1
 8007830:	d03d      	beq.n	80078ae <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007838:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 800783a:	7e63      	ldrb	r3, [r4, #25]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d03b      	beq.n	80078b8 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007840:	6822      	ldr	r2, [r4, #0]
 8007842:	6813      	ldr	r3, [r2, #0]
 8007844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007848:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800784a:	7ea3      	ldrb	r3, [r4, #26]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d039      	beq.n	80078c4 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007850:	6822      	ldr	r2, [r4, #0]
 8007852:	6813      	ldr	r3, [r2, #0]
 8007854:	f023 0320 	bic.w	r3, r3, #32
 8007858:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800785a:	7ee3      	ldrb	r3, [r4, #27]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d037      	beq.n	80078d0 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007860:	6822      	ldr	r2, [r4, #0]
 8007862:	6813      	ldr	r3, [r2, #0]
 8007864:	f043 0310 	orr.w	r3, r3, #16
 8007868:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800786a:	7f23      	ldrb	r3, [r4, #28]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d035      	beq.n	80078dc <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007870:	6822      	ldr	r2, [r4, #0]
 8007872:	6813      	ldr	r3, [r2, #0]
 8007874:	f023 0308 	bic.w	r3, r3, #8
 8007878:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800787a:	7f63      	ldrb	r3, [r4, #29]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d033      	beq.n	80078e8 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007880:	6822      	ldr	r2, [r4, #0]
 8007882:	6813      	ldr	r3, [r2, #0]
 8007884:	f023 0304 	bic.w	r3, r3, #4
 8007888:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800788a:	68a3      	ldr	r3, [r4, #8]
 800788c:	68e2      	ldr	r2, [r4, #12]
 800788e:	4313      	orrs	r3, r2
 8007890:	6922      	ldr	r2, [r4, #16]
 8007892:	4313      	orrs	r3, r2
 8007894:	6962      	ldr	r2, [r4, #20]
 8007896:	4313      	orrs	r3, r2
 8007898:	6862      	ldr	r2, [r4, #4]
 800789a:	3a01      	subs	r2, #1
 800789c:	6821      	ldr	r1, [r4, #0]
 800789e:	4313      	orrs	r3, r2
 80078a0:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80078a2:	2000      	movs	r0, #0
 80078a4:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80078a6:	2301      	movs	r3, #1
 80078a8:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 80078ac:	e7a0      	b.n	80077f0 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	e7c0      	b.n	800783a <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80078b8:	6822      	ldr	r2, [r4, #0]
 80078ba:	6813      	ldr	r3, [r2, #0]
 80078bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078c0:	6013      	str	r3, [r2, #0]
 80078c2:	e7c2      	b.n	800784a <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80078c4:	6822      	ldr	r2, [r4, #0]
 80078c6:	6813      	ldr	r3, [r2, #0]
 80078c8:	f043 0320 	orr.w	r3, r3, #32
 80078cc:	6013      	str	r3, [r2, #0]
 80078ce:	e7c4      	b.n	800785a <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80078d0:	6822      	ldr	r2, [r4, #0]
 80078d2:	6813      	ldr	r3, [r2, #0]
 80078d4:	f023 0310 	bic.w	r3, r3, #16
 80078d8:	6013      	str	r3, [r2, #0]
 80078da:	e7c6      	b.n	800786a <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80078dc:	6822      	ldr	r2, [r4, #0]
 80078de:	6813      	ldr	r3, [r2, #0]
 80078e0:	f043 0308 	orr.w	r3, r3, #8
 80078e4:	6013      	str	r3, [r2, #0]
 80078e6:	e7c8      	b.n	800787a <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80078e8:	6822      	ldr	r2, [r4, #0]
 80078ea:	6813      	ldr	r3, [r2, #0]
 80078ec:	f043 0304 	orr.w	r3, r3, #4
 80078f0:	6013      	str	r3, [r2, #0]
 80078f2:	e7ca      	b.n	800788a <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 80078f4:	2001      	movs	r0, #1
}
 80078f6:	4770      	bx	lr

080078f8 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80078f8:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80078fc:	3b01      	subs	r3, #1
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b01      	cmp	r3, #1
 8007902:	d905      	bls.n	8007910 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007904:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007906:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800790a:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800790c:	2001      	movs	r0, #1
  }
}
 800790e:	4770      	bx	lr
{
 8007910:	b510      	push	{r4, lr}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007912:	4b47      	ldr	r3, [pc, #284]	@ (8007a30 <HAL_CAN_ConfigFilter+0x138>)
 8007914:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8007918:	f042 0201 	orr.w	r2, r2, #1
 800791c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007920:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8007924:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8007928:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800792c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8007930:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 8007932:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007936:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800793a:	694a      	ldr	r2, [r1, #20]
 800793c:	f002 021f 	and.w	r2, r2, #31
 8007940:	2001      	movs	r0, #1
 8007942:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007946:	f8d3 021c 	ldr.w	r0, [r3, #540]	@ 0x21c
 800794a:	ea6f 0c02 	mvn.w	ip, r2
 800794e:	ea20 0002 	bic.w	r0, r0, r2
 8007952:	f8c3 021c 	str.w	r0, [r3, #540]	@ 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007956:	69cb      	ldr	r3, [r1, #28]
 8007958:	b9cb      	cbnz	r3, 800798e <HAL_CAN_ConfigFilter+0x96>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800795a:	4b35      	ldr	r3, [pc, #212]	@ (8007a30 <HAL_CAN_ConfigFilter+0x138>)
 800795c:	f8d3 020c 	ldr.w	r0, [r3, #524]	@ 0x20c
 8007960:	ea0c 0000 	and.w	r0, ip, r0
 8007964:	f8c3 020c 	str.w	r0, [r3, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007968:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800796a:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800796c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8007970:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007974:	3048      	adds	r0, #72	@ 0x48
 8007976:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800797a:	688c      	ldr	r4, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800797c:	8808      	ldrh	r0, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800797e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007982:	694c      	ldr	r4, [r1, #20]
 8007984:	f104 0e48 	add.w	lr, r4, #72	@ 0x48
 8007988:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
 800798c:	6058      	str	r0, [r3, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800798e:	69cb      	ldr	r3, [r1, #28]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d01e      	beq.n	80079d2 <HAL_CAN_ConfigFilter+0xda>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007994:	698b      	ldr	r3, [r1, #24]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d135      	bne.n	8007a06 <HAL_CAN_ConfigFilter+0x10e>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800799a:	4825      	ldr	r0, [pc, #148]	@ (8007a30 <HAL_CAN_ConfigFilter+0x138>)
 800799c:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 80079a0:	ea0c 0303 	and.w	r3, ip, r3
 80079a4:	f8c0 3204 	str.w	r3, [r0, #516]	@ 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80079a8:	690b      	ldr	r3, [r1, #16]
 80079aa:	bb9b      	cbnz	r3, 8007a14 <HAL_CAN_ConfigFilter+0x11c>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80079ac:	4820      	ldr	r0, [pc, #128]	@ (8007a30 <HAL_CAN_ConfigFilter+0x138>)
 80079ae:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 80079b2:	ea0c 0303 	and.w	r3, ip, r3
 80079b6:	f8c0 3214 	str.w	r3, [r0, #532]	@ 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80079ba:	6a0b      	ldr	r3, [r1, #32]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d030      	beq.n	8007a22 <HAL_CAN_ConfigFilter+0x12a>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80079c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007a30 <HAL_CAN_ConfigFilter+0x138>)
 80079c2:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 80079c6:	f023 0301 	bic.w	r3, r3, #1
 80079ca:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    return HAL_OK;
 80079ce:	2000      	movs	r0, #0
}
 80079d0:	bd10      	pop	{r4, pc}
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80079d2:	4b17      	ldr	r3, [pc, #92]	@ (8007a30 <HAL_CAN_ConfigFilter+0x138>)
 80079d4:	f8d3 020c 	ldr.w	r0, [r3, #524]	@ 0x20c
 80079d8:	4310      	orrs	r0, r2
 80079da:	f8c3 020c 	str.w	r0, [r3, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80079de:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80079e0:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80079e2:	f8d1 e000 	ldr.w	lr, [r1]
 80079e6:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80079ea:	3048      	adds	r0, #72	@ 0x48
 80079ec:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80079f0:	8988      	ldrh	r0, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80079f2:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80079f4:	f8d1 e008 	ldr.w	lr, [r1, #8]
 80079f8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80079fc:	3448      	adds	r4, #72	@ 0x48
 80079fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a02:	6058      	str	r0, [r3, #4]
 8007a04:	e7c6      	b.n	8007994 <HAL_CAN_ConfigFilter+0x9c>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007a06:	480a      	ldr	r0, [pc, #40]	@ (8007a30 <HAL_CAN_ConfigFilter+0x138>)
 8007a08:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	f8c0 3204 	str.w	r3, [r0, #516]	@ 0x204
 8007a12:	e7c9      	b.n	80079a8 <HAL_CAN_ConfigFilter+0xb0>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007a14:	4806      	ldr	r0, [pc, #24]	@ (8007a30 <HAL_CAN_ConfigFilter+0x138>)
 8007a16:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	f8c0 3214 	str.w	r3, [r0, #532]	@ 0x214
 8007a20:	e7cb      	b.n	80079ba <HAL_CAN_ConfigFilter+0xc2>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007a22:	4903      	ldr	r1, [pc, #12]	@ (8007a30 <HAL_CAN_ConfigFilter+0x138>)
 8007a24:	f8d1 321c 	ldr.w	r3, [r1, #540]	@ 0x21c
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
 8007a2e:	e7c7      	b.n	80079c0 <HAL_CAN_ConfigFilter+0xc8>
 8007a30:	40006400 	.word	0x40006400

08007a34 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007a34:	b570      	push	{r4, r5, r6, lr}
 8007a36:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007a38:	f890 5020 	ldrb.w	r5, [r0, #32]
 8007a3c:	b2ed      	uxtb	r5, r5
 8007a3e:	2d01      	cmp	r5, #1
 8007a40:	d006      	beq.n	8007a50 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007a42:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007a44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a48:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8007a4a:	2501      	movs	r5, #1
  }
}
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007a50:	2302      	movs	r3, #2
 8007a52:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007a56:	6802      	ldr	r2, [r0, #0]
 8007a58:	6813      	ldr	r3, [r2, #0]
 8007a5a:	f023 0301 	bic.w	r3, r3, #1
 8007a5e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007a60:	f7ff fc92 	bl	8007388 <HAL_GetTick>
 8007a64:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f013 0f01 	tst.w	r3, #1
 8007a6e:	d00c      	beq.n	8007a8a <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007a70:	f7ff fc8a 	bl	8007388 <HAL_GetTick>
 8007a74:	1b83      	subs	r3, r0, r6
 8007a76:	2b0a      	cmp	r3, #10
 8007a78:	d9f5      	bls.n	8007a66 <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007a7a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a80:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8007a82:	2305      	movs	r3, #5
 8007a84:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8007a88:	e7e0      	b.n	8007a4c <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007a8a:	2500      	movs	r5, #0
 8007a8c:	6265      	str	r5, [r4, #36]	@ 0x24
    return HAL_OK;
 8007a8e:	e7dd      	b.n	8007a4c <HAL_CAN_Start+0x18>

08007a90 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8007a90:	b530      	push	{r4, r5, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007a92:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007a96:	6804      	ldr	r4, [r0, #0]
 8007a98:	68a4      	ldr	r4, [r4, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007a9a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007a9e:	fa5f fc8c 	uxtb.w	ip, ip
 8007aa2:	f1bc 0f01 	cmp.w	ip, #1
 8007aa6:	d862      	bhi.n	8007b6e <HAL_CAN_AddTxMessage+0xde>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007aa8:	f014 5fe0 	tst.w	r4, #469762048	@ 0x1c000000
 8007aac:	d059      	beq.n	8007b62 <HAL_CAN_AddTxMessage+0xd2>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007aae:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007ab2:	2401      	movs	r4, #1
 8007ab4:	fa04 f40c 	lsl.w	r4, r4, ip
 8007ab8:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007aba:	688b      	ldr	r3, [r1, #8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d13d      	bne.n	8007b3c <HAL_CAN_AddTxMessage+0xac>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007ac0:	680d      	ldr	r5, [r1, #0]
                                                           pHeader->RTR);
 8007ac2:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007ac4:	6804      	ldr	r4, [r0, #0]
 8007ac6:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 8007aca:	f10c 0318 	add.w	r3, ip, #24
 8007ace:	011b      	lsls	r3, r3, #4
 8007ad0:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007ad2:	6803      	ldr	r3, [r0, #0]
 8007ad4:	690c      	ldr	r4, [r1, #16]
 8007ad6:	f10c 0e18 	add.w	lr, ip, #24
 8007ada:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 8007ade:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007ae0:	7d0b      	ldrb	r3, [r1, #20]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d035      	beq.n	8007b52 <HAL_CAN_AddTxMessage+0xc2>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007ae6:	79d1      	ldrb	r1, [r2, #7]
 8007ae8:	7993      	ldrb	r3, [r2, #6]
 8007aea:	041b      	lsls	r3, r3, #16
 8007aec:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007af0:	7951      	ldrb	r1, [r2, #5]
 8007af2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007af6:	7914      	ldrb	r4, [r2, #4]
 8007af8:	6801      	ldr	r1, [r0, #0]
 8007afa:	4323      	orrs	r3, r4
 8007afc:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8007b00:	f8c1 318c 	str.w	r3, [r1, #396]	@ 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007b04:	78d1      	ldrb	r1, [r2, #3]
 8007b06:	7893      	ldrb	r3, [r2, #2]
 8007b08:	041b      	lsls	r3, r3, #16
 8007b0a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007b0e:	7851      	ldrb	r1, [r2, #1]
 8007b10:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007b14:	7811      	ldrb	r1, [r2, #0]
 8007b16:	6802      	ldr	r2, [r0, #0]
 8007b18:	430b      	orrs	r3, r1
 8007b1a:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8007b1e:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007b22:	6802      	ldr	r2, [r0, #0]
 8007b24:	f10c 0c18 	add.w	ip, ip, #24
 8007b28:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8007b2c:	f852 300c 	ldr.w	r3, [r2, ip]
 8007b30:	f043 0301 	orr.w	r3, r3, #1
 8007b34:	f842 300c 	str.w	r3, [r2, ip]

      /* Return function status */
      return HAL_OK;
 8007b38:	2000      	movs	r0, #0
 8007b3a:	e01d      	b.n	8007b78 <HAL_CAN_AddTxMessage+0xe8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007b3c:	684c      	ldr	r4, [r1, #4]
 8007b3e:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                                                           pHeader->RTR);
 8007b42:	68cc      	ldr	r4, [r1, #12]
                                                           pHeader->IDE |
 8007b44:	4323      	orrs	r3, r4
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007b46:	f10c 0418 	add.w	r4, ip, #24
 8007b4a:	0124      	lsls	r4, r4, #4
 8007b4c:	6805      	ldr	r5, [r0, #0]
 8007b4e:	512b      	str	r3, [r5, r4]
 8007b50:	e7bf      	b.n	8007ad2 <HAL_CAN_AddTxMessage+0x42>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007b52:	6803      	ldr	r3, [r0, #0]
 8007b54:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 8007b58:	6859      	ldr	r1, [r3, #4]
 8007b5a:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8007b5e:	6059      	str	r1, [r3, #4]
 8007b60:	e7c1      	b.n	8007ae6 <HAL_CAN_AddTxMessage+0x56>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007b62:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007b64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b68:	6243      	str	r3, [r0, #36]	@ 0x24

      return HAL_ERROR;
 8007b6a:	2001      	movs	r0, #1
 8007b6c:	e004      	b.n	8007b78 <HAL_CAN_AddTxMessage+0xe8>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007b6e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007b70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b74:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8007b76:	2001      	movs	r0, #1
  }
}
 8007b78:	bd30      	pop	{r4, r5, pc}

08007b7a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007b7a:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d901      	bls.n	8007b8a <HAL_CAN_GetTxMailboxesFreeLevel+0x10>
  uint32_t freelevel = 0U;
 8007b86:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 8007b88:	4770      	bx	lr
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007b8a:	6803      	ldr	r3, [r0, #0]
 8007b8c:	6898      	ldr	r0, [r3, #8]
 8007b8e:	f010 6080 	ands.w	r0, r0, #67108864	@ 0x4000000
 8007b92:	d000      	beq.n	8007b96 <HAL_CAN_GetTxMailboxesFreeLevel+0x1c>
      freelevel++;
 8007b94:	2001      	movs	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8007b96:	689a      	ldr	r2, [r3, #8]
 8007b98:	f012 6f00 	tst.w	r2, #134217728	@ 0x8000000
 8007b9c:	d000      	beq.n	8007ba0 <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
      freelevel++;
 8007b9e:	3001      	adds	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8007ba6:	d0ef      	beq.n	8007b88 <HAL_CAN_GetTxMailboxesFreeLevel+0xe>
      freelevel++;
 8007ba8:	3001      	adds	r0, #1
 8007baa:	4770      	bx	lr

08007bac <HAL_CAN_GetRxMessage>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8007bac:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007bb0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007bb4:	fa5f fc8c 	uxtb.w	ip, ip
 8007bb8:	f1bc 0f01 	cmp.w	ip, #1
 8007bbc:	f200 80a5 	bhi.w	8007d0a <HAL_CAN_GetRxMessage+0x15e>
{
 8007bc0:	b430      	push	{r4, r5}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007bc2:	b951      	cbnz	r1, 8007bda <HAL_CAN_GetRxMessage+0x2e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007bc4:	6804      	ldr	r4, [r0, #0]
 8007bc6:	68e4      	ldr	r4, [r4, #12]
 8007bc8:	f014 0f03 	tst.w	r4, #3
 8007bcc:	d110      	bne.n	8007bf0 <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007bce:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007bd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007bd4:	6243      	str	r3, [r0, #36]	@ 0x24

        return HAL_ERROR;
 8007bd6:	2001      	movs	r0, #1
 8007bd8:	e07e      	b.n	8007cd8 <HAL_CAN_GetRxMessage+0x12c>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007bda:	6804      	ldr	r4, [r0, #0]
 8007bdc:	6924      	ldr	r4, [r4, #16]
 8007bde:	f014 0f03 	tst.w	r4, #3
 8007be2:	d105      	bne.n	8007bf0 <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007be4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007be6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007bea:	6243      	str	r3, [r0, #36]	@ 0x24

        return HAL_ERROR;
 8007bec:	2001      	movs	r0, #1
 8007bee:	e073      	b.n	8007cd8 <HAL_CAN_GetRxMessage+0x12c>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007bf0:	6805      	ldr	r5, [r0, #0]
 8007bf2:	f101 041b 	add.w	r4, r1, #27
 8007bf6:	0124      	lsls	r4, r4, #4
 8007bf8:	592c      	ldr	r4, [r5, r4]
 8007bfa:	f004 0404 	and.w	r4, r4, #4
 8007bfe:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007c00:	2c00      	cmp	r4, #0
 8007c02:	d16b      	bne.n	8007cdc <HAL_CAN_GetRxMessage+0x130>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007c04:	6805      	ldr	r5, [r0, #0]
 8007c06:	f101 041b 	add.w	r4, r1, #27
 8007c0a:	0124      	lsls	r4, r4, #4
 8007c0c:	592c      	ldr	r4, [r5, r4]
 8007c0e:	0d64      	lsrs	r4, r4, #21
 8007c10:	6014      	str	r4, [r2, #0]
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007c12:	6804      	ldr	r4, [r0, #0]
 8007c14:	f101 0c1b 	add.w	ip, r1, #27
 8007c18:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8007c1c:	f854 400c 	ldr.w	r4, [r4, ip]
 8007c20:	f004 0402 	and.w	r4, r4, #2
 8007c24:	60d4      	str	r4, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8007c26:	6804      	ldr	r4, [r0, #0]
 8007c28:	44a4      	add	ip, r4
 8007c2a:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8007c2e:	f015 0f08 	tst.w	r5, #8
 8007c32:	d05b      	beq.n	8007cec <HAL_CAN_GetRxMessage+0x140>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8007c34:	2408      	movs	r4, #8
 8007c36:	6114      	str	r4, [r2, #16]
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007c38:	6804      	ldr	r4, [r0, #0]
 8007c3a:	f101 0c1b 	add.w	ip, r1, #27
 8007c3e:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 8007c42:	6864      	ldr	r4, [r4, #4]
 8007c44:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8007c48:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007c4a:	6804      	ldr	r4, [r0, #0]
 8007c4c:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 8007c50:	6864      	ldr	r4, [r4, #4]
 8007c52:	0c24      	lsrs	r4, r4, #16
 8007c54:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007c56:	6802      	ldr	r2, [r0, #0]
 8007c58:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007c5c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8007c60:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007c62:	6802      	ldr	r2, [r0, #0]
 8007c64:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007c68:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8007c6c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8007c70:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007c72:	6802      	ldr	r2, [r0, #0]
 8007c74:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007c78:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8007c7c:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8007c80:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007c82:	6802      	ldr	r2, [r0, #0]
 8007c84:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007c88:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8007c8c:	0e12      	lsrs	r2, r2, #24
 8007c8e:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007c90:	6802      	ldr	r2, [r0, #0]
 8007c92:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007c96:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8007c9a:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007c9c:	6802      	ldr	r2, [r0, #0]
 8007c9e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007ca2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8007ca6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8007caa:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007cac:	6802      	ldr	r2, [r0, #0]
 8007cae:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007cb2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8007cb6:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8007cba:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007cbc:	6802      	ldr	r2, [r0, #0]
 8007cbe:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007cc2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8007cc6:	0e12      	lsrs	r2, r2, #24
 8007cc8:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007cca:	b9c1      	cbnz	r1, 8007cfe <HAL_CAN_GetRxMessage+0x152>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007ccc:	6802      	ldr	r2, [r0, #0]
 8007cce:	68d3      	ldr	r3, [r2, #12]
 8007cd0:	f043 0320 	orr.w	r3, r3, #32
 8007cd4:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 8007cd6:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8007cd8:	bc30      	pop	{r4, r5}
 8007cda:	4770      	bx	lr
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007cdc:	6805      	ldr	r5, [r0, #0]
 8007cde:	f101 041b 	add.w	r4, r1, #27
 8007ce2:	0124      	lsls	r4, r4, #4
 8007ce4:	592c      	ldr	r4, [r5, r4]
 8007ce6:	08e4      	lsrs	r4, r4, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8007ce8:	6054      	str	r4, [r2, #4]
 8007cea:	e792      	b.n	8007c12 <HAL_CAN_GetRxMessage+0x66>
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007cec:	f101 051b 	add.w	r5, r1, #27
 8007cf0:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8007cf4:	6864      	ldr	r4, [r4, #4]
 8007cf6:	f004 040f 	and.w	r4, r4, #15
 8007cfa:	6114      	str	r4, [r2, #16]
 8007cfc:	e79c      	b.n	8007c38 <HAL_CAN_GetRxMessage+0x8c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007cfe:	6802      	ldr	r2, [r0, #0]
 8007d00:	6913      	ldr	r3, [r2, #16]
 8007d02:	f043 0320 	orr.w	r3, r3, #32
 8007d06:	6113      	str	r3, [r2, #16]
 8007d08:	e7e5      	b.n	8007cd6 <HAL_CAN_GetRxMessage+0x12a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007d0a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d10:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8007d12:	2001      	movs	r0, #1
}
 8007d14:	4770      	bx	lr

08007d16 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8007d16:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d905      	bls.n	8007d2e <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007d22:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007d24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d28:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8007d2a:	2001      	movs	r0, #1
  }
}
 8007d2c:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007d2e:	6802      	ldr	r2, [r0, #0]
 8007d30:	6953      	ldr	r3, [r2, #20]
 8007d32:	430b      	orrs	r3, r1
 8007d34:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8007d36:	2000      	movs	r0, #0
 8007d38:	4770      	bx	lr

08007d3a <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007d3a:	4770      	bx	lr

08007d3c <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007d3c:	4770      	bx	lr

08007d3e <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007d3e:	4770      	bx	lr

08007d40 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007d40:	4770      	bx	lr

08007d42 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007d42:	4770      	bx	lr

08007d44 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007d44:	4770      	bx	lr

08007d46 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007d46:	4770      	bx	lr

08007d48 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007d48:	4770      	bx	lr

08007d4a <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007d4a:	4770      	bx	lr

08007d4c <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007d4c:	4770      	bx	lr

08007d4e <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007d4e:	4770      	bx	lr

08007d50 <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007d50:	4770      	bx	lr

08007d52 <HAL_CAN_IRQHandler>:
{
 8007d52:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d56:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007d58:	6803      	ldr	r3, [r0, #0]
 8007d5a:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007d5c:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007d60:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007d62:	f8d3 a00c 	ldr.w	sl, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007d66:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007d6a:	f8d3 b018 	ldr.w	fp, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007d6e:	f014 0601 	ands.w	r6, r4, #1
 8007d72:	d03b      	beq.n	8007dec <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007d74:	f017 0601 	ands.w	r6, r7, #1
 8007d78:	d016      	beq.n	8007da8 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007d7e:	f017 0f02 	tst.w	r7, #2
 8007d82:	d108      	bne.n	8007d96 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007d84:	f017 0f04 	tst.w	r7, #4
 8007d88:	d10c      	bne.n	8007da4 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007d8a:	f017 0608 	ands.w	r6, r7, #8
 8007d8e:	d006      	beq.n	8007d9e <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007d90:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8007d94:	e008      	b.n	8007da8 <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007d96:	f7ff ffd0 	bl	8007d3a <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007d9a:	2600      	movs	r6, #0
 8007d9c:	e004      	b.n	8007da8 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007d9e:	f7ff ffcf 	bl	8007d40 <HAL_CAN_TxMailbox0AbortCallback>
 8007da2:	e001      	b.n	8007da8 <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007da4:	f44f 6600 	mov.w	r6, #2048	@ 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007da8:	f417 7f80 	tst.w	r7, #256	@ 0x100
 8007dac:	d00d      	beq.n	8007dca <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007dae:	682b      	ldr	r3, [r5, #0]
 8007db0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007db4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007db6:	f417 7f00 	tst.w	r7, #512	@ 0x200
 8007dba:	f040 8096 	bne.w	8007eea <HAL_CAN_IRQHandler+0x198>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007dbe:	f417 6f80 	tst.w	r7, #1024	@ 0x400
 8007dc2:	f000 8096 	beq.w	8007ef2 <HAL_CAN_IRQHandler+0x1a0>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007dc6:	f446 5600 	orr.w	r6, r6, #8192	@ 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007dca:	f417 3f80 	tst.w	r7, #65536	@ 0x10000
 8007dce:	d00d      	beq.n	8007dec <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007dd0:	682b      	ldr	r3, [r5, #0]
 8007dd2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007dd6:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007dd8:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8007ddc:	f040 8093 	bne.w	8007f06 <HAL_CAN_IRQHandler+0x1b4>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007de0:	f417 2f80 	tst.w	r7, #262144	@ 0x40000
 8007de4:	f000 8093 	beq.w	8007f0e <HAL_CAN_IRQHandler+0x1bc>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007de8:	f446 4600 	orr.w	r6, r6, #32768	@ 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007dec:	f014 0f08 	tst.w	r4, #8
 8007df0:	d007      	beq.n	8007e02 <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007df2:	f01a 0f10 	tst.w	sl, #16
 8007df6:	d004      	beq.n	8007e02 <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007df8:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	2210      	movs	r2, #16
 8007e00:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007e02:	f014 0f04 	tst.w	r4, #4
 8007e06:	d003      	beq.n	8007e10 <HAL_CAN_IRQHandler+0xbe>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007e08:	f01a 0f08 	tst.w	sl, #8
 8007e0c:	f040 8089 	bne.w	8007f22 <HAL_CAN_IRQHandler+0x1d0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007e10:	f014 0f02 	tst.w	r4, #2
 8007e14:	d005      	beq.n	8007e22 <HAL_CAN_IRQHandler+0xd0>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007e16:	682b      	ldr	r3, [r5, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	f013 0f03 	tst.w	r3, #3
 8007e1e:	f040 8087 	bne.w	8007f30 <HAL_CAN_IRQHandler+0x1de>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007e22:	f014 0f40 	tst.w	r4, #64	@ 0x40
 8007e26:	d007      	beq.n	8007e38 <HAL_CAN_IRQHandler+0xe6>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007e28:	f019 0f10 	tst.w	r9, #16
 8007e2c:	d004      	beq.n	8007e38 <HAL_CAN_IRQHandler+0xe6>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007e2e:	f446 6680 	orr.w	r6, r6, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007e32:	682b      	ldr	r3, [r5, #0]
 8007e34:	2210      	movs	r2, #16
 8007e36:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007e38:	f014 0f20 	tst.w	r4, #32
 8007e3c:	d002      	beq.n	8007e44 <HAL_CAN_IRQHandler+0xf2>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007e3e:	f019 0f08 	tst.w	r9, #8
 8007e42:	d179      	bne.n	8007f38 <HAL_CAN_IRQHandler+0x1e6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007e44:	f014 0f10 	tst.w	r4, #16
 8007e48:	d004      	beq.n	8007e54 <HAL_CAN_IRQHandler+0x102>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007e4a:	682b      	ldr	r3, [r5, #0]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	f013 0f03 	tst.w	r3, #3
 8007e52:	d178      	bne.n	8007f46 <HAL_CAN_IRQHandler+0x1f4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007e54:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
 8007e58:	d002      	beq.n	8007e60 <HAL_CAN_IRQHandler+0x10e>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007e5a:	f018 0f10 	tst.w	r8, #16
 8007e5e:	d176      	bne.n	8007f4e <HAL_CAN_IRQHandler+0x1fc>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007e60:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
 8007e64:	d002      	beq.n	8007e6c <HAL_CAN_IRQHandler+0x11a>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007e66:	f018 0f08 	tst.w	r8, #8
 8007e6a:	d177      	bne.n	8007f5c <HAL_CAN_IRQHandler+0x20a>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007e6c:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8007e70:	d037      	beq.n	8007ee2 <HAL_CAN_IRQHandler+0x190>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007e72:	f018 0f04 	tst.w	r8, #4
 8007e76:	d031      	beq.n	8007edc <HAL_CAN_IRQHandler+0x18a>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007e78:	f414 7f80 	tst.w	r4, #256	@ 0x100
 8007e7c:	d004      	beq.n	8007e88 <HAL_CAN_IRQHandler+0x136>
 8007e7e:	f01b 0f01 	tst.w	fp, #1
 8007e82:	d001      	beq.n	8007e88 <HAL_CAN_IRQHandler+0x136>
        errorcode |= HAL_CAN_ERROR_EWG;
 8007e84:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007e88:	f414 7f00 	tst.w	r4, #512	@ 0x200
 8007e8c:	d004      	beq.n	8007e98 <HAL_CAN_IRQHandler+0x146>
 8007e8e:	f01b 0f02 	tst.w	fp, #2
 8007e92:	d001      	beq.n	8007e98 <HAL_CAN_IRQHandler+0x146>
        errorcode |= HAL_CAN_ERROR_EPV;
 8007e94:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007e98:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 8007e9c:	d004      	beq.n	8007ea8 <HAL_CAN_IRQHandler+0x156>
 8007e9e:	f01b 0f04 	tst.w	fp, #4
 8007ea2:	d001      	beq.n	8007ea8 <HAL_CAN_IRQHandler+0x156>
        errorcode |= HAL_CAN_ERROR_BOF;
 8007ea4:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007ea8:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 8007eac:	d016      	beq.n	8007edc <HAL_CAN_IRQHandler+0x18a>
 8007eae:	f01b 0b70 	ands.w	fp, fp, #112	@ 0x70
 8007eb2:	d013      	beq.n	8007edc <HAL_CAN_IRQHandler+0x18a>
        switch (esrflags & CAN_ESR_LEC)
 8007eb4:	f1bb 0f40 	cmp.w	fp, #64	@ 0x40
 8007eb8:	d066      	beq.n	8007f88 <HAL_CAN_IRQHandler+0x236>
 8007eba:	d856      	bhi.n	8007f6a <HAL_CAN_IRQHandler+0x218>
 8007ebc:	f1bb 0f20 	cmp.w	fp, #32
 8007ec0:	d05c      	beq.n	8007f7c <HAL_CAN_IRQHandler+0x22a>
 8007ec2:	f1bb 0f30 	cmp.w	fp, #48	@ 0x30
 8007ec6:	d05c      	beq.n	8007f82 <HAL_CAN_IRQHandler+0x230>
 8007ec8:	f1bb 0f10 	cmp.w	fp, #16
 8007ecc:	d101      	bne.n	8007ed2 <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_STF;
 8007ece:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007ed2:	682a      	ldr	r2, [r5, #0]
 8007ed4:	6993      	ldr	r3, [r2, #24]
 8007ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eda:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007edc:	682b      	ldr	r3, [r5, #0]
 8007ede:	2204      	movs	r2, #4
 8007ee0:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007ee2:	2e00      	cmp	r6, #0
 8007ee4:	d156      	bne.n	8007f94 <HAL_CAN_IRQHandler+0x242>
}
 8007ee6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007eea:	4628      	mov	r0, r5
 8007eec:	f7ff ff26 	bl	8007d3c <HAL_CAN_TxMailbox1CompleteCallback>
 8007ef0:	e76b      	b.n	8007dca <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007ef2:	f417 6f00 	tst.w	r7, #2048	@ 0x800
 8007ef6:	d002      	beq.n	8007efe <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007ef8:	f446 4680 	orr.w	r6, r6, #16384	@ 0x4000
 8007efc:	e765      	b.n	8007dca <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007efe:	4628      	mov	r0, r5
 8007f00:	f7ff ff1f 	bl	8007d42 <HAL_CAN_TxMailbox1AbortCallback>
 8007f04:	e761      	b.n	8007dca <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007f06:	4628      	mov	r0, r5
 8007f08:	f7ff ff19 	bl	8007d3e <HAL_CAN_TxMailbox2CompleteCallback>
 8007f0c:	e76e      	b.n	8007dec <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007f0e:	f417 2f00 	tst.w	r7, #524288	@ 0x80000
 8007f12:	d002      	beq.n	8007f1a <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007f14:	f446 3680 	orr.w	r6, r6, #65536	@ 0x10000
 8007f18:	e768      	b.n	8007dec <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	f7ff ff12 	bl	8007d44 <HAL_CAN_TxMailbox2AbortCallback>
 8007f20:	e764      	b.n	8007dec <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007f22:	682b      	ldr	r3, [r5, #0]
 8007f24:	2208      	movs	r2, #8
 8007f26:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007f28:	4628      	mov	r0, r5
 8007f2a:	f7ff ff0c 	bl	8007d46 <HAL_CAN_RxFifo0FullCallback>
 8007f2e:	e76f      	b.n	8007e10 <HAL_CAN_IRQHandler+0xbe>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007f30:	4628      	mov	r0, r5
 8007f32:	f7fe fc13 	bl	800675c <HAL_CAN_RxFifo0MsgPendingCallback>
 8007f36:	e774      	b.n	8007e22 <HAL_CAN_IRQHandler+0xd0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	2208      	movs	r2, #8
 8007f3c:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007f3e:	4628      	mov	r0, r5
 8007f40:	f7ff ff03 	bl	8007d4a <HAL_CAN_RxFifo1FullCallback>
 8007f44:	e77e      	b.n	8007e44 <HAL_CAN_IRQHandler+0xf2>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007f46:	4628      	mov	r0, r5
 8007f48:	f7ff fefe 	bl	8007d48 <HAL_CAN_RxFifo1MsgPendingCallback>
 8007f4c:	e782      	b.n	8007e54 <HAL_CAN_IRQHandler+0x102>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007f4e:	682b      	ldr	r3, [r5, #0]
 8007f50:	2210      	movs	r2, #16
 8007f52:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8007f54:	4628      	mov	r0, r5
 8007f56:	f7ff fef9 	bl	8007d4c <HAL_CAN_SleepCallback>
 8007f5a:	e781      	b.n	8007e60 <HAL_CAN_IRQHandler+0x10e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	2208      	movs	r2, #8
 8007f60:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007f62:	4628      	mov	r0, r5
 8007f64:	f7ff fef3 	bl	8007d4e <HAL_CAN_WakeUpFromRxMsgCallback>
 8007f68:	e780      	b.n	8007e6c <HAL_CAN_IRQHandler+0x11a>
        switch (esrflags & CAN_ESR_LEC)
 8007f6a:	f1bb 0f50 	cmp.w	fp, #80	@ 0x50
 8007f6e:	d00e      	beq.n	8007f8e <HAL_CAN_IRQHandler+0x23c>
 8007f70:	f1bb 0f60 	cmp.w	fp, #96	@ 0x60
 8007f74:	d1ad      	bne.n	8007ed2 <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007f76:	f446 7680 	orr.w	r6, r6, #256	@ 0x100
            break;
 8007f7a:	e7aa      	b.n	8007ed2 <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007f7c:	f046 0610 	orr.w	r6, r6, #16
            break;
 8007f80:	e7a7      	b.n	8007ed2 <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007f82:	f046 0620 	orr.w	r6, r6, #32
            break;
 8007f86:	e7a4      	b.n	8007ed2 <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_BR;
 8007f88:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
            break;
 8007f8c:	e7a1      	b.n	8007ed2 <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_BD;
 8007f8e:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
            break;
 8007f92:	e79e      	b.n	8007ed2 <HAL_CAN_IRQHandler+0x180>
    hcan->ErrorCode |= errorcode;
 8007f94:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8007f96:	4333      	orrs	r3, r6
 8007f98:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f7ff fed8 	bl	8007d50 <HAL_CAN_ErrorCallback>
}
 8007fa0:	e7a1      	b.n	8007ee6 <HAL_CAN_IRQHandler+0x194>
	...

08007fa4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	db08      	blt.n	8007fba <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fa8:	0109      	lsls	r1, r1, #4
 8007faa:	b2c9      	uxtb	r1, r1
 8007fac:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8007fb0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8007fb4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8007fb8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fba:	f000 000f 	and.w	r0, r0, #15
 8007fbe:	0109      	lsls	r1, r1, #4
 8007fc0:	b2c9      	uxtb	r1, r1
 8007fc2:	4b01      	ldr	r3, [pc, #4]	@ (8007fc8 <__NVIC_SetPriority+0x24>)
 8007fc4:	5419      	strb	r1, [r3, r0]
  }
}
 8007fc6:	4770      	bx	lr
 8007fc8:	e000ed14 	.word	0xe000ed14

08007fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007fcc:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007fce:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007fd2:	f1c0 0c07 	rsb	ip, r0, #7
 8007fd6:	f1bc 0f04 	cmp.w	ip, #4
 8007fda:	bf28      	it	cs
 8007fdc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007fe0:	1d03      	adds	r3, r0, #4
 8007fe2:	2b06      	cmp	r3, #6
 8007fe4:	d90f      	bls.n	8008006 <NVIC_EncodePriority+0x3a>
 8007fe6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007fe8:	f04f 3eff 	mov.w	lr, #4294967295
 8007fec:	fa0e f00c 	lsl.w	r0, lr, ip
 8007ff0:	ea21 0100 	bic.w	r1, r1, r0
 8007ff4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ff6:	fa0e fe03 	lsl.w	lr, lr, r3
 8007ffa:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8007ffe:	ea41 0002 	orr.w	r0, r1, r2
 8008002:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008006:	2300      	movs	r3, #0
 8008008:	e7ee      	b.n	8007fe8 <NVIC_EncodePriority+0x1c>
	...

0800800c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800800c:	4a07      	ldr	r2, [pc, #28]	@ (800802c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800800e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008010:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008014:	041b      	lsls	r3, r3, #16
 8008016:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008018:	0200      	lsls	r0, r0, #8
 800801a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800801e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8008020:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008024:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8008028:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800802a:	4770      	bx	lr
 800802c:	e000ed00 	.word	0xe000ed00

08008030 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008030:	b510      	push	{r4, lr}
 8008032:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008034:	4b05      	ldr	r3, [pc, #20]	@ (800804c <HAL_NVIC_SetPriority+0x1c>)
 8008036:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008038:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800803c:	f7ff ffc6 	bl	8007fcc <NVIC_EncodePriority>
 8008040:	4601      	mov	r1, r0
 8008042:	4620      	mov	r0, r4
 8008044:	f7ff ffae 	bl	8007fa4 <__NVIC_SetPriority>
}
 8008048:	bd10      	pop	{r4, pc}
 800804a:	bf00      	nop
 800804c:	e000ed00 	.word	0xe000ed00

08008050 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008050:	2800      	cmp	r0, #0
 8008052:	db07      	blt.n	8008064 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008054:	f000 021f 	and.w	r2, r0, #31
 8008058:	0940      	lsrs	r0, r0, #5
 800805a:	2301      	movs	r3, #1
 800805c:	4093      	lsls	r3, r2
 800805e:	4a02      	ldr	r2, [pc, #8]	@ (8008068 <HAL_NVIC_EnableIRQ+0x18>)
 8008060:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	e000e100 	.word	0xe000e100

0800806c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800806c:	3801      	subs	r0, #1
 800806e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8008072:	d20b      	bcs.n	800808c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008074:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008078:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800807a:	4a05      	ldr	r2, [pc, #20]	@ (8008090 <HAL_SYSTICK_Config+0x24>)
 800807c:	21f0      	movs	r1, #240	@ 0xf0
 800807e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008082:	2000      	movs	r0, #0
 8008084:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008086:	2207      	movs	r2, #7
 8008088:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800808a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800808c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800808e:	4770      	bx	lr
 8008090:	e000ed00 	.word	0xe000ed00

08008094 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008094:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008096:	2401      	movs	r4, #1
 8008098:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800809a:	40ac      	lsls	r4, r5
 800809c:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800809e:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80080a0:	6804      	ldr	r4, [r0, #0]
 80080a2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80080a4:	6843      	ldr	r3, [r0, #4]
 80080a6:	2b10      	cmp	r3, #16
 80080a8:	d005      	beq.n	80080b6 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80080aa:	6803      	ldr	r3, [r0, #0]
 80080ac:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80080ae:	6803      	ldr	r3, [r0, #0]
 80080b0:	60da      	str	r2, [r3, #12]
  }
}
 80080b2:	bc30      	pop	{r4, r5}
 80080b4:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80080b6:	6803      	ldr	r3, [r0, #0]
 80080b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80080ba:	6803      	ldr	r3, [r0, #0]
 80080bc:	60d9      	str	r1, [r3, #12]
 80080be:	e7f8      	b.n	80080b2 <DMA_SetConfig+0x1e>

080080c0 <HAL_DMA_Init>:
  if(hdma == NULL)
 80080c0:	2800      	cmp	r0, #0
 80080c2:	d038      	beq.n	8008136 <HAL_DMA_Init+0x76>
{
 80080c4:	b410      	push	{r4}
 80080c6:	4602      	mov	r2, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80080c8:	6801      	ldr	r1, [r0, #0]
 80080ca:	4b1c      	ldr	r3, [pc, #112]	@ (800813c <HAL_DMA_Init+0x7c>)
 80080cc:	4299      	cmp	r1, r3
 80080ce:	d827      	bhi.n	8008120 <HAL_DMA_Init+0x60>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80080d0:	4b1b      	ldr	r3, [pc, #108]	@ (8008140 <HAL_DMA_Init+0x80>)
 80080d2:	440b      	add	r3, r1
 80080d4:	481b      	ldr	r0, [pc, #108]	@ (8008144 <HAL_DMA_Init+0x84>)
 80080d6:	fba0 0303 	umull	r0, r3, r0, r3
 80080da:	091b      	lsrs	r3, r3, #4
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	6413      	str	r3, [r2, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80080e0:	4b19      	ldr	r3, [pc, #100]	@ (8008148 <HAL_DMA_Init+0x88>)
 80080e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 80080e4:	2302      	movs	r3, #2
 80080e6:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  tmp = hdma->Instance->CCR;
 80080ea:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80080ec:	f36f 100d 	bfc	r0, #4, #10
  tmp |=  hdma->Init.Direction        |
 80080f0:	6853      	ldr	r3, [r2, #4]
 80080f2:	6894      	ldr	r4, [r2, #8]
 80080f4:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080f6:	68d4      	ldr	r4, [r2, #12]
 80080f8:	4323      	orrs	r3, r4
 80080fa:	6914      	ldr	r4, [r2, #16]
 80080fc:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080fe:	6954      	ldr	r4, [r2, #20]
 8008100:	4323      	orrs	r3, r4
 8008102:	6994      	ldr	r4, [r2, #24]
 8008104:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8008106:	69d4      	ldr	r4, [r2, #28]
 8008108:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800810a:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 800810c:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800810e:	2000      	movs	r0, #0
 8008110:	6390      	str	r0, [r2, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8008112:	2301      	movs	r3, #1
 8008114:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  hdma->Lock = HAL_UNLOCKED;
 8008118:	f882 0020 	strb.w	r0, [r2, #32]
}
 800811c:	bc10      	pop	{r4}
 800811e:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008120:	4b0a      	ldr	r3, [pc, #40]	@ (800814c <HAL_DMA_Init+0x8c>)
 8008122:	440b      	add	r3, r1
 8008124:	4807      	ldr	r0, [pc, #28]	@ (8008144 <HAL_DMA_Init+0x84>)
 8008126:	fba0 0303 	umull	r0, r3, r0, r3
 800812a:	091b      	lsrs	r3, r3, #4
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	6413      	str	r3, [r2, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8008130:	4b07      	ldr	r3, [pc, #28]	@ (8008150 <HAL_DMA_Init+0x90>)
 8008132:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8008134:	e7d6      	b.n	80080e4 <HAL_DMA_Init+0x24>
    return HAL_ERROR;
 8008136:	2001      	movs	r0, #1
}
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	40020407 	.word	0x40020407
 8008140:	bffdfff8 	.word	0xbffdfff8
 8008144:	cccccccd 	.word	0xcccccccd
 8008148:	40020000 	.word	0x40020000
 800814c:	bffdfbf8 	.word	0xbffdfbf8
 8008150:	40020400 	.word	0x40020400

08008154 <HAL_DMA_Start_IT>:
{
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8008158:	f890 0020 	ldrb.w	r0, [r0, #32]
 800815c:	2801      	cmp	r0, #1
 800815e:	d032      	beq.n	80081c6 <HAL_DMA_Start_IT+0x72>
 8008160:	2001      	movs	r0, #1
 8008162:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8008166:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 800816a:	b2c0      	uxtb	r0, r0
 800816c:	2801      	cmp	r0, #1
 800816e:	d004      	beq.n	800817a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 8008170:	2300      	movs	r3, #0
 8008172:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8008176:	2002      	movs	r0, #2
}
 8008178:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800817a:	2002      	movs	r0, #2
 800817c:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008180:	2000      	movs	r0, #0
 8008182:	63a0      	str	r0, [r4, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 8008184:	6825      	ldr	r5, [r4, #0]
 8008186:	6828      	ldr	r0, [r5, #0]
 8008188:	f020 0001 	bic.w	r0, r0, #1
 800818c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800818e:	4620      	mov	r0, r4
 8008190:	f7ff ff80 	bl	8008094 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8008194:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008196:	b15b      	cbz	r3, 80081b0 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008198:	6822      	ldr	r2, [r4, #0]
 800819a:	6813      	ldr	r3, [r2, #0]
 800819c:	f043 030e 	orr.w	r3, r3, #14
 80081a0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80081a2:	6822      	ldr	r2, [r4, #0]
 80081a4:	6813      	ldr	r3, [r2, #0]
 80081a6:	f043 0301 	orr.w	r3, r3, #1
 80081aa:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081ac:	2000      	movs	r0, #0
 80081ae:	e7e3      	b.n	8008178 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80081b0:	6822      	ldr	r2, [r4, #0]
 80081b2:	6813      	ldr	r3, [r2, #0]
 80081b4:	f023 0304 	bic.w	r3, r3, #4
 80081b8:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80081ba:	6822      	ldr	r2, [r4, #0]
 80081bc:	6813      	ldr	r3, [r2, #0]
 80081be:	f043 030a 	orr.w	r3, r3, #10
 80081c2:	6013      	str	r3, [r2, #0]
 80081c4:	e7ed      	b.n	80081a2 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80081c6:	2002      	movs	r0, #2
 80081c8:	e7d6      	b.n	8008178 <HAL_DMA_Start_IT+0x24>

080081ca <HAL_DMA_Abort>:
{
 80081ca:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80081cc:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 80081d0:	b2d2      	uxtb	r2, r2
 80081d2:	2a02      	cmp	r2, #2
 80081d4:	d006      	beq.n	80081e4 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80081d6:	2204      	movs	r2, #4
 80081d8:	6382      	str	r2, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 80081da:	2200      	movs	r2, #0
 80081dc:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 80081e0:	2001      	movs	r0, #1
 80081e2:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80081e4:	6801      	ldr	r1, [r0, #0]
 80081e6:	680a      	ldr	r2, [r1, #0]
 80081e8:	f022 020e 	bic.w	r2, r2, #14
 80081ec:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80081ee:	6801      	ldr	r1, [r0, #0]
 80081f0:	680a      	ldr	r2, [r1, #0]
 80081f2:	f022 0201 	bic.w	r2, r2, #1
 80081f6:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80081f8:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80081fa:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80081fc:	2101      	movs	r1, #1
 80081fe:	fa01 f202 	lsl.w	r2, r1, r2
 8008202:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8008204:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  __HAL_UNLOCK(hdma);      
 8008208:	2000      	movs	r0, #0
 800820a:	f883 0020 	strb.w	r0, [r3, #32]
}
 800820e:	4770      	bx	lr

08008210 <HAL_DMA_Abort_IT>:
{  
 8008210:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008212:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b02      	cmp	r3, #2
 800821a:	d003      	beq.n	8008224 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800821c:	2304      	movs	r3, #4
 800821e:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8008220:	2001      	movs	r0, #1
}
 8008222:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008224:	6802      	ldr	r2, [r0, #0]
 8008226:	6813      	ldr	r3, [r2, #0]
 8008228:	f023 030e 	bic.w	r3, r3, #14
 800822c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800822e:	6802      	ldr	r2, [r0, #0]
 8008230:	6813      	ldr	r3, [r2, #0]
 8008232:	f023 0301 	bic.w	r3, r3, #1
 8008236:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008238:	6803      	ldr	r3, [r0, #0]
 800823a:	4a4c      	ldr	r2, [pc, #304]	@ (800836c <HAL_DMA_Abort_IT+0x15c>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d94e      	bls.n	80082de <HAL_DMA_Abort_IT+0xce>
 8008240:	3a78      	subs	r2, #120	@ 0x78
 8008242:	4293      	cmp	r3, r2
 8008244:	d024      	beq.n	8008290 <HAL_DMA_Abort_IT+0x80>
 8008246:	3214      	adds	r2, #20
 8008248:	4293      	cmp	r3, r2
 800824a:	d030      	beq.n	80082ae <HAL_DMA_Abort_IT+0x9e>
 800824c:	3214      	adds	r2, #20
 800824e:	4293      	cmp	r3, r2
 8008250:	d02f      	beq.n	80082b2 <HAL_DMA_Abort_IT+0xa2>
 8008252:	3214      	adds	r2, #20
 8008254:	4293      	cmp	r3, r2
 8008256:	d02f      	beq.n	80082b8 <HAL_DMA_Abort_IT+0xa8>
 8008258:	3214      	adds	r2, #20
 800825a:	4293      	cmp	r3, r2
 800825c:	d02f      	beq.n	80082be <HAL_DMA_Abort_IT+0xae>
 800825e:	3214      	adds	r2, #20
 8008260:	4293      	cmp	r3, r2
 8008262:	d02f      	beq.n	80082c4 <HAL_DMA_Abort_IT+0xb4>
 8008264:	3214      	adds	r2, #20
 8008266:	4293      	cmp	r3, r2
 8008268:	d02f      	beq.n	80082ca <HAL_DMA_Abort_IT+0xba>
 800826a:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 800826e:	4293      	cmp	r3, r2
 8008270:	d02e      	beq.n	80082d0 <HAL_DMA_Abort_IT+0xc0>
 8008272:	3214      	adds	r2, #20
 8008274:	4293      	cmp	r3, r2
 8008276:	d02d      	beq.n	80082d4 <HAL_DMA_Abort_IT+0xc4>
 8008278:	3214      	adds	r2, #20
 800827a:	4293      	cmp	r3, r2
 800827c:	d02c      	beq.n	80082d8 <HAL_DMA_Abort_IT+0xc8>
 800827e:	3214      	adds	r2, #20
 8008280:	4293      	cmp	r3, r2
 8008282:	d002      	beq.n	800828a <HAL_DMA_Abort_IT+0x7a>
 8008284:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008288:	e003      	b.n	8008292 <HAL_DMA_Abort_IT+0x82>
 800828a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800828e:	e000      	b.n	8008292 <HAL_DMA_Abort_IT+0x82>
 8008290:	2201      	movs	r2, #1
 8008292:	4b37      	ldr	r3, [pc, #220]	@ (8008370 <HAL_DMA_Abort_IT+0x160>)
 8008294:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008296:	2301      	movs	r3, #1
 8008298:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 800829c:	2300      	movs	r3, #0
 800829e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80082a2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d05e      	beq.n	8008366 <HAL_DMA_Abort_IT+0x156>
      hdma->XferAbortCallback(hdma);
 80082a8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80082aa:	2000      	movs	r0, #0
 80082ac:	e7b9      	b.n	8008222 <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80082ae:	2210      	movs	r2, #16
 80082b0:	e7ef      	b.n	8008292 <HAL_DMA_Abort_IT+0x82>
 80082b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80082b6:	e7ec      	b.n	8008292 <HAL_DMA_Abort_IT+0x82>
 80082b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80082bc:	e7e9      	b.n	8008292 <HAL_DMA_Abort_IT+0x82>
 80082be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80082c2:	e7e6      	b.n	8008292 <HAL_DMA_Abort_IT+0x82>
 80082c4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80082c8:	e7e3      	b.n	8008292 <HAL_DMA_Abort_IT+0x82>
 80082ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80082ce:	e7e0      	b.n	8008292 <HAL_DMA_Abort_IT+0x82>
 80082d0:	2201      	movs	r2, #1
 80082d2:	e7de      	b.n	8008292 <HAL_DMA_Abort_IT+0x82>
 80082d4:	2210      	movs	r2, #16
 80082d6:	e7dc      	b.n	8008292 <HAL_DMA_Abort_IT+0x82>
 80082d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80082dc:	e7d9      	b.n	8008292 <HAL_DMA_Abort_IT+0x82>
 80082de:	4a25      	ldr	r2, [pc, #148]	@ (8008374 <HAL_DMA_Abort_IT+0x164>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d024      	beq.n	800832e <HAL_DMA_Abort_IT+0x11e>
 80082e4:	3214      	adds	r2, #20
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d025      	beq.n	8008336 <HAL_DMA_Abort_IT+0x126>
 80082ea:	3214      	adds	r2, #20
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d024      	beq.n	800833a <HAL_DMA_Abort_IT+0x12a>
 80082f0:	3214      	adds	r2, #20
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d024      	beq.n	8008340 <HAL_DMA_Abort_IT+0x130>
 80082f6:	3214      	adds	r2, #20
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d024      	beq.n	8008346 <HAL_DMA_Abort_IT+0x136>
 80082fc:	3214      	adds	r2, #20
 80082fe:	4293      	cmp	r3, r2
 8008300:	d024      	beq.n	800834c <HAL_DMA_Abort_IT+0x13c>
 8008302:	3214      	adds	r2, #20
 8008304:	4293      	cmp	r3, r2
 8008306:	d024      	beq.n	8008352 <HAL_DMA_Abort_IT+0x142>
 8008308:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 800830c:	4293      	cmp	r3, r2
 800830e:	d023      	beq.n	8008358 <HAL_DMA_Abort_IT+0x148>
 8008310:	3214      	adds	r2, #20
 8008312:	4293      	cmp	r3, r2
 8008314:	d022      	beq.n	800835c <HAL_DMA_Abort_IT+0x14c>
 8008316:	3214      	adds	r2, #20
 8008318:	4293      	cmp	r3, r2
 800831a:	d021      	beq.n	8008360 <HAL_DMA_Abort_IT+0x150>
 800831c:	3214      	adds	r2, #20
 800831e:	4293      	cmp	r3, r2
 8008320:	d002      	beq.n	8008328 <HAL_DMA_Abort_IT+0x118>
 8008322:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008326:	e003      	b.n	8008330 <HAL_DMA_Abort_IT+0x120>
 8008328:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800832c:	e000      	b.n	8008330 <HAL_DMA_Abort_IT+0x120>
 800832e:	2201      	movs	r2, #1
 8008330:	4b11      	ldr	r3, [pc, #68]	@ (8008378 <HAL_DMA_Abort_IT+0x168>)
 8008332:	605a      	str	r2, [r3, #4]
 8008334:	e7af      	b.n	8008296 <HAL_DMA_Abort_IT+0x86>
 8008336:	2210      	movs	r2, #16
 8008338:	e7fa      	b.n	8008330 <HAL_DMA_Abort_IT+0x120>
 800833a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800833e:	e7f7      	b.n	8008330 <HAL_DMA_Abort_IT+0x120>
 8008340:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008344:	e7f4      	b.n	8008330 <HAL_DMA_Abort_IT+0x120>
 8008346:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800834a:	e7f1      	b.n	8008330 <HAL_DMA_Abort_IT+0x120>
 800834c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008350:	e7ee      	b.n	8008330 <HAL_DMA_Abort_IT+0x120>
 8008352:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008356:	e7eb      	b.n	8008330 <HAL_DMA_Abort_IT+0x120>
 8008358:	2201      	movs	r2, #1
 800835a:	e7e9      	b.n	8008330 <HAL_DMA_Abort_IT+0x120>
 800835c:	2210      	movs	r2, #16
 800835e:	e7e7      	b.n	8008330 <HAL_DMA_Abort_IT+0x120>
 8008360:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008364:	e7e4      	b.n	8008330 <HAL_DMA_Abort_IT+0x120>
  HAL_StatusTypeDef status = HAL_OK;
 8008366:	2000      	movs	r0, #0
 8008368:	e75b      	b.n	8008222 <HAL_DMA_Abort_IT+0x12>
 800836a:	bf00      	nop
 800836c:	40020080 	.word	0x40020080
 8008370:	40020400 	.word	0x40020400
 8008374:	40020008 	.word	0x40020008
 8008378:	40020000 	.word	0x40020000

0800837c <HAL_DMA_IRQHandler>:
{
 800837c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800837e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8008380:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8008382:	6804      	ldr	r4, [r0, #0]
 8008384:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008386:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8008388:	2304      	movs	r3, #4
 800838a:	408b      	lsls	r3, r1
 800838c:	4213      	tst	r3, r2
 800838e:	f000 809b 	beq.w	80084c8 <HAL_DMA_IRQHandler+0x14c>
 8008392:	f015 0f04 	tst.w	r5, #4
 8008396:	f000 8097 	beq.w	80084c8 <HAL_DMA_IRQHandler+0x14c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	f013 0f20 	tst.w	r3, #32
 80083a0:	d103      	bne.n	80083aa <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	f023 0304 	bic.w	r3, r3, #4
 80083a8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80083aa:	6803      	ldr	r3, [r0, #0]
 80083ac:	4a9a      	ldr	r2, [pc, #616]	@ (8008618 <HAL_DMA_IRQHandler+0x29c>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d946      	bls.n	8008440 <HAL_DMA_IRQHandler+0xc4>
 80083b2:	3a78      	subs	r2, #120	@ 0x78
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d024      	beq.n	8008402 <HAL_DMA_IRQHandler+0x86>
 80083b8:	3214      	adds	r2, #20
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d028      	beq.n	8008410 <HAL_DMA_IRQHandler+0x94>
 80083be:	3214      	adds	r2, #20
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d027      	beq.n	8008414 <HAL_DMA_IRQHandler+0x98>
 80083c4:	3214      	adds	r2, #20
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d027      	beq.n	800841a <HAL_DMA_IRQHandler+0x9e>
 80083ca:	3214      	adds	r2, #20
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d027      	beq.n	8008420 <HAL_DMA_IRQHandler+0xa4>
 80083d0:	3214      	adds	r2, #20
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d027      	beq.n	8008426 <HAL_DMA_IRQHandler+0xaa>
 80083d6:	3214      	adds	r2, #20
 80083d8:	4293      	cmp	r3, r2
 80083da:	d027      	beq.n	800842c <HAL_DMA_IRQHandler+0xb0>
 80083dc:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d026      	beq.n	8008432 <HAL_DMA_IRQHandler+0xb6>
 80083e4:	3214      	adds	r2, #20
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d025      	beq.n	8008436 <HAL_DMA_IRQHandler+0xba>
 80083ea:	3214      	adds	r2, #20
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d024      	beq.n	800843a <HAL_DMA_IRQHandler+0xbe>
 80083f0:	3214      	adds	r2, #20
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d002      	beq.n	80083fc <HAL_DMA_IRQHandler+0x80>
 80083f6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80083fa:	e003      	b.n	8008404 <HAL_DMA_IRQHandler+0x88>
 80083fc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008400:	e000      	b.n	8008404 <HAL_DMA_IRQHandler+0x88>
 8008402:	2204      	movs	r2, #4
 8008404:	4b85      	ldr	r3, [pc, #532]	@ (800861c <HAL_DMA_IRQHandler+0x2a0>)
 8008406:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8008408:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800840a:	b103      	cbz	r3, 800840e <HAL_DMA_IRQHandler+0x92>
      hdma->XferHalfCpltCallback(hdma);
 800840c:	4798      	blx	r3
}
 800840e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008410:	2240      	movs	r2, #64	@ 0x40
 8008412:	e7f7      	b.n	8008404 <HAL_DMA_IRQHandler+0x88>
 8008414:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008418:	e7f4      	b.n	8008404 <HAL_DMA_IRQHandler+0x88>
 800841a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800841e:	e7f1      	b.n	8008404 <HAL_DMA_IRQHandler+0x88>
 8008420:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008424:	e7ee      	b.n	8008404 <HAL_DMA_IRQHandler+0x88>
 8008426:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800842a:	e7eb      	b.n	8008404 <HAL_DMA_IRQHandler+0x88>
 800842c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8008430:	e7e8      	b.n	8008404 <HAL_DMA_IRQHandler+0x88>
 8008432:	2204      	movs	r2, #4
 8008434:	e7e6      	b.n	8008404 <HAL_DMA_IRQHandler+0x88>
 8008436:	2240      	movs	r2, #64	@ 0x40
 8008438:	e7e4      	b.n	8008404 <HAL_DMA_IRQHandler+0x88>
 800843a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800843e:	e7e1      	b.n	8008404 <HAL_DMA_IRQHandler+0x88>
 8008440:	4a77      	ldr	r2, [pc, #476]	@ (8008620 <HAL_DMA_IRQHandler+0x2a4>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d024      	beq.n	8008490 <HAL_DMA_IRQHandler+0x114>
 8008446:	3214      	adds	r2, #20
 8008448:	4293      	cmp	r3, r2
 800844a:	d025      	beq.n	8008498 <HAL_DMA_IRQHandler+0x11c>
 800844c:	3214      	adds	r2, #20
 800844e:	4293      	cmp	r3, r2
 8008450:	d024      	beq.n	800849c <HAL_DMA_IRQHandler+0x120>
 8008452:	3214      	adds	r2, #20
 8008454:	4293      	cmp	r3, r2
 8008456:	d024      	beq.n	80084a2 <HAL_DMA_IRQHandler+0x126>
 8008458:	3214      	adds	r2, #20
 800845a:	4293      	cmp	r3, r2
 800845c:	d024      	beq.n	80084a8 <HAL_DMA_IRQHandler+0x12c>
 800845e:	3214      	adds	r2, #20
 8008460:	4293      	cmp	r3, r2
 8008462:	d024      	beq.n	80084ae <HAL_DMA_IRQHandler+0x132>
 8008464:	3214      	adds	r2, #20
 8008466:	4293      	cmp	r3, r2
 8008468:	d024      	beq.n	80084b4 <HAL_DMA_IRQHandler+0x138>
 800846a:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 800846e:	4293      	cmp	r3, r2
 8008470:	d023      	beq.n	80084ba <HAL_DMA_IRQHandler+0x13e>
 8008472:	3214      	adds	r2, #20
 8008474:	4293      	cmp	r3, r2
 8008476:	d022      	beq.n	80084be <HAL_DMA_IRQHandler+0x142>
 8008478:	3214      	adds	r2, #20
 800847a:	4293      	cmp	r3, r2
 800847c:	d021      	beq.n	80084c2 <HAL_DMA_IRQHandler+0x146>
 800847e:	3214      	adds	r2, #20
 8008480:	4293      	cmp	r3, r2
 8008482:	d002      	beq.n	800848a <HAL_DMA_IRQHandler+0x10e>
 8008484:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008488:	e003      	b.n	8008492 <HAL_DMA_IRQHandler+0x116>
 800848a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800848e:	e000      	b.n	8008492 <HAL_DMA_IRQHandler+0x116>
 8008490:	2204      	movs	r2, #4
 8008492:	4b64      	ldr	r3, [pc, #400]	@ (8008624 <HAL_DMA_IRQHandler+0x2a8>)
 8008494:	605a      	str	r2, [r3, #4]
 8008496:	e7b7      	b.n	8008408 <HAL_DMA_IRQHandler+0x8c>
 8008498:	2240      	movs	r2, #64	@ 0x40
 800849a:	e7fa      	b.n	8008492 <HAL_DMA_IRQHandler+0x116>
 800849c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80084a0:	e7f7      	b.n	8008492 <HAL_DMA_IRQHandler+0x116>
 80084a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80084a6:	e7f4      	b.n	8008492 <HAL_DMA_IRQHandler+0x116>
 80084a8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80084ac:	e7f1      	b.n	8008492 <HAL_DMA_IRQHandler+0x116>
 80084ae:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80084b2:	e7ee      	b.n	8008492 <HAL_DMA_IRQHandler+0x116>
 80084b4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80084b8:	e7eb      	b.n	8008492 <HAL_DMA_IRQHandler+0x116>
 80084ba:	2204      	movs	r2, #4
 80084bc:	e7e9      	b.n	8008492 <HAL_DMA_IRQHandler+0x116>
 80084be:	2240      	movs	r2, #64	@ 0x40
 80084c0:	e7e7      	b.n	8008492 <HAL_DMA_IRQHandler+0x116>
 80084c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80084c6:	e7e4      	b.n	8008492 <HAL_DMA_IRQHandler+0x116>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80084c8:	2302      	movs	r3, #2
 80084ca:	408b      	lsls	r3, r1
 80084cc:	4213      	tst	r3, r2
 80084ce:	f000 80ab 	beq.w	8008628 <HAL_DMA_IRQHandler+0x2ac>
 80084d2:	f015 0f02 	tst.w	r5, #2
 80084d6:	f000 80a7 	beq.w	8008628 <HAL_DMA_IRQHandler+0x2ac>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	f013 0f20 	tst.w	r3, #32
 80084e0:	d106      	bne.n	80084f0 <HAL_DMA_IRQHandler+0x174>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	f023 030a 	bic.w	r3, r3, #10
 80084e8:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80084ea:	2301      	movs	r3, #1
 80084ec:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80084f0:	6803      	ldr	r3, [r0, #0]
 80084f2:	4a49      	ldr	r2, [pc, #292]	@ (8008618 <HAL_DMA_IRQHandler+0x29c>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d94b      	bls.n	8008590 <HAL_DMA_IRQHandler+0x214>
 80084f8:	3a78      	subs	r2, #120	@ 0x78
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d024      	beq.n	8008548 <HAL_DMA_IRQHandler+0x1cc>
 80084fe:	3214      	adds	r2, #20
 8008500:	4293      	cmp	r3, r2
 8008502:	d02d      	beq.n	8008560 <HAL_DMA_IRQHandler+0x1e4>
 8008504:	3214      	adds	r2, #20
 8008506:	4293      	cmp	r3, r2
 8008508:	d02c      	beq.n	8008564 <HAL_DMA_IRQHandler+0x1e8>
 800850a:	3214      	adds	r2, #20
 800850c:	4293      	cmp	r3, r2
 800850e:	d02c      	beq.n	800856a <HAL_DMA_IRQHandler+0x1ee>
 8008510:	3214      	adds	r2, #20
 8008512:	4293      	cmp	r3, r2
 8008514:	d02c      	beq.n	8008570 <HAL_DMA_IRQHandler+0x1f4>
 8008516:	3214      	adds	r2, #20
 8008518:	4293      	cmp	r3, r2
 800851a:	d02c      	beq.n	8008576 <HAL_DMA_IRQHandler+0x1fa>
 800851c:	3214      	adds	r2, #20
 800851e:	4293      	cmp	r3, r2
 8008520:	d02c      	beq.n	800857c <HAL_DMA_IRQHandler+0x200>
 8008522:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8008526:	4293      	cmp	r3, r2
 8008528:	d02b      	beq.n	8008582 <HAL_DMA_IRQHandler+0x206>
 800852a:	3214      	adds	r2, #20
 800852c:	4293      	cmp	r3, r2
 800852e:	d02a      	beq.n	8008586 <HAL_DMA_IRQHandler+0x20a>
 8008530:	3214      	adds	r2, #20
 8008532:	4293      	cmp	r3, r2
 8008534:	d029      	beq.n	800858a <HAL_DMA_IRQHandler+0x20e>
 8008536:	3214      	adds	r2, #20
 8008538:	4293      	cmp	r3, r2
 800853a:	d002      	beq.n	8008542 <HAL_DMA_IRQHandler+0x1c6>
 800853c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008540:	e003      	b.n	800854a <HAL_DMA_IRQHandler+0x1ce>
 8008542:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008546:	e000      	b.n	800854a <HAL_DMA_IRQHandler+0x1ce>
 8008548:	2202      	movs	r2, #2
 800854a:	4b34      	ldr	r3, [pc, #208]	@ (800861c <HAL_DMA_IRQHandler+0x2a0>)
 800854c:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 800854e:	2300      	movs	r3, #0
 8008550:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8008554:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008556:	2b00      	cmp	r3, #0
 8008558:	f43f af59 	beq.w	800840e <HAL_DMA_IRQHandler+0x92>
      hdma->XferCpltCallback(hdma);
 800855c:	4798      	blx	r3
 800855e:	e756      	b.n	800840e <HAL_DMA_IRQHandler+0x92>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008560:	2220      	movs	r2, #32
 8008562:	e7f2      	b.n	800854a <HAL_DMA_IRQHandler+0x1ce>
 8008564:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008568:	e7ef      	b.n	800854a <HAL_DMA_IRQHandler+0x1ce>
 800856a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800856e:	e7ec      	b.n	800854a <HAL_DMA_IRQHandler+0x1ce>
 8008570:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008574:	e7e9      	b.n	800854a <HAL_DMA_IRQHandler+0x1ce>
 8008576:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800857a:	e7e6      	b.n	800854a <HAL_DMA_IRQHandler+0x1ce>
 800857c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8008580:	e7e3      	b.n	800854a <HAL_DMA_IRQHandler+0x1ce>
 8008582:	2202      	movs	r2, #2
 8008584:	e7e1      	b.n	800854a <HAL_DMA_IRQHandler+0x1ce>
 8008586:	2220      	movs	r2, #32
 8008588:	e7df      	b.n	800854a <HAL_DMA_IRQHandler+0x1ce>
 800858a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800858e:	e7dc      	b.n	800854a <HAL_DMA_IRQHandler+0x1ce>
 8008590:	4a23      	ldr	r2, [pc, #140]	@ (8008620 <HAL_DMA_IRQHandler+0x2a4>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d024      	beq.n	80085e0 <HAL_DMA_IRQHandler+0x264>
 8008596:	3214      	adds	r2, #20
 8008598:	4293      	cmp	r3, r2
 800859a:	d025      	beq.n	80085e8 <HAL_DMA_IRQHandler+0x26c>
 800859c:	3214      	adds	r2, #20
 800859e:	4293      	cmp	r3, r2
 80085a0:	d024      	beq.n	80085ec <HAL_DMA_IRQHandler+0x270>
 80085a2:	3214      	adds	r2, #20
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d024      	beq.n	80085f2 <HAL_DMA_IRQHandler+0x276>
 80085a8:	3214      	adds	r2, #20
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d024      	beq.n	80085f8 <HAL_DMA_IRQHandler+0x27c>
 80085ae:	3214      	adds	r2, #20
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d024      	beq.n	80085fe <HAL_DMA_IRQHandler+0x282>
 80085b4:	3214      	adds	r2, #20
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d024      	beq.n	8008604 <HAL_DMA_IRQHandler+0x288>
 80085ba:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 80085be:	4293      	cmp	r3, r2
 80085c0:	d023      	beq.n	800860a <HAL_DMA_IRQHandler+0x28e>
 80085c2:	3214      	adds	r2, #20
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d022      	beq.n	800860e <HAL_DMA_IRQHandler+0x292>
 80085c8:	3214      	adds	r2, #20
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d021      	beq.n	8008612 <HAL_DMA_IRQHandler+0x296>
 80085ce:	3214      	adds	r2, #20
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d002      	beq.n	80085da <HAL_DMA_IRQHandler+0x25e>
 80085d4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80085d8:	e003      	b.n	80085e2 <HAL_DMA_IRQHandler+0x266>
 80085da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80085de:	e000      	b.n	80085e2 <HAL_DMA_IRQHandler+0x266>
 80085e0:	2202      	movs	r2, #2
 80085e2:	4b10      	ldr	r3, [pc, #64]	@ (8008624 <HAL_DMA_IRQHandler+0x2a8>)
 80085e4:	605a      	str	r2, [r3, #4]
 80085e6:	e7b2      	b.n	800854e <HAL_DMA_IRQHandler+0x1d2>
 80085e8:	2220      	movs	r2, #32
 80085ea:	e7fa      	b.n	80085e2 <HAL_DMA_IRQHandler+0x266>
 80085ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085f0:	e7f7      	b.n	80085e2 <HAL_DMA_IRQHandler+0x266>
 80085f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80085f6:	e7f4      	b.n	80085e2 <HAL_DMA_IRQHandler+0x266>
 80085f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80085fc:	e7f1      	b.n	80085e2 <HAL_DMA_IRQHandler+0x266>
 80085fe:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8008602:	e7ee      	b.n	80085e2 <HAL_DMA_IRQHandler+0x266>
 8008604:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8008608:	e7eb      	b.n	80085e2 <HAL_DMA_IRQHandler+0x266>
 800860a:	2202      	movs	r2, #2
 800860c:	e7e9      	b.n	80085e2 <HAL_DMA_IRQHandler+0x266>
 800860e:	2220      	movs	r2, #32
 8008610:	e7e7      	b.n	80085e2 <HAL_DMA_IRQHandler+0x266>
 8008612:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008616:	e7e4      	b.n	80085e2 <HAL_DMA_IRQHandler+0x266>
 8008618:	40020080 	.word	0x40020080
 800861c:	40020400 	.word	0x40020400
 8008620:	40020008 	.word	0x40020008
 8008624:	40020000 	.word	0x40020000
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008628:	2308      	movs	r3, #8
 800862a:	408b      	lsls	r3, r1
 800862c:	4213      	tst	r3, r2
 800862e:	f43f aeee 	beq.w	800840e <HAL_DMA_IRQHandler+0x92>
 8008632:	f015 0f08 	tst.w	r5, #8
 8008636:	f43f aeea 	beq.w	800840e <HAL_DMA_IRQHandler+0x92>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	f023 030e 	bic.w	r3, r3, #14
 8008640:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008642:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8008644:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8008646:	2301      	movs	r3, #1
 8008648:	fa03 f202 	lsl.w	r2, r3, r2
 800864c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800864e:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8008650:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8008654:	2300      	movs	r3, #0
 8008656:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800865a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800865c:	2b00      	cmp	r3, #0
 800865e:	f43f aed6 	beq.w	800840e <HAL_DMA_IRQHandler+0x92>
      hdma->XferErrorCallback(hdma);
 8008662:	4798      	blx	r3
  return;
 8008664:	e6d3      	b.n	800840e <HAL_DMA_IRQHandler+0x92>
 8008666:	bf00      	nop

08008668 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008668:	b570      	push	{r4, r5, r6, lr}
 800866a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800866c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800866e:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008670:	e0a1      	b.n	80087b6 <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008672:	4d7e      	ldr	r5, [pc, #504]	@ (800886c <HAL_GPIO_Init+0x204>)
 8008674:	42ab      	cmp	r3, r5
 8008676:	d014      	beq.n	80086a2 <HAL_GPIO_Init+0x3a>
 8008678:	d80c      	bhi.n	8008694 <HAL_GPIO_Init+0x2c>
 800867a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800867e:	42ab      	cmp	r3, r5
 8008680:	d00f      	beq.n	80086a2 <HAL_GPIO_Init+0x3a>
 8008682:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 8008686:	42ab      	cmp	r3, r5
 8008688:	d00b      	beq.n	80086a2 <HAL_GPIO_Init+0x3a>
 800868a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800868e:	42ab      	cmp	r3, r5
 8008690:	d110      	bne.n	80086b4 <HAL_GPIO_Init+0x4c>
 8008692:	e006      	b.n	80086a2 <HAL_GPIO_Init+0x3a>
 8008694:	4d76      	ldr	r5, [pc, #472]	@ (8008870 <HAL_GPIO_Init+0x208>)
 8008696:	42ab      	cmp	r3, r5
 8008698:	d003      	beq.n	80086a2 <HAL_GPIO_Init+0x3a>
 800869a:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 800869e:	42ab      	cmp	r3, r5
 80086a0:	d108      	bne.n	80086b4 <HAL_GPIO_Init+0x4c>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80086a2:	688b      	ldr	r3, [r1, #8]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d050      	beq.n	800874a <HAL_GPIO_Init+0xe2>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d049      	beq.n	8008740 <HAL_GPIO_Init+0xd8>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80086ac:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80086ae:	2408      	movs	r4, #8
 80086b0:	e000      	b.n	80086b4 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80086b2:	68cc      	ldr	r4, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80086b4:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80086b8:	d849      	bhi.n	800874e <HAL_GPIO_Init+0xe6>
 80086ba:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80086bc:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80086c0:	6833      	ldr	r3, [r6, #0]
 80086c2:	250f      	movs	r5, #15
 80086c4:	4095      	lsls	r5, r2
 80086c6:	ea23 0305 	bic.w	r3, r3, r5
 80086ca:	fa04 f202 	lsl.w	r2, r4, r2
 80086ce:	4313      	orrs	r3, r2
 80086d0:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80086d2:	684b      	ldr	r3, [r1, #4]
 80086d4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80086d8:	d06b      	beq.n	80087b2 <HAL_GPIO_Init+0x14a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80086da:	4b66      	ldr	r3, [pc, #408]	@ (8008874 <HAL_GPIO_Init+0x20c>)
 80086dc:	699a      	ldr	r2, [r3, #24]
 80086de:	f042 0201 	orr.w	r2, r2, #1
 80086e2:	619a      	str	r2, [r3, #24]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	9301      	str	r3, [sp, #4]
 80086ec:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80086ee:	ea4f 029c 	mov.w	r2, ip, lsr #2
 80086f2:	1c95      	adds	r5, r2, #2
 80086f4:	4b60      	ldr	r3, [pc, #384]	@ (8008878 <HAL_GPIO_Init+0x210>)
 80086f6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80086fa:	f00c 0503 	and.w	r5, ip, #3
 80086fe:	00ad      	lsls	r5, r5, #2
 8008700:	230f      	movs	r3, #15
 8008702:	40ab      	lsls	r3, r5
 8008704:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008708:	4b5c      	ldr	r3, [pc, #368]	@ (800887c <HAL_GPIO_Init+0x214>)
 800870a:	4298      	cmp	r0, r3
 800870c:	d026      	beq.n	800875c <HAL_GPIO_Init+0xf4>
 800870e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008712:	4298      	cmp	r0, r3
 8008714:	f000 808c 	beq.w	8008830 <HAL_GPIO_Init+0x1c8>
 8008718:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800871c:	4298      	cmp	r0, r3
 800871e:	f000 8089 	beq.w	8008834 <HAL_GPIO_Init+0x1cc>
 8008722:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008726:	4298      	cmp	r0, r3
 8008728:	d016      	beq.n	8008758 <HAL_GPIO_Init+0xf0>
 800872a:	2304      	movs	r3, #4
 800872c:	e017      	b.n	800875e <HAL_GPIO_Init+0xf6>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800872e:	68cc      	ldr	r4, [r1, #12]
 8008730:	3404      	adds	r4, #4
          break;
 8008732:	e7bf      	b.n	80086b4 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008734:	68cc      	ldr	r4, [r1, #12]
 8008736:	3408      	adds	r4, #8
          break;
 8008738:	e7bc      	b.n	80086b4 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800873a:	68cc      	ldr	r4, [r1, #12]
 800873c:	340c      	adds	r4, #12
          break;
 800873e:	e7b9      	b.n	80086b4 <HAL_GPIO_Init+0x4c>
            GPIOx->BSRR = ioposition;
 8008740:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008742:	2408      	movs	r4, #8
 8008744:	e7b6      	b.n	80086b4 <HAL_GPIO_Init+0x4c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008746:	2400      	movs	r4, #0
 8008748:	e7b4      	b.n	80086b4 <HAL_GPIO_Init+0x4c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800874a:	2404      	movs	r4, #4
 800874c:	e7b2      	b.n	80086b4 <HAL_GPIO_Init+0x4c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800874e:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008750:	f1ac 0208 	sub.w	r2, ip, #8
 8008754:	0092      	lsls	r2, r2, #2
 8008756:	e7b3      	b.n	80086c0 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008758:	2303      	movs	r3, #3
 800875a:	e000      	b.n	800875e <HAL_GPIO_Init+0xf6>
 800875c:	2300      	movs	r3, #0
 800875e:	40ab      	lsls	r3, r5
 8008760:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8008762:	3202      	adds	r2, #2
 8008764:	4d44      	ldr	r5, [pc, #272]	@ (8008878 <HAL_GPIO_Init+0x210>)
 8008766:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800876a:	684b      	ldr	r3, [r1, #4]
 800876c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008770:	d062      	beq.n	8008838 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008772:	4a43      	ldr	r2, [pc, #268]	@ (8008880 <HAL_GPIO_Init+0x218>)
 8008774:	6893      	ldr	r3, [r2, #8]
 8008776:	ea43 030e 	orr.w	r3, r3, lr
 800877a:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800877c:	684b      	ldr	r3, [r1, #4]
 800877e:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8008782:	d05f      	beq.n	8008844 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008784:	4a3e      	ldr	r2, [pc, #248]	@ (8008880 <HAL_GPIO_Init+0x218>)
 8008786:	68d3      	ldr	r3, [r2, #12]
 8008788:	ea43 030e 	orr.w	r3, r3, lr
 800878c:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800878e:	684b      	ldr	r3, [r1, #4]
 8008790:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8008794:	d05c      	beq.n	8008850 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008796:	4a3a      	ldr	r2, [pc, #232]	@ (8008880 <HAL_GPIO_Init+0x218>)
 8008798:	6853      	ldr	r3, [r2, #4]
 800879a:	ea43 030e 	orr.w	r3, r3, lr
 800879e:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80087a0:	684b      	ldr	r3, [r1, #4]
 80087a2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80087a6:	d059      	beq.n	800885c <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80087a8:	4a35      	ldr	r2, [pc, #212]	@ (8008880 <HAL_GPIO_Init+0x218>)
 80087aa:	6813      	ldr	r3, [r2, #0]
 80087ac:	ea43 030e 	orr.w	r3, r3, lr
 80087b0:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 80087b2:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80087b6:	680b      	ldr	r3, [r1, #0]
 80087b8:	fa33 f20c 	lsrs.w	r2, r3, ip
 80087bc:	d054      	beq.n	8008868 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 80087be:	2201      	movs	r2, #1
 80087c0:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80087c4:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 80087c8:	ea32 0303 	bics.w	r3, r2, r3
 80087cc:	d1f1      	bne.n	80087b2 <HAL_GPIO_Init+0x14a>
      switch (GPIO_Init->Mode)
 80087ce:	684b      	ldr	r3, [r1, #4]
 80087d0:	2b12      	cmp	r3, #18
 80087d2:	f63f af4e 	bhi.w	8008672 <HAL_GPIO_Init+0xa>
 80087d6:	2b12      	cmp	r3, #18
 80087d8:	f63f af6c 	bhi.w	80086b4 <HAL_GPIO_Init+0x4c>
 80087dc:	a501      	add	r5, pc, #4	@ (adr r5, 80087e4 <HAL_GPIO_Init+0x17c>)
 80087de:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 80087e2:	bf00      	nop
 80087e4:	080086a3 	.word	0x080086a3
 80087e8:	080086b3 	.word	0x080086b3
 80087ec:	08008735 	.word	0x08008735
 80087f0:	08008747 	.word	0x08008747
 80087f4:	080086b5 	.word	0x080086b5
 80087f8:	080086b5 	.word	0x080086b5
 80087fc:	080086b5 	.word	0x080086b5
 8008800:	080086b5 	.word	0x080086b5
 8008804:	080086b5 	.word	0x080086b5
 8008808:	080086b5 	.word	0x080086b5
 800880c:	080086b5 	.word	0x080086b5
 8008810:	080086b5 	.word	0x080086b5
 8008814:	080086b5 	.word	0x080086b5
 8008818:	080086b5 	.word	0x080086b5
 800881c:	080086b5 	.word	0x080086b5
 8008820:	080086b5 	.word	0x080086b5
 8008824:	080086b5 	.word	0x080086b5
 8008828:	0800872f 	.word	0x0800872f
 800882c:	0800873b 	.word	0x0800873b
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008830:	2301      	movs	r3, #1
 8008832:	e794      	b.n	800875e <HAL_GPIO_Init+0xf6>
 8008834:	2302      	movs	r3, #2
 8008836:	e792      	b.n	800875e <HAL_GPIO_Init+0xf6>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008838:	4a11      	ldr	r2, [pc, #68]	@ (8008880 <HAL_GPIO_Init+0x218>)
 800883a:	6893      	ldr	r3, [r2, #8]
 800883c:	ea23 030e 	bic.w	r3, r3, lr
 8008840:	6093      	str	r3, [r2, #8]
 8008842:	e79b      	b.n	800877c <HAL_GPIO_Init+0x114>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008844:	4a0e      	ldr	r2, [pc, #56]	@ (8008880 <HAL_GPIO_Init+0x218>)
 8008846:	68d3      	ldr	r3, [r2, #12]
 8008848:	ea23 030e 	bic.w	r3, r3, lr
 800884c:	60d3      	str	r3, [r2, #12]
 800884e:	e79e      	b.n	800878e <HAL_GPIO_Init+0x126>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008850:	4a0b      	ldr	r2, [pc, #44]	@ (8008880 <HAL_GPIO_Init+0x218>)
 8008852:	6853      	ldr	r3, [r2, #4]
 8008854:	ea23 030e 	bic.w	r3, r3, lr
 8008858:	6053      	str	r3, [r2, #4]
 800885a:	e7a1      	b.n	80087a0 <HAL_GPIO_Init+0x138>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800885c:	4a08      	ldr	r2, [pc, #32]	@ (8008880 <HAL_GPIO_Init+0x218>)
 800885e:	6813      	ldr	r3, [r2, #0]
 8008860:	ea23 030e 	bic.w	r3, r3, lr
 8008864:	6013      	str	r3, [r2, #0]
 8008866:	e7a4      	b.n	80087b2 <HAL_GPIO_Init+0x14a>
  }
}
 8008868:	b002      	add	sp, #8
 800886a:	bd70      	pop	{r4, r5, r6, pc}
 800886c:	10220000 	.word	0x10220000
 8008870:	10310000 	.word	0x10310000
 8008874:	40021000 	.word	0x40021000
 8008878:	40010000 	.word	0x40010000
 800887c:	40010800 	.word	0x40010800
 8008880:	40010400 	.word	0x40010400

08008884 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008884:	b10a      	cbz	r2, 800888a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008886:	6101      	str	r1, [r0, #16]
 8008888:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800888a:	0409      	lsls	r1, r1, #16
 800888c:	6101      	str	r1, [r0, #16]
  }
}
 800888e:	4770      	bx	lr

08008890 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008890:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008892:	4b08      	ldr	r3, [pc, #32]	@ (80088b4 <RCC_Delay+0x24>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a08      	ldr	r2, [pc, #32]	@ (80088b8 <RCC_Delay+0x28>)
 8008898:	fba2 2303 	umull	r2, r3, r2, r3
 800889c:	0a5b      	lsrs	r3, r3, #9
 800889e:	fb00 f303 	mul.w	r3, r0, r3
 80088a2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80088a4:	bf00      	nop
  }
  while (Delay --);
 80088a6:	9b01      	ldr	r3, [sp, #4]
 80088a8:	1e5a      	subs	r2, r3, #1
 80088aa:	9201      	str	r2, [sp, #4]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1f9      	bne.n	80088a4 <RCC_Delay+0x14>
}
 80088b0:	b002      	add	sp, #8
 80088b2:	4770      	bx	lr
 80088b4:	200005ac 	.word	0x200005ac
 80088b8:	10624dd3 	.word	0x10624dd3

080088bc <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80088bc:	2800      	cmp	r0, #0
 80088be:	f000 8261 	beq.w	8008d84 <HAL_RCC_OscConfig+0x4c8>
{
 80088c2:	b570      	push	{r4, r5, r6, lr}
 80088c4:	b082      	sub	sp, #8
 80088c6:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088c8:	6803      	ldr	r3, [r0, #0]
 80088ca:	f013 0f01 	tst.w	r3, #1
 80088ce:	d02c      	beq.n	800892a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80088d0:	4b99      	ldr	r3, [pc, #612]	@ (8008b38 <HAL_RCC_OscConfig+0x27c>)
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f003 030c 	and.w	r3, r3, #12
 80088d8:	2b04      	cmp	r3, #4
 80088da:	d01d      	beq.n	8008918 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80088dc:	4b96      	ldr	r3, [pc, #600]	@ (8008b38 <HAL_RCC_OscConfig+0x27c>)
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	f003 030c 	and.w	r3, r3, #12
 80088e4:	2b08      	cmp	r3, #8
 80088e6:	d012      	beq.n	800890e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088e8:	68a3      	ldr	r3, [r4, #8]
 80088ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088ee:	d041      	beq.n	8008974 <HAL_RCC_OscConfig+0xb8>
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d155      	bne.n	80089a0 <HAL_RCC_OscConfig+0xe4>
 80088f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80088f8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800890a:	601a      	str	r2, [r3, #0]
 800890c:	e037      	b.n	800897e <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800890e:	4b8a      	ldr	r3, [pc, #552]	@ (8008b38 <HAL_RCC_OscConfig+0x27c>)
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8008916:	d0e7      	beq.n	80088e8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008918:	4b87      	ldr	r3, [pc, #540]	@ (8008b38 <HAL_RCC_OscConfig+0x27c>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8008920:	d003      	beq.n	800892a <HAL_RCC_OscConfig+0x6e>
 8008922:	68a3      	ldr	r3, [r4, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	f000 822f 	beq.w	8008d88 <HAL_RCC_OscConfig+0x4cc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800892a:	6823      	ldr	r3, [r4, #0]
 800892c:	f013 0f02 	tst.w	r3, #2
 8008930:	d075      	beq.n	8008a1e <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008932:	4b81      	ldr	r3, [pc, #516]	@ (8008b38 <HAL_RCC_OscConfig+0x27c>)
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	f013 0f0c 	tst.w	r3, #12
 800893a:	d05f      	beq.n	80089fc <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800893c:	4b7e      	ldr	r3, [pc, #504]	@ (8008b38 <HAL_RCC_OscConfig+0x27c>)
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	f003 030c 	and.w	r3, r3, #12
 8008944:	2b08      	cmp	r3, #8
 8008946:	d054      	beq.n	80089f2 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008948:	6963      	ldr	r3, [r4, #20]
 800894a:	2b00      	cmp	r3, #0
 800894c:	f000 808a 	beq.w	8008a64 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8008950:	4b7a      	ldr	r3, [pc, #488]	@ (8008b3c <HAL_RCC_OscConfig+0x280>)
 8008952:	2201      	movs	r2, #1
 8008954:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008956:	f7fe fd17 	bl	8007388 <HAL_GetTick>
 800895a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800895c:	4b76      	ldr	r3, [pc, #472]	@ (8008b38 <HAL_RCC_OscConfig+0x27c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f013 0f02 	tst.w	r3, #2
 8008964:	d175      	bne.n	8008a52 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008966:	f7fe fd0f 	bl	8007388 <HAL_GetTick>
 800896a:	1b40      	subs	r0, r0, r5
 800896c:	2802      	cmp	r0, #2
 800896e:	d9f5      	bls.n	800895c <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8008970:	2003      	movs	r0, #3
 8008972:	e210      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008974:	4a70      	ldr	r2, [pc, #448]	@ (8008b38 <HAL_RCC_OscConfig+0x27c>)
 8008976:	6813      	ldr	r3, [r2, #0]
 8008978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800897c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800897e:	68a3      	ldr	r3, [r4, #8]
 8008980:	b343      	cbz	r3, 80089d4 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8008982:	f7fe fd01 	bl	8007388 <HAL_GetTick>
 8008986:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008988:	4b6b      	ldr	r3, [pc, #428]	@ (8008b38 <HAL_RCC_OscConfig+0x27c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8008990:	d1cb      	bne.n	800892a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008992:	f7fe fcf9 	bl	8007388 <HAL_GetTick>
 8008996:	1b40      	subs	r0, r0, r5
 8008998:	2864      	cmp	r0, #100	@ 0x64
 800899a:	d9f5      	bls.n	8008988 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 800899c:	2003      	movs	r0, #3
 800899e:	e1fa      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80089a4:	d009      	beq.n	80089ba <HAL_RCC_OscConfig+0xfe>
 80089a6:	4b64      	ldr	r3, [pc, #400]	@ (8008b38 <HAL_RCC_OscConfig+0x27c>)
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80089ae:	601a      	str	r2, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80089b6:	601a      	str	r2, [r3, #0]
 80089b8:	e7e1      	b.n	800897e <HAL_RCC_OscConfig+0xc2>
 80089ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80089be:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80089c8:	601a      	str	r2, [r3, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80089d0:	601a      	str	r2, [r3, #0]
 80089d2:	e7d4      	b.n	800897e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80089d4:	f7fe fcd8 	bl	8007388 <HAL_GetTick>
 80089d8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089da:	4b57      	ldr	r3, [pc, #348]	@ (8008b38 <HAL_RCC_OscConfig+0x27c>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80089e2:	d0a2      	beq.n	800892a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089e4:	f7fe fcd0 	bl	8007388 <HAL_GetTick>
 80089e8:	1b40      	subs	r0, r0, r5
 80089ea:	2864      	cmp	r0, #100	@ 0x64
 80089ec:	d9f5      	bls.n	80089da <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80089ee:	2003      	movs	r0, #3
 80089f0:	e1d1      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80089f2:	4b51      	ldr	r3, [pc, #324]	@ (8008b38 <HAL_RCC_OscConfig+0x27c>)
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80089fa:	d1a5      	bne.n	8008948 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089fc:	4b4e      	ldr	r3, [pc, #312]	@ (8008b38 <HAL_RCC_OscConfig+0x27c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f013 0f02 	tst.w	r3, #2
 8008a04:	d003      	beq.n	8008a0e <HAL_RCC_OscConfig+0x152>
 8008a06:	6963      	ldr	r3, [r4, #20]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	f040 81bf 	bne.w	8008d8c <HAL_RCC_OscConfig+0x4d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a0e:	4a4a      	ldr	r2, [pc, #296]	@ (8008b38 <HAL_RCC_OscConfig+0x27c>)
 8008a10:	6813      	ldr	r3, [r2, #0]
 8008a12:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008a16:	69a1      	ldr	r1, [r4, #24]
 8008a18:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008a1c:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	f013 0f08 	tst.w	r3, #8
 8008a24:	d033      	beq.n	8008a8e <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a26:	69e3      	ldr	r3, [r4, #28]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d05c      	beq.n	8008ae6 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8008a2c:	4b43      	ldr	r3, [pc, #268]	@ (8008b3c <HAL_RCC_OscConfig+0x280>)
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8008a34:	f7fe fca8 	bl	8007388 <HAL_GetTick>
 8008a38:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8008b38 <HAL_RCC_OscConfig+0x27c>)
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3e:	f013 0f02 	tst.w	r3, #2
 8008a42:	d121      	bne.n	8008a88 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a44:	f7fe fca0 	bl	8007388 <HAL_GetTick>
 8008a48:	1b40      	subs	r0, r0, r5
 8008a4a:	2802      	cmp	r0, #2
 8008a4c:	d9f5      	bls.n	8008a3a <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8008a4e:	2003      	movs	r0, #3
 8008a50:	e1a1      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a52:	4a39      	ldr	r2, [pc, #228]	@ (8008b38 <HAL_RCC_OscConfig+0x27c>)
 8008a54:	6813      	ldr	r3, [r2, #0]
 8008a56:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008a5a:	69a1      	ldr	r1, [r4, #24]
 8008a5c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008a60:	6013      	str	r3, [r2, #0]
 8008a62:	e7dc      	b.n	8008a1e <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8008a64:	4b35      	ldr	r3, [pc, #212]	@ (8008b3c <HAL_RCC_OscConfig+0x280>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008a6a:	f7fe fc8d 	bl	8007388 <HAL_GetTick>
 8008a6e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a70:	4b31      	ldr	r3, [pc, #196]	@ (8008b38 <HAL_RCC_OscConfig+0x27c>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f013 0f02 	tst.w	r3, #2
 8008a78:	d0d1      	beq.n	8008a1e <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a7a:	f7fe fc85 	bl	8007388 <HAL_GetTick>
 8008a7e:	1b40      	subs	r0, r0, r5
 8008a80:	2802      	cmp	r0, #2
 8008a82:	d9f5      	bls.n	8008a70 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8008a84:	2003      	movs	r0, #3
 8008a86:	e186      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
      RCC_Delay(1);
 8008a88:	2001      	movs	r0, #1
 8008a8a:	f7ff ff01 	bl	8008890 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	f013 0f04 	tst.w	r3, #4
 8008a94:	f000 8096 	beq.w	8008bc4 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a98:	4b27      	ldr	r3, [pc, #156]	@ (8008b38 <HAL_RCC_OscConfig+0x27c>)
 8008a9a:	69db      	ldr	r3, [r3, #28]
 8008a9c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8008aa0:	d134      	bne.n	8008b0c <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008aa2:	4b25      	ldr	r3, [pc, #148]	@ (8008b38 <HAL_RCC_OscConfig+0x27c>)
 8008aa4:	69da      	ldr	r2, [r3, #28]
 8008aa6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8008aaa:	61da      	str	r2, [r3, #28]
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ab2:	9301      	str	r3, [sp, #4]
 8008ab4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008ab6:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ab8:	4b21      	ldr	r3, [pc, #132]	@ (8008b40 <HAL_RCC_OscConfig+0x284>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8008ac0:	d026      	beq.n	8008b10 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ac2:	6923      	ldr	r3, [r4, #16]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d03d      	beq.n	8008b44 <HAL_RCC_OscConfig+0x288>
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d153      	bne.n	8008b74 <HAL_RCC_OscConfig+0x2b8>
 8008acc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008ad0:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8008ad4:	6a1a      	ldr	r2, [r3, #32]
 8008ad6:	f022 0201 	bic.w	r2, r2, #1
 8008ada:	621a      	str	r2, [r3, #32]
 8008adc:	6a1a      	ldr	r2, [r3, #32]
 8008ade:	f022 0204 	bic.w	r2, r2, #4
 8008ae2:	621a      	str	r2, [r3, #32]
 8008ae4:	e033      	b.n	8008b4e <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8008ae6:	4b15      	ldr	r3, [pc, #84]	@ (8008b3c <HAL_RCC_OscConfig+0x280>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8008aee:	f7fe fc4b 	bl	8007388 <HAL_GetTick>
 8008af2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008af4:	4b10      	ldr	r3, [pc, #64]	@ (8008b38 <HAL_RCC_OscConfig+0x27c>)
 8008af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af8:	f013 0f02 	tst.w	r3, #2
 8008afc:	d0c7      	beq.n	8008a8e <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008afe:	f7fe fc43 	bl	8007388 <HAL_GetTick>
 8008b02:	1b40      	subs	r0, r0, r5
 8008b04:	2802      	cmp	r0, #2
 8008b06:	d9f5      	bls.n	8008af4 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8008b08:	2003      	movs	r0, #3
 8008b0a:	e144      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
    FlagStatus       pwrclkchanged = RESET;
 8008b0c:	2500      	movs	r5, #0
 8008b0e:	e7d3      	b.n	8008ab8 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b10:	4a0b      	ldr	r2, [pc, #44]	@ (8008b40 <HAL_RCC_OscConfig+0x284>)
 8008b12:	6813      	ldr	r3, [r2, #0]
 8008b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b18:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8008b1a:	f7fe fc35 	bl	8007388 <HAL_GetTick>
 8008b1e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b20:	4b07      	ldr	r3, [pc, #28]	@ (8008b40 <HAL_RCC_OscConfig+0x284>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8008b28:	d1cb      	bne.n	8008ac2 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b2a:	f7fe fc2d 	bl	8007388 <HAL_GetTick>
 8008b2e:	1b80      	subs	r0, r0, r6
 8008b30:	2864      	cmp	r0, #100	@ 0x64
 8008b32:	d9f5      	bls.n	8008b20 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8008b34:	2003      	movs	r0, #3
 8008b36:	e12e      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
 8008b38:	40021000 	.word	0x40021000
 8008b3c:	42420000 	.word	0x42420000
 8008b40:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b44:	4a98      	ldr	r2, [pc, #608]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008b46:	6a13      	ldr	r3, [r2, #32]
 8008b48:	f043 0301 	orr.w	r3, r3, #1
 8008b4c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b4e:	6923      	ldr	r3, [r4, #16]
 8008b50:	b333      	cbz	r3, 8008ba0 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8008b52:	f7fe fc19 	bl	8007388 <HAL_GetTick>
 8008b56:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b58:	4b93      	ldr	r3, [pc, #588]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008b5a:	6a1b      	ldr	r3, [r3, #32]
 8008b5c:	f013 0f02 	tst.w	r3, #2
 8008b60:	d12f      	bne.n	8008bc2 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b62:	f7fe fc11 	bl	8007388 <HAL_GetTick>
 8008b66:	1b80      	subs	r0, r0, r6
 8008b68:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008b6c:	4298      	cmp	r0, r3
 8008b6e:	d9f3      	bls.n	8008b58 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8008b70:	2003      	movs	r0, #3
 8008b72:	e110      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b74:	2b05      	cmp	r3, #5
 8008b76:	d009      	beq.n	8008b8c <HAL_RCC_OscConfig+0x2d0>
 8008b78:	4b8b      	ldr	r3, [pc, #556]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008b7a:	6a1a      	ldr	r2, [r3, #32]
 8008b7c:	f022 0201 	bic.w	r2, r2, #1
 8008b80:	621a      	str	r2, [r3, #32]
 8008b82:	6a1a      	ldr	r2, [r3, #32]
 8008b84:	f022 0204 	bic.w	r2, r2, #4
 8008b88:	621a      	str	r2, [r3, #32]
 8008b8a:	e7e0      	b.n	8008b4e <HAL_RCC_OscConfig+0x292>
 8008b8c:	4b86      	ldr	r3, [pc, #536]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008b8e:	6a1a      	ldr	r2, [r3, #32]
 8008b90:	f042 0204 	orr.w	r2, r2, #4
 8008b94:	621a      	str	r2, [r3, #32]
 8008b96:	6a1a      	ldr	r2, [r3, #32]
 8008b98:	f042 0201 	orr.w	r2, r2, #1
 8008b9c:	621a      	str	r2, [r3, #32]
 8008b9e:	e7d6      	b.n	8008b4e <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8008ba0:	f7fe fbf2 	bl	8007388 <HAL_GetTick>
 8008ba4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ba6:	4b80      	ldr	r3, [pc, #512]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	f013 0f02 	tst.w	r3, #2
 8008bae:	d008      	beq.n	8008bc2 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bb0:	f7fe fbea 	bl	8007388 <HAL_GetTick>
 8008bb4:	1b80      	subs	r0, r0, r6
 8008bb6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008bba:	4298      	cmp	r0, r3
 8008bbc:	d9f3      	bls.n	8008ba6 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8008bbe:	2003      	movs	r0, #3
 8008bc0:	e0e9      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
    if (pwrclkchanged == SET)
 8008bc2:	bb75      	cbnz	r5, 8008c22 <HAL_RCC_OscConfig+0x366>
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8008bc4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d06e      	beq.n	8008ca8 <HAL_RCC_OscConfig+0x3ec>
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8008bca:	4a77      	ldr	r2, [pc, #476]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008bcc:	6852      	ldr	r2, [r2, #4]
 8008bce:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8008bd2:	d005      	beq.n	8008be0 <HAL_RCC_OscConfig+0x324>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8008bd4:	4a74      	ldr	r2, [pc, #464]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008bd6:	6852      	ldr	r2, [r2, #4]
 8008bd8:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8008bdc:	2a08      	cmp	r2, #8
 8008bde:	d026      	beq.n	8008c2e <HAL_RCC_OscConfig+0x372>
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d14a      	bne.n	8008c7a <HAL_RCC_OscConfig+0x3be>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8008be4:	4b70      	ldr	r3, [pc, #448]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8008bec:	d007      	beq.n	8008bfe <HAL_RCC_OscConfig+0x342>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8008bee:	4b6e      	ldr	r3, [pc, #440]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008bf6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	f040 80c9 	bne.w	8008d90 <HAL_RCC_OscConfig+0x4d4>
        __HAL_RCC_PLL2_DISABLE();
 8008bfe:	4b6b      	ldr	r3, [pc, #428]	@ (8008dac <HAL_RCC_OscConfig+0x4f0>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	669a      	str	r2, [r3, #104]	@ 0x68
        tickstart = HAL_GetTick();
 8008c04:	f7fe fbc0 	bl	8007388 <HAL_GetTick>
 8008c08:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8008c0a:	4b67      	ldr	r3, [pc, #412]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8008c12:	d013      	beq.n	8008c3c <HAL_RCC_OscConfig+0x380>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c14:	f7fe fbb8 	bl	8007388 <HAL_GetTick>
 8008c18:	1b40      	subs	r0, r0, r5
 8008c1a:	2864      	cmp	r0, #100	@ 0x64
 8008c1c:	d9f5      	bls.n	8008c0a <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8008c1e:	2003      	movs	r0, #3
 8008c20:	e0b9      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c22:	4a61      	ldr	r2, [pc, #388]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008c24:	69d3      	ldr	r3, [r2, #28]
 8008c26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c2a:	61d3      	str	r3, [r2, #28]
 8008c2c:	e7ca      	b.n	8008bc4 <HAL_RCC_OscConfig+0x308>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8008c2e:	4a5e      	ldr	r2, [pc, #376]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008c30:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8008c32:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8008c36:	d0d3      	beq.n	8008be0 <HAL_RCC_OscConfig+0x324>
      return HAL_ERROR;
 8008c38:	2001      	movs	r0, #1
 8008c3a:	e0ac      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8008c3c:	4a5a      	ldr	r2, [pc, #360]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008c3e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008c40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c46:	430b      	orrs	r3, r1
 8008c48:	62d3      	str	r3, [r2, #44]	@ 0x2c
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8008c4a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008c4c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008c50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008c52:	430b      	orrs	r3, r1
 8008c54:	62d3      	str	r3, [r2, #44]	@ 0x2c
        __HAL_RCC_PLL2_ENABLE();
 8008c56:	4b55      	ldr	r3, [pc, #340]	@ (8008dac <HAL_RCC_OscConfig+0x4f0>)
 8008c58:	2201      	movs	r2, #1
 8008c5a:	669a      	str	r2, [r3, #104]	@ 0x68
        tickstart = HAL_GetTick();
 8008c5c:	f7fe fb94 	bl	8007388 <HAL_GetTick>
 8008c60:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8008c62:	4b51      	ldr	r3, [pc, #324]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8008c6a:	d11d      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c6c:	f7fe fb8c 	bl	8007388 <HAL_GetTick>
 8008c70:	1b40      	subs	r0, r0, r5
 8008c72:	2864      	cmp	r0, #100	@ 0x64
 8008c74:	d9f5      	bls.n	8008c62 <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 8008c76:	2003      	movs	r0, #3
 8008c78:	e08d      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8008c7a:	4a4b      	ldr	r2, [pc, #300]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008c7c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c82:	62d3      	str	r3, [r2, #44]	@ 0x2c
        __HAL_RCC_PLL2_DISABLE();
 8008c84:	4b49      	ldr	r3, [pc, #292]	@ (8008dac <HAL_RCC_OscConfig+0x4f0>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	669a      	str	r2, [r3, #104]	@ 0x68
        tickstart = HAL_GetTick();
 8008c8a:	f7fe fb7d 	bl	8007388 <HAL_GetTick>
 8008c8e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8008c90:	4b45      	ldr	r3, [pc, #276]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8008c98:	d006      	beq.n	8008ca8 <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c9a:	f7fe fb75 	bl	8007388 <HAL_GetTick>
 8008c9e:	1b40      	subs	r0, r0, r5
 8008ca0:	2864      	cmp	r0, #100	@ 0x64
 8008ca2:	d9f5      	bls.n	8008c90 <HAL_RCC_OscConfig+0x3d4>
            return HAL_TIMEOUT;
 8008ca4:	2003      	movs	r0, #3
 8008ca6:	e076      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ca8:	6a23      	ldr	r3, [r4, #32]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d072      	beq.n	8008d94 <HAL_RCC_OscConfig+0x4d8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008cae:	4a3e      	ldr	r2, [pc, #248]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008cb0:	6852      	ldr	r2, [r2, #4]
 8008cb2:	f002 020c 	and.w	r2, r2, #12
 8008cb6:	2a08      	cmp	r2, #8
 8008cb8:	d054      	beq.n	8008d64 <HAL_RCC_OscConfig+0x4a8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d011      	beq.n	8008ce2 <HAL_RCC_OscConfig+0x426>
        __HAL_RCC_PLL_DISABLE();
 8008cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8008dac <HAL_RCC_OscConfig+0x4f0>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8008cc4:	f7fe fb60 	bl	8007388 <HAL_GetTick>
 8008cc8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008cca:	4b37      	ldr	r3, [pc, #220]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8008cd2:	d045      	beq.n	8008d60 <HAL_RCC_OscConfig+0x4a4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cd4:	f7fe fb58 	bl	8007388 <HAL_GetTick>
 8008cd8:	1b00      	subs	r0, r0, r4
 8008cda:	2802      	cmp	r0, #2
 8008cdc:	d9f5      	bls.n	8008cca <HAL_RCC_OscConfig+0x40e>
            return HAL_TIMEOUT;
 8008cde:	2003      	movs	r0, #3
 8008ce0:	e059      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_PLL_DISABLE();
 8008ce2:	4b32      	ldr	r3, [pc, #200]	@ (8008dac <HAL_RCC_OscConfig+0x4f0>)
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8008ce8:	f7fe fb4e 	bl	8007388 <HAL_GetTick>
 8008cec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008cee:	4b2e      	ldr	r3, [pc, #184]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8008cf6:	d006      	beq.n	8008d06 <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cf8:	f7fe fb46 	bl	8007388 <HAL_GetTick>
 8008cfc:	1b40      	subs	r0, r0, r5
 8008cfe:	2802      	cmp	r0, #2
 8008d00:	d9f5      	bls.n	8008cee <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 8008d02:	2003      	movs	r0, #3
 8008d04:	e047      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008d06:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d0c:	d01a      	beq.n	8008d44 <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d0e:	4926      	ldr	r1, [pc, #152]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008d10:	684b      	ldr	r3, [r1, #4]
 8008d12:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 8008d16:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008d18:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8008d1a:	4302      	orrs	r2, r0
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8008d20:	4b22      	ldr	r3, [pc, #136]	@ (8008dac <HAL_RCC_OscConfig+0x4f0>)
 8008d22:	2201      	movs	r2, #1
 8008d24:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8008d26:	f7fe fb2f 	bl	8007388 <HAL_GetTick>
 8008d2a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8008d34:	d112      	bne.n	8008d5c <HAL_RCC_OscConfig+0x4a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d36:	f7fe fb27 	bl	8007388 <HAL_GetTick>
 8008d3a:	1b00      	subs	r0, r0, r4
 8008d3c:	2802      	cmp	r0, #2
 8008d3e:	d9f5      	bls.n	8008d2c <HAL_RCC_OscConfig+0x470>
            return HAL_TIMEOUT;
 8008d40:	2003      	movs	r0, #3
 8008d42:	e028      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8008d44:	4a18      	ldr	r2, [pc, #96]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008d46:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008d48:	6861      	ldr	r1, [r4, #4]
 8008d4a:	430b      	orrs	r3, r1
 8008d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008d4e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008d50:	f023 030f 	bic.w	r3, r3, #15
 8008d54:	68e1      	ldr	r1, [r4, #12]
 8008d56:	430b      	orrs	r3, r1
 8008d58:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d5a:	e7d8      	b.n	8008d0e <HAL_RCC_OscConfig+0x452>
  return HAL_OK;
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	e01a      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
 8008d60:	2000      	movs	r0, #0
 8008d62:	e018      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d018      	beq.n	8008d9a <HAL_RCC_OscConfig+0x4de>
        pll_config = RCC->CFGR;
 8008d68:	4b0f      	ldr	r3, [pc, #60]	@ (8008da8 <HAL_RCC_OscConfig+0x4ec>)
 8008d6a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d6c:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8008d70:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008d72:	4291      	cmp	r1, r2
 8008d74:	d113      	bne.n	8008d9e <HAL_RCC_OscConfig+0x4e2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008d76:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8008d7a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d110      	bne.n	8008da2 <HAL_RCC_OscConfig+0x4e6>
  return HAL_OK;
 8008d80:	2000      	movs	r0, #0
 8008d82:	e008      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
    return HAL_ERROR;
 8008d84:	2001      	movs	r0, #1
}
 8008d86:	4770      	bx	lr
        return HAL_ERROR;
 8008d88:	2001      	movs	r0, #1
 8008d8a:	e004      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
        return HAL_ERROR;
 8008d8c:	2001      	movs	r0, #1
 8008d8e:	e002      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
          return HAL_ERROR;
 8008d90:	2001      	movs	r0, #1
 8008d92:	e000      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
  return HAL_OK;
 8008d94:	2000      	movs	r0, #0
}
 8008d96:	b002      	add	sp, #8
 8008d98:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8008d9a:	2001      	movs	r0, #1
 8008d9c:	e7fb      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
          return HAL_ERROR;
 8008d9e:	2001      	movs	r0, #1
 8008da0:	e7f9      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
 8008da2:	2001      	movs	r0, #1
 8008da4:	e7f7      	b.n	8008d96 <HAL_RCC_OscConfig+0x4da>
 8008da6:	bf00      	nop
 8008da8:	40021000 	.word	0x40021000
 8008dac:	42420000 	.word	0x42420000

08008db0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8008db0:	4b29      	ldr	r3, [pc, #164]	@ (8008e58 <HAL_RCC_GetSysClockFreq+0xa8>)
 8008db2:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8008db4:	f003 020c 	and.w	r2, r3, #12
 8008db8:	2a08      	cmp	r2, #8
 8008dba:	d001      	beq.n	8008dc0 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8008dbc:	4827      	ldr	r0, [pc, #156]	@ (8008e5c <HAL_RCC_GetSysClockFreq+0xac>)
}
 8008dbe:	4770      	bx	lr
{
 8008dc0:	b570      	push	{r4, r5, r6, lr}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008dc2:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8008dc6:	4926      	ldr	r1, [pc, #152]	@ (8008e60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008dc8:	5c8c      	ldrb	r4, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008dca:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8008dce:	d03f      	beq.n	8008e50 <HAL_RCC_GetSysClockFreq+0xa0>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8008dd0:	4a21      	ldr	r2, [pc, #132]	@ (8008e58 <HAL_RCC_GetSysClockFreq+0xa8>)
 8008dd2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008dd4:	f003 030f 	and.w	r3, r3, #15
 8008dd8:	4922      	ldr	r1, [pc, #136]	@ (8008e64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008dda:	5ccb      	ldrb	r3, [r1, r3]
        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8008ddc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008dde:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8008de2:	d02f      	beq.n	8008e44 <HAL_RCC_GetSysClockFreq+0x94>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8008de4:	491c      	ldr	r1, [pc, #112]	@ (8008e58 <HAL_RCC_GetSysClockFreq+0xa8>)
 8008de6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8008de8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8008dec:	3201      	adds	r2, #1
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8008dee:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
 8008df0:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8008df4:	3002      	adds	r0, #2
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8008df6:	fba0 0e04 	umull	r0, lr, r0, r4
 8008dfa:	ea4f 114e 	mov.w	r1, lr, lsl #5
 8008dfe:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
 8008e02:	0145      	lsls	r5, r0, #5
 8008e04:	1a2d      	subs	r5, r5, r0
 8008e06:	eb61 060e 	sbc.w	r6, r1, lr
 8008e0a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8008e0e:	ea4c 6c95 	orr.w	ip, ip, r5, lsr #26
 8008e12:	01a9      	lsls	r1, r5, #6
 8008e14:	1b49      	subs	r1, r1, r5
 8008e16:	eb6c 0c06 	sbc.w	ip, ip, r6
 8008e1a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8008e1e:	ea4c 7c51 	orr.w	ip, ip, r1, lsr #29
 8008e22:	00c9      	lsls	r1, r1, #3
 8008e24:	1809      	adds	r1, r1, r0
 8008e26:	eb4e 0e0c 	adc.w	lr, lr, ip
 8008e2a:	ea4f 2e4e 	mov.w	lr, lr, lsl #9
 8008e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e32:	0248      	lsls	r0, r1, #9
 8008e34:	ea4e 51d1 	orr.w	r1, lr, r1, lsr #23
 8008e38:	f7f7 ff06 	bl	8000c48 <__aeabi_uldivmod>
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8008e3c:	2c0d      	cmp	r4, #13
 8008e3e:	d10a      	bne.n	8008e56 <HAL_RCC_GetSysClockFreq+0xa6>
          pllclk = pllclk / 2;
 8008e40:	0840      	lsrs	r0, r0, #1
 8008e42:	e008      	b.n	8008e56 <HAL_RCC_GetSysClockFreq+0xa6>
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8008e44:	4805      	ldr	r0, [pc, #20]	@ (8008e5c <HAL_RCC_GetSysClockFreq+0xac>)
 8008e46:	fb04 f000 	mul.w	r0, r4, r0
 8008e4a:	fbb0 f0f3 	udiv	r0, r0, r3
 8008e4e:	e7f5      	b.n	8008e3c <HAL_RCC_GetSysClockFreq+0x8c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008e50:	4805      	ldr	r0, [pc, #20]	@ (8008e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e52:	fb04 f000 	mul.w	r0, r4, r0
}
 8008e56:	bd70      	pop	{r4, r5, r6, pc}
 8008e58:	40021000 	.word	0x40021000
 8008e5c:	007a1200 	.word	0x007a1200
 8008e60:	08010550 	.word	0x08010550
 8008e64:	08010540 	.word	0x08010540
 8008e68:	003d0900 	.word	0x003d0900

08008e6c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	f000 80a0 	beq.w	8008fb2 <HAL_RCC_ClockConfig+0x146>
{
 8008e72:	b570      	push	{r4, r5, r6, lr}
 8008e74:	460d      	mov	r5, r1
 8008e76:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e78:	4b52      	ldr	r3, [pc, #328]	@ (8008fc4 <HAL_RCC_ClockConfig+0x158>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 0307 	and.w	r3, r3, #7
 8008e80:	428b      	cmp	r3, r1
 8008e82:	d20b      	bcs.n	8008e9c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e84:	4a4f      	ldr	r2, [pc, #316]	@ (8008fc4 <HAL_RCC_ClockConfig+0x158>)
 8008e86:	6813      	ldr	r3, [r2, #0]
 8008e88:	f023 0307 	bic.w	r3, r3, #7
 8008e8c:	430b      	orrs	r3, r1
 8008e8e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e90:	6813      	ldr	r3, [r2, #0]
 8008e92:	f003 0307 	and.w	r3, r3, #7
 8008e96:	428b      	cmp	r3, r1
 8008e98:	f040 808d 	bne.w	8008fb6 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e9c:	6823      	ldr	r3, [r4, #0]
 8008e9e:	f013 0f02 	tst.w	r3, #2
 8008ea2:	d017      	beq.n	8008ed4 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ea4:	f013 0f04 	tst.w	r3, #4
 8008ea8:	d004      	beq.n	8008eb4 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008eaa:	4a47      	ldr	r2, [pc, #284]	@ (8008fc8 <HAL_RCC_ClockConfig+0x15c>)
 8008eac:	6853      	ldr	r3, [r2, #4]
 8008eae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008eb2:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008eb4:	6823      	ldr	r3, [r4, #0]
 8008eb6:	f013 0f08 	tst.w	r3, #8
 8008eba:	d004      	beq.n	8008ec6 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ebc:	4a42      	ldr	r2, [pc, #264]	@ (8008fc8 <HAL_RCC_ClockConfig+0x15c>)
 8008ebe:	6853      	ldr	r3, [r2, #4]
 8008ec0:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8008ec4:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ec6:	4a40      	ldr	r2, [pc, #256]	@ (8008fc8 <HAL_RCC_ClockConfig+0x15c>)
 8008ec8:	6853      	ldr	r3, [r2, #4]
 8008eca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ece:	68a1      	ldr	r1, [r4, #8]
 8008ed0:	430b      	orrs	r3, r1
 8008ed2:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	f013 0f01 	tst.w	r3, #1
 8008eda:	d031      	beq.n	8008f40 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008edc:	6863      	ldr	r3, [r4, #4]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d020      	beq.n	8008f24 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d025      	beq.n	8008f32 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ee6:	4a38      	ldr	r2, [pc, #224]	@ (8008fc8 <HAL_RCC_ClockConfig+0x15c>)
 8008ee8:	6812      	ldr	r2, [r2, #0]
 8008eea:	f012 0f02 	tst.w	r2, #2
 8008eee:	d064      	beq.n	8008fba <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ef0:	4935      	ldr	r1, [pc, #212]	@ (8008fc8 <HAL_RCC_ClockConfig+0x15c>)
 8008ef2:	684a      	ldr	r2, [r1, #4]
 8008ef4:	f022 0203 	bic.w	r2, r2, #3
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8008efc:	f7fe fa44 	bl	8007388 <HAL_GetTick>
 8008f00:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f02:	4b31      	ldr	r3, [pc, #196]	@ (8008fc8 <HAL_RCC_ClockConfig+0x15c>)
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f003 030c 	and.w	r3, r3, #12
 8008f0a:	6862      	ldr	r2, [r4, #4]
 8008f0c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008f10:	d016      	beq.n	8008f40 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f12:	f7fe fa39 	bl	8007388 <HAL_GetTick>
 8008f16:	1b80      	subs	r0, r0, r6
 8008f18:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008f1c:	4298      	cmp	r0, r3
 8008f1e:	d9f0      	bls.n	8008f02 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8008f20:	2003      	movs	r0, #3
 8008f22:	e045      	b.n	8008fb0 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f24:	4a28      	ldr	r2, [pc, #160]	@ (8008fc8 <HAL_RCC_ClockConfig+0x15c>)
 8008f26:	6812      	ldr	r2, [r2, #0]
 8008f28:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008f2c:	d1e0      	bne.n	8008ef0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8008f2e:	2001      	movs	r0, #1
 8008f30:	e03e      	b.n	8008fb0 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f32:	4a25      	ldr	r2, [pc, #148]	@ (8008fc8 <HAL_RCC_ClockConfig+0x15c>)
 8008f34:	6812      	ldr	r2, [r2, #0]
 8008f36:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8008f3a:	d1d9      	bne.n	8008ef0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8008f3c:	2001      	movs	r0, #1
 8008f3e:	e037      	b.n	8008fb0 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f40:	4b20      	ldr	r3, [pc, #128]	@ (8008fc4 <HAL_RCC_ClockConfig+0x158>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0307 	and.w	r3, r3, #7
 8008f48:	42ab      	cmp	r3, r5
 8008f4a:	d90a      	bls.n	8008f62 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8008fc4 <HAL_RCC_ClockConfig+0x158>)
 8008f4e:	6813      	ldr	r3, [r2, #0]
 8008f50:	f023 0307 	bic.w	r3, r3, #7
 8008f54:	432b      	orrs	r3, r5
 8008f56:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f58:	6813      	ldr	r3, [r2, #0]
 8008f5a:	f003 0307 	and.w	r3, r3, #7
 8008f5e:	42ab      	cmp	r3, r5
 8008f60:	d12d      	bne.n	8008fbe <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	f013 0f04 	tst.w	r3, #4
 8008f68:	d006      	beq.n	8008f78 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f6a:	4a17      	ldr	r2, [pc, #92]	@ (8008fc8 <HAL_RCC_ClockConfig+0x15c>)
 8008f6c:	6853      	ldr	r3, [r2, #4]
 8008f6e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008f72:	68e1      	ldr	r1, [r4, #12]
 8008f74:	430b      	orrs	r3, r1
 8008f76:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f78:	6823      	ldr	r3, [r4, #0]
 8008f7a:	f013 0f08 	tst.w	r3, #8
 8008f7e:	d007      	beq.n	8008f90 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008f80:	4a11      	ldr	r2, [pc, #68]	@ (8008fc8 <HAL_RCC_ClockConfig+0x15c>)
 8008f82:	6853      	ldr	r3, [r2, #4]
 8008f84:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8008f88:	6921      	ldr	r1, [r4, #16]
 8008f8a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008f8e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008f90:	f7ff ff0e 	bl	8008db0 <HAL_RCC_GetSysClockFreq>
 8008f94:	4b0c      	ldr	r3, [pc, #48]	@ (8008fc8 <HAL_RCC_ClockConfig+0x15c>)
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8008fcc <HAL_RCC_ClockConfig+0x160>)
 8008f9e:	5cd3      	ldrb	r3, [r2, r3]
 8008fa0:	40d8      	lsrs	r0, r3
 8008fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8008fd0 <HAL_RCC_ClockConfig+0x164>)
 8008fa4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8008fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8008fd4 <HAL_RCC_ClockConfig+0x168>)
 8008fa8:	6818      	ldr	r0, [r3, #0]
 8008faa:	f7fe f9a9 	bl	8007300 <HAL_InitTick>
  return HAL_OK;
 8008fae:	2000      	movs	r0, #0
}
 8008fb0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8008fb2:	2001      	movs	r0, #1
}
 8008fb4:	4770      	bx	lr
    return HAL_ERROR;
 8008fb6:	2001      	movs	r0, #1
 8008fb8:	e7fa      	b.n	8008fb0 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8008fba:	2001      	movs	r0, #1
 8008fbc:	e7f8      	b.n	8008fb0 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8008fbe:	2001      	movs	r0, #1
 8008fc0:	e7f6      	b.n	8008fb0 <HAL_RCC_ClockConfig+0x144>
 8008fc2:	bf00      	nop
 8008fc4:	40022000 	.word	0x40022000
 8008fc8:	40021000 	.word	0x40021000
 8008fcc:	08010530 	.word	0x08010530
 8008fd0:	200005ac 	.word	0x200005ac
 8008fd4:	200005b4 	.word	0x200005b4

08008fd8 <HAL_RCC_GetHCLKFreq>:
}
 8008fd8:	4b01      	ldr	r3, [pc, #4]	@ (8008fe0 <HAL_RCC_GetHCLKFreq+0x8>)
 8008fda:	6818      	ldr	r0, [r3, #0]
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	200005ac 	.word	0x200005ac

08008fe4 <HAL_RCC_GetPCLK1Freq>:
{
 8008fe4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008fe6:	f7ff fff7 	bl	8008fd8 <HAL_RCC_GetHCLKFreq>
 8008fea:	4b04      	ldr	r3, [pc, #16]	@ (8008ffc <HAL_RCC_GetPCLK1Freq+0x18>)
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008ff2:	4a03      	ldr	r2, [pc, #12]	@ (8009000 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008ff4:	5cd3      	ldrb	r3, [r2, r3]
}
 8008ff6:	40d8      	lsrs	r0, r3
 8008ff8:	bd08      	pop	{r3, pc}
 8008ffa:	bf00      	nop
 8008ffc:	40021000 	.word	0x40021000
 8009000:	08010528 	.word	0x08010528

08009004 <HAL_RCC_GetPCLK2Freq>:
{
 8009004:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009006:	f7ff ffe7 	bl	8008fd8 <HAL_RCC_GetHCLKFreq>
 800900a:	4b04      	ldr	r3, [pc, #16]	@ (800901c <HAL_RCC_GetPCLK2Freq+0x18>)
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8009012:	4a03      	ldr	r2, [pc, #12]	@ (8009020 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009014:	5cd3      	ldrb	r3, [r2, r3]
}
 8009016:	40d8      	lsrs	r0, r3
 8009018:	bd08      	pop	{r3, pc}
 800901a:	bf00      	nop
 800901c:	40021000 	.word	0x40021000
 8009020:	08010528 	.word	0x08010528

08009024 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009024:	b570      	push	{r4, r5, r6, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800902a:	6803      	ldr	r3, [r0, #0]
 800902c:	f013 0f01 	tst.w	r3, #1
 8009030:	d039      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009032:	4b6e      	ldr	r3, [pc, #440]	@ (80091ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800903a:	d10b      	bne.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x30>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800903c:	4b6b      	ldr	r3, [pc, #428]	@ (80091ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800903e:	69da      	ldr	r2, [r3, #28]
 8009040:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8009044:	61da      	str	r2, [r3, #28]
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800904c:	9301      	str	r3, [sp, #4]
 800904e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009050:	2501      	movs	r5, #1
 8009052:	e000      	b.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x32>
    FlagStatus pwrclkchanged = RESET;
 8009054:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009056:	4b66      	ldr	r3, [pc, #408]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800905e:	d07d      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x138>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009060:	4b62      	ldr	r3, [pc, #392]	@ (80091ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009062:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009064:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8009068:	d013      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800906a:	6862      	ldr	r2, [r4, #4]
 800906c:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8009070:	429a      	cmp	r2, r3
 8009072:	d00e      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009074:	4a5d      	ldr	r2, [pc, #372]	@ (80091ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009076:	6a13      	ldr	r3, [r2, #32]
 8009078:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800907c:	495d      	ldr	r1, [pc, #372]	@ (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800907e:	2601      	movs	r6, #1
 8009080:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009084:	2600      	movs	r6, #0
 8009086:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800908a:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800908c:	f013 0f01 	tst.w	r3, #1
 8009090:	d179      	bne.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x162>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009092:	4a56      	ldr	r2, [pc, #344]	@ (80091ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009094:	6a13      	ldr	r3, [r2, #32]
 8009096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800909a:	6861      	ldr	r1, [r4, #4]
 800909c:	430b      	orrs	r3, r1
 800909e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80090a0:	2d00      	cmp	r5, #0
 80090a2:	f040 8082 	bne.w	80091aa <HAL_RCCEx_PeriphCLKConfig+0x186>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	f013 0f02 	tst.w	r3, #2
 80090ac:	d006      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80090ae:	4a4f      	ldr	r2, [pc, #316]	@ (80091ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80090b0:	6853      	ldr	r3, [r2, #4]
 80090b2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80090b6:	68a1      	ldr	r1, [r4, #8]
 80090b8:	430b      	orrs	r3, r1
 80090ba:	6053      	str	r3, [r2, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80090bc:	6823      	ldr	r3, [r4, #0]
 80090be:	f013 0f04 	tst.w	r3, #4
 80090c2:	d006      	beq.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80090c4:	4a49      	ldr	r2, [pc, #292]	@ (80091ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80090c6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80090c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80090cc:	68e1      	ldr	r1, [r4, #12]
 80090ce:	430b      	orrs	r3, r1
 80090d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	f013 0f08 	tst.w	r3, #8
 80090d8:	d006      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80090da:	4a44      	ldr	r2, [pc, #272]	@ (80091ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80090dc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80090de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80090e2:	6921      	ldr	r1, [r4, #16]
 80090e4:	430b      	orrs	r3, r1
 80090e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80090e8:	4b40      	ldr	r3, [pc, #256]	@ (80091ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80090ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ec:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80090f0:	d104      	bne.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80090f2:	4b3e      	ldr	r3, [pc, #248]	@ (80091ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80090f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f6:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80090fa:	d062      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80090fc:	4b3b      	ldr	r3, [pc, #236]	@ (80091ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8009104:	d156      	bne.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x190>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8009106:	4b39      	ldr	r3, [pc, #228]	@ (80091ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 800910e:	d006      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8009110:	4b36      	ldr	r3, [pc, #216]	@ (80091ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009114:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009118:	69a2      	ldr	r2, [r4, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 800911a:	4293      	cmp	r3, r2
 800911c:	d15f      	bne.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      {
        return HAL_ERROR;
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 800911e:	4a33      	ldr	r2, [pc, #204]	@ (80091ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009120:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009122:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009126:	69a1      	ldr	r1, [r4, #24]
 8009128:	430b      	orrs	r3, r1
 800912a:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 800912c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800912e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009132:	6961      	ldr	r1, [r4, #20]
 8009134:	430b      	orrs	r3, r1
 8009136:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8009138:	4b2e      	ldr	r3, [pc, #184]	@ (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800913a:	2201      	movs	r2, #1
 800913c:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800913e:	f7fe f923 	bl	8007388 <HAL_GetTick>
 8009142:	4605      	mov	r5, r0

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009144:	4b29      	ldr	r3, [pc, #164]	@ (80091ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800914c:	d139      	bne.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800914e:	f7fe f91b 	bl	8007388 <HAL_GetTick>
 8009152:	1b40      	subs	r0, r0, r5
 8009154:	2864      	cmp	r0, #100	@ 0x64
 8009156:	d9f5      	bls.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x120>
        {
          return HAL_TIMEOUT;
 8009158:	2003      	movs	r0, #3
 800915a:	e03e      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800915c:	4a24      	ldr	r2, [pc, #144]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800915e:	6813      	ldr	r3, [r2, #0]
 8009160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009164:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8009166:	f7fe f90f 	bl	8007388 <HAL_GetTick>
 800916a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800916c:	4b20      	ldr	r3, [pc, #128]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8009174:	f47f af74 	bne.w	8009060 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009178:	f7fe f906 	bl	8007388 <HAL_GetTick>
 800917c:	1b80      	subs	r0, r0, r6
 800917e:	2864      	cmp	r0, #100	@ 0x64
 8009180:	d9f4      	bls.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x148>
          return HAL_TIMEOUT;
 8009182:	2003      	movs	r0, #3
 8009184:	e029      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        tickstart = HAL_GetTick();
 8009186:	f7fe f8ff 	bl	8007388 <HAL_GetTick>
 800918a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800918c:	4b17      	ldr	r3, [pc, #92]	@ (80091ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800918e:	6a1b      	ldr	r3, [r3, #32]
 8009190:	f013 0f02 	tst.w	r3, #2
 8009194:	f47f af7d 	bne.w	8009092 <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009198:	f7fe f8f6 	bl	8007388 <HAL_GetTick>
 800919c:	1b80      	subs	r0, r0, r6
 800919e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80091a2:	4298      	cmp	r0, r3
 80091a4:	d9f2      	bls.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x168>
            return HAL_TIMEOUT;
 80091a6:	2003      	movs	r0, #3
 80091a8:	e017      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80091aa:	69d3      	ldr	r3, [r2, #28]
 80091ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091b0:	61d3      	str	r3, [r2, #28]
 80091b2:	e778      	b.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80091b4:	4b0d      	ldr	r3, [pc, #52]	@ (80091ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80091b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80091bc:	6962      	ldr	r2, [r4, #20]
 80091be:	4293      	cmp	r3, r2
 80091c0:	d10f      	bne.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	f013 0f10 	tst.w	r3, #16
 80091c8:	d00d      	beq.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80091ca:	4a08      	ldr	r2, [pc, #32]	@ (80091ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80091cc:	6853      	ldr	r3, [r2, #4]
 80091ce:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80091d2:	69e1      	ldr	r1, [r4, #28]
 80091d4:	430b      	orrs	r3, r1
 80091d6:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80091d8:	2000      	movs	r0, #0
}
 80091da:	b002      	add	sp, #8
 80091dc:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80091de:	2001      	movs	r0, #1
 80091e0:	e7fb      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        return HAL_ERROR;
 80091e2:	2001      	movs	r0, #1
 80091e4:	e7f9      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  return HAL_OK;
 80091e6:	2000      	movs	r0, #0
 80091e8:	e7f7      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80091ea:	bf00      	nop
 80091ec:	40021000 	.word	0x40021000
 80091f0:	40007000 	.word	0x40007000
 80091f4:	42420000 	.word	0x42420000

080091f8 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80091f8:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fa:	f102 030c 	add.w	r3, r2, #12
 80091fe:	e853 3f00 	ldrex	r3, [r3]
 8009202:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009206:	320c      	adds	r2, #12
 8009208:	e842 3100 	strex	r1, r3, [r2]
 800920c:	2900      	cmp	r1, #0
 800920e:	d1f3      	bne.n	80091f8 <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009210:	2320      	movs	r3, #32
 8009212:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 8009216:	4770      	bx	lr

08009218 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009218:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921a:	f102 030c 	add.w	r3, r2, #12
 800921e:	e853 3f00 	ldrex	r3, [r3]
 8009222:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009226:	320c      	adds	r2, #12
 8009228:	e842 3100 	strex	r1, r3, [r2]
 800922c:	2900      	cmp	r1, #0
 800922e:	d1f3      	bne.n	8009218 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009230:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009232:	f102 0314 	add.w	r3, r2, #20
 8009236:	e853 3f00 	ldrex	r3, [r3]
 800923a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923e:	3214      	adds	r2, #20
 8009240:	e842 3100 	strex	r1, r3, [r2]
 8009244:	2900      	cmp	r1, #0
 8009246:	d1f3      	bne.n	8009230 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009248:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800924a:	2b01      	cmp	r3, #1
 800924c:	d005      	beq.n	800925a <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800924e:	2320      	movs	r3, #32
 8009250:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009254:	2300      	movs	r3, #0
 8009256:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8009258:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800925a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925c:	f102 030c 	add.w	r3, r2, #12
 8009260:	e853 3f00 	ldrex	r3, [r3]
 8009264:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009268:	320c      	adds	r2, #12
 800926a:	e842 3100 	strex	r1, r3, [r2]
 800926e:	2900      	cmp	r1, #0
 8009270:	d1f3      	bne.n	800925a <UART_EndRxTransfer+0x42>
 8009272:	e7ec      	b.n	800924e <UART_EndRxTransfer+0x36>

08009274 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009274:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b21      	cmp	r3, #33	@ 0x21
 800927c:	d001      	beq.n	8009282 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800927e:	2002      	movs	r0, #2
  }
}
 8009280:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009282:	6883      	ldr	r3, [r0, #8]
 8009284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009288:	d017      	beq.n	80092ba <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800928a:	6a03      	ldr	r3, [r0, #32]
 800928c:	1c5a      	adds	r2, r3, #1
 800928e:	6202      	str	r2, [r0, #32]
 8009290:	781a      	ldrb	r2, [r3, #0]
 8009292:	6803      	ldr	r3, [r0, #0]
 8009294:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8009296:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8009298:	b29b      	uxth	r3, r3
 800929a:	3b01      	subs	r3, #1
 800929c:	b29b      	uxth	r3, r3
 800929e:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80092a0:	b94b      	cbnz	r3, 80092b6 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80092a2:	6802      	ldr	r2, [r0, #0]
 80092a4:	68d3      	ldr	r3, [r2, #12]
 80092a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092aa:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80092ac:	6802      	ldr	r2, [r0, #0]
 80092ae:	68d3      	ldr	r3, [r2, #12]
 80092b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092b4:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80092b6:	2000      	movs	r0, #0
 80092b8:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092ba:	6903      	ldr	r3, [r0, #16]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1e4      	bne.n	800928a <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80092c0:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80092c2:	881b      	ldrh	r3, [r3, #0]
 80092c4:	6802      	ldr	r2, [r0, #0]
 80092c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ca:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 80092cc:	6a03      	ldr	r3, [r0, #32]
 80092ce:	3302      	adds	r3, #2
 80092d0:	6203      	str	r3, [r0, #32]
 80092d2:	e7e0      	b.n	8009296 <UART_Transmit_IT+0x22>

080092d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092d4:	b510      	push	{r4, lr}
 80092d6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092d8:	6802      	ldr	r2, [r0, #0]
 80092da:	6913      	ldr	r3, [r2, #16]
 80092dc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80092e0:	68c1      	ldr	r1, [r0, #12]
 80092e2:	430b      	orrs	r3, r1
 80092e4:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80092e6:	6883      	ldr	r3, [r0, #8]
 80092e8:	6902      	ldr	r2, [r0, #16]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	6942      	ldr	r2, [r0, #20]
 80092ee:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80092f0:	6801      	ldr	r1, [r0, #0]
 80092f2:	68cb      	ldr	r3, [r1, #12]
 80092f4:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80092f8:	f023 030c 	bic.w	r3, r3, #12
 80092fc:	4313      	orrs	r3, r2
 80092fe:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009300:	6802      	ldr	r2, [r0, #0]
 8009302:	6953      	ldr	r3, [r2, #20]
 8009304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009308:	6981      	ldr	r1, [r0, #24]
 800930a:	430b      	orrs	r3, r1
 800930c:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 800930e:	6802      	ldr	r2, [r0, #0]
 8009310:	4b13      	ldr	r3, [pc, #76]	@ (8009360 <UART_SetConfig+0x8c>)
 8009312:	429a      	cmp	r2, r3
 8009314:	d020      	beq.n	8009358 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009316:	f7ff fe65 	bl	8008fe4 <HAL_RCC_GetPCLK1Freq>
 800931a:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800931c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009320:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009324:	6863      	ldr	r3, [r4, #4]
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	fbb2 f2f3 	udiv	r2, r2, r3
 800932c:	480d      	ldr	r0, [pc, #52]	@ (8009364 <UART_SetConfig+0x90>)
 800932e:	fba0 3102 	umull	r3, r1, r0, r2
 8009332:	0949      	lsrs	r1, r1, #5
 8009334:	2364      	movs	r3, #100	@ 0x64
 8009336:	fb03 2311 	mls	r3, r3, r1, r2
 800933a:	011b      	lsls	r3, r3, #4
 800933c:	3332      	adds	r3, #50	@ 0x32
 800933e:	fba0 0303 	umull	r0, r3, r0, r3
 8009342:	095b      	lsrs	r3, r3, #5
 8009344:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009348:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800934c:	f003 030f 	and.w	r3, r3, #15
 8009350:	6821      	ldr	r1, [r4, #0]
 8009352:	4413      	add	r3, r2
 8009354:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8009356:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8009358:	f7ff fe54 	bl	8009004 <HAL_RCC_GetPCLK2Freq>
 800935c:	4602      	mov	r2, r0
 800935e:	e7dd      	b.n	800931c <UART_SetConfig+0x48>
 8009360:	40013800 	.word	0x40013800
 8009364:	51eb851f 	.word	0x51eb851f

08009368 <UART_WaitOnFlagUntilTimeout>:
{
 8009368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800936c:	b083      	sub	sp, #12
 800936e:	4605      	mov	r5, r0
 8009370:	460e      	mov	r6, r1
 8009372:	4617      	mov	r7, r2
 8009374:	4699      	mov	r9, r3
 8009376:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800937a:	682b      	ldr	r3, [r5, #0]
 800937c:	681c      	ldr	r4, [r3, #0]
 800937e:	ea36 0404 	bics.w	r4, r6, r4
 8009382:	bf0c      	ite	eq
 8009384:	2401      	moveq	r4, #1
 8009386:	2400      	movne	r4, #0
 8009388:	42bc      	cmp	r4, r7
 800938a:	d128      	bne.n	80093de <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 800938c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009390:	d0f3      	beq.n	800937a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009392:	f7fd fff9 	bl	8007388 <HAL_GetTick>
 8009396:	eba0 0009 	sub.w	r0, r0, r9
 800939a:	4540      	cmp	r0, r8
 800939c:	d823      	bhi.n	80093e6 <UART_WaitOnFlagUntilTimeout+0x7e>
 800939e:	f1b8 0f00 	cmp.w	r8, #0
 80093a2:	d022      	beq.n	80093ea <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80093a4:	682b      	ldr	r3, [r5, #0]
 80093a6:	68da      	ldr	r2, [r3, #12]
 80093a8:	f012 0f04 	tst.w	r2, #4
 80093ac:	d0e5      	beq.n	800937a <UART_WaitOnFlagUntilTimeout+0x12>
 80093ae:	2e80      	cmp	r6, #128	@ 0x80
 80093b0:	d0e3      	beq.n	800937a <UART_WaitOnFlagUntilTimeout+0x12>
 80093b2:	2e40      	cmp	r6, #64	@ 0x40
 80093b4:	d0e1      	beq.n	800937a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	f012 0f08 	tst.w	r2, #8
 80093bc:	d0dd      	beq.n	800937a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80093be:	2400      	movs	r4, #0
 80093c0:	9401      	str	r4, [sp, #4]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	9201      	str	r2, [sp, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	9301      	str	r3, [sp, #4]
 80093ca:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80093cc:	4628      	mov	r0, r5
 80093ce:	f7ff ff23 	bl	8009218 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80093d2:	2308      	movs	r3, #8
 80093d4:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80093d6:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80093da:	2001      	movs	r0, #1
 80093dc:	e000      	b.n	80093e0 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80093de:	2000      	movs	r0, #0
}
 80093e0:	b003      	add	sp, #12
 80093e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80093e6:	2003      	movs	r0, #3
 80093e8:	e7fa      	b.n	80093e0 <UART_WaitOnFlagUntilTimeout+0x78>
 80093ea:	2003      	movs	r0, #3
 80093ec:	e7f8      	b.n	80093e0 <UART_WaitOnFlagUntilTimeout+0x78>

080093ee <HAL_UART_Init>:
  if (huart == NULL)
 80093ee:	b360      	cbz	r0, 800944a <HAL_UART_Init+0x5c>
{
 80093f0:	b510      	push	{r4, lr}
 80093f2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80093f4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80093f8:	b313      	cbz	r3, 8009440 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80093fa:	2324      	movs	r3, #36	@ 0x24
 80093fc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8009400:	6822      	ldr	r2, [r4, #0]
 8009402:	68d3      	ldr	r3, [r2, #12]
 8009404:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009408:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800940a:	4620      	mov	r0, r4
 800940c:	f7ff ff62 	bl	80092d4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009410:	6822      	ldr	r2, [r4, #0]
 8009412:	6913      	ldr	r3, [r2, #16]
 8009414:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8009418:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800941a:	6822      	ldr	r2, [r4, #0]
 800941c:	6953      	ldr	r3, [r2, #20]
 800941e:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8009422:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8009424:	6822      	ldr	r2, [r4, #0]
 8009426:	68d3      	ldr	r3, [r2, #12]
 8009428:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800942c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800942e:	2000      	movs	r0, #0
 8009430:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009432:	2320      	movs	r3, #32
 8009434:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009438:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800943c:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800943e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8009440:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8009444:	f7fd fdd8 	bl	8006ff8 <HAL_UART_MspInit>
 8009448:	e7d7      	b.n	80093fa <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800944a:	2001      	movs	r0, #1
}
 800944c:	4770      	bx	lr

0800944e <HAL_LIN_Init>:
  if (huart == NULL)
 800944e:	2800      	cmp	r0, #0
 8009450:	d03c      	beq.n	80094cc <HAL_LIN_Init+0x7e>
{
 8009452:	b538      	push	{r3, r4, r5, lr}
 8009454:	460d      	mov	r5, r1
 8009456:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009458:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800945c:	2b00      	cmp	r3, #0
 800945e:	d030      	beq.n	80094c2 <HAL_LIN_Init+0x74>
  huart->gState = HAL_UART_STATE_BUSY;
 8009460:	2324      	movs	r3, #36	@ 0x24
 8009462:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8009466:	6822      	ldr	r2, [r4, #0]
 8009468:	68d3      	ldr	r3, [r2, #12]
 800946a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800946e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8009470:	4620      	mov	r0, r4
 8009472:	f7ff ff2f 	bl	80092d4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8009476:	6822      	ldr	r2, [r4, #0]
 8009478:	6913      	ldr	r3, [r2, #16]
 800947a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800947e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8009480:	6822      	ldr	r2, [r4, #0]
 8009482:	6953      	ldr	r3, [r2, #20]
 8009484:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8009488:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 800948a:	6822      	ldr	r2, [r4, #0]
 800948c:	6913      	ldr	r3, [r2, #16]
 800948e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009492:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 8009494:	6822      	ldr	r2, [r4, #0]
 8009496:	6913      	ldr	r3, [r2, #16]
 8009498:	f023 0320 	bic.w	r3, r3, #32
 800949c:	6113      	str	r3, [r2, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 800949e:	6822      	ldr	r2, [r4, #0]
 80094a0:	6913      	ldr	r3, [r2, #16]
 80094a2:	432b      	orrs	r3, r5
 80094a4:	6113      	str	r3, [r2, #16]
  __HAL_UART_ENABLE(huart);
 80094a6:	6822      	ldr	r2, [r4, #0]
 80094a8:	68d3      	ldr	r3, [r2, #12]
 80094aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80094ae:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094b0:	2000      	movs	r0, #0
 80094b2:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80094b4:	2320      	movs	r3, #32
 80094b6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80094ba:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094be:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80094c0:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 80094c2:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80094c6:	f7fd fd97 	bl	8006ff8 <HAL_UART_MspInit>
 80094ca:	e7c9      	b.n	8009460 <HAL_LIN_Init+0x12>
    return HAL_ERROR;
 80094cc:	2001      	movs	r0, #1
}
 80094ce:	4770      	bx	lr

080094d0 <HAL_UART_Transmit>:
{
 80094d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d4:	b082      	sub	sp, #8
 80094d6:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80094d8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	2b20      	cmp	r3, #32
 80094e0:	d156      	bne.n	8009590 <HAL_UART_Transmit+0xc0>
 80094e2:	4604      	mov	r4, r0
 80094e4:	460d      	mov	r5, r1
 80094e6:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80094e8:	2900      	cmp	r1, #0
 80094ea:	d055      	beq.n	8009598 <HAL_UART_Transmit+0xc8>
 80094ec:	b90a      	cbnz	r2, 80094f2 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 80094ee:	2001      	movs	r0, #1
 80094f0:	e04f      	b.n	8009592 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094f2:	2300      	movs	r3, #0
 80094f4:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094f6:	2321      	movs	r3, #33	@ 0x21
 80094f8:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 80094fc:	f7fd ff44 	bl	8007388 <HAL_GetTick>
 8009500:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8009502:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009506:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800950a:	68a3      	ldr	r3, [r4, #8]
 800950c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009510:	d002      	beq.n	8009518 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8009512:	f04f 0800 	mov.w	r8, #0
 8009516:	e014      	b.n	8009542 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009518:	6923      	ldr	r3, [r4, #16]
 800951a:	b32b      	cbz	r3, 8009568 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800951c:	f04f 0800 	mov.w	r8, #0
 8009520:	e00f      	b.n	8009542 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8009522:	2320      	movs	r3, #32
 8009524:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8009528:	2003      	movs	r0, #3
 800952a:	e032      	b.n	8009592 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800952c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8009530:	6822      	ldr	r2, [r4, #0]
 8009532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009536:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8009538:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800953a:	b292      	uxth	r2, r2
 800953c:	3a01      	subs	r2, #1
 800953e:	b292      	uxth	r2, r2
 8009540:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009542:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8009544:	b29b      	uxth	r3, r3
 8009546:	b193      	cbz	r3, 800956e <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009548:	9600      	str	r6, [sp, #0]
 800954a:	463b      	mov	r3, r7
 800954c:	2200      	movs	r2, #0
 800954e:	2180      	movs	r1, #128	@ 0x80
 8009550:	4620      	mov	r0, r4
 8009552:	f7ff ff09 	bl	8009368 <UART_WaitOnFlagUntilTimeout>
 8009556:	2800      	cmp	r0, #0
 8009558:	d1e3      	bne.n	8009522 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 800955a:	2d00      	cmp	r5, #0
 800955c:	d0e6      	beq.n	800952c <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800955e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8009562:	6823      	ldr	r3, [r4, #0]
 8009564:	605a      	str	r2, [r3, #4]
 8009566:	e7e7      	b.n	8009538 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8009568:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800956a:	2500      	movs	r5, #0
 800956c:	e7e9      	b.n	8009542 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800956e:	9600      	str	r6, [sp, #0]
 8009570:	463b      	mov	r3, r7
 8009572:	2200      	movs	r2, #0
 8009574:	2140      	movs	r1, #64	@ 0x40
 8009576:	4620      	mov	r0, r4
 8009578:	f7ff fef6 	bl	8009368 <UART_WaitOnFlagUntilTimeout>
 800957c:	b918      	cbnz	r0, 8009586 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 800957e:	2320      	movs	r3, #32
 8009580:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8009584:	e005      	b.n	8009592 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8009586:	2320      	movs	r3, #32
 8009588:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 800958c:	2003      	movs	r0, #3
 800958e:	e000      	b.n	8009592 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8009590:	2002      	movs	r0, #2
}
 8009592:	b002      	add	sp, #8
 8009594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8009598:	2001      	movs	r0, #1
 800959a:	e7fa      	b.n	8009592 <HAL_UART_Transmit+0xc2>

0800959c <HAL_UART_TxCpltCallback>:
}
 800959c:	4770      	bx	lr

0800959e <UART_EndTransmit_IT>:
{
 800959e:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80095a0:	6801      	ldr	r1, [r0, #0]
 80095a2:	68ca      	ldr	r2, [r1, #12]
 80095a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095a8:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80095aa:	2220      	movs	r2, #32
 80095ac:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 80095b0:	f7ff fff4 	bl	800959c <HAL_UART_TxCpltCallback>
}
 80095b4:	2000      	movs	r0, #0
 80095b6:	bd08      	pop	{r3, pc}

080095b8 <HAL_UART_RxCpltCallback>:
}
 80095b8:	4770      	bx	lr

080095ba <HAL_UART_RxHalfCpltCallback>:
}
 80095ba:	4770      	bx	lr

080095bc <HAL_UART_ErrorCallback>:
}
 80095bc:	4770      	bx	lr

080095be <UART_DMAError>:
{
 80095be:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095c0:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80095c2:	6823      	ldr	r3, [r4, #0]
 80095c4:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80095c6:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	2b21      	cmp	r3, #33	@ 0x21
 80095ce:	d010      	beq.n	80095f2 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80095d0:	6823      	ldr	r3, [r4, #0]
 80095d2:	695a      	ldr	r2, [r3, #20]
 80095d4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80095d8:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	2b22      	cmp	r3, #34	@ 0x22
 80095e0:	d011      	beq.n	8009606 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80095e2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80095e4:	f043 0310 	orr.w	r3, r3, #16
 80095e8:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 80095ea:	4620      	mov	r0, r4
 80095ec:	f7ff ffe6 	bl	80095bc <HAL_UART_ErrorCallback>
}
 80095f0:	bd10      	pop	{r4, pc}
 80095f2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80095f6:	2a00      	cmp	r2, #0
 80095f8:	d0ea      	beq.n	80095d0 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 80095fa:	2300      	movs	r3, #0
 80095fc:	84e3      	strh	r3, [r4, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80095fe:	4620      	mov	r0, r4
 8009600:	f7ff fdfa 	bl	80091f8 <UART_EndTxTransfer>
 8009604:	e7e4      	b.n	80095d0 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009606:	2a00      	cmp	r2, #0
 8009608:	d0eb      	beq.n	80095e2 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 800960a:	2300      	movs	r3, #0
 800960c:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800960e:	4620      	mov	r0, r4
 8009610:	f7ff fe02 	bl	8009218 <UART_EndRxTransfer>
 8009614:	e7e5      	b.n	80095e2 <UART_DMAError+0x24>

08009616 <UART_DMAAbortOnError>:
{
 8009616:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009618:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 800961a:	2300      	movs	r3, #0
 800961c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800961e:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8009620:	f7ff ffcc 	bl	80095bc <HAL_UART_ErrorCallback>
}
 8009624:	bd08      	pop	{r3, pc}

08009626 <HAL_UARTEx_RxEventCallback>:
}
 8009626:	4770      	bx	lr

08009628 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009628:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800962c:	b2db      	uxtb	r3, r3
 800962e:	2b22      	cmp	r3, #34	@ 0x22
 8009630:	d169      	bne.n	8009706 <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009632:	6883      	ldr	r3, [r0, #8]
 8009634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009638:	d04f      	beq.n	80096da <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800963a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800963c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009640:	d004      	beq.n	800964c <UART_Receive_IT+0x24>
 8009642:	2b00      	cmp	r3, #0
 8009644:	d156      	bne.n	80096f4 <UART_Receive_IT+0xcc>
 8009646:	6903      	ldr	r3, [r0, #16]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d153      	bne.n	80096f4 <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800964c:	6803      	ldr	r3, [r0, #0]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8009652:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009654:	3301      	adds	r3, #1
 8009656:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8009658:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800965a:	b29b      	uxth	r3, r3
 800965c:	3b01      	subs	r3, #1
 800965e:	b29b      	uxth	r3, r3
 8009660:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8009662:	2b00      	cmp	r3, #0
 8009664:	d151      	bne.n	800970a <UART_Receive_IT+0xe2>
{
 8009666:	b500      	push	{lr}
 8009668:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800966a:	6802      	ldr	r2, [r0, #0]
 800966c:	68d3      	ldr	r3, [r2, #12]
 800966e:	f023 0320 	bic.w	r3, r3, #32
 8009672:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009674:	6802      	ldr	r2, [r0, #0]
 8009676:	68d3      	ldr	r3, [r2, #12]
 8009678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800967c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800967e:	6802      	ldr	r2, [r0, #0]
 8009680:	6953      	ldr	r3, [r2, #20]
 8009682:	f023 0301 	bic.w	r3, r3, #1
 8009686:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8009688:	2320      	movs	r3, #32
 800968a:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800968e:	2300      	movs	r3, #0
 8009690:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009692:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009694:	2b01      	cmp	r3, #1
 8009696:	d133      	bne.n	8009700 <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009698:	2300      	movs	r3, #0
 800969a:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800969c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969e:	f102 030c 	add.w	r3, r2, #12
 80096a2:	e853 3f00 	ldrex	r3, [r3]
 80096a6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096aa:	320c      	adds	r2, #12
 80096ac:	e842 3100 	strex	r1, r3, [r2]
 80096b0:	2900      	cmp	r1, #0
 80096b2:	d1f3      	bne.n	800969c <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80096b4:	6803      	ldr	r3, [r0, #0]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	f012 0f10 	tst.w	r2, #16
 80096bc:	d006      	beq.n	80096cc <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80096be:	2200      	movs	r2, #0
 80096c0:	9201      	str	r2, [sp, #4]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	9201      	str	r2, [sp, #4]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	9301      	str	r3, [sp, #4]
 80096ca:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096cc:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80096ce:	f7ff ffaa 	bl	8009626 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 80096d2:	2000      	movs	r0, #0
}
 80096d4:	b003      	add	sp, #12
 80096d6:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096da:	6902      	ldr	r2, [r0, #16]
 80096dc:	2a00      	cmp	r2, #0
 80096de:	d1ac      	bne.n	800963a <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80096e0:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80096e2:	6803      	ldr	r3, [r0, #0]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ea:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80096ec:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80096ee:	3302      	adds	r3, #2
 80096f0:	6283      	str	r3, [r0, #40]	@ 0x28
 80096f2:	e7b1      	b.n	8009658 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80096f4:	6803      	ldr	r3, [r0, #0]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096fc:	7013      	strb	r3, [r2, #0]
 80096fe:	e7a8      	b.n	8009652 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 8009700:	f7ff ff5a 	bl	80095b8 <HAL_UART_RxCpltCallback>
 8009704:	e7e5      	b.n	80096d2 <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 8009706:	2002      	movs	r0, #2
 8009708:	4770      	bx	lr
    return HAL_OK;
 800970a:	2000      	movs	r0, #0
}
 800970c:	4770      	bx	lr
	...

08009710 <HAL_UART_IRQHandler>:
{
 8009710:	b510      	push	{r4, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009716:	6802      	ldr	r2, [r0, #0]
 8009718:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800971a:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800971c:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 800971e:	f013 0f0f 	tst.w	r3, #15
 8009722:	d109      	bne.n	8009738 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009724:	f013 0f20 	tst.w	r3, #32
 8009728:	d00c      	beq.n	8009744 <HAL_UART_IRQHandler+0x34>
 800972a:	f010 0f20 	tst.w	r0, #32
 800972e:	d009      	beq.n	8009744 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8009730:	4620      	mov	r0, r4
 8009732:	f7ff ff79 	bl	8009628 <UART_Receive_IT>
      return;
 8009736:	e016      	b.n	8009766 <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009738:	f011 0101 	ands.w	r1, r1, #1
 800973c:	d115      	bne.n	800976a <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800973e:	f410 7f90 	tst.w	r0, #288	@ 0x120
 8009742:	d112      	bne.n	800976a <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009744:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009746:	2901      	cmp	r1, #1
 8009748:	d079      	beq.n	800983e <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800974a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800974e:	d003      	beq.n	8009758 <HAL_UART_IRQHandler+0x48>
 8009750:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8009754:	f040 8113 	bne.w	800997e <HAL_UART_IRQHandler+0x26e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009758:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800975c:	d003      	beq.n	8009766 <HAL_UART_IRQHandler+0x56>
 800975e:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8009762:	f040 8110 	bne.w	8009986 <HAL_UART_IRQHandler+0x276>
}
 8009766:	b002      	add	sp, #8
 8009768:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800976a:	f013 0f01 	tst.w	r3, #1
 800976e:	d006      	beq.n	800977e <HAL_UART_IRQHandler+0x6e>
 8009770:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8009774:	d003      	beq.n	800977e <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009776:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8009778:	f042 0201 	orr.w	r2, r2, #1
 800977c:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800977e:	f013 0f04 	tst.w	r3, #4
 8009782:	d004      	beq.n	800978e <HAL_UART_IRQHandler+0x7e>
 8009784:	b119      	cbz	r1, 800978e <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009786:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8009788:	f042 0202 	orr.w	r2, r2, #2
 800978c:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800978e:	f013 0f02 	tst.w	r3, #2
 8009792:	d004      	beq.n	800979e <HAL_UART_IRQHandler+0x8e>
 8009794:	b119      	cbz	r1, 800979e <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009796:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8009798:	f042 0204 	orr.w	r2, r2, #4
 800979c:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800979e:	f013 0f08 	tst.w	r3, #8
 80097a2:	d007      	beq.n	80097b4 <HAL_UART_IRQHandler+0xa4>
 80097a4:	f010 0f20 	tst.w	r0, #32
 80097a8:	d100      	bne.n	80097ac <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80097aa:	b119      	cbz	r1, 80097b4 <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097ac:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80097ae:	f042 0208 	orr.w	r2, r2, #8
 80097b2:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097b4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80097b6:	2a00      	cmp	r2, #0
 80097b8:	d0d5      	beq.n	8009766 <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80097ba:	f013 0f20 	tst.w	r3, #32
 80097be:	d002      	beq.n	80097c6 <HAL_UART_IRQHandler+0xb6>
 80097c0:	f010 0f20 	tst.w	r0, #32
 80097c4:	d129      	bne.n	800981a <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097c6:	6823      	ldr	r3, [r4, #0]
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80097ce:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80097d0:	f012 0f08 	tst.w	r2, #8
 80097d4:	d100      	bne.n	80097d8 <HAL_UART_IRQHandler+0xc8>
 80097d6:	b363      	cbz	r3, 8009832 <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 80097d8:	4620      	mov	r0, r4
 80097da:	f7ff fd1d 	bl	8009218 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	695b      	ldr	r3, [r3, #20]
 80097e2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80097e6:	d020      	beq.n	800982a <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097e8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ea:	f102 0314 	add.w	r3, r2, #20
 80097ee:	e853 3f00 	ldrex	r3, [r3]
 80097f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f6:	3214      	adds	r2, #20
 80097f8:	e842 3100 	strex	r1, r3, [r2]
 80097fc:	2900      	cmp	r1, #0
 80097fe:	d1f3      	bne.n	80097e8 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 8009800:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009802:	b173      	cbz	r3, 8009822 <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009804:	4a62      	ldr	r2, [pc, #392]	@ (8009990 <HAL_UART_IRQHandler+0x280>)
 8009806:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009808:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800980a:	f7fe fd01 	bl	8008210 <HAL_DMA_Abort_IT>
 800980e:	2800      	cmp	r0, #0
 8009810:	d0a9      	beq.n	8009766 <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009812:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8009814:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009816:	4798      	blx	r3
 8009818:	e7a5      	b.n	8009766 <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 800981a:	4620      	mov	r0, r4
 800981c:	f7ff ff04 	bl	8009628 <UART_Receive_IT>
 8009820:	e7d1      	b.n	80097c6 <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 8009822:	4620      	mov	r0, r4
 8009824:	f7ff feca 	bl	80095bc <HAL_UART_ErrorCallback>
 8009828:	e79d      	b.n	8009766 <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 800982a:	4620      	mov	r0, r4
 800982c:	f7ff fec6 	bl	80095bc <HAL_UART_ErrorCallback>
 8009830:	e799      	b.n	8009766 <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 8009832:	4620      	mov	r0, r4
 8009834:	f7ff fec2 	bl	80095bc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009838:	2300      	movs	r3, #0
 800983a:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 800983c:	e793      	b.n	8009766 <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800983e:	f013 0f10 	tst.w	r3, #16
 8009842:	d082      	beq.n	800974a <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009844:	f010 0f10 	tst.w	r0, #16
 8009848:	f43f af7f 	beq.w	800974a <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800984c:	2300      	movs	r3, #0
 800984e:	9301      	str	r3, [sp, #4]
 8009850:	6813      	ldr	r3, [r2, #0]
 8009852:	9301      	str	r3, [sp, #4]
 8009854:	6853      	ldr	r3, [r2, #4]
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800985a:	6953      	ldr	r3, [r2, #20]
 800985c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009860:	d051      	beq.n	8009906 <HAL_UART_IRQHandler+0x1f6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009862:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009864:	6813      	ldr	r3, [r2, #0]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800986a:	2b00      	cmp	r3, #0
 800986c:	f43f af7b 	beq.w	8009766 <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009870:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8009872:	4299      	cmp	r1, r3
 8009874:	f67f af77 	bls.w	8009766 <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8009878:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800987a:	6993      	ldr	r3, [r2, #24]
 800987c:	2b20      	cmp	r3, #32
 800987e:	d037      	beq.n	80098f0 <HAL_UART_IRQHandler+0x1e0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009880:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009882:	f102 030c 	add.w	r3, r2, #12
 8009886:	e853 3f00 	ldrex	r3, [r3]
 800988a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988e:	320c      	adds	r2, #12
 8009890:	e842 3100 	strex	r1, r3, [r2]
 8009894:	2900      	cmp	r1, #0
 8009896:	d1f3      	bne.n	8009880 <HAL_UART_IRQHandler+0x170>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009898:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989a:	f102 0314 	add.w	r3, r2, #20
 800989e:	e853 3f00 	ldrex	r3, [r3]
 80098a2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a6:	3214      	adds	r2, #20
 80098a8:	e842 3100 	strex	r1, r3, [r2]
 80098ac:	2900      	cmp	r1, #0
 80098ae:	d1f3      	bne.n	8009898 <HAL_UART_IRQHandler+0x188>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098b0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b2:	f102 0314 	add.w	r3, r2, #20
 80098b6:	e853 3f00 	ldrex	r3, [r3]
 80098ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098be:	3214      	adds	r2, #20
 80098c0:	e842 3100 	strex	r1, r3, [r2]
 80098c4:	2900      	cmp	r1, #0
 80098c6:	d1f3      	bne.n	80098b0 <HAL_UART_IRQHandler+0x1a0>
          huart->RxState = HAL_UART_STATE_READY;
 80098c8:	2320      	movs	r3, #32
 80098ca:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ce:	2300      	movs	r3, #0
 80098d0:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d4:	f102 030c 	add.w	r3, r2, #12
 80098d8:	e853 3f00 	ldrex	r3, [r3]
 80098dc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e0:	320c      	adds	r2, #12
 80098e2:	e842 3100 	strex	r1, r3, [r2]
 80098e6:	2900      	cmp	r1, #0
 80098e8:	d1f3      	bne.n	80098d2 <HAL_UART_IRQHandler+0x1c2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098ea:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80098ec:	f7fe fc6d 	bl	80081ca <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098f0:	2302      	movs	r3, #2
 80098f2:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098f4:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80098f6:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	1ac9      	subs	r1, r1, r3
 80098fc:	b289      	uxth	r1, r1
 80098fe:	4620      	mov	r0, r4
 8009900:	f7ff fe91 	bl	8009626 <HAL_UARTEx_RxEventCallback>
      return;
 8009904:	e72f      	b.n	8009766 <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009906:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8009908:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800990a:	b29b      	uxth	r3, r3
 800990c:	1ac9      	subs	r1, r1, r3
 800990e:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8009910:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8009912:	b29b      	uxth	r3, r3
 8009914:	2b00      	cmp	r3, #0
 8009916:	f43f af26 	beq.w	8009766 <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 800991a:	2900      	cmp	r1, #0
 800991c:	f43f af23 	beq.w	8009766 <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009920:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009922:	f102 030c 	add.w	r3, r2, #12
 8009926:	e853 3f00 	ldrex	r3, [r3]
 800992a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992e:	320c      	adds	r2, #12
 8009930:	e842 3000 	strex	r0, r3, [r2]
 8009934:	2800      	cmp	r0, #0
 8009936:	d1f3      	bne.n	8009920 <HAL_UART_IRQHandler+0x210>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009938:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993a:	f102 0314 	add.w	r3, r2, #20
 800993e:	e853 3f00 	ldrex	r3, [r3]
 8009942:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009946:	3214      	adds	r2, #20
 8009948:	e842 3000 	strex	r0, r3, [r2]
 800994c:	2800      	cmp	r0, #0
 800994e:	d1f3      	bne.n	8009938 <HAL_UART_IRQHandler+0x228>
        huart->RxState = HAL_UART_STATE_READY;
 8009950:	2320      	movs	r3, #32
 8009952:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009956:	2300      	movs	r3, #0
 8009958:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800995a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995c:	f102 030c 	add.w	r3, r2, #12
 8009960:	e853 3f00 	ldrex	r3, [r3]
 8009964:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009968:	320c      	adds	r2, #12
 800996a:	e842 3000 	strex	r0, r3, [r2]
 800996e:	2800      	cmp	r0, #0
 8009970:	d1f3      	bne.n	800995a <HAL_UART_IRQHandler+0x24a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009972:	2302      	movs	r3, #2
 8009974:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009976:	4620      	mov	r0, r4
 8009978:	f7ff fe55 	bl	8009626 <HAL_UARTEx_RxEventCallback>
      return;
 800997c:	e6f3      	b.n	8009766 <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 800997e:	4620      	mov	r0, r4
 8009980:	f7ff fc78 	bl	8009274 <UART_Transmit_IT>
    return;
 8009984:	e6ef      	b.n	8009766 <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8009986:	4620      	mov	r0, r4
 8009988:	f7ff fe09 	bl	800959e <UART_EndTransmit_IT>
    return;
 800998c:	e6eb      	b.n	8009766 <HAL_UART_IRQHandler+0x56>
 800998e:	bf00      	nop
 8009990:	08009617 	.word	0x08009617

08009994 <UART_DMARxHalfCplt>:
{
 8009994:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009996:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009998:	2301      	movs	r3, #1
 800999a:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800999c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d002      	beq.n	80099a8 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 80099a2:	f7ff fe0a 	bl	80095ba <HAL_UART_RxHalfCpltCallback>
}
 80099a6:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80099a8:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80099aa:	0849      	lsrs	r1, r1, #1
 80099ac:	f7ff fe3b 	bl	8009626 <HAL_UARTEx_RxEventCallback>
 80099b0:	e7f9      	b.n	80099a6 <UART_DMARxHalfCplt+0x12>

080099b2 <UART_DMAReceiveCplt>:
{
 80099b2:	b508      	push	{r3, lr}
 80099b4:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099b6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f013 0f20 	tst.w	r3, #32
 80099c0:	d12b      	bne.n	8009a1a <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 80099c2:	2300      	movs	r3, #0
 80099c4:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099c6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c8:	f102 030c 	add.w	r3, r2, #12
 80099cc:	e853 3f00 	ldrex	r3, [r3]
 80099d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d4:	320c      	adds	r2, #12
 80099d6:	e842 3100 	strex	r1, r3, [r2]
 80099da:	2900      	cmp	r1, #0
 80099dc:	d1f3      	bne.n	80099c6 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099de:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e0:	f102 0314 	add.w	r3, r2, #20
 80099e4:	e853 3f00 	ldrex	r3, [r3]
 80099e8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ec:	3214      	adds	r2, #20
 80099ee:	e842 3100 	strex	r1, r3, [r2]
 80099f2:	2900      	cmp	r1, #0
 80099f4:	d1f3      	bne.n	80099de <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099f6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f8:	f102 0314 	add.w	r3, r2, #20
 80099fc:	e853 3f00 	ldrex	r3, [r3]
 8009a00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a04:	3214      	adds	r2, #20
 8009a06:	e842 3100 	strex	r1, r3, [r2]
 8009a0a:	2900      	cmp	r1, #0
 8009a0c:	d1f3      	bne.n	80099f6 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8009a0e:	2320      	movs	r3, #32
 8009a10:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a14:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d007      	beq.n	8009a2a <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a1e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d00f      	beq.n	8009a44 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8009a24:	f7ff fdc8 	bl	80095b8 <HAL_UART_RxCpltCallback>
}
 8009a28:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a2a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2c:	f102 030c 	add.w	r3, r2, #12
 8009a30:	e853 3f00 	ldrex	r3, [r3]
 8009a34:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a38:	320c      	adds	r2, #12
 8009a3a:	e842 3100 	strex	r1, r3, [r2]
 8009a3e:	2900      	cmp	r1, #0
 8009a40:	d1f3      	bne.n	8009a2a <UART_DMAReceiveCplt+0x78>
 8009a42:	e7ea      	b.n	8009a1a <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a44:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8009a46:	f7ff fdee 	bl	8009626 <HAL_UARTEx_RxEventCallback>
 8009a4a:	e7ed      	b.n	8009a28 <UART_DMAReceiveCplt+0x76>

08009a4c <UART_Start_Receive_DMA>:
{
 8009a4c:	b530      	push	{r4, r5, lr}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	4604      	mov	r4, r0
 8009a52:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8009a54:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009a56:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a58:	2500      	movs	r5, #0
 8009a5a:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a5c:	2222      	movs	r2, #34	@ 0x22
 8009a5e:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009a62:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009a64:	481f      	ldr	r0, [pc, #124]	@ (8009ae4 <UART_Start_Receive_DMA+0x98>)
 8009a66:	6290      	str	r0, [r2, #40]	@ 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009a68:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009a6a:	481f      	ldr	r0, [pc, #124]	@ (8009ae8 <UART_Start_Receive_DMA+0x9c>)
 8009a6c:	62d0      	str	r0, [r2, #44]	@ 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009a6e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009a70:	481e      	ldr	r0, [pc, #120]	@ (8009aec <UART_Start_Receive_DMA+0xa0>)
 8009a72:	6310      	str	r0, [r2, #48]	@ 0x30
  huart->hdmarx->XferAbortCallback = NULL;
 8009a74:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009a76:	6355      	str	r5, [r2, #52]	@ 0x34
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009a78:	6820      	ldr	r0, [r4, #0]
 8009a7a:	460a      	mov	r2, r1
 8009a7c:	1d01      	adds	r1, r0, #4
 8009a7e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8009a80:	f7fe fb68 	bl	8008154 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009a84:	9501      	str	r5, [sp, #4]
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	9201      	str	r2, [sp, #4]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	9301      	str	r3, [sp, #4]
 8009a90:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a92:	6923      	ldr	r3, [r4, #16]
 8009a94:	b15b      	cbz	r3, 8009aae <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a96:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a98:	f102 030c 	add.w	r3, r2, #12
 8009a9c:	e853 3f00 	ldrex	r3, [r3]
 8009aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa4:	320c      	adds	r2, #12
 8009aa6:	e842 3100 	strex	r1, r3, [r2]
 8009aaa:	2900      	cmp	r1, #0
 8009aac:	d1f3      	bne.n	8009a96 <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab0:	f102 0314 	add.w	r3, r2, #20
 8009ab4:	e853 3f00 	ldrex	r3, [r3]
 8009ab8:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abc:	3214      	adds	r2, #20
 8009abe:	e842 3100 	strex	r1, r3, [r2]
 8009ac2:	2900      	cmp	r1, #0
 8009ac4:	d1f3      	bne.n	8009aae <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ac6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac8:	f102 0314 	add.w	r3, r2, #20
 8009acc:	e853 3f00 	ldrex	r3, [r3]
 8009ad0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad4:	3214      	adds	r2, #20
 8009ad6:	e842 3100 	strex	r1, r3, [r2]
 8009ada:	2900      	cmp	r1, #0
 8009adc:	d1f3      	bne.n	8009ac6 <UART_Start_Receive_DMA+0x7a>
}
 8009ade:	2000      	movs	r0, #0
 8009ae0:	b003      	add	sp, #12
 8009ae2:	bd30      	pop	{r4, r5, pc}
 8009ae4:	080099b3 	.word	0x080099b3
 8009ae8:	08009995 	.word	0x08009995
 8009aec:	080095bf 	.word	0x080095bf

08009af0 <HAL_UART_Receive_DMA>:
{
 8009af0:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8009af2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	2b20      	cmp	r3, #32
 8009afa:	d108      	bne.n	8009b0e <HAL_UART_Receive_DMA+0x1e>
    if ((pData == NULL) || (Size == 0U))
 8009afc:	b149      	cbz	r1, 8009b12 <HAL_UART_Receive_DMA+0x22>
 8009afe:	b90a      	cbnz	r2, 8009b04 <HAL_UART_Receive_DMA+0x14>
      return HAL_ERROR;
 8009b00:	2001      	movs	r0, #1
}
 8009b02:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b04:	2300      	movs	r3, #0
 8009b06:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009b08:	f7ff ffa0 	bl	8009a4c <UART_Start_Receive_DMA>
 8009b0c:	e7f9      	b.n	8009b02 <HAL_UART_Receive_DMA+0x12>
    return HAL_BUSY;
 8009b0e:	2002      	movs	r0, #2
 8009b10:	e7f7      	b.n	8009b02 <HAL_UART_Receive_DMA+0x12>
      return HAL_ERROR;
 8009b12:	2001      	movs	r0, #1
 8009b14:	e7f5      	b.n	8009b02 <HAL_UART_Receive_DMA+0x12>

08009b16 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8009b16:	2884      	cmp	r0, #132	@ 0x84
 8009b18:	d001      	beq.n	8009b1e <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8009b1a:	3003      	adds	r0, #3
 8009b1c:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009b1e:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8009b20:	4770      	bx	lr

08009b22 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009b22:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8009b24:	f000 fb26 	bl	800a174 <vTaskStartScheduler>
  
  return osOK;
}
 8009b28:	2000      	movs	r0, #0
 8009b2a:	bd08      	pop	{r3, pc}

08009b2c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b30:	b087      	sub	sp, #28
 8009b32:	460e      	mov	r6, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009b34:	6944      	ldr	r4, [r0, #20]
 8009b36:	b1c4      	cbz	r4, 8009b6a <osThreadCreate+0x3e>
 8009b38:	6985      	ldr	r5, [r0, #24]
 8009b3a:	b1b5      	cbz	r5, 8009b6a <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b3c:	6847      	ldr	r7, [r0, #4]
 8009b3e:	f8d0 8000 	ldr.w	r8, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009b42:	f8d0 9010 	ldr.w	r9, [r0, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b46:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8009b4a:	f7ff ffe4 	bl	8009b16 <makeFreeRtosPriority>
 8009b4e:	9502      	str	r5, [sp, #8]
 8009b50:	9401      	str	r4, [sp, #4]
 8009b52:	9000      	str	r0, [sp, #0]
 8009b54:	4633      	mov	r3, r6
 8009b56:	464a      	mov	r2, r9
 8009b58:	4641      	mov	r1, r8
 8009b5a:	4638      	mov	r0, r7
 8009b5c:	f000 fa9c 	bl	800a098 <xTaskCreateStatic>
 8009b60:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009b62:	9805      	ldr	r0, [sp, #20]
}
 8009b64:	b007      	add	sp, #28
 8009b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b6a:	6844      	ldr	r4, [r0, #4]
 8009b6c:	6805      	ldr	r5, [r0, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009b6e:	6907      	ldr	r7, [r0, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b70:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8009b74:	f7ff ffcf 	bl	8009b16 <makeFreeRtosPriority>
 8009b78:	ab05      	add	r3, sp, #20
 8009b7a:	9301      	str	r3, [sp, #4]
 8009b7c:	9000      	str	r0, [sp, #0]
 8009b7e:	4633      	mov	r3, r6
 8009b80:	b2ba      	uxth	r2, r7
 8009b82:	4629      	mov	r1, r5
 8009b84:	4620      	mov	r0, r4
 8009b86:	f000 fac2 	bl	800a10e <xTaskCreate>
 8009b8a:	2801      	cmp	r0, #1
 8009b8c:	d0e9      	beq.n	8009b62 <osThreadCreate+0x36>
      return NULL;
 8009b8e:	2000      	movs	r0, #0
 8009b90:	e7e8      	b.n	8009b64 <osThreadCreate+0x38>

08009b92 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009b92:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009b94:	b900      	cbnz	r0, 8009b98 <osDelay+0x6>
 8009b96:	2001      	movs	r0, #1
 8009b98:	f000 fc40 	bl	800a41c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009b9c:	2000      	movs	r0, #0
 8009b9e:	bd08      	pop	{r3, pc}

08009ba0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ba0:	f100 0308 	add.w	r3, r0, #8
 8009ba4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8009baa:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bac:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bae:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009bb4:	4770      	bx	lr

08009bb6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009bba:	4770      	bx	lr

08009bbc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8009bbc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009bbe:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009bc0:	689a      	ldr	r2, [r3, #8]
 8009bc2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009bc4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009bc6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009bc8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009bca:	6803      	ldr	r3, [r0, #0]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	6003      	str	r3, [r0, #0]
}
 8009bd0:	4770      	bx	lr

08009bd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bd2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009bd4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009bd6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009bda:	d011      	beq.n	8009c00 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009bdc:	f100 0308 	add.w	r3, r0, #8
 8009be0:	461c      	mov	r4, r3
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	42aa      	cmp	r2, r5
 8009be8:	d9fa      	bls.n	8009be0 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009bea:	6863      	ldr	r3, [r4, #4]
 8009bec:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009bee:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009bf0:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8009bf2:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009bf4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009bf6:	6803      	ldr	r3, [r0, #0]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	6003      	str	r3, [r0, #0]
}
 8009bfc:	bc30      	pop	{r4, r5}
 8009bfe:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c00:	6904      	ldr	r4, [r0, #16]
 8009c02:	e7f2      	b.n	8009bea <vListInsert+0x18>

08009c04 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c04:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c06:	6841      	ldr	r1, [r0, #4]
 8009c08:	6882      	ldr	r2, [r0, #8]
 8009c0a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c0c:	6841      	ldr	r1, [r0, #4]
 8009c0e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	4282      	cmp	r2, r0
 8009c14:	d006      	beq.n	8009c24 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c16:	2200      	movs	r2, #0
 8009c18:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	3a01      	subs	r2, #1
 8009c1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c20:	6818      	ldr	r0, [r3, #0]
}
 8009c22:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c24:	6882      	ldr	r2, [r0, #8]
 8009c26:	605a      	str	r2, [r3, #4]
 8009c28:	e7f5      	b.n	8009c16 <uxListRemove+0x12>

08009c2a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009c2a:	b570      	push	{r4, r5, r6, lr}
 8009c2c:	4604      	mov	r4, r0
 8009c2e:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c30:	6b86      	ldr	r6, [r0, #56]	@ 0x38

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009c32:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8009c34:	b95a      	cbnz	r2, 8009c4e <prvCopyDataToQueue+0x24>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c36:	6803      	ldr	r3, [r0, #0]
 8009c38:	b11b      	cbz	r3, 8009c42 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8009c3a:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c3c:	3601      	adds	r6, #1
 8009c3e:	63a6      	str	r6, [r4, #56]	@ 0x38

	return xReturn;
}
 8009c40:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009c42:	6880      	ldr	r0, [r0, #8]
 8009c44:	f000 fcc0 	bl	800a5c8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	60a3      	str	r3, [r4, #8]
 8009c4c:	e7f6      	b.n	8009c3c <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8009c4e:	b96d      	cbnz	r5, 8009c6c <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c50:	6840      	ldr	r0, [r0, #4]
 8009c52:	f002 fc10 	bl	800c476 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c56:	6863      	ldr	r3, [r4, #4]
 8009c58:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8009c5a:	4413      	add	r3, r2
 8009c5c:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c5e:	68a2      	ldr	r2, [r4, #8]
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d319      	bcc.n	8009c98 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8009c68:	4628      	mov	r0, r5
 8009c6a:	e7e7      	b.n	8009c3c <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009c6c:	68c0      	ldr	r0, [r0, #12]
 8009c6e:	f002 fc02 	bl	800c476 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009c72:	68e3      	ldr	r3, [r4, #12]
 8009c74:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8009c76:	4251      	negs	r1, r2
 8009c78:	1a9b      	subs	r3, r3, r2
 8009c7a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c7c:	6822      	ldr	r2, [r4, #0]
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d202      	bcs.n	8009c88 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009c82:	68a3      	ldr	r3, [r4, #8]
 8009c84:	440b      	add	r3, r1
 8009c86:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8009c88:	2d02      	cmp	r5, #2
 8009c8a:	d001      	beq.n	8009c90 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8009c8c:	2000      	movs	r0, #0
 8009c8e:	e7d5      	b.n	8009c3c <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c90:	b126      	cbz	r6, 8009c9c <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8009c92:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8009c94:	2000      	movs	r0, #0
 8009c96:	e7d1      	b.n	8009c3c <prvCopyDataToQueue+0x12>
 8009c98:	4628      	mov	r0, r5
 8009c9a:	e7cf      	b.n	8009c3c <prvCopyDataToQueue+0x12>
 8009c9c:	2000      	movs	r0, #0
 8009c9e:	e7cd      	b.n	8009c3c <prvCopyDataToQueue+0x12>

08009ca0 <xQueueGenericSendFromISR>:
{
 8009ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8009ca4:	b190      	cbz	r0, 8009ccc <xQueueGenericSendFromISR+0x2c>
 8009ca6:	460f      	mov	r7, r1
 8009ca8:	4616      	mov	r6, r2
 8009caa:	461c      	mov	r4, r3
 8009cac:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cae:	b1b1      	cbz	r1, 8009cde <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cb0:	2c02      	cmp	r4, #2
 8009cb2:	d120      	bne.n	8009cf6 <xQueueGenericSendFromISR+0x56>
 8009cb4:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d01d      	beq.n	8009cf6 <xQueueGenericSendFromISR+0x56>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cbe:	f383 8811 	msr	BASEPRI, r3
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	f3bf 8f4f 	dsb	sy
 8009cca:	e7fe      	b.n	8009cca <xQueueGenericSendFromISR+0x2a>
 8009ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	e7fe      	b.n	8009cdc <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cde:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d0e5      	beq.n	8009cb0 <xQueueGenericSendFromISR+0x10>
 8009ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	e7fe      	b.n	8009cf4 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009cf6:	f000 fdff 	bl	800a8f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009cfa:	f3ef 8811 	mrs	r8, BASEPRI
 8009cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d0e:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8009d10:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d306      	bcc.n	8009d24 <xQueueGenericSendFromISR+0x84>
 8009d16:	2c02      	cmp	r4, #2
 8009d18:	d004      	beq.n	8009d24 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8009d1a:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d1c:	f388 8811 	msr	BASEPRI, r8
}
 8009d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8009d24:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8009d28:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d2c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d2e:	4622      	mov	r2, r4
 8009d30:	4639      	mov	r1, r7
 8009d32:	4628      	mov	r0, r5
 8009d34:	f7ff ff79 	bl	8009c2a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8009d38:	f1b9 3fff 	cmp.w	r9, #4294967295
 8009d3c:	d006      	beq.n	8009d4c <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009d3e:	f109 0301 	add.w	r3, r9, #1
 8009d42:	b25b      	sxtb	r3, r3
 8009d44:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8009d48:	2001      	movs	r0, #1
 8009d4a:	e7e7      	b.n	8009d1c <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d4c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8009d4e:	b90b      	cbnz	r3, 8009d54 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8009d50:	2001      	movs	r0, #1
 8009d52:	e7e3      	b.n	8009d1c <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d54:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8009d58:	f000 fbe0 	bl	800a51c <xTaskRemoveFromEventList>
 8009d5c:	b118      	cbz	r0, 8009d66 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8009d5e:	b126      	cbz	r6, 8009d6a <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009d60:	2001      	movs	r0, #1
 8009d62:	6030      	str	r0, [r6, #0]
 8009d64:	e7da      	b.n	8009d1c <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8009d66:	2001      	movs	r0, #1
 8009d68:	e7d8      	b.n	8009d1c <xQueueGenericSendFromISR+0x7c>
 8009d6a:	2001      	movs	r0, #1
 8009d6c:	e7d6      	b.n	8009d1c <xQueueGenericSendFromISR+0x7c>
	...

08009d70 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d70:	4b08      	ldr	r3, [pc, #32]	@ (8009d94 <prvResetNextTaskUnblockTime+0x24>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	b923      	cbnz	r3, 8009d82 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d78:	4b07      	ldr	r3, [pc, #28]	@ (8009d98 <prvResetNextTaskUnblockTime+0x28>)
 8009d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d7e:	601a      	str	r2, [r3, #0]
 8009d80:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d82:	4b04      	ldr	r3, [pc, #16]	@ (8009d94 <prvResetNextTaskUnblockTime+0x24>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	4b02      	ldr	r3, [pc, #8]	@ (8009d98 <prvResetNextTaskUnblockTime+0x28>)
 8009d8e:	601a      	str	r2, [r3, #0]
	}
}
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	20003070 	.word	0x20003070
 8009d98:	20003008 	.word	0x20003008

08009d9c <prvInitialiseNewTask>:
{
 8009d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009da0:	4680      	mov	r8, r0
 8009da2:	460d      	mov	r5, r1
 8009da4:	4617      	mov	r7, r2
 8009da6:	4699      	mov	r9, r3
 8009da8:	9e08      	ldr	r6, [sp, #32]
 8009daa:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8009dae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009db0:	0092      	lsls	r2, r2, #2
 8009db2:	21a5      	movs	r1, #165	@ 0xa5
 8009db4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8009db6:	f002 fad1 	bl	800c35c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009dba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009dbc:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8009dc0:	3a01      	subs	r2, #1
 8009dc2:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009dc6:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8009dca:	b3a5      	cbz	r5, 8009e36 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009dcc:	f04f 0c00 	mov.w	ip, #0
 8009dd0:	f1bc 0f0f 	cmp.w	ip, #15
 8009dd4:	d809      	bhi.n	8009dea <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009dd6:	f815 300c 	ldrb.w	r3, [r5, ip]
 8009dda:	eb04 020c 	add.w	r2, r4, ip
 8009dde:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8009de2:	b113      	cbz	r3, 8009dea <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009de4:	f10c 0c01 	add.w	ip, ip, #1
 8009de8:	e7f2      	b.n	8009dd0 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009dea:	2300      	movs	r3, #0
 8009dec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009df0:	2e06      	cmp	r6, #6
 8009df2:	d900      	bls.n	8009df6 <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009df4:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8009df6:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8009df8:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009dfa:	2500      	movs	r5, #0
 8009dfc:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009dfe:	1d20      	adds	r0, r4, #4
 8009e00:	f7ff fed9 	bl	8009bb6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e04:	f104 0018 	add.w	r0, r4, #24
 8009e08:	f7ff fed5 	bl	8009bb6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e0c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e0e:	f1c6 0607 	rsb	r6, r6, #7
 8009e12:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e14:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8009e16:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e18:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e1c:	464a      	mov	r2, r9
 8009e1e:	4641      	mov	r1, r8
 8009e20:	4638      	mov	r0, r7
 8009e22:	f000 fc59 	bl	800a6d8 <pxPortInitialiseStack>
 8009e26:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8009e28:	f1ba 0f00 	cmp.w	sl, #0
 8009e2c:	d001      	beq.n	8009e32 <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e2e:	f8ca 4000 	str.w	r4, [sl]
}
 8009e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e36:	2300      	movs	r3, #0
 8009e38:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8009e3c:	e7d8      	b.n	8009df0 <prvInitialiseNewTask+0x54>
	...

08009e40 <prvInitialiseTaskLists>:
{
 8009e40:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e42:	2400      	movs	r4, #0
 8009e44:	e007      	b.n	8009e56 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e46:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8009e4a:	0093      	lsls	r3, r2, #2
 8009e4c:	480e      	ldr	r0, [pc, #56]	@ (8009e88 <prvInitialiseTaskLists+0x48>)
 8009e4e:	4418      	add	r0, r3
 8009e50:	f7ff fea6 	bl	8009ba0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e54:	3401      	adds	r4, #1
 8009e56:	2c06      	cmp	r4, #6
 8009e58:	d9f5      	bls.n	8009e46 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8009e5a:	4d0c      	ldr	r5, [pc, #48]	@ (8009e8c <prvInitialiseTaskLists+0x4c>)
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	f7ff fe9f 	bl	8009ba0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e62:	4c0b      	ldr	r4, [pc, #44]	@ (8009e90 <prvInitialiseTaskLists+0x50>)
 8009e64:	4620      	mov	r0, r4
 8009e66:	f7ff fe9b 	bl	8009ba0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e6a:	480a      	ldr	r0, [pc, #40]	@ (8009e94 <prvInitialiseTaskLists+0x54>)
 8009e6c:	f7ff fe98 	bl	8009ba0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8009e70:	4809      	ldr	r0, [pc, #36]	@ (8009e98 <prvInitialiseTaskLists+0x58>)
 8009e72:	f7ff fe95 	bl	8009ba0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8009e76:	4809      	ldr	r0, [pc, #36]	@ (8009e9c <prvInitialiseTaskLists+0x5c>)
 8009e78:	f7ff fe92 	bl	8009ba0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e7c:	4b08      	ldr	r3, [pc, #32]	@ (8009ea0 <prvInitialiseTaskLists+0x60>)
 8009e7e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e80:	4b08      	ldr	r3, [pc, #32]	@ (8009ea4 <prvInitialiseTaskLists+0x64>)
 8009e82:	601c      	str	r4, [r3, #0]
}
 8009e84:	bd38      	pop	{r3, r4, r5, pc}
 8009e86:	bf00      	nop
 8009e88:	2000309c 	.word	0x2000309c
 8009e8c:	20003088 	.word	0x20003088
 8009e90:	20003074 	.word	0x20003074
 8009e94:	20003058 	.word	0x20003058
 8009e98:	20003044 	.word	0x20003044
 8009e9c:	2000302c 	.word	0x2000302c
 8009ea0:	20003070 	.word	0x20003070
 8009ea4:	2000306c 	.word	0x2000306c

08009ea8 <prvAddNewTaskToReadyList>:
{
 8009ea8:	b510      	push	{r4, lr}
 8009eaa:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009eac:	f000 fc3a 	bl	800a724 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8009eb0:	4a22      	ldr	r2, [pc, #136]	@ (8009f3c <prvAddNewTaskToReadyList+0x94>)
 8009eb2:	6813      	ldr	r3, [r2, #0]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009eb8:	4b21      	ldr	r3, [pc, #132]	@ (8009f40 <prvAddNewTaskToReadyList+0x98>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	b15b      	cbz	r3, 8009ed6 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8009ebe:	4b21      	ldr	r3, [pc, #132]	@ (8009f44 <prvAddNewTaskToReadyList+0x9c>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	b96b      	cbnz	r3, 8009ee0 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8009f40 <prvAddNewTaskToReadyList+0x98>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d807      	bhi.n	8009ee0 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8009ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8009f40 <prvAddNewTaskToReadyList+0x98>)
 8009ed2:	601c      	str	r4, [r3, #0]
 8009ed4:	e004      	b.n	8009ee0 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8009ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8009f40 <prvAddNewTaskToReadyList+0x98>)
 8009ed8:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009eda:	6813      	ldr	r3, [r2, #0]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d029      	beq.n	8009f34 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8009ee0:	4a19      	ldr	r2, [pc, #100]	@ (8009f48 <prvAddNewTaskToReadyList+0xa0>)
 8009ee2:	6813      	ldr	r3, [r2, #0]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ee8:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8009eea:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8009eec:	2301      	movs	r3, #1
 8009eee:	4083      	lsls	r3, r0
 8009ef0:	4a16      	ldr	r2, [pc, #88]	@ (8009f4c <prvAddNewTaskToReadyList+0xa4>)
 8009ef2:	6811      	ldr	r1, [r2, #0]
 8009ef4:	430b      	orrs	r3, r1
 8009ef6:	6013      	str	r3, [r2, #0]
 8009ef8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009efc:	1d21      	adds	r1, r4, #4
 8009efe:	4b14      	ldr	r3, [pc, #80]	@ (8009f50 <prvAddNewTaskToReadyList+0xa8>)
 8009f00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f04:	f7ff fe5a 	bl	8009bbc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009f08:	f000 fc2e 	bl	800a768 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8009f44 <prvAddNewTaskToReadyList+0x9c>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	b17b      	cbz	r3, 8009f32 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f12:	4b0b      	ldr	r3, [pc, #44]	@ (8009f40 <prvAddNewTaskToReadyList+0x98>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f18:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d209      	bcs.n	8009f32 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8009f1e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f26:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	f3bf 8f6f 	isb	sy
}
 8009f32:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8009f34:	f7ff ff84 	bl	8009e40 <prvInitialiseTaskLists>
 8009f38:	e7d2      	b.n	8009ee0 <prvAddNewTaskToReadyList+0x38>
 8009f3a:	bf00      	nop
 8009f3c:	20003028 	.word	0x20003028
 8009f40:	20003128 	.word	0x20003128
 8009f44:	2000301c 	.word	0x2000301c
 8009f48:	2000300c 	.word	0x2000300c
 8009f4c:	20003020 	.word	0x20003020
 8009f50:	2000309c 	.word	0x2000309c

08009f54 <prvDeleteTCB>:
	{
 8009f54:	b510      	push	{r4, lr}
 8009f56:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f58:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 8009f5c:	b163      	cbz	r3, 8009f78 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d011      	beq.n	8009f86 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f62:	2b02      	cmp	r3, #2
 8009f64:	d00e      	beq.n	8009f84 <prvDeleteTCB+0x30>
	__asm volatile
 8009f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f6a:	f383 8811 	msr	BASEPRI, r3
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	f3bf 8f4f 	dsb	sy
 8009f76:	e7fe      	b.n	8009f76 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8009f78:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8009f7a:	f000 fdd9 	bl	800ab30 <vPortFree>
				vPortFree( pxTCB );
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f000 fdd6 	bl	800ab30 <vPortFree>
	}
 8009f84:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8009f86:	f000 fdd3 	bl	800ab30 <vPortFree>
 8009f8a:	e7fb      	b.n	8009f84 <prvDeleteTCB+0x30>

08009f8c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8009fcc <prvCheckTasksWaitingTermination+0x40>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	b1d3      	cbz	r3, 8009fc8 <prvCheckTasksWaitingTermination+0x3c>
{
 8009f92:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8009f94:	f000 fbc6 	bl	800a724 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f98:	4b0d      	ldr	r3, [pc, #52]	@ (8009fd0 <prvCheckTasksWaitingTermination+0x44>)
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f9e:	1d20      	adds	r0, r4, #4
 8009fa0:	f7ff fe30 	bl	8009c04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009fa4:	4a0b      	ldr	r2, [pc, #44]	@ (8009fd4 <prvCheckTasksWaitingTermination+0x48>)
 8009fa6:	6813      	ldr	r3, [r2, #0]
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009fac:	4a07      	ldr	r2, [pc, #28]	@ (8009fcc <prvCheckTasksWaitingTermination+0x40>)
 8009fae:	6813      	ldr	r3, [r2, #0]
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8009fb4:	f000 fbd8 	bl	800a768 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8009fb8:	4620      	mov	r0, r4
 8009fba:	f7ff ffcb 	bl	8009f54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009fbe:	4b03      	ldr	r3, [pc, #12]	@ (8009fcc <prvCheckTasksWaitingTermination+0x40>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1e6      	bne.n	8009f94 <prvCheckTasksWaitingTermination+0x8>
}
 8009fc6:	bd10      	pop	{r4, pc}
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	20003040 	.word	0x20003040
 8009fd0:	20003044 	.word	0x20003044
 8009fd4:	20003028 	.word	0x20003028

08009fd8 <prvIdleTask>:
{
 8009fd8:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8009fda:	f7ff ffd7 	bl	8009f8c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009fde:	4b07      	ldr	r3, [pc, #28]	@ (8009ffc <prvIdleTask+0x24>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d9f9      	bls.n	8009fda <prvIdleTask+0x2>
				taskYIELD();
 8009fe6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009fea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fee:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009ff2:	f3bf 8f4f 	dsb	sy
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	e7ee      	b.n	8009fda <prvIdleTask+0x2>
 8009ffc:	2000309c 	.word	0x2000309c

0800a000 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a000:	b570      	push	{r4, r5, r6, lr}
 800a002:	4604      	mov	r4, r0
 800a004:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a006:	4b1d      	ldr	r3, [pc, #116]	@ (800a07c <prvAddCurrentTaskToDelayedList+0x7c>)
 800a008:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a00a:	4b1d      	ldr	r3, [pc, #116]	@ (800a080 <prvAddCurrentTaskToDelayedList+0x80>)
 800a00c:	6818      	ldr	r0, [r3, #0]
 800a00e:	3004      	adds	r0, #4
 800a010:	f7ff fdf8 	bl	8009c04 <uxListRemove>
 800a014:	b948      	cbnz	r0, 800a02a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a016:	4b1a      	ldr	r3, [pc, #104]	@ (800a080 <prvAddCurrentTaskToDelayedList+0x80>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a01c:	2201      	movs	r2, #1
 800a01e:	409a      	lsls	r2, r3
 800a020:	4918      	ldr	r1, [pc, #96]	@ (800a084 <prvAddCurrentTaskToDelayedList+0x84>)
 800a022:	680b      	ldr	r3, [r1, #0]
 800a024:	ea23 0302 	bic.w	r3, r3, r2
 800a028:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a02a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a02e:	d00d      	beq.n	800a04c <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a030:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a032:	4b13      	ldr	r3, [pc, #76]	@ (800a080 <prvAddCurrentTaskToDelayedList+0x80>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800a038:	42a6      	cmp	r6, r4
 800a03a:	d910      	bls.n	800a05e <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a03c:	4b12      	ldr	r3, [pc, #72]	@ (800a088 <prvAddCurrentTaskToDelayedList+0x88>)
 800a03e:	6818      	ldr	r0, [r3, #0]
 800a040:	4b0f      	ldr	r3, [pc, #60]	@ (800a080 <prvAddCurrentTaskToDelayedList+0x80>)
 800a042:	6819      	ldr	r1, [r3, #0]
 800a044:	3104      	adds	r1, #4
 800a046:	f7ff fdc4 	bl	8009bd2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a04a:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a04c:	2d00      	cmp	r5, #0
 800a04e:	d0ef      	beq.n	800a030 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a050:	4b0b      	ldr	r3, [pc, #44]	@ (800a080 <prvAddCurrentTaskToDelayedList+0x80>)
 800a052:	6819      	ldr	r1, [r3, #0]
 800a054:	3104      	adds	r1, #4
 800a056:	480d      	ldr	r0, [pc, #52]	@ (800a08c <prvAddCurrentTaskToDelayedList+0x8c>)
 800a058:	f7ff fdb0 	bl	8009bbc <vListInsertEnd>
 800a05c:	e7f5      	b.n	800a04a <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a05e:	4b0c      	ldr	r3, [pc, #48]	@ (800a090 <prvAddCurrentTaskToDelayedList+0x90>)
 800a060:	6818      	ldr	r0, [r3, #0]
 800a062:	4b07      	ldr	r3, [pc, #28]	@ (800a080 <prvAddCurrentTaskToDelayedList+0x80>)
 800a064:	6819      	ldr	r1, [r3, #0]
 800a066:	3104      	adds	r1, #4
 800a068:	f7ff fdb3 	bl	8009bd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a06c:	4b09      	ldr	r3, [pc, #36]	@ (800a094 <prvAddCurrentTaskToDelayedList+0x94>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	42a3      	cmp	r3, r4
 800a072:	d9ea      	bls.n	800a04a <prvAddCurrentTaskToDelayedList+0x4a>
					xNextTaskUnblockTime = xTimeToWake;
 800a074:	4b07      	ldr	r3, [pc, #28]	@ (800a094 <prvAddCurrentTaskToDelayedList+0x94>)
 800a076:	601c      	str	r4, [r3, #0]
}
 800a078:	e7e7      	b.n	800a04a <prvAddCurrentTaskToDelayedList+0x4a>
 800a07a:	bf00      	nop
 800a07c:	20003024 	.word	0x20003024
 800a080:	20003128 	.word	0x20003128
 800a084:	20003020 	.word	0x20003020
 800a088:	2000306c 	.word	0x2000306c
 800a08c:	2000302c 	.word	0x2000302c
 800a090:	20003070 	.word	0x20003070
 800a094:	20003008 	.word	0x20003008

0800a098 <xTaskCreateStatic>:
	{
 800a098:	b530      	push	{r4, r5, lr}
 800a09a:	b087      	sub	sp, #28
 800a09c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800a09e:	b17c      	cbz	r4, 800a0c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a0a0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800a0a2:	b1b5      	cbz	r5, 800a0d2 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800a0a4:	255c      	movs	r5, #92	@ 0x5c
 800a0a6:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a0a8:	9d04      	ldr	r5, [sp, #16]
 800a0aa:	2d5c      	cmp	r5, #92	@ 0x5c
 800a0ac:	d01a      	beq.n	800a0e4 <xTaskCreateStatic+0x4c>
 800a0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	e7fe      	b.n	800a0be <xTaskCreateStatic+0x26>
 800a0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c4:	f383 8811 	msr	BASEPRI, r3
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	e7fe      	b.n	800a0d0 <xTaskCreateStatic+0x38>
 800a0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d6:	f383 8811 	msr	BASEPRI, r3
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	e7fe      	b.n	800a0e2 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a0e4:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a0e6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800a0e8:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a0ea:	2402      	movs	r4, #2
 800a0ec:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a0f0:	2400      	movs	r4, #0
 800a0f2:	9403      	str	r4, [sp, #12]
 800a0f4:	9502      	str	r5, [sp, #8]
 800a0f6:	ac05      	add	r4, sp, #20
 800a0f8:	9401      	str	r4, [sp, #4]
 800a0fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a0fc:	9400      	str	r4, [sp, #0]
 800a0fe:	f7ff fe4d 	bl	8009d9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a102:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800a104:	f7ff fed0 	bl	8009ea8 <prvAddNewTaskToReadyList>
	}
 800a108:	9805      	ldr	r0, [sp, #20]
 800a10a:	b007      	add	sp, #28
 800a10c:	bd30      	pop	{r4, r5, pc}

0800a10e <xTaskCreate>:
	{
 800a10e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a112:	b085      	sub	sp, #20
 800a114:	4607      	mov	r7, r0
 800a116:	4688      	mov	r8, r1
 800a118:	4614      	mov	r4, r2
 800a11a:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a11c:	0090      	lsls	r0, r2, #2
 800a11e:	f000 fc7b 	bl	800aa18 <pvPortMalloc>
			if( pxStack != NULL )
 800a122:	b308      	cbz	r0, 800a168 <xTaskCreate+0x5a>
 800a124:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a126:	205c      	movs	r0, #92	@ 0x5c
 800a128:	f000 fc76 	bl	800aa18 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800a12c:	4605      	mov	r5, r0
 800a12e:	b1a8      	cbz	r0, 800a15c <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800a130:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a134:	2300      	movs	r3, #0
 800a136:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a13a:	9303      	str	r3, [sp, #12]
 800a13c:	9002      	str	r0, [sp, #8]
 800a13e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a140:	9301      	str	r3, [sp, #4]
 800a142:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	4633      	mov	r3, r6
 800a148:	4622      	mov	r2, r4
 800a14a:	4641      	mov	r1, r8
 800a14c:	4638      	mov	r0, r7
 800a14e:	f7ff fe25 	bl	8009d9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a152:	4628      	mov	r0, r5
 800a154:	f7ff fea8 	bl	8009ea8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a158:	2001      	movs	r0, #1
 800a15a:	e007      	b.n	800a16c <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800a15c:	4648      	mov	r0, r9
 800a15e:	f000 fce7 	bl	800ab30 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a162:	f04f 30ff 	mov.w	r0, #4294967295
 800a166:	e001      	b.n	800a16c <xTaskCreate+0x5e>
 800a168:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800a16c:	b005      	add	sp, #20
 800a16e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800a174 <vTaskStartScheduler>:
{
 800a174:	b510      	push	{r4, lr}
 800a176:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a178:	2400      	movs	r4, #0
 800a17a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a17c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a17e:	aa07      	add	r2, sp, #28
 800a180:	a906      	add	r1, sp, #24
 800a182:	a805      	add	r0, sp, #20
 800a184:	f7fc fc68 	bl	8006a58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a188:	9b05      	ldr	r3, [sp, #20]
 800a18a:	9302      	str	r3, [sp, #8]
 800a18c:	9b06      	ldr	r3, [sp, #24]
 800a18e:	9301      	str	r3, [sp, #4]
 800a190:	9400      	str	r4, [sp, #0]
 800a192:	4623      	mov	r3, r4
 800a194:	9a07      	ldr	r2, [sp, #28]
 800a196:	490e      	ldr	r1, [pc, #56]	@ (800a1d0 <vTaskStartScheduler+0x5c>)
 800a198:	480e      	ldr	r0, [pc, #56]	@ (800a1d4 <vTaskStartScheduler+0x60>)
 800a19a:	f7ff ff7d 	bl	800a098 <xTaskCreateStatic>
 800a19e:	4b0e      	ldr	r3, [pc, #56]	@ (800a1d8 <vTaskStartScheduler+0x64>)
 800a1a0:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800a1a2:	b190      	cbz	r0, 800a1ca <vTaskStartScheduler+0x56>
 800a1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a8:	f383 8811 	msr	BASEPRI, r3
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1b4:	4b09      	ldr	r3, [pc, #36]	@ (800a1dc <vTaskStartScheduler+0x68>)
 800a1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a1bc:	4b08      	ldr	r3, [pc, #32]	@ (800a1e0 <vTaskStartScheduler+0x6c>)
 800a1be:	2201      	movs	r2, #1
 800a1c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a1c2:	4b08      	ldr	r3, [pc, #32]	@ (800a1e4 <vTaskStartScheduler+0x70>)
 800a1c4:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800a1c6:	f000 fb37 	bl	800a838 <xPortStartScheduler>
}
 800a1ca:	b008      	add	sp, #32
 800a1cc:	bd10      	pop	{r4, pc}
 800a1ce:	bf00      	nop
 800a1d0:	080100dc 	.word	0x080100dc
 800a1d4:	08009fd9 	.word	0x08009fd9
 800a1d8:	20003004 	.word	0x20003004
 800a1dc:	20003008 	.word	0x20003008
 800a1e0:	2000301c 	.word	0x2000301c
 800a1e4:	20003024 	.word	0x20003024

0800a1e8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800a1e8:	4a02      	ldr	r2, [pc, #8]	@ (800a1f4 <vTaskSuspendAll+0xc>)
 800a1ea:	6813      	ldr	r3, [r2, #0]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	6013      	str	r3, [r2, #0]
}
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	20003000 	.word	0x20003000

0800a1f8 <xTaskIncrementTick>:
{
 800a1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1fa:	4b3f      	ldr	r3, [pc, #252]	@ (800a2f8 <xTaskIncrementTick+0x100>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d170      	bne.n	800a2e4 <xTaskIncrementTick+0xec>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a202:	4b3e      	ldr	r3, [pc, #248]	@ (800a2fc <xTaskIncrementTick+0x104>)
 800a204:	681d      	ldr	r5, [r3, #0]
 800a206:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800a208:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a20a:	b9c5      	cbnz	r5, 800a23e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800a20c:	4b3c      	ldr	r3, [pc, #240]	@ (800a300 <xTaskIncrementTick+0x108>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	b143      	cbz	r3, 800a226 <xTaskIncrementTick+0x2e>
 800a214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	e7fe      	b.n	800a224 <xTaskIncrementTick+0x2c>
 800a226:	4a36      	ldr	r2, [pc, #216]	@ (800a300 <xTaskIncrementTick+0x108>)
 800a228:	6811      	ldr	r1, [r2, #0]
 800a22a:	4b36      	ldr	r3, [pc, #216]	@ (800a304 <xTaskIncrementTick+0x10c>)
 800a22c:	6818      	ldr	r0, [r3, #0]
 800a22e:	6010      	str	r0, [r2, #0]
 800a230:	6019      	str	r1, [r3, #0]
 800a232:	4a35      	ldr	r2, [pc, #212]	@ (800a308 <xTaskIncrementTick+0x110>)
 800a234:	6813      	ldr	r3, [r2, #0]
 800a236:	3301      	adds	r3, #1
 800a238:	6013      	str	r3, [r2, #0]
 800a23a:	f7ff fd99 	bl	8009d70 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a23e:	4b33      	ldr	r3, [pc, #204]	@ (800a30c <xTaskIncrementTick+0x114>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	42ab      	cmp	r3, r5
 800a244:	d941      	bls.n	800a2ca <xTaskIncrementTick+0xd2>
BaseType_t xSwitchRequired = pdFALSE;
 800a246:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a248:	4b31      	ldr	r3, [pc, #196]	@ (800a310 <xTaskIncrementTick+0x118>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a24e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a252:	009a      	lsls	r2, r3, #2
 800a254:	4b2f      	ldr	r3, [pc, #188]	@ (800a314 <xTaskIncrementTick+0x11c>)
 800a256:	589b      	ldr	r3, [r3, r2]
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d900      	bls.n	800a25e <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800a25c:	2701      	movs	r7, #1
			if( xPendedTicks == ( TickType_t ) 0 )
 800a25e:	4b2e      	ldr	r3, [pc, #184]	@ (800a318 <xTaskIncrementTick+0x120>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d03b      	beq.n	800a2de <xTaskIncrementTick+0xe6>
			if( xYieldPending != pdFALSE )
 800a266:	4b2d      	ldr	r3, [pc, #180]	@ (800a31c <xTaskIncrementTick+0x124>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d041      	beq.n	800a2f2 <xTaskIncrementTick+0xfa>
				xSwitchRequired = pdTRUE;
 800a26e:	2701      	movs	r7, #1
	return xSwitchRequired;
 800a270:	e03f      	b.n	800a2f2 <xTaskIncrementTick+0xfa>
							xSwitchRequired = pdTRUE;
 800a272:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a274:	4b22      	ldr	r3, [pc, #136]	@ (800a300 <xTaskIncrementTick+0x108>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	b343      	cbz	r3, 800a2ce <xTaskIncrementTick+0xd6>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a27c:	4b20      	ldr	r3, [pc, #128]	@ (800a300 <xTaskIncrementTick+0x108>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a284:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800a286:	429d      	cmp	r5, r3
 800a288:	d326      	bcc.n	800a2d8 <xTaskIncrementTick+0xe0>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a28a:	1d26      	adds	r6, r4, #4
 800a28c:	4630      	mov	r0, r6
 800a28e:	f7ff fcb9 	bl	8009c04 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a292:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a294:	b11b      	cbz	r3, 800a29e <xTaskIncrementTick+0xa6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a296:	f104 0018 	add.w	r0, r4, #24
 800a29a:	f7ff fcb3 	bl	8009c04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a29e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	409a      	lsls	r2, r3
 800a2a4:	491e      	ldr	r1, [pc, #120]	@ (800a320 <xTaskIncrementTick+0x128>)
 800a2a6:	6808      	ldr	r0, [r1, #0]
 800a2a8:	4302      	orrs	r2, r0
 800a2aa:	600a      	str	r2, [r1, #0]
 800a2ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a2b0:	009a      	lsls	r2, r3, #2
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	4817      	ldr	r0, [pc, #92]	@ (800a314 <xTaskIncrementTick+0x11c>)
 800a2b6:	4410      	add	r0, r2
 800a2b8:	f7ff fc80 	bl	8009bbc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2bc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a2be:	4b14      	ldr	r3, [pc, #80]	@ (800a310 <xTaskIncrementTick+0x118>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d2d4      	bcs.n	800a272 <xTaskIncrementTick+0x7a>
 800a2c8:	e7d4      	b.n	800a274 <xTaskIncrementTick+0x7c>
BaseType_t xSwitchRequired = pdFALSE;
 800a2ca:	2700      	movs	r7, #0
 800a2cc:	e7d2      	b.n	800a274 <xTaskIncrementTick+0x7c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2ce:	4b0f      	ldr	r3, [pc, #60]	@ (800a30c <xTaskIncrementTick+0x114>)
 800a2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d4:	601a      	str	r2, [r3, #0]
					break;
 800a2d6:	e7b7      	b.n	800a248 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800a2d8:	4a0c      	ldr	r2, [pc, #48]	@ (800a30c <xTaskIncrementTick+0x114>)
 800a2da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a2dc:	e7b4      	b.n	800a248 <xTaskIncrementTick+0x50>
				vApplicationTickHook();
 800a2de:	f7fc fbb7 	bl	8006a50 <vApplicationTickHook>
 800a2e2:	e7c0      	b.n	800a266 <xTaskIncrementTick+0x6e>
		++xPendedTicks;
 800a2e4:	4a0c      	ldr	r2, [pc, #48]	@ (800a318 <xTaskIncrementTick+0x120>)
 800a2e6:	6813      	ldr	r3, [r2, #0]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
 800a2ec:	f7fc fbb0 	bl	8006a50 <vApplicationTickHook>
BaseType_t xSwitchRequired = pdFALSE;
 800a2f0:	2700      	movs	r7, #0
}
 800a2f2:	4638      	mov	r0, r7
 800a2f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	20003000 	.word	0x20003000
 800a2fc:	20003024 	.word	0x20003024
 800a300:	20003070 	.word	0x20003070
 800a304:	2000306c 	.word	0x2000306c
 800a308:	20003010 	.word	0x20003010
 800a30c:	20003008 	.word	0x20003008
 800a310:	20003128 	.word	0x20003128
 800a314:	2000309c 	.word	0x2000309c
 800a318:	20003018 	.word	0x20003018
 800a31c:	20003014 	.word	0x20003014
 800a320:	20003020 	.word	0x20003020

0800a324 <xTaskResumeAll>:
{
 800a324:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800a326:	4b35      	ldr	r3, [pc, #212]	@ (800a3fc <xTaskResumeAll+0xd8>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	b943      	cbnz	r3, 800a33e <xTaskResumeAll+0x1a>
 800a32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a330:	f383 8811 	msr	BASEPRI, r3
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	e7fe      	b.n	800a33c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800a33e:	f000 f9f1 	bl	800a724 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800a342:	4b2e      	ldr	r3, [pc, #184]	@ (800a3fc <xTaskResumeAll+0xd8>)
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	3a01      	subs	r2, #1
 800a348:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d14f      	bne.n	800a3f0 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a350:	4b2b      	ldr	r3, [pc, #172]	@ (800a400 <xTaskResumeAll+0xdc>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	b90b      	cbnz	r3, 800a35a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800a356:	2400      	movs	r4, #0
 800a358:	e04b      	b.n	800a3f2 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800a35a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a35c:	4b29      	ldr	r3, [pc, #164]	@ (800a404 <xTaskResumeAll+0xe0>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	b31b      	cbz	r3, 800a3aa <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a362:	4b28      	ldr	r3, [pc, #160]	@ (800a404 <xTaskResumeAll+0xe0>)
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a368:	f104 0018 	add.w	r0, r4, #24
 800a36c:	f7ff fc4a 	bl	8009c04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a370:	1d25      	adds	r5, r4, #4
 800a372:	4628      	mov	r0, r5
 800a374:	f7ff fc46 	bl	8009c04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a378:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800a37a:	2301      	movs	r3, #1
 800a37c:	4083      	lsls	r3, r0
 800a37e:	4a22      	ldr	r2, [pc, #136]	@ (800a408 <xTaskResumeAll+0xe4>)
 800a380:	6811      	ldr	r1, [r2, #0]
 800a382:	430b      	orrs	r3, r1
 800a384:	6013      	str	r3, [r2, #0]
 800a386:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a38a:	4629      	mov	r1, r5
 800a38c:	4b1f      	ldr	r3, [pc, #124]	@ (800a40c <xTaskResumeAll+0xe8>)
 800a38e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a392:	f7ff fc13 	bl	8009bbc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a396:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a398:	4b1d      	ldr	r3, [pc, #116]	@ (800a410 <xTaskResumeAll+0xec>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d3dc      	bcc.n	800a35c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800a3a2:	4b1c      	ldr	r3, [pc, #112]	@ (800a414 <xTaskResumeAll+0xf0>)
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	601a      	str	r2, [r3, #0]
 800a3a8:	e7d8      	b.n	800a35c <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800a3aa:	b10c      	cbz	r4, 800a3b0 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800a3ac:	f7ff fce0 	bl	8009d70 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a3b0:	4b19      	ldr	r3, [pc, #100]	@ (800a418 <xTaskResumeAll+0xf4>)
 800a3b2:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800a3b4:	b984      	cbnz	r4, 800a3d8 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800a3b6:	4b17      	ldr	r3, [pc, #92]	@ (800a414 <xTaskResumeAll+0xf0>)
 800a3b8:	681c      	ldr	r4, [r3, #0]
 800a3ba:	b1d4      	cbz	r4, 800a3f2 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800a3bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a3c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800a3d0:	2401      	movs	r4, #1
 800a3d2:	e00e      	b.n	800a3f2 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a3d4:	3c01      	subs	r4, #1
 800a3d6:	d007      	beq.n	800a3e8 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800a3d8:	f7ff ff0e 	bl	800a1f8 <xTaskIncrementTick>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d0f9      	beq.n	800a3d4 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800a3e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a414 <xTaskResumeAll+0xf0>)
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	601a      	str	r2, [r3, #0]
 800a3e6:	e7f5      	b.n	800a3d4 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800a3e8:	4b0b      	ldr	r3, [pc, #44]	@ (800a418 <xTaskResumeAll+0xf4>)
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	601a      	str	r2, [r3, #0]
 800a3ee:	e7e2      	b.n	800a3b6 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800a3f0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a3f2:	f000 f9b9 	bl	800a768 <vPortExitCritical>
}
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	bd38      	pop	{r3, r4, r5, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20003000 	.word	0x20003000
 800a400:	20003028 	.word	0x20003028
 800a404:	20003058 	.word	0x20003058
 800a408:	20003020 	.word	0x20003020
 800a40c:	2000309c 	.word	0x2000309c
 800a410:	20003128 	.word	0x20003128
 800a414:	20003014 	.word	0x20003014
 800a418:	20003018 	.word	0x20003018

0800a41c <vTaskDelay>:
	{
 800a41c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a41e:	b1a8      	cbz	r0, 800a44c <vTaskDelay+0x30>
 800a420:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800a422:	4b10      	ldr	r3, [pc, #64]	@ (800a464 <vTaskDelay+0x48>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	b143      	cbz	r3, 800a43a <vTaskDelay+0x1e>
 800a428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a42c:	f383 8811 	msr	BASEPRI, r3
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	e7fe      	b.n	800a438 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800a43a:	f7ff fed5 	bl	800a1e8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a43e:	2100      	movs	r1, #0
 800a440:	4620      	mov	r0, r4
 800a442:	f7ff fddd 	bl	800a000 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800a446:	f7ff ff6d 	bl	800a324 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800a44a:	b948      	cbnz	r0, 800a460 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800a44c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a450:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a454:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	f3bf 8f6f 	isb	sy
	}
 800a460:	bd10      	pop	{r4, pc}
 800a462:	bf00      	nop
 800a464:	20003000 	.word	0x20003000

0800a468 <vTaskSwitchContext>:
{
 800a468:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a46a:	4b27      	ldr	r3, [pc, #156]	@ (800a508 <vTaskSwitchContext+0xa0>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	b11b      	cbz	r3, 800a478 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800a470:	4b26      	ldr	r3, [pc, #152]	@ (800a50c <vTaskSwitchContext+0xa4>)
 800a472:	2201      	movs	r2, #1
 800a474:	601a      	str	r2, [r3, #0]
}
 800a476:	bd08      	pop	{r3, pc}
		xYieldPending = pdFALSE;
 800a478:	4b24      	ldr	r3, [pc, #144]	@ (800a50c <vTaskSwitchContext+0xa4>)
 800a47a:	2200      	movs	r2, #0
 800a47c:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a47e:	4b24      	ldr	r3, [pc, #144]	@ (800a510 <vTaskSwitchContext+0xa8>)
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	6812      	ldr	r2, [r2, #0]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a488:	429a      	cmp	r2, r3
 800a48a:	d915      	bls.n	800a4b8 <vTaskSwitchContext+0x50>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a48c:	4b21      	ldr	r3, [pc, #132]	@ (800a514 <vTaskSwitchContext+0xac>)
 800a48e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a490:	fab3 f383 	clz	r3, r3
 800a494:	b2db      	uxtb	r3, r3
 800a496:	f1c3 031f 	rsb	r3, r3, #31
 800a49a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800a49e:	008a      	lsls	r2, r1, #2
 800a4a0:	491d      	ldr	r1, [pc, #116]	@ (800a518 <vTaskSwitchContext+0xb0>)
 800a4a2:	588a      	ldr	r2, [r1, r2]
 800a4a4:	b97a      	cbnz	r2, 800a4c6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	e7fe      	b.n	800a4b6 <vTaskSwitchContext+0x4e>
		taskCHECK_FOR_STACK_OVERFLOW();
 800a4b8:	4b15      	ldr	r3, [pc, #84]	@ (800a510 <vTaskSwitchContext+0xa8>)
 800a4ba:	6818      	ldr	r0, [r3, #0]
 800a4bc:	6819      	ldr	r1, [r3, #0]
 800a4be:	3134      	adds	r1, #52	@ 0x34
 800a4c0:	f7fc fac7 	bl	8006a52 <vApplicationStackOverflowHook>
 800a4c4:	e7e2      	b.n	800a48c <vTaskSwitchContext+0x24>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4c6:	4814      	ldr	r0, [pc, #80]	@ (800a518 <vTaskSwitchContext+0xb0>)
 800a4c8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800a4cc:	008a      	lsls	r2, r1, #2
 800a4ce:	4402      	add	r2, r0
 800a4d0:	6851      	ldr	r1, [r2, #4]
 800a4d2:	6849      	ldr	r1, [r1, #4]
 800a4d4:	6051      	str	r1, [r2, #4]
 800a4d6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800a4da:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800a4de:	3208      	adds	r2, #8
 800a4e0:	4402      	add	r2, r0
 800a4e2:	4291      	cmp	r1, r2
 800a4e4:	d009      	beq.n	800a4fa <vTaskSwitchContext+0x92>
 800a4e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a4ea:	009a      	lsls	r2, r3, #2
 800a4ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a518 <vTaskSwitchContext+0xb0>)
 800a4ee:	4413      	add	r3, r2
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	68da      	ldr	r2, [r3, #12]
 800a4f4:	4b06      	ldr	r3, [pc, #24]	@ (800a510 <vTaskSwitchContext+0xa8>)
 800a4f6:	601a      	str	r2, [r3, #0]
}
 800a4f8:	e7bd      	b.n	800a476 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4fa:	6848      	ldr	r0, [r1, #4]
 800a4fc:	4662      	mov	r2, ip
 800a4fe:	0091      	lsls	r1, r2, #2
 800a500:	4a05      	ldr	r2, [pc, #20]	@ (800a518 <vTaskSwitchContext+0xb0>)
 800a502:	440a      	add	r2, r1
 800a504:	6050      	str	r0, [r2, #4]
 800a506:	e7ee      	b.n	800a4e6 <vTaskSwitchContext+0x7e>
 800a508:	20003000 	.word	0x20003000
 800a50c:	20003014 	.word	0x20003014
 800a510:	20003128 	.word	0x20003128
 800a514:	20003020 	.word	0x20003020
 800a518:	2000309c 	.word	0x2000309c

0800a51c <xTaskRemoveFromEventList>:
{
 800a51c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a51e:	68c3      	ldr	r3, [r0, #12]
 800a520:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800a522:	b324      	cbz	r4, 800a56e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a524:	f104 0518 	add.w	r5, r4, #24
 800a528:	4628      	mov	r0, r5
 800a52a:	f7ff fb6b 	bl	8009c04 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a52e:	4b18      	ldr	r3, [pc, #96]	@ (800a590 <xTaskRemoveFromEventList+0x74>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	bb2b      	cbnz	r3, 800a580 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a534:	1d25      	adds	r5, r4, #4
 800a536:	4628      	mov	r0, r5
 800a538:	f7ff fb64 	bl	8009c04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a53c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800a53e:	2301      	movs	r3, #1
 800a540:	4083      	lsls	r3, r0
 800a542:	4a14      	ldr	r2, [pc, #80]	@ (800a594 <xTaskRemoveFromEventList+0x78>)
 800a544:	6811      	ldr	r1, [r2, #0]
 800a546:	430b      	orrs	r3, r1
 800a548:	6013      	str	r3, [r2, #0]
 800a54a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a54e:	4629      	mov	r1, r5
 800a550:	4b11      	ldr	r3, [pc, #68]	@ (800a598 <xTaskRemoveFromEventList+0x7c>)
 800a552:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a556:	f7ff fb31 	bl	8009bbc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a55a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a55c:	4b0f      	ldr	r3, [pc, #60]	@ (800a59c <xTaskRemoveFromEventList+0x80>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a562:	429a      	cmp	r2, r3
 800a564:	d911      	bls.n	800a58a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800a566:	2001      	movs	r0, #1
 800a568:	4b0d      	ldr	r3, [pc, #52]	@ (800a5a0 <xTaskRemoveFromEventList+0x84>)
 800a56a:	6018      	str	r0, [r3, #0]
}
 800a56c:	bd38      	pop	{r3, r4, r5, pc}
 800a56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	e7fe      	b.n	800a57e <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a580:	4629      	mov	r1, r5
 800a582:	4808      	ldr	r0, [pc, #32]	@ (800a5a4 <xTaskRemoveFromEventList+0x88>)
 800a584:	f7ff fb1a 	bl	8009bbc <vListInsertEnd>
 800a588:	e7e7      	b.n	800a55a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800a58a:	2000      	movs	r0, #0
	return xReturn;
 800a58c:	e7ee      	b.n	800a56c <xTaskRemoveFromEventList+0x50>
 800a58e:	bf00      	nop
 800a590:	20003000 	.word	0x20003000
 800a594:	20003020 	.word	0x20003020
 800a598:	2000309c 	.word	0x2000309c
 800a59c:	20003128 	.word	0x20003128
 800a5a0:	20003014 	.word	0x20003014
 800a5a4:	20003058 	.word	0x20003058

0800a5a8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a5a8:	4b05      	ldr	r3, [pc, #20]	@ (800a5c0 <xTaskGetSchedulerState+0x18>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	b133      	cbz	r3, 800a5bc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5ae:	4b05      	ldr	r3, [pc, #20]	@ (800a5c4 <xTaskGetSchedulerState+0x1c>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	b10b      	cbz	r3, 800a5b8 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800a5b4:	2000      	movs	r0, #0
	}
 800a5b6:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800a5b8:	2002      	movs	r0, #2
 800a5ba:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a5bc:	2001      	movs	r0, #1
 800a5be:	4770      	bx	lr
 800a5c0:	2000301c 	.word	0x2000301c
 800a5c4:	20003000 	.word	0x20003000

0800a5c8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d04b      	beq.n	800a664 <xTaskPriorityDisinherit+0x9c>
	{
 800a5cc:	b538      	push	{r3, r4, r5, lr}
 800a5ce:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800a5d0:	4b26      	ldr	r3, [pc, #152]	@ (800a66c <xTaskPriorityDisinherit+0xa4>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4283      	cmp	r3, r0
 800a5d6:	d008      	beq.n	800a5ea <xTaskPriorityDisinherit+0x22>
 800a5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	e7fe      	b.n	800a5e8 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800a5ea:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800a5ec:	b943      	cbnz	r3, 800a600 <xTaskPriorityDisinherit+0x38>
 800a5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f2:	f383 8811 	msr	BASEPRI, r3
 800a5f6:	f3bf 8f6f 	isb	sy
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	e7fe      	b.n	800a5fe <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800a600:	3b01      	subs	r3, #1
 800a602:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a604:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a606:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800a608:	4291      	cmp	r1, r2
 800a60a:	d02d      	beq.n	800a668 <xTaskPriorityDisinherit+0xa0>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a60c:	b10b      	cbz	r3, 800a612 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800a60e:	2000      	movs	r0, #0
	}
 800a610:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a612:	1d05      	adds	r5, r0, #4
 800a614:	4628      	mov	r0, r5
 800a616:	f7ff faf5 	bl	8009c04 <uxListRemove>
 800a61a:	b968      	cbnz	r0, 800a638 <xTaskPriorityDisinherit+0x70>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a61c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a61e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a622:	0092      	lsls	r2, r2, #2
 800a624:	4912      	ldr	r1, [pc, #72]	@ (800a670 <xTaskPriorityDisinherit+0xa8>)
 800a626:	588a      	ldr	r2, [r1, r2]
 800a628:	b932      	cbnz	r2, 800a638 <xTaskPriorityDisinherit+0x70>
 800a62a:	2201      	movs	r2, #1
 800a62c:	409a      	lsls	r2, r3
 800a62e:	4911      	ldr	r1, [pc, #68]	@ (800a674 <xTaskPriorityDisinherit+0xac>)
 800a630:	680b      	ldr	r3, [r1, #0]
 800a632:	ea23 0302 	bic.w	r3, r3, r2
 800a636:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a638:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800a63a:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a63c:	f1c0 0307 	rsb	r3, r0, #7
 800a640:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a642:	2401      	movs	r4, #1
 800a644:	fa04 f300 	lsl.w	r3, r4, r0
 800a648:	4a0a      	ldr	r2, [pc, #40]	@ (800a674 <xTaskPriorityDisinherit+0xac>)
 800a64a:	6811      	ldr	r1, [r2, #0]
 800a64c:	430b      	orrs	r3, r1
 800a64e:	6013      	str	r3, [r2, #0]
 800a650:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a654:	4629      	mov	r1, r5
 800a656:	4b06      	ldr	r3, [pc, #24]	@ (800a670 <xTaskPriorityDisinherit+0xa8>)
 800a658:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a65c:	f7ff faae 	bl	8009bbc <vListInsertEnd>
					xReturn = pdTRUE;
 800a660:	4620      	mov	r0, r4
 800a662:	e7d5      	b.n	800a610 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800a664:	2000      	movs	r0, #0
	}
 800a666:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800a668:	2000      	movs	r0, #0
 800a66a:	e7d1      	b.n	800a610 <xTaskPriorityDisinherit+0x48>
 800a66c:	20003128 	.word	0x20003128
 800a670:	2000309c 	.word	0x2000309c
 800a674:	20003020 	.word	0x20003020

0800a678 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a678:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800a67a:	2300      	movs	r3, #0
 800a67c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a67e:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b4 <prvTaskExitError+0x3c>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a686:	d008      	beq.n	800a69a <prvTaskExitError+0x22>
 800a688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	e7fe      	b.n	800a698 <prvTaskExitError+0x20>
 800a69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a6aa:	9b01      	ldr	r3, [sp, #4]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d0fc      	beq.n	800a6aa <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a6b0:	b002      	add	sp, #8
 800a6b2:	4770      	bx	lr
 800a6b4:	200005b8 	.word	0x200005b8

0800a6b8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a6b8:	4806      	ldr	r0, [pc, #24]	@ (800a6d4 <prvPortStartFirstTask+0x1c>)
 800a6ba:	6800      	ldr	r0, [r0, #0]
 800a6bc:	6800      	ldr	r0, [r0, #0]
 800a6be:	f380 8808 	msr	MSP, r0
 800a6c2:	b662      	cpsie	i
 800a6c4:	b661      	cpsie	f
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	f3bf 8f6f 	isb	sy
 800a6ce:	df00      	svc	0
 800a6d0:	bf00      	nop
 800a6d2:	0000      	.short	0x0000
 800a6d4:	e000ed08 	.word	0xe000ed08

0800a6d8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a6dc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a6e0:	f021 0101 	bic.w	r1, r1, #1
 800a6e4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a6e8:	4b03      	ldr	r3, [pc, #12]	@ (800a6f8 <pxPortInitialiseStack+0x20>)
 800a6ea:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a6ee:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800a6f2:	3840      	subs	r0, #64	@ 0x40
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	0800a679 	.word	0x0800a679
 800a6fc:	00000000 	.word	0x00000000

0800a700 <SVC_Handler>:
	__asm volatile (
 800a700:	4b07      	ldr	r3, [pc, #28]	@ (800a720 <pxCurrentTCBConst2>)
 800a702:	6819      	ldr	r1, [r3, #0]
 800a704:	6808      	ldr	r0, [r1, #0]
 800a706:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a70a:	f380 8809 	msr	PSP, r0
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f04f 0000 	mov.w	r0, #0
 800a716:	f380 8811 	msr	BASEPRI, r0
 800a71a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a71e:	4770      	bx	lr

0800a720 <pxCurrentTCBConst2>:
 800a720:	20003128 	.word	0x20003128

0800a724 <vPortEnterCritical>:
 800a724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a728:	f383 8811 	msr	BASEPRI, r3
 800a72c:	f3bf 8f6f 	isb	sy
 800a730:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a734:	4a0b      	ldr	r2, [pc, #44]	@ (800a764 <vPortEnterCritical+0x40>)
 800a736:	6813      	ldr	r3, [r2, #0]
 800a738:	3301      	adds	r3, #1
 800a73a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d000      	beq.n	800a742 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800a740:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a742:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a746:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800a74a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800a74e:	d0f7      	beq.n	800a740 <vPortEnterCritical+0x1c>
 800a750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a754:	f383 8811 	msr	BASEPRI, r3
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	e7fe      	b.n	800a760 <vPortEnterCritical+0x3c>
 800a762:	bf00      	nop
 800a764:	200005b8 	.word	0x200005b8

0800a768 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800a768:	4b09      	ldr	r3, [pc, #36]	@ (800a790 <vPortExitCritical+0x28>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	b943      	cbnz	r3, 800a780 <vPortExitCritical+0x18>
 800a76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	e7fe      	b.n	800a77e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a780:	3b01      	subs	r3, #1
 800a782:	4a03      	ldr	r2, [pc, #12]	@ (800a790 <vPortExitCritical+0x28>)
 800a784:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a786:	b90b      	cbnz	r3, 800a78c <vPortExitCritical+0x24>
	__asm volatile
 800a788:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	200005b8 	.word	0x200005b8
	...

0800a7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a7a0:	f3ef 8009 	mrs	r0, PSP
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	4b0d      	ldr	r3, [pc, #52]	@ (800a7e0 <pxCurrentTCBConst>)
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a7b0:	6010      	str	r0, [r2, #0]
 800a7b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a7b6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a7ba:	f380 8811 	msr	BASEPRI, r0
 800a7be:	f7ff fe53 	bl	800a468 <vTaskSwitchContext>
 800a7c2:	f04f 0000 	mov.w	r0, #0
 800a7c6:	f380 8811 	msr	BASEPRI, r0
 800a7ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a7ce:	6819      	ldr	r1, [r3, #0]
 800a7d0:	6808      	ldr	r0, [r1, #0]
 800a7d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a7d6:	f380 8809 	msr	PSP, r0
 800a7da:	f3bf 8f6f 	isb	sy
 800a7de:	4770      	bx	lr

0800a7e0 <pxCurrentTCBConst>:
 800a7e0:	20003128 	.word	0x20003128

0800a7e4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a7e4:	b508      	push	{r3, lr}
	__asm volatile
 800a7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ea:	f383 8811 	msr	BASEPRI, r3
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a7f6:	f7ff fcff 	bl	800a1f8 <xTaskIncrementTick>
 800a7fa:	b128      	cbz	r0, 800a808 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a7fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a800:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a804:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800a808:	2300      	movs	r3, #0
 800a80a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a80e:	bd08      	pop	{r3, pc}

0800a810 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a810:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800a814:	2300      	movs	r3, #0
 800a816:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a818:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a81a:	4b05      	ldr	r3, [pc, #20]	@ (800a830 <vPortSetupTimerInterrupt+0x20>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4905      	ldr	r1, [pc, #20]	@ (800a834 <vPortSetupTimerInterrupt+0x24>)
 800a820:	fba1 1303 	umull	r1, r3, r1, r3
 800a824:	099b      	lsrs	r3, r3, #6
 800a826:	3b01      	subs	r3, #1
 800a828:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a82a:	2307      	movs	r3, #7
 800a82c:	6113      	str	r3, [r2, #16]
}
 800a82e:	4770      	bx	lr
 800a830:	200005ac 	.word	0x200005ac
 800a834:	10624dd3 	.word	0x10624dd3

0800a838 <xPortStartScheduler>:
{
 800a838:	b510      	push	{r4, lr}
 800a83a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a83c:	4b2a      	ldr	r3, [pc, #168]	@ (800a8e8 <xPortStartScheduler+0xb0>)
 800a83e:	781a      	ldrb	r2, [r3, #0]
 800a840:	b2d2      	uxtb	r2, r2
 800a842:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a844:	22ff      	movs	r2, #255	@ 0xff
 800a846:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a850:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a854:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a858:	4a24      	ldr	r2, [pc, #144]	@ (800a8ec <xPortStartScheduler+0xb4>)
 800a85a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a85c:	4b24      	ldr	r3, [pc, #144]	@ (800a8f0 <xPortStartScheduler+0xb8>)
 800a85e:	2207      	movs	r2, #7
 800a860:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a862:	e009      	b.n	800a878 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 800a864:	4a22      	ldr	r2, [pc, #136]	@ (800a8f0 <xPortStartScheduler+0xb8>)
 800a866:	6813      	ldr	r3, [r2, #0]
 800a868:	3b01      	subs	r3, #1
 800a86a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a86c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a870:	005b      	lsls	r3, r3, #1
 800a872:	b2db      	uxtb	r3, r3
 800a874:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a878:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a87c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a880:	d1f0      	bne.n	800a864 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a882:	4b1b      	ldr	r3, [pc, #108]	@ (800a8f0 <xPortStartScheduler+0xb8>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2b03      	cmp	r3, #3
 800a888:	d008      	beq.n	800a89c <xPortStartScheduler+0x64>
	__asm volatile
 800a88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a88e:	f383 8811 	msr	BASEPRI, r3
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	f3bf 8f4f 	dsb	sy
 800a89a:	e7fe      	b.n	800a89a <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a89c:	021b      	lsls	r3, r3, #8
 800a89e:	4a14      	ldr	r2, [pc, #80]	@ (800a8f0 <xPortStartScheduler+0xb8>)
 800a8a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8a2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a8a6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8a8:	9b01      	ldr	r3, [sp, #4]
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	4a0e      	ldr	r2, [pc, #56]	@ (800a8e8 <xPortStartScheduler+0xb0>)
 800a8ae:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a8b4:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 800a8b8:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800a8bc:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8c0:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 800a8c4:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 800a8c8:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800a8cc:	f7ff ffa0 	bl	800a810 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a8d0:	2400      	movs	r4, #0
 800a8d2:	4b08      	ldr	r3, [pc, #32]	@ (800a8f4 <xPortStartScheduler+0xbc>)
 800a8d4:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 800a8d6:	f7ff feef 	bl	800a6b8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800a8da:	f7ff fdc5 	bl	800a468 <vTaskSwitchContext>
	prvTaskExitError();
 800a8de:	f7ff fecb 	bl	800a678 <prvTaskExitError>
}
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	b002      	add	sp, #8
 800a8e6:	bd10      	pop	{r4, pc}
 800a8e8:	e000e400 	.word	0xe000e400
 800a8ec:	20003130 	.word	0x20003130
 800a8f0:	2000312c 	.word	0x2000312c
 800a8f4:	200005b8 	.word	0x200005b8

0800a8f8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a8f8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a8fc:	2b0f      	cmp	r3, #15
 800a8fe:	d90f      	bls.n	800a920 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a900:	4a11      	ldr	r2, [pc, #68]	@ (800a948 <vPortValidateInterruptPriority+0x50>)
 800a902:	5c9b      	ldrb	r3, [r3, r2]
 800a904:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a906:	4a11      	ldr	r2, [pc, #68]	@ (800a94c <vPortValidateInterruptPriority+0x54>)
 800a908:	7812      	ldrb	r2, [r2, #0]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d908      	bls.n	800a920 <vPortValidateInterruptPriority+0x28>
 800a90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	e7fe      	b.n	800a91e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a920:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a924:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800a928:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a92c:	4a08      	ldr	r2, [pc, #32]	@ (800a950 <vPortValidateInterruptPriority+0x58>)
 800a92e:	6812      	ldr	r2, [r2, #0]
 800a930:	4293      	cmp	r3, r2
 800a932:	d908      	bls.n	800a946 <vPortValidateInterruptPriority+0x4e>
 800a934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a938:	f383 8811 	msr	BASEPRI, r3
 800a93c:	f3bf 8f6f 	isb	sy
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	e7fe      	b.n	800a944 <vPortValidateInterruptPriority+0x4c>
	}
 800a946:	4770      	bx	lr
 800a948:	e000e3f0 	.word	0xe000e3f0
 800a94c:	20003130 	.word	0x20003130
 800a950:	2000312c 	.word	0x2000312c

0800a954 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a954:	4a12      	ldr	r2, [pc, #72]	@ (800a9a0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a956:	f012 0f07 	tst.w	r2, #7
 800a95a:	d01e      	beq.n	800a99a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a95c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a95e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a962:	f5c1 5320 	rsb	r3, r1, #10240	@ 0x2800
 800a966:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a968:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a96a:	480e      	ldr	r0, [pc, #56]	@ (800a9a4 <prvHeapInit+0x50>)
 800a96c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a96e:	2100      	movs	r1, #0
 800a970:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a972:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800a974:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a976:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800a97a:	480b      	ldr	r0, [pc, #44]	@ (800a9a8 <prvHeapInit+0x54>)
 800a97c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800a97e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a980:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a982:	1a99      	subs	r1, r3, r2
 800a984:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a986:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a988:	4b08      	ldr	r3, [pc, #32]	@ (800a9ac <prvHeapInit+0x58>)
 800a98a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a98c:	4b08      	ldr	r3, [pc, #32]	@ (800a9b0 <prvHeapInit+0x5c>)
 800a98e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a990:	4b08      	ldr	r3, [pc, #32]	@ (800a9b4 <prvHeapInit+0x60>)
 800a992:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a996:	601a      	str	r2, [r3, #0]
}
 800a998:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a99a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800a99e:	e7e4      	b.n	800a96a <prvHeapInit+0x16>
 800a9a0:	20003154 	.word	0x20003154
 800a9a4:	2000314c 	.word	0x2000314c
 800a9a8:	20003148 	.word	0x20003148
 800a9ac:	20003140 	.word	0x20003140
 800a9b0:	20003144 	.word	0x20003144
 800a9b4:	20003134 	.word	0x20003134

0800a9b8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9b8:	4b15      	ldr	r3, [pc, #84]	@ (800aa10 <prvInsertBlockIntoFreeList+0x58>)
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4283      	cmp	r3, r0
 800a9c0:	d3fb      	bcc.n	800a9ba <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a9c2:	6851      	ldr	r1, [r2, #4]
 800a9c4:	eb02 0c01 	add.w	ip, r2, r1
 800a9c8:	4584      	cmp	ip, r0
 800a9ca:	d009      	beq.n	800a9e0 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a9cc:	6841      	ldr	r1, [r0, #4]
 800a9ce:	eb00 0c01 	add.w	ip, r0, r1
 800a9d2:	4563      	cmp	r3, ip
 800a9d4:	d009      	beq.n	800a9ea <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a9d6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a9d8:	4290      	cmp	r0, r2
 800a9da:	d018      	beq.n	800aa0e <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a9dc:	6010      	str	r0, [r2, #0]
 800a9de:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9e0:	6840      	ldr	r0, [r0, #4]
 800a9e2:	4401      	add	r1, r0
 800a9e4:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800a9e6:	4610      	mov	r0, r2
 800a9e8:	e7f0      	b.n	800a9cc <prvInsertBlockIntoFreeList+0x14>
{
 800a9ea:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a9ec:	4c09      	ldr	r4, [pc, #36]	@ (800aa14 <prvInsertBlockIntoFreeList+0x5c>)
 800a9ee:	6824      	ldr	r4, [r4, #0]
 800a9f0:	42a3      	cmp	r3, r4
 800a9f2:	d00a      	beq.n	800aa0a <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	4419      	add	r1, r3
 800a9f8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a9fa:	6813      	ldr	r3, [r2, #0]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800aa00:	4290      	cmp	r0, r2
 800aa02:	d000      	beq.n	800aa06 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa04:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa06:	bc10      	pop	{r4}
 800aa08:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa0a:	6004      	str	r4, [r0, #0]
 800aa0c:	e7f8      	b.n	800aa00 <prvInsertBlockIntoFreeList+0x48>
 800aa0e:	4770      	bx	lr
 800aa10:	2000314c 	.word	0x2000314c
 800aa14:	20003148 	.word	0x20003148

0800aa18 <pvPortMalloc>:
{
 800aa18:	b538      	push	{r3, r4, r5, lr}
 800aa1a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800aa1c:	f7ff fbe4 	bl	800a1e8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800aa20:	4b3d      	ldr	r3, [pc, #244]	@ (800ab18 <pvPortMalloc+0x100>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	b1ab      	cbz	r3, 800aa52 <pvPortMalloc+0x3a>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa26:	4b3d      	ldr	r3, [pc, #244]	@ (800ab1c <pvPortMalloc+0x104>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	421c      	tst	r4, r3
 800aa2c:	d114      	bne.n	800aa58 <pvPortMalloc+0x40>
			if( xWantedSize > 0 )
 800aa2e:	2c00      	cmp	r4, #0
 800aa30:	d06a      	beq.n	800ab08 <pvPortMalloc+0xf0>
				xWantedSize += xHeapStructSize;
 800aa32:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa36:	f014 0f07 	tst.w	r4, #7
 800aa3a:	d002      	beq.n	800aa42 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa3c:	f022 0207 	bic.w	r2, r2, #7
 800aa40:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa42:	b1d2      	cbz	r2, 800aa7a <pvPortMalloc+0x62>
 800aa44:	4b36      	ldr	r3, [pc, #216]	@ (800ab20 <pvPortMalloc+0x108>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d31a      	bcc.n	800aa82 <pvPortMalloc+0x6a>
				pxBlock = xStart.pxNextFreeBlock;
 800aa4c:	4935      	ldr	r1, [pc, #212]	@ (800ab24 <pvPortMalloc+0x10c>)
 800aa4e:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa50:	e01d      	b.n	800aa8e <pvPortMalloc+0x76>
			prvHeapInit();
 800aa52:	f7ff ff7f 	bl	800a954 <prvHeapInit>
 800aa56:	e7e6      	b.n	800aa26 <pvPortMalloc+0xe>
	( void ) xTaskResumeAll();
 800aa58:	f7ff fc64 	bl	800a324 <xTaskResumeAll>
void *pvReturn = NULL;
 800aa5c:	2500      	movs	r5, #0
			vApplicationMallocFailedHook();
 800aa5e:	f7fb fff9 	bl	8006a54 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa62:	f015 0f07 	tst.w	r5, #7
 800aa66:	d055      	beq.n	800ab14 <pvPortMalloc+0xfc>
 800aa68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa6c:	f383 8811 	msr	BASEPRI, r3
 800aa70:	f3bf 8f6f 	isb	sy
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	e7fe      	b.n	800aa78 <pvPortMalloc+0x60>
	( void ) xTaskResumeAll();
 800aa7a:	f7ff fc53 	bl	800a324 <xTaskResumeAll>
void *pvReturn = NULL;
 800aa7e:	2500      	movs	r5, #0
 800aa80:	e7ed      	b.n	800aa5e <pvPortMalloc+0x46>
	( void ) xTaskResumeAll();
 800aa82:	f7ff fc4f 	bl	800a324 <xTaskResumeAll>
void *pvReturn = NULL;
 800aa86:	2500      	movs	r5, #0
 800aa88:	e7e9      	b.n	800aa5e <pvPortMalloc+0x46>
					pxPreviousBlock = pxBlock;
 800aa8a:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa8c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa8e:	6863      	ldr	r3, [r4, #4]
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d202      	bcs.n	800aa9a <pvPortMalloc+0x82>
 800aa94:	6823      	ldr	r3, [r4, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1f7      	bne.n	800aa8a <pvPortMalloc+0x72>
				if( pxBlock != pxEnd )
 800aa9a:	4b1f      	ldr	r3, [pc, #124]	@ (800ab18 <pvPortMalloc+0x100>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	42a3      	cmp	r3, r4
 800aaa0:	d014      	beq.n	800aacc <pvPortMalloc+0xb4>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aaa2:	680d      	ldr	r5, [r1, #0]
 800aaa4:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aaa6:	6823      	ldr	r3, [r4, #0]
 800aaa8:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aaaa:	6863      	ldr	r3, [r4, #4]
 800aaac:	1a9b      	subs	r3, r3, r2
 800aaae:	2b10      	cmp	r3, #16
 800aab0:	d914      	bls.n	800aadc <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aab2:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aab4:	f010 0f07 	tst.w	r0, #7
 800aab8:	d00c      	beq.n	800aad4 <pvPortMalloc+0xbc>
 800aaba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aabe:	f383 8811 	msr	BASEPRI, r3
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	e7fe      	b.n	800aaca <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 800aacc:	f7ff fc2a 	bl	800a324 <xTaskResumeAll>
void *pvReturn = NULL;
 800aad0:	2500      	movs	r5, #0
 800aad2:	e7c4      	b.n	800aa5e <pvPortMalloc+0x46>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aad4:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aad6:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aad8:	f7ff ff6e 	bl	800a9b8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aadc:	6862      	ldr	r2, [r4, #4]
 800aade:	4910      	ldr	r1, [pc, #64]	@ (800ab20 <pvPortMalloc+0x108>)
 800aae0:	680b      	ldr	r3, [r1, #0]
 800aae2:	1a9b      	subs	r3, r3, r2
 800aae4:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aae6:	4910      	ldr	r1, [pc, #64]	@ (800ab28 <pvPortMalloc+0x110>)
 800aae8:	6809      	ldr	r1, [r1, #0]
 800aaea:	428b      	cmp	r3, r1
 800aaec:	d201      	bcs.n	800aaf2 <pvPortMalloc+0xda>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aaee:	490e      	ldr	r1, [pc, #56]	@ (800ab28 <pvPortMalloc+0x110>)
 800aaf0:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aaf2:	4b0a      	ldr	r3, [pc, #40]	@ (800ab1c <pvPortMalloc+0x104>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aafa:	2300      	movs	r3, #0
 800aafc:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800aafe:	4a0b      	ldr	r2, [pc, #44]	@ (800ab2c <pvPortMalloc+0x114>)
 800ab00:	6813      	ldr	r3, [r2, #0]
 800ab02:	3301      	adds	r3, #1
 800ab04:	6013      	str	r3, [r2, #0]
 800ab06:	e000      	b.n	800ab0a <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 800ab08:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 800ab0a:	f7ff fc0b 	bl	800a324 <xTaskResumeAll>
		if( pvReturn == NULL )
 800ab0e:	2d00      	cmp	r5, #0
 800ab10:	d1a7      	bne.n	800aa62 <pvPortMalloc+0x4a>
 800ab12:	e7a4      	b.n	800aa5e <pvPortMalloc+0x46>
}
 800ab14:	4628      	mov	r0, r5
 800ab16:	bd38      	pop	{r3, r4, r5, pc}
 800ab18:	20003148 	.word	0x20003148
 800ab1c:	20003134 	.word	0x20003134
 800ab20:	20003144 	.word	0x20003144
 800ab24:	2000314c 	.word	0x2000314c
 800ab28:	20003140 	.word	0x20003140
 800ab2c:	2000313c 	.word	0x2000313c

0800ab30 <vPortFree>:
	if( pv != NULL )
 800ab30:	2800      	cmp	r0, #0
 800ab32:	d034      	beq.n	800ab9e <vPortFree+0x6e>
{
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800ab38:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab3c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ab40:	4a17      	ldr	r2, [pc, #92]	@ (800aba0 <vPortFree+0x70>)
 800ab42:	6812      	ldr	r2, [r2, #0]
 800ab44:	4213      	tst	r3, r2
 800ab46:	d108      	bne.n	800ab5a <vPortFree+0x2a>
 800ab48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab4c:	f383 8811 	msr	BASEPRI, r3
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	e7fe      	b.n	800ab58 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab5a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800ab5e:	b141      	cbz	r1, 800ab72 <vPortFree+0x42>
 800ab60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab64:	f383 8811 	msr	BASEPRI, r3
 800ab68:	f3bf 8f6f 	isb	sy
 800ab6c:	f3bf 8f4f 	dsb	sy
 800ab70:	e7fe      	b.n	800ab70 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab72:	ea23 0302 	bic.w	r3, r3, r2
 800ab76:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800ab7a:	f7ff fb35 	bl	800a1e8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab7e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800ab82:	4a08      	ldr	r2, [pc, #32]	@ (800aba4 <vPortFree+0x74>)
 800ab84:	6813      	ldr	r3, [r2, #0]
 800ab86:	440b      	add	r3, r1
 800ab88:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	f7ff ff14 	bl	800a9b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ab90:	4a05      	ldr	r2, [pc, #20]	@ (800aba8 <vPortFree+0x78>)
 800ab92:	6813      	ldr	r3, [r2, #0]
 800ab94:	3301      	adds	r3, #1
 800ab96:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800ab98:	f7ff fbc4 	bl	800a324 <xTaskResumeAll>
}
 800ab9c:	bd38      	pop	{r3, r4, r5, pc}
 800ab9e:	4770      	bx	lr
 800aba0:	20003134 	.word	0x20003134
 800aba4:	20003144 	.word	0x20003144
 800aba8:	20003138 	.word	0x20003138

0800abac <CanCcl_InitPowerOn>:
* Description:
* Call       : Local
* Returns   : Nothing
******************************************************************************/
static void CanCcl_InitPowerOn( void )
{
 800abac:	b508      	push	{r3, lr}
	//CanIl_RxSignalTable_Init();
	//CanIl_TxSignalTable_Init();
	CanIl_MessageTable_Init();
 800abae:	f000 f8a5 	bl	800acfc <CanIl_MessageTable_Init>
    CanIl_StateInit();
 800abb2:	f000 f8a5 	bl	800ad00 <CanIl_StateInit>
	CanIl_RxStart();
 800abb6:	f000 f8a9 	bl	800ad0c <CanIl_RxStart>
	CanIl_TxStart();
 800abba:	f000 f8b5 	bl	800ad28 <CanIl_TxStart>
}
 800abbe:	bd08      	pop	{r3, pc}

0800abc0 <CanCcl_vPoweronInit>:
* Description:
* Call       : Local
* Returns   : Nothing
******************************************************************************/
void CanCcl_vPoweronInit(void)
{
 800abc0:	b508      	push	{r3, lr}
    CanCcl_InitPowerOn();
 800abc2:	f7ff fff3 	bl	800abac <CanCcl_InitPowerOn>
}
 800abc6:	bd08      	pop	{r3, pc}

0800abc8 <CanCcl_TickCntHnadler>:
* Description:
* Call       : Global
* Returns   : Nothing
******************************************************************************/
void CanCcl_TickCntHnadler(void)
{
 800abc8:	b508      	push	{r3, lr}
	CanIl_TxTask();
 800abca:	f000 fa91 	bl	800b0f0 <CanIl_TxTask>
    // CanIl_RxTask();
}
 800abce:	bd08      	pop	{r3, pc}

0800abd0 <CanIl_TxStateTask>:
{
	uint16_t ilTxHnd;
	uint16_t x;
	uint16_t i;

	if(CanIl_Tx_NotSuspended())
 800abd0:	4b20      	ldr	r3, [pc, #128]	@ (800ac54 <CanIl_TxStateTask+0x84>)
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	f013 0f03 	tst.w	r3, #3
 800abd8:	d03a      	beq.n	800ac50 <CanIl_TxStateTask+0x80>
	{
		ilTxHnd = iBytesOfTxHandles;
 800abda:	4b1f      	ldr	r3, [pc, #124]	@ (800ac58 <CanIl_TxStateTask+0x88>)
 800abdc:	781a      	ldrb	r2, [r3, #0]
 800abde:	e01e      	b.n	800ac1e <CanIl_TxStateTask+0x4e>
			{
				if(ilTxConfirmationFlags(x) != 0)
				{
					for(i=0;i<iBytesOfTxHandles;i++)
					{
						ilTxConfirmationFlags(i) = 0;
 800abe0:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 800abe4:	481d      	ldr	r0, [pc, #116]	@ (800ac5c <CanIl_TxStateTask+0x8c>)
 800abe6:	6800      	ldr	r0, [r0, #0]
 800abe8:	f04f 0c00 	mov.w	ip, #0
 800abec:	f800 c001 	strb.w	ip, [r0, r1]
					for(i=0;i<iBytesOfTxHandles;i++)
 800abf0:	3301      	adds	r3, #1
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	4918      	ldr	r1, [pc, #96]	@ (800ac58 <CanIl_TxStateTask+0x88>)
 800abf6:	7809      	ldrb	r1, [r1, #0]
 800abf8:	4299      	cmp	r1, r3
 800abfa:	d8f1      	bhi.n	800abe0 <CanIl_TxStateTask+0x10>
					}
					ilTxUpdateCounter(ilTxHnd) = CanIl_GetTxUpdateCycles(ilTxHnd);
 800abfc:	ebce 0ece 	rsb	lr, lr, lr, lsl #3
 800ac00:	ea4f 038e 	mov.w	r3, lr, lsl #2
 800ac04:	4916      	ldr	r1, [pc, #88]	@ (800ac60 <CanIl_TxStateTask+0x90>)
 800ac06:	6809      	ldr	r1, [r1, #0]
 800ac08:	4419      	add	r1, r3
 800ac0a:	4b14      	ldr	r3, [pc, #80]	@ (800ac5c <CanIl_TxStateTask+0x8c>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4423      	add	r3, r4
 800ac10:	7cc9      	ldrb	r1, [r1, #19]
 800ac12:	7059      	strb	r1, [r3, #1]
 800ac14:	e012      	b.n	800ac3c <CanIl_TxStateTask+0x6c>
					for(i=0;i<iBytesOfTxHandles;i++)
 800ac16:	2300      	movs	r3, #0
 800ac18:	e7ec      	b.n	800abf4 <CanIl_TxStateTask+0x24>
				}
			}
		}while(ilTxHnd != 0);
	}
}
 800ac1a:	bd10      	pop	{r4, pc}
		}while(ilTxHnd != 0);
 800ac1c:	b1ba      	cbz	r2, 800ac4e <CanIl_TxStateTask+0x7e>
			ilTxHnd--;
 800ac1e:	3a01      	subs	r2, #1
 800ac20:	b292      	uxth	r2, r2
			if(x != iCanNotUsedTxHandle)
 800ac22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d0f8      	beq.n	800ac1c <CanIl_TxStateTask+0x4c>
{
 800ac2a:	b510      	push	{r4, lr}
				if(ilTxConfirmationFlags(x) != 0)
 800ac2c:	4696      	mov	lr, r2
 800ac2e:	eb02 04c2 	add.w	r4, r2, r2, lsl #3
 800ac32:	4b0a      	ldr	r3, [pc, #40]	@ (800ac5c <CanIl_TxStateTask+0x8c>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	5d1b      	ldrb	r3, [r3, r4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1ec      	bne.n	800ac16 <CanIl_TxStateTask+0x46>
		}while(ilTxHnd != 0);
 800ac3c:	2a00      	cmp	r2, #0
 800ac3e:	d0ec      	beq.n	800ac1a <CanIl_TxStateTask+0x4a>
			ilTxHnd--;
 800ac40:	3a01      	subs	r2, #1
 800ac42:	b292      	uxth	r2, r2
			if(x != iCanNotUsedTxHandle)
 800ac44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d1ef      	bne.n	800ac2c <CanIl_TxStateTask+0x5c>
 800ac4c:	e7f6      	b.n	800ac3c <CanIl_TxStateTask+0x6c>
 800ac4e:	4770      	bx	lr
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	20005966 	.word	0x20005966
 800ac58:	20005967 	.word	0x20005967
 800ac5c:	2000596c 	.word	0x2000596c
 800ac60:	20005968 	.word	0x20005968

0800ac64 <CanIl_EventMsgCycTxPro>:

static void CanIl_EventMsgCycTxPro(void)
{
    uint8_t i;

    for (i=0; i<iBytesOfTxHandles; i++)
 800ac64:	2300      	movs	r3, #0
 800ac66:	4a1b      	ldr	r2, [pc, #108]	@ (800acd4 <CanIl_EventMsgCycTxPro+0x70>)
 800ac68:	7812      	ldrb	r2, [r2, #0]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d931      	bls.n	800acd2 <CanIl_EventMsgCycTxPro+0x6e>
{
 800ac6e:	b410      	push	{r4}
 800ac70:	e005      	b.n	800ac7e <CanIl_EventMsgCycTxPro+0x1a>
    for (i=0; i<iBytesOfTxHandles; i++)
 800ac72:	3301      	adds	r3, #1
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	4a17      	ldr	r2, [pc, #92]	@ (800acd4 <CanIl_EventMsgCycTxPro+0x70>)
 800ac78:	7812      	ldrb	r2, [r2, #0]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d927      	bls.n	800acce <CanIl_EventMsgCycTxPro+0x6a>
    {
    	if(iEventMsgInfo(i).Flag==TRUE)
 800ac7e:	eb03 00c3 	add.w	r0, r3, r3, lsl #3
 800ac82:	4a15      	ldr	r2, [pc, #84]	@ (800acd8 <CanIl_EventMsgCycTxPro+0x74>)
 800ac84:	6812      	ldr	r2, [r2, #0]
 800ac86:	4402      	add	r2, r0
 800ac88:	7951      	ldrb	r1, [r2, #5]
 800ac8a:	2901      	cmp	r1, #1
 800ac8c:	d1f1      	bne.n	800ac72 <CanIl_EventMsgCycTxPro+0xe>
    	{
    		iEventMsgInfo(i).Counter++;
 800ac8e:	79d1      	ldrb	r1, [r2, #7]
 800ac90:	3101      	adds	r1, #1
 800ac92:	b2c9      	uxtb	r1, r1
 800ac94:	71d1      	strb	r1, [r2, #7]
    		if(iEventMsgInfo(i).Counter >= CanIl_GetEventTx_Interval_Time())
 800ac96:	4c11      	ldr	r4, [pc, #68]	@ (800acdc <CanIl_EventMsgCycTxPro+0x78>)
 800ac98:	6824      	ldr	r4, [r4, #0]
 800ac9a:	f894 c000 	ldrb.w	ip, [r4]
 800ac9e:	4561      	cmp	r1, ip
 800aca0:	d3e7      	bcc.n	800ac72 <CanIl_EventMsgCycTxPro+0xe>
    		{
    			ilTxState(i) |= iTxQuickStart;
 800aca2:	7891      	ldrb	r1, [r2, #2]
 800aca4:	f041 0110 	orr.w	r1, r1, #16
 800aca8:	7091      	strb	r1, [r2, #2]
    			iEventMsgInfo(i).Counter = 0;
 800acaa:	4a0b      	ldr	r2, [pc, #44]	@ (800acd8 <CanIl_EventMsgCycTxPro+0x74>)
 800acac:	6811      	ldr	r1, [r2, #0]
 800acae:	4401      	add	r1, r0
 800acb0:	2200      	movs	r2, #0
 800acb2:	71ca      	strb	r2, [r1, #7]
    			iEventMsgInfo(i).Time++;
 800acb4:	798a      	ldrb	r2, [r1, #6]
 800acb6:	3201      	adds	r2, #1
 800acb8:	b2d2      	uxtb	r2, r2
 800acba:	718a      	strb	r2, [r1, #6]
    			if(iEventMsgInfo(i).Time >= CanIl_GetEventTx_Cnt())
 800acbc:	4807      	ldr	r0, [pc, #28]	@ (800acdc <CanIl_EventMsgCycTxPro+0x78>)
 800acbe:	6800      	ldr	r0, [r0, #0]
 800acc0:	7840      	ldrb	r0, [r0, #1]
 800acc2:	4282      	cmp	r2, r0
 800acc4:	d3d5      	bcc.n	800ac72 <CanIl_EventMsgCycTxPro+0xe>
    			{
    				iEventMsgInfo(i).Time = 0;
 800acc6:	2200      	movs	r2, #0
 800acc8:	718a      	strb	r2, [r1, #6]
    			    iEventMsgInfo(i).Flag = FALSE;
 800acca:	714a      	strb	r2, [r1, #5]
 800accc:	e7d1      	b.n	800ac72 <CanIl_EventMsgCycTxPro+0xe>
    			}
    		}
    	}
    }
}
 800acce:	bc10      	pop	{r4}
 800acd0:	4770      	bx	lr
 800acd2:	4770      	bx	lr
 800acd4:	20005967 	.word	0x20005967
 800acd8:	2000596c 	.word	0x2000596c
 800acdc:	200005c0 	.word	0x200005c0

0800ace0 <CanDrv_HLTxConfirm>:
	}
	CanIl_CanBusDetectHandler();
}

static void CanDrv_HLTxConfirm(uint16_t Index)
{
 800ace0:	b508      	push	{r3, lr}
	uint16_t txHandle;

	//txHandle = CurTxHandleIndex;
	txHandle = Index;

	if (CanGetApplConfirmationPtr(txHandle) != NULL)
 800ace2:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800ace6:	4b04      	ldr	r3, [pc, #16]	@ (800acf8 <CanDrv_HLTxConfirm+0x18>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800acee:	699b      	ldr	r3, [r3, #24]
 800acf0:	b103      	cbz	r3, 800acf4 <CanDrv_HLTxConfirm+0x14>
	{
		(CanGetApplConfirmationPtr(txHandle))(txHandle);
 800acf2:	4798      	blx	r3
	}
}
 800acf4:	bd08      	pop	{r3, pc}
 800acf6:	bf00      	nop
 800acf8:	20005968 	.word	0x20005968

0800acfc <CanIl_MessageTable_Init>:
}
 800acfc:	4770      	bx	lr
	...

0800ad00 <CanIl_StateInit>:
    CanIlState = iTxIsIdle;
 800ad00:	4b01      	ldr	r3, [pc, #4]	@ (800ad08 <CanIl_StateInit+0x8>)
 800ad02:	2200      	movs	r2, #0
 800ad04:	701a      	strb	r2, [r3, #0]
}
 800ad06:	4770      	bx	lr
 800ad08:	20005966 	.word	0x20005966

0800ad0c <CanIl_RxStart>:
    if (CanIl_Rx_Enabled()!=0)
 800ad0c:	4b05      	ldr	r3, [pc, #20]	@ (800ad24 <CanIl_RxStart+0x18>)
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	f013 0f08 	tst.w	r3, #8
 800ad14:	d105      	bne.n	800ad22 <CanIl_RxStart+0x16>
    CanIl_EnableRx();
 800ad16:	f023 030c 	bic.w	r3, r3, #12
 800ad1a:	f043 0308 	orr.w	r3, r3, #8
 800ad1e:	4a01      	ldr	r2, [pc, #4]	@ (800ad24 <CanIl_RxStart+0x18>)
 800ad20:	7013      	strb	r3, [r2, #0]
}
 800ad22:	4770      	bx	lr
 800ad24:	20005966 	.word	0x20005966

0800ad28 <CanIl_TxStart>:
{
 800ad28:	b570      	push	{r4, r5, r6, lr}
    if (CanIl_Tx_Enabled()!=0)
 800ad2a:	4b27      	ldr	r3, [pc, #156]	@ (800adc8 <CanIl_TxStart+0xa0>)
 800ad2c:	781d      	ldrb	r5, [r3, #0]
 800ad2e:	f015 0f02 	tst.w	r5, #2
 800ad32:	d148      	bne.n	800adc6 <CanIl_TxStart+0x9e>
    for ( ilTxHnd=0 ; ilTxHnd < iBytesOfTxHandles  ; ilTxHnd++ )
 800ad34:	2300      	movs	r3, #0
 800ad36:	e003      	b.n	800ad40 <CanIl_TxStart+0x18>
        ilTxEventCounter(ilTxHnd)  = 0;
 800ad38:	2100      	movs	r1, #0
 800ad3a:	7111      	strb	r1, [r2, #4]
    for ( ilTxHnd=0 ; ilTxHnd < iBytesOfTxHandles  ; ilTxHnd++ )
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	4a22      	ldr	r2, [pc, #136]	@ (800adcc <CanIl_TxStart+0xa4>)
 800ad42:	7812      	ldrb	r2, [r2, #0]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d92a      	bls.n	800ad9e <CanIl_TxStart+0x76>
        ilTxState(ilTxHnd) = CanIl_GetTxTypes(ilTxHnd);
 800ad48:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800ad4c:	0090      	lsls	r0, r2, #2
 800ad4e:	4e20      	ldr	r6, [pc, #128]	@ (800add0 <CanIl_TxStart+0xa8>)
 800ad50:	6832      	ldr	r2, [r6, #0]
 800ad52:	eb02 0c00 	add.w	ip, r2, r0
 800ad56:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800ad5a:	491e      	ldr	r1, [pc, #120]	@ (800add4 <CanIl_TxStart+0xac>)
 800ad5c:	680c      	ldr	r4, [r1, #0]
 800ad5e:	4414      	add	r4, r2
 800ad60:	f89c c011 	ldrb.w	ip, [ip, #17]
 800ad64:	f884 c002 	strb.w	ip, [r4, #2]
        ilTxUpdateCounter(ilTxHnd) = 0;
 800ad68:	680c      	ldr	r4, [r1, #0]
 800ad6a:	4414      	add	r4, r2
 800ad6c:	f04f 0c00 	mov.w	ip, #0
 800ad70:	f884 c001 	strb.w	ip, [r4, #1]
        ilTxCyclicCounter(ilTxHnd) = IlGetTxStartDelayCycles(ilTxHnd);
 800ad74:	6834      	ldr	r4, [r6, #0]
 800ad76:	eb04 0e00 	add.w	lr, r4, r0
 800ad7a:	680c      	ldr	r4, [r1, #0]
 800ad7c:	eb04 0c02 	add.w	ip, r4, r2
 800ad80:	f89e 4012 	ldrb.w	r4, [lr, #18]
 800ad84:	f88c 4003 	strb.w	r4, [ip, #3]
        if((ilTxState(ilTxHnd) & (iTxCycEveSend))!=0)
 800ad88:	6809      	ldr	r1, [r1, #0]
 800ad8a:	440a      	add	r2, r1
 800ad8c:	7891      	ldrb	r1, [r2, #2]
 800ad8e:	f011 0f02 	tst.w	r1, #2
 800ad92:	d0d1      	beq.n	800ad38 <CanIl_TxStart+0x10>
        ilTxEventCounter(ilTxHnd)  = IlGetTxStartDelayCycles(ilTxHnd);
 800ad94:	6831      	ldr	r1, [r6, #0]
 800ad96:	4401      	add	r1, r0
 800ad98:	7c89      	ldrb	r1, [r1, #18]
 800ad9a:	7111      	strb	r1, [r2, #4]
 800ad9c:	e7ce      	b.n	800ad3c <CanIl_TxStart+0x14>
	for(i=0;i<iBytesOfTxHandles;i++)
 800ad9e:	2300      	movs	r3, #0
 800ada0:	e007      	b.n	800adb2 <CanIl_TxStart+0x8a>
		ilTxConfirmationFlags(i) = 0;
 800ada2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800ada6:	490b      	ldr	r1, [pc, #44]	@ (800add4 <CanIl_TxStart+0xac>)
 800ada8:	6809      	ldr	r1, [r1, #0]
 800adaa:	2000      	movs	r0, #0
 800adac:	5488      	strb	r0, [r1, r2]
	for(i=0;i<iBytesOfTxHandles;i++)
 800adae:	3301      	adds	r3, #1
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	4a06      	ldr	r2, [pc, #24]	@ (800adcc <CanIl_TxStart+0xa4>)
 800adb4:	7812      	ldrb	r2, [r2, #0]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d8f3      	bhi.n	800ada2 <CanIl_TxStart+0x7a>
    CanIl_EnableTx();
 800adba:	f025 0503 	bic.w	r5, r5, #3
 800adbe:	f045 0502 	orr.w	r5, r5, #2
 800adc2:	4b01      	ldr	r3, [pc, #4]	@ (800adc8 <CanIl_TxStart+0xa0>)
 800adc4:	701d      	strb	r5, [r3, #0]
}
 800adc6:	bd70      	pop	{r4, r5, r6, pc}
 800adc8:	20005966 	.word	0x20005966
 800adcc:	20005967 	.word	0x20005967
 800add0:	20005968 	.word	0x20005968
 800add4:	2000596c 	.word	0x2000596c

0800add8 <CanStartTransmission>:

uint8_t CanStartTransmission(uint8_t instance,uint32_t ID,uint8_t *pDataBuf, uint8_t dataLen)
{
 800add8:	b510      	push	{r4, lr}
 800adda:	4604      	mov	r4, r0
 800addc:	4610      	mov	r0, r2
	uint8_t res = 0;
    if(instance == BCAN_CAN_INSTANCE)
 800adde:	2c01      	cmp	r4, #1
 800ade0:	d003      	beq.n	800adea <CanStartTransmission+0x12>
            res = CAN_TRANSMIT_MSG_FILED;
        }

		// printf("BCAN_SendMsg ID = 0x%x, dataLen = %d\r\n", ID, dataLen);
    }
    else if(instance == CCAN1_CAN_INSTANCE)
 800ade2:	2c02      	cmp	r4, #2
 800ade4:	d007      	beq.n	800adf6 <CanStartTransmission+0x1e>
	uint8_t res = 0;
 800ade6:	2000      	movs	r0, #0
        }
		// printf("CCAN1_SendMsg ID = 0x%x, dataLen = %d\r\n", ID, dataLen);
    }

	return res;
}
 800ade8:	bd10      	pop	{r4, pc}
        if(CAN2_SendMsg(pDataBuf, ID, dataLen))
 800adea:	461a      	mov	r2, r3
 800adec:	f7fb fcf2 	bl	80067d4 <CAN2_SendMsg>
 800adf0:	b138      	cbz	r0, 800ae02 <CanStartTransmission+0x2a>
            res = CAN_TRANSMIT_MSG_SUCCS;
 800adf2:	2000      	movs	r0, #0
 800adf4:	e7f8      	b.n	800ade8 <CanStartTransmission+0x10>
        if(CAN_SendMsg(pDataBuf, ID, dataLen))
 800adf6:	461a      	mov	r2, r3
 800adf8:	f7fb fd24 	bl	8006844 <CAN_SendMsg>
 800adfc:	b118      	cbz	r0, 800ae06 <CanStartTransmission+0x2e>
            res = CAN_TRANSMIT_MSG_SUCCS;
 800adfe:	2000      	movs	r0, #0
 800ae00:	e7f2      	b.n	800ade8 <CanStartTransmission+0x10>
            res = CAN_TRANSMIT_MSG_FILED;
 800ae02:	4620      	mov	r0, r4
 800ae04:	e7f0      	b.n	800ade8 <CanStartTransmission+0x10>
            res = CAN_TRANSMIT_MSG_FILED;
 800ae06:	2001      	movs	r0, #1
 800ae08:	e7ee      	b.n	800ade8 <CanStartTransmission+0x10>
	...

0800ae0c <CanCopyDataAndStartTransmission>:
		uint8_t   Data[8];           ///< Data

	} CAN_MSG_INFO;
	static CAN_MSG_INFO g_sendCANMsgInfo;

	ID = CanGetTxId(txHandle);
 800ae0c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800ae10:	4b1d      	ldr	r3, [pc, #116]	@ (800ae88 <CanCopyDataAndStartTransmission+0x7c>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ae18:	6841      	ldr	r1, [r0, #4]
	if(ID > 0x7FF)
 800ae1a:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800ae1e:	d309      	bcc.n	800ae34 <CanCopyDataAndStartTransmission+0x28>
	{
		g_sendCANMsgInfo.IDE = kCanIdTypeExt;
 800ae20:	4a1a      	ldr	r2, [pc, #104]	@ (800ae8c <CanCopyDataAndStartTransmission+0x80>)
 800ae22:	78d3      	ldrb	r3, [r2, #3]
 800ae24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae28:	70d3      	strb	r3, [r2, #3]
	else
	{
		g_sendCANMsgInfo.IDE = kCanIdTypeStd;
	}

	if(CanGetDstData(txHandle) != NULL)
 800ae2a:	68c3      	ldr	r3, [r0, #12]
 800ae2c:	b143      	cbz	r3, 800ae40 <CanCopyDataAndStartTransmission+0x34>
{
 800ae2e:	b510      	push	{r4, lr}
	{
		//CanPackFunc(txHandle)(g_sendCANMsgInfo.Data,CanGetDstData(txHandle),CanGetMsgLen(txHandle));

		for(i=0; i<CanGetMsgLen(txHandle); i++)
 800ae30:	2200      	movs	r2, #0
 800ae32:	e010      	b.n	800ae56 <CanCopyDataAndStartTransmission+0x4a>
		g_sendCANMsgInfo.IDE = kCanIdTypeStd;
 800ae34:	4a15      	ldr	r2, [pc, #84]	@ (800ae8c <CanCopyDataAndStartTransmission+0x80>)
 800ae36:	78d3      	ldrb	r3, [r2, #3]
 800ae38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae3c:	70d3      	strb	r3, [r2, #3]
 800ae3e:	e7f4      	b.n	800ae2a <CanCopyDataAndStartTransmission+0x1e>

		return result;
	}
	else
	{
		return CAN_SEND_MSG_FILED;
 800ae40:	2001      	movs	r0, #1
	}
}
 800ae42:	4770      	bx	lr
			g_sendCANMsgInfo.Data[i] = CanGetDstData(txHandle)[i];
 800ae44:	68c3      	ldr	r3, [r0, #12]
 800ae46:	f813 c002 	ldrb.w	ip, [r3, r2]
 800ae4a:	4b10      	ldr	r3, [pc, #64]	@ (800ae8c <CanCopyDataAndStartTransmission+0x80>)
 800ae4c:	4413      	add	r3, r2
 800ae4e:	f883 c005 	strb.w	ip, [r3, #5]
		for(i=0; i<CanGetMsgLen(txHandle); i++)
 800ae52:	3201      	adds	r2, #1
 800ae54:	b2d2      	uxtb	r2, r2
 800ae56:	7a03      	ldrb	r3, [r0, #8]
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d8f3      	bhi.n	800ae44 <CanCopyDataAndStartTransmission+0x38>
		g_sendCANMsgInfo.ID = ID;
 800ae5c:	4a0b      	ldr	r2, [pc, #44]	@ (800ae8c <CanCopyDataAndStartTransmission+0x80>)
 800ae5e:	6814      	ldr	r4, [r2, #0]
 800ae60:	f361 041c 	bfi	r4, r1, #0, #29
 800ae64:	6014      	str	r4, [r2, #0]
		g_sendCANMsgInfo.DLC =  CanGetMsgLen(txHandle);
 800ae66:	f892 c004 	ldrb.w	ip, [r2, #4]
 800ae6a:	f363 0c03 	bfi	ip, r3, #0, #4
 800ae6e:	f882 c004 	strb.w	ip, [r2, #4]
		if(!CanStartTransmission(CanGetTxHwPort(txHandle), g_sendCANMsgInfo.ID, g_sendCANMsgInfo.Data, g_sendCANMsgInfo.DLC))
 800ae72:	f003 030f 	and.w	r3, r3, #15
 800ae76:	3205      	adds	r2, #5
 800ae78:	f021 4160 	bic.w	r1, r1, #3758096384	@ 0xe0000000
 800ae7c:	7d80      	ldrb	r0, [r0, #22]
 800ae7e:	f7ff ffab 	bl	800add8 <CanStartTransmission>
 800ae82:	b100      	cbz	r0, 800ae86 <CanCopyDataAndStartTransmission+0x7a>
			result = CAN_SEND_MSG_FILED;
 800ae84:	2001      	movs	r0, #1
}
 800ae86:	bd10      	pop	{r4, pc}
 800ae88:	20005968 	.word	0x20005968
 800ae8c:	20005954 	.word	0x20005954

0800ae90 <CanDrvTransmit>:

static uint8_t CanDrvTransmit(uint16_t txHandle)
{
 800ae90:	b510      	push	{r4, lr}
 800ae92:	4604      	mov	r4, r0
	uint32_t result = CAN_OK1;
	static uint16_t idle = 0xFF;

	//CurTxHandleIndex = txHandle;
	result = CanCopyDataAndStartTransmission(txHandle);
 800ae94:	f7ff ffba 	bl	800ae0c <CanCopyDataAndStartTransmission>
	if ((idle != txHandle)&& (result != CAN_OK1))
	{
		//DebugMsg("Can Tx Failed! %s\r\n",__FUNCTION__);
	}

	idle = txHandle;
 800ae98:	4b05      	ldr	r3, [pc, #20]	@ (800aeb0 <CanDrvTransmit+0x20>)
 800ae9a:	801c      	strh	r4, [r3, #0]

	if (result == CAN_OK1)
 800ae9c:	b108      	cbz	r0, 800aea2 <CanDrvTransmit+0x12>
    	CanDrv_HLTxConfirm(txHandle);
    	return CANTXOK;
	}
	else
	{
    	return CANTXFAILED;
 800ae9e:	2000      	movs	r0, #0
	}
}
 800aea0:	bd10      	pop	{r4, pc}
    	idle = 0xFF;
 800aea2:	22ff      	movs	r2, #255	@ 0xff
 800aea4:	801a      	strh	r2, [r3, #0]
    	CanDrv_HLTxConfirm(txHandle);
 800aea6:	4620      	mov	r0, r4
 800aea8:	f7ff ff1a 	bl	800ace0 <CanDrv_HLTxConfirm>
    	return CANTXOK;
 800aeac:	2001      	movs	r0, #1
 800aeae:	e7f7      	b.n	800aea0 <CanDrvTransmit+0x10>
 800aeb0:	20005964 	.word	0x20005964

0800aeb4 <CanIl_SendMsg>:
{
 800aeb4:	b538      	push	{r3, r4, r5, lr}
    ilTxState(ilTxHnd) &= iNotTxReq;
 800aeb6:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
 800aeba:	4d12      	ldr	r5, [pc, #72]	@ (800af04 <CanIl_SendMsg+0x50>)
 800aebc:	682a      	ldr	r2, [r5, #0]
 800aebe:	4422      	add	r2, r4
 800aec0:	7891      	ldrb	r1, [r2, #2]
 800aec2:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800aec6:	7091      	strb	r1, [r2, #2]
    ilTxUpdateCounter(ilTxHnd) = CanIl_GetTxUpdateCycles(ilTxHnd);
 800aec8:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 800aecc:	4a0e      	ldr	r2, [pc, #56]	@ (800af08 <CanIl_SendMsg+0x54>)
 800aece:	6812      	ldr	r2, [r2, #0]
 800aed0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800aed4:	682b      	ldr	r3, [r5, #0]
 800aed6:	4423      	add	r3, r4
 800aed8:	7cd2      	ldrb	r2, [r2, #19]
 800aeda:	705a      	strb	r2, [r3, #1]
    if (CanDrvTransmit( ilTxHnd) == CANTXFAILED)
 800aedc:	f7ff ffd8 	bl	800ae90 <CanDrvTransmit>
 800aee0:	b950      	cbnz	r0, 800aef8 <CanIl_SendMsg+0x44>
        ilTxState(ilTxHnd) |= (iTxReqSend);
 800aee2:	682b      	ldr	r3, [r5, #0]
 800aee4:	4423      	add	r3, r4
 800aee6:	789a      	ldrb	r2, [r3, #2]
 800aee8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800aeec:	709a      	strb	r2, [r3, #2]
        ilTxUpdateCounter(ilTxHnd) = 0;
 800aeee:	682b      	ldr	r3, [r5, #0]
 800aef0:	4423      	add	r3, r4
 800aef2:	2200      	movs	r2, #0
 800aef4:	705a      	strb	r2, [r3, #1]
}
 800aef6:	bd38      	pop	{r3, r4, r5, pc}
    	ilTxConfirmationFlags(ilTxHnd)=0x01;
 800aef8:	4b02      	ldr	r3, [pc, #8]	@ (800af04 <CanIl_SendMsg+0x50>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2201      	movs	r2, #1
 800aefe:	551a      	strb	r2, [r3, r4]
}
 800af00:	e7f9      	b.n	800aef6 <CanIl_SendMsg+0x42>
 800af02:	bf00      	nop
 800af04:	2000596c 	.word	0x2000596c
 800af08:	20005968 	.word	0x20005968

0800af0c <CanIl_TxTimerTask>:
{
 800af0c:	b538      	push	{r3, r4, r5, lr}
	if (CanIl_Tx_Enabled()!=0)
 800af0e:	4b72      	ldr	r3, [pc, #456]	@ (800b0d8 <CanIl_TxTimerTask+0x1cc>)
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	f013 0f02 	tst.w	r3, #2
 800af16:	f000 80de 	beq.w	800b0d6 <CanIl_TxTimerTask+0x1ca>
		ilTxHnd = iBytesOfTxHandles;
 800af1a:	4b70      	ldr	r3, [pc, #448]	@ (800b0dc <CanIl_TxTimerTask+0x1d0>)
 800af1c:	781c      	ldrb	r4, [r3, #0]
 800af1e:	e05b      	b.n	800afd8 <CanIl_TxTimerTask+0xcc>
					else if(ilTxEventCounter(ilTxHnd) < CanIl_GetCycEventTx_Interval_Time())
 800af20:	4560      	cmp	r0, ip
 800af22:	f080 80c4 	bcs.w	800b0ae <CanIl_TxTimerTask+0x1a2>
						ilTxEventCounter(ilTxHnd) = CanIl_GetCycEventTx_Interval_Time();
 800af26:	f882 c004 	strb.w	ip, [r2, #4]
						ilTxState(ilTxHnd) |= iTxReqSend;
 800af2a:	7890      	ldrb	r0, [r2, #2]
 800af2c:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800af30:	7090      	strb	r0, [r2, #2]
						ilTxState(ilTxHnd) &=(~ iTxQuickStart);
 800af32:	4a6b      	ldr	r2, [pc, #428]	@ (800b0e0 <CanIl_TxTimerTask+0x1d4>)
 800af34:	6812      	ldr	r2, [r2, #0]
 800af36:	441a      	add	r2, r3
 800af38:	7890      	ldrb	r0, [r2, #2]
 800af3a:	f000 00ef 	and.w	r0, r0, #239	@ 0xef
 800af3e:	7090      	strb	r0, [r2, #2]
				if ((ilTxEventCounter(ilTxHnd)==0)||((ilTxState(ilTxHnd) & iTxReqSend)!=0))
 800af40:	4a67      	ldr	r2, [pc, #412]	@ (800b0e0 <CanIl_TxTimerTask+0x1d4>)
 800af42:	6812      	ldr	r2, [r2, #0]
 800af44:	441a      	add	r2, r3
 800af46:	7910      	ldrb	r0, [r2, #4]
 800af48:	b118      	cbz	r0, 800af52 <CanIl_TxTimerTask+0x46>
 800af4a:	7890      	ldrb	r0, [r2, #2]
 800af4c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800af50:	d016      	beq.n	800af80 <CanIl_TxTimerTask+0x74>
					if((ilTxState(ilTxHnd) & iTxCycEveSend)!=0)
 800af52:	7890      	ldrb	r0, [r2, #2]
 800af54:	f010 0f02 	tst.w	r0, #2
 800af58:	d00a      	beq.n	800af70 <CanIl_TxTimerTask+0x64>
						ilTxState(ilTxHnd) &=(~ iTxQuickStart);
 800af5a:	7890      	ldrb	r0, [r2, #2]
 800af5c:	f000 00ef 	and.w	r0, r0, #239	@ 0xef
 800af60:	7090      	strb	r0, [r2, #2]
						ilTxState(ilTxHnd) |= iTxReqSend;
 800af62:	4a5f      	ldr	r2, [pc, #380]	@ (800b0e0 <CanIl_TxTimerTask+0x1d4>)
 800af64:	6812      	ldr	r2, [r2, #0]
 800af66:	441a      	add	r2, r3
 800af68:	7890      	ldrb	r0, [r2, #2]
 800af6a:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800af6e:	7090      	strb	r0, [r2, #2]
					ilTxEventCounter(ilTxHnd) = CanIl_GetTxEventCycles(ilTxHnd);
 800af70:	4a5c      	ldr	r2, [pc, #368]	@ (800b0e4 <CanIl_TxTimerTask+0x1d8>)
 800af72:	6810      	ldr	r0, [r2, #0]
 800af74:	4408      	add	r0, r1
 800af76:	4a5a      	ldr	r2, [pc, #360]	@ (800b0e0 <CanIl_TxTimerTask+0x1d4>)
 800af78:	6812      	ldr	r2, [r2, #0]
 800af7a:	441a      	add	r2, r3
 800af7c:	7d40      	ldrb	r0, [r0, #21]
 800af7e:	7110      	strb	r0, [r2, #4]
			if (((ilTxState(ilTxHnd) & (iTxEveSend ))!=0) && ((ilTxState(ilTxHnd) & (iTxQuickStart ))!=0))
 800af80:	4a57      	ldr	r2, [pc, #348]	@ (800b0e0 <CanIl_TxTimerTask+0x1d4>)
 800af82:	6812      	ldr	r2, [r2, #0]
 800af84:	441a      	add	r2, r3
 800af86:	7890      	ldrb	r0, [r2, #2]
 800af88:	f010 0f04 	tst.w	r0, #4
 800af8c:	d01b      	beq.n	800afc6 <CanIl_TxTimerTask+0xba>
 800af8e:	7890      	ldrb	r0, [r2, #2]
 800af90:	f010 0f10 	tst.w	r0, #16
 800af94:	d017      	beq.n	800afc6 <CanIl_TxTimerTask+0xba>
				if (ilTxEventCounter(ilTxHnd)!=0)
 800af96:	7910      	ldrb	r0, [r2, #4]
 800af98:	b108      	cbz	r0, 800af9e <CanIl_TxTimerTask+0x92>
					ilTxEventCounter(ilTxHnd)--;
 800af9a:	3801      	subs	r0, #1
 800af9c:	7110      	strb	r0, [r2, #4]
				if (ilTxEventCounter(ilTxHnd)==0)
 800af9e:	7910      	ldrb	r0, [r2, #4]
 800afa0:	b988      	cbnz	r0, 800afc6 <CanIl_TxTimerTask+0xba>
					ilTxState(ilTxHnd) &=(~ iTxQuickStart);
 800afa2:	7890      	ldrb	r0, [r2, #2]
 800afa4:	f000 00ef 	and.w	r0, r0, #239	@ 0xef
 800afa8:	7090      	strb	r0, [r2, #2]
					ilTxState(ilTxHnd) |= iTxReqSend;
 800afaa:	4d4d      	ldr	r5, [pc, #308]	@ (800b0e0 <CanIl_TxTimerTask+0x1d4>)
 800afac:	682a      	ldr	r2, [r5, #0]
 800afae:	441a      	add	r2, r3
 800afb0:	7890      	ldrb	r0, [r2, #2]
 800afb2:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800afb6:	7090      	strb	r0, [r2, #2]
					ilTxEventCounter(ilTxHnd) = CanIl_GetTxEventCycles(ilTxHnd);
 800afb8:	4a4a      	ldr	r2, [pc, #296]	@ (800b0e4 <CanIl_TxTimerTask+0x1d8>)
 800afba:	6812      	ldr	r2, [r2, #0]
 800afbc:	4411      	add	r1, r2
 800afbe:	682a      	ldr	r2, [r5, #0]
 800afc0:	441a      	add	r2, r3
 800afc2:	7d49      	ldrb	r1, [r1, #21]
 800afc4:	7111      	strb	r1, [r2, #4]
			if (((ilTxState(ilTxHnd) & iTxReqSend)!=0) && (ilTxUpdateCounter(ilTxHnd)==0) )
 800afc6:	4a46      	ldr	r2, [pc, #280]	@ (800b0e0 <CanIl_TxTimerTask+0x1d4>)
 800afc8:	6812      	ldr	r2, [r2, #0]
 800afca:	4413      	add	r3, r2
 800afcc:	789a      	ldrb	r2, [r3, #2]
 800afce:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800afd2:	d179      	bne.n	800b0c8 <CanIl_TxTimerTask+0x1bc>
		}while ( ilTxHnd != 0 );
 800afd4:	2c00      	cmp	r4, #0
 800afd6:	d07e      	beq.n	800b0d6 <CanIl_TxTimerTask+0x1ca>
			ilTxHnd--;
 800afd8:	3c01      	subs	r4, #1
 800afda:	b2a4      	uxth	r4, r4
			if(!(CanMsgAttributeSend & CanIl_GetTxAttribute(ilTxHnd)))
 800afdc:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800afe0:	0099      	lsls	r1, r3, #2
 800afe2:	4b40      	ldr	r3, [pc, #256]	@ (800b0e4 <CanIl_TxTimerTask+0x1d8>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	440b      	add	r3, r1
 800afe8:	7c1a      	ldrb	r2, [r3, #16]
 800afea:	4b3f      	ldr	r3, [pc, #252]	@ (800b0e8 <CanIl_TxTimerTask+0x1dc>)
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	421a      	tst	r2, r3
 800aff0:	d0f0      	beq.n	800afd4 <CanIl_TxTimerTask+0xc8>
			if ((ilTxUpdateCounter(ilTxHnd)!= (uint8_t)(iStopUpdateCntVal & 0x00FF)) && (ilTxUpdateCounter(ilTxHnd) > 0))
 800aff2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800aff6:	4a3a      	ldr	r2, [pc, #232]	@ (800b0e0 <CanIl_TxTimerTask+0x1d4>)
 800aff8:	6810      	ldr	r0, [r2, #0]
 800affa:	4418      	add	r0, r3
 800affc:	7842      	ldrb	r2, [r0, #1]
 800affe:	3a01      	subs	r2, #1
 800b000:	b2d2      	uxtb	r2, r2
 800b002:	2afd      	cmp	r2, #253	@ 0xfd
 800b004:	d800      	bhi.n	800b008 <CanIl_TxTimerTask+0xfc>
				ilTxUpdateCounter(ilTxHnd)--;
 800b006:	7042      	strb	r2, [r0, #1]
			if ((ilTxState(ilTxHnd) & iTxCycSend)!=0)
 800b008:	4a35      	ldr	r2, [pc, #212]	@ (800b0e0 <CanIl_TxTimerTask+0x1d4>)
 800b00a:	6812      	ldr	r2, [r2, #0]
 800b00c:	441a      	add	r2, r3
 800b00e:	7890      	ldrb	r0, [r2, #2]
 800b010:	f010 0f01 	tst.w	r0, #1
 800b014:	d01c      	beq.n	800b050 <CanIl_TxTimerTask+0x144>
				if (ilTxCyclicCounter(ilTxHnd)!=0)
 800b016:	78d0      	ldrb	r0, [r2, #3]
 800b018:	b108      	cbz	r0, 800b01e <CanIl_TxTimerTask+0x112>
					ilTxCyclicCounter(ilTxHnd)--;
 800b01a:	3801      	subs	r0, #1
 800b01c:	70d0      	strb	r0, [r2, #3]
				if ((ilTxCyclicCounter(ilTxHnd)==0)||((ilTxState(ilTxHnd) & iTxReqSend)!=0))
 800b01e:	4a30      	ldr	r2, [pc, #192]	@ (800b0e0 <CanIl_TxTimerTask+0x1d4>)
 800b020:	6812      	ldr	r2, [r2, #0]
 800b022:	441a      	add	r2, r3
 800b024:	78d0      	ldrb	r0, [r2, #3]
 800b026:	b118      	cbz	r0, 800b030 <CanIl_TxTimerTask+0x124>
 800b028:	7890      	ldrb	r0, [r2, #2]
 800b02a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800b02e:	d00f      	beq.n	800b050 <CanIl_TxTimerTask+0x144>
					ilTxCyclicCounter(ilTxHnd) = CanIl_GetTxCycCycles(ilTxHnd);
 800b030:	482c      	ldr	r0, [pc, #176]	@ (800b0e4 <CanIl_TxTimerTask+0x1d8>)
 800b032:	6800      	ldr	r0, [r0, #0]
 800b034:	4408      	add	r0, r1
 800b036:	7d00      	ldrb	r0, [r0, #20]
 800b038:	70d0      	strb	r0, [r2, #3]
					if ((ilTxState(ilTxHnd) & (iTxCycEveSend | iTxQuickStart))==0)
 800b03a:	4a29      	ldr	r2, [pc, #164]	@ (800b0e0 <CanIl_TxTimerTask+0x1d4>)
 800b03c:	6812      	ldr	r2, [r2, #0]
 800b03e:	441a      	add	r2, r3
 800b040:	7890      	ldrb	r0, [r2, #2]
 800b042:	f010 0f12 	tst.w	r0, #18
 800b046:	d103      	bne.n	800b050 <CanIl_TxTimerTask+0x144>
						ilTxState(ilTxHnd) |= iTxReqSend;
 800b048:	7890      	ldrb	r0, [r2, #2]
 800b04a:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800b04e:	7090      	strb	r0, [r2, #2]
			if	((ilTxState(ilTxHnd) & (iTxCycEveSend | iTxQuickStart))!=0)
 800b050:	4a23      	ldr	r2, [pc, #140]	@ (800b0e0 <CanIl_TxTimerTask+0x1d4>)
 800b052:	6812      	ldr	r2, [r2, #0]
 800b054:	441a      	add	r2, r3
 800b056:	7890      	ldrb	r0, [r2, #2]
 800b058:	f010 0f12 	tst.w	r0, #18
 800b05c:	d090      	beq.n	800af80 <CanIl_TxTimerTask+0x74>
				if (ilTxEventCounter(ilTxHnd)!=0) /*iTxCycEveSend*/
 800b05e:	7910      	ldrb	r0, [r2, #4]
 800b060:	b108      	cbz	r0, 800b066 <CanIl_TxTimerTask+0x15a>
					ilTxEventCounter(ilTxHnd)--;
 800b062:	3801      	subs	r0, #1
 800b064:	7110      	strb	r0, [r2, #4]
				if(((ilTxState(ilTxHnd) & iTxQuickStart)!=0) && (ilTxEventCounter(ilTxHnd)>0))
 800b066:	7890      	ldrb	r0, [r2, #2]
 800b068:	f010 0f10 	tst.w	r0, #16
 800b06c:	f43f af68 	beq.w	800af40 <CanIl_TxTimerTask+0x34>
 800b070:	7910      	ldrb	r0, [r2, #4]
 800b072:	2800      	cmp	r0, #0
 800b074:	f43f af64 	beq.w	800af40 <CanIl_TxTimerTask+0x34>
					if((ilTxEventCounter(ilTxHnd) >= CanIl_GetCycEventTx_Interval_Time())&&((CanIl_GetTxEventCycles(ilTxHnd)-ilTxEventCounter(ilTxHnd)) >= CanIl_GetCycEventTx_Interval_Time()))
 800b078:	4d1c      	ldr	r5, [pc, #112]	@ (800b0ec <CanIl_TxTimerTask+0x1e0>)
 800b07a:	682d      	ldr	r5, [r5, #0]
 800b07c:	f895 c002 	ldrb.w	ip, [r5, #2]
 800b080:	4560      	cmp	r0, ip
 800b082:	f4ff af4d 	bcc.w	800af20 <CanIl_TxTimerTask+0x14>
 800b086:	4d17      	ldr	r5, [pc, #92]	@ (800b0e4 <CanIl_TxTimerTask+0x1d8>)
 800b088:	682d      	ldr	r5, [r5, #0]
 800b08a:	440d      	add	r5, r1
 800b08c:	7d6d      	ldrb	r5, [r5, #21]
 800b08e:	1a2d      	subs	r5, r5, r0
 800b090:	4565      	cmp	r5, ip
 800b092:	f6ff af45 	blt.w	800af20 <CanIl_TxTimerTask+0x14>
						ilTxState(ilTxHnd) |= iTxReqSend;
 800b096:	7890      	ldrb	r0, [r2, #2]
 800b098:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800b09c:	7090      	strb	r0, [r2, #2]
						ilTxState(ilTxHnd) &=(~ iTxQuickStart);
 800b09e:	4a10      	ldr	r2, [pc, #64]	@ (800b0e0 <CanIl_TxTimerTask+0x1d4>)
 800b0a0:	6812      	ldr	r2, [r2, #0]
 800b0a2:	441a      	add	r2, r3
 800b0a4:	7890      	ldrb	r0, [r2, #2]
 800b0a6:	f000 00ef 	and.w	r0, r0, #239	@ 0xef
 800b0aa:	7090      	strb	r0, [r2, #2]
 800b0ac:	e748      	b.n	800af40 <CanIl_TxTimerTask+0x34>
					else if((CanIl_GetTxEventCycles(ilTxHnd)-ilTxEventCounter(ilTxHnd)) < CanIl_GetCycEventTx_Interval_Time())
 800b0ae:	4d0d      	ldr	r5, [pc, #52]	@ (800b0e4 <CanIl_TxTimerTask+0x1d8>)
 800b0b0:	682d      	ldr	r5, [r5, #0]
 800b0b2:	440d      	add	r5, r1
 800b0b4:	7d6d      	ldrb	r5, [r5, #21]
 800b0b6:	1a28      	subs	r0, r5, r0
 800b0b8:	4560      	cmp	r0, ip
 800b0ba:	f6bf af41 	bge.w	800af40 <CanIl_TxTimerTask+0x34>
						ilTxState(ilTxHnd) |= iTxQuickStart;
 800b0be:	7890      	ldrb	r0, [r2, #2]
 800b0c0:	f040 0010 	orr.w	r0, r0, #16
 800b0c4:	7090      	strb	r0, [r2, #2]
 800b0c6:	e73b      	b.n	800af40 <CanIl_TxTimerTask+0x34>
			if (((ilTxState(ilTxHnd) & iTxReqSend)!=0) && (ilTxUpdateCounter(ilTxHnd)==0) )
 800b0c8:	785b      	ldrb	r3, [r3, #1]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d182      	bne.n	800afd4 <CanIl_TxTimerTask+0xc8>
				CanIl_SendMsg(ilTxHnd);
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	f7ff fef0 	bl	800aeb4 <CanIl_SendMsg>
 800b0d4:	e77e      	b.n	800afd4 <CanIl_TxTimerTask+0xc8>
}
 800b0d6:	bd38      	pop	{r3, r4, r5, pc}
 800b0d8:	20005966 	.word	0x20005966
 800b0dc:	20005967 	.word	0x20005967
 800b0e0:	2000596c 	.word	0x2000596c
 800b0e4:	20005968 	.word	0x20005968
 800b0e8:	200005bc 	.word	0x200005bc
 800b0ec:	200005c0 	.word	0x200005c0

0800b0f0 <CanIl_TxTask>:
{
 800b0f0:	b508      	push	{r3, lr}
	CanIl_TxStateTask();
 800b0f2:	f7ff fd6d 	bl	800abd0 <CanIl_TxStateTask>
	CanIl_TxTimerTask();
 800b0f6:	f7ff ff09 	bl	800af0c <CanIl_TxTimerTask>
	CanIl_EventMsgCycTxPro();
 800b0fa:	f7ff fdb3 	bl	800ac64 <CanIl_EventMsgCycTxPro>
}
 800b0fe:	bd08      	pop	{r3, pc}

0800b100 <UserTimer_CreateDefault>:
*  Parameter   : UserTimer_ID : the No. of the timer defined in enum TIMER_IDS
*  Returns     : void
***********************************************************************/
void UserTimer_CreateDefault(UserTimer_ID_t Timer_ID)
{
	if(Timer_ID < TIMER_MAX) {
 800b100:	b9a0      	cbnz	r0, 800b12c <UserTimer_CreateDefault+0x2c>
{
 800b102:	b410      	push	{r4}
		UserTimer_Status[Timer_ID].Counter = UserTimer_Table[Timer_ID].Period;
 800b104:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800b108:	4909      	ldr	r1, [pc, #36]	@ (800b130 <UserTimer_CreateDefault+0x30>)
 800b10a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b10e:	684c      	ldr	r4, [r1, #4]
 800b110:	4a08      	ldr	r2, [pc, #32]	@ (800b134 <UserTimer_CreateDefault+0x34>)
 800b112:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 800b116:	eb02 008c 	add.w	r0, r2, ip, lsl #2
 800b11a:	f842 402c 	str.w	r4, [r2, ip, lsl #2]
		UserTimer_Status[Timer_ID].Counter_Backup = UserTimer_Table[Timer_ID].Period;
 800b11e:	6044      	str	r4, [r0, #4]
		UserTimer_Status[Timer_ID].Type = UserTimer_Table[Timer_ID].Type;
 800b120:	7a09      	ldrb	r1, [r1, #8]
 800b122:	7201      	strb	r1, [r0, #8]
		UserTimer_Status[Timer_ID].IsActive = 1;
 800b124:	2301      	movs	r3, #1
 800b126:	7243      	strb	r3, [r0, #9]
	}
}
 800b128:	bc10      	pop	{r4}
 800b12a:	4770      	bx	lr
 800b12c:	4770      	bx	lr
 800b12e:	bf00      	nop
 800b130:	08010564 	.word	0x08010564
 800b134:	20005974 	.word	0x20005974

0800b138 <UserTimer_Initial>:
{
 800b138:	b510      	push	{r4, lr}
	for(i = 0x00; i < (uint8_t)TIMER_MAX; i++) {
 800b13a:	2400      	movs	r4, #0
 800b13c:	b11c      	cbz	r4, 800b146 <UserTimer_Initial+0xe>
	UserTimer_TickCounter = 0;
 800b13e:	4b0f      	ldr	r3, [pc, #60]	@ (800b17c <UserTimer_Initial+0x44>)
 800b140:	2200      	movs	r2, #0
 800b142:	601a      	str	r2, [r3, #0]
}
 800b144:	bd10      	pop	{r4, pc}
		UserTimer_Status[i].Counter = 0;
 800b146:	480e      	ldr	r0, [pc, #56]	@ (800b180 <UserTimer_Initial+0x48>)
 800b148:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b14c:	0099      	lsls	r1, r3, #2
 800b14e:	1843      	adds	r3, r0, r1
 800b150:	2200      	movs	r2, #0
 800b152:	5042      	str	r2, [r0, r1]
		UserTimer_Status[i].Counter_Backup = 0;
 800b154:	605a      	str	r2, [r3, #4]
		UserTimer_Status[i].Type = E_UT_TYPE_ONE_SHOT;
 800b156:	2101      	movs	r1, #1
 800b158:	7219      	strb	r1, [r3, #8]
		UserTimer_Status[i].IsActive = 0;
 800b15a:	725a      	strb	r2, [r3, #9]
		if (UserTimer_Table[i].DefaultState == DEFAULT_START) {
 800b15c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b160:	009a      	lsls	r2, r3, #2
 800b162:	4b08      	ldr	r3, [pc, #32]	@ (800b184 <UserTimer_Initial+0x4c>)
 800b164:	4413      	add	r3, r2
 800b166:	7a5b      	ldrb	r3, [r3, #9]
 800b168:	428b      	cmp	r3, r1
 800b16a:	d002      	beq.n	800b172 <UserTimer_Initial+0x3a>
	for(i = 0x00; i < (uint8_t)TIMER_MAX; i++) {
 800b16c:	3401      	adds	r4, #1
 800b16e:	b2e4      	uxtb	r4, r4
 800b170:	e7e4      	b.n	800b13c <UserTimer_Initial+0x4>
			UserTimer_CreateDefault((UserTimer_ID_t)i);
 800b172:	4620      	mov	r0, r4
 800b174:	f7ff ffc4 	bl	800b100 <UserTimer_CreateDefault>
 800b178:	e7f8      	b.n	800b16c <UserTimer_Initial+0x34>
 800b17a:	bf00      	nop
 800b17c:	20005970 	.word	0x20005970
 800b180:	20005974 	.word	0x20005974
 800b184:	08010564 	.word	0x08010564

0800b188 <UserTimer_Handler>:
*  Description : run in main(), it will call function if timeout
*  Parameter   : void
*  Returns     : void
***********************************************************************/
void UserTimer_Handler(void)
{
 800b188:	b510      	push	{r4, lr}
	uint8_t i;

	for(i = 0x00; i < (uint8_t)TIMER_MAX; i++) {
 800b18a:	2400      	movs	r4, #0
 800b18c:	b104      	cbz	r4, 800b190 <UserTimer_Handler+0x8>

            UserTimer_Table[i].TimeoutFunc();
            
		}
	}
}
 800b18e:	bd10      	pop	{r4, pc}
		if((UserTimer_Status[i].IsActive) && (UserTimer_Status[i].Counter == 0u)) {
 800b190:	4622      	mov	r2, r4
 800b192:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b196:	0099      	lsls	r1, r3, #2
 800b198:	4b15      	ldr	r3, [pc, #84]	@ (800b1f0 <UserTimer_Handler+0x68>)
 800b19a:	440b      	add	r3, r1
 800b19c:	7a5b      	ldrb	r3, [r3, #9]
 800b19e:	b1cb      	cbz	r3, 800b1d4 <UserTimer_Handler+0x4c>
 800b1a0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800b1a4:	008b      	lsls	r3, r1, #2
 800b1a6:	4912      	ldr	r1, [pc, #72]	@ (800b1f0 <UserTimer_Handler+0x68>)
 800b1a8:	58cb      	ldr	r3, [r1, r3]
 800b1aa:	b99b      	cbnz	r3, 800b1d4 <UserTimer_Handler+0x4c>
            if(UserTimer_Status[i].Type == E_UT_TYPE_PERIODIC) {
 800b1ac:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b1b0:	0099      	lsls	r1, r3, #2
 800b1b2:	4b0f      	ldr	r3, [pc, #60]	@ (800b1f0 <UserTimer_Handler+0x68>)
 800b1b4:	440b      	add	r3, r1
 800b1b6:	7a1b      	ldrb	r3, [r3, #8]
 800b1b8:	b97b      	cbnz	r3, 800b1da <UserTimer_Handler+0x52>
                UserTimer_Status[i].Counter = UserTimer_Status[i].Counter_Backup;
 800b1ba:	490d      	ldr	r1, [pc, #52]	@ (800b1f0 <UserTimer_Handler+0x68>)
 800b1bc:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800b1c0:	0083      	lsls	r3, r0, #2
 800b1c2:	18c8      	adds	r0, r1, r3
 800b1c4:	6840      	ldr	r0, [r0, #4]
 800b1c6:	50c8      	str	r0, [r1, r3]
            UserTimer_Table[i].TimeoutFunc();
 800b1c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b1cc:	0093      	lsls	r3, r2, #2
 800b1ce:	4a09      	ldr	r2, [pc, #36]	@ (800b1f4 <UserTimer_Handler+0x6c>)
 800b1d0:	58d3      	ldr	r3, [r2, r3]
 800b1d2:	4798      	blx	r3
	for(i = 0x00; i < (uint8_t)TIMER_MAX; i++) {
 800b1d4:	3401      	adds	r4, #1
 800b1d6:	b2e4      	uxtb	r4, r4
 800b1d8:	e7d8      	b.n	800b18c <UserTimer_Handler+0x4>
                UserTimer_Status[i].Counter = 0;
 800b1da:	4805      	ldr	r0, [pc, #20]	@ (800b1f0 <UserTimer_Handler+0x68>)
 800b1dc:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800b1e0:	008b      	lsls	r3, r1, #2
 800b1e2:	eb00 0c03 	add.w	ip, r0, r3
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	50c1      	str	r1, [r0, r3]
                UserTimer_Status[i].IsActive = 0;
 800b1ea:	f88c 1009 	strb.w	r1, [ip, #9]
 800b1ee:	e7eb      	b.n	800b1c8 <UserTimer_Handler+0x40>
 800b1f0:	20005974 	.word	0x20005974
 800b1f4:	08010564 	.word	0x08010564

0800b1f8 <UserTimer_SetPeriod>:
	return (uint32_t)(UserTimer_Status[Timer_ID].Counter_Backup);
}

int UserTimer_SetPeriod(UserTimer_ID_t Timer_ID, uint16_t Period)
{
    if (Timer_ID >= TIMER_MAX) return -1;
 800b1f8:	b928      	cbnz	r0, 800b206 <UserTimer_SetPeriod+0xe>

    UserTimer_Status[Timer_ID].Counter = Period;
 800b1fa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800b1fe:	4a03      	ldr	r2, [pc, #12]	@ (800b20c <UserTimer_SetPeriod+0x14>)
 800b200:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return 0;
 800b204:	4770      	bx	lr
    if (Timer_ID >= TIMER_MAX) return -1;
 800b206:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b20a:	4770      	bx	lr
 800b20c:	20005974 	.word	0x20005974

0800b210 <LedHeart_Tick_1000ms_TimeoutFunc>:

/* create timer 2 if timer 1 timeout */
uint8_t cnt = 0,i = 0;
uint16_t heartled_delaytime[] = {1000, 200, 200, 200, 200, 2000 };
void LedHeart_Tick_1000ms_TimeoutFunc(void)
{
 800b210:	b538      	push	{r3, r4, r5, lr}
    UserTimer_SetPeriod(E_TIMER_LED_HEART,heartled_delaytime[i++]);
 800b212:	4c0f      	ldr	r4, [pc, #60]	@ (800b250 <LedHeart_Tick_1000ms_TimeoutFunc+0x40>)
 800b214:	7823      	ldrb	r3, [r4, #0]
 800b216:	1c5a      	adds	r2, r3, #1
 800b218:	7022      	strb	r2, [r4, #0]
 800b21a:	4a0e      	ldr	r2, [pc, #56]	@ (800b254 <LedHeart_Tick_1000ms_TimeoutFunc+0x44>)
 800b21c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800b220:	2000      	movs	r0, #0
 800b222:	f7ff ffe9 	bl	800b1f8 <UserTimer_SetPeriod>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, (GPIO_PinState)!cnt);
 800b226:	4d0c      	ldr	r5, [pc, #48]	@ (800b258 <LedHeart_Tick_1000ms_TimeoutFunc+0x48>)
 800b228:	782a      	ldrb	r2, [r5, #0]
 800b22a:	fab2 f282 	clz	r2, r2
 800b22e:	0952      	lsrs	r2, r2, #5
 800b230:	2108      	movs	r1, #8
 800b232:	480a      	ldr	r0, [pc, #40]	@ (800b25c <LedHeart_Tick_1000ms_TimeoutFunc+0x4c>)
 800b234:	f7fd fb26 	bl	8008884 <HAL_GPIO_WritePin>
    cnt = !cnt;
 800b238:	782b      	ldrb	r3, [r5, #0]
 800b23a:	fab3 f383 	clz	r3, r3
 800b23e:	095b      	lsrs	r3, r3, #5
 800b240:	702b      	strb	r3, [r5, #0]
    if(i> sizeof(heartled_delaytime)/sizeof(uint16_t))
 800b242:	7823      	ldrb	r3, [r4, #0]
 800b244:	2b06      	cmp	r3, #6
 800b246:	d902      	bls.n	800b24e <LedHeart_Tick_1000ms_TimeoutFunc+0x3e>
    {
        i = 0;
 800b248:	2300      	movs	r3, #0
 800b24a:	7023      	strb	r3, [r4, #0]
        cnt = 0;
 800b24c:	702b      	strb	r3, [r5, #0]
    }
}
 800b24e:	bd38      	pop	{r3, r4, r5, pc}
 800b250:	20005980 	.word	0x20005980
 800b254:	200005c4 	.word	0x200005c4
 800b258:	20005981 	.word	0x20005981
 800b25c:	40011000 	.word	0x40011000

0800b260 <__cvt>:
 800b260:	2b00      	cmp	r3, #0
 800b262:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b266:	461d      	mov	r5, r3
 800b268:	bfbb      	ittet	lt
 800b26a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800b26e:	461d      	movlt	r5, r3
 800b270:	2300      	movge	r3, #0
 800b272:	232d      	movlt	r3, #45	@ 0x2d
 800b274:	b088      	sub	sp, #32
 800b276:	4614      	mov	r4, r2
 800b278:	bfb8      	it	lt
 800b27a:	4614      	movlt	r4, r2
 800b27c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b27e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b280:	7013      	strb	r3, [r2, #0]
 800b282:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b284:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b288:	f023 0820 	bic.w	r8, r3, #32
 800b28c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b290:	d005      	beq.n	800b29e <__cvt+0x3e>
 800b292:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b296:	d100      	bne.n	800b29a <__cvt+0x3a>
 800b298:	3601      	adds	r6, #1
 800b29a:	2302      	movs	r3, #2
 800b29c:	e000      	b.n	800b2a0 <__cvt+0x40>
 800b29e:	2303      	movs	r3, #3
 800b2a0:	aa07      	add	r2, sp, #28
 800b2a2:	9204      	str	r2, [sp, #16]
 800b2a4:	aa06      	add	r2, sp, #24
 800b2a6:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b2aa:	e9cd 3600 	strd	r3, r6, [sp]
 800b2ae:	4622      	mov	r2, r4
 800b2b0:	462b      	mov	r3, r5
 800b2b2:	f001 f97d 	bl	800c5b0 <_dtoa_r>
 800b2b6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b2ba:	4607      	mov	r7, r0
 800b2bc:	d119      	bne.n	800b2f2 <__cvt+0x92>
 800b2be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b2c0:	07db      	lsls	r3, r3, #31
 800b2c2:	d50e      	bpl.n	800b2e2 <__cvt+0x82>
 800b2c4:	eb00 0906 	add.w	r9, r0, r6
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	f7f5 fbda 	bl	8000a88 <__aeabi_dcmpeq>
 800b2d4:	b108      	cbz	r0, 800b2da <__cvt+0x7a>
 800b2d6:	f8cd 901c 	str.w	r9, [sp, #28]
 800b2da:	2230      	movs	r2, #48	@ 0x30
 800b2dc:	9b07      	ldr	r3, [sp, #28]
 800b2de:	454b      	cmp	r3, r9
 800b2e0:	d31e      	bcc.n	800b320 <__cvt+0xc0>
 800b2e2:	4638      	mov	r0, r7
 800b2e4:	9b07      	ldr	r3, [sp, #28]
 800b2e6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b2e8:	1bdb      	subs	r3, r3, r7
 800b2ea:	6013      	str	r3, [r2, #0]
 800b2ec:	b008      	add	sp, #32
 800b2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b2f6:	eb00 0906 	add.w	r9, r0, r6
 800b2fa:	d1e5      	bne.n	800b2c8 <__cvt+0x68>
 800b2fc:	7803      	ldrb	r3, [r0, #0]
 800b2fe:	2b30      	cmp	r3, #48	@ 0x30
 800b300:	d10a      	bne.n	800b318 <__cvt+0xb8>
 800b302:	2200      	movs	r2, #0
 800b304:	2300      	movs	r3, #0
 800b306:	4620      	mov	r0, r4
 800b308:	4629      	mov	r1, r5
 800b30a:	f7f5 fbbd 	bl	8000a88 <__aeabi_dcmpeq>
 800b30e:	b918      	cbnz	r0, 800b318 <__cvt+0xb8>
 800b310:	f1c6 0601 	rsb	r6, r6, #1
 800b314:	f8ca 6000 	str.w	r6, [sl]
 800b318:	f8da 3000 	ldr.w	r3, [sl]
 800b31c:	4499      	add	r9, r3
 800b31e:	e7d3      	b.n	800b2c8 <__cvt+0x68>
 800b320:	1c59      	adds	r1, r3, #1
 800b322:	9107      	str	r1, [sp, #28]
 800b324:	701a      	strb	r2, [r3, #0]
 800b326:	e7d9      	b.n	800b2dc <__cvt+0x7c>

0800b328 <__exponent>:
 800b328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b32a:	2900      	cmp	r1, #0
 800b32c:	bfb6      	itet	lt
 800b32e:	232d      	movlt	r3, #45	@ 0x2d
 800b330:	232b      	movge	r3, #43	@ 0x2b
 800b332:	4249      	neglt	r1, r1
 800b334:	2909      	cmp	r1, #9
 800b336:	7002      	strb	r2, [r0, #0]
 800b338:	7043      	strb	r3, [r0, #1]
 800b33a:	dd29      	ble.n	800b390 <__exponent+0x68>
 800b33c:	f10d 0307 	add.w	r3, sp, #7
 800b340:	461d      	mov	r5, r3
 800b342:	270a      	movs	r7, #10
 800b344:	fbb1 f6f7 	udiv	r6, r1, r7
 800b348:	461a      	mov	r2, r3
 800b34a:	fb07 1416 	mls	r4, r7, r6, r1
 800b34e:	3430      	adds	r4, #48	@ 0x30
 800b350:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b354:	460c      	mov	r4, r1
 800b356:	2c63      	cmp	r4, #99	@ 0x63
 800b358:	4631      	mov	r1, r6
 800b35a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b35e:	dcf1      	bgt.n	800b344 <__exponent+0x1c>
 800b360:	3130      	adds	r1, #48	@ 0x30
 800b362:	1e94      	subs	r4, r2, #2
 800b364:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b368:	4623      	mov	r3, r4
 800b36a:	1c41      	adds	r1, r0, #1
 800b36c:	42ab      	cmp	r3, r5
 800b36e:	d30a      	bcc.n	800b386 <__exponent+0x5e>
 800b370:	f10d 0309 	add.w	r3, sp, #9
 800b374:	1a9b      	subs	r3, r3, r2
 800b376:	42ac      	cmp	r4, r5
 800b378:	bf88      	it	hi
 800b37a:	2300      	movhi	r3, #0
 800b37c:	3302      	adds	r3, #2
 800b37e:	4403      	add	r3, r0
 800b380:	1a18      	subs	r0, r3, r0
 800b382:	b003      	add	sp, #12
 800b384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b386:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b38a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b38e:	e7ed      	b.n	800b36c <__exponent+0x44>
 800b390:	2330      	movs	r3, #48	@ 0x30
 800b392:	3130      	adds	r1, #48	@ 0x30
 800b394:	7083      	strb	r3, [r0, #2]
 800b396:	70c1      	strb	r1, [r0, #3]
 800b398:	1d03      	adds	r3, r0, #4
 800b39a:	e7f1      	b.n	800b380 <__exponent+0x58>

0800b39c <_printf_float>:
 800b39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a0:	b091      	sub	sp, #68	@ 0x44
 800b3a2:	460c      	mov	r4, r1
 800b3a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b3a8:	4616      	mov	r6, r2
 800b3aa:	461f      	mov	r7, r3
 800b3ac:	4605      	mov	r5, r0
 800b3ae:	f000 ffdd 	bl	800c36c <_localeconv_r>
 800b3b2:	6803      	ldr	r3, [r0, #0]
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	9308      	str	r3, [sp, #32]
 800b3b8:	f7f4 ff3a 	bl	8000230 <strlen>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	930e      	str	r3, [sp, #56]	@ 0x38
 800b3c0:	f8d8 3000 	ldr.w	r3, [r8]
 800b3c4:	9009      	str	r0, [sp, #36]	@ 0x24
 800b3c6:	3307      	adds	r3, #7
 800b3c8:	f023 0307 	bic.w	r3, r3, #7
 800b3cc:	f103 0208 	add.w	r2, r3, #8
 800b3d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b3d4:	f8d4 b000 	ldr.w	fp, [r4]
 800b3d8:	f8c8 2000 	str.w	r2, [r8]
 800b3dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b3e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3e6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b3ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b3f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b3f6:	4b9c      	ldr	r3, [pc, #624]	@ (800b668 <_printf_float+0x2cc>)
 800b3f8:	f7f5 fb78 	bl	8000aec <__aeabi_dcmpun>
 800b3fc:	bb70      	cbnz	r0, 800b45c <_printf_float+0xc0>
 800b3fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b402:	f04f 32ff 	mov.w	r2, #4294967295
 800b406:	4b98      	ldr	r3, [pc, #608]	@ (800b668 <_printf_float+0x2cc>)
 800b408:	f7f5 fb52 	bl	8000ab0 <__aeabi_dcmple>
 800b40c:	bb30      	cbnz	r0, 800b45c <_printf_float+0xc0>
 800b40e:	2200      	movs	r2, #0
 800b410:	2300      	movs	r3, #0
 800b412:	4640      	mov	r0, r8
 800b414:	4649      	mov	r1, r9
 800b416:	f7f5 fb41 	bl	8000a9c <__aeabi_dcmplt>
 800b41a:	b110      	cbz	r0, 800b422 <_printf_float+0x86>
 800b41c:	232d      	movs	r3, #45	@ 0x2d
 800b41e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b422:	4a92      	ldr	r2, [pc, #584]	@ (800b66c <_printf_float+0x2d0>)
 800b424:	4b92      	ldr	r3, [pc, #584]	@ (800b670 <_printf_float+0x2d4>)
 800b426:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b42a:	bf8c      	ite	hi
 800b42c:	4690      	movhi	r8, r2
 800b42e:	4698      	movls	r8, r3
 800b430:	2303      	movs	r3, #3
 800b432:	f04f 0900 	mov.w	r9, #0
 800b436:	6123      	str	r3, [r4, #16]
 800b438:	f02b 0304 	bic.w	r3, fp, #4
 800b43c:	6023      	str	r3, [r4, #0]
 800b43e:	4633      	mov	r3, r6
 800b440:	4621      	mov	r1, r4
 800b442:	4628      	mov	r0, r5
 800b444:	9700      	str	r7, [sp, #0]
 800b446:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b448:	f000 f9d4 	bl	800b7f4 <_printf_common>
 800b44c:	3001      	adds	r0, #1
 800b44e:	f040 8090 	bne.w	800b572 <_printf_float+0x1d6>
 800b452:	f04f 30ff 	mov.w	r0, #4294967295
 800b456:	b011      	add	sp, #68	@ 0x44
 800b458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b45c:	4642      	mov	r2, r8
 800b45e:	464b      	mov	r3, r9
 800b460:	4640      	mov	r0, r8
 800b462:	4649      	mov	r1, r9
 800b464:	f7f5 fb42 	bl	8000aec <__aeabi_dcmpun>
 800b468:	b148      	cbz	r0, 800b47e <_printf_float+0xe2>
 800b46a:	464b      	mov	r3, r9
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	bfb8      	it	lt
 800b470:	232d      	movlt	r3, #45	@ 0x2d
 800b472:	4a80      	ldr	r2, [pc, #512]	@ (800b674 <_printf_float+0x2d8>)
 800b474:	bfb8      	it	lt
 800b476:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b47a:	4b7f      	ldr	r3, [pc, #508]	@ (800b678 <_printf_float+0x2dc>)
 800b47c:	e7d3      	b.n	800b426 <_printf_float+0x8a>
 800b47e:	6863      	ldr	r3, [r4, #4]
 800b480:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b484:	1c5a      	adds	r2, r3, #1
 800b486:	d13f      	bne.n	800b508 <_printf_float+0x16c>
 800b488:	2306      	movs	r3, #6
 800b48a:	6063      	str	r3, [r4, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b492:	6023      	str	r3, [r4, #0]
 800b494:	9206      	str	r2, [sp, #24]
 800b496:	aa0e      	add	r2, sp, #56	@ 0x38
 800b498:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b49c:	aa0d      	add	r2, sp, #52	@ 0x34
 800b49e:	9203      	str	r2, [sp, #12]
 800b4a0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b4a4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b4a8:	6863      	ldr	r3, [r4, #4]
 800b4aa:	4642      	mov	r2, r8
 800b4ac:	9300      	str	r3, [sp, #0]
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	464b      	mov	r3, r9
 800b4b2:	910a      	str	r1, [sp, #40]	@ 0x28
 800b4b4:	f7ff fed4 	bl	800b260 <__cvt>
 800b4b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b4ba:	4680      	mov	r8, r0
 800b4bc:	2947      	cmp	r1, #71	@ 0x47
 800b4be:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b4c0:	d128      	bne.n	800b514 <_printf_float+0x178>
 800b4c2:	1cc8      	adds	r0, r1, #3
 800b4c4:	db02      	blt.n	800b4cc <_printf_float+0x130>
 800b4c6:	6863      	ldr	r3, [r4, #4]
 800b4c8:	4299      	cmp	r1, r3
 800b4ca:	dd40      	ble.n	800b54e <_printf_float+0x1b2>
 800b4cc:	f1aa 0a02 	sub.w	sl, sl, #2
 800b4d0:	fa5f fa8a 	uxtb.w	sl, sl
 800b4d4:	4652      	mov	r2, sl
 800b4d6:	3901      	subs	r1, #1
 800b4d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b4dc:	910d      	str	r1, [sp, #52]	@ 0x34
 800b4de:	f7ff ff23 	bl	800b328 <__exponent>
 800b4e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b4e4:	4681      	mov	r9, r0
 800b4e6:	1813      	adds	r3, r2, r0
 800b4e8:	2a01      	cmp	r2, #1
 800b4ea:	6123      	str	r3, [r4, #16]
 800b4ec:	dc02      	bgt.n	800b4f4 <_printf_float+0x158>
 800b4ee:	6822      	ldr	r2, [r4, #0]
 800b4f0:	07d2      	lsls	r2, r2, #31
 800b4f2:	d501      	bpl.n	800b4f8 <_printf_float+0x15c>
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	6123      	str	r3, [r4, #16]
 800b4f8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d09e      	beq.n	800b43e <_printf_float+0xa2>
 800b500:	232d      	movs	r3, #45	@ 0x2d
 800b502:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b506:	e79a      	b.n	800b43e <_printf_float+0xa2>
 800b508:	2947      	cmp	r1, #71	@ 0x47
 800b50a:	d1bf      	bne.n	800b48c <_printf_float+0xf0>
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d1bd      	bne.n	800b48c <_printf_float+0xf0>
 800b510:	2301      	movs	r3, #1
 800b512:	e7ba      	b.n	800b48a <_printf_float+0xee>
 800b514:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b518:	d9dc      	bls.n	800b4d4 <_printf_float+0x138>
 800b51a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b51e:	d118      	bne.n	800b552 <_printf_float+0x1b6>
 800b520:	2900      	cmp	r1, #0
 800b522:	6863      	ldr	r3, [r4, #4]
 800b524:	dd0b      	ble.n	800b53e <_printf_float+0x1a2>
 800b526:	6121      	str	r1, [r4, #16]
 800b528:	b913      	cbnz	r3, 800b530 <_printf_float+0x194>
 800b52a:	6822      	ldr	r2, [r4, #0]
 800b52c:	07d0      	lsls	r0, r2, #31
 800b52e:	d502      	bpl.n	800b536 <_printf_float+0x19a>
 800b530:	3301      	adds	r3, #1
 800b532:	440b      	add	r3, r1
 800b534:	6123      	str	r3, [r4, #16]
 800b536:	f04f 0900 	mov.w	r9, #0
 800b53a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b53c:	e7dc      	b.n	800b4f8 <_printf_float+0x15c>
 800b53e:	b913      	cbnz	r3, 800b546 <_printf_float+0x1aa>
 800b540:	6822      	ldr	r2, [r4, #0]
 800b542:	07d2      	lsls	r2, r2, #31
 800b544:	d501      	bpl.n	800b54a <_printf_float+0x1ae>
 800b546:	3302      	adds	r3, #2
 800b548:	e7f4      	b.n	800b534 <_printf_float+0x198>
 800b54a:	2301      	movs	r3, #1
 800b54c:	e7f2      	b.n	800b534 <_printf_float+0x198>
 800b54e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b552:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b554:	4299      	cmp	r1, r3
 800b556:	db05      	blt.n	800b564 <_printf_float+0x1c8>
 800b558:	6823      	ldr	r3, [r4, #0]
 800b55a:	6121      	str	r1, [r4, #16]
 800b55c:	07d8      	lsls	r0, r3, #31
 800b55e:	d5ea      	bpl.n	800b536 <_printf_float+0x19a>
 800b560:	1c4b      	adds	r3, r1, #1
 800b562:	e7e7      	b.n	800b534 <_printf_float+0x198>
 800b564:	2900      	cmp	r1, #0
 800b566:	bfcc      	ite	gt
 800b568:	2201      	movgt	r2, #1
 800b56a:	f1c1 0202 	rsble	r2, r1, #2
 800b56e:	4413      	add	r3, r2
 800b570:	e7e0      	b.n	800b534 <_printf_float+0x198>
 800b572:	6823      	ldr	r3, [r4, #0]
 800b574:	055a      	lsls	r2, r3, #21
 800b576:	d407      	bmi.n	800b588 <_printf_float+0x1ec>
 800b578:	6923      	ldr	r3, [r4, #16]
 800b57a:	4642      	mov	r2, r8
 800b57c:	4631      	mov	r1, r6
 800b57e:	4628      	mov	r0, r5
 800b580:	47b8      	blx	r7
 800b582:	3001      	adds	r0, #1
 800b584:	d12b      	bne.n	800b5de <_printf_float+0x242>
 800b586:	e764      	b.n	800b452 <_printf_float+0xb6>
 800b588:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b58c:	f240 80dc 	bls.w	800b748 <_printf_float+0x3ac>
 800b590:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b594:	2200      	movs	r2, #0
 800b596:	2300      	movs	r3, #0
 800b598:	f7f5 fa76 	bl	8000a88 <__aeabi_dcmpeq>
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d033      	beq.n	800b608 <_printf_float+0x26c>
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	4631      	mov	r1, r6
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	4a35      	ldr	r2, [pc, #212]	@ (800b67c <_printf_float+0x2e0>)
 800b5a8:	47b8      	blx	r7
 800b5aa:	3001      	adds	r0, #1
 800b5ac:	f43f af51 	beq.w	800b452 <_printf_float+0xb6>
 800b5b0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b5b4:	4543      	cmp	r3, r8
 800b5b6:	db02      	blt.n	800b5be <_printf_float+0x222>
 800b5b8:	6823      	ldr	r3, [r4, #0]
 800b5ba:	07d8      	lsls	r0, r3, #31
 800b5bc:	d50f      	bpl.n	800b5de <_printf_float+0x242>
 800b5be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b5c2:	4631      	mov	r1, r6
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	47b8      	blx	r7
 800b5c8:	3001      	adds	r0, #1
 800b5ca:	f43f af42 	beq.w	800b452 <_printf_float+0xb6>
 800b5ce:	f04f 0900 	mov.w	r9, #0
 800b5d2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b5d6:	f104 0a1a 	add.w	sl, r4, #26
 800b5da:	45c8      	cmp	r8, r9
 800b5dc:	dc09      	bgt.n	800b5f2 <_printf_float+0x256>
 800b5de:	6823      	ldr	r3, [r4, #0]
 800b5e0:	079b      	lsls	r3, r3, #30
 800b5e2:	f100 8102 	bmi.w	800b7ea <_printf_float+0x44e>
 800b5e6:	68e0      	ldr	r0, [r4, #12]
 800b5e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5ea:	4298      	cmp	r0, r3
 800b5ec:	bfb8      	it	lt
 800b5ee:	4618      	movlt	r0, r3
 800b5f0:	e731      	b.n	800b456 <_printf_float+0xba>
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	4652      	mov	r2, sl
 800b5f6:	4631      	mov	r1, r6
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	47b8      	blx	r7
 800b5fc:	3001      	adds	r0, #1
 800b5fe:	f43f af28 	beq.w	800b452 <_printf_float+0xb6>
 800b602:	f109 0901 	add.w	r9, r9, #1
 800b606:	e7e8      	b.n	800b5da <_printf_float+0x23e>
 800b608:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	dc38      	bgt.n	800b680 <_printf_float+0x2e4>
 800b60e:	2301      	movs	r3, #1
 800b610:	4631      	mov	r1, r6
 800b612:	4628      	mov	r0, r5
 800b614:	4a19      	ldr	r2, [pc, #100]	@ (800b67c <_printf_float+0x2e0>)
 800b616:	47b8      	blx	r7
 800b618:	3001      	adds	r0, #1
 800b61a:	f43f af1a 	beq.w	800b452 <_printf_float+0xb6>
 800b61e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b622:	ea59 0303 	orrs.w	r3, r9, r3
 800b626:	d102      	bne.n	800b62e <_printf_float+0x292>
 800b628:	6823      	ldr	r3, [r4, #0]
 800b62a:	07d9      	lsls	r1, r3, #31
 800b62c:	d5d7      	bpl.n	800b5de <_printf_float+0x242>
 800b62e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b632:	4631      	mov	r1, r6
 800b634:	4628      	mov	r0, r5
 800b636:	47b8      	blx	r7
 800b638:	3001      	adds	r0, #1
 800b63a:	f43f af0a 	beq.w	800b452 <_printf_float+0xb6>
 800b63e:	f04f 0a00 	mov.w	sl, #0
 800b642:	f104 0b1a 	add.w	fp, r4, #26
 800b646:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b648:	425b      	negs	r3, r3
 800b64a:	4553      	cmp	r3, sl
 800b64c:	dc01      	bgt.n	800b652 <_printf_float+0x2b6>
 800b64e:	464b      	mov	r3, r9
 800b650:	e793      	b.n	800b57a <_printf_float+0x1de>
 800b652:	2301      	movs	r3, #1
 800b654:	465a      	mov	r2, fp
 800b656:	4631      	mov	r1, r6
 800b658:	4628      	mov	r0, r5
 800b65a:	47b8      	blx	r7
 800b65c:	3001      	adds	r0, #1
 800b65e:	f43f aef8 	beq.w	800b452 <_printf_float+0xb6>
 800b662:	f10a 0a01 	add.w	sl, sl, #1
 800b666:	e7ee      	b.n	800b646 <_printf_float+0x2aa>
 800b668:	7fefffff 	.word	0x7fefffff
 800b66c:	08010574 	.word	0x08010574
 800b670:	08010570 	.word	0x08010570
 800b674:	0801057c 	.word	0x0801057c
 800b678:	08010578 	.word	0x08010578
 800b67c:	08010580 	.word	0x08010580
 800b680:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b682:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b686:	4553      	cmp	r3, sl
 800b688:	bfa8      	it	ge
 800b68a:	4653      	movge	r3, sl
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	4699      	mov	r9, r3
 800b690:	dc36      	bgt.n	800b700 <_printf_float+0x364>
 800b692:	f04f 0b00 	mov.w	fp, #0
 800b696:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b69a:	f104 021a 	add.w	r2, r4, #26
 800b69e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b6a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6a2:	eba3 0309 	sub.w	r3, r3, r9
 800b6a6:	455b      	cmp	r3, fp
 800b6a8:	dc31      	bgt.n	800b70e <_printf_float+0x372>
 800b6aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b6ac:	459a      	cmp	sl, r3
 800b6ae:	dc3a      	bgt.n	800b726 <_printf_float+0x38a>
 800b6b0:	6823      	ldr	r3, [r4, #0]
 800b6b2:	07da      	lsls	r2, r3, #31
 800b6b4:	d437      	bmi.n	800b726 <_printf_float+0x38a>
 800b6b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b6b8:	ebaa 0903 	sub.w	r9, sl, r3
 800b6bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6be:	ebaa 0303 	sub.w	r3, sl, r3
 800b6c2:	4599      	cmp	r9, r3
 800b6c4:	bfa8      	it	ge
 800b6c6:	4699      	movge	r9, r3
 800b6c8:	f1b9 0f00 	cmp.w	r9, #0
 800b6cc:	dc33      	bgt.n	800b736 <_printf_float+0x39a>
 800b6ce:	f04f 0800 	mov.w	r8, #0
 800b6d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6d6:	f104 0b1a 	add.w	fp, r4, #26
 800b6da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b6dc:	ebaa 0303 	sub.w	r3, sl, r3
 800b6e0:	eba3 0309 	sub.w	r3, r3, r9
 800b6e4:	4543      	cmp	r3, r8
 800b6e6:	f77f af7a 	ble.w	800b5de <_printf_float+0x242>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	465a      	mov	r2, fp
 800b6ee:	4631      	mov	r1, r6
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	47b8      	blx	r7
 800b6f4:	3001      	adds	r0, #1
 800b6f6:	f43f aeac 	beq.w	800b452 <_printf_float+0xb6>
 800b6fa:	f108 0801 	add.w	r8, r8, #1
 800b6fe:	e7ec      	b.n	800b6da <_printf_float+0x33e>
 800b700:	4642      	mov	r2, r8
 800b702:	4631      	mov	r1, r6
 800b704:	4628      	mov	r0, r5
 800b706:	47b8      	blx	r7
 800b708:	3001      	adds	r0, #1
 800b70a:	d1c2      	bne.n	800b692 <_printf_float+0x2f6>
 800b70c:	e6a1      	b.n	800b452 <_printf_float+0xb6>
 800b70e:	2301      	movs	r3, #1
 800b710:	4631      	mov	r1, r6
 800b712:	4628      	mov	r0, r5
 800b714:	920a      	str	r2, [sp, #40]	@ 0x28
 800b716:	47b8      	blx	r7
 800b718:	3001      	adds	r0, #1
 800b71a:	f43f ae9a 	beq.w	800b452 <_printf_float+0xb6>
 800b71e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b720:	f10b 0b01 	add.w	fp, fp, #1
 800b724:	e7bb      	b.n	800b69e <_printf_float+0x302>
 800b726:	4631      	mov	r1, r6
 800b728:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b72c:	4628      	mov	r0, r5
 800b72e:	47b8      	blx	r7
 800b730:	3001      	adds	r0, #1
 800b732:	d1c0      	bne.n	800b6b6 <_printf_float+0x31a>
 800b734:	e68d      	b.n	800b452 <_printf_float+0xb6>
 800b736:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b738:	464b      	mov	r3, r9
 800b73a:	4631      	mov	r1, r6
 800b73c:	4628      	mov	r0, r5
 800b73e:	4442      	add	r2, r8
 800b740:	47b8      	blx	r7
 800b742:	3001      	adds	r0, #1
 800b744:	d1c3      	bne.n	800b6ce <_printf_float+0x332>
 800b746:	e684      	b.n	800b452 <_printf_float+0xb6>
 800b748:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b74c:	f1ba 0f01 	cmp.w	sl, #1
 800b750:	dc01      	bgt.n	800b756 <_printf_float+0x3ba>
 800b752:	07db      	lsls	r3, r3, #31
 800b754:	d536      	bpl.n	800b7c4 <_printf_float+0x428>
 800b756:	2301      	movs	r3, #1
 800b758:	4642      	mov	r2, r8
 800b75a:	4631      	mov	r1, r6
 800b75c:	4628      	mov	r0, r5
 800b75e:	47b8      	blx	r7
 800b760:	3001      	adds	r0, #1
 800b762:	f43f ae76 	beq.w	800b452 <_printf_float+0xb6>
 800b766:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b76a:	4631      	mov	r1, r6
 800b76c:	4628      	mov	r0, r5
 800b76e:	47b8      	blx	r7
 800b770:	3001      	adds	r0, #1
 800b772:	f43f ae6e 	beq.w	800b452 <_printf_float+0xb6>
 800b776:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b77a:	2200      	movs	r2, #0
 800b77c:	2300      	movs	r3, #0
 800b77e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b782:	f7f5 f981 	bl	8000a88 <__aeabi_dcmpeq>
 800b786:	b9c0      	cbnz	r0, 800b7ba <_printf_float+0x41e>
 800b788:	4653      	mov	r3, sl
 800b78a:	f108 0201 	add.w	r2, r8, #1
 800b78e:	4631      	mov	r1, r6
 800b790:	4628      	mov	r0, r5
 800b792:	47b8      	blx	r7
 800b794:	3001      	adds	r0, #1
 800b796:	d10c      	bne.n	800b7b2 <_printf_float+0x416>
 800b798:	e65b      	b.n	800b452 <_printf_float+0xb6>
 800b79a:	2301      	movs	r3, #1
 800b79c:	465a      	mov	r2, fp
 800b79e:	4631      	mov	r1, r6
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	47b8      	blx	r7
 800b7a4:	3001      	adds	r0, #1
 800b7a6:	f43f ae54 	beq.w	800b452 <_printf_float+0xb6>
 800b7aa:	f108 0801 	add.w	r8, r8, #1
 800b7ae:	45d0      	cmp	r8, sl
 800b7b0:	dbf3      	blt.n	800b79a <_printf_float+0x3fe>
 800b7b2:	464b      	mov	r3, r9
 800b7b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b7b8:	e6e0      	b.n	800b57c <_printf_float+0x1e0>
 800b7ba:	f04f 0800 	mov.w	r8, #0
 800b7be:	f104 0b1a 	add.w	fp, r4, #26
 800b7c2:	e7f4      	b.n	800b7ae <_printf_float+0x412>
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	4642      	mov	r2, r8
 800b7c8:	e7e1      	b.n	800b78e <_printf_float+0x3f2>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	464a      	mov	r2, r9
 800b7ce:	4631      	mov	r1, r6
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	47b8      	blx	r7
 800b7d4:	3001      	adds	r0, #1
 800b7d6:	f43f ae3c 	beq.w	800b452 <_printf_float+0xb6>
 800b7da:	f108 0801 	add.w	r8, r8, #1
 800b7de:	68e3      	ldr	r3, [r4, #12]
 800b7e0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b7e2:	1a5b      	subs	r3, r3, r1
 800b7e4:	4543      	cmp	r3, r8
 800b7e6:	dcf0      	bgt.n	800b7ca <_printf_float+0x42e>
 800b7e8:	e6fd      	b.n	800b5e6 <_printf_float+0x24a>
 800b7ea:	f04f 0800 	mov.w	r8, #0
 800b7ee:	f104 0919 	add.w	r9, r4, #25
 800b7f2:	e7f4      	b.n	800b7de <_printf_float+0x442>

0800b7f4 <_printf_common>:
 800b7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7f8:	4616      	mov	r6, r2
 800b7fa:	4698      	mov	r8, r3
 800b7fc:	688a      	ldr	r2, [r1, #8]
 800b7fe:	690b      	ldr	r3, [r1, #16]
 800b800:	4607      	mov	r7, r0
 800b802:	4293      	cmp	r3, r2
 800b804:	bfb8      	it	lt
 800b806:	4613      	movlt	r3, r2
 800b808:	6033      	str	r3, [r6, #0]
 800b80a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b80e:	460c      	mov	r4, r1
 800b810:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b814:	b10a      	cbz	r2, 800b81a <_printf_common+0x26>
 800b816:	3301      	adds	r3, #1
 800b818:	6033      	str	r3, [r6, #0]
 800b81a:	6823      	ldr	r3, [r4, #0]
 800b81c:	0699      	lsls	r1, r3, #26
 800b81e:	bf42      	ittt	mi
 800b820:	6833      	ldrmi	r3, [r6, #0]
 800b822:	3302      	addmi	r3, #2
 800b824:	6033      	strmi	r3, [r6, #0]
 800b826:	6825      	ldr	r5, [r4, #0]
 800b828:	f015 0506 	ands.w	r5, r5, #6
 800b82c:	d106      	bne.n	800b83c <_printf_common+0x48>
 800b82e:	f104 0a19 	add.w	sl, r4, #25
 800b832:	68e3      	ldr	r3, [r4, #12]
 800b834:	6832      	ldr	r2, [r6, #0]
 800b836:	1a9b      	subs	r3, r3, r2
 800b838:	42ab      	cmp	r3, r5
 800b83a:	dc2b      	bgt.n	800b894 <_printf_common+0xa0>
 800b83c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b840:	6822      	ldr	r2, [r4, #0]
 800b842:	3b00      	subs	r3, #0
 800b844:	bf18      	it	ne
 800b846:	2301      	movne	r3, #1
 800b848:	0692      	lsls	r2, r2, #26
 800b84a:	d430      	bmi.n	800b8ae <_printf_common+0xba>
 800b84c:	4641      	mov	r1, r8
 800b84e:	4638      	mov	r0, r7
 800b850:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b854:	47c8      	blx	r9
 800b856:	3001      	adds	r0, #1
 800b858:	d023      	beq.n	800b8a2 <_printf_common+0xae>
 800b85a:	6823      	ldr	r3, [r4, #0]
 800b85c:	6922      	ldr	r2, [r4, #16]
 800b85e:	f003 0306 	and.w	r3, r3, #6
 800b862:	2b04      	cmp	r3, #4
 800b864:	bf14      	ite	ne
 800b866:	2500      	movne	r5, #0
 800b868:	6833      	ldreq	r3, [r6, #0]
 800b86a:	f04f 0600 	mov.w	r6, #0
 800b86e:	bf08      	it	eq
 800b870:	68e5      	ldreq	r5, [r4, #12]
 800b872:	f104 041a 	add.w	r4, r4, #26
 800b876:	bf08      	it	eq
 800b878:	1aed      	subeq	r5, r5, r3
 800b87a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b87e:	bf08      	it	eq
 800b880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b884:	4293      	cmp	r3, r2
 800b886:	bfc4      	itt	gt
 800b888:	1a9b      	subgt	r3, r3, r2
 800b88a:	18ed      	addgt	r5, r5, r3
 800b88c:	42b5      	cmp	r5, r6
 800b88e:	d11a      	bne.n	800b8c6 <_printf_common+0xd2>
 800b890:	2000      	movs	r0, #0
 800b892:	e008      	b.n	800b8a6 <_printf_common+0xb2>
 800b894:	2301      	movs	r3, #1
 800b896:	4652      	mov	r2, sl
 800b898:	4641      	mov	r1, r8
 800b89a:	4638      	mov	r0, r7
 800b89c:	47c8      	blx	r9
 800b89e:	3001      	adds	r0, #1
 800b8a0:	d103      	bne.n	800b8aa <_printf_common+0xb6>
 800b8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8aa:	3501      	adds	r5, #1
 800b8ac:	e7c1      	b.n	800b832 <_printf_common+0x3e>
 800b8ae:	2030      	movs	r0, #48	@ 0x30
 800b8b0:	18e1      	adds	r1, r4, r3
 800b8b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b8b6:	1c5a      	adds	r2, r3, #1
 800b8b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b8bc:	4422      	add	r2, r4
 800b8be:	3302      	adds	r3, #2
 800b8c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b8c4:	e7c2      	b.n	800b84c <_printf_common+0x58>
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	4622      	mov	r2, r4
 800b8ca:	4641      	mov	r1, r8
 800b8cc:	4638      	mov	r0, r7
 800b8ce:	47c8      	blx	r9
 800b8d0:	3001      	adds	r0, #1
 800b8d2:	d0e6      	beq.n	800b8a2 <_printf_common+0xae>
 800b8d4:	3601      	adds	r6, #1
 800b8d6:	e7d9      	b.n	800b88c <_printf_common+0x98>

0800b8d8 <_printf_i>:
 800b8d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8dc:	7e0f      	ldrb	r7, [r1, #24]
 800b8de:	4691      	mov	r9, r2
 800b8e0:	2f78      	cmp	r7, #120	@ 0x78
 800b8e2:	4680      	mov	r8, r0
 800b8e4:	460c      	mov	r4, r1
 800b8e6:	469a      	mov	sl, r3
 800b8e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b8ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b8ee:	d807      	bhi.n	800b900 <_printf_i+0x28>
 800b8f0:	2f62      	cmp	r7, #98	@ 0x62
 800b8f2:	d80a      	bhi.n	800b90a <_printf_i+0x32>
 800b8f4:	2f00      	cmp	r7, #0
 800b8f6:	f000 80d1 	beq.w	800ba9c <_printf_i+0x1c4>
 800b8fa:	2f58      	cmp	r7, #88	@ 0x58
 800b8fc:	f000 80b8 	beq.w	800ba70 <_printf_i+0x198>
 800b900:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b904:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b908:	e03a      	b.n	800b980 <_printf_i+0xa8>
 800b90a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b90e:	2b15      	cmp	r3, #21
 800b910:	d8f6      	bhi.n	800b900 <_printf_i+0x28>
 800b912:	a101      	add	r1, pc, #4	@ (adr r1, 800b918 <_printf_i+0x40>)
 800b914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b918:	0800b971 	.word	0x0800b971
 800b91c:	0800b985 	.word	0x0800b985
 800b920:	0800b901 	.word	0x0800b901
 800b924:	0800b901 	.word	0x0800b901
 800b928:	0800b901 	.word	0x0800b901
 800b92c:	0800b901 	.word	0x0800b901
 800b930:	0800b985 	.word	0x0800b985
 800b934:	0800b901 	.word	0x0800b901
 800b938:	0800b901 	.word	0x0800b901
 800b93c:	0800b901 	.word	0x0800b901
 800b940:	0800b901 	.word	0x0800b901
 800b944:	0800ba83 	.word	0x0800ba83
 800b948:	0800b9af 	.word	0x0800b9af
 800b94c:	0800ba3d 	.word	0x0800ba3d
 800b950:	0800b901 	.word	0x0800b901
 800b954:	0800b901 	.word	0x0800b901
 800b958:	0800baa5 	.word	0x0800baa5
 800b95c:	0800b901 	.word	0x0800b901
 800b960:	0800b9af 	.word	0x0800b9af
 800b964:	0800b901 	.word	0x0800b901
 800b968:	0800b901 	.word	0x0800b901
 800b96c:	0800ba45 	.word	0x0800ba45
 800b970:	6833      	ldr	r3, [r6, #0]
 800b972:	1d1a      	adds	r2, r3, #4
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	6032      	str	r2, [r6, #0]
 800b978:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b97c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b980:	2301      	movs	r3, #1
 800b982:	e09c      	b.n	800babe <_printf_i+0x1e6>
 800b984:	6833      	ldr	r3, [r6, #0]
 800b986:	6820      	ldr	r0, [r4, #0]
 800b988:	1d19      	adds	r1, r3, #4
 800b98a:	6031      	str	r1, [r6, #0]
 800b98c:	0606      	lsls	r6, r0, #24
 800b98e:	d501      	bpl.n	800b994 <_printf_i+0xbc>
 800b990:	681d      	ldr	r5, [r3, #0]
 800b992:	e003      	b.n	800b99c <_printf_i+0xc4>
 800b994:	0645      	lsls	r5, r0, #25
 800b996:	d5fb      	bpl.n	800b990 <_printf_i+0xb8>
 800b998:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b99c:	2d00      	cmp	r5, #0
 800b99e:	da03      	bge.n	800b9a8 <_printf_i+0xd0>
 800b9a0:	232d      	movs	r3, #45	@ 0x2d
 800b9a2:	426d      	negs	r5, r5
 800b9a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9a8:	230a      	movs	r3, #10
 800b9aa:	4858      	ldr	r0, [pc, #352]	@ (800bb0c <_printf_i+0x234>)
 800b9ac:	e011      	b.n	800b9d2 <_printf_i+0xfa>
 800b9ae:	6821      	ldr	r1, [r4, #0]
 800b9b0:	6833      	ldr	r3, [r6, #0]
 800b9b2:	0608      	lsls	r0, r1, #24
 800b9b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b9b8:	d402      	bmi.n	800b9c0 <_printf_i+0xe8>
 800b9ba:	0649      	lsls	r1, r1, #25
 800b9bc:	bf48      	it	mi
 800b9be:	b2ad      	uxthmi	r5, r5
 800b9c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b9c2:	6033      	str	r3, [r6, #0]
 800b9c4:	bf14      	ite	ne
 800b9c6:	230a      	movne	r3, #10
 800b9c8:	2308      	moveq	r3, #8
 800b9ca:	4850      	ldr	r0, [pc, #320]	@ (800bb0c <_printf_i+0x234>)
 800b9cc:	2100      	movs	r1, #0
 800b9ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b9d2:	6866      	ldr	r6, [r4, #4]
 800b9d4:	2e00      	cmp	r6, #0
 800b9d6:	60a6      	str	r6, [r4, #8]
 800b9d8:	db05      	blt.n	800b9e6 <_printf_i+0x10e>
 800b9da:	6821      	ldr	r1, [r4, #0]
 800b9dc:	432e      	orrs	r6, r5
 800b9de:	f021 0104 	bic.w	r1, r1, #4
 800b9e2:	6021      	str	r1, [r4, #0]
 800b9e4:	d04b      	beq.n	800ba7e <_printf_i+0x1a6>
 800b9e6:	4616      	mov	r6, r2
 800b9e8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b9ec:	fb03 5711 	mls	r7, r3, r1, r5
 800b9f0:	5dc7      	ldrb	r7, [r0, r7]
 800b9f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b9f6:	462f      	mov	r7, r5
 800b9f8:	42bb      	cmp	r3, r7
 800b9fa:	460d      	mov	r5, r1
 800b9fc:	d9f4      	bls.n	800b9e8 <_printf_i+0x110>
 800b9fe:	2b08      	cmp	r3, #8
 800ba00:	d10b      	bne.n	800ba1a <_printf_i+0x142>
 800ba02:	6823      	ldr	r3, [r4, #0]
 800ba04:	07df      	lsls	r7, r3, #31
 800ba06:	d508      	bpl.n	800ba1a <_printf_i+0x142>
 800ba08:	6923      	ldr	r3, [r4, #16]
 800ba0a:	6861      	ldr	r1, [r4, #4]
 800ba0c:	4299      	cmp	r1, r3
 800ba0e:	bfde      	ittt	le
 800ba10:	2330      	movle	r3, #48	@ 0x30
 800ba12:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba16:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba1a:	1b92      	subs	r2, r2, r6
 800ba1c:	6122      	str	r2, [r4, #16]
 800ba1e:	464b      	mov	r3, r9
 800ba20:	4621      	mov	r1, r4
 800ba22:	4640      	mov	r0, r8
 800ba24:	f8cd a000 	str.w	sl, [sp]
 800ba28:	aa03      	add	r2, sp, #12
 800ba2a:	f7ff fee3 	bl	800b7f4 <_printf_common>
 800ba2e:	3001      	adds	r0, #1
 800ba30:	d14a      	bne.n	800bac8 <_printf_i+0x1f0>
 800ba32:	f04f 30ff 	mov.w	r0, #4294967295
 800ba36:	b004      	add	sp, #16
 800ba38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba3c:	6823      	ldr	r3, [r4, #0]
 800ba3e:	f043 0320 	orr.w	r3, r3, #32
 800ba42:	6023      	str	r3, [r4, #0]
 800ba44:	2778      	movs	r7, #120	@ 0x78
 800ba46:	4832      	ldr	r0, [pc, #200]	@ (800bb10 <_printf_i+0x238>)
 800ba48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba4c:	6823      	ldr	r3, [r4, #0]
 800ba4e:	6831      	ldr	r1, [r6, #0]
 800ba50:	061f      	lsls	r7, r3, #24
 800ba52:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba56:	d402      	bmi.n	800ba5e <_printf_i+0x186>
 800ba58:	065f      	lsls	r7, r3, #25
 800ba5a:	bf48      	it	mi
 800ba5c:	b2ad      	uxthmi	r5, r5
 800ba5e:	6031      	str	r1, [r6, #0]
 800ba60:	07d9      	lsls	r1, r3, #31
 800ba62:	bf44      	itt	mi
 800ba64:	f043 0320 	orrmi.w	r3, r3, #32
 800ba68:	6023      	strmi	r3, [r4, #0]
 800ba6a:	b11d      	cbz	r5, 800ba74 <_printf_i+0x19c>
 800ba6c:	2310      	movs	r3, #16
 800ba6e:	e7ad      	b.n	800b9cc <_printf_i+0xf4>
 800ba70:	4826      	ldr	r0, [pc, #152]	@ (800bb0c <_printf_i+0x234>)
 800ba72:	e7e9      	b.n	800ba48 <_printf_i+0x170>
 800ba74:	6823      	ldr	r3, [r4, #0]
 800ba76:	f023 0320 	bic.w	r3, r3, #32
 800ba7a:	6023      	str	r3, [r4, #0]
 800ba7c:	e7f6      	b.n	800ba6c <_printf_i+0x194>
 800ba7e:	4616      	mov	r6, r2
 800ba80:	e7bd      	b.n	800b9fe <_printf_i+0x126>
 800ba82:	6833      	ldr	r3, [r6, #0]
 800ba84:	6825      	ldr	r5, [r4, #0]
 800ba86:	1d18      	adds	r0, r3, #4
 800ba88:	6961      	ldr	r1, [r4, #20]
 800ba8a:	6030      	str	r0, [r6, #0]
 800ba8c:	062e      	lsls	r6, r5, #24
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	d501      	bpl.n	800ba96 <_printf_i+0x1be>
 800ba92:	6019      	str	r1, [r3, #0]
 800ba94:	e002      	b.n	800ba9c <_printf_i+0x1c4>
 800ba96:	0668      	lsls	r0, r5, #25
 800ba98:	d5fb      	bpl.n	800ba92 <_printf_i+0x1ba>
 800ba9a:	8019      	strh	r1, [r3, #0]
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	4616      	mov	r6, r2
 800baa0:	6123      	str	r3, [r4, #16]
 800baa2:	e7bc      	b.n	800ba1e <_printf_i+0x146>
 800baa4:	6833      	ldr	r3, [r6, #0]
 800baa6:	2100      	movs	r1, #0
 800baa8:	1d1a      	adds	r2, r3, #4
 800baaa:	6032      	str	r2, [r6, #0]
 800baac:	681e      	ldr	r6, [r3, #0]
 800baae:	6862      	ldr	r2, [r4, #4]
 800bab0:	4630      	mov	r0, r6
 800bab2:	f000 fcd2 	bl	800c45a <memchr>
 800bab6:	b108      	cbz	r0, 800babc <_printf_i+0x1e4>
 800bab8:	1b80      	subs	r0, r0, r6
 800baba:	6060      	str	r0, [r4, #4]
 800babc:	6863      	ldr	r3, [r4, #4]
 800babe:	6123      	str	r3, [r4, #16]
 800bac0:	2300      	movs	r3, #0
 800bac2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bac6:	e7aa      	b.n	800ba1e <_printf_i+0x146>
 800bac8:	4632      	mov	r2, r6
 800baca:	4649      	mov	r1, r9
 800bacc:	4640      	mov	r0, r8
 800bace:	6923      	ldr	r3, [r4, #16]
 800bad0:	47d0      	blx	sl
 800bad2:	3001      	adds	r0, #1
 800bad4:	d0ad      	beq.n	800ba32 <_printf_i+0x15a>
 800bad6:	6823      	ldr	r3, [r4, #0]
 800bad8:	079b      	lsls	r3, r3, #30
 800bada:	d413      	bmi.n	800bb04 <_printf_i+0x22c>
 800badc:	68e0      	ldr	r0, [r4, #12]
 800bade:	9b03      	ldr	r3, [sp, #12]
 800bae0:	4298      	cmp	r0, r3
 800bae2:	bfb8      	it	lt
 800bae4:	4618      	movlt	r0, r3
 800bae6:	e7a6      	b.n	800ba36 <_printf_i+0x15e>
 800bae8:	2301      	movs	r3, #1
 800baea:	4632      	mov	r2, r6
 800baec:	4649      	mov	r1, r9
 800baee:	4640      	mov	r0, r8
 800baf0:	47d0      	blx	sl
 800baf2:	3001      	adds	r0, #1
 800baf4:	d09d      	beq.n	800ba32 <_printf_i+0x15a>
 800baf6:	3501      	adds	r5, #1
 800baf8:	68e3      	ldr	r3, [r4, #12]
 800bafa:	9903      	ldr	r1, [sp, #12]
 800bafc:	1a5b      	subs	r3, r3, r1
 800bafe:	42ab      	cmp	r3, r5
 800bb00:	dcf2      	bgt.n	800bae8 <_printf_i+0x210>
 800bb02:	e7eb      	b.n	800badc <_printf_i+0x204>
 800bb04:	2500      	movs	r5, #0
 800bb06:	f104 0619 	add.w	r6, r4, #25
 800bb0a:	e7f5      	b.n	800baf8 <_printf_i+0x220>
 800bb0c:	08010582 	.word	0x08010582
 800bb10:	08010593 	.word	0x08010593

0800bb14 <_scanf_float>:
 800bb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb18:	b087      	sub	sp, #28
 800bb1a:	9303      	str	r3, [sp, #12]
 800bb1c:	688b      	ldr	r3, [r1, #8]
 800bb1e:	4691      	mov	r9, r2
 800bb20:	1e5a      	subs	r2, r3, #1
 800bb22:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bb26:	bf82      	ittt	hi
 800bb28:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bb2c:	eb03 0b05 	addhi.w	fp, r3, r5
 800bb30:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bb34:	460a      	mov	r2, r1
 800bb36:	f04f 0500 	mov.w	r5, #0
 800bb3a:	bf88      	it	hi
 800bb3c:	608b      	strhi	r3, [r1, #8]
 800bb3e:	680b      	ldr	r3, [r1, #0]
 800bb40:	4680      	mov	r8, r0
 800bb42:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800bb46:	f842 3b1c 	str.w	r3, [r2], #28
 800bb4a:	460c      	mov	r4, r1
 800bb4c:	bf98      	it	ls
 800bb4e:	f04f 0b00 	movls.w	fp, #0
 800bb52:	4616      	mov	r6, r2
 800bb54:	46aa      	mov	sl, r5
 800bb56:	462f      	mov	r7, r5
 800bb58:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bb5c:	9201      	str	r2, [sp, #4]
 800bb5e:	9502      	str	r5, [sp, #8]
 800bb60:	68a2      	ldr	r2, [r4, #8]
 800bb62:	b15a      	cbz	r2, 800bb7c <_scanf_float+0x68>
 800bb64:	f8d9 3000 	ldr.w	r3, [r9]
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	2b4e      	cmp	r3, #78	@ 0x4e
 800bb6c:	d862      	bhi.n	800bc34 <_scanf_float+0x120>
 800bb6e:	2b40      	cmp	r3, #64	@ 0x40
 800bb70:	d83a      	bhi.n	800bbe8 <_scanf_float+0xd4>
 800bb72:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800bb76:	b2c8      	uxtb	r0, r1
 800bb78:	280e      	cmp	r0, #14
 800bb7a:	d938      	bls.n	800bbee <_scanf_float+0xda>
 800bb7c:	b11f      	cbz	r7, 800bb86 <_scanf_float+0x72>
 800bb7e:	6823      	ldr	r3, [r4, #0]
 800bb80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb84:	6023      	str	r3, [r4, #0]
 800bb86:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb8a:	f1ba 0f01 	cmp.w	sl, #1
 800bb8e:	f200 8114 	bhi.w	800bdba <_scanf_float+0x2a6>
 800bb92:	9b01      	ldr	r3, [sp, #4]
 800bb94:	429e      	cmp	r6, r3
 800bb96:	f200 8105 	bhi.w	800bda4 <_scanf_float+0x290>
 800bb9a:	2001      	movs	r0, #1
 800bb9c:	b007      	add	sp, #28
 800bb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800bba6:	2a0d      	cmp	r2, #13
 800bba8:	d8e8      	bhi.n	800bb7c <_scanf_float+0x68>
 800bbaa:	a101      	add	r1, pc, #4	@ (adr r1, 800bbb0 <_scanf_float+0x9c>)
 800bbac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bbb0:	0800bcf9 	.word	0x0800bcf9
 800bbb4:	0800bb7d 	.word	0x0800bb7d
 800bbb8:	0800bb7d 	.word	0x0800bb7d
 800bbbc:	0800bb7d 	.word	0x0800bb7d
 800bbc0:	0800bd55 	.word	0x0800bd55
 800bbc4:	0800bd2f 	.word	0x0800bd2f
 800bbc8:	0800bb7d 	.word	0x0800bb7d
 800bbcc:	0800bb7d 	.word	0x0800bb7d
 800bbd0:	0800bd07 	.word	0x0800bd07
 800bbd4:	0800bb7d 	.word	0x0800bb7d
 800bbd8:	0800bb7d 	.word	0x0800bb7d
 800bbdc:	0800bb7d 	.word	0x0800bb7d
 800bbe0:	0800bb7d 	.word	0x0800bb7d
 800bbe4:	0800bcc3 	.word	0x0800bcc3
 800bbe8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800bbec:	e7db      	b.n	800bba6 <_scanf_float+0x92>
 800bbee:	290e      	cmp	r1, #14
 800bbf0:	d8c4      	bhi.n	800bb7c <_scanf_float+0x68>
 800bbf2:	a001      	add	r0, pc, #4	@ (adr r0, 800bbf8 <_scanf_float+0xe4>)
 800bbf4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bbf8:	0800bcb3 	.word	0x0800bcb3
 800bbfc:	0800bb7d 	.word	0x0800bb7d
 800bc00:	0800bcb3 	.word	0x0800bcb3
 800bc04:	0800bd43 	.word	0x0800bd43
 800bc08:	0800bb7d 	.word	0x0800bb7d
 800bc0c:	0800bc55 	.word	0x0800bc55
 800bc10:	0800bc99 	.word	0x0800bc99
 800bc14:	0800bc99 	.word	0x0800bc99
 800bc18:	0800bc99 	.word	0x0800bc99
 800bc1c:	0800bc99 	.word	0x0800bc99
 800bc20:	0800bc99 	.word	0x0800bc99
 800bc24:	0800bc99 	.word	0x0800bc99
 800bc28:	0800bc99 	.word	0x0800bc99
 800bc2c:	0800bc99 	.word	0x0800bc99
 800bc30:	0800bc99 	.word	0x0800bc99
 800bc34:	2b6e      	cmp	r3, #110	@ 0x6e
 800bc36:	d809      	bhi.n	800bc4c <_scanf_float+0x138>
 800bc38:	2b60      	cmp	r3, #96	@ 0x60
 800bc3a:	d8b2      	bhi.n	800bba2 <_scanf_float+0x8e>
 800bc3c:	2b54      	cmp	r3, #84	@ 0x54
 800bc3e:	d07b      	beq.n	800bd38 <_scanf_float+0x224>
 800bc40:	2b59      	cmp	r3, #89	@ 0x59
 800bc42:	d19b      	bne.n	800bb7c <_scanf_float+0x68>
 800bc44:	2d07      	cmp	r5, #7
 800bc46:	d199      	bne.n	800bb7c <_scanf_float+0x68>
 800bc48:	2508      	movs	r5, #8
 800bc4a:	e02f      	b.n	800bcac <_scanf_float+0x198>
 800bc4c:	2b74      	cmp	r3, #116	@ 0x74
 800bc4e:	d073      	beq.n	800bd38 <_scanf_float+0x224>
 800bc50:	2b79      	cmp	r3, #121	@ 0x79
 800bc52:	e7f6      	b.n	800bc42 <_scanf_float+0x12e>
 800bc54:	6821      	ldr	r1, [r4, #0]
 800bc56:	05c8      	lsls	r0, r1, #23
 800bc58:	d51e      	bpl.n	800bc98 <_scanf_float+0x184>
 800bc5a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800bc5e:	6021      	str	r1, [r4, #0]
 800bc60:	3701      	adds	r7, #1
 800bc62:	f1bb 0f00 	cmp.w	fp, #0
 800bc66:	d003      	beq.n	800bc70 <_scanf_float+0x15c>
 800bc68:	3201      	adds	r2, #1
 800bc6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc6e:	60a2      	str	r2, [r4, #8]
 800bc70:	68a3      	ldr	r3, [r4, #8]
 800bc72:	3b01      	subs	r3, #1
 800bc74:	60a3      	str	r3, [r4, #8]
 800bc76:	6923      	ldr	r3, [r4, #16]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	6123      	str	r3, [r4, #16]
 800bc7c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bc80:	3b01      	subs	r3, #1
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	f8c9 3004 	str.w	r3, [r9, #4]
 800bc88:	f340 8083 	ble.w	800bd92 <_scanf_float+0x27e>
 800bc8c:	f8d9 3000 	ldr.w	r3, [r9]
 800bc90:	3301      	adds	r3, #1
 800bc92:	f8c9 3000 	str.w	r3, [r9]
 800bc96:	e763      	b.n	800bb60 <_scanf_float+0x4c>
 800bc98:	eb1a 0105 	adds.w	r1, sl, r5
 800bc9c:	f47f af6e 	bne.w	800bb7c <_scanf_float+0x68>
 800bca0:	460d      	mov	r5, r1
 800bca2:	468a      	mov	sl, r1
 800bca4:	6822      	ldr	r2, [r4, #0]
 800bca6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bcaa:	6022      	str	r2, [r4, #0]
 800bcac:	f806 3b01 	strb.w	r3, [r6], #1
 800bcb0:	e7de      	b.n	800bc70 <_scanf_float+0x15c>
 800bcb2:	6822      	ldr	r2, [r4, #0]
 800bcb4:	0610      	lsls	r0, r2, #24
 800bcb6:	f57f af61 	bpl.w	800bb7c <_scanf_float+0x68>
 800bcba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bcbe:	6022      	str	r2, [r4, #0]
 800bcc0:	e7f4      	b.n	800bcac <_scanf_float+0x198>
 800bcc2:	f1ba 0f00 	cmp.w	sl, #0
 800bcc6:	d10c      	bne.n	800bce2 <_scanf_float+0x1ce>
 800bcc8:	b977      	cbnz	r7, 800bce8 <_scanf_float+0x1d4>
 800bcca:	6822      	ldr	r2, [r4, #0]
 800bccc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bcd0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bcd4:	d108      	bne.n	800bce8 <_scanf_float+0x1d4>
 800bcd6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bcda:	f04f 0a01 	mov.w	sl, #1
 800bcde:	6022      	str	r2, [r4, #0]
 800bce0:	e7e4      	b.n	800bcac <_scanf_float+0x198>
 800bce2:	f1ba 0f02 	cmp.w	sl, #2
 800bce6:	d051      	beq.n	800bd8c <_scanf_float+0x278>
 800bce8:	2d01      	cmp	r5, #1
 800bcea:	d002      	beq.n	800bcf2 <_scanf_float+0x1de>
 800bcec:	2d04      	cmp	r5, #4
 800bcee:	f47f af45 	bne.w	800bb7c <_scanf_float+0x68>
 800bcf2:	3501      	adds	r5, #1
 800bcf4:	b2ed      	uxtb	r5, r5
 800bcf6:	e7d9      	b.n	800bcac <_scanf_float+0x198>
 800bcf8:	f1ba 0f01 	cmp.w	sl, #1
 800bcfc:	f47f af3e 	bne.w	800bb7c <_scanf_float+0x68>
 800bd00:	f04f 0a02 	mov.w	sl, #2
 800bd04:	e7d2      	b.n	800bcac <_scanf_float+0x198>
 800bd06:	b975      	cbnz	r5, 800bd26 <_scanf_float+0x212>
 800bd08:	2f00      	cmp	r7, #0
 800bd0a:	f47f af38 	bne.w	800bb7e <_scanf_float+0x6a>
 800bd0e:	6822      	ldr	r2, [r4, #0]
 800bd10:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bd14:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bd18:	f040 80ff 	bne.w	800bf1a <_scanf_float+0x406>
 800bd1c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bd20:	2501      	movs	r5, #1
 800bd22:	6022      	str	r2, [r4, #0]
 800bd24:	e7c2      	b.n	800bcac <_scanf_float+0x198>
 800bd26:	2d03      	cmp	r5, #3
 800bd28:	d0e3      	beq.n	800bcf2 <_scanf_float+0x1de>
 800bd2a:	2d05      	cmp	r5, #5
 800bd2c:	e7df      	b.n	800bcee <_scanf_float+0x1da>
 800bd2e:	2d02      	cmp	r5, #2
 800bd30:	f47f af24 	bne.w	800bb7c <_scanf_float+0x68>
 800bd34:	2503      	movs	r5, #3
 800bd36:	e7b9      	b.n	800bcac <_scanf_float+0x198>
 800bd38:	2d06      	cmp	r5, #6
 800bd3a:	f47f af1f 	bne.w	800bb7c <_scanf_float+0x68>
 800bd3e:	2507      	movs	r5, #7
 800bd40:	e7b4      	b.n	800bcac <_scanf_float+0x198>
 800bd42:	6822      	ldr	r2, [r4, #0]
 800bd44:	0591      	lsls	r1, r2, #22
 800bd46:	f57f af19 	bpl.w	800bb7c <_scanf_float+0x68>
 800bd4a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bd4e:	6022      	str	r2, [r4, #0]
 800bd50:	9702      	str	r7, [sp, #8]
 800bd52:	e7ab      	b.n	800bcac <_scanf_float+0x198>
 800bd54:	6822      	ldr	r2, [r4, #0]
 800bd56:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bd5a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bd5e:	d005      	beq.n	800bd6c <_scanf_float+0x258>
 800bd60:	0550      	lsls	r0, r2, #21
 800bd62:	f57f af0b 	bpl.w	800bb7c <_scanf_float+0x68>
 800bd66:	2f00      	cmp	r7, #0
 800bd68:	f000 80d7 	beq.w	800bf1a <_scanf_float+0x406>
 800bd6c:	0591      	lsls	r1, r2, #22
 800bd6e:	bf58      	it	pl
 800bd70:	9902      	ldrpl	r1, [sp, #8]
 800bd72:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bd76:	bf58      	it	pl
 800bd78:	1a79      	subpl	r1, r7, r1
 800bd7a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bd7e:	f04f 0700 	mov.w	r7, #0
 800bd82:	bf58      	it	pl
 800bd84:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bd88:	6022      	str	r2, [r4, #0]
 800bd8a:	e78f      	b.n	800bcac <_scanf_float+0x198>
 800bd8c:	f04f 0a03 	mov.w	sl, #3
 800bd90:	e78c      	b.n	800bcac <_scanf_float+0x198>
 800bd92:	4649      	mov	r1, r9
 800bd94:	4640      	mov	r0, r8
 800bd96:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bd9a:	4798      	blx	r3
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	f43f aedf 	beq.w	800bb60 <_scanf_float+0x4c>
 800bda2:	e6eb      	b.n	800bb7c <_scanf_float+0x68>
 800bda4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bda8:	464a      	mov	r2, r9
 800bdaa:	4640      	mov	r0, r8
 800bdac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bdb0:	4798      	blx	r3
 800bdb2:	6923      	ldr	r3, [r4, #16]
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	6123      	str	r3, [r4, #16]
 800bdb8:	e6eb      	b.n	800bb92 <_scanf_float+0x7e>
 800bdba:	1e6b      	subs	r3, r5, #1
 800bdbc:	2b06      	cmp	r3, #6
 800bdbe:	d824      	bhi.n	800be0a <_scanf_float+0x2f6>
 800bdc0:	2d02      	cmp	r5, #2
 800bdc2:	d836      	bhi.n	800be32 <_scanf_float+0x31e>
 800bdc4:	9b01      	ldr	r3, [sp, #4]
 800bdc6:	429e      	cmp	r6, r3
 800bdc8:	f67f aee7 	bls.w	800bb9a <_scanf_float+0x86>
 800bdcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bdd0:	464a      	mov	r2, r9
 800bdd2:	4640      	mov	r0, r8
 800bdd4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bdd8:	4798      	blx	r3
 800bdda:	6923      	ldr	r3, [r4, #16]
 800bddc:	3b01      	subs	r3, #1
 800bdde:	6123      	str	r3, [r4, #16]
 800bde0:	e7f0      	b.n	800bdc4 <_scanf_float+0x2b0>
 800bde2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bde6:	464a      	mov	r2, r9
 800bde8:	4640      	mov	r0, r8
 800bdea:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bdee:	4798      	blx	r3
 800bdf0:	6923      	ldr	r3, [r4, #16]
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	6123      	str	r3, [r4, #16]
 800bdf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdfa:	fa5f fa8a 	uxtb.w	sl, sl
 800bdfe:	f1ba 0f02 	cmp.w	sl, #2
 800be02:	d1ee      	bne.n	800bde2 <_scanf_float+0x2ce>
 800be04:	3d03      	subs	r5, #3
 800be06:	b2ed      	uxtb	r5, r5
 800be08:	1b76      	subs	r6, r6, r5
 800be0a:	6823      	ldr	r3, [r4, #0]
 800be0c:	05da      	lsls	r2, r3, #23
 800be0e:	d530      	bpl.n	800be72 <_scanf_float+0x35e>
 800be10:	055b      	lsls	r3, r3, #21
 800be12:	d511      	bpl.n	800be38 <_scanf_float+0x324>
 800be14:	9b01      	ldr	r3, [sp, #4]
 800be16:	429e      	cmp	r6, r3
 800be18:	f67f aebf 	bls.w	800bb9a <_scanf_float+0x86>
 800be1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800be20:	464a      	mov	r2, r9
 800be22:	4640      	mov	r0, r8
 800be24:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800be28:	4798      	blx	r3
 800be2a:	6923      	ldr	r3, [r4, #16]
 800be2c:	3b01      	subs	r3, #1
 800be2e:	6123      	str	r3, [r4, #16]
 800be30:	e7f0      	b.n	800be14 <_scanf_float+0x300>
 800be32:	46aa      	mov	sl, r5
 800be34:	46b3      	mov	fp, r6
 800be36:	e7de      	b.n	800bdf6 <_scanf_float+0x2e2>
 800be38:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800be3c:	6923      	ldr	r3, [r4, #16]
 800be3e:	2965      	cmp	r1, #101	@ 0x65
 800be40:	f103 33ff 	add.w	r3, r3, #4294967295
 800be44:	f106 35ff 	add.w	r5, r6, #4294967295
 800be48:	6123      	str	r3, [r4, #16]
 800be4a:	d00c      	beq.n	800be66 <_scanf_float+0x352>
 800be4c:	2945      	cmp	r1, #69	@ 0x45
 800be4e:	d00a      	beq.n	800be66 <_scanf_float+0x352>
 800be50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800be54:	464a      	mov	r2, r9
 800be56:	4640      	mov	r0, r8
 800be58:	4798      	blx	r3
 800be5a:	6923      	ldr	r3, [r4, #16]
 800be5c:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800be60:	3b01      	subs	r3, #1
 800be62:	1eb5      	subs	r5, r6, #2
 800be64:	6123      	str	r3, [r4, #16]
 800be66:	464a      	mov	r2, r9
 800be68:	4640      	mov	r0, r8
 800be6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800be6e:	4798      	blx	r3
 800be70:	462e      	mov	r6, r5
 800be72:	6822      	ldr	r2, [r4, #0]
 800be74:	f012 0210 	ands.w	r2, r2, #16
 800be78:	d001      	beq.n	800be7e <_scanf_float+0x36a>
 800be7a:	2000      	movs	r0, #0
 800be7c:	e68e      	b.n	800bb9c <_scanf_float+0x88>
 800be7e:	7032      	strb	r2, [r6, #0]
 800be80:	6823      	ldr	r3, [r4, #0]
 800be82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800be86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be8a:	d125      	bne.n	800bed8 <_scanf_float+0x3c4>
 800be8c:	9b02      	ldr	r3, [sp, #8]
 800be8e:	429f      	cmp	r7, r3
 800be90:	d00a      	beq.n	800bea8 <_scanf_float+0x394>
 800be92:	1bda      	subs	r2, r3, r7
 800be94:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800be98:	429e      	cmp	r6, r3
 800be9a:	bf28      	it	cs
 800be9c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bea0:	4630      	mov	r0, r6
 800bea2:	491f      	ldr	r1, [pc, #124]	@ (800bf20 <_scanf_float+0x40c>)
 800bea4:	f000 f960 	bl	800c168 <siprintf>
 800bea8:	2200      	movs	r2, #0
 800beaa:	4640      	mov	r0, r8
 800beac:	9901      	ldr	r1, [sp, #4]
 800beae:	f002 fceb 	bl	800e888 <_strtod_r>
 800beb2:	9b03      	ldr	r3, [sp, #12]
 800beb4:	6825      	ldr	r5, [r4, #0]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f015 0f02 	tst.w	r5, #2
 800bebc:	4606      	mov	r6, r0
 800bebe:	460f      	mov	r7, r1
 800bec0:	f103 0204 	add.w	r2, r3, #4
 800bec4:	d015      	beq.n	800bef2 <_scanf_float+0x3de>
 800bec6:	9903      	ldr	r1, [sp, #12]
 800bec8:	600a      	str	r2, [r1, #0]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	e9c3 6700 	strd	r6, r7, [r3]
 800bed0:	68e3      	ldr	r3, [r4, #12]
 800bed2:	3301      	adds	r3, #1
 800bed4:	60e3      	str	r3, [r4, #12]
 800bed6:	e7d0      	b.n	800be7a <_scanf_float+0x366>
 800bed8:	9b04      	ldr	r3, [sp, #16]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d0e4      	beq.n	800bea8 <_scanf_float+0x394>
 800bede:	9905      	ldr	r1, [sp, #20]
 800bee0:	230a      	movs	r3, #10
 800bee2:	4640      	mov	r0, r8
 800bee4:	3101      	adds	r1, #1
 800bee6:	f002 fd4f 	bl	800e988 <_strtol_r>
 800beea:	9b04      	ldr	r3, [sp, #16]
 800beec:	9e05      	ldr	r6, [sp, #20]
 800beee:	1ac2      	subs	r2, r0, r3
 800bef0:	e7d0      	b.n	800be94 <_scanf_float+0x380>
 800bef2:	076d      	lsls	r5, r5, #29
 800bef4:	d4e7      	bmi.n	800bec6 <_scanf_float+0x3b2>
 800bef6:	9d03      	ldr	r5, [sp, #12]
 800bef8:	602a      	str	r2, [r5, #0]
 800befa:	681d      	ldr	r5, [r3, #0]
 800befc:	4602      	mov	r2, r0
 800befe:	460b      	mov	r3, r1
 800bf00:	f7f4 fdf4 	bl	8000aec <__aeabi_dcmpun>
 800bf04:	b120      	cbz	r0, 800bf10 <_scanf_float+0x3fc>
 800bf06:	4807      	ldr	r0, [pc, #28]	@ (800bf24 <_scanf_float+0x410>)
 800bf08:	f000 fac4 	bl	800c494 <nanf>
 800bf0c:	6028      	str	r0, [r5, #0]
 800bf0e:	e7df      	b.n	800bed0 <_scanf_float+0x3bc>
 800bf10:	4630      	mov	r0, r6
 800bf12:	4639      	mov	r1, r7
 800bf14:	f7f4 fe48 	bl	8000ba8 <__aeabi_d2f>
 800bf18:	e7f8      	b.n	800bf0c <_scanf_float+0x3f8>
 800bf1a:	2700      	movs	r7, #0
 800bf1c:	e633      	b.n	800bb86 <_scanf_float+0x72>
 800bf1e:	bf00      	nop
 800bf20:	080105a4 	.word	0x080105a4
 800bf24:	080106e5 	.word	0x080106e5

0800bf28 <std>:
 800bf28:	2300      	movs	r3, #0
 800bf2a:	b510      	push	{r4, lr}
 800bf2c:	4604      	mov	r4, r0
 800bf2e:	e9c0 3300 	strd	r3, r3, [r0]
 800bf32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf36:	6083      	str	r3, [r0, #8]
 800bf38:	8181      	strh	r1, [r0, #12]
 800bf3a:	6643      	str	r3, [r0, #100]	@ 0x64
 800bf3c:	81c2      	strh	r2, [r0, #14]
 800bf3e:	6183      	str	r3, [r0, #24]
 800bf40:	4619      	mov	r1, r3
 800bf42:	2208      	movs	r2, #8
 800bf44:	305c      	adds	r0, #92	@ 0x5c
 800bf46:	f000 fa09 	bl	800c35c <memset>
 800bf4a:	4b0d      	ldr	r3, [pc, #52]	@ (800bf80 <std+0x58>)
 800bf4c:	6224      	str	r4, [r4, #32]
 800bf4e:	6263      	str	r3, [r4, #36]	@ 0x24
 800bf50:	4b0c      	ldr	r3, [pc, #48]	@ (800bf84 <std+0x5c>)
 800bf52:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bf54:	4b0c      	ldr	r3, [pc, #48]	@ (800bf88 <std+0x60>)
 800bf56:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bf58:	4b0c      	ldr	r3, [pc, #48]	@ (800bf8c <std+0x64>)
 800bf5a:	6323      	str	r3, [r4, #48]	@ 0x30
 800bf5c:	4b0c      	ldr	r3, [pc, #48]	@ (800bf90 <std+0x68>)
 800bf5e:	429c      	cmp	r4, r3
 800bf60:	d006      	beq.n	800bf70 <std+0x48>
 800bf62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bf66:	4294      	cmp	r4, r2
 800bf68:	d002      	beq.n	800bf70 <std+0x48>
 800bf6a:	33d0      	adds	r3, #208	@ 0xd0
 800bf6c:	429c      	cmp	r4, r3
 800bf6e:	d105      	bne.n	800bf7c <std+0x54>
 800bf70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bf74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf78:	f000 ba6c 	b.w	800c454 <__retarget_lock_init_recursive>
 800bf7c:	bd10      	pop	{r4, pc}
 800bf7e:	bf00      	nop
 800bf80:	0800c1ad 	.word	0x0800c1ad
 800bf84:	0800c1cf 	.word	0x0800c1cf
 800bf88:	0800c207 	.word	0x0800c207
 800bf8c:	0800c22b 	.word	0x0800c22b
 800bf90:	20005984 	.word	0x20005984

0800bf94 <stdio_exit_handler>:
 800bf94:	4a02      	ldr	r2, [pc, #8]	@ (800bfa0 <stdio_exit_handler+0xc>)
 800bf96:	4903      	ldr	r1, [pc, #12]	@ (800bfa4 <stdio_exit_handler+0x10>)
 800bf98:	4803      	ldr	r0, [pc, #12]	@ (800bfa8 <stdio_exit_handler+0x14>)
 800bf9a:	f000 b869 	b.w	800c070 <_fwalk_sglue>
 800bf9e:	bf00      	nop
 800bfa0:	200005d0 	.word	0x200005d0
 800bfa4:	0800efbd 	.word	0x0800efbd
 800bfa8:	200005e0 	.word	0x200005e0

0800bfac <cleanup_stdio>:
 800bfac:	6841      	ldr	r1, [r0, #4]
 800bfae:	4b0c      	ldr	r3, [pc, #48]	@ (800bfe0 <cleanup_stdio+0x34>)
 800bfb0:	b510      	push	{r4, lr}
 800bfb2:	4299      	cmp	r1, r3
 800bfb4:	4604      	mov	r4, r0
 800bfb6:	d001      	beq.n	800bfbc <cleanup_stdio+0x10>
 800bfb8:	f003 f800 	bl	800efbc <_fflush_r>
 800bfbc:	68a1      	ldr	r1, [r4, #8]
 800bfbe:	4b09      	ldr	r3, [pc, #36]	@ (800bfe4 <cleanup_stdio+0x38>)
 800bfc0:	4299      	cmp	r1, r3
 800bfc2:	d002      	beq.n	800bfca <cleanup_stdio+0x1e>
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f002 fff9 	bl	800efbc <_fflush_r>
 800bfca:	68e1      	ldr	r1, [r4, #12]
 800bfcc:	4b06      	ldr	r3, [pc, #24]	@ (800bfe8 <cleanup_stdio+0x3c>)
 800bfce:	4299      	cmp	r1, r3
 800bfd0:	d004      	beq.n	800bfdc <cleanup_stdio+0x30>
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfd8:	f002 bff0 	b.w	800efbc <_fflush_r>
 800bfdc:	bd10      	pop	{r4, pc}
 800bfde:	bf00      	nop
 800bfe0:	20005984 	.word	0x20005984
 800bfe4:	200059ec 	.word	0x200059ec
 800bfe8:	20005a54 	.word	0x20005a54

0800bfec <global_stdio_init.part.0>:
 800bfec:	b510      	push	{r4, lr}
 800bfee:	4b0b      	ldr	r3, [pc, #44]	@ (800c01c <global_stdio_init.part.0+0x30>)
 800bff0:	4c0b      	ldr	r4, [pc, #44]	@ (800c020 <global_stdio_init.part.0+0x34>)
 800bff2:	4a0c      	ldr	r2, [pc, #48]	@ (800c024 <global_stdio_init.part.0+0x38>)
 800bff4:	4620      	mov	r0, r4
 800bff6:	601a      	str	r2, [r3, #0]
 800bff8:	2104      	movs	r1, #4
 800bffa:	2200      	movs	r2, #0
 800bffc:	f7ff ff94 	bl	800bf28 <std>
 800c000:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c004:	2201      	movs	r2, #1
 800c006:	2109      	movs	r1, #9
 800c008:	f7ff ff8e 	bl	800bf28 <std>
 800c00c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c010:	2202      	movs	r2, #2
 800c012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c016:	2112      	movs	r1, #18
 800c018:	f7ff bf86 	b.w	800bf28 <std>
 800c01c:	20005abc 	.word	0x20005abc
 800c020:	20005984 	.word	0x20005984
 800c024:	0800bf95 	.word	0x0800bf95

0800c028 <__sfp_lock_acquire>:
 800c028:	4801      	ldr	r0, [pc, #4]	@ (800c030 <__sfp_lock_acquire+0x8>)
 800c02a:	f000 ba14 	b.w	800c456 <__retarget_lock_acquire_recursive>
 800c02e:	bf00      	nop
 800c030:	20005ac5 	.word	0x20005ac5

0800c034 <__sfp_lock_release>:
 800c034:	4801      	ldr	r0, [pc, #4]	@ (800c03c <__sfp_lock_release+0x8>)
 800c036:	f000 ba0f 	b.w	800c458 <__retarget_lock_release_recursive>
 800c03a:	bf00      	nop
 800c03c:	20005ac5 	.word	0x20005ac5

0800c040 <__sinit>:
 800c040:	b510      	push	{r4, lr}
 800c042:	4604      	mov	r4, r0
 800c044:	f7ff fff0 	bl	800c028 <__sfp_lock_acquire>
 800c048:	6a23      	ldr	r3, [r4, #32]
 800c04a:	b11b      	cbz	r3, 800c054 <__sinit+0x14>
 800c04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c050:	f7ff bff0 	b.w	800c034 <__sfp_lock_release>
 800c054:	4b04      	ldr	r3, [pc, #16]	@ (800c068 <__sinit+0x28>)
 800c056:	6223      	str	r3, [r4, #32]
 800c058:	4b04      	ldr	r3, [pc, #16]	@ (800c06c <__sinit+0x2c>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1f5      	bne.n	800c04c <__sinit+0xc>
 800c060:	f7ff ffc4 	bl	800bfec <global_stdio_init.part.0>
 800c064:	e7f2      	b.n	800c04c <__sinit+0xc>
 800c066:	bf00      	nop
 800c068:	0800bfad 	.word	0x0800bfad
 800c06c:	20005abc 	.word	0x20005abc

0800c070 <_fwalk_sglue>:
 800c070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c074:	4607      	mov	r7, r0
 800c076:	4688      	mov	r8, r1
 800c078:	4614      	mov	r4, r2
 800c07a:	2600      	movs	r6, #0
 800c07c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c080:	f1b9 0901 	subs.w	r9, r9, #1
 800c084:	d505      	bpl.n	800c092 <_fwalk_sglue+0x22>
 800c086:	6824      	ldr	r4, [r4, #0]
 800c088:	2c00      	cmp	r4, #0
 800c08a:	d1f7      	bne.n	800c07c <_fwalk_sglue+0xc>
 800c08c:	4630      	mov	r0, r6
 800c08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c092:	89ab      	ldrh	r3, [r5, #12]
 800c094:	2b01      	cmp	r3, #1
 800c096:	d907      	bls.n	800c0a8 <_fwalk_sglue+0x38>
 800c098:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c09c:	3301      	adds	r3, #1
 800c09e:	d003      	beq.n	800c0a8 <_fwalk_sglue+0x38>
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	4638      	mov	r0, r7
 800c0a4:	47c0      	blx	r8
 800c0a6:	4306      	orrs	r6, r0
 800c0a8:	3568      	adds	r5, #104	@ 0x68
 800c0aa:	e7e9      	b.n	800c080 <_fwalk_sglue+0x10>

0800c0ac <_puts_r>:
 800c0ac:	6a03      	ldr	r3, [r0, #32]
 800c0ae:	b570      	push	{r4, r5, r6, lr}
 800c0b0:	4605      	mov	r5, r0
 800c0b2:	460e      	mov	r6, r1
 800c0b4:	6884      	ldr	r4, [r0, #8]
 800c0b6:	b90b      	cbnz	r3, 800c0bc <_puts_r+0x10>
 800c0b8:	f7ff ffc2 	bl	800c040 <__sinit>
 800c0bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c0be:	07db      	lsls	r3, r3, #31
 800c0c0:	d405      	bmi.n	800c0ce <_puts_r+0x22>
 800c0c2:	89a3      	ldrh	r3, [r4, #12]
 800c0c4:	0598      	lsls	r0, r3, #22
 800c0c6:	d402      	bmi.n	800c0ce <_puts_r+0x22>
 800c0c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0ca:	f000 f9c4 	bl	800c456 <__retarget_lock_acquire_recursive>
 800c0ce:	89a3      	ldrh	r3, [r4, #12]
 800c0d0:	0719      	lsls	r1, r3, #28
 800c0d2:	d502      	bpl.n	800c0da <_puts_r+0x2e>
 800c0d4:	6923      	ldr	r3, [r4, #16]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d135      	bne.n	800c146 <_puts_r+0x9a>
 800c0da:	4621      	mov	r1, r4
 800c0dc:	4628      	mov	r0, r5
 800c0de:	f000 f8e7 	bl	800c2b0 <__swsetup_r>
 800c0e2:	b380      	cbz	r0, 800c146 <_puts_r+0x9a>
 800c0e4:	f04f 35ff 	mov.w	r5, #4294967295
 800c0e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c0ea:	07da      	lsls	r2, r3, #31
 800c0ec:	d405      	bmi.n	800c0fa <_puts_r+0x4e>
 800c0ee:	89a3      	ldrh	r3, [r4, #12]
 800c0f0:	059b      	lsls	r3, r3, #22
 800c0f2:	d402      	bmi.n	800c0fa <_puts_r+0x4e>
 800c0f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0f6:	f000 f9af 	bl	800c458 <__retarget_lock_release_recursive>
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	bd70      	pop	{r4, r5, r6, pc}
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	da04      	bge.n	800c10c <_puts_r+0x60>
 800c102:	69a2      	ldr	r2, [r4, #24]
 800c104:	429a      	cmp	r2, r3
 800c106:	dc17      	bgt.n	800c138 <_puts_r+0x8c>
 800c108:	290a      	cmp	r1, #10
 800c10a:	d015      	beq.n	800c138 <_puts_r+0x8c>
 800c10c:	6823      	ldr	r3, [r4, #0]
 800c10e:	1c5a      	adds	r2, r3, #1
 800c110:	6022      	str	r2, [r4, #0]
 800c112:	7019      	strb	r1, [r3, #0]
 800c114:	68a3      	ldr	r3, [r4, #8]
 800c116:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c11a:	3b01      	subs	r3, #1
 800c11c:	60a3      	str	r3, [r4, #8]
 800c11e:	2900      	cmp	r1, #0
 800c120:	d1ed      	bne.n	800c0fe <_puts_r+0x52>
 800c122:	2b00      	cmp	r3, #0
 800c124:	da11      	bge.n	800c14a <_puts_r+0x9e>
 800c126:	4622      	mov	r2, r4
 800c128:	210a      	movs	r1, #10
 800c12a:	4628      	mov	r0, r5
 800c12c:	f000 f881 	bl	800c232 <__swbuf_r>
 800c130:	3001      	adds	r0, #1
 800c132:	d0d7      	beq.n	800c0e4 <_puts_r+0x38>
 800c134:	250a      	movs	r5, #10
 800c136:	e7d7      	b.n	800c0e8 <_puts_r+0x3c>
 800c138:	4622      	mov	r2, r4
 800c13a:	4628      	mov	r0, r5
 800c13c:	f000 f879 	bl	800c232 <__swbuf_r>
 800c140:	3001      	adds	r0, #1
 800c142:	d1e7      	bne.n	800c114 <_puts_r+0x68>
 800c144:	e7ce      	b.n	800c0e4 <_puts_r+0x38>
 800c146:	3e01      	subs	r6, #1
 800c148:	e7e4      	b.n	800c114 <_puts_r+0x68>
 800c14a:	6823      	ldr	r3, [r4, #0]
 800c14c:	1c5a      	adds	r2, r3, #1
 800c14e:	6022      	str	r2, [r4, #0]
 800c150:	220a      	movs	r2, #10
 800c152:	701a      	strb	r2, [r3, #0]
 800c154:	e7ee      	b.n	800c134 <_puts_r+0x88>
	...

0800c158 <puts>:
 800c158:	4b02      	ldr	r3, [pc, #8]	@ (800c164 <puts+0xc>)
 800c15a:	4601      	mov	r1, r0
 800c15c:	6818      	ldr	r0, [r3, #0]
 800c15e:	f7ff bfa5 	b.w	800c0ac <_puts_r>
 800c162:	bf00      	nop
 800c164:	200005dc 	.word	0x200005dc

0800c168 <siprintf>:
 800c168:	b40e      	push	{r1, r2, r3}
 800c16a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c16e:	b510      	push	{r4, lr}
 800c170:	2400      	movs	r4, #0
 800c172:	b09d      	sub	sp, #116	@ 0x74
 800c174:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c176:	9002      	str	r0, [sp, #8]
 800c178:	9006      	str	r0, [sp, #24]
 800c17a:	9107      	str	r1, [sp, #28]
 800c17c:	9104      	str	r1, [sp, #16]
 800c17e:	4809      	ldr	r0, [pc, #36]	@ (800c1a4 <siprintf+0x3c>)
 800c180:	4909      	ldr	r1, [pc, #36]	@ (800c1a8 <siprintf+0x40>)
 800c182:	f853 2b04 	ldr.w	r2, [r3], #4
 800c186:	9105      	str	r1, [sp, #20]
 800c188:	6800      	ldr	r0, [r0, #0]
 800c18a:	a902      	add	r1, sp, #8
 800c18c:	9301      	str	r3, [sp, #4]
 800c18e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c190:	f002 fc58 	bl	800ea44 <_svfiprintf_r>
 800c194:	9b02      	ldr	r3, [sp, #8]
 800c196:	701c      	strb	r4, [r3, #0]
 800c198:	b01d      	add	sp, #116	@ 0x74
 800c19a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c19e:	b003      	add	sp, #12
 800c1a0:	4770      	bx	lr
 800c1a2:	bf00      	nop
 800c1a4:	200005dc 	.word	0x200005dc
 800c1a8:	ffff0208 	.word	0xffff0208

0800c1ac <__sread>:
 800c1ac:	b510      	push	{r4, lr}
 800c1ae:	460c      	mov	r4, r1
 800c1b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1b4:	f000 f900 	bl	800c3b8 <_read_r>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	bfab      	itete	ge
 800c1bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c1be:	89a3      	ldrhlt	r3, [r4, #12]
 800c1c0:	181b      	addge	r3, r3, r0
 800c1c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c1c6:	bfac      	ite	ge
 800c1c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c1ca:	81a3      	strhlt	r3, [r4, #12]
 800c1cc:	bd10      	pop	{r4, pc}

0800c1ce <__swrite>:
 800c1ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d2:	461f      	mov	r7, r3
 800c1d4:	898b      	ldrh	r3, [r1, #12]
 800c1d6:	4605      	mov	r5, r0
 800c1d8:	05db      	lsls	r3, r3, #23
 800c1da:	460c      	mov	r4, r1
 800c1dc:	4616      	mov	r6, r2
 800c1de:	d505      	bpl.n	800c1ec <__swrite+0x1e>
 800c1e0:	2302      	movs	r3, #2
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1e8:	f000 f8d4 	bl	800c394 <_lseek_r>
 800c1ec:	89a3      	ldrh	r3, [r4, #12]
 800c1ee:	4632      	mov	r2, r6
 800c1f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c1f4:	81a3      	strh	r3, [r4, #12]
 800c1f6:	4628      	mov	r0, r5
 800c1f8:	463b      	mov	r3, r7
 800c1fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c202:	f000 b8eb 	b.w	800c3dc <_write_r>

0800c206 <__sseek>:
 800c206:	b510      	push	{r4, lr}
 800c208:	460c      	mov	r4, r1
 800c20a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c20e:	f000 f8c1 	bl	800c394 <_lseek_r>
 800c212:	1c43      	adds	r3, r0, #1
 800c214:	89a3      	ldrh	r3, [r4, #12]
 800c216:	bf15      	itete	ne
 800c218:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c21a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c21e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c222:	81a3      	strheq	r3, [r4, #12]
 800c224:	bf18      	it	ne
 800c226:	81a3      	strhne	r3, [r4, #12]
 800c228:	bd10      	pop	{r4, pc}

0800c22a <__sclose>:
 800c22a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c22e:	f000 b8a1 	b.w	800c374 <_close_r>

0800c232 <__swbuf_r>:
 800c232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c234:	460e      	mov	r6, r1
 800c236:	4614      	mov	r4, r2
 800c238:	4605      	mov	r5, r0
 800c23a:	b118      	cbz	r0, 800c244 <__swbuf_r+0x12>
 800c23c:	6a03      	ldr	r3, [r0, #32]
 800c23e:	b90b      	cbnz	r3, 800c244 <__swbuf_r+0x12>
 800c240:	f7ff fefe 	bl	800c040 <__sinit>
 800c244:	69a3      	ldr	r3, [r4, #24]
 800c246:	60a3      	str	r3, [r4, #8]
 800c248:	89a3      	ldrh	r3, [r4, #12]
 800c24a:	071a      	lsls	r2, r3, #28
 800c24c:	d501      	bpl.n	800c252 <__swbuf_r+0x20>
 800c24e:	6923      	ldr	r3, [r4, #16]
 800c250:	b943      	cbnz	r3, 800c264 <__swbuf_r+0x32>
 800c252:	4621      	mov	r1, r4
 800c254:	4628      	mov	r0, r5
 800c256:	f000 f82b 	bl	800c2b0 <__swsetup_r>
 800c25a:	b118      	cbz	r0, 800c264 <__swbuf_r+0x32>
 800c25c:	f04f 37ff 	mov.w	r7, #4294967295
 800c260:	4638      	mov	r0, r7
 800c262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c264:	6823      	ldr	r3, [r4, #0]
 800c266:	6922      	ldr	r2, [r4, #16]
 800c268:	b2f6      	uxtb	r6, r6
 800c26a:	1a98      	subs	r0, r3, r2
 800c26c:	6963      	ldr	r3, [r4, #20]
 800c26e:	4637      	mov	r7, r6
 800c270:	4283      	cmp	r3, r0
 800c272:	dc05      	bgt.n	800c280 <__swbuf_r+0x4e>
 800c274:	4621      	mov	r1, r4
 800c276:	4628      	mov	r0, r5
 800c278:	f002 fea0 	bl	800efbc <_fflush_r>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	d1ed      	bne.n	800c25c <__swbuf_r+0x2a>
 800c280:	68a3      	ldr	r3, [r4, #8]
 800c282:	3b01      	subs	r3, #1
 800c284:	60a3      	str	r3, [r4, #8]
 800c286:	6823      	ldr	r3, [r4, #0]
 800c288:	1c5a      	adds	r2, r3, #1
 800c28a:	6022      	str	r2, [r4, #0]
 800c28c:	701e      	strb	r6, [r3, #0]
 800c28e:	6962      	ldr	r2, [r4, #20]
 800c290:	1c43      	adds	r3, r0, #1
 800c292:	429a      	cmp	r2, r3
 800c294:	d004      	beq.n	800c2a0 <__swbuf_r+0x6e>
 800c296:	89a3      	ldrh	r3, [r4, #12]
 800c298:	07db      	lsls	r3, r3, #31
 800c29a:	d5e1      	bpl.n	800c260 <__swbuf_r+0x2e>
 800c29c:	2e0a      	cmp	r6, #10
 800c29e:	d1df      	bne.n	800c260 <__swbuf_r+0x2e>
 800c2a0:	4621      	mov	r1, r4
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	f002 fe8a 	bl	800efbc <_fflush_r>
 800c2a8:	2800      	cmp	r0, #0
 800c2aa:	d0d9      	beq.n	800c260 <__swbuf_r+0x2e>
 800c2ac:	e7d6      	b.n	800c25c <__swbuf_r+0x2a>
	...

0800c2b0 <__swsetup_r>:
 800c2b0:	b538      	push	{r3, r4, r5, lr}
 800c2b2:	4b29      	ldr	r3, [pc, #164]	@ (800c358 <__swsetup_r+0xa8>)
 800c2b4:	4605      	mov	r5, r0
 800c2b6:	6818      	ldr	r0, [r3, #0]
 800c2b8:	460c      	mov	r4, r1
 800c2ba:	b118      	cbz	r0, 800c2c4 <__swsetup_r+0x14>
 800c2bc:	6a03      	ldr	r3, [r0, #32]
 800c2be:	b90b      	cbnz	r3, 800c2c4 <__swsetup_r+0x14>
 800c2c0:	f7ff febe 	bl	800c040 <__sinit>
 800c2c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2c8:	0719      	lsls	r1, r3, #28
 800c2ca:	d422      	bmi.n	800c312 <__swsetup_r+0x62>
 800c2cc:	06da      	lsls	r2, r3, #27
 800c2ce:	d407      	bmi.n	800c2e0 <__swsetup_r+0x30>
 800c2d0:	2209      	movs	r2, #9
 800c2d2:	602a      	str	r2, [r5, #0]
 800c2d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2dc:	81a3      	strh	r3, [r4, #12]
 800c2de:	e033      	b.n	800c348 <__swsetup_r+0x98>
 800c2e0:	0758      	lsls	r0, r3, #29
 800c2e2:	d512      	bpl.n	800c30a <__swsetup_r+0x5a>
 800c2e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2e6:	b141      	cbz	r1, 800c2fa <__swsetup_r+0x4a>
 800c2e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2ec:	4299      	cmp	r1, r3
 800c2ee:	d002      	beq.n	800c2f6 <__swsetup_r+0x46>
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	f000 ff31 	bl	800d158 <_free_r>
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2fa:	89a3      	ldrh	r3, [r4, #12]
 800c2fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c300:	81a3      	strh	r3, [r4, #12]
 800c302:	2300      	movs	r3, #0
 800c304:	6063      	str	r3, [r4, #4]
 800c306:	6923      	ldr	r3, [r4, #16]
 800c308:	6023      	str	r3, [r4, #0]
 800c30a:	89a3      	ldrh	r3, [r4, #12]
 800c30c:	f043 0308 	orr.w	r3, r3, #8
 800c310:	81a3      	strh	r3, [r4, #12]
 800c312:	6923      	ldr	r3, [r4, #16]
 800c314:	b94b      	cbnz	r3, 800c32a <__swsetup_r+0x7a>
 800c316:	89a3      	ldrh	r3, [r4, #12]
 800c318:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c31c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c320:	d003      	beq.n	800c32a <__swsetup_r+0x7a>
 800c322:	4621      	mov	r1, r4
 800c324:	4628      	mov	r0, r5
 800c326:	f002 fe96 	bl	800f056 <__smakebuf_r>
 800c32a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c32e:	f013 0201 	ands.w	r2, r3, #1
 800c332:	d00a      	beq.n	800c34a <__swsetup_r+0x9a>
 800c334:	2200      	movs	r2, #0
 800c336:	60a2      	str	r2, [r4, #8]
 800c338:	6962      	ldr	r2, [r4, #20]
 800c33a:	4252      	negs	r2, r2
 800c33c:	61a2      	str	r2, [r4, #24]
 800c33e:	6922      	ldr	r2, [r4, #16]
 800c340:	b942      	cbnz	r2, 800c354 <__swsetup_r+0xa4>
 800c342:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c346:	d1c5      	bne.n	800c2d4 <__swsetup_r+0x24>
 800c348:	bd38      	pop	{r3, r4, r5, pc}
 800c34a:	0799      	lsls	r1, r3, #30
 800c34c:	bf58      	it	pl
 800c34e:	6962      	ldrpl	r2, [r4, #20]
 800c350:	60a2      	str	r2, [r4, #8]
 800c352:	e7f4      	b.n	800c33e <__swsetup_r+0x8e>
 800c354:	2000      	movs	r0, #0
 800c356:	e7f7      	b.n	800c348 <__swsetup_r+0x98>
 800c358:	200005dc 	.word	0x200005dc

0800c35c <memset>:
 800c35c:	4603      	mov	r3, r0
 800c35e:	4402      	add	r2, r0
 800c360:	4293      	cmp	r3, r2
 800c362:	d100      	bne.n	800c366 <memset+0xa>
 800c364:	4770      	bx	lr
 800c366:	f803 1b01 	strb.w	r1, [r3], #1
 800c36a:	e7f9      	b.n	800c360 <memset+0x4>

0800c36c <_localeconv_r>:
 800c36c:	4800      	ldr	r0, [pc, #0]	@ (800c370 <_localeconv_r+0x4>)
 800c36e:	4770      	bx	lr
 800c370:	2000071c 	.word	0x2000071c

0800c374 <_close_r>:
 800c374:	b538      	push	{r3, r4, r5, lr}
 800c376:	2300      	movs	r3, #0
 800c378:	4d05      	ldr	r5, [pc, #20]	@ (800c390 <_close_r+0x1c>)
 800c37a:	4604      	mov	r4, r0
 800c37c:	4608      	mov	r0, r1
 800c37e:	602b      	str	r3, [r5, #0]
 800c380:	f7fa fdba 	bl	8006ef8 <_close>
 800c384:	1c43      	adds	r3, r0, #1
 800c386:	d102      	bne.n	800c38e <_close_r+0x1a>
 800c388:	682b      	ldr	r3, [r5, #0]
 800c38a:	b103      	cbz	r3, 800c38e <_close_r+0x1a>
 800c38c:	6023      	str	r3, [r4, #0]
 800c38e:	bd38      	pop	{r3, r4, r5, pc}
 800c390:	20005ac0 	.word	0x20005ac0

0800c394 <_lseek_r>:
 800c394:	b538      	push	{r3, r4, r5, lr}
 800c396:	4604      	mov	r4, r0
 800c398:	4608      	mov	r0, r1
 800c39a:	4611      	mov	r1, r2
 800c39c:	2200      	movs	r2, #0
 800c39e:	4d05      	ldr	r5, [pc, #20]	@ (800c3b4 <_lseek_r+0x20>)
 800c3a0:	602a      	str	r2, [r5, #0]
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	f7fa fdb2 	bl	8006f0c <_lseek>
 800c3a8:	1c43      	adds	r3, r0, #1
 800c3aa:	d102      	bne.n	800c3b2 <_lseek_r+0x1e>
 800c3ac:	682b      	ldr	r3, [r5, #0]
 800c3ae:	b103      	cbz	r3, 800c3b2 <_lseek_r+0x1e>
 800c3b0:	6023      	str	r3, [r4, #0]
 800c3b2:	bd38      	pop	{r3, r4, r5, pc}
 800c3b4:	20005ac0 	.word	0x20005ac0

0800c3b8 <_read_r>:
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	4604      	mov	r4, r0
 800c3bc:	4608      	mov	r0, r1
 800c3be:	4611      	mov	r1, r2
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	4d05      	ldr	r5, [pc, #20]	@ (800c3d8 <_read_r+0x20>)
 800c3c4:	602a      	str	r2, [r5, #0]
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	f7fa fd78 	bl	8006ebc <_read>
 800c3cc:	1c43      	adds	r3, r0, #1
 800c3ce:	d102      	bne.n	800c3d6 <_read_r+0x1e>
 800c3d0:	682b      	ldr	r3, [r5, #0]
 800c3d2:	b103      	cbz	r3, 800c3d6 <_read_r+0x1e>
 800c3d4:	6023      	str	r3, [r4, #0]
 800c3d6:	bd38      	pop	{r3, r4, r5, pc}
 800c3d8:	20005ac0 	.word	0x20005ac0

0800c3dc <_write_r>:
 800c3dc:	b538      	push	{r3, r4, r5, lr}
 800c3de:	4604      	mov	r4, r0
 800c3e0:	4608      	mov	r0, r1
 800c3e2:	4611      	mov	r1, r2
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	4d05      	ldr	r5, [pc, #20]	@ (800c3fc <_write_r+0x20>)
 800c3e8:	602a      	str	r2, [r5, #0]
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	f7fa fd76 	bl	8006edc <_write>
 800c3f0:	1c43      	adds	r3, r0, #1
 800c3f2:	d102      	bne.n	800c3fa <_write_r+0x1e>
 800c3f4:	682b      	ldr	r3, [r5, #0]
 800c3f6:	b103      	cbz	r3, 800c3fa <_write_r+0x1e>
 800c3f8:	6023      	str	r3, [r4, #0]
 800c3fa:	bd38      	pop	{r3, r4, r5, pc}
 800c3fc:	20005ac0 	.word	0x20005ac0

0800c400 <__errno>:
 800c400:	4b01      	ldr	r3, [pc, #4]	@ (800c408 <__errno+0x8>)
 800c402:	6818      	ldr	r0, [r3, #0]
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	200005dc 	.word	0x200005dc

0800c40c <__libc_init_array>:
 800c40c:	b570      	push	{r4, r5, r6, lr}
 800c40e:	2600      	movs	r6, #0
 800c410:	4d0c      	ldr	r5, [pc, #48]	@ (800c444 <__libc_init_array+0x38>)
 800c412:	4c0d      	ldr	r4, [pc, #52]	@ (800c448 <__libc_init_array+0x3c>)
 800c414:	1b64      	subs	r4, r4, r5
 800c416:	10a4      	asrs	r4, r4, #2
 800c418:	42a6      	cmp	r6, r4
 800c41a:	d109      	bne.n	800c430 <__libc_init_array+0x24>
 800c41c:	f003 fada 	bl	800f9d4 <_init>
 800c420:	2600      	movs	r6, #0
 800c422:	4d0a      	ldr	r5, [pc, #40]	@ (800c44c <__libc_init_array+0x40>)
 800c424:	4c0a      	ldr	r4, [pc, #40]	@ (800c450 <__libc_init_array+0x44>)
 800c426:	1b64      	subs	r4, r4, r5
 800c428:	10a4      	asrs	r4, r4, #2
 800c42a:	42a6      	cmp	r6, r4
 800c42c:	d105      	bne.n	800c43a <__libc_init_array+0x2e>
 800c42e:	bd70      	pop	{r4, r5, r6, pc}
 800c430:	f855 3b04 	ldr.w	r3, [r5], #4
 800c434:	4798      	blx	r3
 800c436:	3601      	adds	r6, #1
 800c438:	e7ee      	b.n	800c418 <__libc_init_array+0xc>
 800c43a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c43e:	4798      	blx	r3
 800c440:	3601      	adds	r6, #1
 800c442:	e7f2      	b.n	800c42a <__libc_init_array+0x1e>
 800c444:	080109a4 	.word	0x080109a4
 800c448:	080109a4 	.word	0x080109a4
 800c44c:	080109a4 	.word	0x080109a4
 800c450:	080109a8 	.word	0x080109a8

0800c454 <__retarget_lock_init_recursive>:
 800c454:	4770      	bx	lr

0800c456 <__retarget_lock_acquire_recursive>:
 800c456:	4770      	bx	lr

0800c458 <__retarget_lock_release_recursive>:
 800c458:	4770      	bx	lr

0800c45a <memchr>:
 800c45a:	4603      	mov	r3, r0
 800c45c:	b510      	push	{r4, lr}
 800c45e:	b2c9      	uxtb	r1, r1
 800c460:	4402      	add	r2, r0
 800c462:	4293      	cmp	r3, r2
 800c464:	4618      	mov	r0, r3
 800c466:	d101      	bne.n	800c46c <memchr+0x12>
 800c468:	2000      	movs	r0, #0
 800c46a:	e003      	b.n	800c474 <memchr+0x1a>
 800c46c:	7804      	ldrb	r4, [r0, #0]
 800c46e:	3301      	adds	r3, #1
 800c470:	428c      	cmp	r4, r1
 800c472:	d1f6      	bne.n	800c462 <memchr+0x8>
 800c474:	bd10      	pop	{r4, pc}

0800c476 <memcpy>:
 800c476:	440a      	add	r2, r1
 800c478:	4291      	cmp	r1, r2
 800c47a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c47e:	d100      	bne.n	800c482 <memcpy+0xc>
 800c480:	4770      	bx	lr
 800c482:	b510      	push	{r4, lr}
 800c484:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c488:	4291      	cmp	r1, r2
 800c48a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c48e:	d1f9      	bne.n	800c484 <memcpy+0xe>
 800c490:	bd10      	pop	{r4, pc}
	...

0800c494 <nanf>:
 800c494:	4800      	ldr	r0, [pc, #0]	@ (800c498 <nanf+0x4>)
 800c496:	4770      	bx	lr
 800c498:	7fc00000 	.word	0x7fc00000

0800c49c <quorem>:
 800c49c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a0:	6903      	ldr	r3, [r0, #16]
 800c4a2:	690c      	ldr	r4, [r1, #16]
 800c4a4:	4607      	mov	r7, r0
 800c4a6:	42a3      	cmp	r3, r4
 800c4a8:	db7e      	blt.n	800c5a8 <quorem+0x10c>
 800c4aa:	3c01      	subs	r4, #1
 800c4ac:	00a3      	lsls	r3, r4, #2
 800c4ae:	f100 0514 	add.w	r5, r0, #20
 800c4b2:	f101 0814 	add.w	r8, r1, #20
 800c4b6:	9300      	str	r3, [sp, #0]
 800c4b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4bc:	9301      	str	r3, [sp, #4]
 800c4be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c4c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	fbb2 f6f3 	udiv	r6, r2, r3
 800c4ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c4d2:	d32e      	bcc.n	800c532 <quorem+0x96>
 800c4d4:	f04f 0a00 	mov.w	sl, #0
 800c4d8:	46c4      	mov	ip, r8
 800c4da:	46ae      	mov	lr, r5
 800c4dc:	46d3      	mov	fp, sl
 800c4de:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c4e2:	b298      	uxth	r0, r3
 800c4e4:	fb06 a000 	mla	r0, r6, r0, sl
 800c4e8:	0c1b      	lsrs	r3, r3, #16
 800c4ea:	0c02      	lsrs	r2, r0, #16
 800c4ec:	fb06 2303 	mla	r3, r6, r3, r2
 800c4f0:	f8de 2000 	ldr.w	r2, [lr]
 800c4f4:	b280      	uxth	r0, r0
 800c4f6:	b292      	uxth	r2, r2
 800c4f8:	1a12      	subs	r2, r2, r0
 800c4fa:	445a      	add	r2, fp
 800c4fc:	f8de 0000 	ldr.w	r0, [lr]
 800c500:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c504:	b29b      	uxth	r3, r3
 800c506:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c50a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c50e:	b292      	uxth	r2, r2
 800c510:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c514:	45e1      	cmp	r9, ip
 800c516:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c51a:	f84e 2b04 	str.w	r2, [lr], #4
 800c51e:	d2de      	bcs.n	800c4de <quorem+0x42>
 800c520:	9b00      	ldr	r3, [sp, #0]
 800c522:	58eb      	ldr	r3, [r5, r3]
 800c524:	b92b      	cbnz	r3, 800c532 <quorem+0x96>
 800c526:	9b01      	ldr	r3, [sp, #4]
 800c528:	3b04      	subs	r3, #4
 800c52a:	429d      	cmp	r5, r3
 800c52c:	461a      	mov	r2, r3
 800c52e:	d32f      	bcc.n	800c590 <quorem+0xf4>
 800c530:	613c      	str	r4, [r7, #16]
 800c532:	4638      	mov	r0, r7
 800c534:	f001 f9ca 	bl	800d8cc <__mcmp>
 800c538:	2800      	cmp	r0, #0
 800c53a:	db25      	blt.n	800c588 <quorem+0xec>
 800c53c:	4629      	mov	r1, r5
 800c53e:	2000      	movs	r0, #0
 800c540:	f858 2b04 	ldr.w	r2, [r8], #4
 800c544:	f8d1 c000 	ldr.w	ip, [r1]
 800c548:	fa1f fe82 	uxth.w	lr, r2
 800c54c:	fa1f f38c 	uxth.w	r3, ip
 800c550:	eba3 030e 	sub.w	r3, r3, lr
 800c554:	4403      	add	r3, r0
 800c556:	0c12      	lsrs	r2, r2, #16
 800c558:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c55c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c560:	b29b      	uxth	r3, r3
 800c562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c566:	45c1      	cmp	r9, r8
 800c568:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c56c:	f841 3b04 	str.w	r3, [r1], #4
 800c570:	d2e6      	bcs.n	800c540 <quorem+0xa4>
 800c572:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c576:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c57a:	b922      	cbnz	r2, 800c586 <quorem+0xea>
 800c57c:	3b04      	subs	r3, #4
 800c57e:	429d      	cmp	r5, r3
 800c580:	461a      	mov	r2, r3
 800c582:	d30b      	bcc.n	800c59c <quorem+0x100>
 800c584:	613c      	str	r4, [r7, #16]
 800c586:	3601      	adds	r6, #1
 800c588:	4630      	mov	r0, r6
 800c58a:	b003      	add	sp, #12
 800c58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c590:	6812      	ldr	r2, [r2, #0]
 800c592:	3b04      	subs	r3, #4
 800c594:	2a00      	cmp	r2, #0
 800c596:	d1cb      	bne.n	800c530 <quorem+0x94>
 800c598:	3c01      	subs	r4, #1
 800c59a:	e7c6      	b.n	800c52a <quorem+0x8e>
 800c59c:	6812      	ldr	r2, [r2, #0]
 800c59e:	3b04      	subs	r3, #4
 800c5a0:	2a00      	cmp	r2, #0
 800c5a2:	d1ef      	bne.n	800c584 <quorem+0xe8>
 800c5a4:	3c01      	subs	r4, #1
 800c5a6:	e7ea      	b.n	800c57e <quorem+0xe2>
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	e7ee      	b.n	800c58a <quorem+0xee>
 800c5ac:	0000      	movs	r0, r0
	...

0800c5b0 <_dtoa_r>:
 800c5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b4:	4614      	mov	r4, r2
 800c5b6:	461d      	mov	r5, r3
 800c5b8:	69c7      	ldr	r7, [r0, #28]
 800c5ba:	b097      	sub	sp, #92	@ 0x5c
 800c5bc:	4681      	mov	r9, r0
 800c5be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c5c2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800c5c4:	b97f      	cbnz	r7, 800c5e6 <_dtoa_r+0x36>
 800c5c6:	2010      	movs	r0, #16
 800c5c8:	f000 fe0e 	bl	800d1e8 <malloc>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	f8c9 001c 	str.w	r0, [r9, #28]
 800c5d2:	b920      	cbnz	r0, 800c5de <_dtoa_r+0x2e>
 800c5d4:	21ef      	movs	r1, #239	@ 0xef
 800c5d6:	4bac      	ldr	r3, [pc, #688]	@ (800c888 <_dtoa_r+0x2d8>)
 800c5d8:	48ac      	ldr	r0, [pc, #688]	@ (800c88c <_dtoa_r+0x2dc>)
 800c5da:	f002 fddd 	bl	800f198 <__assert_func>
 800c5de:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c5e2:	6007      	str	r7, [r0, #0]
 800c5e4:	60c7      	str	r7, [r0, #12]
 800c5e6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c5ea:	6819      	ldr	r1, [r3, #0]
 800c5ec:	b159      	cbz	r1, 800c606 <_dtoa_r+0x56>
 800c5ee:	685a      	ldr	r2, [r3, #4]
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	4093      	lsls	r3, r2
 800c5f4:	604a      	str	r2, [r1, #4]
 800c5f6:	608b      	str	r3, [r1, #8]
 800c5f8:	4648      	mov	r0, r9
 800c5fa:	f000 feeb 	bl	800d3d4 <_Bfree>
 800c5fe:	2200      	movs	r2, #0
 800c600:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c604:	601a      	str	r2, [r3, #0]
 800c606:	1e2b      	subs	r3, r5, #0
 800c608:	bfaf      	iteee	ge
 800c60a:	2300      	movge	r3, #0
 800c60c:	2201      	movlt	r2, #1
 800c60e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c612:	9307      	strlt	r3, [sp, #28]
 800c614:	bfa8      	it	ge
 800c616:	6033      	strge	r3, [r6, #0]
 800c618:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800c61c:	4b9c      	ldr	r3, [pc, #624]	@ (800c890 <_dtoa_r+0x2e0>)
 800c61e:	bfb8      	it	lt
 800c620:	6032      	strlt	r2, [r6, #0]
 800c622:	ea33 0308 	bics.w	r3, r3, r8
 800c626:	d112      	bne.n	800c64e <_dtoa_r+0x9e>
 800c628:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c62c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c62e:	6013      	str	r3, [r2, #0]
 800c630:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c634:	4323      	orrs	r3, r4
 800c636:	f000 855e 	beq.w	800d0f6 <_dtoa_r+0xb46>
 800c63a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c63c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c894 <_dtoa_r+0x2e4>
 800c640:	2b00      	cmp	r3, #0
 800c642:	f000 8560 	beq.w	800d106 <_dtoa_r+0xb56>
 800c646:	f10a 0303 	add.w	r3, sl, #3
 800c64a:	f000 bd5a 	b.w	800d102 <_dtoa_r+0xb52>
 800c64e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c652:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c656:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c65a:	2200      	movs	r2, #0
 800c65c:	2300      	movs	r3, #0
 800c65e:	f7f4 fa13 	bl	8000a88 <__aeabi_dcmpeq>
 800c662:	4607      	mov	r7, r0
 800c664:	b158      	cbz	r0, 800c67e <_dtoa_r+0xce>
 800c666:	2301      	movs	r3, #1
 800c668:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c66a:	6013      	str	r3, [r2, #0]
 800c66c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c66e:	b113      	cbz	r3, 800c676 <_dtoa_r+0xc6>
 800c670:	4b89      	ldr	r3, [pc, #548]	@ (800c898 <_dtoa_r+0x2e8>)
 800c672:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c674:	6013      	str	r3, [r2, #0]
 800c676:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800c89c <_dtoa_r+0x2ec>
 800c67a:	f000 bd44 	b.w	800d106 <_dtoa_r+0xb56>
 800c67e:	ab14      	add	r3, sp, #80	@ 0x50
 800c680:	9301      	str	r3, [sp, #4]
 800c682:	ab15      	add	r3, sp, #84	@ 0x54
 800c684:	9300      	str	r3, [sp, #0]
 800c686:	4648      	mov	r0, r9
 800c688:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c68c:	f001 fa36 	bl	800dafc <__d2b>
 800c690:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800c694:	9003      	str	r0, [sp, #12]
 800c696:	2e00      	cmp	r6, #0
 800c698:	d078      	beq.n	800c78c <_dtoa_r+0x1dc>
 800c69a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c69e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c6a0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c6a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6a8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c6ac:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c6b0:	9712      	str	r7, [sp, #72]	@ 0x48
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	4b7a      	ldr	r3, [pc, #488]	@ (800c8a0 <_dtoa_r+0x2f0>)
 800c6b8:	f7f3 fdc6 	bl	8000248 <__aeabi_dsub>
 800c6bc:	a36c      	add	r3, pc, #432	@ (adr r3, 800c870 <_dtoa_r+0x2c0>)
 800c6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c2:	f7f3 ff79 	bl	80005b8 <__aeabi_dmul>
 800c6c6:	a36c      	add	r3, pc, #432	@ (adr r3, 800c878 <_dtoa_r+0x2c8>)
 800c6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6cc:	f7f3 fdbe 	bl	800024c <__adddf3>
 800c6d0:	4604      	mov	r4, r0
 800c6d2:	4630      	mov	r0, r6
 800c6d4:	460d      	mov	r5, r1
 800c6d6:	f7f3 ff05 	bl	80004e4 <__aeabi_i2d>
 800c6da:	a369      	add	r3, pc, #420	@ (adr r3, 800c880 <_dtoa_r+0x2d0>)
 800c6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e0:	f7f3 ff6a 	bl	80005b8 <__aeabi_dmul>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	4629      	mov	r1, r5
 800c6ec:	f7f3 fdae 	bl	800024c <__adddf3>
 800c6f0:	4604      	mov	r4, r0
 800c6f2:	460d      	mov	r5, r1
 800c6f4:	f7f4 fa10 	bl	8000b18 <__aeabi_d2iz>
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	4607      	mov	r7, r0
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	4620      	mov	r0, r4
 800c700:	4629      	mov	r1, r5
 800c702:	f7f4 f9cb 	bl	8000a9c <__aeabi_dcmplt>
 800c706:	b140      	cbz	r0, 800c71a <_dtoa_r+0x16a>
 800c708:	4638      	mov	r0, r7
 800c70a:	f7f3 feeb 	bl	80004e4 <__aeabi_i2d>
 800c70e:	4622      	mov	r2, r4
 800c710:	462b      	mov	r3, r5
 800c712:	f7f4 f9b9 	bl	8000a88 <__aeabi_dcmpeq>
 800c716:	b900      	cbnz	r0, 800c71a <_dtoa_r+0x16a>
 800c718:	3f01      	subs	r7, #1
 800c71a:	2f16      	cmp	r7, #22
 800c71c:	d854      	bhi.n	800c7c8 <_dtoa_r+0x218>
 800c71e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c722:	4b60      	ldr	r3, [pc, #384]	@ (800c8a4 <_dtoa_r+0x2f4>)
 800c724:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72c:	f7f4 f9b6 	bl	8000a9c <__aeabi_dcmplt>
 800c730:	2800      	cmp	r0, #0
 800c732:	d04b      	beq.n	800c7cc <_dtoa_r+0x21c>
 800c734:	2300      	movs	r3, #0
 800c736:	3f01      	subs	r7, #1
 800c738:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c73a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c73c:	1b9b      	subs	r3, r3, r6
 800c73e:	1e5a      	subs	r2, r3, #1
 800c740:	bf49      	itett	mi
 800c742:	f1c3 0301 	rsbmi	r3, r3, #1
 800c746:	2300      	movpl	r3, #0
 800c748:	9304      	strmi	r3, [sp, #16]
 800c74a:	2300      	movmi	r3, #0
 800c74c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c74e:	bf54      	ite	pl
 800c750:	9304      	strpl	r3, [sp, #16]
 800c752:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800c754:	2f00      	cmp	r7, #0
 800c756:	db3b      	blt.n	800c7d0 <_dtoa_r+0x220>
 800c758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c75a:	970e      	str	r7, [sp, #56]	@ 0x38
 800c75c:	443b      	add	r3, r7
 800c75e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c760:	2300      	movs	r3, #0
 800c762:	930a      	str	r3, [sp, #40]	@ 0x28
 800c764:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c766:	2b09      	cmp	r3, #9
 800c768:	d865      	bhi.n	800c836 <_dtoa_r+0x286>
 800c76a:	2b05      	cmp	r3, #5
 800c76c:	bfc4      	itt	gt
 800c76e:	3b04      	subgt	r3, #4
 800c770:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800c772:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c774:	bfc8      	it	gt
 800c776:	2400      	movgt	r4, #0
 800c778:	f1a3 0302 	sub.w	r3, r3, #2
 800c77c:	bfd8      	it	le
 800c77e:	2401      	movle	r4, #1
 800c780:	2b03      	cmp	r3, #3
 800c782:	d864      	bhi.n	800c84e <_dtoa_r+0x29e>
 800c784:	e8df f003 	tbb	[pc, r3]
 800c788:	2c385553 	.word	0x2c385553
 800c78c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c790:	441e      	add	r6, r3
 800c792:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c796:	2b20      	cmp	r3, #32
 800c798:	bfc1      	itttt	gt
 800c79a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c79e:	fa08 f803 	lslgt.w	r8, r8, r3
 800c7a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c7a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c7aa:	bfd6      	itet	le
 800c7ac:	f1c3 0320 	rsble	r3, r3, #32
 800c7b0:	ea48 0003 	orrgt.w	r0, r8, r3
 800c7b4:	fa04 f003 	lslle.w	r0, r4, r3
 800c7b8:	f7f3 fe84 	bl	80004c4 <__aeabi_ui2d>
 800c7bc:	2201      	movs	r2, #1
 800c7be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c7c2:	3e01      	subs	r6, #1
 800c7c4:	9212      	str	r2, [sp, #72]	@ 0x48
 800c7c6:	e774      	b.n	800c6b2 <_dtoa_r+0x102>
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	e7b5      	b.n	800c738 <_dtoa_r+0x188>
 800c7cc:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c7ce:	e7b4      	b.n	800c73a <_dtoa_r+0x18a>
 800c7d0:	9b04      	ldr	r3, [sp, #16]
 800c7d2:	1bdb      	subs	r3, r3, r7
 800c7d4:	9304      	str	r3, [sp, #16]
 800c7d6:	427b      	negs	r3, r7
 800c7d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7da:	2300      	movs	r3, #0
 800c7dc:	930e      	str	r3, [sp, #56]	@ 0x38
 800c7de:	e7c1      	b.n	800c764 <_dtoa_r+0x1b4>
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c7e6:	eb07 0b03 	add.w	fp, r7, r3
 800c7ea:	f10b 0301 	add.w	r3, fp, #1
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	9308      	str	r3, [sp, #32]
 800c7f2:	bfb8      	it	lt
 800c7f4:	2301      	movlt	r3, #1
 800c7f6:	e006      	b.n	800c806 <_dtoa_r+0x256>
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	dd28      	ble.n	800c854 <_dtoa_r+0x2a4>
 800c802:	469b      	mov	fp, r3
 800c804:	9308      	str	r3, [sp, #32]
 800c806:	2100      	movs	r1, #0
 800c808:	2204      	movs	r2, #4
 800c80a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c80e:	f102 0514 	add.w	r5, r2, #20
 800c812:	429d      	cmp	r5, r3
 800c814:	d926      	bls.n	800c864 <_dtoa_r+0x2b4>
 800c816:	6041      	str	r1, [r0, #4]
 800c818:	4648      	mov	r0, r9
 800c81a:	f000 fd9b 	bl	800d354 <_Balloc>
 800c81e:	4682      	mov	sl, r0
 800c820:	2800      	cmp	r0, #0
 800c822:	d143      	bne.n	800c8ac <_dtoa_r+0x2fc>
 800c824:	4602      	mov	r2, r0
 800c826:	f240 11af 	movw	r1, #431	@ 0x1af
 800c82a:	4b1f      	ldr	r3, [pc, #124]	@ (800c8a8 <_dtoa_r+0x2f8>)
 800c82c:	e6d4      	b.n	800c5d8 <_dtoa_r+0x28>
 800c82e:	2300      	movs	r3, #0
 800c830:	e7e3      	b.n	800c7fa <_dtoa_r+0x24a>
 800c832:	2300      	movs	r3, #0
 800c834:	e7d5      	b.n	800c7e2 <_dtoa_r+0x232>
 800c836:	2401      	movs	r4, #1
 800c838:	2300      	movs	r3, #0
 800c83a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c83c:	9320      	str	r3, [sp, #128]	@ 0x80
 800c83e:	f04f 3bff 	mov.w	fp, #4294967295
 800c842:	2200      	movs	r2, #0
 800c844:	2312      	movs	r3, #18
 800c846:	f8cd b020 	str.w	fp, [sp, #32]
 800c84a:	9221      	str	r2, [sp, #132]	@ 0x84
 800c84c:	e7db      	b.n	800c806 <_dtoa_r+0x256>
 800c84e:	2301      	movs	r3, #1
 800c850:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c852:	e7f4      	b.n	800c83e <_dtoa_r+0x28e>
 800c854:	f04f 0b01 	mov.w	fp, #1
 800c858:	465b      	mov	r3, fp
 800c85a:	f8cd b020 	str.w	fp, [sp, #32]
 800c85e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800c862:	e7d0      	b.n	800c806 <_dtoa_r+0x256>
 800c864:	3101      	adds	r1, #1
 800c866:	0052      	lsls	r2, r2, #1
 800c868:	e7d1      	b.n	800c80e <_dtoa_r+0x25e>
 800c86a:	bf00      	nop
 800c86c:	f3af 8000 	nop.w
 800c870:	636f4361 	.word	0x636f4361
 800c874:	3fd287a7 	.word	0x3fd287a7
 800c878:	8b60c8b3 	.word	0x8b60c8b3
 800c87c:	3fc68a28 	.word	0x3fc68a28
 800c880:	509f79fb 	.word	0x509f79fb
 800c884:	3fd34413 	.word	0x3fd34413
 800c888:	080105b6 	.word	0x080105b6
 800c88c:	080105cd 	.word	0x080105cd
 800c890:	7ff00000 	.word	0x7ff00000
 800c894:	080105b2 	.word	0x080105b2
 800c898:	08010581 	.word	0x08010581
 800c89c:	08010580 	.word	0x08010580
 800c8a0:	3ff80000 	.word	0x3ff80000
 800c8a4:	08010780 	.word	0x08010780
 800c8a8:	08010625 	.word	0x08010625
 800c8ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c8b0:	6018      	str	r0, [r3, #0]
 800c8b2:	9b08      	ldr	r3, [sp, #32]
 800c8b4:	2b0e      	cmp	r3, #14
 800c8b6:	f200 80a1 	bhi.w	800c9fc <_dtoa_r+0x44c>
 800c8ba:	2c00      	cmp	r4, #0
 800c8bc:	f000 809e 	beq.w	800c9fc <_dtoa_r+0x44c>
 800c8c0:	2f00      	cmp	r7, #0
 800c8c2:	dd33      	ble.n	800c92c <_dtoa_r+0x37c>
 800c8c4:	4b9c      	ldr	r3, [pc, #624]	@ (800cb38 <_dtoa_r+0x588>)
 800c8c6:	f007 020f 	and.w	r2, r7, #15
 800c8ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8ce:	05f8      	lsls	r0, r7, #23
 800c8d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c8d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800c8d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c8dc:	d516      	bpl.n	800c90c <_dtoa_r+0x35c>
 800c8de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c8e2:	4b96      	ldr	r3, [pc, #600]	@ (800cb3c <_dtoa_r+0x58c>)
 800c8e4:	2603      	movs	r6, #3
 800c8e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c8ea:	f7f3 ff8f 	bl	800080c <__aeabi_ddiv>
 800c8ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c8f2:	f004 040f 	and.w	r4, r4, #15
 800c8f6:	4d91      	ldr	r5, [pc, #580]	@ (800cb3c <_dtoa_r+0x58c>)
 800c8f8:	b954      	cbnz	r4, 800c910 <_dtoa_r+0x360>
 800c8fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c8fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c902:	f7f3 ff83 	bl	800080c <__aeabi_ddiv>
 800c906:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c90a:	e028      	b.n	800c95e <_dtoa_r+0x3ae>
 800c90c:	2602      	movs	r6, #2
 800c90e:	e7f2      	b.n	800c8f6 <_dtoa_r+0x346>
 800c910:	07e1      	lsls	r1, r4, #31
 800c912:	d508      	bpl.n	800c926 <_dtoa_r+0x376>
 800c914:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c918:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c91c:	f7f3 fe4c 	bl	80005b8 <__aeabi_dmul>
 800c920:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c924:	3601      	adds	r6, #1
 800c926:	1064      	asrs	r4, r4, #1
 800c928:	3508      	adds	r5, #8
 800c92a:	e7e5      	b.n	800c8f8 <_dtoa_r+0x348>
 800c92c:	f000 80af 	beq.w	800ca8e <_dtoa_r+0x4de>
 800c930:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c934:	427c      	negs	r4, r7
 800c936:	4b80      	ldr	r3, [pc, #512]	@ (800cb38 <_dtoa_r+0x588>)
 800c938:	f004 020f 	and.w	r2, r4, #15
 800c93c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c944:	f7f3 fe38 	bl	80005b8 <__aeabi_dmul>
 800c948:	2602      	movs	r6, #2
 800c94a:	2300      	movs	r3, #0
 800c94c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c950:	4d7a      	ldr	r5, [pc, #488]	@ (800cb3c <_dtoa_r+0x58c>)
 800c952:	1124      	asrs	r4, r4, #4
 800c954:	2c00      	cmp	r4, #0
 800c956:	f040 808f 	bne.w	800ca78 <_dtoa_r+0x4c8>
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1d3      	bne.n	800c906 <_dtoa_r+0x356>
 800c95e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800c962:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c964:	2b00      	cmp	r3, #0
 800c966:	f000 8094 	beq.w	800ca92 <_dtoa_r+0x4e2>
 800c96a:	2200      	movs	r2, #0
 800c96c:	4620      	mov	r0, r4
 800c96e:	4629      	mov	r1, r5
 800c970:	4b73      	ldr	r3, [pc, #460]	@ (800cb40 <_dtoa_r+0x590>)
 800c972:	f7f4 f893 	bl	8000a9c <__aeabi_dcmplt>
 800c976:	2800      	cmp	r0, #0
 800c978:	f000 808b 	beq.w	800ca92 <_dtoa_r+0x4e2>
 800c97c:	9b08      	ldr	r3, [sp, #32]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	f000 8087 	beq.w	800ca92 <_dtoa_r+0x4e2>
 800c984:	f1bb 0f00 	cmp.w	fp, #0
 800c988:	dd34      	ble.n	800c9f4 <_dtoa_r+0x444>
 800c98a:	4620      	mov	r0, r4
 800c98c:	2200      	movs	r2, #0
 800c98e:	4629      	mov	r1, r5
 800c990:	4b6c      	ldr	r3, [pc, #432]	@ (800cb44 <_dtoa_r+0x594>)
 800c992:	f7f3 fe11 	bl	80005b8 <__aeabi_dmul>
 800c996:	465c      	mov	r4, fp
 800c998:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c99c:	f107 38ff 	add.w	r8, r7, #4294967295
 800c9a0:	3601      	adds	r6, #1
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	f7f3 fd9e 	bl	80004e4 <__aeabi_i2d>
 800c9a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c9ac:	f7f3 fe04 	bl	80005b8 <__aeabi_dmul>
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	4b65      	ldr	r3, [pc, #404]	@ (800cb48 <_dtoa_r+0x598>)
 800c9b4:	f7f3 fc4a 	bl	800024c <__adddf3>
 800c9b8:	4605      	mov	r5, r0
 800c9ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c9be:	2c00      	cmp	r4, #0
 800c9c0:	d16a      	bne.n	800ca98 <_dtoa_r+0x4e8>
 800c9c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	4b60      	ldr	r3, [pc, #384]	@ (800cb4c <_dtoa_r+0x59c>)
 800c9ca:	f7f3 fc3d 	bl	8000248 <__aeabi_dsub>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c9d6:	462a      	mov	r2, r5
 800c9d8:	4633      	mov	r3, r6
 800c9da:	f7f4 f87d 	bl	8000ad8 <__aeabi_dcmpgt>
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	f040 8298 	bne.w	800cf14 <_dtoa_r+0x964>
 800c9e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9e8:	462a      	mov	r2, r5
 800c9ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c9ee:	f7f4 f855 	bl	8000a9c <__aeabi_dcmplt>
 800c9f2:	bb38      	cbnz	r0, 800ca44 <_dtoa_r+0x494>
 800c9f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c9f8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c9fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	f2c0 8157 	blt.w	800ccb2 <_dtoa_r+0x702>
 800ca04:	2f0e      	cmp	r7, #14
 800ca06:	f300 8154 	bgt.w	800ccb2 <_dtoa_r+0x702>
 800ca0a:	4b4b      	ldr	r3, [pc, #300]	@ (800cb38 <_dtoa_r+0x588>)
 800ca0c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ca10:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ca14:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ca18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	f280 80e5 	bge.w	800cbea <_dtoa_r+0x63a>
 800ca20:	9b08      	ldr	r3, [sp, #32]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f300 80e1 	bgt.w	800cbea <_dtoa_r+0x63a>
 800ca28:	d10c      	bne.n	800ca44 <_dtoa_r+0x494>
 800ca2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	4b46      	ldr	r3, [pc, #280]	@ (800cb4c <_dtoa_r+0x59c>)
 800ca32:	f7f3 fdc1 	bl	80005b8 <__aeabi_dmul>
 800ca36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca3a:	f7f4 f843 	bl	8000ac4 <__aeabi_dcmpge>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	f000 8266 	beq.w	800cf10 <_dtoa_r+0x960>
 800ca44:	2400      	movs	r4, #0
 800ca46:	4625      	mov	r5, r4
 800ca48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ca4a:	4656      	mov	r6, sl
 800ca4c:	ea6f 0803 	mvn.w	r8, r3
 800ca50:	2700      	movs	r7, #0
 800ca52:	4621      	mov	r1, r4
 800ca54:	4648      	mov	r0, r9
 800ca56:	f000 fcbd 	bl	800d3d4 <_Bfree>
 800ca5a:	2d00      	cmp	r5, #0
 800ca5c:	f000 80bd 	beq.w	800cbda <_dtoa_r+0x62a>
 800ca60:	b12f      	cbz	r7, 800ca6e <_dtoa_r+0x4be>
 800ca62:	42af      	cmp	r7, r5
 800ca64:	d003      	beq.n	800ca6e <_dtoa_r+0x4be>
 800ca66:	4639      	mov	r1, r7
 800ca68:	4648      	mov	r0, r9
 800ca6a:	f000 fcb3 	bl	800d3d4 <_Bfree>
 800ca6e:	4629      	mov	r1, r5
 800ca70:	4648      	mov	r0, r9
 800ca72:	f000 fcaf 	bl	800d3d4 <_Bfree>
 800ca76:	e0b0      	b.n	800cbda <_dtoa_r+0x62a>
 800ca78:	07e2      	lsls	r2, r4, #31
 800ca7a:	d505      	bpl.n	800ca88 <_dtoa_r+0x4d8>
 800ca7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ca80:	f7f3 fd9a 	bl	80005b8 <__aeabi_dmul>
 800ca84:	2301      	movs	r3, #1
 800ca86:	3601      	adds	r6, #1
 800ca88:	1064      	asrs	r4, r4, #1
 800ca8a:	3508      	adds	r5, #8
 800ca8c:	e762      	b.n	800c954 <_dtoa_r+0x3a4>
 800ca8e:	2602      	movs	r6, #2
 800ca90:	e765      	b.n	800c95e <_dtoa_r+0x3ae>
 800ca92:	46b8      	mov	r8, r7
 800ca94:	9c08      	ldr	r4, [sp, #32]
 800ca96:	e784      	b.n	800c9a2 <_dtoa_r+0x3f2>
 800ca98:	4b27      	ldr	r3, [pc, #156]	@ (800cb38 <_dtoa_r+0x588>)
 800ca9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ca9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800caa0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800caa4:	4454      	add	r4, sl
 800caa6:	2900      	cmp	r1, #0
 800caa8:	d054      	beq.n	800cb54 <_dtoa_r+0x5a4>
 800caaa:	2000      	movs	r0, #0
 800caac:	4928      	ldr	r1, [pc, #160]	@ (800cb50 <_dtoa_r+0x5a0>)
 800caae:	f7f3 fead 	bl	800080c <__aeabi_ddiv>
 800cab2:	4633      	mov	r3, r6
 800cab4:	462a      	mov	r2, r5
 800cab6:	f7f3 fbc7 	bl	8000248 <__aeabi_dsub>
 800caba:	4656      	mov	r6, sl
 800cabc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cac0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cac4:	f7f4 f828 	bl	8000b18 <__aeabi_d2iz>
 800cac8:	4605      	mov	r5, r0
 800caca:	f7f3 fd0b 	bl	80004e4 <__aeabi_i2d>
 800cace:	4602      	mov	r2, r0
 800cad0:	460b      	mov	r3, r1
 800cad2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cad6:	f7f3 fbb7 	bl	8000248 <__aeabi_dsub>
 800cada:	4602      	mov	r2, r0
 800cadc:	460b      	mov	r3, r1
 800cade:	3530      	adds	r5, #48	@ 0x30
 800cae0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cae4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cae8:	f806 5b01 	strb.w	r5, [r6], #1
 800caec:	f7f3 ffd6 	bl	8000a9c <__aeabi_dcmplt>
 800caf0:	2800      	cmp	r0, #0
 800caf2:	d172      	bne.n	800cbda <_dtoa_r+0x62a>
 800caf4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800caf8:	2000      	movs	r0, #0
 800cafa:	4911      	ldr	r1, [pc, #68]	@ (800cb40 <_dtoa_r+0x590>)
 800cafc:	f7f3 fba4 	bl	8000248 <__aeabi_dsub>
 800cb00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cb04:	f7f3 ffca 	bl	8000a9c <__aeabi_dcmplt>
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	f040 80b4 	bne.w	800cc76 <_dtoa_r+0x6c6>
 800cb0e:	42a6      	cmp	r6, r4
 800cb10:	f43f af70 	beq.w	800c9f4 <_dtoa_r+0x444>
 800cb14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cb18:	2200      	movs	r2, #0
 800cb1a:	4b0a      	ldr	r3, [pc, #40]	@ (800cb44 <_dtoa_r+0x594>)
 800cb1c:	f7f3 fd4c 	bl	80005b8 <__aeabi_dmul>
 800cb20:	2200      	movs	r2, #0
 800cb22:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cb26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb2a:	4b06      	ldr	r3, [pc, #24]	@ (800cb44 <_dtoa_r+0x594>)
 800cb2c:	f7f3 fd44 	bl	80005b8 <__aeabi_dmul>
 800cb30:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cb34:	e7c4      	b.n	800cac0 <_dtoa_r+0x510>
 800cb36:	bf00      	nop
 800cb38:	08010780 	.word	0x08010780
 800cb3c:	08010758 	.word	0x08010758
 800cb40:	3ff00000 	.word	0x3ff00000
 800cb44:	40240000 	.word	0x40240000
 800cb48:	401c0000 	.word	0x401c0000
 800cb4c:	40140000 	.word	0x40140000
 800cb50:	3fe00000 	.word	0x3fe00000
 800cb54:	4631      	mov	r1, r6
 800cb56:	4628      	mov	r0, r5
 800cb58:	f7f3 fd2e 	bl	80005b8 <__aeabi_dmul>
 800cb5c:	4656      	mov	r6, sl
 800cb5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cb62:	9413      	str	r4, [sp, #76]	@ 0x4c
 800cb64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb68:	f7f3 ffd6 	bl	8000b18 <__aeabi_d2iz>
 800cb6c:	4605      	mov	r5, r0
 800cb6e:	f7f3 fcb9 	bl	80004e4 <__aeabi_i2d>
 800cb72:	4602      	mov	r2, r0
 800cb74:	460b      	mov	r3, r1
 800cb76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb7a:	f7f3 fb65 	bl	8000248 <__aeabi_dsub>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	460b      	mov	r3, r1
 800cb82:	3530      	adds	r5, #48	@ 0x30
 800cb84:	f806 5b01 	strb.w	r5, [r6], #1
 800cb88:	42a6      	cmp	r6, r4
 800cb8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cb8e:	f04f 0200 	mov.w	r2, #0
 800cb92:	d124      	bne.n	800cbde <_dtoa_r+0x62e>
 800cb94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cb98:	4bae      	ldr	r3, [pc, #696]	@ (800ce54 <_dtoa_r+0x8a4>)
 800cb9a:	f7f3 fb57 	bl	800024c <__adddf3>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	460b      	mov	r3, r1
 800cba2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cba6:	f7f3 ff97 	bl	8000ad8 <__aeabi_dcmpgt>
 800cbaa:	2800      	cmp	r0, #0
 800cbac:	d163      	bne.n	800cc76 <_dtoa_r+0x6c6>
 800cbae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cbb2:	2000      	movs	r0, #0
 800cbb4:	49a7      	ldr	r1, [pc, #668]	@ (800ce54 <_dtoa_r+0x8a4>)
 800cbb6:	f7f3 fb47 	bl	8000248 <__aeabi_dsub>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbc2:	f7f3 ff6b 	bl	8000a9c <__aeabi_dcmplt>
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	f43f af14 	beq.w	800c9f4 <_dtoa_r+0x444>
 800cbcc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800cbce:	1e73      	subs	r3, r6, #1
 800cbd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cbd2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cbd6:	2b30      	cmp	r3, #48	@ 0x30
 800cbd8:	d0f8      	beq.n	800cbcc <_dtoa_r+0x61c>
 800cbda:	4647      	mov	r7, r8
 800cbdc:	e03b      	b.n	800cc56 <_dtoa_r+0x6a6>
 800cbde:	4b9e      	ldr	r3, [pc, #632]	@ (800ce58 <_dtoa_r+0x8a8>)
 800cbe0:	f7f3 fcea 	bl	80005b8 <__aeabi_dmul>
 800cbe4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cbe8:	e7bc      	b.n	800cb64 <_dtoa_r+0x5b4>
 800cbea:	4656      	mov	r6, sl
 800cbec:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800cbf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	4629      	mov	r1, r5
 800cbf8:	f7f3 fe08 	bl	800080c <__aeabi_ddiv>
 800cbfc:	f7f3 ff8c 	bl	8000b18 <__aeabi_d2iz>
 800cc00:	4680      	mov	r8, r0
 800cc02:	f7f3 fc6f 	bl	80004e4 <__aeabi_i2d>
 800cc06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc0a:	f7f3 fcd5 	bl	80005b8 <__aeabi_dmul>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	460b      	mov	r3, r1
 800cc12:	4620      	mov	r0, r4
 800cc14:	4629      	mov	r1, r5
 800cc16:	f7f3 fb17 	bl	8000248 <__aeabi_dsub>
 800cc1a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cc1e:	9d08      	ldr	r5, [sp, #32]
 800cc20:	f806 4b01 	strb.w	r4, [r6], #1
 800cc24:	eba6 040a 	sub.w	r4, r6, sl
 800cc28:	42a5      	cmp	r5, r4
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	d133      	bne.n	800cc98 <_dtoa_r+0x6e8>
 800cc30:	f7f3 fb0c 	bl	800024c <__adddf3>
 800cc34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc38:	4604      	mov	r4, r0
 800cc3a:	460d      	mov	r5, r1
 800cc3c:	f7f3 ff4c 	bl	8000ad8 <__aeabi_dcmpgt>
 800cc40:	b9c0      	cbnz	r0, 800cc74 <_dtoa_r+0x6c4>
 800cc42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc46:	4620      	mov	r0, r4
 800cc48:	4629      	mov	r1, r5
 800cc4a:	f7f3 ff1d 	bl	8000a88 <__aeabi_dcmpeq>
 800cc4e:	b110      	cbz	r0, 800cc56 <_dtoa_r+0x6a6>
 800cc50:	f018 0f01 	tst.w	r8, #1
 800cc54:	d10e      	bne.n	800cc74 <_dtoa_r+0x6c4>
 800cc56:	4648      	mov	r0, r9
 800cc58:	9903      	ldr	r1, [sp, #12]
 800cc5a:	f000 fbbb 	bl	800d3d4 <_Bfree>
 800cc5e:	2300      	movs	r3, #0
 800cc60:	7033      	strb	r3, [r6, #0]
 800cc62:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800cc64:	3701      	adds	r7, #1
 800cc66:	601f      	str	r7, [r3, #0]
 800cc68:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	f000 824b 	beq.w	800d106 <_dtoa_r+0xb56>
 800cc70:	601e      	str	r6, [r3, #0]
 800cc72:	e248      	b.n	800d106 <_dtoa_r+0xb56>
 800cc74:	46b8      	mov	r8, r7
 800cc76:	4633      	mov	r3, r6
 800cc78:	461e      	mov	r6, r3
 800cc7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc7e:	2a39      	cmp	r2, #57	@ 0x39
 800cc80:	d106      	bne.n	800cc90 <_dtoa_r+0x6e0>
 800cc82:	459a      	cmp	sl, r3
 800cc84:	d1f8      	bne.n	800cc78 <_dtoa_r+0x6c8>
 800cc86:	2230      	movs	r2, #48	@ 0x30
 800cc88:	f108 0801 	add.w	r8, r8, #1
 800cc8c:	f88a 2000 	strb.w	r2, [sl]
 800cc90:	781a      	ldrb	r2, [r3, #0]
 800cc92:	3201      	adds	r2, #1
 800cc94:	701a      	strb	r2, [r3, #0]
 800cc96:	e7a0      	b.n	800cbda <_dtoa_r+0x62a>
 800cc98:	2200      	movs	r2, #0
 800cc9a:	4b6f      	ldr	r3, [pc, #444]	@ (800ce58 <_dtoa_r+0x8a8>)
 800cc9c:	f7f3 fc8c 	bl	80005b8 <__aeabi_dmul>
 800cca0:	2200      	movs	r2, #0
 800cca2:	2300      	movs	r3, #0
 800cca4:	4604      	mov	r4, r0
 800cca6:	460d      	mov	r5, r1
 800cca8:	f7f3 feee 	bl	8000a88 <__aeabi_dcmpeq>
 800ccac:	2800      	cmp	r0, #0
 800ccae:	d09f      	beq.n	800cbf0 <_dtoa_r+0x640>
 800ccb0:	e7d1      	b.n	800cc56 <_dtoa_r+0x6a6>
 800ccb2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ccb4:	2a00      	cmp	r2, #0
 800ccb6:	f000 80ea 	beq.w	800ce8e <_dtoa_r+0x8de>
 800ccba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ccbc:	2a01      	cmp	r2, #1
 800ccbe:	f300 80cd 	bgt.w	800ce5c <_dtoa_r+0x8ac>
 800ccc2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ccc4:	2a00      	cmp	r2, #0
 800ccc6:	f000 80c1 	beq.w	800ce4c <_dtoa_r+0x89c>
 800ccca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ccce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ccd0:	9e04      	ldr	r6, [sp, #16]
 800ccd2:	9a04      	ldr	r2, [sp, #16]
 800ccd4:	2101      	movs	r1, #1
 800ccd6:	441a      	add	r2, r3
 800ccd8:	9204      	str	r2, [sp, #16]
 800ccda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccdc:	4648      	mov	r0, r9
 800ccde:	441a      	add	r2, r3
 800cce0:	9209      	str	r2, [sp, #36]	@ 0x24
 800cce2:	f000 fc75 	bl	800d5d0 <__i2b>
 800cce6:	4605      	mov	r5, r0
 800cce8:	b166      	cbz	r6, 800cd04 <_dtoa_r+0x754>
 800ccea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	dd09      	ble.n	800cd04 <_dtoa_r+0x754>
 800ccf0:	42b3      	cmp	r3, r6
 800ccf2:	bfa8      	it	ge
 800ccf4:	4633      	movge	r3, r6
 800ccf6:	9a04      	ldr	r2, [sp, #16]
 800ccf8:	1af6      	subs	r6, r6, r3
 800ccfa:	1ad2      	subs	r2, r2, r3
 800ccfc:	9204      	str	r2, [sp, #16]
 800ccfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd06:	b30b      	cbz	r3, 800cd4c <_dtoa_r+0x79c>
 800cd08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	f000 80c6 	beq.w	800ce9c <_dtoa_r+0x8ec>
 800cd10:	2c00      	cmp	r4, #0
 800cd12:	f000 80c0 	beq.w	800ce96 <_dtoa_r+0x8e6>
 800cd16:	4629      	mov	r1, r5
 800cd18:	4622      	mov	r2, r4
 800cd1a:	4648      	mov	r0, r9
 800cd1c:	f000 fd10 	bl	800d740 <__pow5mult>
 800cd20:	9a03      	ldr	r2, [sp, #12]
 800cd22:	4601      	mov	r1, r0
 800cd24:	4605      	mov	r5, r0
 800cd26:	4648      	mov	r0, r9
 800cd28:	f000 fc68 	bl	800d5fc <__multiply>
 800cd2c:	9903      	ldr	r1, [sp, #12]
 800cd2e:	4680      	mov	r8, r0
 800cd30:	4648      	mov	r0, r9
 800cd32:	f000 fb4f 	bl	800d3d4 <_Bfree>
 800cd36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd38:	1b1b      	subs	r3, r3, r4
 800cd3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd3c:	f000 80b1 	beq.w	800cea2 <_dtoa_r+0x8f2>
 800cd40:	4641      	mov	r1, r8
 800cd42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd44:	4648      	mov	r0, r9
 800cd46:	f000 fcfb 	bl	800d740 <__pow5mult>
 800cd4a:	9003      	str	r0, [sp, #12]
 800cd4c:	2101      	movs	r1, #1
 800cd4e:	4648      	mov	r0, r9
 800cd50:	f000 fc3e 	bl	800d5d0 <__i2b>
 800cd54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd56:	4604      	mov	r4, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	f000 81d8 	beq.w	800d10e <_dtoa_r+0xb5e>
 800cd5e:	461a      	mov	r2, r3
 800cd60:	4601      	mov	r1, r0
 800cd62:	4648      	mov	r0, r9
 800cd64:	f000 fcec 	bl	800d740 <__pow5mult>
 800cd68:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cd6a:	4604      	mov	r4, r0
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	f300 809f 	bgt.w	800ceb0 <_dtoa_r+0x900>
 800cd72:	9b06      	ldr	r3, [sp, #24]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	f040 8097 	bne.w	800cea8 <_dtoa_r+0x8f8>
 800cd7a:	9b07      	ldr	r3, [sp, #28]
 800cd7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	f040 8093 	bne.w	800ceac <_dtoa_r+0x8fc>
 800cd86:	9b07      	ldr	r3, [sp, #28]
 800cd88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cd8c:	0d1b      	lsrs	r3, r3, #20
 800cd8e:	051b      	lsls	r3, r3, #20
 800cd90:	b133      	cbz	r3, 800cda0 <_dtoa_r+0x7f0>
 800cd92:	9b04      	ldr	r3, [sp, #16]
 800cd94:	3301      	adds	r3, #1
 800cd96:	9304      	str	r3, [sp, #16]
 800cd98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd9e:	2301      	movs	r3, #1
 800cda0:	930a      	str	r3, [sp, #40]	@ 0x28
 800cda2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	f000 81b8 	beq.w	800d11a <_dtoa_r+0xb6a>
 800cdaa:	6923      	ldr	r3, [r4, #16]
 800cdac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cdb0:	6918      	ldr	r0, [r3, #16]
 800cdb2:	f000 fbc1 	bl	800d538 <__hi0bits>
 800cdb6:	f1c0 0020 	rsb	r0, r0, #32
 800cdba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdbc:	4418      	add	r0, r3
 800cdbe:	f010 001f 	ands.w	r0, r0, #31
 800cdc2:	f000 8082 	beq.w	800ceca <_dtoa_r+0x91a>
 800cdc6:	f1c0 0320 	rsb	r3, r0, #32
 800cdca:	2b04      	cmp	r3, #4
 800cdcc:	dd73      	ble.n	800ceb6 <_dtoa_r+0x906>
 800cdce:	9b04      	ldr	r3, [sp, #16]
 800cdd0:	f1c0 001c 	rsb	r0, r0, #28
 800cdd4:	4403      	add	r3, r0
 800cdd6:	9304      	str	r3, [sp, #16]
 800cdd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdda:	4406      	add	r6, r0
 800cddc:	4403      	add	r3, r0
 800cdde:	9309      	str	r3, [sp, #36]	@ 0x24
 800cde0:	9b04      	ldr	r3, [sp, #16]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	dd05      	ble.n	800cdf2 <_dtoa_r+0x842>
 800cde6:	461a      	mov	r2, r3
 800cde8:	4648      	mov	r0, r9
 800cdea:	9903      	ldr	r1, [sp, #12]
 800cdec:	f000 fd02 	bl	800d7f4 <__lshift>
 800cdf0:	9003      	str	r0, [sp, #12]
 800cdf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	dd05      	ble.n	800ce04 <_dtoa_r+0x854>
 800cdf8:	4621      	mov	r1, r4
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	4648      	mov	r0, r9
 800cdfe:	f000 fcf9 	bl	800d7f4 <__lshift>
 800ce02:	4604      	mov	r4, r0
 800ce04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d061      	beq.n	800cece <_dtoa_r+0x91e>
 800ce0a:	4621      	mov	r1, r4
 800ce0c:	9803      	ldr	r0, [sp, #12]
 800ce0e:	f000 fd5d 	bl	800d8cc <__mcmp>
 800ce12:	2800      	cmp	r0, #0
 800ce14:	da5b      	bge.n	800cece <_dtoa_r+0x91e>
 800ce16:	2300      	movs	r3, #0
 800ce18:	220a      	movs	r2, #10
 800ce1a:	4648      	mov	r0, r9
 800ce1c:	9903      	ldr	r1, [sp, #12]
 800ce1e:	f000 fafb 	bl	800d418 <__multadd>
 800ce22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce24:	f107 38ff 	add.w	r8, r7, #4294967295
 800ce28:	9003      	str	r0, [sp, #12]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	f000 8177 	beq.w	800d11e <_dtoa_r+0xb6e>
 800ce30:	4629      	mov	r1, r5
 800ce32:	2300      	movs	r3, #0
 800ce34:	220a      	movs	r2, #10
 800ce36:	4648      	mov	r0, r9
 800ce38:	f000 faee 	bl	800d418 <__multadd>
 800ce3c:	f1bb 0f00 	cmp.w	fp, #0
 800ce40:	4605      	mov	r5, r0
 800ce42:	dc6f      	bgt.n	800cf24 <_dtoa_r+0x974>
 800ce44:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ce46:	2b02      	cmp	r3, #2
 800ce48:	dc49      	bgt.n	800cede <_dtoa_r+0x92e>
 800ce4a:	e06b      	b.n	800cf24 <_dtoa_r+0x974>
 800ce4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ce4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ce52:	e73c      	b.n	800ccce <_dtoa_r+0x71e>
 800ce54:	3fe00000 	.word	0x3fe00000
 800ce58:	40240000 	.word	0x40240000
 800ce5c:	9b08      	ldr	r3, [sp, #32]
 800ce5e:	1e5c      	subs	r4, r3, #1
 800ce60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce62:	42a3      	cmp	r3, r4
 800ce64:	db09      	blt.n	800ce7a <_dtoa_r+0x8ca>
 800ce66:	1b1c      	subs	r4, r3, r4
 800ce68:	9b08      	ldr	r3, [sp, #32]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	f6bf af30 	bge.w	800ccd0 <_dtoa_r+0x720>
 800ce70:	9b04      	ldr	r3, [sp, #16]
 800ce72:	9a08      	ldr	r2, [sp, #32]
 800ce74:	1a9e      	subs	r6, r3, r2
 800ce76:	2300      	movs	r3, #0
 800ce78:	e72b      	b.n	800ccd2 <_dtoa_r+0x722>
 800ce7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce7e:	1ae3      	subs	r3, r4, r3
 800ce80:	441a      	add	r2, r3
 800ce82:	940a      	str	r4, [sp, #40]	@ 0x28
 800ce84:	9e04      	ldr	r6, [sp, #16]
 800ce86:	2400      	movs	r4, #0
 800ce88:	9b08      	ldr	r3, [sp, #32]
 800ce8a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ce8c:	e721      	b.n	800ccd2 <_dtoa_r+0x722>
 800ce8e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ce90:	9e04      	ldr	r6, [sp, #16]
 800ce92:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ce94:	e728      	b.n	800cce8 <_dtoa_r+0x738>
 800ce96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ce9a:	e751      	b.n	800cd40 <_dtoa_r+0x790>
 800ce9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce9e:	9903      	ldr	r1, [sp, #12]
 800cea0:	e750      	b.n	800cd44 <_dtoa_r+0x794>
 800cea2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cea6:	e751      	b.n	800cd4c <_dtoa_r+0x79c>
 800cea8:	2300      	movs	r3, #0
 800ceaa:	e779      	b.n	800cda0 <_dtoa_r+0x7f0>
 800ceac:	9b06      	ldr	r3, [sp, #24]
 800ceae:	e777      	b.n	800cda0 <_dtoa_r+0x7f0>
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	930a      	str	r3, [sp, #40]	@ 0x28
 800ceb4:	e779      	b.n	800cdaa <_dtoa_r+0x7fa>
 800ceb6:	d093      	beq.n	800cde0 <_dtoa_r+0x830>
 800ceb8:	9a04      	ldr	r2, [sp, #16]
 800ceba:	331c      	adds	r3, #28
 800cebc:	441a      	add	r2, r3
 800cebe:	9204      	str	r2, [sp, #16]
 800cec0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cec2:	441e      	add	r6, r3
 800cec4:	441a      	add	r2, r3
 800cec6:	9209      	str	r2, [sp, #36]	@ 0x24
 800cec8:	e78a      	b.n	800cde0 <_dtoa_r+0x830>
 800ceca:	4603      	mov	r3, r0
 800cecc:	e7f4      	b.n	800ceb8 <_dtoa_r+0x908>
 800cece:	9b08      	ldr	r3, [sp, #32]
 800ced0:	46b8      	mov	r8, r7
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	dc20      	bgt.n	800cf18 <_dtoa_r+0x968>
 800ced6:	469b      	mov	fp, r3
 800ced8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ceda:	2b02      	cmp	r3, #2
 800cedc:	dd1e      	ble.n	800cf1c <_dtoa_r+0x96c>
 800cede:	f1bb 0f00 	cmp.w	fp, #0
 800cee2:	f47f adb1 	bne.w	800ca48 <_dtoa_r+0x498>
 800cee6:	4621      	mov	r1, r4
 800cee8:	465b      	mov	r3, fp
 800ceea:	2205      	movs	r2, #5
 800ceec:	4648      	mov	r0, r9
 800ceee:	f000 fa93 	bl	800d418 <__multadd>
 800cef2:	4601      	mov	r1, r0
 800cef4:	4604      	mov	r4, r0
 800cef6:	9803      	ldr	r0, [sp, #12]
 800cef8:	f000 fce8 	bl	800d8cc <__mcmp>
 800cefc:	2800      	cmp	r0, #0
 800cefe:	f77f ada3 	ble.w	800ca48 <_dtoa_r+0x498>
 800cf02:	4656      	mov	r6, sl
 800cf04:	2331      	movs	r3, #49	@ 0x31
 800cf06:	f108 0801 	add.w	r8, r8, #1
 800cf0a:	f806 3b01 	strb.w	r3, [r6], #1
 800cf0e:	e59f      	b.n	800ca50 <_dtoa_r+0x4a0>
 800cf10:	46b8      	mov	r8, r7
 800cf12:	9c08      	ldr	r4, [sp, #32]
 800cf14:	4625      	mov	r5, r4
 800cf16:	e7f4      	b.n	800cf02 <_dtoa_r+0x952>
 800cf18:	f8dd b020 	ldr.w	fp, [sp, #32]
 800cf1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	f000 8101 	beq.w	800d126 <_dtoa_r+0xb76>
 800cf24:	2e00      	cmp	r6, #0
 800cf26:	dd05      	ble.n	800cf34 <_dtoa_r+0x984>
 800cf28:	4629      	mov	r1, r5
 800cf2a:	4632      	mov	r2, r6
 800cf2c:	4648      	mov	r0, r9
 800cf2e:	f000 fc61 	bl	800d7f4 <__lshift>
 800cf32:	4605      	mov	r5, r0
 800cf34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d05c      	beq.n	800cff4 <_dtoa_r+0xa44>
 800cf3a:	4648      	mov	r0, r9
 800cf3c:	6869      	ldr	r1, [r5, #4]
 800cf3e:	f000 fa09 	bl	800d354 <_Balloc>
 800cf42:	4606      	mov	r6, r0
 800cf44:	b928      	cbnz	r0, 800cf52 <_dtoa_r+0x9a2>
 800cf46:	4602      	mov	r2, r0
 800cf48:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cf4c:	4b80      	ldr	r3, [pc, #512]	@ (800d150 <_dtoa_r+0xba0>)
 800cf4e:	f7ff bb43 	b.w	800c5d8 <_dtoa_r+0x28>
 800cf52:	692a      	ldr	r2, [r5, #16]
 800cf54:	f105 010c 	add.w	r1, r5, #12
 800cf58:	3202      	adds	r2, #2
 800cf5a:	0092      	lsls	r2, r2, #2
 800cf5c:	300c      	adds	r0, #12
 800cf5e:	f7ff fa8a 	bl	800c476 <memcpy>
 800cf62:	2201      	movs	r2, #1
 800cf64:	4631      	mov	r1, r6
 800cf66:	4648      	mov	r0, r9
 800cf68:	f000 fc44 	bl	800d7f4 <__lshift>
 800cf6c:	462f      	mov	r7, r5
 800cf6e:	4605      	mov	r5, r0
 800cf70:	f10a 0301 	add.w	r3, sl, #1
 800cf74:	9304      	str	r3, [sp, #16]
 800cf76:	eb0a 030b 	add.w	r3, sl, fp
 800cf7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf7c:	9b06      	ldr	r3, [sp, #24]
 800cf7e:	f003 0301 	and.w	r3, r3, #1
 800cf82:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf84:	9b04      	ldr	r3, [sp, #16]
 800cf86:	4621      	mov	r1, r4
 800cf88:	9803      	ldr	r0, [sp, #12]
 800cf8a:	f103 3bff 	add.w	fp, r3, #4294967295
 800cf8e:	f7ff fa85 	bl	800c49c <quorem>
 800cf92:	4603      	mov	r3, r0
 800cf94:	4639      	mov	r1, r7
 800cf96:	3330      	adds	r3, #48	@ 0x30
 800cf98:	9006      	str	r0, [sp, #24]
 800cf9a:	9803      	ldr	r0, [sp, #12]
 800cf9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf9e:	f000 fc95 	bl	800d8cc <__mcmp>
 800cfa2:	462a      	mov	r2, r5
 800cfa4:	9008      	str	r0, [sp, #32]
 800cfa6:	4621      	mov	r1, r4
 800cfa8:	4648      	mov	r0, r9
 800cfaa:	f000 fcab 	bl	800d904 <__mdiff>
 800cfae:	68c2      	ldr	r2, [r0, #12]
 800cfb0:	4606      	mov	r6, r0
 800cfb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfb4:	bb02      	cbnz	r2, 800cff8 <_dtoa_r+0xa48>
 800cfb6:	4601      	mov	r1, r0
 800cfb8:	9803      	ldr	r0, [sp, #12]
 800cfba:	f000 fc87 	bl	800d8cc <__mcmp>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfc2:	4631      	mov	r1, r6
 800cfc4:	4648      	mov	r0, r9
 800cfc6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800cfca:	f000 fa03 	bl	800d3d4 <_Bfree>
 800cfce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cfd0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cfd2:	9e04      	ldr	r6, [sp, #16]
 800cfd4:	ea42 0103 	orr.w	r1, r2, r3
 800cfd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfda:	4319      	orrs	r1, r3
 800cfdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfde:	d10d      	bne.n	800cffc <_dtoa_r+0xa4c>
 800cfe0:	2b39      	cmp	r3, #57	@ 0x39
 800cfe2:	d027      	beq.n	800d034 <_dtoa_r+0xa84>
 800cfe4:	9a08      	ldr	r2, [sp, #32]
 800cfe6:	2a00      	cmp	r2, #0
 800cfe8:	dd01      	ble.n	800cfee <_dtoa_r+0xa3e>
 800cfea:	9b06      	ldr	r3, [sp, #24]
 800cfec:	3331      	adds	r3, #49	@ 0x31
 800cfee:	f88b 3000 	strb.w	r3, [fp]
 800cff2:	e52e      	b.n	800ca52 <_dtoa_r+0x4a2>
 800cff4:	4628      	mov	r0, r5
 800cff6:	e7b9      	b.n	800cf6c <_dtoa_r+0x9bc>
 800cff8:	2201      	movs	r2, #1
 800cffa:	e7e2      	b.n	800cfc2 <_dtoa_r+0xa12>
 800cffc:	9908      	ldr	r1, [sp, #32]
 800cffe:	2900      	cmp	r1, #0
 800d000:	db04      	blt.n	800d00c <_dtoa_r+0xa5c>
 800d002:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800d004:	4301      	orrs	r1, r0
 800d006:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d008:	4301      	orrs	r1, r0
 800d00a:	d120      	bne.n	800d04e <_dtoa_r+0xa9e>
 800d00c:	2a00      	cmp	r2, #0
 800d00e:	ddee      	ble.n	800cfee <_dtoa_r+0xa3e>
 800d010:	2201      	movs	r2, #1
 800d012:	9903      	ldr	r1, [sp, #12]
 800d014:	4648      	mov	r0, r9
 800d016:	9304      	str	r3, [sp, #16]
 800d018:	f000 fbec 	bl	800d7f4 <__lshift>
 800d01c:	4621      	mov	r1, r4
 800d01e:	9003      	str	r0, [sp, #12]
 800d020:	f000 fc54 	bl	800d8cc <__mcmp>
 800d024:	2800      	cmp	r0, #0
 800d026:	9b04      	ldr	r3, [sp, #16]
 800d028:	dc02      	bgt.n	800d030 <_dtoa_r+0xa80>
 800d02a:	d1e0      	bne.n	800cfee <_dtoa_r+0xa3e>
 800d02c:	07da      	lsls	r2, r3, #31
 800d02e:	d5de      	bpl.n	800cfee <_dtoa_r+0xa3e>
 800d030:	2b39      	cmp	r3, #57	@ 0x39
 800d032:	d1da      	bne.n	800cfea <_dtoa_r+0xa3a>
 800d034:	2339      	movs	r3, #57	@ 0x39
 800d036:	f88b 3000 	strb.w	r3, [fp]
 800d03a:	4633      	mov	r3, r6
 800d03c:	461e      	mov	r6, r3
 800d03e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d042:	3b01      	subs	r3, #1
 800d044:	2a39      	cmp	r2, #57	@ 0x39
 800d046:	d04e      	beq.n	800d0e6 <_dtoa_r+0xb36>
 800d048:	3201      	adds	r2, #1
 800d04a:	701a      	strb	r2, [r3, #0]
 800d04c:	e501      	b.n	800ca52 <_dtoa_r+0x4a2>
 800d04e:	2a00      	cmp	r2, #0
 800d050:	dd03      	ble.n	800d05a <_dtoa_r+0xaaa>
 800d052:	2b39      	cmp	r3, #57	@ 0x39
 800d054:	d0ee      	beq.n	800d034 <_dtoa_r+0xa84>
 800d056:	3301      	adds	r3, #1
 800d058:	e7c9      	b.n	800cfee <_dtoa_r+0xa3e>
 800d05a:	9a04      	ldr	r2, [sp, #16]
 800d05c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d05e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d062:	428a      	cmp	r2, r1
 800d064:	d028      	beq.n	800d0b8 <_dtoa_r+0xb08>
 800d066:	2300      	movs	r3, #0
 800d068:	220a      	movs	r2, #10
 800d06a:	9903      	ldr	r1, [sp, #12]
 800d06c:	4648      	mov	r0, r9
 800d06e:	f000 f9d3 	bl	800d418 <__multadd>
 800d072:	42af      	cmp	r7, r5
 800d074:	9003      	str	r0, [sp, #12]
 800d076:	f04f 0300 	mov.w	r3, #0
 800d07a:	f04f 020a 	mov.w	r2, #10
 800d07e:	4639      	mov	r1, r7
 800d080:	4648      	mov	r0, r9
 800d082:	d107      	bne.n	800d094 <_dtoa_r+0xae4>
 800d084:	f000 f9c8 	bl	800d418 <__multadd>
 800d088:	4607      	mov	r7, r0
 800d08a:	4605      	mov	r5, r0
 800d08c:	9b04      	ldr	r3, [sp, #16]
 800d08e:	3301      	adds	r3, #1
 800d090:	9304      	str	r3, [sp, #16]
 800d092:	e777      	b.n	800cf84 <_dtoa_r+0x9d4>
 800d094:	f000 f9c0 	bl	800d418 <__multadd>
 800d098:	4629      	mov	r1, r5
 800d09a:	4607      	mov	r7, r0
 800d09c:	2300      	movs	r3, #0
 800d09e:	220a      	movs	r2, #10
 800d0a0:	4648      	mov	r0, r9
 800d0a2:	f000 f9b9 	bl	800d418 <__multadd>
 800d0a6:	4605      	mov	r5, r0
 800d0a8:	e7f0      	b.n	800d08c <_dtoa_r+0xadc>
 800d0aa:	f1bb 0f00 	cmp.w	fp, #0
 800d0ae:	bfcc      	ite	gt
 800d0b0:	465e      	movgt	r6, fp
 800d0b2:	2601      	movle	r6, #1
 800d0b4:	2700      	movs	r7, #0
 800d0b6:	4456      	add	r6, sl
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	9903      	ldr	r1, [sp, #12]
 800d0bc:	4648      	mov	r0, r9
 800d0be:	9304      	str	r3, [sp, #16]
 800d0c0:	f000 fb98 	bl	800d7f4 <__lshift>
 800d0c4:	4621      	mov	r1, r4
 800d0c6:	9003      	str	r0, [sp, #12]
 800d0c8:	f000 fc00 	bl	800d8cc <__mcmp>
 800d0cc:	2800      	cmp	r0, #0
 800d0ce:	dcb4      	bgt.n	800d03a <_dtoa_r+0xa8a>
 800d0d0:	d102      	bne.n	800d0d8 <_dtoa_r+0xb28>
 800d0d2:	9b04      	ldr	r3, [sp, #16]
 800d0d4:	07db      	lsls	r3, r3, #31
 800d0d6:	d4b0      	bmi.n	800d03a <_dtoa_r+0xa8a>
 800d0d8:	4633      	mov	r3, r6
 800d0da:	461e      	mov	r6, r3
 800d0dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d0e0:	2a30      	cmp	r2, #48	@ 0x30
 800d0e2:	d0fa      	beq.n	800d0da <_dtoa_r+0xb2a>
 800d0e4:	e4b5      	b.n	800ca52 <_dtoa_r+0x4a2>
 800d0e6:	459a      	cmp	sl, r3
 800d0e8:	d1a8      	bne.n	800d03c <_dtoa_r+0xa8c>
 800d0ea:	2331      	movs	r3, #49	@ 0x31
 800d0ec:	f108 0801 	add.w	r8, r8, #1
 800d0f0:	f88a 3000 	strb.w	r3, [sl]
 800d0f4:	e4ad      	b.n	800ca52 <_dtoa_r+0x4a2>
 800d0f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d0f8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d154 <_dtoa_r+0xba4>
 800d0fc:	b11b      	cbz	r3, 800d106 <_dtoa_r+0xb56>
 800d0fe:	f10a 0308 	add.w	r3, sl, #8
 800d102:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d104:	6013      	str	r3, [r2, #0]
 800d106:	4650      	mov	r0, sl
 800d108:	b017      	add	sp, #92	@ 0x5c
 800d10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d10e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d110:	2b01      	cmp	r3, #1
 800d112:	f77f ae2e 	ble.w	800cd72 <_dtoa_r+0x7c2>
 800d116:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d118:	930a      	str	r3, [sp, #40]	@ 0x28
 800d11a:	2001      	movs	r0, #1
 800d11c:	e64d      	b.n	800cdba <_dtoa_r+0x80a>
 800d11e:	f1bb 0f00 	cmp.w	fp, #0
 800d122:	f77f aed9 	ble.w	800ced8 <_dtoa_r+0x928>
 800d126:	4656      	mov	r6, sl
 800d128:	4621      	mov	r1, r4
 800d12a:	9803      	ldr	r0, [sp, #12]
 800d12c:	f7ff f9b6 	bl	800c49c <quorem>
 800d130:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d134:	f806 3b01 	strb.w	r3, [r6], #1
 800d138:	eba6 020a 	sub.w	r2, r6, sl
 800d13c:	4593      	cmp	fp, r2
 800d13e:	ddb4      	ble.n	800d0aa <_dtoa_r+0xafa>
 800d140:	2300      	movs	r3, #0
 800d142:	220a      	movs	r2, #10
 800d144:	4648      	mov	r0, r9
 800d146:	9903      	ldr	r1, [sp, #12]
 800d148:	f000 f966 	bl	800d418 <__multadd>
 800d14c:	9003      	str	r0, [sp, #12]
 800d14e:	e7eb      	b.n	800d128 <_dtoa_r+0xb78>
 800d150:	08010625 	.word	0x08010625
 800d154:	080105a9 	.word	0x080105a9

0800d158 <_free_r>:
 800d158:	b538      	push	{r3, r4, r5, lr}
 800d15a:	4605      	mov	r5, r0
 800d15c:	2900      	cmp	r1, #0
 800d15e:	d040      	beq.n	800d1e2 <_free_r+0x8a>
 800d160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d164:	1f0c      	subs	r4, r1, #4
 800d166:	2b00      	cmp	r3, #0
 800d168:	bfb8      	it	lt
 800d16a:	18e4      	addlt	r4, r4, r3
 800d16c:	f000 f8e6 	bl	800d33c <__malloc_lock>
 800d170:	4a1c      	ldr	r2, [pc, #112]	@ (800d1e4 <_free_r+0x8c>)
 800d172:	6813      	ldr	r3, [r2, #0]
 800d174:	b933      	cbnz	r3, 800d184 <_free_r+0x2c>
 800d176:	6063      	str	r3, [r4, #4]
 800d178:	6014      	str	r4, [r2, #0]
 800d17a:	4628      	mov	r0, r5
 800d17c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d180:	f000 b8e2 	b.w	800d348 <__malloc_unlock>
 800d184:	42a3      	cmp	r3, r4
 800d186:	d908      	bls.n	800d19a <_free_r+0x42>
 800d188:	6820      	ldr	r0, [r4, #0]
 800d18a:	1821      	adds	r1, r4, r0
 800d18c:	428b      	cmp	r3, r1
 800d18e:	bf01      	itttt	eq
 800d190:	6819      	ldreq	r1, [r3, #0]
 800d192:	685b      	ldreq	r3, [r3, #4]
 800d194:	1809      	addeq	r1, r1, r0
 800d196:	6021      	streq	r1, [r4, #0]
 800d198:	e7ed      	b.n	800d176 <_free_r+0x1e>
 800d19a:	461a      	mov	r2, r3
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	b10b      	cbz	r3, 800d1a4 <_free_r+0x4c>
 800d1a0:	42a3      	cmp	r3, r4
 800d1a2:	d9fa      	bls.n	800d19a <_free_r+0x42>
 800d1a4:	6811      	ldr	r1, [r2, #0]
 800d1a6:	1850      	adds	r0, r2, r1
 800d1a8:	42a0      	cmp	r0, r4
 800d1aa:	d10b      	bne.n	800d1c4 <_free_r+0x6c>
 800d1ac:	6820      	ldr	r0, [r4, #0]
 800d1ae:	4401      	add	r1, r0
 800d1b0:	1850      	adds	r0, r2, r1
 800d1b2:	4283      	cmp	r3, r0
 800d1b4:	6011      	str	r1, [r2, #0]
 800d1b6:	d1e0      	bne.n	800d17a <_free_r+0x22>
 800d1b8:	6818      	ldr	r0, [r3, #0]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	4408      	add	r0, r1
 800d1be:	6010      	str	r0, [r2, #0]
 800d1c0:	6053      	str	r3, [r2, #4]
 800d1c2:	e7da      	b.n	800d17a <_free_r+0x22>
 800d1c4:	d902      	bls.n	800d1cc <_free_r+0x74>
 800d1c6:	230c      	movs	r3, #12
 800d1c8:	602b      	str	r3, [r5, #0]
 800d1ca:	e7d6      	b.n	800d17a <_free_r+0x22>
 800d1cc:	6820      	ldr	r0, [r4, #0]
 800d1ce:	1821      	adds	r1, r4, r0
 800d1d0:	428b      	cmp	r3, r1
 800d1d2:	bf01      	itttt	eq
 800d1d4:	6819      	ldreq	r1, [r3, #0]
 800d1d6:	685b      	ldreq	r3, [r3, #4]
 800d1d8:	1809      	addeq	r1, r1, r0
 800d1da:	6021      	streq	r1, [r4, #0]
 800d1dc:	6063      	str	r3, [r4, #4]
 800d1de:	6054      	str	r4, [r2, #4]
 800d1e0:	e7cb      	b.n	800d17a <_free_r+0x22>
 800d1e2:	bd38      	pop	{r3, r4, r5, pc}
 800d1e4:	20005acc 	.word	0x20005acc

0800d1e8 <malloc>:
 800d1e8:	4b02      	ldr	r3, [pc, #8]	@ (800d1f4 <malloc+0xc>)
 800d1ea:	4601      	mov	r1, r0
 800d1ec:	6818      	ldr	r0, [r3, #0]
 800d1ee:	f000 b825 	b.w	800d23c <_malloc_r>
 800d1f2:	bf00      	nop
 800d1f4:	200005dc 	.word	0x200005dc

0800d1f8 <sbrk_aligned>:
 800d1f8:	b570      	push	{r4, r5, r6, lr}
 800d1fa:	4e0f      	ldr	r6, [pc, #60]	@ (800d238 <sbrk_aligned+0x40>)
 800d1fc:	460c      	mov	r4, r1
 800d1fe:	6831      	ldr	r1, [r6, #0]
 800d200:	4605      	mov	r5, r0
 800d202:	b911      	cbnz	r1, 800d20a <sbrk_aligned+0x12>
 800d204:	f001 ffb2 	bl	800f16c <_sbrk_r>
 800d208:	6030      	str	r0, [r6, #0]
 800d20a:	4621      	mov	r1, r4
 800d20c:	4628      	mov	r0, r5
 800d20e:	f001 ffad 	bl	800f16c <_sbrk_r>
 800d212:	1c43      	adds	r3, r0, #1
 800d214:	d103      	bne.n	800d21e <sbrk_aligned+0x26>
 800d216:	f04f 34ff 	mov.w	r4, #4294967295
 800d21a:	4620      	mov	r0, r4
 800d21c:	bd70      	pop	{r4, r5, r6, pc}
 800d21e:	1cc4      	adds	r4, r0, #3
 800d220:	f024 0403 	bic.w	r4, r4, #3
 800d224:	42a0      	cmp	r0, r4
 800d226:	d0f8      	beq.n	800d21a <sbrk_aligned+0x22>
 800d228:	1a21      	subs	r1, r4, r0
 800d22a:	4628      	mov	r0, r5
 800d22c:	f001 ff9e 	bl	800f16c <_sbrk_r>
 800d230:	3001      	adds	r0, #1
 800d232:	d1f2      	bne.n	800d21a <sbrk_aligned+0x22>
 800d234:	e7ef      	b.n	800d216 <sbrk_aligned+0x1e>
 800d236:	bf00      	nop
 800d238:	20005ac8 	.word	0x20005ac8

0800d23c <_malloc_r>:
 800d23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d240:	1ccd      	adds	r5, r1, #3
 800d242:	f025 0503 	bic.w	r5, r5, #3
 800d246:	3508      	adds	r5, #8
 800d248:	2d0c      	cmp	r5, #12
 800d24a:	bf38      	it	cc
 800d24c:	250c      	movcc	r5, #12
 800d24e:	2d00      	cmp	r5, #0
 800d250:	4606      	mov	r6, r0
 800d252:	db01      	blt.n	800d258 <_malloc_r+0x1c>
 800d254:	42a9      	cmp	r1, r5
 800d256:	d904      	bls.n	800d262 <_malloc_r+0x26>
 800d258:	230c      	movs	r3, #12
 800d25a:	6033      	str	r3, [r6, #0]
 800d25c:	2000      	movs	r0, #0
 800d25e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d262:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d338 <_malloc_r+0xfc>
 800d266:	f000 f869 	bl	800d33c <__malloc_lock>
 800d26a:	f8d8 3000 	ldr.w	r3, [r8]
 800d26e:	461c      	mov	r4, r3
 800d270:	bb44      	cbnz	r4, 800d2c4 <_malloc_r+0x88>
 800d272:	4629      	mov	r1, r5
 800d274:	4630      	mov	r0, r6
 800d276:	f7ff ffbf 	bl	800d1f8 <sbrk_aligned>
 800d27a:	1c43      	adds	r3, r0, #1
 800d27c:	4604      	mov	r4, r0
 800d27e:	d158      	bne.n	800d332 <_malloc_r+0xf6>
 800d280:	f8d8 4000 	ldr.w	r4, [r8]
 800d284:	4627      	mov	r7, r4
 800d286:	2f00      	cmp	r7, #0
 800d288:	d143      	bne.n	800d312 <_malloc_r+0xd6>
 800d28a:	2c00      	cmp	r4, #0
 800d28c:	d04b      	beq.n	800d326 <_malloc_r+0xea>
 800d28e:	6823      	ldr	r3, [r4, #0]
 800d290:	4639      	mov	r1, r7
 800d292:	4630      	mov	r0, r6
 800d294:	eb04 0903 	add.w	r9, r4, r3
 800d298:	f001 ff68 	bl	800f16c <_sbrk_r>
 800d29c:	4581      	cmp	r9, r0
 800d29e:	d142      	bne.n	800d326 <_malloc_r+0xea>
 800d2a0:	6821      	ldr	r1, [r4, #0]
 800d2a2:	4630      	mov	r0, r6
 800d2a4:	1a6d      	subs	r5, r5, r1
 800d2a6:	4629      	mov	r1, r5
 800d2a8:	f7ff ffa6 	bl	800d1f8 <sbrk_aligned>
 800d2ac:	3001      	adds	r0, #1
 800d2ae:	d03a      	beq.n	800d326 <_malloc_r+0xea>
 800d2b0:	6823      	ldr	r3, [r4, #0]
 800d2b2:	442b      	add	r3, r5
 800d2b4:	6023      	str	r3, [r4, #0]
 800d2b6:	f8d8 3000 	ldr.w	r3, [r8]
 800d2ba:	685a      	ldr	r2, [r3, #4]
 800d2bc:	bb62      	cbnz	r2, 800d318 <_malloc_r+0xdc>
 800d2be:	f8c8 7000 	str.w	r7, [r8]
 800d2c2:	e00f      	b.n	800d2e4 <_malloc_r+0xa8>
 800d2c4:	6822      	ldr	r2, [r4, #0]
 800d2c6:	1b52      	subs	r2, r2, r5
 800d2c8:	d420      	bmi.n	800d30c <_malloc_r+0xd0>
 800d2ca:	2a0b      	cmp	r2, #11
 800d2cc:	d917      	bls.n	800d2fe <_malloc_r+0xc2>
 800d2ce:	1961      	adds	r1, r4, r5
 800d2d0:	42a3      	cmp	r3, r4
 800d2d2:	6025      	str	r5, [r4, #0]
 800d2d4:	bf18      	it	ne
 800d2d6:	6059      	strne	r1, [r3, #4]
 800d2d8:	6863      	ldr	r3, [r4, #4]
 800d2da:	bf08      	it	eq
 800d2dc:	f8c8 1000 	streq.w	r1, [r8]
 800d2e0:	5162      	str	r2, [r4, r5]
 800d2e2:	604b      	str	r3, [r1, #4]
 800d2e4:	4630      	mov	r0, r6
 800d2e6:	f000 f82f 	bl	800d348 <__malloc_unlock>
 800d2ea:	f104 000b 	add.w	r0, r4, #11
 800d2ee:	1d23      	adds	r3, r4, #4
 800d2f0:	f020 0007 	bic.w	r0, r0, #7
 800d2f4:	1ac2      	subs	r2, r0, r3
 800d2f6:	bf1c      	itt	ne
 800d2f8:	1a1b      	subne	r3, r3, r0
 800d2fa:	50a3      	strne	r3, [r4, r2]
 800d2fc:	e7af      	b.n	800d25e <_malloc_r+0x22>
 800d2fe:	6862      	ldr	r2, [r4, #4]
 800d300:	42a3      	cmp	r3, r4
 800d302:	bf0c      	ite	eq
 800d304:	f8c8 2000 	streq.w	r2, [r8]
 800d308:	605a      	strne	r2, [r3, #4]
 800d30a:	e7eb      	b.n	800d2e4 <_malloc_r+0xa8>
 800d30c:	4623      	mov	r3, r4
 800d30e:	6864      	ldr	r4, [r4, #4]
 800d310:	e7ae      	b.n	800d270 <_malloc_r+0x34>
 800d312:	463c      	mov	r4, r7
 800d314:	687f      	ldr	r7, [r7, #4]
 800d316:	e7b6      	b.n	800d286 <_malloc_r+0x4a>
 800d318:	461a      	mov	r2, r3
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	42a3      	cmp	r3, r4
 800d31e:	d1fb      	bne.n	800d318 <_malloc_r+0xdc>
 800d320:	2300      	movs	r3, #0
 800d322:	6053      	str	r3, [r2, #4]
 800d324:	e7de      	b.n	800d2e4 <_malloc_r+0xa8>
 800d326:	230c      	movs	r3, #12
 800d328:	4630      	mov	r0, r6
 800d32a:	6033      	str	r3, [r6, #0]
 800d32c:	f000 f80c 	bl	800d348 <__malloc_unlock>
 800d330:	e794      	b.n	800d25c <_malloc_r+0x20>
 800d332:	6005      	str	r5, [r0, #0]
 800d334:	e7d6      	b.n	800d2e4 <_malloc_r+0xa8>
 800d336:	bf00      	nop
 800d338:	20005acc 	.word	0x20005acc

0800d33c <__malloc_lock>:
 800d33c:	4801      	ldr	r0, [pc, #4]	@ (800d344 <__malloc_lock+0x8>)
 800d33e:	f7ff b88a 	b.w	800c456 <__retarget_lock_acquire_recursive>
 800d342:	bf00      	nop
 800d344:	20005ac4 	.word	0x20005ac4

0800d348 <__malloc_unlock>:
 800d348:	4801      	ldr	r0, [pc, #4]	@ (800d350 <__malloc_unlock+0x8>)
 800d34a:	f7ff b885 	b.w	800c458 <__retarget_lock_release_recursive>
 800d34e:	bf00      	nop
 800d350:	20005ac4 	.word	0x20005ac4

0800d354 <_Balloc>:
 800d354:	b570      	push	{r4, r5, r6, lr}
 800d356:	69c6      	ldr	r6, [r0, #28]
 800d358:	4604      	mov	r4, r0
 800d35a:	460d      	mov	r5, r1
 800d35c:	b976      	cbnz	r6, 800d37c <_Balloc+0x28>
 800d35e:	2010      	movs	r0, #16
 800d360:	f7ff ff42 	bl	800d1e8 <malloc>
 800d364:	4602      	mov	r2, r0
 800d366:	61e0      	str	r0, [r4, #28]
 800d368:	b920      	cbnz	r0, 800d374 <_Balloc+0x20>
 800d36a:	216b      	movs	r1, #107	@ 0x6b
 800d36c:	4b17      	ldr	r3, [pc, #92]	@ (800d3cc <_Balloc+0x78>)
 800d36e:	4818      	ldr	r0, [pc, #96]	@ (800d3d0 <_Balloc+0x7c>)
 800d370:	f001 ff12 	bl	800f198 <__assert_func>
 800d374:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d378:	6006      	str	r6, [r0, #0]
 800d37a:	60c6      	str	r6, [r0, #12]
 800d37c:	69e6      	ldr	r6, [r4, #28]
 800d37e:	68f3      	ldr	r3, [r6, #12]
 800d380:	b183      	cbz	r3, 800d3a4 <_Balloc+0x50>
 800d382:	69e3      	ldr	r3, [r4, #28]
 800d384:	68db      	ldr	r3, [r3, #12]
 800d386:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d38a:	b9b8      	cbnz	r0, 800d3bc <_Balloc+0x68>
 800d38c:	2101      	movs	r1, #1
 800d38e:	fa01 f605 	lsl.w	r6, r1, r5
 800d392:	1d72      	adds	r2, r6, #5
 800d394:	4620      	mov	r0, r4
 800d396:	0092      	lsls	r2, r2, #2
 800d398:	f001 ff1c 	bl	800f1d4 <_calloc_r>
 800d39c:	b160      	cbz	r0, 800d3b8 <_Balloc+0x64>
 800d39e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d3a2:	e00e      	b.n	800d3c2 <_Balloc+0x6e>
 800d3a4:	2221      	movs	r2, #33	@ 0x21
 800d3a6:	2104      	movs	r1, #4
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	f001 ff13 	bl	800f1d4 <_calloc_r>
 800d3ae:	69e3      	ldr	r3, [r4, #28]
 800d3b0:	60f0      	str	r0, [r6, #12]
 800d3b2:	68db      	ldr	r3, [r3, #12]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d1e4      	bne.n	800d382 <_Balloc+0x2e>
 800d3b8:	2000      	movs	r0, #0
 800d3ba:	bd70      	pop	{r4, r5, r6, pc}
 800d3bc:	6802      	ldr	r2, [r0, #0]
 800d3be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d3c8:	e7f7      	b.n	800d3ba <_Balloc+0x66>
 800d3ca:	bf00      	nop
 800d3cc:	080105b6 	.word	0x080105b6
 800d3d0:	08010636 	.word	0x08010636

0800d3d4 <_Bfree>:
 800d3d4:	b570      	push	{r4, r5, r6, lr}
 800d3d6:	69c6      	ldr	r6, [r0, #28]
 800d3d8:	4605      	mov	r5, r0
 800d3da:	460c      	mov	r4, r1
 800d3dc:	b976      	cbnz	r6, 800d3fc <_Bfree+0x28>
 800d3de:	2010      	movs	r0, #16
 800d3e0:	f7ff ff02 	bl	800d1e8 <malloc>
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	61e8      	str	r0, [r5, #28]
 800d3e8:	b920      	cbnz	r0, 800d3f4 <_Bfree+0x20>
 800d3ea:	218f      	movs	r1, #143	@ 0x8f
 800d3ec:	4b08      	ldr	r3, [pc, #32]	@ (800d410 <_Bfree+0x3c>)
 800d3ee:	4809      	ldr	r0, [pc, #36]	@ (800d414 <_Bfree+0x40>)
 800d3f0:	f001 fed2 	bl	800f198 <__assert_func>
 800d3f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3f8:	6006      	str	r6, [r0, #0]
 800d3fa:	60c6      	str	r6, [r0, #12]
 800d3fc:	b13c      	cbz	r4, 800d40e <_Bfree+0x3a>
 800d3fe:	69eb      	ldr	r3, [r5, #28]
 800d400:	6862      	ldr	r2, [r4, #4]
 800d402:	68db      	ldr	r3, [r3, #12]
 800d404:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d408:	6021      	str	r1, [r4, #0]
 800d40a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d40e:	bd70      	pop	{r4, r5, r6, pc}
 800d410:	080105b6 	.word	0x080105b6
 800d414:	08010636 	.word	0x08010636

0800d418 <__multadd>:
 800d418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d41c:	4607      	mov	r7, r0
 800d41e:	460c      	mov	r4, r1
 800d420:	461e      	mov	r6, r3
 800d422:	2000      	movs	r0, #0
 800d424:	690d      	ldr	r5, [r1, #16]
 800d426:	f101 0c14 	add.w	ip, r1, #20
 800d42a:	f8dc 3000 	ldr.w	r3, [ip]
 800d42e:	3001      	adds	r0, #1
 800d430:	b299      	uxth	r1, r3
 800d432:	fb02 6101 	mla	r1, r2, r1, r6
 800d436:	0c1e      	lsrs	r6, r3, #16
 800d438:	0c0b      	lsrs	r3, r1, #16
 800d43a:	fb02 3306 	mla	r3, r2, r6, r3
 800d43e:	b289      	uxth	r1, r1
 800d440:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d444:	4285      	cmp	r5, r0
 800d446:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d44a:	f84c 1b04 	str.w	r1, [ip], #4
 800d44e:	dcec      	bgt.n	800d42a <__multadd+0x12>
 800d450:	b30e      	cbz	r6, 800d496 <__multadd+0x7e>
 800d452:	68a3      	ldr	r3, [r4, #8]
 800d454:	42ab      	cmp	r3, r5
 800d456:	dc19      	bgt.n	800d48c <__multadd+0x74>
 800d458:	6861      	ldr	r1, [r4, #4]
 800d45a:	4638      	mov	r0, r7
 800d45c:	3101      	adds	r1, #1
 800d45e:	f7ff ff79 	bl	800d354 <_Balloc>
 800d462:	4680      	mov	r8, r0
 800d464:	b928      	cbnz	r0, 800d472 <__multadd+0x5a>
 800d466:	4602      	mov	r2, r0
 800d468:	21ba      	movs	r1, #186	@ 0xba
 800d46a:	4b0c      	ldr	r3, [pc, #48]	@ (800d49c <__multadd+0x84>)
 800d46c:	480c      	ldr	r0, [pc, #48]	@ (800d4a0 <__multadd+0x88>)
 800d46e:	f001 fe93 	bl	800f198 <__assert_func>
 800d472:	6922      	ldr	r2, [r4, #16]
 800d474:	f104 010c 	add.w	r1, r4, #12
 800d478:	3202      	adds	r2, #2
 800d47a:	0092      	lsls	r2, r2, #2
 800d47c:	300c      	adds	r0, #12
 800d47e:	f7fe fffa 	bl	800c476 <memcpy>
 800d482:	4621      	mov	r1, r4
 800d484:	4638      	mov	r0, r7
 800d486:	f7ff ffa5 	bl	800d3d4 <_Bfree>
 800d48a:	4644      	mov	r4, r8
 800d48c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d490:	3501      	adds	r5, #1
 800d492:	615e      	str	r6, [r3, #20]
 800d494:	6125      	str	r5, [r4, #16]
 800d496:	4620      	mov	r0, r4
 800d498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d49c:	08010625 	.word	0x08010625
 800d4a0:	08010636 	.word	0x08010636

0800d4a4 <__s2b>:
 800d4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4a8:	4615      	mov	r5, r2
 800d4aa:	2209      	movs	r2, #9
 800d4ac:	461f      	mov	r7, r3
 800d4ae:	3308      	adds	r3, #8
 800d4b0:	460c      	mov	r4, r1
 800d4b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d4b6:	4606      	mov	r6, r0
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	db09      	blt.n	800d4d4 <__s2b+0x30>
 800d4c0:	4630      	mov	r0, r6
 800d4c2:	f7ff ff47 	bl	800d354 <_Balloc>
 800d4c6:	b940      	cbnz	r0, 800d4da <__s2b+0x36>
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	21d3      	movs	r1, #211	@ 0xd3
 800d4cc:	4b18      	ldr	r3, [pc, #96]	@ (800d530 <__s2b+0x8c>)
 800d4ce:	4819      	ldr	r0, [pc, #100]	@ (800d534 <__s2b+0x90>)
 800d4d0:	f001 fe62 	bl	800f198 <__assert_func>
 800d4d4:	0052      	lsls	r2, r2, #1
 800d4d6:	3101      	adds	r1, #1
 800d4d8:	e7f0      	b.n	800d4bc <__s2b+0x18>
 800d4da:	9b08      	ldr	r3, [sp, #32]
 800d4dc:	2d09      	cmp	r5, #9
 800d4de:	6143      	str	r3, [r0, #20]
 800d4e0:	f04f 0301 	mov.w	r3, #1
 800d4e4:	6103      	str	r3, [r0, #16]
 800d4e6:	dd16      	ble.n	800d516 <__s2b+0x72>
 800d4e8:	f104 0909 	add.w	r9, r4, #9
 800d4ec:	46c8      	mov	r8, r9
 800d4ee:	442c      	add	r4, r5
 800d4f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d4f4:	4601      	mov	r1, r0
 800d4f6:	220a      	movs	r2, #10
 800d4f8:	4630      	mov	r0, r6
 800d4fa:	3b30      	subs	r3, #48	@ 0x30
 800d4fc:	f7ff ff8c 	bl	800d418 <__multadd>
 800d500:	45a0      	cmp	r8, r4
 800d502:	d1f5      	bne.n	800d4f0 <__s2b+0x4c>
 800d504:	f1a5 0408 	sub.w	r4, r5, #8
 800d508:	444c      	add	r4, r9
 800d50a:	1b2d      	subs	r5, r5, r4
 800d50c:	1963      	adds	r3, r4, r5
 800d50e:	42bb      	cmp	r3, r7
 800d510:	db04      	blt.n	800d51c <__s2b+0x78>
 800d512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d516:	2509      	movs	r5, #9
 800d518:	340a      	adds	r4, #10
 800d51a:	e7f6      	b.n	800d50a <__s2b+0x66>
 800d51c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d520:	4601      	mov	r1, r0
 800d522:	220a      	movs	r2, #10
 800d524:	4630      	mov	r0, r6
 800d526:	3b30      	subs	r3, #48	@ 0x30
 800d528:	f7ff ff76 	bl	800d418 <__multadd>
 800d52c:	e7ee      	b.n	800d50c <__s2b+0x68>
 800d52e:	bf00      	nop
 800d530:	08010625 	.word	0x08010625
 800d534:	08010636 	.word	0x08010636

0800d538 <__hi0bits>:
 800d538:	4603      	mov	r3, r0
 800d53a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d53e:	bf3a      	itte	cc
 800d540:	0403      	lslcc	r3, r0, #16
 800d542:	2010      	movcc	r0, #16
 800d544:	2000      	movcs	r0, #0
 800d546:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d54a:	bf3c      	itt	cc
 800d54c:	021b      	lslcc	r3, r3, #8
 800d54e:	3008      	addcc	r0, #8
 800d550:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d554:	bf3c      	itt	cc
 800d556:	011b      	lslcc	r3, r3, #4
 800d558:	3004      	addcc	r0, #4
 800d55a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d55e:	bf3c      	itt	cc
 800d560:	009b      	lslcc	r3, r3, #2
 800d562:	3002      	addcc	r0, #2
 800d564:	2b00      	cmp	r3, #0
 800d566:	db05      	blt.n	800d574 <__hi0bits+0x3c>
 800d568:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d56c:	f100 0001 	add.w	r0, r0, #1
 800d570:	bf08      	it	eq
 800d572:	2020      	moveq	r0, #32
 800d574:	4770      	bx	lr

0800d576 <__lo0bits>:
 800d576:	6803      	ldr	r3, [r0, #0]
 800d578:	4602      	mov	r2, r0
 800d57a:	f013 0007 	ands.w	r0, r3, #7
 800d57e:	d00b      	beq.n	800d598 <__lo0bits+0x22>
 800d580:	07d9      	lsls	r1, r3, #31
 800d582:	d421      	bmi.n	800d5c8 <__lo0bits+0x52>
 800d584:	0798      	lsls	r0, r3, #30
 800d586:	bf49      	itett	mi
 800d588:	085b      	lsrmi	r3, r3, #1
 800d58a:	089b      	lsrpl	r3, r3, #2
 800d58c:	2001      	movmi	r0, #1
 800d58e:	6013      	strmi	r3, [r2, #0]
 800d590:	bf5c      	itt	pl
 800d592:	2002      	movpl	r0, #2
 800d594:	6013      	strpl	r3, [r2, #0]
 800d596:	4770      	bx	lr
 800d598:	b299      	uxth	r1, r3
 800d59a:	b909      	cbnz	r1, 800d5a0 <__lo0bits+0x2a>
 800d59c:	2010      	movs	r0, #16
 800d59e:	0c1b      	lsrs	r3, r3, #16
 800d5a0:	b2d9      	uxtb	r1, r3
 800d5a2:	b909      	cbnz	r1, 800d5a8 <__lo0bits+0x32>
 800d5a4:	3008      	adds	r0, #8
 800d5a6:	0a1b      	lsrs	r3, r3, #8
 800d5a8:	0719      	lsls	r1, r3, #28
 800d5aa:	bf04      	itt	eq
 800d5ac:	091b      	lsreq	r3, r3, #4
 800d5ae:	3004      	addeq	r0, #4
 800d5b0:	0799      	lsls	r1, r3, #30
 800d5b2:	bf04      	itt	eq
 800d5b4:	089b      	lsreq	r3, r3, #2
 800d5b6:	3002      	addeq	r0, #2
 800d5b8:	07d9      	lsls	r1, r3, #31
 800d5ba:	d403      	bmi.n	800d5c4 <__lo0bits+0x4e>
 800d5bc:	085b      	lsrs	r3, r3, #1
 800d5be:	f100 0001 	add.w	r0, r0, #1
 800d5c2:	d003      	beq.n	800d5cc <__lo0bits+0x56>
 800d5c4:	6013      	str	r3, [r2, #0]
 800d5c6:	4770      	bx	lr
 800d5c8:	2000      	movs	r0, #0
 800d5ca:	4770      	bx	lr
 800d5cc:	2020      	movs	r0, #32
 800d5ce:	4770      	bx	lr

0800d5d0 <__i2b>:
 800d5d0:	b510      	push	{r4, lr}
 800d5d2:	460c      	mov	r4, r1
 800d5d4:	2101      	movs	r1, #1
 800d5d6:	f7ff febd 	bl	800d354 <_Balloc>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	b928      	cbnz	r0, 800d5ea <__i2b+0x1a>
 800d5de:	f240 1145 	movw	r1, #325	@ 0x145
 800d5e2:	4b04      	ldr	r3, [pc, #16]	@ (800d5f4 <__i2b+0x24>)
 800d5e4:	4804      	ldr	r0, [pc, #16]	@ (800d5f8 <__i2b+0x28>)
 800d5e6:	f001 fdd7 	bl	800f198 <__assert_func>
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	6144      	str	r4, [r0, #20]
 800d5ee:	6103      	str	r3, [r0, #16]
 800d5f0:	bd10      	pop	{r4, pc}
 800d5f2:	bf00      	nop
 800d5f4:	08010625 	.word	0x08010625
 800d5f8:	08010636 	.word	0x08010636

0800d5fc <__multiply>:
 800d5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d600:	4617      	mov	r7, r2
 800d602:	690a      	ldr	r2, [r1, #16]
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	4689      	mov	r9, r1
 800d608:	429a      	cmp	r2, r3
 800d60a:	bfa2      	ittt	ge
 800d60c:	463b      	movge	r3, r7
 800d60e:	460f      	movge	r7, r1
 800d610:	4699      	movge	r9, r3
 800d612:	693d      	ldr	r5, [r7, #16]
 800d614:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	6879      	ldr	r1, [r7, #4]
 800d61c:	eb05 060a 	add.w	r6, r5, sl
 800d620:	42b3      	cmp	r3, r6
 800d622:	b085      	sub	sp, #20
 800d624:	bfb8      	it	lt
 800d626:	3101      	addlt	r1, #1
 800d628:	f7ff fe94 	bl	800d354 <_Balloc>
 800d62c:	b930      	cbnz	r0, 800d63c <__multiply+0x40>
 800d62e:	4602      	mov	r2, r0
 800d630:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d634:	4b40      	ldr	r3, [pc, #256]	@ (800d738 <__multiply+0x13c>)
 800d636:	4841      	ldr	r0, [pc, #260]	@ (800d73c <__multiply+0x140>)
 800d638:	f001 fdae 	bl	800f198 <__assert_func>
 800d63c:	f100 0414 	add.w	r4, r0, #20
 800d640:	4623      	mov	r3, r4
 800d642:	2200      	movs	r2, #0
 800d644:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d648:	4573      	cmp	r3, lr
 800d64a:	d320      	bcc.n	800d68e <__multiply+0x92>
 800d64c:	f107 0814 	add.w	r8, r7, #20
 800d650:	f109 0114 	add.w	r1, r9, #20
 800d654:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d658:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d65c:	9302      	str	r3, [sp, #8]
 800d65e:	1beb      	subs	r3, r5, r7
 800d660:	3b15      	subs	r3, #21
 800d662:	f023 0303 	bic.w	r3, r3, #3
 800d666:	3304      	adds	r3, #4
 800d668:	3715      	adds	r7, #21
 800d66a:	42bd      	cmp	r5, r7
 800d66c:	bf38      	it	cc
 800d66e:	2304      	movcc	r3, #4
 800d670:	9301      	str	r3, [sp, #4]
 800d672:	9b02      	ldr	r3, [sp, #8]
 800d674:	9103      	str	r1, [sp, #12]
 800d676:	428b      	cmp	r3, r1
 800d678:	d80c      	bhi.n	800d694 <__multiply+0x98>
 800d67a:	2e00      	cmp	r6, #0
 800d67c:	dd03      	ble.n	800d686 <__multiply+0x8a>
 800d67e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d682:	2b00      	cmp	r3, #0
 800d684:	d055      	beq.n	800d732 <__multiply+0x136>
 800d686:	6106      	str	r6, [r0, #16]
 800d688:	b005      	add	sp, #20
 800d68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d68e:	f843 2b04 	str.w	r2, [r3], #4
 800d692:	e7d9      	b.n	800d648 <__multiply+0x4c>
 800d694:	f8b1 a000 	ldrh.w	sl, [r1]
 800d698:	f1ba 0f00 	cmp.w	sl, #0
 800d69c:	d01f      	beq.n	800d6de <__multiply+0xe2>
 800d69e:	46c4      	mov	ip, r8
 800d6a0:	46a1      	mov	r9, r4
 800d6a2:	2700      	movs	r7, #0
 800d6a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d6a8:	f8d9 3000 	ldr.w	r3, [r9]
 800d6ac:	fa1f fb82 	uxth.w	fp, r2
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	fb0a 330b 	mla	r3, sl, fp, r3
 800d6b6:	443b      	add	r3, r7
 800d6b8:	f8d9 7000 	ldr.w	r7, [r9]
 800d6bc:	0c12      	lsrs	r2, r2, #16
 800d6be:	0c3f      	lsrs	r7, r7, #16
 800d6c0:	fb0a 7202 	mla	r2, sl, r2, r7
 800d6c4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6ce:	4565      	cmp	r5, ip
 800d6d0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d6d4:	f849 3b04 	str.w	r3, [r9], #4
 800d6d8:	d8e4      	bhi.n	800d6a4 <__multiply+0xa8>
 800d6da:	9b01      	ldr	r3, [sp, #4]
 800d6dc:	50e7      	str	r7, [r4, r3]
 800d6de:	9b03      	ldr	r3, [sp, #12]
 800d6e0:	3104      	adds	r1, #4
 800d6e2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d6e6:	f1b9 0f00 	cmp.w	r9, #0
 800d6ea:	d020      	beq.n	800d72e <__multiply+0x132>
 800d6ec:	4647      	mov	r7, r8
 800d6ee:	46a4      	mov	ip, r4
 800d6f0:	f04f 0a00 	mov.w	sl, #0
 800d6f4:	6823      	ldr	r3, [r4, #0]
 800d6f6:	f8b7 b000 	ldrh.w	fp, [r7]
 800d6fa:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	fb09 220b 	mla	r2, r9, fp, r2
 800d704:	4452      	add	r2, sl
 800d706:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d70a:	f84c 3b04 	str.w	r3, [ip], #4
 800d70e:	f857 3b04 	ldr.w	r3, [r7], #4
 800d712:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d716:	f8bc 3000 	ldrh.w	r3, [ip]
 800d71a:	42bd      	cmp	r5, r7
 800d71c:	fb09 330a 	mla	r3, r9, sl, r3
 800d720:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d724:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d728:	d8e5      	bhi.n	800d6f6 <__multiply+0xfa>
 800d72a:	9a01      	ldr	r2, [sp, #4]
 800d72c:	50a3      	str	r3, [r4, r2]
 800d72e:	3404      	adds	r4, #4
 800d730:	e79f      	b.n	800d672 <__multiply+0x76>
 800d732:	3e01      	subs	r6, #1
 800d734:	e7a1      	b.n	800d67a <__multiply+0x7e>
 800d736:	bf00      	nop
 800d738:	08010625 	.word	0x08010625
 800d73c:	08010636 	.word	0x08010636

0800d740 <__pow5mult>:
 800d740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d744:	4615      	mov	r5, r2
 800d746:	f012 0203 	ands.w	r2, r2, #3
 800d74a:	4607      	mov	r7, r0
 800d74c:	460e      	mov	r6, r1
 800d74e:	d007      	beq.n	800d760 <__pow5mult+0x20>
 800d750:	4c25      	ldr	r4, [pc, #148]	@ (800d7e8 <__pow5mult+0xa8>)
 800d752:	3a01      	subs	r2, #1
 800d754:	2300      	movs	r3, #0
 800d756:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d75a:	f7ff fe5d 	bl	800d418 <__multadd>
 800d75e:	4606      	mov	r6, r0
 800d760:	10ad      	asrs	r5, r5, #2
 800d762:	d03d      	beq.n	800d7e0 <__pow5mult+0xa0>
 800d764:	69fc      	ldr	r4, [r7, #28]
 800d766:	b97c      	cbnz	r4, 800d788 <__pow5mult+0x48>
 800d768:	2010      	movs	r0, #16
 800d76a:	f7ff fd3d 	bl	800d1e8 <malloc>
 800d76e:	4602      	mov	r2, r0
 800d770:	61f8      	str	r0, [r7, #28]
 800d772:	b928      	cbnz	r0, 800d780 <__pow5mult+0x40>
 800d774:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d778:	4b1c      	ldr	r3, [pc, #112]	@ (800d7ec <__pow5mult+0xac>)
 800d77a:	481d      	ldr	r0, [pc, #116]	@ (800d7f0 <__pow5mult+0xb0>)
 800d77c:	f001 fd0c 	bl	800f198 <__assert_func>
 800d780:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d784:	6004      	str	r4, [r0, #0]
 800d786:	60c4      	str	r4, [r0, #12]
 800d788:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d78c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d790:	b94c      	cbnz	r4, 800d7a6 <__pow5mult+0x66>
 800d792:	f240 2171 	movw	r1, #625	@ 0x271
 800d796:	4638      	mov	r0, r7
 800d798:	f7ff ff1a 	bl	800d5d0 <__i2b>
 800d79c:	2300      	movs	r3, #0
 800d79e:	4604      	mov	r4, r0
 800d7a0:	f8c8 0008 	str.w	r0, [r8, #8]
 800d7a4:	6003      	str	r3, [r0, #0]
 800d7a6:	f04f 0900 	mov.w	r9, #0
 800d7aa:	07eb      	lsls	r3, r5, #31
 800d7ac:	d50a      	bpl.n	800d7c4 <__pow5mult+0x84>
 800d7ae:	4631      	mov	r1, r6
 800d7b0:	4622      	mov	r2, r4
 800d7b2:	4638      	mov	r0, r7
 800d7b4:	f7ff ff22 	bl	800d5fc <__multiply>
 800d7b8:	4680      	mov	r8, r0
 800d7ba:	4631      	mov	r1, r6
 800d7bc:	4638      	mov	r0, r7
 800d7be:	f7ff fe09 	bl	800d3d4 <_Bfree>
 800d7c2:	4646      	mov	r6, r8
 800d7c4:	106d      	asrs	r5, r5, #1
 800d7c6:	d00b      	beq.n	800d7e0 <__pow5mult+0xa0>
 800d7c8:	6820      	ldr	r0, [r4, #0]
 800d7ca:	b938      	cbnz	r0, 800d7dc <__pow5mult+0x9c>
 800d7cc:	4622      	mov	r2, r4
 800d7ce:	4621      	mov	r1, r4
 800d7d0:	4638      	mov	r0, r7
 800d7d2:	f7ff ff13 	bl	800d5fc <__multiply>
 800d7d6:	6020      	str	r0, [r4, #0]
 800d7d8:	f8c0 9000 	str.w	r9, [r0]
 800d7dc:	4604      	mov	r4, r0
 800d7de:	e7e4      	b.n	800d7aa <__pow5mult+0x6a>
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7e6:	bf00      	nop
 800d7e8:	08010748 	.word	0x08010748
 800d7ec:	080105b6 	.word	0x080105b6
 800d7f0:	08010636 	.word	0x08010636

0800d7f4 <__lshift>:
 800d7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7f8:	460c      	mov	r4, r1
 800d7fa:	4607      	mov	r7, r0
 800d7fc:	4691      	mov	r9, r2
 800d7fe:	6923      	ldr	r3, [r4, #16]
 800d800:	6849      	ldr	r1, [r1, #4]
 800d802:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d806:	68a3      	ldr	r3, [r4, #8]
 800d808:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d80c:	f108 0601 	add.w	r6, r8, #1
 800d810:	42b3      	cmp	r3, r6
 800d812:	db0b      	blt.n	800d82c <__lshift+0x38>
 800d814:	4638      	mov	r0, r7
 800d816:	f7ff fd9d 	bl	800d354 <_Balloc>
 800d81a:	4605      	mov	r5, r0
 800d81c:	b948      	cbnz	r0, 800d832 <__lshift+0x3e>
 800d81e:	4602      	mov	r2, r0
 800d820:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d824:	4b27      	ldr	r3, [pc, #156]	@ (800d8c4 <__lshift+0xd0>)
 800d826:	4828      	ldr	r0, [pc, #160]	@ (800d8c8 <__lshift+0xd4>)
 800d828:	f001 fcb6 	bl	800f198 <__assert_func>
 800d82c:	3101      	adds	r1, #1
 800d82e:	005b      	lsls	r3, r3, #1
 800d830:	e7ee      	b.n	800d810 <__lshift+0x1c>
 800d832:	2300      	movs	r3, #0
 800d834:	f100 0114 	add.w	r1, r0, #20
 800d838:	f100 0210 	add.w	r2, r0, #16
 800d83c:	4618      	mov	r0, r3
 800d83e:	4553      	cmp	r3, sl
 800d840:	db33      	blt.n	800d8aa <__lshift+0xb6>
 800d842:	6920      	ldr	r0, [r4, #16]
 800d844:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d848:	f104 0314 	add.w	r3, r4, #20
 800d84c:	f019 091f 	ands.w	r9, r9, #31
 800d850:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d854:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d858:	d02b      	beq.n	800d8b2 <__lshift+0xbe>
 800d85a:	468a      	mov	sl, r1
 800d85c:	2200      	movs	r2, #0
 800d85e:	f1c9 0e20 	rsb	lr, r9, #32
 800d862:	6818      	ldr	r0, [r3, #0]
 800d864:	fa00 f009 	lsl.w	r0, r0, r9
 800d868:	4310      	orrs	r0, r2
 800d86a:	f84a 0b04 	str.w	r0, [sl], #4
 800d86e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d872:	459c      	cmp	ip, r3
 800d874:	fa22 f20e 	lsr.w	r2, r2, lr
 800d878:	d8f3      	bhi.n	800d862 <__lshift+0x6e>
 800d87a:	ebac 0304 	sub.w	r3, ip, r4
 800d87e:	3b15      	subs	r3, #21
 800d880:	f023 0303 	bic.w	r3, r3, #3
 800d884:	3304      	adds	r3, #4
 800d886:	f104 0015 	add.w	r0, r4, #21
 800d88a:	4560      	cmp	r0, ip
 800d88c:	bf88      	it	hi
 800d88e:	2304      	movhi	r3, #4
 800d890:	50ca      	str	r2, [r1, r3]
 800d892:	b10a      	cbz	r2, 800d898 <__lshift+0xa4>
 800d894:	f108 0602 	add.w	r6, r8, #2
 800d898:	3e01      	subs	r6, #1
 800d89a:	4638      	mov	r0, r7
 800d89c:	4621      	mov	r1, r4
 800d89e:	612e      	str	r6, [r5, #16]
 800d8a0:	f7ff fd98 	bl	800d3d4 <_Bfree>
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	e7c5      	b.n	800d83e <__lshift+0x4a>
 800d8b2:	3904      	subs	r1, #4
 800d8b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8b8:	459c      	cmp	ip, r3
 800d8ba:	f841 2f04 	str.w	r2, [r1, #4]!
 800d8be:	d8f9      	bhi.n	800d8b4 <__lshift+0xc0>
 800d8c0:	e7ea      	b.n	800d898 <__lshift+0xa4>
 800d8c2:	bf00      	nop
 800d8c4:	08010625 	.word	0x08010625
 800d8c8:	08010636 	.word	0x08010636

0800d8cc <__mcmp>:
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	690a      	ldr	r2, [r1, #16]
 800d8d0:	6900      	ldr	r0, [r0, #16]
 800d8d2:	b530      	push	{r4, r5, lr}
 800d8d4:	1a80      	subs	r0, r0, r2
 800d8d6:	d10e      	bne.n	800d8f6 <__mcmp+0x2a>
 800d8d8:	3314      	adds	r3, #20
 800d8da:	3114      	adds	r1, #20
 800d8dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d8e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d8e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d8e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d8ec:	4295      	cmp	r5, r2
 800d8ee:	d003      	beq.n	800d8f8 <__mcmp+0x2c>
 800d8f0:	d205      	bcs.n	800d8fe <__mcmp+0x32>
 800d8f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f6:	bd30      	pop	{r4, r5, pc}
 800d8f8:	42a3      	cmp	r3, r4
 800d8fa:	d3f3      	bcc.n	800d8e4 <__mcmp+0x18>
 800d8fc:	e7fb      	b.n	800d8f6 <__mcmp+0x2a>
 800d8fe:	2001      	movs	r0, #1
 800d900:	e7f9      	b.n	800d8f6 <__mcmp+0x2a>
	...

0800d904 <__mdiff>:
 800d904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d908:	4689      	mov	r9, r1
 800d90a:	4606      	mov	r6, r0
 800d90c:	4611      	mov	r1, r2
 800d90e:	4648      	mov	r0, r9
 800d910:	4614      	mov	r4, r2
 800d912:	f7ff ffdb 	bl	800d8cc <__mcmp>
 800d916:	1e05      	subs	r5, r0, #0
 800d918:	d112      	bne.n	800d940 <__mdiff+0x3c>
 800d91a:	4629      	mov	r1, r5
 800d91c:	4630      	mov	r0, r6
 800d91e:	f7ff fd19 	bl	800d354 <_Balloc>
 800d922:	4602      	mov	r2, r0
 800d924:	b928      	cbnz	r0, 800d932 <__mdiff+0x2e>
 800d926:	f240 2137 	movw	r1, #567	@ 0x237
 800d92a:	4b3e      	ldr	r3, [pc, #248]	@ (800da24 <__mdiff+0x120>)
 800d92c:	483e      	ldr	r0, [pc, #248]	@ (800da28 <__mdiff+0x124>)
 800d92e:	f001 fc33 	bl	800f198 <__assert_func>
 800d932:	2301      	movs	r3, #1
 800d934:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d938:	4610      	mov	r0, r2
 800d93a:	b003      	add	sp, #12
 800d93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d940:	bfbc      	itt	lt
 800d942:	464b      	movlt	r3, r9
 800d944:	46a1      	movlt	r9, r4
 800d946:	4630      	mov	r0, r6
 800d948:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d94c:	bfba      	itte	lt
 800d94e:	461c      	movlt	r4, r3
 800d950:	2501      	movlt	r5, #1
 800d952:	2500      	movge	r5, #0
 800d954:	f7ff fcfe 	bl	800d354 <_Balloc>
 800d958:	4602      	mov	r2, r0
 800d95a:	b918      	cbnz	r0, 800d964 <__mdiff+0x60>
 800d95c:	f240 2145 	movw	r1, #581	@ 0x245
 800d960:	4b30      	ldr	r3, [pc, #192]	@ (800da24 <__mdiff+0x120>)
 800d962:	e7e3      	b.n	800d92c <__mdiff+0x28>
 800d964:	f100 0b14 	add.w	fp, r0, #20
 800d968:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d96c:	f109 0310 	add.w	r3, r9, #16
 800d970:	60c5      	str	r5, [r0, #12]
 800d972:	f04f 0c00 	mov.w	ip, #0
 800d976:	f109 0514 	add.w	r5, r9, #20
 800d97a:	46d9      	mov	r9, fp
 800d97c:	6926      	ldr	r6, [r4, #16]
 800d97e:	f104 0e14 	add.w	lr, r4, #20
 800d982:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d986:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d98a:	9301      	str	r3, [sp, #4]
 800d98c:	9b01      	ldr	r3, [sp, #4]
 800d98e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d992:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d996:	b281      	uxth	r1, r0
 800d998:	9301      	str	r3, [sp, #4]
 800d99a:	fa1f f38a 	uxth.w	r3, sl
 800d99e:	1a5b      	subs	r3, r3, r1
 800d9a0:	0c00      	lsrs	r0, r0, #16
 800d9a2:	4463      	add	r3, ip
 800d9a4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d9a8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d9b2:	4576      	cmp	r6, lr
 800d9b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d9b8:	f849 3b04 	str.w	r3, [r9], #4
 800d9bc:	d8e6      	bhi.n	800d98c <__mdiff+0x88>
 800d9be:	1b33      	subs	r3, r6, r4
 800d9c0:	3b15      	subs	r3, #21
 800d9c2:	f023 0303 	bic.w	r3, r3, #3
 800d9c6:	3415      	adds	r4, #21
 800d9c8:	3304      	adds	r3, #4
 800d9ca:	42a6      	cmp	r6, r4
 800d9cc:	bf38      	it	cc
 800d9ce:	2304      	movcc	r3, #4
 800d9d0:	441d      	add	r5, r3
 800d9d2:	445b      	add	r3, fp
 800d9d4:	461e      	mov	r6, r3
 800d9d6:	462c      	mov	r4, r5
 800d9d8:	4544      	cmp	r4, r8
 800d9da:	d30e      	bcc.n	800d9fa <__mdiff+0xf6>
 800d9dc:	f108 0103 	add.w	r1, r8, #3
 800d9e0:	1b49      	subs	r1, r1, r5
 800d9e2:	f021 0103 	bic.w	r1, r1, #3
 800d9e6:	3d03      	subs	r5, #3
 800d9e8:	45a8      	cmp	r8, r5
 800d9ea:	bf38      	it	cc
 800d9ec:	2100      	movcc	r1, #0
 800d9ee:	440b      	add	r3, r1
 800d9f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d9f4:	b199      	cbz	r1, 800da1e <__mdiff+0x11a>
 800d9f6:	6117      	str	r7, [r2, #16]
 800d9f8:	e79e      	b.n	800d938 <__mdiff+0x34>
 800d9fa:	46e6      	mov	lr, ip
 800d9fc:	f854 1b04 	ldr.w	r1, [r4], #4
 800da00:	fa1f fc81 	uxth.w	ip, r1
 800da04:	44f4      	add	ip, lr
 800da06:	0c08      	lsrs	r0, r1, #16
 800da08:	4471      	add	r1, lr
 800da0a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800da0e:	b289      	uxth	r1, r1
 800da10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800da14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800da18:	f846 1b04 	str.w	r1, [r6], #4
 800da1c:	e7dc      	b.n	800d9d8 <__mdiff+0xd4>
 800da1e:	3f01      	subs	r7, #1
 800da20:	e7e6      	b.n	800d9f0 <__mdiff+0xec>
 800da22:	bf00      	nop
 800da24:	08010625 	.word	0x08010625
 800da28:	08010636 	.word	0x08010636

0800da2c <__ulp>:
 800da2c:	4b0e      	ldr	r3, [pc, #56]	@ (800da68 <__ulp+0x3c>)
 800da2e:	400b      	ands	r3, r1
 800da30:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800da34:	2b00      	cmp	r3, #0
 800da36:	dc08      	bgt.n	800da4a <__ulp+0x1e>
 800da38:	425b      	negs	r3, r3
 800da3a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800da3e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800da42:	da04      	bge.n	800da4e <__ulp+0x22>
 800da44:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800da48:	4113      	asrs	r3, r2
 800da4a:	2200      	movs	r2, #0
 800da4c:	e008      	b.n	800da60 <__ulp+0x34>
 800da4e:	f1a2 0314 	sub.w	r3, r2, #20
 800da52:	2b1e      	cmp	r3, #30
 800da54:	bfd6      	itet	le
 800da56:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800da5a:	2201      	movgt	r2, #1
 800da5c:	40da      	lsrle	r2, r3
 800da5e:	2300      	movs	r3, #0
 800da60:	4619      	mov	r1, r3
 800da62:	4610      	mov	r0, r2
 800da64:	4770      	bx	lr
 800da66:	bf00      	nop
 800da68:	7ff00000 	.word	0x7ff00000

0800da6c <__b2d>:
 800da6c:	6902      	ldr	r2, [r0, #16]
 800da6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da70:	f100 0614 	add.w	r6, r0, #20
 800da74:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800da78:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800da7c:	4f1e      	ldr	r7, [pc, #120]	@ (800daf8 <__b2d+0x8c>)
 800da7e:	4620      	mov	r0, r4
 800da80:	f7ff fd5a 	bl	800d538 <__hi0bits>
 800da84:	4603      	mov	r3, r0
 800da86:	f1c0 0020 	rsb	r0, r0, #32
 800da8a:	2b0a      	cmp	r3, #10
 800da8c:	f1a2 0504 	sub.w	r5, r2, #4
 800da90:	6008      	str	r0, [r1, #0]
 800da92:	dc12      	bgt.n	800daba <__b2d+0x4e>
 800da94:	42ae      	cmp	r6, r5
 800da96:	bf2c      	ite	cs
 800da98:	2200      	movcs	r2, #0
 800da9a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800da9e:	f1c3 0c0b 	rsb	ip, r3, #11
 800daa2:	3315      	adds	r3, #21
 800daa4:	fa24 fe0c 	lsr.w	lr, r4, ip
 800daa8:	fa04 f303 	lsl.w	r3, r4, r3
 800daac:	fa22 f20c 	lsr.w	r2, r2, ip
 800dab0:	ea4e 0107 	orr.w	r1, lr, r7
 800dab4:	431a      	orrs	r2, r3
 800dab6:	4610      	mov	r0, r2
 800dab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daba:	42ae      	cmp	r6, r5
 800dabc:	bf36      	itet	cc
 800dabe:	f1a2 0508 	subcc.w	r5, r2, #8
 800dac2:	2200      	movcs	r2, #0
 800dac4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800dac8:	3b0b      	subs	r3, #11
 800daca:	d012      	beq.n	800daf2 <__b2d+0x86>
 800dacc:	f1c3 0720 	rsb	r7, r3, #32
 800dad0:	fa22 f107 	lsr.w	r1, r2, r7
 800dad4:	409c      	lsls	r4, r3
 800dad6:	430c      	orrs	r4, r1
 800dad8:	42b5      	cmp	r5, r6
 800dada:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800dade:	bf94      	ite	ls
 800dae0:	2400      	movls	r4, #0
 800dae2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800dae6:	409a      	lsls	r2, r3
 800dae8:	40fc      	lsrs	r4, r7
 800daea:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800daee:	4322      	orrs	r2, r4
 800daf0:	e7e1      	b.n	800dab6 <__b2d+0x4a>
 800daf2:	ea44 0107 	orr.w	r1, r4, r7
 800daf6:	e7de      	b.n	800dab6 <__b2d+0x4a>
 800daf8:	3ff00000 	.word	0x3ff00000

0800dafc <__d2b>:
 800dafc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800db00:	2101      	movs	r1, #1
 800db02:	4690      	mov	r8, r2
 800db04:	4699      	mov	r9, r3
 800db06:	9e08      	ldr	r6, [sp, #32]
 800db08:	f7ff fc24 	bl	800d354 <_Balloc>
 800db0c:	4604      	mov	r4, r0
 800db0e:	b930      	cbnz	r0, 800db1e <__d2b+0x22>
 800db10:	4602      	mov	r2, r0
 800db12:	f240 310f 	movw	r1, #783	@ 0x30f
 800db16:	4b23      	ldr	r3, [pc, #140]	@ (800dba4 <__d2b+0xa8>)
 800db18:	4823      	ldr	r0, [pc, #140]	@ (800dba8 <__d2b+0xac>)
 800db1a:	f001 fb3d 	bl	800f198 <__assert_func>
 800db1e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800db22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db26:	b10d      	cbz	r5, 800db2c <__d2b+0x30>
 800db28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800db2c:	9301      	str	r3, [sp, #4]
 800db2e:	f1b8 0300 	subs.w	r3, r8, #0
 800db32:	d024      	beq.n	800db7e <__d2b+0x82>
 800db34:	4668      	mov	r0, sp
 800db36:	9300      	str	r3, [sp, #0]
 800db38:	f7ff fd1d 	bl	800d576 <__lo0bits>
 800db3c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800db40:	b1d8      	cbz	r0, 800db7a <__d2b+0x7e>
 800db42:	f1c0 0320 	rsb	r3, r0, #32
 800db46:	fa02 f303 	lsl.w	r3, r2, r3
 800db4a:	430b      	orrs	r3, r1
 800db4c:	40c2      	lsrs	r2, r0
 800db4e:	6163      	str	r3, [r4, #20]
 800db50:	9201      	str	r2, [sp, #4]
 800db52:	9b01      	ldr	r3, [sp, #4]
 800db54:	2b00      	cmp	r3, #0
 800db56:	bf0c      	ite	eq
 800db58:	2201      	moveq	r2, #1
 800db5a:	2202      	movne	r2, #2
 800db5c:	61a3      	str	r3, [r4, #24]
 800db5e:	6122      	str	r2, [r4, #16]
 800db60:	b1ad      	cbz	r5, 800db8e <__d2b+0x92>
 800db62:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800db66:	4405      	add	r5, r0
 800db68:	6035      	str	r5, [r6, #0]
 800db6a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800db6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db70:	6018      	str	r0, [r3, #0]
 800db72:	4620      	mov	r0, r4
 800db74:	b002      	add	sp, #8
 800db76:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800db7a:	6161      	str	r1, [r4, #20]
 800db7c:	e7e9      	b.n	800db52 <__d2b+0x56>
 800db7e:	a801      	add	r0, sp, #4
 800db80:	f7ff fcf9 	bl	800d576 <__lo0bits>
 800db84:	9b01      	ldr	r3, [sp, #4]
 800db86:	2201      	movs	r2, #1
 800db88:	6163      	str	r3, [r4, #20]
 800db8a:	3020      	adds	r0, #32
 800db8c:	e7e7      	b.n	800db5e <__d2b+0x62>
 800db8e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800db92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db96:	6030      	str	r0, [r6, #0]
 800db98:	6918      	ldr	r0, [r3, #16]
 800db9a:	f7ff fccd 	bl	800d538 <__hi0bits>
 800db9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dba2:	e7e4      	b.n	800db6e <__d2b+0x72>
 800dba4:	08010625 	.word	0x08010625
 800dba8:	08010636 	.word	0x08010636

0800dbac <__ratio>:
 800dbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb0:	b085      	sub	sp, #20
 800dbb2:	e9cd 1000 	strd	r1, r0, [sp]
 800dbb6:	a902      	add	r1, sp, #8
 800dbb8:	f7ff ff58 	bl	800da6c <__b2d>
 800dbbc:	468b      	mov	fp, r1
 800dbbe:	4606      	mov	r6, r0
 800dbc0:	460f      	mov	r7, r1
 800dbc2:	9800      	ldr	r0, [sp, #0]
 800dbc4:	a903      	add	r1, sp, #12
 800dbc6:	f7ff ff51 	bl	800da6c <__b2d>
 800dbca:	460d      	mov	r5, r1
 800dbcc:	9b01      	ldr	r3, [sp, #4]
 800dbce:	4689      	mov	r9, r1
 800dbd0:	6919      	ldr	r1, [r3, #16]
 800dbd2:	9b00      	ldr	r3, [sp, #0]
 800dbd4:	4604      	mov	r4, r0
 800dbd6:	691b      	ldr	r3, [r3, #16]
 800dbd8:	4630      	mov	r0, r6
 800dbda:	1ac9      	subs	r1, r1, r3
 800dbdc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800dbe0:	1a9b      	subs	r3, r3, r2
 800dbe2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	bfcd      	iteet	gt
 800dbea:	463a      	movgt	r2, r7
 800dbec:	462a      	movle	r2, r5
 800dbee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dbf2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800dbf6:	bfd8      	it	le
 800dbf8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800dbfc:	464b      	mov	r3, r9
 800dbfe:	4622      	mov	r2, r4
 800dc00:	4659      	mov	r1, fp
 800dc02:	f7f2 fe03 	bl	800080c <__aeabi_ddiv>
 800dc06:	b005      	add	sp, #20
 800dc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc0c <__copybits>:
 800dc0c:	3901      	subs	r1, #1
 800dc0e:	b570      	push	{r4, r5, r6, lr}
 800dc10:	1149      	asrs	r1, r1, #5
 800dc12:	6914      	ldr	r4, [r2, #16]
 800dc14:	3101      	adds	r1, #1
 800dc16:	f102 0314 	add.w	r3, r2, #20
 800dc1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dc1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dc22:	1f05      	subs	r5, r0, #4
 800dc24:	42a3      	cmp	r3, r4
 800dc26:	d30c      	bcc.n	800dc42 <__copybits+0x36>
 800dc28:	1aa3      	subs	r3, r4, r2
 800dc2a:	3b11      	subs	r3, #17
 800dc2c:	f023 0303 	bic.w	r3, r3, #3
 800dc30:	3211      	adds	r2, #17
 800dc32:	42a2      	cmp	r2, r4
 800dc34:	bf88      	it	hi
 800dc36:	2300      	movhi	r3, #0
 800dc38:	4418      	add	r0, r3
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	4288      	cmp	r0, r1
 800dc3e:	d305      	bcc.n	800dc4c <__copybits+0x40>
 800dc40:	bd70      	pop	{r4, r5, r6, pc}
 800dc42:	f853 6b04 	ldr.w	r6, [r3], #4
 800dc46:	f845 6f04 	str.w	r6, [r5, #4]!
 800dc4a:	e7eb      	b.n	800dc24 <__copybits+0x18>
 800dc4c:	f840 3b04 	str.w	r3, [r0], #4
 800dc50:	e7f4      	b.n	800dc3c <__copybits+0x30>

0800dc52 <__any_on>:
 800dc52:	f100 0214 	add.w	r2, r0, #20
 800dc56:	6900      	ldr	r0, [r0, #16]
 800dc58:	114b      	asrs	r3, r1, #5
 800dc5a:	4298      	cmp	r0, r3
 800dc5c:	b510      	push	{r4, lr}
 800dc5e:	db11      	blt.n	800dc84 <__any_on+0x32>
 800dc60:	dd0a      	ble.n	800dc78 <__any_on+0x26>
 800dc62:	f011 011f 	ands.w	r1, r1, #31
 800dc66:	d007      	beq.n	800dc78 <__any_on+0x26>
 800dc68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dc6c:	fa24 f001 	lsr.w	r0, r4, r1
 800dc70:	fa00 f101 	lsl.w	r1, r0, r1
 800dc74:	428c      	cmp	r4, r1
 800dc76:	d10b      	bne.n	800dc90 <__any_on+0x3e>
 800dc78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d803      	bhi.n	800dc88 <__any_on+0x36>
 800dc80:	2000      	movs	r0, #0
 800dc82:	bd10      	pop	{r4, pc}
 800dc84:	4603      	mov	r3, r0
 800dc86:	e7f7      	b.n	800dc78 <__any_on+0x26>
 800dc88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc8c:	2900      	cmp	r1, #0
 800dc8e:	d0f5      	beq.n	800dc7c <__any_on+0x2a>
 800dc90:	2001      	movs	r0, #1
 800dc92:	e7f6      	b.n	800dc82 <__any_on+0x30>

0800dc94 <sulp>:
 800dc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc98:	460f      	mov	r7, r1
 800dc9a:	4690      	mov	r8, r2
 800dc9c:	f7ff fec6 	bl	800da2c <__ulp>
 800dca0:	4604      	mov	r4, r0
 800dca2:	460d      	mov	r5, r1
 800dca4:	f1b8 0f00 	cmp.w	r8, #0
 800dca8:	d011      	beq.n	800dcce <sulp+0x3a>
 800dcaa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800dcae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	dd0b      	ble.n	800dcce <sulp+0x3a>
 800dcb6:	2400      	movs	r4, #0
 800dcb8:	051b      	lsls	r3, r3, #20
 800dcba:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800dcbe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800dcc2:	4622      	mov	r2, r4
 800dcc4:	462b      	mov	r3, r5
 800dcc6:	f7f2 fc77 	bl	80005b8 <__aeabi_dmul>
 800dcca:	4604      	mov	r4, r0
 800dccc:	460d      	mov	r5, r1
 800dcce:	4620      	mov	r0, r4
 800dcd0:	4629      	mov	r1, r5
 800dcd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800dcd8 <_strtod_l>:
 800dcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcdc:	b09f      	sub	sp, #124	@ 0x7c
 800dcde:	9217      	str	r2, [sp, #92]	@ 0x5c
 800dce0:	2200      	movs	r2, #0
 800dce2:	460c      	mov	r4, r1
 800dce4:	921a      	str	r2, [sp, #104]	@ 0x68
 800dce6:	f04f 0a00 	mov.w	sl, #0
 800dcea:	f04f 0b00 	mov.w	fp, #0
 800dcee:	460a      	mov	r2, r1
 800dcf0:	9005      	str	r0, [sp, #20]
 800dcf2:	9219      	str	r2, [sp, #100]	@ 0x64
 800dcf4:	7811      	ldrb	r1, [r2, #0]
 800dcf6:	292b      	cmp	r1, #43	@ 0x2b
 800dcf8:	d048      	beq.n	800dd8c <_strtod_l+0xb4>
 800dcfa:	d836      	bhi.n	800dd6a <_strtod_l+0x92>
 800dcfc:	290d      	cmp	r1, #13
 800dcfe:	d830      	bhi.n	800dd62 <_strtod_l+0x8a>
 800dd00:	2908      	cmp	r1, #8
 800dd02:	d830      	bhi.n	800dd66 <_strtod_l+0x8e>
 800dd04:	2900      	cmp	r1, #0
 800dd06:	d039      	beq.n	800dd7c <_strtod_l+0xa4>
 800dd08:	2200      	movs	r2, #0
 800dd0a:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800dd0e:	782a      	ldrb	r2, [r5, #0]
 800dd10:	2a30      	cmp	r2, #48	@ 0x30
 800dd12:	f040 80b0 	bne.w	800de76 <_strtod_l+0x19e>
 800dd16:	786a      	ldrb	r2, [r5, #1]
 800dd18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dd1c:	2a58      	cmp	r2, #88	@ 0x58
 800dd1e:	d16c      	bne.n	800ddfa <_strtod_l+0x122>
 800dd20:	9302      	str	r3, [sp, #8]
 800dd22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd24:	4a8f      	ldr	r2, [pc, #572]	@ (800df64 <_strtod_l+0x28c>)
 800dd26:	9301      	str	r3, [sp, #4]
 800dd28:	ab1a      	add	r3, sp, #104	@ 0x68
 800dd2a:	9300      	str	r3, [sp, #0]
 800dd2c:	9805      	ldr	r0, [sp, #20]
 800dd2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800dd30:	a919      	add	r1, sp, #100	@ 0x64
 800dd32:	f001 facb 	bl	800f2cc <__gethex>
 800dd36:	f010 060f 	ands.w	r6, r0, #15
 800dd3a:	4604      	mov	r4, r0
 800dd3c:	d005      	beq.n	800dd4a <_strtod_l+0x72>
 800dd3e:	2e06      	cmp	r6, #6
 800dd40:	d126      	bne.n	800dd90 <_strtod_l+0xb8>
 800dd42:	2300      	movs	r3, #0
 800dd44:	3501      	adds	r5, #1
 800dd46:	9519      	str	r5, [sp, #100]	@ 0x64
 800dd48:	930e      	str	r3, [sp, #56]	@ 0x38
 800dd4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	f040 8582 	bne.w	800e856 <_strtod_l+0xb7e>
 800dd52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd54:	b1bb      	cbz	r3, 800dd86 <_strtod_l+0xae>
 800dd56:	4650      	mov	r0, sl
 800dd58:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800dd5c:	b01f      	add	sp, #124	@ 0x7c
 800dd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd62:	2920      	cmp	r1, #32
 800dd64:	d1d0      	bne.n	800dd08 <_strtod_l+0x30>
 800dd66:	3201      	adds	r2, #1
 800dd68:	e7c3      	b.n	800dcf2 <_strtod_l+0x1a>
 800dd6a:	292d      	cmp	r1, #45	@ 0x2d
 800dd6c:	d1cc      	bne.n	800dd08 <_strtod_l+0x30>
 800dd6e:	2101      	movs	r1, #1
 800dd70:	910e      	str	r1, [sp, #56]	@ 0x38
 800dd72:	1c51      	adds	r1, r2, #1
 800dd74:	9119      	str	r1, [sp, #100]	@ 0x64
 800dd76:	7852      	ldrb	r2, [r2, #1]
 800dd78:	2a00      	cmp	r2, #0
 800dd7a:	d1c7      	bne.n	800dd0c <_strtod_l+0x34>
 800dd7c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dd7e:	9419      	str	r4, [sp, #100]	@ 0x64
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f040 8566 	bne.w	800e852 <_strtod_l+0xb7a>
 800dd86:	4650      	mov	r0, sl
 800dd88:	4659      	mov	r1, fp
 800dd8a:	e7e7      	b.n	800dd5c <_strtod_l+0x84>
 800dd8c:	2100      	movs	r1, #0
 800dd8e:	e7ef      	b.n	800dd70 <_strtod_l+0x98>
 800dd90:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dd92:	b13a      	cbz	r2, 800dda4 <_strtod_l+0xcc>
 800dd94:	2135      	movs	r1, #53	@ 0x35
 800dd96:	a81c      	add	r0, sp, #112	@ 0x70
 800dd98:	f7ff ff38 	bl	800dc0c <__copybits>
 800dd9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dd9e:	9805      	ldr	r0, [sp, #20]
 800dda0:	f7ff fb18 	bl	800d3d4 <_Bfree>
 800dda4:	3e01      	subs	r6, #1
 800dda6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800dda8:	2e04      	cmp	r6, #4
 800ddaa:	d806      	bhi.n	800ddba <_strtod_l+0xe2>
 800ddac:	e8df f006 	tbb	[pc, r6]
 800ddb0:	201d0314 	.word	0x201d0314
 800ddb4:	14          	.byte	0x14
 800ddb5:	00          	.byte	0x00
 800ddb6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ddba:	05e1      	lsls	r1, r4, #23
 800ddbc:	bf48      	it	mi
 800ddbe:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ddc2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ddc6:	0d1b      	lsrs	r3, r3, #20
 800ddc8:	051b      	lsls	r3, r3, #20
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d1bd      	bne.n	800dd4a <_strtod_l+0x72>
 800ddce:	f7fe fb17 	bl	800c400 <__errno>
 800ddd2:	2322      	movs	r3, #34	@ 0x22
 800ddd4:	6003      	str	r3, [r0, #0]
 800ddd6:	e7b8      	b.n	800dd4a <_strtod_l+0x72>
 800ddd8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800dddc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800dde0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800dde4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dde8:	e7e7      	b.n	800ddba <_strtod_l+0xe2>
 800ddea:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800df68 <_strtod_l+0x290>
 800ddee:	e7e4      	b.n	800ddba <_strtod_l+0xe2>
 800ddf0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ddf4:	f04f 3aff 	mov.w	sl, #4294967295
 800ddf8:	e7df      	b.n	800ddba <_strtod_l+0xe2>
 800ddfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ddfc:	1c5a      	adds	r2, r3, #1
 800ddfe:	9219      	str	r2, [sp, #100]	@ 0x64
 800de00:	785b      	ldrb	r3, [r3, #1]
 800de02:	2b30      	cmp	r3, #48	@ 0x30
 800de04:	d0f9      	beq.n	800ddfa <_strtod_l+0x122>
 800de06:	2b00      	cmp	r3, #0
 800de08:	d09f      	beq.n	800dd4a <_strtod_l+0x72>
 800de0a:	2301      	movs	r3, #1
 800de0c:	2700      	movs	r7, #0
 800de0e:	220a      	movs	r2, #10
 800de10:	46b9      	mov	r9, r7
 800de12:	9308      	str	r3, [sp, #32]
 800de14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de16:	970b      	str	r7, [sp, #44]	@ 0x2c
 800de18:	930c      	str	r3, [sp, #48]	@ 0x30
 800de1a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800de1c:	7805      	ldrb	r5, [r0, #0]
 800de1e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800de22:	b2d9      	uxtb	r1, r3
 800de24:	2909      	cmp	r1, #9
 800de26:	d928      	bls.n	800de7a <_strtod_l+0x1a2>
 800de28:	2201      	movs	r2, #1
 800de2a:	4950      	ldr	r1, [pc, #320]	@ (800df6c <_strtod_l+0x294>)
 800de2c:	f001 f969 	bl	800f102 <strncmp>
 800de30:	2800      	cmp	r0, #0
 800de32:	d032      	beq.n	800de9a <_strtod_l+0x1c2>
 800de34:	2000      	movs	r0, #0
 800de36:	462a      	mov	r2, r5
 800de38:	4603      	mov	r3, r0
 800de3a:	464d      	mov	r5, r9
 800de3c:	900a      	str	r0, [sp, #40]	@ 0x28
 800de3e:	2a65      	cmp	r2, #101	@ 0x65
 800de40:	d001      	beq.n	800de46 <_strtod_l+0x16e>
 800de42:	2a45      	cmp	r2, #69	@ 0x45
 800de44:	d114      	bne.n	800de70 <_strtod_l+0x198>
 800de46:	b91d      	cbnz	r5, 800de50 <_strtod_l+0x178>
 800de48:	9a08      	ldr	r2, [sp, #32]
 800de4a:	4302      	orrs	r2, r0
 800de4c:	d096      	beq.n	800dd7c <_strtod_l+0xa4>
 800de4e:	2500      	movs	r5, #0
 800de50:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800de52:	1c62      	adds	r2, r4, #1
 800de54:	9219      	str	r2, [sp, #100]	@ 0x64
 800de56:	7862      	ldrb	r2, [r4, #1]
 800de58:	2a2b      	cmp	r2, #43	@ 0x2b
 800de5a:	d07a      	beq.n	800df52 <_strtod_l+0x27a>
 800de5c:	2a2d      	cmp	r2, #45	@ 0x2d
 800de5e:	d07e      	beq.n	800df5e <_strtod_l+0x286>
 800de60:	f04f 0c00 	mov.w	ip, #0
 800de64:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800de68:	2909      	cmp	r1, #9
 800de6a:	f240 8085 	bls.w	800df78 <_strtod_l+0x2a0>
 800de6e:	9419      	str	r4, [sp, #100]	@ 0x64
 800de70:	f04f 0800 	mov.w	r8, #0
 800de74:	e0a5      	b.n	800dfc2 <_strtod_l+0x2ea>
 800de76:	2300      	movs	r3, #0
 800de78:	e7c8      	b.n	800de0c <_strtod_l+0x134>
 800de7a:	f1b9 0f08 	cmp.w	r9, #8
 800de7e:	bfd8      	it	le
 800de80:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800de82:	f100 0001 	add.w	r0, r0, #1
 800de86:	bfd6      	itet	le
 800de88:	fb02 3301 	mlale	r3, r2, r1, r3
 800de8c:	fb02 3707 	mlagt	r7, r2, r7, r3
 800de90:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800de92:	f109 0901 	add.w	r9, r9, #1
 800de96:	9019      	str	r0, [sp, #100]	@ 0x64
 800de98:	e7bf      	b.n	800de1a <_strtod_l+0x142>
 800de9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de9c:	1c5a      	adds	r2, r3, #1
 800de9e:	9219      	str	r2, [sp, #100]	@ 0x64
 800dea0:	785a      	ldrb	r2, [r3, #1]
 800dea2:	f1b9 0f00 	cmp.w	r9, #0
 800dea6:	d03b      	beq.n	800df20 <_strtod_l+0x248>
 800dea8:	464d      	mov	r5, r9
 800deaa:	900a      	str	r0, [sp, #40]	@ 0x28
 800deac:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800deb0:	2b09      	cmp	r3, #9
 800deb2:	d912      	bls.n	800deda <_strtod_l+0x202>
 800deb4:	2301      	movs	r3, #1
 800deb6:	e7c2      	b.n	800de3e <_strtod_l+0x166>
 800deb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800deba:	3001      	adds	r0, #1
 800debc:	1c5a      	adds	r2, r3, #1
 800debe:	9219      	str	r2, [sp, #100]	@ 0x64
 800dec0:	785a      	ldrb	r2, [r3, #1]
 800dec2:	2a30      	cmp	r2, #48	@ 0x30
 800dec4:	d0f8      	beq.n	800deb8 <_strtod_l+0x1e0>
 800dec6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800deca:	2b08      	cmp	r3, #8
 800decc:	f200 84c8 	bhi.w	800e860 <_strtod_l+0xb88>
 800ded0:	900a      	str	r0, [sp, #40]	@ 0x28
 800ded2:	2000      	movs	r0, #0
 800ded4:	4605      	mov	r5, r0
 800ded6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ded8:	930c      	str	r3, [sp, #48]	@ 0x30
 800deda:	3a30      	subs	r2, #48	@ 0x30
 800dedc:	f100 0301 	add.w	r3, r0, #1
 800dee0:	d018      	beq.n	800df14 <_strtod_l+0x23c>
 800dee2:	462e      	mov	r6, r5
 800dee4:	f04f 0e0a 	mov.w	lr, #10
 800dee8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800deea:	4419      	add	r1, r3
 800deec:	910a      	str	r1, [sp, #40]	@ 0x28
 800deee:	1c71      	adds	r1, r6, #1
 800def0:	eba1 0c05 	sub.w	ip, r1, r5
 800def4:	4563      	cmp	r3, ip
 800def6:	dc15      	bgt.n	800df24 <_strtod_l+0x24c>
 800def8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800defc:	182b      	adds	r3, r5, r0
 800defe:	2b08      	cmp	r3, #8
 800df00:	f105 0501 	add.w	r5, r5, #1
 800df04:	4405      	add	r5, r0
 800df06:	dc1a      	bgt.n	800df3e <_strtod_l+0x266>
 800df08:	230a      	movs	r3, #10
 800df0a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800df0c:	fb03 2301 	mla	r3, r3, r1, r2
 800df10:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df12:	2300      	movs	r3, #0
 800df14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800df16:	4618      	mov	r0, r3
 800df18:	1c51      	adds	r1, r2, #1
 800df1a:	9119      	str	r1, [sp, #100]	@ 0x64
 800df1c:	7852      	ldrb	r2, [r2, #1]
 800df1e:	e7c5      	b.n	800deac <_strtod_l+0x1d4>
 800df20:	4648      	mov	r0, r9
 800df22:	e7ce      	b.n	800dec2 <_strtod_l+0x1ea>
 800df24:	2e08      	cmp	r6, #8
 800df26:	dc05      	bgt.n	800df34 <_strtod_l+0x25c>
 800df28:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800df2a:	fb0e f606 	mul.w	r6, lr, r6
 800df2e:	960b      	str	r6, [sp, #44]	@ 0x2c
 800df30:	460e      	mov	r6, r1
 800df32:	e7dc      	b.n	800deee <_strtod_l+0x216>
 800df34:	2910      	cmp	r1, #16
 800df36:	bfd8      	it	le
 800df38:	fb0e f707 	mulle.w	r7, lr, r7
 800df3c:	e7f8      	b.n	800df30 <_strtod_l+0x258>
 800df3e:	2b0f      	cmp	r3, #15
 800df40:	bfdc      	itt	le
 800df42:	230a      	movle	r3, #10
 800df44:	fb03 2707 	mlale	r7, r3, r7, r2
 800df48:	e7e3      	b.n	800df12 <_strtod_l+0x23a>
 800df4a:	2300      	movs	r3, #0
 800df4c:	930a      	str	r3, [sp, #40]	@ 0x28
 800df4e:	2301      	movs	r3, #1
 800df50:	e77a      	b.n	800de48 <_strtod_l+0x170>
 800df52:	f04f 0c00 	mov.w	ip, #0
 800df56:	1ca2      	adds	r2, r4, #2
 800df58:	9219      	str	r2, [sp, #100]	@ 0x64
 800df5a:	78a2      	ldrb	r2, [r4, #2]
 800df5c:	e782      	b.n	800de64 <_strtod_l+0x18c>
 800df5e:	f04f 0c01 	mov.w	ip, #1
 800df62:	e7f8      	b.n	800df56 <_strtod_l+0x27e>
 800df64:	0801085c 	.word	0x0801085c
 800df68:	7ff00000 	.word	0x7ff00000
 800df6c:	0801068f 	.word	0x0801068f
 800df70:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800df72:	1c51      	adds	r1, r2, #1
 800df74:	9119      	str	r1, [sp, #100]	@ 0x64
 800df76:	7852      	ldrb	r2, [r2, #1]
 800df78:	2a30      	cmp	r2, #48	@ 0x30
 800df7a:	d0f9      	beq.n	800df70 <_strtod_l+0x298>
 800df7c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800df80:	2908      	cmp	r1, #8
 800df82:	f63f af75 	bhi.w	800de70 <_strtod_l+0x198>
 800df86:	f04f 080a 	mov.w	r8, #10
 800df8a:	3a30      	subs	r2, #48	@ 0x30
 800df8c:	9209      	str	r2, [sp, #36]	@ 0x24
 800df8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800df90:	920f      	str	r2, [sp, #60]	@ 0x3c
 800df92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800df94:	1c56      	adds	r6, r2, #1
 800df96:	9619      	str	r6, [sp, #100]	@ 0x64
 800df98:	7852      	ldrb	r2, [r2, #1]
 800df9a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800df9e:	f1be 0f09 	cmp.w	lr, #9
 800dfa2:	d939      	bls.n	800e018 <_strtod_l+0x340>
 800dfa4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dfa6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800dfaa:	1a76      	subs	r6, r6, r1
 800dfac:	2e08      	cmp	r6, #8
 800dfae:	dc03      	bgt.n	800dfb8 <_strtod_l+0x2e0>
 800dfb0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dfb2:	4588      	cmp	r8, r1
 800dfb4:	bfa8      	it	ge
 800dfb6:	4688      	movge	r8, r1
 800dfb8:	f1bc 0f00 	cmp.w	ip, #0
 800dfbc:	d001      	beq.n	800dfc2 <_strtod_l+0x2ea>
 800dfbe:	f1c8 0800 	rsb	r8, r8, #0
 800dfc2:	2d00      	cmp	r5, #0
 800dfc4:	d14e      	bne.n	800e064 <_strtod_l+0x38c>
 800dfc6:	9908      	ldr	r1, [sp, #32]
 800dfc8:	4308      	orrs	r0, r1
 800dfca:	f47f aebe 	bne.w	800dd4a <_strtod_l+0x72>
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	f47f aed4 	bne.w	800dd7c <_strtod_l+0xa4>
 800dfd4:	2a69      	cmp	r2, #105	@ 0x69
 800dfd6:	d028      	beq.n	800e02a <_strtod_l+0x352>
 800dfd8:	dc25      	bgt.n	800e026 <_strtod_l+0x34e>
 800dfda:	2a49      	cmp	r2, #73	@ 0x49
 800dfdc:	d025      	beq.n	800e02a <_strtod_l+0x352>
 800dfde:	2a4e      	cmp	r2, #78	@ 0x4e
 800dfe0:	f47f aecc 	bne.w	800dd7c <_strtod_l+0xa4>
 800dfe4:	4999      	ldr	r1, [pc, #612]	@ (800e24c <_strtod_l+0x574>)
 800dfe6:	a819      	add	r0, sp, #100	@ 0x64
 800dfe8:	f001 fb92 	bl	800f710 <__match>
 800dfec:	2800      	cmp	r0, #0
 800dfee:	f43f aec5 	beq.w	800dd7c <_strtod_l+0xa4>
 800dff2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	2b28      	cmp	r3, #40	@ 0x28
 800dff8:	d12e      	bne.n	800e058 <_strtod_l+0x380>
 800dffa:	4995      	ldr	r1, [pc, #596]	@ (800e250 <_strtod_l+0x578>)
 800dffc:	aa1c      	add	r2, sp, #112	@ 0x70
 800dffe:	a819      	add	r0, sp, #100	@ 0x64
 800e000:	f001 fb9a 	bl	800f738 <__hexnan>
 800e004:	2805      	cmp	r0, #5
 800e006:	d127      	bne.n	800e058 <_strtod_l+0x380>
 800e008:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e00a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e00e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e012:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e016:	e698      	b.n	800dd4a <_strtod_l+0x72>
 800e018:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e01a:	fb08 2101 	mla	r1, r8, r1, r2
 800e01e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e022:	9209      	str	r2, [sp, #36]	@ 0x24
 800e024:	e7b5      	b.n	800df92 <_strtod_l+0x2ba>
 800e026:	2a6e      	cmp	r2, #110	@ 0x6e
 800e028:	e7da      	b.n	800dfe0 <_strtod_l+0x308>
 800e02a:	498a      	ldr	r1, [pc, #552]	@ (800e254 <_strtod_l+0x57c>)
 800e02c:	a819      	add	r0, sp, #100	@ 0x64
 800e02e:	f001 fb6f 	bl	800f710 <__match>
 800e032:	2800      	cmp	r0, #0
 800e034:	f43f aea2 	beq.w	800dd7c <_strtod_l+0xa4>
 800e038:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e03a:	4987      	ldr	r1, [pc, #540]	@ (800e258 <_strtod_l+0x580>)
 800e03c:	3b01      	subs	r3, #1
 800e03e:	a819      	add	r0, sp, #100	@ 0x64
 800e040:	9319      	str	r3, [sp, #100]	@ 0x64
 800e042:	f001 fb65 	bl	800f710 <__match>
 800e046:	b910      	cbnz	r0, 800e04e <_strtod_l+0x376>
 800e048:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e04a:	3301      	adds	r3, #1
 800e04c:	9319      	str	r3, [sp, #100]	@ 0x64
 800e04e:	f04f 0a00 	mov.w	sl, #0
 800e052:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800e25c <_strtod_l+0x584>
 800e056:	e678      	b.n	800dd4a <_strtod_l+0x72>
 800e058:	4881      	ldr	r0, [pc, #516]	@ (800e260 <_strtod_l+0x588>)
 800e05a:	f001 f897 	bl	800f18c <nan>
 800e05e:	4682      	mov	sl, r0
 800e060:	468b      	mov	fp, r1
 800e062:	e672      	b.n	800dd4a <_strtod_l+0x72>
 800e064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e066:	f1b9 0f00 	cmp.w	r9, #0
 800e06a:	bf08      	it	eq
 800e06c:	46a9      	moveq	r9, r5
 800e06e:	eba8 0303 	sub.w	r3, r8, r3
 800e072:	2d10      	cmp	r5, #16
 800e074:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e076:	462c      	mov	r4, r5
 800e078:	9309      	str	r3, [sp, #36]	@ 0x24
 800e07a:	bfa8      	it	ge
 800e07c:	2410      	movge	r4, #16
 800e07e:	f7f2 fa21 	bl	80004c4 <__aeabi_ui2d>
 800e082:	2d09      	cmp	r5, #9
 800e084:	4682      	mov	sl, r0
 800e086:	468b      	mov	fp, r1
 800e088:	dc11      	bgt.n	800e0ae <_strtod_l+0x3d6>
 800e08a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	f43f ae5c 	beq.w	800dd4a <_strtod_l+0x72>
 800e092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e094:	dd76      	ble.n	800e184 <_strtod_l+0x4ac>
 800e096:	2b16      	cmp	r3, #22
 800e098:	dc5d      	bgt.n	800e156 <_strtod_l+0x47e>
 800e09a:	4972      	ldr	r1, [pc, #456]	@ (800e264 <_strtod_l+0x58c>)
 800e09c:	4652      	mov	r2, sl
 800e09e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e0a2:	465b      	mov	r3, fp
 800e0a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0a8:	f7f2 fa86 	bl	80005b8 <__aeabi_dmul>
 800e0ac:	e7d7      	b.n	800e05e <_strtod_l+0x386>
 800e0ae:	4b6d      	ldr	r3, [pc, #436]	@ (800e264 <_strtod_l+0x58c>)
 800e0b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e0b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e0b8:	f7f2 fa7e 	bl	80005b8 <__aeabi_dmul>
 800e0bc:	4682      	mov	sl, r0
 800e0be:	4638      	mov	r0, r7
 800e0c0:	468b      	mov	fp, r1
 800e0c2:	f7f2 f9ff 	bl	80004c4 <__aeabi_ui2d>
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	4650      	mov	r0, sl
 800e0cc:	4659      	mov	r1, fp
 800e0ce:	f7f2 f8bd 	bl	800024c <__adddf3>
 800e0d2:	2d0f      	cmp	r5, #15
 800e0d4:	4682      	mov	sl, r0
 800e0d6:	468b      	mov	fp, r1
 800e0d8:	ddd7      	ble.n	800e08a <_strtod_l+0x3b2>
 800e0da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0dc:	1b2c      	subs	r4, r5, r4
 800e0de:	441c      	add	r4, r3
 800e0e0:	2c00      	cmp	r4, #0
 800e0e2:	f340 8093 	ble.w	800e20c <_strtod_l+0x534>
 800e0e6:	f014 030f 	ands.w	r3, r4, #15
 800e0ea:	d00a      	beq.n	800e102 <_strtod_l+0x42a>
 800e0ec:	495d      	ldr	r1, [pc, #372]	@ (800e264 <_strtod_l+0x58c>)
 800e0ee:	4652      	mov	r2, sl
 800e0f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e0f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0f8:	465b      	mov	r3, fp
 800e0fa:	f7f2 fa5d 	bl	80005b8 <__aeabi_dmul>
 800e0fe:	4682      	mov	sl, r0
 800e100:	468b      	mov	fp, r1
 800e102:	f034 040f 	bics.w	r4, r4, #15
 800e106:	d073      	beq.n	800e1f0 <_strtod_l+0x518>
 800e108:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e10c:	dd49      	ble.n	800e1a2 <_strtod_l+0x4ca>
 800e10e:	2400      	movs	r4, #0
 800e110:	46a0      	mov	r8, r4
 800e112:	46a1      	mov	r9, r4
 800e114:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e116:	2322      	movs	r3, #34	@ 0x22
 800e118:	f04f 0a00 	mov.w	sl, #0
 800e11c:	9a05      	ldr	r2, [sp, #20]
 800e11e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800e25c <_strtod_l+0x584>
 800e122:	6013      	str	r3, [r2, #0]
 800e124:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e126:	2b00      	cmp	r3, #0
 800e128:	f43f ae0f 	beq.w	800dd4a <_strtod_l+0x72>
 800e12c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e12e:	9805      	ldr	r0, [sp, #20]
 800e130:	f7ff f950 	bl	800d3d4 <_Bfree>
 800e134:	4649      	mov	r1, r9
 800e136:	9805      	ldr	r0, [sp, #20]
 800e138:	f7ff f94c 	bl	800d3d4 <_Bfree>
 800e13c:	4641      	mov	r1, r8
 800e13e:	9805      	ldr	r0, [sp, #20]
 800e140:	f7ff f948 	bl	800d3d4 <_Bfree>
 800e144:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e146:	9805      	ldr	r0, [sp, #20]
 800e148:	f7ff f944 	bl	800d3d4 <_Bfree>
 800e14c:	4621      	mov	r1, r4
 800e14e:	9805      	ldr	r0, [sp, #20]
 800e150:	f7ff f940 	bl	800d3d4 <_Bfree>
 800e154:	e5f9      	b.n	800dd4a <_strtod_l+0x72>
 800e156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e158:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e15c:	4293      	cmp	r3, r2
 800e15e:	dbbc      	blt.n	800e0da <_strtod_l+0x402>
 800e160:	4c40      	ldr	r4, [pc, #256]	@ (800e264 <_strtod_l+0x58c>)
 800e162:	f1c5 050f 	rsb	r5, r5, #15
 800e166:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e16a:	4652      	mov	r2, sl
 800e16c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e170:	465b      	mov	r3, fp
 800e172:	f7f2 fa21 	bl	80005b8 <__aeabi_dmul>
 800e176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e178:	1b5d      	subs	r5, r3, r5
 800e17a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e17e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e182:	e791      	b.n	800e0a8 <_strtod_l+0x3d0>
 800e184:	3316      	adds	r3, #22
 800e186:	dba8      	blt.n	800e0da <_strtod_l+0x402>
 800e188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e18a:	4650      	mov	r0, sl
 800e18c:	eba3 0808 	sub.w	r8, r3, r8
 800e190:	4b34      	ldr	r3, [pc, #208]	@ (800e264 <_strtod_l+0x58c>)
 800e192:	4659      	mov	r1, fp
 800e194:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e198:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e19c:	f7f2 fb36 	bl	800080c <__aeabi_ddiv>
 800e1a0:	e75d      	b.n	800e05e <_strtod_l+0x386>
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	4650      	mov	r0, sl
 800e1a6:	4659      	mov	r1, fp
 800e1a8:	461e      	mov	r6, r3
 800e1aa:	4f2f      	ldr	r7, [pc, #188]	@ (800e268 <_strtod_l+0x590>)
 800e1ac:	1124      	asrs	r4, r4, #4
 800e1ae:	2c01      	cmp	r4, #1
 800e1b0:	dc21      	bgt.n	800e1f6 <_strtod_l+0x51e>
 800e1b2:	b10b      	cbz	r3, 800e1b8 <_strtod_l+0x4e0>
 800e1b4:	4682      	mov	sl, r0
 800e1b6:	468b      	mov	fp, r1
 800e1b8:	492b      	ldr	r1, [pc, #172]	@ (800e268 <_strtod_l+0x590>)
 800e1ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e1be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e1c2:	4652      	mov	r2, sl
 800e1c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1c8:	465b      	mov	r3, fp
 800e1ca:	f7f2 f9f5 	bl	80005b8 <__aeabi_dmul>
 800e1ce:	4b23      	ldr	r3, [pc, #140]	@ (800e25c <_strtod_l+0x584>)
 800e1d0:	460a      	mov	r2, r1
 800e1d2:	400b      	ands	r3, r1
 800e1d4:	4925      	ldr	r1, [pc, #148]	@ (800e26c <_strtod_l+0x594>)
 800e1d6:	4682      	mov	sl, r0
 800e1d8:	428b      	cmp	r3, r1
 800e1da:	d898      	bhi.n	800e10e <_strtod_l+0x436>
 800e1dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e1e0:	428b      	cmp	r3, r1
 800e1e2:	bf86      	itte	hi
 800e1e4:	f04f 3aff 	movhi.w	sl, #4294967295
 800e1e8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800e270 <_strtod_l+0x598>
 800e1ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	9308      	str	r3, [sp, #32]
 800e1f4:	e076      	b.n	800e2e4 <_strtod_l+0x60c>
 800e1f6:	07e2      	lsls	r2, r4, #31
 800e1f8:	d504      	bpl.n	800e204 <_strtod_l+0x52c>
 800e1fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1fe:	f7f2 f9db 	bl	80005b8 <__aeabi_dmul>
 800e202:	2301      	movs	r3, #1
 800e204:	3601      	adds	r6, #1
 800e206:	1064      	asrs	r4, r4, #1
 800e208:	3708      	adds	r7, #8
 800e20a:	e7d0      	b.n	800e1ae <_strtod_l+0x4d6>
 800e20c:	d0f0      	beq.n	800e1f0 <_strtod_l+0x518>
 800e20e:	4264      	negs	r4, r4
 800e210:	f014 020f 	ands.w	r2, r4, #15
 800e214:	d00a      	beq.n	800e22c <_strtod_l+0x554>
 800e216:	4b13      	ldr	r3, [pc, #76]	@ (800e264 <_strtod_l+0x58c>)
 800e218:	4650      	mov	r0, sl
 800e21a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e21e:	4659      	mov	r1, fp
 800e220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e224:	f7f2 faf2 	bl	800080c <__aeabi_ddiv>
 800e228:	4682      	mov	sl, r0
 800e22a:	468b      	mov	fp, r1
 800e22c:	1124      	asrs	r4, r4, #4
 800e22e:	d0df      	beq.n	800e1f0 <_strtod_l+0x518>
 800e230:	2c1f      	cmp	r4, #31
 800e232:	dd1f      	ble.n	800e274 <_strtod_l+0x59c>
 800e234:	2400      	movs	r4, #0
 800e236:	46a0      	mov	r8, r4
 800e238:	46a1      	mov	r9, r4
 800e23a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e23c:	2322      	movs	r3, #34	@ 0x22
 800e23e:	9a05      	ldr	r2, [sp, #20]
 800e240:	f04f 0a00 	mov.w	sl, #0
 800e244:	f04f 0b00 	mov.w	fp, #0
 800e248:	6013      	str	r3, [r2, #0]
 800e24a:	e76b      	b.n	800e124 <_strtod_l+0x44c>
 800e24c:	0801057d 	.word	0x0801057d
 800e250:	08010848 	.word	0x08010848
 800e254:	08010575 	.word	0x08010575
 800e258:	080105ac 	.word	0x080105ac
 800e25c:	7ff00000 	.word	0x7ff00000
 800e260:	080106e5 	.word	0x080106e5
 800e264:	08010780 	.word	0x08010780
 800e268:	08010758 	.word	0x08010758
 800e26c:	7ca00000 	.word	0x7ca00000
 800e270:	7fefffff 	.word	0x7fefffff
 800e274:	f014 0310 	ands.w	r3, r4, #16
 800e278:	bf18      	it	ne
 800e27a:	236a      	movne	r3, #106	@ 0x6a
 800e27c:	4650      	mov	r0, sl
 800e27e:	9308      	str	r3, [sp, #32]
 800e280:	4659      	mov	r1, fp
 800e282:	2300      	movs	r3, #0
 800e284:	4e77      	ldr	r6, [pc, #476]	@ (800e464 <_strtod_l+0x78c>)
 800e286:	07e7      	lsls	r7, r4, #31
 800e288:	d504      	bpl.n	800e294 <_strtod_l+0x5bc>
 800e28a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e28e:	f7f2 f993 	bl	80005b8 <__aeabi_dmul>
 800e292:	2301      	movs	r3, #1
 800e294:	1064      	asrs	r4, r4, #1
 800e296:	f106 0608 	add.w	r6, r6, #8
 800e29a:	d1f4      	bne.n	800e286 <_strtod_l+0x5ae>
 800e29c:	b10b      	cbz	r3, 800e2a2 <_strtod_l+0x5ca>
 800e29e:	4682      	mov	sl, r0
 800e2a0:	468b      	mov	fp, r1
 800e2a2:	9b08      	ldr	r3, [sp, #32]
 800e2a4:	b1b3      	cbz	r3, 800e2d4 <_strtod_l+0x5fc>
 800e2a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e2aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	4659      	mov	r1, fp
 800e2b2:	dd0f      	ble.n	800e2d4 <_strtod_l+0x5fc>
 800e2b4:	2b1f      	cmp	r3, #31
 800e2b6:	dd58      	ble.n	800e36a <_strtod_l+0x692>
 800e2b8:	2b34      	cmp	r3, #52	@ 0x34
 800e2ba:	bfd8      	it	le
 800e2bc:	f04f 33ff 	movle.w	r3, #4294967295
 800e2c0:	f04f 0a00 	mov.w	sl, #0
 800e2c4:	bfcf      	iteee	gt
 800e2c6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e2ca:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e2ce:	4093      	lslle	r3, r2
 800e2d0:	ea03 0b01 	andle.w	fp, r3, r1
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	4650      	mov	r0, sl
 800e2da:	4659      	mov	r1, fp
 800e2dc:	f7f2 fbd4 	bl	8000a88 <__aeabi_dcmpeq>
 800e2e0:	2800      	cmp	r0, #0
 800e2e2:	d1a7      	bne.n	800e234 <_strtod_l+0x55c>
 800e2e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2e6:	464a      	mov	r2, r9
 800e2e8:	9300      	str	r3, [sp, #0]
 800e2ea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e2ec:	462b      	mov	r3, r5
 800e2ee:	9805      	ldr	r0, [sp, #20]
 800e2f0:	f7ff f8d8 	bl	800d4a4 <__s2b>
 800e2f4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e2f6:	2800      	cmp	r0, #0
 800e2f8:	f43f af09 	beq.w	800e10e <_strtod_l+0x436>
 800e2fc:	2400      	movs	r4, #0
 800e2fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e300:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e302:	2a00      	cmp	r2, #0
 800e304:	eba3 0308 	sub.w	r3, r3, r8
 800e308:	bfa8      	it	ge
 800e30a:	2300      	movge	r3, #0
 800e30c:	46a0      	mov	r8, r4
 800e30e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e310:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e314:	9316      	str	r3, [sp, #88]	@ 0x58
 800e316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e318:	9805      	ldr	r0, [sp, #20]
 800e31a:	6859      	ldr	r1, [r3, #4]
 800e31c:	f7ff f81a 	bl	800d354 <_Balloc>
 800e320:	4681      	mov	r9, r0
 800e322:	2800      	cmp	r0, #0
 800e324:	f43f aef7 	beq.w	800e116 <_strtod_l+0x43e>
 800e328:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e32a:	300c      	adds	r0, #12
 800e32c:	691a      	ldr	r2, [r3, #16]
 800e32e:	f103 010c 	add.w	r1, r3, #12
 800e332:	3202      	adds	r2, #2
 800e334:	0092      	lsls	r2, r2, #2
 800e336:	f7fe f89e 	bl	800c476 <memcpy>
 800e33a:	ab1c      	add	r3, sp, #112	@ 0x70
 800e33c:	9301      	str	r3, [sp, #4]
 800e33e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e340:	9300      	str	r3, [sp, #0]
 800e342:	4652      	mov	r2, sl
 800e344:	465b      	mov	r3, fp
 800e346:	9805      	ldr	r0, [sp, #20]
 800e348:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e34c:	f7ff fbd6 	bl	800dafc <__d2b>
 800e350:	901a      	str	r0, [sp, #104]	@ 0x68
 800e352:	2800      	cmp	r0, #0
 800e354:	f43f aedf 	beq.w	800e116 <_strtod_l+0x43e>
 800e358:	2101      	movs	r1, #1
 800e35a:	9805      	ldr	r0, [sp, #20]
 800e35c:	f7ff f938 	bl	800d5d0 <__i2b>
 800e360:	4680      	mov	r8, r0
 800e362:	b948      	cbnz	r0, 800e378 <_strtod_l+0x6a0>
 800e364:	f04f 0800 	mov.w	r8, #0
 800e368:	e6d5      	b.n	800e116 <_strtod_l+0x43e>
 800e36a:	f04f 32ff 	mov.w	r2, #4294967295
 800e36e:	fa02 f303 	lsl.w	r3, r2, r3
 800e372:	ea03 0a0a 	and.w	sl, r3, sl
 800e376:	e7ad      	b.n	800e2d4 <_strtod_l+0x5fc>
 800e378:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e37a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e37c:	2d00      	cmp	r5, #0
 800e37e:	bfab      	itete	ge
 800e380:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e382:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e384:	18ef      	addge	r7, r5, r3
 800e386:	1b5e      	sublt	r6, r3, r5
 800e388:	9b08      	ldr	r3, [sp, #32]
 800e38a:	bfa8      	it	ge
 800e38c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e38e:	eba5 0503 	sub.w	r5, r5, r3
 800e392:	4415      	add	r5, r2
 800e394:	4b34      	ldr	r3, [pc, #208]	@ (800e468 <_strtod_l+0x790>)
 800e396:	f105 35ff 	add.w	r5, r5, #4294967295
 800e39a:	bfb8      	it	lt
 800e39c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e39e:	429d      	cmp	r5, r3
 800e3a0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e3a4:	da50      	bge.n	800e448 <_strtod_l+0x770>
 800e3a6:	1b5b      	subs	r3, r3, r5
 800e3a8:	2b1f      	cmp	r3, #31
 800e3aa:	f04f 0101 	mov.w	r1, #1
 800e3ae:	eba2 0203 	sub.w	r2, r2, r3
 800e3b2:	dc3d      	bgt.n	800e430 <_strtod_l+0x758>
 800e3b4:	fa01 f303 	lsl.w	r3, r1, r3
 800e3b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	9310      	str	r3, [sp, #64]	@ 0x40
 800e3be:	18bd      	adds	r5, r7, r2
 800e3c0:	9b08      	ldr	r3, [sp, #32]
 800e3c2:	42af      	cmp	r7, r5
 800e3c4:	4416      	add	r6, r2
 800e3c6:	441e      	add	r6, r3
 800e3c8:	463b      	mov	r3, r7
 800e3ca:	bfa8      	it	ge
 800e3cc:	462b      	movge	r3, r5
 800e3ce:	42b3      	cmp	r3, r6
 800e3d0:	bfa8      	it	ge
 800e3d2:	4633      	movge	r3, r6
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	bfc2      	ittt	gt
 800e3d8:	1aed      	subgt	r5, r5, r3
 800e3da:	1af6      	subgt	r6, r6, r3
 800e3dc:	1aff      	subgt	r7, r7, r3
 800e3de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	dd16      	ble.n	800e412 <_strtod_l+0x73a>
 800e3e4:	4641      	mov	r1, r8
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	9805      	ldr	r0, [sp, #20]
 800e3ea:	f7ff f9a9 	bl	800d740 <__pow5mult>
 800e3ee:	4680      	mov	r8, r0
 800e3f0:	2800      	cmp	r0, #0
 800e3f2:	d0b7      	beq.n	800e364 <_strtod_l+0x68c>
 800e3f4:	4601      	mov	r1, r0
 800e3f6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e3f8:	9805      	ldr	r0, [sp, #20]
 800e3fa:	f7ff f8ff 	bl	800d5fc <__multiply>
 800e3fe:	900a      	str	r0, [sp, #40]	@ 0x28
 800e400:	2800      	cmp	r0, #0
 800e402:	f43f ae88 	beq.w	800e116 <_strtod_l+0x43e>
 800e406:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e408:	9805      	ldr	r0, [sp, #20]
 800e40a:	f7fe ffe3 	bl	800d3d4 <_Bfree>
 800e40e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e410:	931a      	str	r3, [sp, #104]	@ 0x68
 800e412:	2d00      	cmp	r5, #0
 800e414:	dc1d      	bgt.n	800e452 <_strtod_l+0x77a>
 800e416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e418:	2b00      	cmp	r3, #0
 800e41a:	dd27      	ble.n	800e46c <_strtod_l+0x794>
 800e41c:	4649      	mov	r1, r9
 800e41e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e420:	9805      	ldr	r0, [sp, #20]
 800e422:	f7ff f98d 	bl	800d740 <__pow5mult>
 800e426:	4681      	mov	r9, r0
 800e428:	bb00      	cbnz	r0, 800e46c <_strtod_l+0x794>
 800e42a:	f04f 0900 	mov.w	r9, #0
 800e42e:	e672      	b.n	800e116 <_strtod_l+0x43e>
 800e430:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e434:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e438:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e43c:	35e2      	adds	r5, #226	@ 0xe2
 800e43e:	fa01 f305 	lsl.w	r3, r1, r5
 800e442:	9310      	str	r3, [sp, #64]	@ 0x40
 800e444:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e446:	e7ba      	b.n	800e3be <_strtod_l+0x6e6>
 800e448:	2300      	movs	r3, #0
 800e44a:	9310      	str	r3, [sp, #64]	@ 0x40
 800e44c:	2301      	movs	r3, #1
 800e44e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e450:	e7b5      	b.n	800e3be <_strtod_l+0x6e6>
 800e452:	462a      	mov	r2, r5
 800e454:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e456:	9805      	ldr	r0, [sp, #20]
 800e458:	f7ff f9cc 	bl	800d7f4 <__lshift>
 800e45c:	901a      	str	r0, [sp, #104]	@ 0x68
 800e45e:	2800      	cmp	r0, #0
 800e460:	d1d9      	bne.n	800e416 <_strtod_l+0x73e>
 800e462:	e658      	b.n	800e116 <_strtod_l+0x43e>
 800e464:	08010870 	.word	0x08010870
 800e468:	fffffc02 	.word	0xfffffc02
 800e46c:	2e00      	cmp	r6, #0
 800e46e:	dd07      	ble.n	800e480 <_strtod_l+0x7a8>
 800e470:	4649      	mov	r1, r9
 800e472:	4632      	mov	r2, r6
 800e474:	9805      	ldr	r0, [sp, #20]
 800e476:	f7ff f9bd 	bl	800d7f4 <__lshift>
 800e47a:	4681      	mov	r9, r0
 800e47c:	2800      	cmp	r0, #0
 800e47e:	d0d4      	beq.n	800e42a <_strtod_l+0x752>
 800e480:	2f00      	cmp	r7, #0
 800e482:	dd08      	ble.n	800e496 <_strtod_l+0x7be>
 800e484:	4641      	mov	r1, r8
 800e486:	463a      	mov	r2, r7
 800e488:	9805      	ldr	r0, [sp, #20]
 800e48a:	f7ff f9b3 	bl	800d7f4 <__lshift>
 800e48e:	4680      	mov	r8, r0
 800e490:	2800      	cmp	r0, #0
 800e492:	f43f ae40 	beq.w	800e116 <_strtod_l+0x43e>
 800e496:	464a      	mov	r2, r9
 800e498:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e49a:	9805      	ldr	r0, [sp, #20]
 800e49c:	f7ff fa32 	bl	800d904 <__mdiff>
 800e4a0:	4604      	mov	r4, r0
 800e4a2:	2800      	cmp	r0, #0
 800e4a4:	f43f ae37 	beq.w	800e116 <_strtod_l+0x43e>
 800e4a8:	68c3      	ldr	r3, [r0, #12]
 800e4aa:	4641      	mov	r1, r8
 800e4ac:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	60c3      	str	r3, [r0, #12]
 800e4b2:	f7ff fa0b 	bl	800d8cc <__mcmp>
 800e4b6:	2800      	cmp	r0, #0
 800e4b8:	da3d      	bge.n	800e536 <_strtod_l+0x85e>
 800e4ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4bc:	ea53 030a 	orrs.w	r3, r3, sl
 800e4c0:	d163      	bne.n	800e58a <_strtod_l+0x8b2>
 800e4c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d15f      	bne.n	800e58a <_strtod_l+0x8b2>
 800e4ca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e4ce:	0d1b      	lsrs	r3, r3, #20
 800e4d0:	051b      	lsls	r3, r3, #20
 800e4d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e4d6:	d958      	bls.n	800e58a <_strtod_l+0x8b2>
 800e4d8:	6963      	ldr	r3, [r4, #20]
 800e4da:	b913      	cbnz	r3, 800e4e2 <_strtod_l+0x80a>
 800e4dc:	6923      	ldr	r3, [r4, #16]
 800e4de:	2b01      	cmp	r3, #1
 800e4e0:	dd53      	ble.n	800e58a <_strtod_l+0x8b2>
 800e4e2:	4621      	mov	r1, r4
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	9805      	ldr	r0, [sp, #20]
 800e4e8:	f7ff f984 	bl	800d7f4 <__lshift>
 800e4ec:	4641      	mov	r1, r8
 800e4ee:	4604      	mov	r4, r0
 800e4f0:	f7ff f9ec 	bl	800d8cc <__mcmp>
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	dd48      	ble.n	800e58a <_strtod_l+0x8b2>
 800e4f8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e4fc:	9a08      	ldr	r2, [sp, #32]
 800e4fe:	0d1b      	lsrs	r3, r3, #20
 800e500:	051b      	lsls	r3, r3, #20
 800e502:	2a00      	cmp	r2, #0
 800e504:	d062      	beq.n	800e5cc <_strtod_l+0x8f4>
 800e506:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e50a:	d85f      	bhi.n	800e5cc <_strtod_l+0x8f4>
 800e50c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e510:	f67f ae94 	bls.w	800e23c <_strtod_l+0x564>
 800e514:	4650      	mov	r0, sl
 800e516:	4659      	mov	r1, fp
 800e518:	4ba3      	ldr	r3, [pc, #652]	@ (800e7a8 <_strtod_l+0xad0>)
 800e51a:	2200      	movs	r2, #0
 800e51c:	f7f2 f84c 	bl	80005b8 <__aeabi_dmul>
 800e520:	4ba2      	ldr	r3, [pc, #648]	@ (800e7ac <_strtod_l+0xad4>)
 800e522:	4682      	mov	sl, r0
 800e524:	400b      	ands	r3, r1
 800e526:	468b      	mov	fp, r1
 800e528:	2b00      	cmp	r3, #0
 800e52a:	f47f adff 	bne.w	800e12c <_strtod_l+0x454>
 800e52e:	2322      	movs	r3, #34	@ 0x22
 800e530:	9a05      	ldr	r2, [sp, #20]
 800e532:	6013      	str	r3, [r2, #0]
 800e534:	e5fa      	b.n	800e12c <_strtod_l+0x454>
 800e536:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e53a:	d165      	bne.n	800e608 <_strtod_l+0x930>
 800e53c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e53e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e542:	b35a      	cbz	r2, 800e59c <_strtod_l+0x8c4>
 800e544:	4a9a      	ldr	r2, [pc, #616]	@ (800e7b0 <_strtod_l+0xad8>)
 800e546:	4293      	cmp	r3, r2
 800e548:	d12b      	bne.n	800e5a2 <_strtod_l+0x8ca>
 800e54a:	9b08      	ldr	r3, [sp, #32]
 800e54c:	4651      	mov	r1, sl
 800e54e:	b303      	cbz	r3, 800e592 <_strtod_l+0x8ba>
 800e550:	465a      	mov	r2, fp
 800e552:	4b96      	ldr	r3, [pc, #600]	@ (800e7ac <_strtod_l+0xad4>)
 800e554:	4013      	ands	r3, r2
 800e556:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e55a:	f04f 32ff 	mov.w	r2, #4294967295
 800e55e:	d81b      	bhi.n	800e598 <_strtod_l+0x8c0>
 800e560:	0d1b      	lsrs	r3, r3, #20
 800e562:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e566:	fa02 f303 	lsl.w	r3, r2, r3
 800e56a:	4299      	cmp	r1, r3
 800e56c:	d119      	bne.n	800e5a2 <_strtod_l+0x8ca>
 800e56e:	4b91      	ldr	r3, [pc, #580]	@ (800e7b4 <_strtod_l+0xadc>)
 800e570:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e572:	429a      	cmp	r2, r3
 800e574:	d102      	bne.n	800e57c <_strtod_l+0x8a4>
 800e576:	3101      	adds	r1, #1
 800e578:	f43f adcd 	beq.w	800e116 <_strtod_l+0x43e>
 800e57c:	f04f 0a00 	mov.w	sl, #0
 800e580:	4b8a      	ldr	r3, [pc, #552]	@ (800e7ac <_strtod_l+0xad4>)
 800e582:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e584:	401a      	ands	r2, r3
 800e586:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e58a:	9b08      	ldr	r3, [sp, #32]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d1c1      	bne.n	800e514 <_strtod_l+0x83c>
 800e590:	e5cc      	b.n	800e12c <_strtod_l+0x454>
 800e592:	f04f 33ff 	mov.w	r3, #4294967295
 800e596:	e7e8      	b.n	800e56a <_strtod_l+0x892>
 800e598:	4613      	mov	r3, r2
 800e59a:	e7e6      	b.n	800e56a <_strtod_l+0x892>
 800e59c:	ea53 030a 	orrs.w	r3, r3, sl
 800e5a0:	d0aa      	beq.n	800e4f8 <_strtod_l+0x820>
 800e5a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e5a4:	b1db      	cbz	r3, 800e5de <_strtod_l+0x906>
 800e5a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e5a8:	4213      	tst	r3, r2
 800e5aa:	d0ee      	beq.n	800e58a <_strtod_l+0x8b2>
 800e5ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5ae:	4650      	mov	r0, sl
 800e5b0:	4659      	mov	r1, fp
 800e5b2:	9a08      	ldr	r2, [sp, #32]
 800e5b4:	b1bb      	cbz	r3, 800e5e6 <_strtod_l+0x90e>
 800e5b6:	f7ff fb6d 	bl	800dc94 <sulp>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	460b      	mov	r3, r1
 800e5be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e5c2:	f7f1 fe43 	bl	800024c <__adddf3>
 800e5c6:	4682      	mov	sl, r0
 800e5c8:	468b      	mov	fp, r1
 800e5ca:	e7de      	b.n	800e58a <_strtod_l+0x8b2>
 800e5cc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e5d0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e5d4:	f04f 3aff 	mov.w	sl, #4294967295
 800e5d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e5dc:	e7d5      	b.n	800e58a <_strtod_l+0x8b2>
 800e5de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e5e0:	ea13 0f0a 	tst.w	r3, sl
 800e5e4:	e7e1      	b.n	800e5aa <_strtod_l+0x8d2>
 800e5e6:	f7ff fb55 	bl	800dc94 <sulp>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e5f2:	f7f1 fe29 	bl	8000248 <__aeabi_dsub>
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	4682      	mov	sl, r0
 800e5fc:	468b      	mov	fp, r1
 800e5fe:	f7f2 fa43 	bl	8000a88 <__aeabi_dcmpeq>
 800e602:	2800      	cmp	r0, #0
 800e604:	d0c1      	beq.n	800e58a <_strtod_l+0x8b2>
 800e606:	e619      	b.n	800e23c <_strtod_l+0x564>
 800e608:	4641      	mov	r1, r8
 800e60a:	4620      	mov	r0, r4
 800e60c:	f7ff face 	bl	800dbac <__ratio>
 800e610:	2200      	movs	r2, #0
 800e612:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e616:	4606      	mov	r6, r0
 800e618:	460f      	mov	r7, r1
 800e61a:	f7f2 fa49 	bl	8000ab0 <__aeabi_dcmple>
 800e61e:	2800      	cmp	r0, #0
 800e620:	d06d      	beq.n	800e6fe <_strtod_l+0xa26>
 800e622:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e624:	2b00      	cmp	r3, #0
 800e626:	d178      	bne.n	800e71a <_strtod_l+0xa42>
 800e628:	f1ba 0f00 	cmp.w	sl, #0
 800e62c:	d156      	bne.n	800e6dc <_strtod_l+0xa04>
 800e62e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e634:	2b00      	cmp	r3, #0
 800e636:	d158      	bne.n	800e6ea <_strtod_l+0xa12>
 800e638:	2200      	movs	r2, #0
 800e63a:	4630      	mov	r0, r6
 800e63c:	4639      	mov	r1, r7
 800e63e:	4b5e      	ldr	r3, [pc, #376]	@ (800e7b8 <_strtod_l+0xae0>)
 800e640:	f7f2 fa2c 	bl	8000a9c <__aeabi_dcmplt>
 800e644:	2800      	cmp	r0, #0
 800e646:	d157      	bne.n	800e6f8 <_strtod_l+0xa20>
 800e648:	4630      	mov	r0, r6
 800e64a:	4639      	mov	r1, r7
 800e64c:	2200      	movs	r2, #0
 800e64e:	4b5b      	ldr	r3, [pc, #364]	@ (800e7bc <_strtod_l+0xae4>)
 800e650:	f7f1 ffb2 	bl	80005b8 <__aeabi_dmul>
 800e654:	4606      	mov	r6, r0
 800e656:	460f      	mov	r7, r1
 800e658:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e65c:	9606      	str	r6, [sp, #24]
 800e65e:	9307      	str	r3, [sp, #28]
 800e660:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e664:	4d51      	ldr	r5, [pc, #324]	@ (800e7ac <_strtod_l+0xad4>)
 800e666:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e66a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e66c:	401d      	ands	r5, r3
 800e66e:	4b54      	ldr	r3, [pc, #336]	@ (800e7c0 <_strtod_l+0xae8>)
 800e670:	429d      	cmp	r5, r3
 800e672:	f040 80ab 	bne.w	800e7cc <_strtod_l+0xaf4>
 800e676:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e678:	4650      	mov	r0, sl
 800e67a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e67e:	4659      	mov	r1, fp
 800e680:	f7ff f9d4 	bl	800da2c <__ulp>
 800e684:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e688:	f7f1 ff96 	bl	80005b8 <__aeabi_dmul>
 800e68c:	4652      	mov	r2, sl
 800e68e:	465b      	mov	r3, fp
 800e690:	f7f1 fddc 	bl	800024c <__adddf3>
 800e694:	460b      	mov	r3, r1
 800e696:	4945      	ldr	r1, [pc, #276]	@ (800e7ac <_strtod_l+0xad4>)
 800e698:	4a4a      	ldr	r2, [pc, #296]	@ (800e7c4 <_strtod_l+0xaec>)
 800e69a:	4019      	ands	r1, r3
 800e69c:	4291      	cmp	r1, r2
 800e69e:	4682      	mov	sl, r0
 800e6a0:	d942      	bls.n	800e728 <_strtod_l+0xa50>
 800e6a2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e6a4:	4b43      	ldr	r3, [pc, #268]	@ (800e7b4 <_strtod_l+0xadc>)
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d103      	bne.n	800e6b2 <_strtod_l+0x9da>
 800e6aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	f43f ad32 	beq.w	800e116 <_strtod_l+0x43e>
 800e6b2:	f04f 3aff 	mov.w	sl, #4294967295
 800e6b6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800e7b4 <_strtod_l+0xadc>
 800e6ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e6bc:	9805      	ldr	r0, [sp, #20]
 800e6be:	f7fe fe89 	bl	800d3d4 <_Bfree>
 800e6c2:	4649      	mov	r1, r9
 800e6c4:	9805      	ldr	r0, [sp, #20]
 800e6c6:	f7fe fe85 	bl	800d3d4 <_Bfree>
 800e6ca:	4641      	mov	r1, r8
 800e6cc:	9805      	ldr	r0, [sp, #20]
 800e6ce:	f7fe fe81 	bl	800d3d4 <_Bfree>
 800e6d2:	4621      	mov	r1, r4
 800e6d4:	9805      	ldr	r0, [sp, #20]
 800e6d6:	f7fe fe7d 	bl	800d3d4 <_Bfree>
 800e6da:	e61c      	b.n	800e316 <_strtod_l+0x63e>
 800e6dc:	f1ba 0f01 	cmp.w	sl, #1
 800e6e0:	d103      	bne.n	800e6ea <_strtod_l+0xa12>
 800e6e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	f43f ada9 	beq.w	800e23c <_strtod_l+0x564>
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	4b36      	ldr	r3, [pc, #216]	@ (800e7c8 <_strtod_l+0xaf0>)
 800e6ee:	2600      	movs	r6, #0
 800e6f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e6f4:	4f30      	ldr	r7, [pc, #192]	@ (800e7b8 <_strtod_l+0xae0>)
 800e6f6:	e7b3      	b.n	800e660 <_strtod_l+0x988>
 800e6f8:	2600      	movs	r6, #0
 800e6fa:	4f30      	ldr	r7, [pc, #192]	@ (800e7bc <_strtod_l+0xae4>)
 800e6fc:	e7ac      	b.n	800e658 <_strtod_l+0x980>
 800e6fe:	4630      	mov	r0, r6
 800e700:	4639      	mov	r1, r7
 800e702:	4b2e      	ldr	r3, [pc, #184]	@ (800e7bc <_strtod_l+0xae4>)
 800e704:	2200      	movs	r2, #0
 800e706:	f7f1 ff57 	bl	80005b8 <__aeabi_dmul>
 800e70a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e70c:	4606      	mov	r6, r0
 800e70e:	460f      	mov	r7, r1
 800e710:	2b00      	cmp	r3, #0
 800e712:	d0a1      	beq.n	800e658 <_strtod_l+0x980>
 800e714:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e718:	e7a2      	b.n	800e660 <_strtod_l+0x988>
 800e71a:	2200      	movs	r2, #0
 800e71c:	4b26      	ldr	r3, [pc, #152]	@ (800e7b8 <_strtod_l+0xae0>)
 800e71e:	4616      	mov	r6, r2
 800e720:	461f      	mov	r7, r3
 800e722:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e726:	e79b      	b.n	800e660 <_strtod_l+0x988>
 800e728:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e72c:	9b08      	ldr	r3, [sp, #32]
 800e72e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e732:	2b00      	cmp	r3, #0
 800e734:	d1c1      	bne.n	800e6ba <_strtod_l+0x9e2>
 800e736:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e73a:	0d1b      	lsrs	r3, r3, #20
 800e73c:	051b      	lsls	r3, r3, #20
 800e73e:	429d      	cmp	r5, r3
 800e740:	d1bb      	bne.n	800e6ba <_strtod_l+0x9e2>
 800e742:	4630      	mov	r0, r6
 800e744:	4639      	mov	r1, r7
 800e746:	f7f2 fa97 	bl	8000c78 <__aeabi_d2lz>
 800e74a:	f7f1 ff07 	bl	800055c <__aeabi_l2d>
 800e74e:	4602      	mov	r2, r0
 800e750:	460b      	mov	r3, r1
 800e752:	4630      	mov	r0, r6
 800e754:	4639      	mov	r1, r7
 800e756:	f7f1 fd77 	bl	8000248 <__aeabi_dsub>
 800e75a:	460b      	mov	r3, r1
 800e75c:	4602      	mov	r2, r0
 800e75e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e762:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e766:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e768:	ea46 060a 	orr.w	r6, r6, sl
 800e76c:	431e      	orrs	r6, r3
 800e76e:	d06a      	beq.n	800e846 <_strtod_l+0xb6e>
 800e770:	a309      	add	r3, pc, #36	@ (adr r3, 800e798 <_strtod_l+0xac0>)
 800e772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e776:	f7f2 f991 	bl	8000a9c <__aeabi_dcmplt>
 800e77a:	2800      	cmp	r0, #0
 800e77c:	f47f acd6 	bne.w	800e12c <_strtod_l+0x454>
 800e780:	a307      	add	r3, pc, #28	@ (adr r3, 800e7a0 <_strtod_l+0xac8>)
 800e782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e786:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e78a:	f7f2 f9a5 	bl	8000ad8 <__aeabi_dcmpgt>
 800e78e:	2800      	cmp	r0, #0
 800e790:	d093      	beq.n	800e6ba <_strtod_l+0x9e2>
 800e792:	e4cb      	b.n	800e12c <_strtod_l+0x454>
 800e794:	f3af 8000 	nop.w
 800e798:	94a03595 	.word	0x94a03595
 800e79c:	3fdfffff 	.word	0x3fdfffff
 800e7a0:	35afe535 	.word	0x35afe535
 800e7a4:	3fe00000 	.word	0x3fe00000
 800e7a8:	39500000 	.word	0x39500000
 800e7ac:	7ff00000 	.word	0x7ff00000
 800e7b0:	000fffff 	.word	0x000fffff
 800e7b4:	7fefffff 	.word	0x7fefffff
 800e7b8:	3ff00000 	.word	0x3ff00000
 800e7bc:	3fe00000 	.word	0x3fe00000
 800e7c0:	7fe00000 	.word	0x7fe00000
 800e7c4:	7c9fffff 	.word	0x7c9fffff
 800e7c8:	bff00000 	.word	0xbff00000
 800e7cc:	9b08      	ldr	r3, [sp, #32]
 800e7ce:	b323      	cbz	r3, 800e81a <_strtod_l+0xb42>
 800e7d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e7d4:	d821      	bhi.n	800e81a <_strtod_l+0xb42>
 800e7d6:	a328      	add	r3, pc, #160	@ (adr r3, 800e878 <_strtod_l+0xba0>)
 800e7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7dc:	4630      	mov	r0, r6
 800e7de:	4639      	mov	r1, r7
 800e7e0:	f7f2 f966 	bl	8000ab0 <__aeabi_dcmple>
 800e7e4:	b1a0      	cbz	r0, 800e810 <_strtod_l+0xb38>
 800e7e6:	4639      	mov	r1, r7
 800e7e8:	4630      	mov	r0, r6
 800e7ea:	f7f2 f9bd 	bl	8000b68 <__aeabi_d2uiz>
 800e7ee:	2801      	cmp	r0, #1
 800e7f0:	bf38      	it	cc
 800e7f2:	2001      	movcc	r0, #1
 800e7f4:	f7f1 fe66 	bl	80004c4 <__aeabi_ui2d>
 800e7f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7fa:	4606      	mov	r6, r0
 800e7fc:	460f      	mov	r7, r1
 800e7fe:	b9fb      	cbnz	r3, 800e840 <_strtod_l+0xb68>
 800e800:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e804:	9014      	str	r0, [sp, #80]	@ 0x50
 800e806:	9315      	str	r3, [sp, #84]	@ 0x54
 800e808:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e80c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e810:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e812:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e816:	1b5b      	subs	r3, r3, r5
 800e818:	9311      	str	r3, [sp, #68]	@ 0x44
 800e81a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e81e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e822:	f7ff f903 	bl	800da2c <__ulp>
 800e826:	4602      	mov	r2, r0
 800e828:	460b      	mov	r3, r1
 800e82a:	4650      	mov	r0, sl
 800e82c:	4659      	mov	r1, fp
 800e82e:	f7f1 fec3 	bl	80005b8 <__aeabi_dmul>
 800e832:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e836:	f7f1 fd09 	bl	800024c <__adddf3>
 800e83a:	4682      	mov	sl, r0
 800e83c:	468b      	mov	fp, r1
 800e83e:	e775      	b.n	800e72c <_strtod_l+0xa54>
 800e840:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e844:	e7e0      	b.n	800e808 <_strtod_l+0xb30>
 800e846:	a30e      	add	r3, pc, #56	@ (adr r3, 800e880 <_strtod_l+0xba8>)
 800e848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84c:	f7f2 f926 	bl	8000a9c <__aeabi_dcmplt>
 800e850:	e79d      	b.n	800e78e <_strtod_l+0xab6>
 800e852:	2300      	movs	r3, #0
 800e854:	930e      	str	r3, [sp, #56]	@ 0x38
 800e856:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e858:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e85a:	6013      	str	r3, [r2, #0]
 800e85c:	f7ff ba79 	b.w	800dd52 <_strtod_l+0x7a>
 800e860:	2a65      	cmp	r2, #101	@ 0x65
 800e862:	f43f ab72 	beq.w	800df4a <_strtod_l+0x272>
 800e866:	2a45      	cmp	r2, #69	@ 0x45
 800e868:	f43f ab6f 	beq.w	800df4a <_strtod_l+0x272>
 800e86c:	2301      	movs	r3, #1
 800e86e:	f7ff bbaa 	b.w	800dfc6 <_strtod_l+0x2ee>
 800e872:	bf00      	nop
 800e874:	f3af 8000 	nop.w
 800e878:	ffc00000 	.word	0xffc00000
 800e87c:	41dfffff 	.word	0x41dfffff
 800e880:	94a03595 	.word	0x94a03595
 800e884:	3fcfffff 	.word	0x3fcfffff

0800e888 <_strtod_r>:
 800e888:	4b01      	ldr	r3, [pc, #4]	@ (800e890 <_strtod_r+0x8>)
 800e88a:	f7ff ba25 	b.w	800dcd8 <_strtod_l>
 800e88e:	bf00      	nop
 800e890:	2000062c 	.word	0x2000062c

0800e894 <_strtol_l.isra.0>:
 800e894:	2b24      	cmp	r3, #36	@ 0x24
 800e896:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e89a:	4686      	mov	lr, r0
 800e89c:	4690      	mov	r8, r2
 800e89e:	d801      	bhi.n	800e8a4 <_strtol_l.isra.0+0x10>
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	d106      	bne.n	800e8b2 <_strtol_l.isra.0+0x1e>
 800e8a4:	f7fd fdac 	bl	800c400 <__errno>
 800e8a8:	2316      	movs	r3, #22
 800e8aa:	6003      	str	r3, [r0, #0]
 800e8ac:	2000      	movs	r0, #0
 800e8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8b2:	460d      	mov	r5, r1
 800e8b4:	4833      	ldr	r0, [pc, #204]	@ (800e984 <_strtol_l.isra.0+0xf0>)
 800e8b6:	462a      	mov	r2, r5
 800e8b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e8bc:	5d06      	ldrb	r6, [r0, r4]
 800e8be:	f016 0608 	ands.w	r6, r6, #8
 800e8c2:	d1f8      	bne.n	800e8b6 <_strtol_l.isra.0+0x22>
 800e8c4:	2c2d      	cmp	r4, #45	@ 0x2d
 800e8c6:	d110      	bne.n	800e8ea <_strtol_l.isra.0+0x56>
 800e8c8:	2601      	movs	r6, #1
 800e8ca:	782c      	ldrb	r4, [r5, #0]
 800e8cc:	1c95      	adds	r5, r2, #2
 800e8ce:	f033 0210 	bics.w	r2, r3, #16
 800e8d2:	d115      	bne.n	800e900 <_strtol_l.isra.0+0x6c>
 800e8d4:	2c30      	cmp	r4, #48	@ 0x30
 800e8d6:	d10d      	bne.n	800e8f4 <_strtol_l.isra.0+0x60>
 800e8d8:	782a      	ldrb	r2, [r5, #0]
 800e8da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e8de:	2a58      	cmp	r2, #88	@ 0x58
 800e8e0:	d108      	bne.n	800e8f4 <_strtol_l.isra.0+0x60>
 800e8e2:	786c      	ldrb	r4, [r5, #1]
 800e8e4:	3502      	adds	r5, #2
 800e8e6:	2310      	movs	r3, #16
 800e8e8:	e00a      	b.n	800e900 <_strtol_l.isra.0+0x6c>
 800e8ea:	2c2b      	cmp	r4, #43	@ 0x2b
 800e8ec:	bf04      	itt	eq
 800e8ee:	782c      	ldrbeq	r4, [r5, #0]
 800e8f0:	1c95      	addeq	r5, r2, #2
 800e8f2:	e7ec      	b.n	800e8ce <_strtol_l.isra.0+0x3a>
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d1f6      	bne.n	800e8e6 <_strtol_l.isra.0+0x52>
 800e8f8:	2c30      	cmp	r4, #48	@ 0x30
 800e8fa:	bf14      	ite	ne
 800e8fc:	230a      	movne	r3, #10
 800e8fe:	2308      	moveq	r3, #8
 800e900:	2200      	movs	r2, #0
 800e902:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e906:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e90a:	fbbc f9f3 	udiv	r9, ip, r3
 800e90e:	4610      	mov	r0, r2
 800e910:	fb03 ca19 	mls	sl, r3, r9, ip
 800e914:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e918:	2f09      	cmp	r7, #9
 800e91a:	d80f      	bhi.n	800e93c <_strtol_l.isra.0+0xa8>
 800e91c:	463c      	mov	r4, r7
 800e91e:	42a3      	cmp	r3, r4
 800e920:	dd1b      	ble.n	800e95a <_strtol_l.isra.0+0xc6>
 800e922:	1c57      	adds	r7, r2, #1
 800e924:	d007      	beq.n	800e936 <_strtol_l.isra.0+0xa2>
 800e926:	4581      	cmp	r9, r0
 800e928:	d314      	bcc.n	800e954 <_strtol_l.isra.0+0xc0>
 800e92a:	d101      	bne.n	800e930 <_strtol_l.isra.0+0x9c>
 800e92c:	45a2      	cmp	sl, r4
 800e92e:	db11      	blt.n	800e954 <_strtol_l.isra.0+0xc0>
 800e930:	2201      	movs	r2, #1
 800e932:	fb00 4003 	mla	r0, r0, r3, r4
 800e936:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e93a:	e7eb      	b.n	800e914 <_strtol_l.isra.0+0x80>
 800e93c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e940:	2f19      	cmp	r7, #25
 800e942:	d801      	bhi.n	800e948 <_strtol_l.isra.0+0xb4>
 800e944:	3c37      	subs	r4, #55	@ 0x37
 800e946:	e7ea      	b.n	800e91e <_strtol_l.isra.0+0x8a>
 800e948:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e94c:	2f19      	cmp	r7, #25
 800e94e:	d804      	bhi.n	800e95a <_strtol_l.isra.0+0xc6>
 800e950:	3c57      	subs	r4, #87	@ 0x57
 800e952:	e7e4      	b.n	800e91e <_strtol_l.isra.0+0x8a>
 800e954:	f04f 32ff 	mov.w	r2, #4294967295
 800e958:	e7ed      	b.n	800e936 <_strtol_l.isra.0+0xa2>
 800e95a:	1c53      	adds	r3, r2, #1
 800e95c:	d108      	bne.n	800e970 <_strtol_l.isra.0+0xdc>
 800e95e:	2322      	movs	r3, #34	@ 0x22
 800e960:	4660      	mov	r0, ip
 800e962:	f8ce 3000 	str.w	r3, [lr]
 800e966:	f1b8 0f00 	cmp.w	r8, #0
 800e96a:	d0a0      	beq.n	800e8ae <_strtol_l.isra.0+0x1a>
 800e96c:	1e69      	subs	r1, r5, #1
 800e96e:	e006      	b.n	800e97e <_strtol_l.isra.0+0xea>
 800e970:	b106      	cbz	r6, 800e974 <_strtol_l.isra.0+0xe0>
 800e972:	4240      	negs	r0, r0
 800e974:	f1b8 0f00 	cmp.w	r8, #0
 800e978:	d099      	beq.n	800e8ae <_strtol_l.isra.0+0x1a>
 800e97a:	2a00      	cmp	r2, #0
 800e97c:	d1f6      	bne.n	800e96c <_strtol_l.isra.0+0xd8>
 800e97e:	f8c8 1000 	str.w	r1, [r8]
 800e982:	e794      	b.n	800e8ae <_strtol_l.isra.0+0x1a>
 800e984:	08010899 	.word	0x08010899

0800e988 <_strtol_r>:
 800e988:	f7ff bf84 	b.w	800e894 <_strtol_l.isra.0>

0800e98c <__ssputs_r>:
 800e98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e990:	461f      	mov	r7, r3
 800e992:	688e      	ldr	r6, [r1, #8]
 800e994:	4682      	mov	sl, r0
 800e996:	42be      	cmp	r6, r7
 800e998:	460c      	mov	r4, r1
 800e99a:	4690      	mov	r8, r2
 800e99c:	680b      	ldr	r3, [r1, #0]
 800e99e:	d82d      	bhi.n	800e9fc <__ssputs_r+0x70>
 800e9a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e9a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e9a8:	d026      	beq.n	800e9f8 <__ssputs_r+0x6c>
 800e9aa:	6965      	ldr	r5, [r4, #20]
 800e9ac:	6909      	ldr	r1, [r1, #16]
 800e9ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e9b2:	eba3 0901 	sub.w	r9, r3, r1
 800e9b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e9ba:	1c7b      	adds	r3, r7, #1
 800e9bc:	444b      	add	r3, r9
 800e9be:	106d      	asrs	r5, r5, #1
 800e9c0:	429d      	cmp	r5, r3
 800e9c2:	bf38      	it	cc
 800e9c4:	461d      	movcc	r5, r3
 800e9c6:	0553      	lsls	r3, r2, #21
 800e9c8:	d527      	bpl.n	800ea1a <__ssputs_r+0x8e>
 800e9ca:	4629      	mov	r1, r5
 800e9cc:	f7fe fc36 	bl	800d23c <_malloc_r>
 800e9d0:	4606      	mov	r6, r0
 800e9d2:	b360      	cbz	r0, 800ea2e <__ssputs_r+0xa2>
 800e9d4:	464a      	mov	r2, r9
 800e9d6:	6921      	ldr	r1, [r4, #16]
 800e9d8:	f7fd fd4d 	bl	800c476 <memcpy>
 800e9dc:	89a3      	ldrh	r3, [r4, #12]
 800e9de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e9e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9e6:	81a3      	strh	r3, [r4, #12]
 800e9e8:	6126      	str	r6, [r4, #16]
 800e9ea:	444e      	add	r6, r9
 800e9ec:	6026      	str	r6, [r4, #0]
 800e9ee:	463e      	mov	r6, r7
 800e9f0:	6165      	str	r5, [r4, #20]
 800e9f2:	eba5 0509 	sub.w	r5, r5, r9
 800e9f6:	60a5      	str	r5, [r4, #8]
 800e9f8:	42be      	cmp	r6, r7
 800e9fa:	d900      	bls.n	800e9fe <__ssputs_r+0x72>
 800e9fc:	463e      	mov	r6, r7
 800e9fe:	4632      	mov	r2, r6
 800ea00:	4641      	mov	r1, r8
 800ea02:	6820      	ldr	r0, [r4, #0]
 800ea04:	f000 fb63 	bl	800f0ce <memmove>
 800ea08:	2000      	movs	r0, #0
 800ea0a:	68a3      	ldr	r3, [r4, #8]
 800ea0c:	1b9b      	subs	r3, r3, r6
 800ea0e:	60a3      	str	r3, [r4, #8]
 800ea10:	6823      	ldr	r3, [r4, #0]
 800ea12:	4433      	add	r3, r6
 800ea14:	6023      	str	r3, [r4, #0]
 800ea16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea1a:	462a      	mov	r2, r5
 800ea1c:	f000 ff39 	bl	800f892 <_realloc_r>
 800ea20:	4606      	mov	r6, r0
 800ea22:	2800      	cmp	r0, #0
 800ea24:	d1e0      	bne.n	800e9e8 <__ssputs_r+0x5c>
 800ea26:	4650      	mov	r0, sl
 800ea28:	6921      	ldr	r1, [r4, #16]
 800ea2a:	f7fe fb95 	bl	800d158 <_free_r>
 800ea2e:	230c      	movs	r3, #12
 800ea30:	f8ca 3000 	str.w	r3, [sl]
 800ea34:	89a3      	ldrh	r3, [r4, #12]
 800ea36:	f04f 30ff 	mov.w	r0, #4294967295
 800ea3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea3e:	81a3      	strh	r3, [r4, #12]
 800ea40:	e7e9      	b.n	800ea16 <__ssputs_r+0x8a>
	...

0800ea44 <_svfiprintf_r>:
 800ea44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea48:	4698      	mov	r8, r3
 800ea4a:	898b      	ldrh	r3, [r1, #12]
 800ea4c:	4607      	mov	r7, r0
 800ea4e:	061b      	lsls	r3, r3, #24
 800ea50:	460d      	mov	r5, r1
 800ea52:	4614      	mov	r4, r2
 800ea54:	b09d      	sub	sp, #116	@ 0x74
 800ea56:	d510      	bpl.n	800ea7a <_svfiprintf_r+0x36>
 800ea58:	690b      	ldr	r3, [r1, #16]
 800ea5a:	b973      	cbnz	r3, 800ea7a <_svfiprintf_r+0x36>
 800ea5c:	2140      	movs	r1, #64	@ 0x40
 800ea5e:	f7fe fbed 	bl	800d23c <_malloc_r>
 800ea62:	6028      	str	r0, [r5, #0]
 800ea64:	6128      	str	r0, [r5, #16]
 800ea66:	b930      	cbnz	r0, 800ea76 <_svfiprintf_r+0x32>
 800ea68:	230c      	movs	r3, #12
 800ea6a:	603b      	str	r3, [r7, #0]
 800ea6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea70:	b01d      	add	sp, #116	@ 0x74
 800ea72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea76:	2340      	movs	r3, #64	@ 0x40
 800ea78:	616b      	str	r3, [r5, #20]
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea7e:	2320      	movs	r3, #32
 800ea80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ea84:	2330      	movs	r3, #48	@ 0x30
 800ea86:	f04f 0901 	mov.w	r9, #1
 800ea8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea8e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ec28 <_svfiprintf_r+0x1e4>
 800ea92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ea96:	4623      	mov	r3, r4
 800ea98:	469a      	mov	sl, r3
 800ea9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea9e:	b10a      	cbz	r2, 800eaa4 <_svfiprintf_r+0x60>
 800eaa0:	2a25      	cmp	r2, #37	@ 0x25
 800eaa2:	d1f9      	bne.n	800ea98 <_svfiprintf_r+0x54>
 800eaa4:	ebba 0b04 	subs.w	fp, sl, r4
 800eaa8:	d00b      	beq.n	800eac2 <_svfiprintf_r+0x7e>
 800eaaa:	465b      	mov	r3, fp
 800eaac:	4622      	mov	r2, r4
 800eaae:	4629      	mov	r1, r5
 800eab0:	4638      	mov	r0, r7
 800eab2:	f7ff ff6b 	bl	800e98c <__ssputs_r>
 800eab6:	3001      	adds	r0, #1
 800eab8:	f000 80a7 	beq.w	800ec0a <_svfiprintf_r+0x1c6>
 800eabc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eabe:	445a      	add	r2, fp
 800eac0:	9209      	str	r2, [sp, #36]	@ 0x24
 800eac2:	f89a 3000 	ldrb.w	r3, [sl]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	f000 809f 	beq.w	800ec0a <_svfiprintf_r+0x1c6>
 800eacc:	2300      	movs	r3, #0
 800eace:	f04f 32ff 	mov.w	r2, #4294967295
 800ead2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ead6:	f10a 0a01 	add.w	sl, sl, #1
 800eada:	9304      	str	r3, [sp, #16]
 800eadc:	9307      	str	r3, [sp, #28]
 800eade:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eae2:	931a      	str	r3, [sp, #104]	@ 0x68
 800eae4:	4654      	mov	r4, sl
 800eae6:	2205      	movs	r2, #5
 800eae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaec:	484e      	ldr	r0, [pc, #312]	@ (800ec28 <_svfiprintf_r+0x1e4>)
 800eaee:	f7fd fcb4 	bl	800c45a <memchr>
 800eaf2:	9a04      	ldr	r2, [sp, #16]
 800eaf4:	b9d8      	cbnz	r0, 800eb2e <_svfiprintf_r+0xea>
 800eaf6:	06d0      	lsls	r0, r2, #27
 800eaf8:	bf44      	itt	mi
 800eafa:	2320      	movmi	r3, #32
 800eafc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb00:	0711      	lsls	r1, r2, #28
 800eb02:	bf44      	itt	mi
 800eb04:	232b      	movmi	r3, #43	@ 0x2b
 800eb06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb0a:	f89a 3000 	ldrb.w	r3, [sl]
 800eb0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb10:	d015      	beq.n	800eb3e <_svfiprintf_r+0xfa>
 800eb12:	4654      	mov	r4, sl
 800eb14:	2000      	movs	r0, #0
 800eb16:	f04f 0c0a 	mov.w	ip, #10
 800eb1a:	9a07      	ldr	r2, [sp, #28]
 800eb1c:	4621      	mov	r1, r4
 800eb1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb22:	3b30      	subs	r3, #48	@ 0x30
 800eb24:	2b09      	cmp	r3, #9
 800eb26:	d94b      	bls.n	800ebc0 <_svfiprintf_r+0x17c>
 800eb28:	b1b0      	cbz	r0, 800eb58 <_svfiprintf_r+0x114>
 800eb2a:	9207      	str	r2, [sp, #28]
 800eb2c:	e014      	b.n	800eb58 <_svfiprintf_r+0x114>
 800eb2e:	eba0 0308 	sub.w	r3, r0, r8
 800eb32:	fa09 f303 	lsl.w	r3, r9, r3
 800eb36:	4313      	orrs	r3, r2
 800eb38:	46a2      	mov	sl, r4
 800eb3a:	9304      	str	r3, [sp, #16]
 800eb3c:	e7d2      	b.n	800eae4 <_svfiprintf_r+0xa0>
 800eb3e:	9b03      	ldr	r3, [sp, #12]
 800eb40:	1d19      	adds	r1, r3, #4
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	9103      	str	r1, [sp, #12]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	bfbb      	ittet	lt
 800eb4a:	425b      	neglt	r3, r3
 800eb4c:	f042 0202 	orrlt.w	r2, r2, #2
 800eb50:	9307      	strge	r3, [sp, #28]
 800eb52:	9307      	strlt	r3, [sp, #28]
 800eb54:	bfb8      	it	lt
 800eb56:	9204      	strlt	r2, [sp, #16]
 800eb58:	7823      	ldrb	r3, [r4, #0]
 800eb5a:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb5c:	d10a      	bne.n	800eb74 <_svfiprintf_r+0x130>
 800eb5e:	7863      	ldrb	r3, [r4, #1]
 800eb60:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb62:	d132      	bne.n	800ebca <_svfiprintf_r+0x186>
 800eb64:	9b03      	ldr	r3, [sp, #12]
 800eb66:	3402      	adds	r4, #2
 800eb68:	1d1a      	adds	r2, r3, #4
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	9203      	str	r2, [sp, #12]
 800eb6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb72:	9305      	str	r3, [sp, #20]
 800eb74:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ec2c <_svfiprintf_r+0x1e8>
 800eb78:	2203      	movs	r2, #3
 800eb7a:	4650      	mov	r0, sl
 800eb7c:	7821      	ldrb	r1, [r4, #0]
 800eb7e:	f7fd fc6c 	bl	800c45a <memchr>
 800eb82:	b138      	cbz	r0, 800eb94 <_svfiprintf_r+0x150>
 800eb84:	2240      	movs	r2, #64	@ 0x40
 800eb86:	9b04      	ldr	r3, [sp, #16]
 800eb88:	eba0 000a 	sub.w	r0, r0, sl
 800eb8c:	4082      	lsls	r2, r0
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	3401      	adds	r4, #1
 800eb92:	9304      	str	r3, [sp, #16]
 800eb94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb98:	2206      	movs	r2, #6
 800eb9a:	4825      	ldr	r0, [pc, #148]	@ (800ec30 <_svfiprintf_r+0x1ec>)
 800eb9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eba0:	f7fd fc5b 	bl	800c45a <memchr>
 800eba4:	2800      	cmp	r0, #0
 800eba6:	d036      	beq.n	800ec16 <_svfiprintf_r+0x1d2>
 800eba8:	4b22      	ldr	r3, [pc, #136]	@ (800ec34 <_svfiprintf_r+0x1f0>)
 800ebaa:	bb1b      	cbnz	r3, 800ebf4 <_svfiprintf_r+0x1b0>
 800ebac:	9b03      	ldr	r3, [sp, #12]
 800ebae:	3307      	adds	r3, #7
 800ebb0:	f023 0307 	bic.w	r3, r3, #7
 800ebb4:	3308      	adds	r3, #8
 800ebb6:	9303      	str	r3, [sp, #12]
 800ebb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebba:	4433      	add	r3, r6
 800ebbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebbe:	e76a      	b.n	800ea96 <_svfiprintf_r+0x52>
 800ebc0:	460c      	mov	r4, r1
 800ebc2:	2001      	movs	r0, #1
 800ebc4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebc8:	e7a8      	b.n	800eb1c <_svfiprintf_r+0xd8>
 800ebca:	2300      	movs	r3, #0
 800ebcc:	f04f 0c0a 	mov.w	ip, #10
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	3401      	adds	r4, #1
 800ebd4:	9305      	str	r3, [sp, #20]
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebdc:	3a30      	subs	r2, #48	@ 0x30
 800ebde:	2a09      	cmp	r2, #9
 800ebe0:	d903      	bls.n	800ebea <_svfiprintf_r+0x1a6>
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d0c6      	beq.n	800eb74 <_svfiprintf_r+0x130>
 800ebe6:	9105      	str	r1, [sp, #20]
 800ebe8:	e7c4      	b.n	800eb74 <_svfiprintf_r+0x130>
 800ebea:	4604      	mov	r4, r0
 800ebec:	2301      	movs	r3, #1
 800ebee:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebf2:	e7f0      	b.n	800ebd6 <_svfiprintf_r+0x192>
 800ebf4:	ab03      	add	r3, sp, #12
 800ebf6:	9300      	str	r3, [sp, #0]
 800ebf8:	462a      	mov	r2, r5
 800ebfa:	4638      	mov	r0, r7
 800ebfc:	4b0e      	ldr	r3, [pc, #56]	@ (800ec38 <_svfiprintf_r+0x1f4>)
 800ebfe:	a904      	add	r1, sp, #16
 800ec00:	f7fc fbcc 	bl	800b39c <_printf_float>
 800ec04:	1c42      	adds	r2, r0, #1
 800ec06:	4606      	mov	r6, r0
 800ec08:	d1d6      	bne.n	800ebb8 <_svfiprintf_r+0x174>
 800ec0a:	89ab      	ldrh	r3, [r5, #12]
 800ec0c:	065b      	lsls	r3, r3, #25
 800ec0e:	f53f af2d 	bmi.w	800ea6c <_svfiprintf_r+0x28>
 800ec12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec14:	e72c      	b.n	800ea70 <_svfiprintf_r+0x2c>
 800ec16:	ab03      	add	r3, sp, #12
 800ec18:	9300      	str	r3, [sp, #0]
 800ec1a:	462a      	mov	r2, r5
 800ec1c:	4638      	mov	r0, r7
 800ec1e:	4b06      	ldr	r3, [pc, #24]	@ (800ec38 <_svfiprintf_r+0x1f4>)
 800ec20:	a904      	add	r1, sp, #16
 800ec22:	f7fc fe59 	bl	800b8d8 <_printf_i>
 800ec26:	e7ed      	b.n	800ec04 <_svfiprintf_r+0x1c0>
 800ec28:	08010691 	.word	0x08010691
 800ec2c:	08010697 	.word	0x08010697
 800ec30:	0801069b 	.word	0x0801069b
 800ec34:	0800b39d 	.word	0x0800b39d
 800ec38:	0800e98d 	.word	0x0800e98d

0800ec3c <__sfputc_r>:
 800ec3c:	6893      	ldr	r3, [r2, #8]
 800ec3e:	b410      	push	{r4}
 800ec40:	3b01      	subs	r3, #1
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	6093      	str	r3, [r2, #8]
 800ec46:	da07      	bge.n	800ec58 <__sfputc_r+0x1c>
 800ec48:	6994      	ldr	r4, [r2, #24]
 800ec4a:	42a3      	cmp	r3, r4
 800ec4c:	db01      	blt.n	800ec52 <__sfputc_r+0x16>
 800ec4e:	290a      	cmp	r1, #10
 800ec50:	d102      	bne.n	800ec58 <__sfputc_r+0x1c>
 800ec52:	bc10      	pop	{r4}
 800ec54:	f7fd baed 	b.w	800c232 <__swbuf_r>
 800ec58:	6813      	ldr	r3, [r2, #0]
 800ec5a:	1c58      	adds	r0, r3, #1
 800ec5c:	6010      	str	r0, [r2, #0]
 800ec5e:	7019      	strb	r1, [r3, #0]
 800ec60:	4608      	mov	r0, r1
 800ec62:	bc10      	pop	{r4}
 800ec64:	4770      	bx	lr

0800ec66 <__sfputs_r>:
 800ec66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec68:	4606      	mov	r6, r0
 800ec6a:	460f      	mov	r7, r1
 800ec6c:	4614      	mov	r4, r2
 800ec6e:	18d5      	adds	r5, r2, r3
 800ec70:	42ac      	cmp	r4, r5
 800ec72:	d101      	bne.n	800ec78 <__sfputs_r+0x12>
 800ec74:	2000      	movs	r0, #0
 800ec76:	e007      	b.n	800ec88 <__sfputs_r+0x22>
 800ec78:	463a      	mov	r2, r7
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec80:	f7ff ffdc 	bl	800ec3c <__sfputc_r>
 800ec84:	1c43      	adds	r3, r0, #1
 800ec86:	d1f3      	bne.n	800ec70 <__sfputs_r+0xa>
 800ec88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ec8c <_vfiprintf_r>:
 800ec8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec90:	460d      	mov	r5, r1
 800ec92:	4614      	mov	r4, r2
 800ec94:	4698      	mov	r8, r3
 800ec96:	4606      	mov	r6, r0
 800ec98:	b09d      	sub	sp, #116	@ 0x74
 800ec9a:	b118      	cbz	r0, 800eca4 <_vfiprintf_r+0x18>
 800ec9c:	6a03      	ldr	r3, [r0, #32]
 800ec9e:	b90b      	cbnz	r3, 800eca4 <_vfiprintf_r+0x18>
 800eca0:	f7fd f9ce 	bl	800c040 <__sinit>
 800eca4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eca6:	07d9      	lsls	r1, r3, #31
 800eca8:	d405      	bmi.n	800ecb6 <_vfiprintf_r+0x2a>
 800ecaa:	89ab      	ldrh	r3, [r5, #12]
 800ecac:	059a      	lsls	r2, r3, #22
 800ecae:	d402      	bmi.n	800ecb6 <_vfiprintf_r+0x2a>
 800ecb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ecb2:	f7fd fbd0 	bl	800c456 <__retarget_lock_acquire_recursive>
 800ecb6:	89ab      	ldrh	r3, [r5, #12]
 800ecb8:	071b      	lsls	r3, r3, #28
 800ecba:	d501      	bpl.n	800ecc0 <_vfiprintf_r+0x34>
 800ecbc:	692b      	ldr	r3, [r5, #16]
 800ecbe:	b99b      	cbnz	r3, 800ece8 <_vfiprintf_r+0x5c>
 800ecc0:	4629      	mov	r1, r5
 800ecc2:	4630      	mov	r0, r6
 800ecc4:	f7fd faf4 	bl	800c2b0 <__swsetup_r>
 800ecc8:	b170      	cbz	r0, 800ece8 <_vfiprintf_r+0x5c>
 800ecca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eccc:	07dc      	lsls	r4, r3, #31
 800ecce:	d504      	bpl.n	800ecda <_vfiprintf_r+0x4e>
 800ecd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ecd4:	b01d      	add	sp, #116	@ 0x74
 800ecd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecda:	89ab      	ldrh	r3, [r5, #12]
 800ecdc:	0598      	lsls	r0, r3, #22
 800ecde:	d4f7      	bmi.n	800ecd0 <_vfiprintf_r+0x44>
 800ece0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ece2:	f7fd fbb9 	bl	800c458 <__retarget_lock_release_recursive>
 800ece6:	e7f3      	b.n	800ecd0 <_vfiprintf_r+0x44>
 800ece8:	2300      	movs	r3, #0
 800ecea:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecec:	2320      	movs	r3, #32
 800ecee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ecf2:	2330      	movs	r3, #48	@ 0x30
 800ecf4:	f04f 0901 	mov.w	r9, #1
 800ecf8:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecfc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800eea8 <_vfiprintf_r+0x21c>
 800ed00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ed04:	4623      	mov	r3, r4
 800ed06:	469a      	mov	sl, r3
 800ed08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed0c:	b10a      	cbz	r2, 800ed12 <_vfiprintf_r+0x86>
 800ed0e:	2a25      	cmp	r2, #37	@ 0x25
 800ed10:	d1f9      	bne.n	800ed06 <_vfiprintf_r+0x7a>
 800ed12:	ebba 0b04 	subs.w	fp, sl, r4
 800ed16:	d00b      	beq.n	800ed30 <_vfiprintf_r+0xa4>
 800ed18:	465b      	mov	r3, fp
 800ed1a:	4622      	mov	r2, r4
 800ed1c:	4629      	mov	r1, r5
 800ed1e:	4630      	mov	r0, r6
 800ed20:	f7ff ffa1 	bl	800ec66 <__sfputs_r>
 800ed24:	3001      	adds	r0, #1
 800ed26:	f000 80a7 	beq.w	800ee78 <_vfiprintf_r+0x1ec>
 800ed2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed2c:	445a      	add	r2, fp
 800ed2e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed30:	f89a 3000 	ldrb.w	r3, [sl]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	f000 809f 	beq.w	800ee78 <_vfiprintf_r+0x1ec>
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ed40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed44:	f10a 0a01 	add.w	sl, sl, #1
 800ed48:	9304      	str	r3, [sp, #16]
 800ed4a:	9307      	str	r3, [sp, #28]
 800ed4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ed50:	931a      	str	r3, [sp, #104]	@ 0x68
 800ed52:	4654      	mov	r4, sl
 800ed54:	2205      	movs	r2, #5
 800ed56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed5a:	4853      	ldr	r0, [pc, #332]	@ (800eea8 <_vfiprintf_r+0x21c>)
 800ed5c:	f7fd fb7d 	bl	800c45a <memchr>
 800ed60:	9a04      	ldr	r2, [sp, #16]
 800ed62:	b9d8      	cbnz	r0, 800ed9c <_vfiprintf_r+0x110>
 800ed64:	06d1      	lsls	r1, r2, #27
 800ed66:	bf44      	itt	mi
 800ed68:	2320      	movmi	r3, #32
 800ed6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed6e:	0713      	lsls	r3, r2, #28
 800ed70:	bf44      	itt	mi
 800ed72:	232b      	movmi	r3, #43	@ 0x2b
 800ed74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed78:	f89a 3000 	ldrb.w	r3, [sl]
 800ed7c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed7e:	d015      	beq.n	800edac <_vfiprintf_r+0x120>
 800ed80:	4654      	mov	r4, sl
 800ed82:	2000      	movs	r0, #0
 800ed84:	f04f 0c0a 	mov.w	ip, #10
 800ed88:	9a07      	ldr	r2, [sp, #28]
 800ed8a:	4621      	mov	r1, r4
 800ed8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed90:	3b30      	subs	r3, #48	@ 0x30
 800ed92:	2b09      	cmp	r3, #9
 800ed94:	d94b      	bls.n	800ee2e <_vfiprintf_r+0x1a2>
 800ed96:	b1b0      	cbz	r0, 800edc6 <_vfiprintf_r+0x13a>
 800ed98:	9207      	str	r2, [sp, #28]
 800ed9a:	e014      	b.n	800edc6 <_vfiprintf_r+0x13a>
 800ed9c:	eba0 0308 	sub.w	r3, r0, r8
 800eda0:	fa09 f303 	lsl.w	r3, r9, r3
 800eda4:	4313      	orrs	r3, r2
 800eda6:	46a2      	mov	sl, r4
 800eda8:	9304      	str	r3, [sp, #16]
 800edaa:	e7d2      	b.n	800ed52 <_vfiprintf_r+0xc6>
 800edac:	9b03      	ldr	r3, [sp, #12]
 800edae:	1d19      	adds	r1, r3, #4
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	9103      	str	r1, [sp, #12]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	bfbb      	ittet	lt
 800edb8:	425b      	neglt	r3, r3
 800edba:	f042 0202 	orrlt.w	r2, r2, #2
 800edbe:	9307      	strge	r3, [sp, #28]
 800edc0:	9307      	strlt	r3, [sp, #28]
 800edc2:	bfb8      	it	lt
 800edc4:	9204      	strlt	r2, [sp, #16]
 800edc6:	7823      	ldrb	r3, [r4, #0]
 800edc8:	2b2e      	cmp	r3, #46	@ 0x2e
 800edca:	d10a      	bne.n	800ede2 <_vfiprintf_r+0x156>
 800edcc:	7863      	ldrb	r3, [r4, #1]
 800edce:	2b2a      	cmp	r3, #42	@ 0x2a
 800edd0:	d132      	bne.n	800ee38 <_vfiprintf_r+0x1ac>
 800edd2:	9b03      	ldr	r3, [sp, #12]
 800edd4:	3402      	adds	r4, #2
 800edd6:	1d1a      	adds	r2, r3, #4
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	9203      	str	r2, [sp, #12]
 800eddc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ede0:	9305      	str	r3, [sp, #20]
 800ede2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800eeac <_vfiprintf_r+0x220>
 800ede6:	2203      	movs	r2, #3
 800ede8:	4650      	mov	r0, sl
 800edea:	7821      	ldrb	r1, [r4, #0]
 800edec:	f7fd fb35 	bl	800c45a <memchr>
 800edf0:	b138      	cbz	r0, 800ee02 <_vfiprintf_r+0x176>
 800edf2:	2240      	movs	r2, #64	@ 0x40
 800edf4:	9b04      	ldr	r3, [sp, #16]
 800edf6:	eba0 000a 	sub.w	r0, r0, sl
 800edfa:	4082      	lsls	r2, r0
 800edfc:	4313      	orrs	r3, r2
 800edfe:	3401      	adds	r4, #1
 800ee00:	9304      	str	r3, [sp, #16]
 800ee02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee06:	2206      	movs	r2, #6
 800ee08:	4829      	ldr	r0, [pc, #164]	@ (800eeb0 <_vfiprintf_r+0x224>)
 800ee0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ee0e:	f7fd fb24 	bl	800c45a <memchr>
 800ee12:	2800      	cmp	r0, #0
 800ee14:	d03f      	beq.n	800ee96 <_vfiprintf_r+0x20a>
 800ee16:	4b27      	ldr	r3, [pc, #156]	@ (800eeb4 <_vfiprintf_r+0x228>)
 800ee18:	bb1b      	cbnz	r3, 800ee62 <_vfiprintf_r+0x1d6>
 800ee1a:	9b03      	ldr	r3, [sp, #12]
 800ee1c:	3307      	adds	r3, #7
 800ee1e:	f023 0307 	bic.w	r3, r3, #7
 800ee22:	3308      	adds	r3, #8
 800ee24:	9303      	str	r3, [sp, #12]
 800ee26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee28:	443b      	add	r3, r7
 800ee2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee2c:	e76a      	b.n	800ed04 <_vfiprintf_r+0x78>
 800ee2e:	460c      	mov	r4, r1
 800ee30:	2001      	movs	r0, #1
 800ee32:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee36:	e7a8      	b.n	800ed8a <_vfiprintf_r+0xfe>
 800ee38:	2300      	movs	r3, #0
 800ee3a:	f04f 0c0a 	mov.w	ip, #10
 800ee3e:	4619      	mov	r1, r3
 800ee40:	3401      	adds	r4, #1
 800ee42:	9305      	str	r3, [sp, #20]
 800ee44:	4620      	mov	r0, r4
 800ee46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee4a:	3a30      	subs	r2, #48	@ 0x30
 800ee4c:	2a09      	cmp	r2, #9
 800ee4e:	d903      	bls.n	800ee58 <_vfiprintf_r+0x1cc>
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d0c6      	beq.n	800ede2 <_vfiprintf_r+0x156>
 800ee54:	9105      	str	r1, [sp, #20]
 800ee56:	e7c4      	b.n	800ede2 <_vfiprintf_r+0x156>
 800ee58:	4604      	mov	r4, r0
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee60:	e7f0      	b.n	800ee44 <_vfiprintf_r+0x1b8>
 800ee62:	ab03      	add	r3, sp, #12
 800ee64:	9300      	str	r3, [sp, #0]
 800ee66:	462a      	mov	r2, r5
 800ee68:	4630      	mov	r0, r6
 800ee6a:	4b13      	ldr	r3, [pc, #76]	@ (800eeb8 <_vfiprintf_r+0x22c>)
 800ee6c:	a904      	add	r1, sp, #16
 800ee6e:	f7fc fa95 	bl	800b39c <_printf_float>
 800ee72:	4607      	mov	r7, r0
 800ee74:	1c78      	adds	r0, r7, #1
 800ee76:	d1d6      	bne.n	800ee26 <_vfiprintf_r+0x19a>
 800ee78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee7a:	07d9      	lsls	r1, r3, #31
 800ee7c:	d405      	bmi.n	800ee8a <_vfiprintf_r+0x1fe>
 800ee7e:	89ab      	ldrh	r3, [r5, #12]
 800ee80:	059a      	lsls	r2, r3, #22
 800ee82:	d402      	bmi.n	800ee8a <_vfiprintf_r+0x1fe>
 800ee84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee86:	f7fd fae7 	bl	800c458 <__retarget_lock_release_recursive>
 800ee8a:	89ab      	ldrh	r3, [r5, #12]
 800ee8c:	065b      	lsls	r3, r3, #25
 800ee8e:	f53f af1f 	bmi.w	800ecd0 <_vfiprintf_r+0x44>
 800ee92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee94:	e71e      	b.n	800ecd4 <_vfiprintf_r+0x48>
 800ee96:	ab03      	add	r3, sp, #12
 800ee98:	9300      	str	r3, [sp, #0]
 800ee9a:	462a      	mov	r2, r5
 800ee9c:	4630      	mov	r0, r6
 800ee9e:	4b06      	ldr	r3, [pc, #24]	@ (800eeb8 <_vfiprintf_r+0x22c>)
 800eea0:	a904      	add	r1, sp, #16
 800eea2:	f7fc fd19 	bl	800b8d8 <_printf_i>
 800eea6:	e7e4      	b.n	800ee72 <_vfiprintf_r+0x1e6>
 800eea8:	08010691 	.word	0x08010691
 800eeac:	08010697 	.word	0x08010697
 800eeb0:	0801069b 	.word	0x0801069b
 800eeb4:	0800b39d 	.word	0x0800b39d
 800eeb8:	0800ec67 	.word	0x0800ec67

0800eebc <__sflush_r>:
 800eebc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eec2:	0716      	lsls	r6, r2, #28
 800eec4:	4605      	mov	r5, r0
 800eec6:	460c      	mov	r4, r1
 800eec8:	d454      	bmi.n	800ef74 <__sflush_r+0xb8>
 800eeca:	684b      	ldr	r3, [r1, #4]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	dc02      	bgt.n	800eed6 <__sflush_r+0x1a>
 800eed0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	dd48      	ble.n	800ef68 <__sflush_r+0xac>
 800eed6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eed8:	2e00      	cmp	r6, #0
 800eeda:	d045      	beq.n	800ef68 <__sflush_r+0xac>
 800eedc:	2300      	movs	r3, #0
 800eede:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eee2:	682f      	ldr	r7, [r5, #0]
 800eee4:	6a21      	ldr	r1, [r4, #32]
 800eee6:	602b      	str	r3, [r5, #0]
 800eee8:	d030      	beq.n	800ef4c <__sflush_r+0x90>
 800eeea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eeec:	89a3      	ldrh	r3, [r4, #12]
 800eeee:	0759      	lsls	r1, r3, #29
 800eef0:	d505      	bpl.n	800eefe <__sflush_r+0x42>
 800eef2:	6863      	ldr	r3, [r4, #4]
 800eef4:	1ad2      	subs	r2, r2, r3
 800eef6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eef8:	b10b      	cbz	r3, 800eefe <__sflush_r+0x42>
 800eefa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eefc:	1ad2      	subs	r2, r2, r3
 800eefe:	2300      	movs	r3, #0
 800ef00:	4628      	mov	r0, r5
 800ef02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef04:	6a21      	ldr	r1, [r4, #32]
 800ef06:	47b0      	blx	r6
 800ef08:	1c43      	adds	r3, r0, #1
 800ef0a:	89a3      	ldrh	r3, [r4, #12]
 800ef0c:	d106      	bne.n	800ef1c <__sflush_r+0x60>
 800ef0e:	6829      	ldr	r1, [r5, #0]
 800ef10:	291d      	cmp	r1, #29
 800ef12:	d82b      	bhi.n	800ef6c <__sflush_r+0xb0>
 800ef14:	4a28      	ldr	r2, [pc, #160]	@ (800efb8 <__sflush_r+0xfc>)
 800ef16:	40ca      	lsrs	r2, r1
 800ef18:	07d6      	lsls	r6, r2, #31
 800ef1a:	d527      	bpl.n	800ef6c <__sflush_r+0xb0>
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	6062      	str	r2, [r4, #4]
 800ef20:	6922      	ldr	r2, [r4, #16]
 800ef22:	04d9      	lsls	r1, r3, #19
 800ef24:	6022      	str	r2, [r4, #0]
 800ef26:	d504      	bpl.n	800ef32 <__sflush_r+0x76>
 800ef28:	1c42      	adds	r2, r0, #1
 800ef2a:	d101      	bne.n	800ef30 <__sflush_r+0x74>
 800ef2c:	682b      	ldr	r3, [r5, #0]
 800ef2e:	b903      	cbnz	r3, 800ef32 <__sflush_r+0x76>
 800ef30:	6560      	str	r0, [r4, #84]	@ 0x54
 800ef32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef34:	602f      	str	r7, [r5, #0]
 800ef36:	b1b9      	cbz	r1, 800ef68 <__sflush_r+0xac>
 800ef38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef3c:	4299      	cmp	r1, r3
 800ef3e:	d002      	beq.n	800ef46 <__sflush_r+0x8a>
 800ef40:	4628      	mov	r0, r5
 800ef42:	f7fe f909 	bl	800d158 <_free_r>
 800ef46:	2300      	movs	r3, #0
 800ef48:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef4a:	e00d      	b.n	800ef68 <__sflush_r+0xac>
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	4628      	mov	r0, r5
 800ef50:	47b0      	blx	r6
 800ef52:	4602      	mov	r2, r0
 800ef54:	1c50      	adds	r0, r2, #1
 800ef56:	d1c9      	bne.n	800eeec <__sflush_r+0x30>
 800ef58:	682b      	ldr	r3, [r5, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d0c6      	beq.n	800eeec <__sflush_r+0x30>
 800ef5e:	2b1d      	cmp	r3, #29
 800ef60:	d001      	beq.n	800ef66 <__sflush_r+0xaa>
 800ef62:	2b16      	cmp	r3, #22
 800ef64:	d11d      	bne.n	800efa2 <__sflush_r+0xe6>
 800ef66:	602f      	str	r7, [r5, #0]
 800ef68:	2000      	movs	r0, #0
 800ef6a:	e021      	b.n	800efb0 <__sflush_r+0xf4>
 800ef6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef70:	b21b      	sxth	r3, r3
 800ef72:	e01a      	b.n	800efaa <__sflush_r+0xee>
 800ef74:	690f      	ldr	r7, [r1, #16]
 800ef76:	2f00      	cmp	r7, #0
 800ef78:	d0f6      	beq.n	800ef68 <__sflush_r+0xac>
 800ef7a:	0793      	lsls	r3, r2, #30
 800ef7c:	bf18      	it	ne
 800ef7e:	2300      	movne	r3, #0
 800ef80:	680e      	ldr	r6, [r1, #0]
 800ef82:	bf08      	it	eq
 800ef84:	694b      	ldreq	r3, [r1, #20]
 800ef86:	1bf6      	subs	r6, r6, r7
 800ef88:	600f      	str	r7, [r1, #0]
 800ef8a:	608b      	str	r3, [r1, #8]
 800ef8c:	2e00      	cmp	r6, #0
 800ef8e:	ddeb      	ble.n	800ef68 <__sflush_r+0xac>
 800ef90:	4633      	mov	r3, r6
 800ef92:	463a      	mov	r2, r7
 800ef94:	4628      	mov	r0, r5
 800ef96:	6a21      	ldr	r1, [r4, #32]
 800ef98:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ef9c:	47e0      	blx	ip
 800ef9e:	2800      	cmp	r0, #0
 800efa0:	dc07      	bgt.n	800efb2 <__sflush_r+0xf6>
 800efa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efaa:	f04f 30ff 	mov.w	r0, #4294967295
 800efae:	81a3      	strh	r3, [r4, #12]
 800efb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efb2:	4407      	add	r7, r0
 800efb4:	1a36      	subs	r6, r6, r0
 800efb6:	e7e9      	b.n	800ef8c <__sflush_r+0xd0>
 800efb8:	20400001 	.word	0x20400001

0800efbc <_fflush_r>:
 800efbc:	b538      	push	{r3, r4, r5, lr}
 800efbe:	690b      	ldr	r3, [r1, #16]
 800efc0:	4605      	mov	r5, r0
 800efc2:	460c      	mov	r4, r1
 800efc4:	b913      	cbnz	r3, 800efcc <_fflush_r+0x10>
 800efc6:	2500      	movs	r5, #0
 800efc8:	4628      	mov	r0, r5
 800efca:	bd38      	pop	{r3, r4, r5, pc}
 800efcc:	b118      	cbz	r0, 800efd6 <_fflush_r+0x1a>
 800efce:	6a03      	ldr	r3, [r0, #32]
 800efd0:	b90b      	cbnz	r3, 800efd6 <_fflush_r+0x1a>
 800efd2:	f7fd f835 	bl	800c040 <__sinit>
 800efd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d0f3      	beq.n	800efc6 <_fflush_r+0xa>
 800efde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800efe0:	07d0      	lsls	r0, r2, #31
 800efe2:	d404      	bmi.n	800efee <_fflush_r+0x32>
 800efe4:	0599      	lsls	r1, r3, #22
 800efe6:	d402      	bmi.n	800efee <_fflush_r+0x32>
 800efe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800efea:	f7fd fa34 	bl	800c456 <__retarget_lock_acquire_recursive>
 800efee:	4628      	mov	r0, r5
 800eff0:	4621      	mov	r1, r4
 800eff2:	f7ff ff63 	bl	800eebc <__sflush_r>
 800eff6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eff8:	4605      	mov	r5, r0
 800effa:	07da      	lsls	r2, r3, #31
 800effc:	d4e4      	bmi.n	800efc8 <_fflush_r+0xc>
 800effe:	89a3      	ldrh	r3, [r4, #12]
 800f000:	059b      	lsls	r3, r3, #22
 800f002:	d4e1      	bmi.n	800efc8 <_fflush_r+0xc>
 800f004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f006:	f7fd fa27 	bl	800c458 <__retarget_lock_release_recursive>
 800f00a:	e7dd      	b.n	800efc8 <_fflush_r+0xc>

0800f00c <__swhatbuf_r>:
 800f00c:	b570      	push	{r4, r5, r6, lr}
 800f00e:	460c      	mov	r4, r1
 800f010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f014:	4615      	mov	r5, r2
 800f016:	2900      	cmp	r1, #0
 800f018:	461e      	mov	r6, r3
 800f01a:	b096      	sub	sp, #88	@ 0x58
 800f01c:	da0c      	bge.n	800f038 <__swhatbuf_r+0x2c>
 800f01e:	89a3      	ldrh	r3, [r4, #12]
 800f020:	2100      	movs	r1, #0
 800f022:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f026:	bf14      	ite	ne
 800f028:	2340      	movne	r3, #64	@ 0x40
 800f02a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f02e:	2000      	movs	r0, #0
 800f030:	6031      	str	r1, [r6, #0]
 800f032:	602b      	str	r3, [r5, #0]
 800f034:	b016      	add	sp, #88	@ 0x58
 800f036:	bd70      	pop	{r4, r5, r6, pc}
 800f038:	466a      	mov	r2, sp
 800f03a:	f000 f875 	bl	800f128 <_fstat_r>
 800f03e:	2800      	cmp	r0, #0
 800f040:	dbed      	blt.n	800f01e <__swhatbuf_r+0x12>
 800f042:	9901      	ldr	r1, [sp, #4]
 800f044:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f048:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f04c:	4259      	negs	r1, r3
 800f04e:	4159      	adcs	r1, r3
 800f050:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f054:	e7eb      	b.n	800f02e <__swhatbuf_r+0x22>

0800f056 <__smakebuf_r>:
 800f056:	898b      	ldrh	r3, [r1, #12]
 800f058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f05a:	079d      	lsls	r5, r3, #30
 800f05c:	4606      	mov	r6, r0
 800f05e:	460c      	mov	r4, r1
 800f060:	d507      	bpl.n	800f072 <__smakebuf_r+0x1c>
 800f062:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f066:	6023      	str	r3, [r4, #0]
 800f068:	6123      	str	r3, [r4, #16]
 800f06a:	2301      	movs	r3, #1
 800f06c:	6163      	str	r3, [r4, #20]
 800f06e:	b003      	add	sp, #12
 800f070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f072:	466a      	mov	r2, sp
 800f074:	ab01      	add	r3, sp, #4
 800f076:	f7ff ffc9 	bl	800f00c <__swhatbuf_r>
 800f07a:	9f00      	ldr	r7, [sp, #0]
 800f07c:	4605      	mov	r5, r0
 800f07e:	4639      	mov	r1, r7
 800f080:	4630      	mov	r0, r6
 800f082:	f7fe f8db 	bl	800d23c <_malloc_r>
 800f086:	b948      	cbnz	r0, 800f09c <__smakebuf_r+0x46>
 800f088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f08c:	059a      	lsls	r2, r3, #22
 800f08e:	d4ee      	bmi.n	800f06e <__smakebuf_r+0x18>
 800f090:	f023 0303 	bic.w	r3, r3, #3
 800f094:	f043 0302 	orr.w	r3, r3, #2
 800f098:	81a3      	strh	r3, [r4, #12]
 800f09a:	e7e2      	b.n	800f062 <__smakebuf_r+0xc>
 800f09c:	89a3      	ldrh	r3, [r4, #12]
 800f09e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f0a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0a6:	81a3      	strh	r3, [r4, #12]
 800f0a8:	9b01      	ldr	r3, [sp, #4]
 800f0aa:	6020      	str	r0, [r4, #0]
 800f0ac:	b15b      	cbz	r3, 800f0c6 <__smakebuf_r+0x70>
 800f0ae:	4630      	mov	r0, r6
 800f0b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0b4:	f000 f84a 	bl	800f14c <_isatty_r>
 800f0b8:	b128      	cbz	r0, 800f0c6 <__smakebuf_r+0x70>
 800f0ba:	89a3      	ldrh	r3, [r4, #12]
 800f0bc:	f023 0303 	bic.w	r3, r3, #3
 800f0c0:	f043 0301 	orr.w	r3, r3, #1
 800f0c4:	81a3      	strh	r3, [r4, #12]
 800f0c6:	89a3      	ldrh	r3, [r4, #12]
 800f0c8:	431d      	orrs	r5, r3
 800f0ca:	81a5      	strh	r5, [r4, #12]
 800f0cc:	e7cf      	b.n	800f06e <__smakebuf_r+0x18>

0800f0ce <memmove>:
 800f0ce:	4288      	cmp	r0, r1
 800f0d0:	b510      	push	{r4, lr}
 800f0d2:	eb01 0402 	add.w	r4, r1, r2
 800f0d6:	d902      	bls.n	800f0de <memmove+0x10>
 800f0d8:	4284      	cmp	r4, r0
 800f0da:	4623      	mov	r3, r4
 800f0dc:	d807      	bhi.n	800f0ee <memmove+0x20>
 800f0de:	1e43      	subs	r3, r0, #1
 800f0e0:	42a1      	cmp	r1, r4
 800f0e2:	d008      	beq.n	800f0f6 <memmove+0x28>
 800f0e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f0ec:	e7f8      	b.n	800f0e0 <memmove+0x12>
 800f0ee:	4601      	mov	r1, r0
 800f0f0:	4402      	add	r2, r0
 800f0f2:	428a      	cmp	r2, r1
 800f0f4:	d100      	bne.n	800f0f8 <memmove+0x2a>
 800f0f6:	bd10      	pop	{r4, pc}
 800f0f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f0fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f100:	e7f7      	b.n	800f0f2 <memmove+0x24>

0800f102 <strncmp>:
 800f102:	b510      	push	{r4, lr}
 800f104:	b16a      	cbz	r2, 800f122 <strncmp+0x20>
 800f106:	3901      	subs	r1, #1
 800f108:	1884      	adds	r4, r0, r2
 800f10a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f10e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f112:	429a      	cmp	r2, r3
 800f114:	d103      	bne.n	800f11e <strncmp+0x1c>
 800f116:	42a0      	cmp	r0, r4
 800f118:	d001      	beq.n	800f11e <strncmp+0x1c>
 800f11a:	2a00      	cmp	r2, #0
 800f11c:	d1f5      	bne.n	800f10a <strncmp+0x8>
 800f11e:	1ad0      	subs	r0, r2, r3
 800f120:	bd10      	pop	{r4, pc}
 800f122:	4610      	mov	r0, r2
 800f124:	e7fc      	b.n	800f120 <strncmp+0x1e>
	...

0800f128 <_fstat_r>:
 800f128:	b538      	push	{r3, r4, r5, lr}
 800f12a:	2300      	movs	r3, #0
 800f12c:	4d06      	ldr	r5, [pc, #24]	@ (800f148 <_fstat_r+0x20>)
 800f12e:	4604      	mov	r4, r0
 800f130:	4608      	mov	r0, r1
 800f132:	4611      	mov	r1, r2
 800f134:	602b      	str	r3, [r5, #0]
 800f136:	f7f7 fee2 	bl	8006efe <_fstat>
 800f13a:	1c43      	adds	r3, r0, #1
 800f13c:	d102      	bne.n	800f144 <_fstat_r+0x1c>
 800f13e:	682b      	ldr	r3, [r5, #0]
 800f140:	b103      	cbz	r3, 800f144 <_fstat_r+0x1c>
 800f142:	6023      	str	r3, [r4, #0]
 800f144:	bd38      	pop	{r3, r4, r5, pc}
 800f146:	bf00      	nop
 800f148:	20005ac0 	.word	0x20005ac0

0800f14c <_isatty_r>:
 800f14c:	b538      	push	{r3, r4, r5, lr}
 800f14e:	2300      	movs	r3, #0
 800f150:	4d05      	ldr	r5, [pc, #20]	@ (800f168 <_isatty_r+0x1c>)
 800f152:	4604      	mov	r4, r0
 800f154:	4608      	mov	r0, r1
 800f156:	602b      	str	r3, [r5, #0]
 800f158:	f7f7 fed6 	bl	8006f08 <_isatty>
 800f15c:	1c43      	adds	r3, r0, #1
 800f15e:	d102      	bne.n	800f166 <_isatty_r+0x1a>
 800f160:	682b      	ldr	r3, [r5, #0]
 800f162:	b103      	cbz	r3, 800f166 <_isatty_r+0x1a>
 800f164:	6023      	str	r3, [r4, #0]
 800f166:	bd38      	pop	{r3, r4, r5, pc}
 800f168:	20005ac0 	.word	0x20005ac0

0800f16c <_sbrk_r>:
 800f16c:	b538      	push	{r3, r4, r5, lr}
 800f16e:	2300      	movs	r3, #0
 800f170:	4d05      	ldr	r5, [pc, #20]	@ (800f188 <_sbrk_r+0x1c>)
 800f172:	4604      	mov	r4, r0
 800f174:	4608      	mov	r0, r1
 800f176:	602b      	str	r3, [r5, #0]
 800f178:	f7f7 feca 	bl	8006f10 <_sbrk>
 800f17c:	1c43      	adds	r3, r0, #1
 800f17e:	d102      	bne.n	800f186 <_sbrk_r+0x1a>
 800f180:	682b      	ldr	r3, [r5, #0]
 800f182:	b103      	cbz	r3, 800f186 <_sbrk_r+0x1a>
 800f184:	6023      	str	r3, [r4, #0]
 800f186:	bd38      	pop	{r3, r4, r5, pc}
 800f188:	20005ac0 	.word	0x20005ac0

0800f18c <nan>:
 800f18c:	2000      	movs	r0, #0
 800f18e:	4901      	ldr	r1, [pc, #4]	@ (800f194 <nan+0x8>)
 800f190:	4770      	bx	lr
 800f192:	bf00      	nop
 800f194:	7ff80000 	.word	0x7ff80000

0800f198 <__assert_func>:
 800f198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f19a:	4614      	mov	r4, r2
 800f19c:	461a      	mov	r2, r3
 800f19e:	4b09      	ldr	r3, [pc, #36]	@ (800f1c4 <__assert_func+0x2c>)
 800f1a0:	4605      	mov	r5, r0
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	68d8      	ldr	r0, [r3, #12]
 800f1a6:	b14c      	cbz	r4, 800f1bc <__assert_func+0x24>
 800f1a8:	4b07      	ldr	r3, [pc, #28]	@ (800f1c8 <__assert_func+0x30>)
 800f1aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f1ae:	9100      	str	r1, [sp, #0]
 800f1b0:	462b      	mov	r3, r5
 800f1b2:	4906      	ldr	r1, [pc, #24]	@ (800f1cc <__assert_func+0x34>)
 800f1b4:	f000 fba8 	bl	800f908 <fiprintf>
 800f1b8:	f000 fbb8 	bl	800f92c <abort>
 800f1bc:	4b04      	ldr	r3, [pc, #16]	@ (800f1d0 <__assert_func+0x38>)
 800f1be:	461c      	mov	r4, r3
 800f1c0:	e7f3      	b.n	800f1aa <__assert_func+0x12>
 800f1c2:	bf00      	nop
 800f1c4:	200005dc 	.word	0x200005dc
 800f1c8:	080106aa 	.word	0x080106aa
 800f1cc:	080106b7 	.word	0x080106b7
 800f1d0:	080106e5 	.word	0x080106e5

0800f1d4 <_calloc_r>:
 800f1d4:	b570      	push	{r4, r5, r6, lr}
 800f1d6:	fba1 5402 	umull	r5, r4, r1, r2
 800f1da:	b934      	cbnz	r4, 800f1ea <_calloc_r+0x16>
 800f1dc:	4629      	mov	r1, r5
 800f1de:	f7fe f82d 	bl	800d23c <_malloc_r>
 800f1e2:	4606      	mov	r6, r0
 800f1e4:	b928      	cbnz	r0, 800f1f2 <_calloc_r+0x1e>
 800f1e6:	4630      	mov	r0, r6
 800f1e8:	bd70      	pop	{r4, r5, r6, pc}
 800f1ea:	220c      	movs	r2, #12
 800f1ec:	2600      	movs	r6, #0
 800f1ee:	6002      	str	r2, [r0, #0]
 800f1f0:	e7f9      	b.n	800f1e6 <_calloc_r+0x12>
 800f1f2:	462a      	mov	r2, r5
 800f1f4:	4621      	mov	r1, r4
 800f1f6:	f7fd f8b1 	bl	800c35c <memset>
 800f1fa:	e7f4      	b.n	800f1e6 <_calloc_r+0x12>

0800f1fc <rshift>:
 800f1fc:	6903      	ldr	r3, [r0, #16]
 800f1fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f202:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f206:	f100 0414 	add.w	r4, r0, #20
 800f20a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f20e:	dd46      	ble.n	800f29e <rshift+0xa2>
 800f210:	f011 011f 	ands.w	r1, r1, #31
 800f214:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f218:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f21c:	d10c      	bne.n	800f238 <rshift+0x3c>
 800f21e:	4629      	mov	r1, r5
 800f220:	f100 0710 	add.w	r7, r0, #16
 800f224:	42b1      	cmp	r1, r6
 800f226:	d335      	bcc.n	800f294 <rshift+0x98>
 800f228:	1a9b      	subs	r3, r3, r2
 800f22a:	009b      	lsls	r3, r3, #2
 800f22c:	1eea      	subs	r2, r5, #3
 800f22e:	4296      	cmp	r6, r2
 800f230:	bf38      	it	cc
 800f232:	2300      	movcc	r3, #0
 800f234:	4423      	add	r3, r4
 800f236:	e015      	b.n	800f264 <rshift+0x68>
 800f238:	46a1      	mov	r9, r4
 800f23a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f23e:	f1c1 0820 	rsb	r8, r1, #32
 800f242:	40cf      	lsrs	r7, r1
 800f244:	f105 0e04 	add.w	lr, r5, #4
 800f248:	4576      	cmp	r6, lr
 800f24a:	46f4      	mov	ip, lr
 800f24c:	d816      	bhi.n	800f27c <rshift+0x80>
 800f24e:	1a9a      	subs	r2, r3, r2
 800f250:	0092      	lsls	r2, r2, #2
 800f252:	3a04      	subs	r2, #4
 800f254:	3501      	adds	r5, #1
 800f256:	42ae      	cmp	r6, r5
 800f258:	bf38      	it	cc
 800f25a:	2200      	movcc	r2, #0
 800f25c:	18a3      	adds	r3, r4, r2
 800f25e:	50a7      	str	r7, [r4, r2]
 800f260:	b107      	cbz	r7, 800f264 <rshift+0x68>
 800f262:	3304      	adds	r3, #4
 800f264:	42a3      	cmp	r3, r4
 800f266:	eba3 0204 	sub.w	r2, r3, r4
 800f26a:	bf08      	it	eq
 800f26c:	2300      	moveq	r3, #0
 800f26e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f272:	6102      	str	r2, [r0, #16]
 800f274:	bf08      	it	eq
 800f276:	6143      	streq	r3, [r0, #20]
 800f278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f27c:	f8dc c000 	ldr.w	ip, [ip]
 800f280:	fa0c fc08 	lsl.w	ip, ip, r8
 800f284:	ea4c 0707 	orr.w	r7, ip, r7
 800f288:	f849 7b04 	str.w	r7, [r9], #4
 800f28c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f290:	40cf      	lsrs	r7, r1
 800f292:	e7d9      	b.n	800f248 <rshift+0x4c>
 800f294:	f851 cb04 	ldr.w	ip, [r1], #4
 800f298:	f847 cf04 	str.w	ip, [r7, #4]!
 800f29c:	e7c2      	b.n	800f224 <rshift+0x28>
 800f29e:	4623      	mov	r3, r4
 800f2a0:	e7e0      	b.n	800f264 <rshift+0x68>

0800f2a2 <__hexdig_fun>:
 800f2a2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f2a6:	2b09      	cmp	r3, #9
 800f2a8:	d802      	bhi.n	800f2b0 <__hexdig_fun+0xe>
 800f2aa:	3820      	subs	r0, #32
 800f2ac:	b2c0      	uxtb	r0, r0
 800f2ae:	4770      	bx	lr
 800f2b0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f2b4:	2b05      	cmp	r3, #5
 800f2b6:	d801      	bhi.n	800f2bc <__hexdig_fun+0x1a>
 800f2b8:	3847      	subs	r0, #71	@ 0x47
 800f2ba:	e7f7      	b.n	800f2ac <__hexdig_fun+0xa>
 800f2bc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f2c0:	2b05      	cmp	r3, #5
 800f2c2:	d801      	bhi.n	800f2c8 <__hexdig_fun+0x26>
 800f2c4:	3827      	subs	r0, #39	@ 0x27
 800f2c6:	e7f1      	b.n	800f2ac <__hexdig_fun+0xa>
 800f2c8:	2000      	movs	r0, #0
 800f2ca:	4770      	bx	lr

0800f2cc <__gethex>:
 800f2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2d0:	468a      	mov	sl, r1
 800f2d2:	4690      	mov	r8, r2
 800f2d4:	b085      	sub	sp, #20
 800f2d6:	9302      	str	r3, [sp, #8]
 800f2d8:	680b      	ldr	r3, [r1, #0]
 800f2da:	9001      	str	r0, [sp, #4]
 800f2dc:	1c9c      	adds	r4, r3, #2
 800f2de:	46a1      	mov	r9, r4
 800f2e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f2e4:	2830      	cmp	r0, #48	@ 0x30
 800f2e6:	d0fa      	beq.n	800f2de <__gethex+0x12>
 800f2e8:	eba9 0303 	sub.w	r3, r9, r3
 800f2ec:	f1a3 0b02 	sub.w	fp, r3, #2
 800f2f0:	f7ff ffd7 	bl	800f2a2 <__hexdig_fun>
 800f2f4:	4605      	mov	r5, r0
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	d168      	bne.n	800f3cc <__gethex+0x100>
 800f2fa:	2201      	movs	r2, #1
 800f2fc:	4648      	mov	r0, r9
 800f2fe:	499f      	ldr	r1, [pc, #636]	@ (800f57c <__gethex+0x2b0>)
 800f300:	f7ff feff 	bl	800f102 <strncmp>
 800f304:	4607      	mov	r7, r0
 800f306:	2800      	cmp	r0, #0
 800f308:	d167      	bne.n	800f3da <__gethex+0x10e>
 800f30a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f30e:	4626      	mov	r6, r4
 800f310:	f7ff ffc7 	bl	800f2a2 <__hexdig_fun>
 800f314:	2800      	cmp	r0, #0
 800f316:	d062      	beq.n	800f3de <__gethex+0x112>
 800f318:	4623      	mov	r3, r4
 800f31a:	7818      	ldrb	r0, [r3, #0]
 800f31c:	4699      	mov	r9, r3
 800f31e:	2830      	cmp	r0, #48	@ 0x30
 800f320:	f103 0301 	add.w	r3, r3, #1
 800f324:	d0f9      	beq.n	800f31a <__gethex+0x4e>
 800f326:	f7ff ffbc 	bl	800f2a2 <__hexdig_fun>
 800f32a:	fab0 f580 	clz	r5, r0
 800f32e:	f04f 0b01 	mov.w	fp, #1
 800f332:	096d      	lsrs	r5, r5, #5
 800f334:	464a      	mov	r2, r9
 800f336:	4616      	mov	r6, r2
 800f338:	7830      	ldrb	r0, [r6, #0]
 800f33a:	3201      	adds	r2, #1
 800f33c:	f7ff ffb1 	bl	800f2a2 <__hexdig_fun>
 800f340:	2800      	cmp	r0, #0
 800f342:	d1f8      	bne.n	800f336 <__gethex+0x6a>
 800f344:	2201      	movs	r2, #1
 800f346:	4630      	mov	r0, r6
 800f348:	498c      	ldr	r1, [pc, #560]	@ (800f57c <__gethex+0x2b0>)
 800f34a:	f7ff feda 	bl	800f102 <strncmp>
 800f34e:	2800      	cmp	r0, #0
 800f350:	d13f      	bne.n	800f3d2 <__gethex+0x106>
 800f352:	b944      	cbnz	r4, 800f366 <__gethex+0x9a>
 800f354:	1c74      	adds	r4, r6, #1
 800f356:	4622      	mov	r2, r4
 800f358:	4616      	mov	r6, r2
 800f35a:	7830      	ldrb	r0, [r6, #0]
 800f35c:	3201      	adds	r2, #1
 800f35e:	f7ff ffa0 	bl	800f2a2 <__hexdig_fun>
 800f362:	2800      	cmp	r0, #0
 800f364:	d1f8      	bne.n	800f358 <__gethex+0x8c>
 800f366:	1ba4      	subs	r4, r4, r6
 800f368:	00a7      	lsls	r7, r4, #2
 800f36a:	7833      	ldrb	r3, [r6, #0]
 800f36c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f370:	2b50      	cmp	r3, #80	@ 0x50
 800f372:	d13e      	bne.n	800f3f2 <__gethex+0x126>
 800f374:	7873      	ldrb	r3, [r6, #1]
 800f376:	2b2b      	cmp	r3, #43	@ 0x2b
 800f378:	d033      	beq.n	800f3e2 <__gethex+0x116>
 800f37a:	2b2d      	cmp	r3, #45	@ 0x2d
 800f37c:	d034      	beq.n	800f3e8 <__gethex+0x11c>
 800f37e:	2400      	movs	r4, #0
 800f380:	1c71      	adds	r1, r6, #1
 800f382:	7808      	ldrb	r0, [r1, #0]
 800f384:	f7ff ff8d 	bl	800f2a2 <__hexdig_fun>
 800f388:	1e43      	subs	r3, r0, #1
 800f38a:	b2db      	uxtb	r3, r3
 800f38c:	2b18      	cmp	r3, #24
 800f38e:	d830      	bhi.n	800f3f2 <__gethex+0x126>
 800f390:	f1a0 0210 	sub.w	r2, r0, #16
 800f394:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f398:	f7ff ff83 	bl	800f2a2 <__hexdig_fun>
 800f39c:	f100 3cff 	add.w	ip, r0, #4294967295
 800f3a0:	fa5f fc8c 	uxtb.w	ip, ip
 800f3a4:	f1bc 0f18 	cmp.w	ip, #24
 800f3a8:	f04f 030a 	mov.w	r3, #10
 800f3ac:	d91e      	bls.n	800f3ec <__gethex+0x120>
 800f3ae:	b104      	cbz	r4, 800f3b2 <__gethex+0xe6>
 800f3b0:	4252      	negs	r2, r2
 800f3b2:	4417      	add	r7, r2
 800f3b4:	f8ca 1000 	str.w	r1, [sl]
 800f3b8:	b1ed      	cbz	r5, 800f3f6 <__gethex+0x12a>
 800f3ba:	f1bb 0f00 	cmp.w	fp, #0
 800f3be:	bf0c      	ite	eq
 800f3c0:	2506      	moveq	r5, #6
 800f3c2:	2500      	movne	r5, #0
 800f3c4:	4628      	mov	r0, r5
 800f3c6:	b005      	add	sp, #20
 800f3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3cc:	2500      	movs	r5, #0
 800f3ce:	462c      	mov	r4, r5
 800f3d0:	e7b0      	b.n	800f334 <__gethex+0x68>
 800f3d2:	2c00      	cmp	r4, #0
 800f3d4:	d1c7      	bne.n	800f366 <__gethex+0x9a>
 800f3d6:	4627      	mov	r7, r4
 800f3d8:	e7c7      	b.n	800f36a <__gethex+0x9e>
 800f3da:	464e      	mov	r6, r9
 800f3dc:	462f      	mov	r7, r5
 800f3de:	2501      	movs	r5, #1
 800f3e0:	e7c3      	b.n	800f36a <__gethex+0x9e>
 800f3e2:	2400      	movs	r4, #0
 800f3e4:	1cb1      	adds	r1, r6, #2
 800f3e6:	e7cc      	b.n	800f382 <__gethex+0xb6>
 800f3e8:	2401      	movs	r4, #1
 800f3ea:	e7fb      	b.n	800f3e4 <__gethex+0x118>
 800f3ec:	fb03 0002 	mla	r0, r3, r2, r0
 800f3f0:	e7ce      	b.n	800f390 <__gethex+0xc4>
 800f3f2:	4631      	mov	r1, r6
 800f3f4:	e7de      	b.n	800f3b4 <__gethex+0xe8>
 800f3f6:	4629      	mov	r1, r5
 800f3f8:	eba6 0309 	sub.w	r3, r6, r9
 800f3fc:	3b01      	subs	r3, #1
 800f3fe:	2b07      	cmp	r3, #7
 800f400:	dc0a      	bgt.n	800f418 <__gethex+0x14c>
 800f402:	9801      	ldr	r0, [sp, #4]
 800f404:	f7fd ffa6 	bl	800d354 <_Balloc>
 800f408:	4604      	mov	r4, r0
 800f40a:	b940      	cbnz	r0, 800f41e <__gethex+0x152>
 800f40c:	4602      	mov	r2, r0
 800f40e:	21e4      	movs	r1, #228	@ 0xe4
 800f410:	4b5b      	ldr	r3, [pc, #364]	@ (800f580 <__gethex+0x2b4>)
 800f412:	485c      	ldr	r0, [pc, #368]	@ (800f584 <__gethex+0x2b8>)
 800f414:	f7ff fec0 	bl	800f198 <__assert_func>
 800f418:	3101      	adds	r1, #1
 800f41a:	105b      	asrs	r3, r3, #1
 800f41c:	e7ef      	b.n	800f3fe <__gethex+0x132>
 800f41e:	2300      	movs	r3, #0
 800f420:	f100 0a14 	add.w	sl, r0, #20
 800f424:	4655      	mov	r5, sl
 800f426:	469b      	mov	fp, r3
 800f428:	45b1      	cmp	r9, r6
 800f42a:	d337      	bcc.n	800f49c <__gethex+0x1d0>
 800f42c:	f845 bb04 	str.w	fp, [r5], #4
 800f430:	eba5 050a 	sub.w	r5, r5, sl
 800f434:	10ad      	asrs	r5, r5, #2
 800f436:	6125      	str	r5, [r4, #16]
 800f438:	4658      	mov	r0, fp
 800f43a:	f7fe f87d 	bl	800d538 <__hi0bits>
 800f43e:	016d      	lsls	r5, r5, #5
 800f440:	f8d8 6000 	ldr.w	r6, [r8]
 800f444:	1a2d      	subs	r5, r5, r0
 800f446:	42b5      	cmp	r5, r6
 800f448:	dd54      	ble.n	800f4f4 <__gethex+0x228>
 800f44a:	1bad      	subs	r5, r5, r6
 800f44c:	4629      	mov	r1, r5
 800f44e:	4620      	mov	r0, r4
 800f450:	f7fe fbff 	bl	800dc52 <__any_on>
 800f454:	4681      	mov	r9, r0
 800f456:	b178      	cbz	r0, 800f478 <__gethex+0x1ac>
 800f458:	f04f 0901 	mov.w	r9, #1
 800f45c:	1e6b      	subs	r3, r5, #1
 800f45e:	1159      	asrs	r1, r3, #5
 800f460:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f464:	f003 021f 	and.w	r2, r3, #31
 800f468:	fa09 f202 	lsl.w	r2, r9, r2
 800f46c:	420a      	tst	r2, r1
 800f46e:	d003      	beq.n	800f478 <__gethex+0x1ac>
 800f470:	454b      	cmp	r3, r9
 800f472:	dc36      	bgt.n	800f4e2 <__gethex+0x216>
 800f474:	f04f 0902 	mov.w	r9, #2
 800f478:	4629      	mov	r1, r5
 800f47a:	4620      	mov	r0, r4
 800f47c:	f7ff febe 	bl	800f1fc <rshift>
 800f480:	442f      	add	r7, r5
 800f482:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f486:	42bb      	cmp	r3, r7
 800f488:	da42      	bge.n	800f510 <__gethex+0x244>
 800f48a:	4621      	mov	r1, r4
 800f48c:	9801      	ldr	r0, [sp, #4]
 800f48e:	f7fd ffa1 	bl	800d3d4 <_Bfree>
 800f492:	2300      	movs	r3, #0
 800f494:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f496:	25a3      	movs	r5, #163	@ 0xa3
 800f498:	6013      	str	r3, [r2, #0]
 800f49a:	e793      	b.n	800f3c4 <__gethex+0xf8>
 800f49c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f4a0:	2a2e      	cmp	r2, #46	@ 0x2e
 800f4a2:	d012      	beq.n	800f4ca <__gethex+0x1fe>
 800f4a4:	2b20      	cmp	r3, #32
 800f4a6:	d104      	bne.n	800f4b2 <__gethex+0x1e6>
 800f4a8:	f845 bb04 	str.w	fp, [r5], #4
 800f4ac:	f04f 0b00 	mov.w	fp, #0
 800f4b0:	465b      	mov	r3, fp
 800f4b2:	7830      	ldrb	r0, [r6, #0]
 800f4b4:	9303      	str	r3, [sp, #12]
 800f4b6:	f7ff fef4 	bl	800f2a2 <__hexdig_fun>
 800f4ba:	9b03      	ldr	r3, [sp, #12]
 800f4bc:	f000 000f 	and.w	r0, r0, #15
 800f4c0:	4098      	lsls	r0, r3
 800f4c2:	ea4b 0b00 	orr.w	fp, fp, r0
 800f4c6:	3304      	adds	r3, #4
 800f4c8:	e7ae      	b.n	800f428 <__gethex+0x15c>
 800f4ca:	45b1      	cmp	r9, r6
 800f4cc:	d8ea      	bhi.n	800f4a4 <__gethex+0x1d8>
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	4630      	mov	r0, r6
 800f4d2:	492a      	ldr	r1, [pc, #168]	@ (800f57c <__gethex+0x2b0>)
 800f4d4:	9303      	str	r3, [sp, #12]
 800f4d6:	f7ff fe14 	bl	800f102 <strncmp>
 800f4da:	9b03      	ldr	r3, [sp, #12]
 800f4dc:	2800      	cmp	r0, #0
 800f4de:	d1e1      	bne.n	800f4a4 <__gethex+0x1d8>
 800f4e0:	e7a2      	b.n	800f428 <__gethex+0x15c>
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	1ea9      	subs	r1, r5, #2
 800f4e6:	f7fe fbb4 	bl	800dc52 <__any_on>
 800f4ea:	2800      	cmp	r0, #0
 800f4ec:	d0c2      	beq.n	800f474 <__gethex+0x1a8>
 800f4ee:	f04f 0903 	mov.w	r9, #3
 800f4f2:	e7c1      	b.n	800f478 <__gethex+0x1ac>
 800f4f4:	da09      	bge.n	800f50a <__gethex+0x23e>
 800f4f6:	1b75      	subs	r5, r6, r5
 800f4f8:	4621      	mov	r1, r4
 800f4fa:	462a      	mov	r2, r5
 800f4fc:	9801      	ldr	r0, [sp, #4]
 800f4fe:	f7fe f979 	bl	800d7f4 <__lshift>
 800f502:	4604      	mov	r4, r0
 800f504:	1b7f      	subs	r7, r7, r5
 800f506:	f100 0a14 	add.w	sl, r0, #20
 800f50a:	f04f 0900 	mov.w	r9, #0
 800f50e:	e7b8      	b.n	800f482 <__gethex+0x1b6>
 800f510:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f514:	42bd      	cmp	r5, r7
 800f516:	dd6f      	ble.n	800f5f8 <__gethex+0x32c>
 800f518:	1bed      	subs	r5, r5, r7
 800f51a:	42ae      	cmp	r6, r5
 800f51c:	dc34      	bgt.n	800f588 <__gethex+0x2bc>
 800f51e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f522:	2b02      	cmp	r3, #2
 800f524:	d022      	beq.n	800f56c <__gethex+0x2a0>
 800f526:	2b03      	cmp	r3, #3
 800f528:	d024      	beq.n	800f574 <__gethex+0x2a8>
 800f52a:	2b01      	cmp	r3, #1
 800f52c:	d115      	bne.n	800f55a <__gethex+0x28e>
 800f52e:	42ae      	cmp	r6, r5
 800f530:	d113      	bne.n	800f55a <__gethex+0x28e>
 800f532:	2e01      	cmp	r6, #1
 800f534:	d10b      	bne.n	800f54e <__gethex+0x282>
 800f536:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f53a:	9a02      	ldr	r2, [sp, #8]
 800f53c:	2562      	movs	r5, #98	@ 0x62
 800f53e:	6013      	str	r3, [r2, #0]
 800f540:	2301      	movs	r3, #1
 800f542:	6123      	str	r3, [r4, #16]
 800f544:	f8ca 3000 	str.w	r3, [sl]
 800f548:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f54a:	601c      	str	r4, [r3, #0]
 800f54c:	e73a      	b.n	800f3c4 <__gethex+0xf8>
 800f54e:	4620      	mov	r0, r4
 800f550:	1e71      	subs	r1, r6, #1
 800f552:	f7fe fb7e 	bl	800dc52 <__any_on>
 800f556:	2800      	cmp	r0, #0
 800f558:	d1ed      	bne.n	800f536 <__gethex+0x26a>
 800f55a:	4621      	mov	r1, r4
 800f55c:	9801      	ldr	r0, [sp, #4]
 800f55e:	f7fd ff39 	bl	800d3d4 <_Bfree>
 800f562:	2300      	movs	r3, #0
 800f564:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f566:	2550      	movs	r5, #80	@ 0x50
 800f568:	6013      	str	r3, [r2, #0]
 800f56a:	e72b      	b.n	800f3c4 <__gethex+0xf8>
 800f56c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d1f3      	bne.n	800f55a <__gethex+0x28e>
 800f572:	e7e0      	b.n	800f536 <__gethex+0x26a>
 800f574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f576:	2b00      	cmp	r3, #0
 800f578:	d1dd      	bne.n	800f536 <__gethex+0x26a>
 800f57a:	e7ee      	b.n	800f55a <__gethex+0x28e>
 800f57c:	0801068f 	.word	0x0801068f
 800f580:	08010625 	.word	0x08010625
 800f584:	080106e6 	.word	0x080106e6
 800f588:	1e6f      	subs	r7, r5, #1
 800f58a:	f1b9 0f00 	cmp.w	r9, #0
 800f58e:	d130      	bne.n	800f5f2 <__gethex+0x326>
 800f590:	b127      	cbz	r7, 800f59c <__gethex+0x2d0>
 800f592:	4639      	mov	r1, r7
 800f594:	4620      	mov	r0, r4
 800f596:	f7fe fb5c 	bl	800dc52 <__any_on>
 800f59a:	4681      	mov	r9, r0
 800f59c:	2301      	movs	r3, #1
 800f59e:	4629      	mov	r1, r5
 800f5a0:	1b76      	subs	r6, r6, r5
 800f5a2:	2502      	movs	r5, #2
 800f5a4:	117a      	asrs	r2, r7, #5
 800f5a6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f5aa:	f007 071f 	and.w	r7, r7, #31
 800f5ae:	40bb      	lsls	r3, r7
 800f5b0:	4213      	tst	r3, r2
 800f5b2:	4620      	mov	r0, r4
 800f5b4:	bf18      	it	ne
 800f5b6:	f049 0902 	orrne.w	r9, r9, #2
 800f5ba:	f7ff fe1f 	bl	800f1fc <rshift>
 800f5be:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f5c2:	f1b9 0f00 	cmp.w	r9, #0
 800f5c6:	d047      	beq.n	800f658 <__gethex+0x38c>
 800f5c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f5cc:	2b02      	cmp	r3, #2
 800f5ce:	d015      	beq.n	800f5fc <__gethex+0x330>
 800f5d0:	2b03      	cmp	r3, #3
 800f5d2:	d017      	beq.n	800f604 <__gethex+0x338>
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	d109      	bne.n	800f5ec <__gethex+0x320>
 800f5d8:	f019 0f02 	tst.w	r9, #2
 800f5dc:	d006      	beq.n	800f5ec <__gethex+0x320>
 800f5de:	f8da 3000 	ldr.w	r3, [sl]
 800f5e2:	ea49 0903 	orr.w	r9, r9, r3
 800f5e6:	f019 0f01 	tst.w	r9, #1
 800f5ea:	d10e      	bne.n	800f60a <__gethex+0x33e>
 800f5ec:	f045 0510 	orr.w	r5, r5, #16
 800f5f0:	e032      	b.n	800f658 <__gethex+0x38c>
 800f5f2:	f04f 0901 	mov.w	r9, #1
 800f5f6:	e7d1      	b.n	800f59c <__gethex+0x2d0>
 800f5f8:	2501      	movs	r5, #1
 800f5fa:	e7e2      	b.n	800f5c2 <__gethex+0x2f6>
 800f5fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5fe:	f1c3 0301 	rsb	r3, r3, #1
 800f602:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f606:	2b00      	cmp	r3, #0
 800f608:	d0f0      	beq.n	800f5ec <__gethex+0x320>
 800f60a:	f04f 0c00 	mov.w	ip, #0
 800f60e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f612:	f104 0314 	add.w	r3, r4, #20
 800f616:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f61a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f61e:	4618      	mov	r0, r3
 800f620:	f853 2b04 	ldr.w	r2, [r3], #4
 800f624:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f628:	d01b      	beq.n	800f662 <__gethex+0x396>
 800f62a:	3201      	adds	r2, #1
 800f62c:	6002      	str	r2, [r0, #0]
 800f62e:	2d02      	cmp	r5, #2
 800f630:	f104 0314 	add.w	r3, r4, #20
 800f634:	d13c      	bne.n	800f6b0 <__gethex+0x3e4>
 800f636:	f8d8 2000 	ldr.w	r2, [r8]
 800f63a:	3a01      	subs	r2, #1
 800f63c:	42b2      	cmp	r2, r6
 800f63e:	d109      	bne.n	800f654 <__gethex+0x388>
 800f640:	2201      	movs	r2, #1
 800f642:	1171      	asrs	r1, r6, #5
 800f644:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f648:	f006 061f 	and.w	r6, r6, #31
 800f64c:	fa02 f606 	lsl.w	r6, r2, r6
 800f650:	421e      	tst	r6, r3
 800f652:	d13a      	bne.n	800f6ca <__gethex+0x3fe>
 800f654:	f045 0520 	orr.w	r5, r5, #32
 800f658:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f65a:	601c      	str	r4, [r3, #0]
 800f65c:	9b02      	ldr	r3, [sp, #8]
 800f65e:	601f      	str	r7, [r3, #0]
 800f660:	e6b0      	b.n	800f3c4 <__gethex+0xf8>
 800f662:	4299      	cmp	r1, r3
 800f664:	f843 cc04 	str.w	ip, [r3, #-4]
 800f668:	d8d9      	bhi.n	800f61e <__gethex+0x352>
 800f66a:	68a3      	ldr	r3, [r4, #8]
 800f66c:	459b      	cmp	fp, r3
 800f66e:	db17      	blt.n	800f6a0 <__gethex+0x3d4>
 800f670:	6861      	ldr	r1, [r4, #4]
 800f672:	9801      	ldr	r0, [sp, #4]
 800f674:	3101      	adds	r1, #1
 800f676:	f7fd fe6d 	bl	800d354 <_Balloc>
 800f67a:	4681      	mov	r9, r0
 800f67c:	b918      	cbnz	r0, 800f686 <__gethex+0x3ba>
 800f67e:	4602      	mov	r2, r0
 800f680:	2184      	movs	r1, #132	@ 0x84
 800f682:	4b19      	ldr	r3, [pc, #100]	@ (800f6e8 <__gethex+0x41c>)
 800f684:	e6c5      	b.n	800f412 <__gethex+0x146>
 800f686:	6922      	ldr	r2, [r4, #16]
 800f688:	f104 010c 	add.w	r1, r4, #12
 800f68c:	3202      	adds	r2, #2
 800f68e:	0092      	lsls	r2, r2, #2
 800f690:	300c      	adds	r0, #12
 800f692:	f7fc fef0 	bl	800c476 <memcpy>
 800f696:	4621      	mov	r1, r4
 800f698:	9801      	ldr	r0, [sp, #4]
 800f69a:	f7fd fe9b 	bl	800d3d4 <_Bfree>
 800f69e:	464c      	mov	r4, r9
 800f6a0:	6923      	ldr	r3, [r4, #16]
 800f6a2:	1c5a      	adds	r2, r3, #1
 800f6a4:	6122      	str	r2, [r4, #16]
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f6ac:	615a      	str	r2, [r3, #20]
 800f6ae:	e7be      	b.n	800f62e <__gethex+0x362>
 800f6b0:	6922      	ldr	r2, [r4, #16]
 800f6b2:	455a      	cmp	r2, fp
 800f6b4:	dd0b      	ble.n	800f6ce <__gethex+0x402>
 800f6b6:	2101      	movs	r1, #1
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	f7ff fd9f 	bl	800f1fc <rshift>
 800f6be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f6c2:	3701      	adds	r7, #1
 800f6c4:	42bb      	cmp	r3, r7
 800f6c6:	f6ff aee0 	blt.w	800f48a <__gethex+0x1be>
 800f6ca:	2501      	movs	r5, #1
 800f6cc:	e7c2      	b.n	800f654 <__gethex+0x388>
 800f6ce:	f016 061f 	ands.w	r6, r6, #31
 800f6d2:	d0fa      	beq.n	800f6ca <__gethex+0x3fe>
 800f6d4:	4453      	add	r3, sl
 800f6d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f6da:	f7fd ff2d 	bl	800d538 <__hi0bits>
 800f6de:	f1c6 0620 	rsb	r6, r6, #32
 800f6e2:	42b0      	cmp	r0, r6
 800f6e4:	dbe7      	blt.n	800f6b6 <__gethex+0x3ea>
 800f6e6:	e7f0      	b.n	800f6ca <__gethex+0x3fe>
 800f6e8:	08010625 	.word	0x08010625

0800f6ec <L_shift>:
 800f6ec:	f1c2 0208 	rsb	r2, r2, #8
 800f6f0:	0092      	lsls	r2, r2, #2
 800f6f2:	b570      	push	{r4, r5, r6, lr}
 800f6f4:	f1c2 0620 	rsb	r6, r2, #32
 800f6f8:	6843      	ldr	r3, [r0, #4]
 800f6fa:	6804      	ldr	r4, [r0, #0]
 800f6fc:	fa03 f506 	lsl.w	r5, r3, r6
 800f700:	432c      	orrs	r4, r5
 800f702:	40d3      	lsrs	r3, r2
 800f704:	6004      	str	r4, [r0, #0]
 800f706:	f840 3f04 	str.w	r3, [r0, #4]!
 800f70a:	4288      	cmp	r0, r1
 800f70c:	d3f4      	bcc.n	800f6f8 <L_shift+0xc>
 800f70e:	bd70      	pop	{r4, r5, r6, pc}

0800f710 <__match>:
 800f710:	b530      	push	{r4, r5, lr}
 800f712:	6803      	ldr	r3, [r0, #0]
 800f714:	3301      	adds	r3, #1
 800f716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f71a:	b914      	cbnz	r4, 800f722 <__match+0x12>
 800f71c:	6003      	str	r3, [r0, #0]
 800f71e:	2001      	movs	r0, #1
 800f720:	bd30      	pop	{r4, r5, pc}
 800f722:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f726:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f72a:	2d19      	cmp	r5, #25
 800f72c:	bf98      	it	ls
 800f72e:	3220      	addls	r2, #32
 800f730:	42a2      	cmp	r2, r4
 800f732:	d0f0      	beq.n	800f716 <__match+0x6>
 800f734:	2000      	movs	r0, #0
 800f736:	e7f3      	b.n	800f720 <__match+0x10>

0800f738 <__hexnan>:
 800f738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f73c:	2500      	movs	r5, #0
 800f73e:	680b      	ldr	r3, [r1, #0]
 800f740:	4682      	mov	sl, r0
 800f742:	115e      	asrs	r6, r3, #5
 800f744:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f748:	f013 031f 	ands.w	r3, r3, #31
 800f74c:	bf18      	it	ne
 800f74e:	3604      	addne	r6, #4
 800f750:	1f37      	subs	r7, r6, #4
 800f752:	4690      	mov	r8, r2
 800f754:	46b9      	mov	r9, r7
 800f756:	463c      	mov	r4, r7
 800f758:	46ab      	mov	fp, r5
 800f75a:	b087      	sub	sp, #28
 800f75c:	6801      	ldr	r1, [r0, #0]
 800f75e:	9301      	str	r3, [sp, #4]
 800f760:	f846 5c04 	str.w	r5, [r6, #-4]
 800f764:	9502      	str	r5, [sp, #8]
 800f766:	784a      	ldrb	r2, [r1, #1]
 800f768:	1c4b      	adds	r3, r1, #1
 800f76a:	9303      	str	r3, [sp, #12]
 800f76c:	b342      	cbz	r2, 800f7c0 <__hexnan+0x88>
 800f76e:	4610      	mov	r0, r2
 800f770:	9105      	str	r1, [sp, #20]
 800f772:	9204      	str	r2, [sp, #16]
 800f774:	f7ff fd95 	bl	800f2a2 <__hexdig_fun>
 800f778:	2800      	cmp	r0, #0
 800f77a:	d151      	bne.n	800f820 <__hexnan+0xe8>
 800f77c:	9a04      	ldr	r2, [sp, #16]
 800f77e:	9905      	ldr	r1, [sp, #20]
 800f780:	2a20      	cmp	r2, #32
 800f782:	d818      	bhi.n	800f7b6 <__hexnan+0x7e>
 800f784:	9b02      	ldr	r3, [sp, #8]
 800f786:	459b      	cmp	fp, r3
 800f788:	dd13      	ble.n	800f7b2 <__hexnan+0x7a>
 800f78a:	454c      	cmp	r4, r9
 800f78c:	d206      	bcs.n	800f79c <__hexnan+0x64>
 800f78e:	2d07      	cmp	r5, #7
 800f790:	dc04      	bgt.n	800f79c <__hexnan+0x64>
 800f792:	462a      	mov	r2, r5
 800f794:	4649      	mov	r1, r9
 800f796:	4620      	mov	r0, r4
 800f798:	f7ff ffa8 	bl	800f6ec <L_shift>
 800f79c:	4544      	cmp	r4, r8
 800f79e:	d952      	bls.n	800f846 <__hexnan+0x10e>
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	f1a4 0904 	sub.w	r9, r4, #4
 800f7a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800f7aa:	461d      	mov	r5, r3
 800f7ac:	464c      	mov	r4, r9
 800f7ae:	f8cd b008 	str.w	fp, [sp, #8]
 800f7b2:	9903      	ldr	r1, [sp, #12]
 800f7b4:	e7d7      	b.n	800f766 <__hexnan+0x2e>
 800f7b6:	2a29      	cmp	r2, #41	@ 0x29
 800f7b8:	d157      	bne.n	800f86a <__hexnan+0x132>
 800f7ba:	3102      	adds	r1, #2
 800f7bc:	f8ca 1000 	str.w	r1, [sl]
 800f7c0:	f1bb 0f00 	cmp.w	fp, #0
 800f7c4:	d051      	beq.n	800f86a <__hexnan+0x132>
 800f7c6:	454c      	cmp	r4, r9
 800f7c8:	d206      	bcs.n	800f7d8 <__hexnan+0xa0>
 800f7ca:	2d07      	cmp	r5, #7
 800f7cc:	dc04      	bgt.n	800f7d8 <__hexnan+0xa0>
 800f7ce:	462a      	mov	r2, r5
 800f7d0:	4649      	mov	r1, r9
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	f7ff ff8a 	bl	800f6ec <L_shift>
 800f7d8:	4544      	cmp	r4, r8
 800f7da:	d936      	bls.n	800f84a <__hexnan+0x112>
 800f7dc:	4623      	mov	r3, r4
 800f7de:	f1a8 0204 	sub.w	r2, r8, #4
 800f7e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800f7e6:	429f      	cmp	r7, r3
 800f7e8:	f842 1f04 	str.w	r1, [r2, #4]!
 800f7ec:	d2f9      	bcs.n	800f7e2 <__hexnan+0xaa>
 800f7ee:	1b3b      	subs	r3, r7, r4
 800f7f0:	f023 0303 	bic.w	r3, r3, #3
 800f7f4:	3304      	adds	r3, #4
 800f7f6:	3401      	adds	r4, #1
 800f7f8:	3e03      	subs	r6, #3
 800f7fa:	42b4      	cmp	r4, r6
 800f7fc:	bf88      	it	hi
 800f7fe:	2304      	movhi	r3, #4
 800f800:	2200      	movs	r2, #0
 800f802:	4443      	add	r3, r8
 800f804:	f843 2b04 	str.w	r2, [r3], #4
 800f808:	429f      	cmp	r7, r3
 800f80a:	d2fb      	bcs.n	800f804 <__hexnan+0xcc>
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	b91b      	cbnz	r3, 800f818 <__hexnan+0xe0>
 800f810:	4547      	cmp	r7, r8
 800f812:	d128      	bne.n	800f866 <__hexnan+0x12e>
 800f814:	2301      	movs	r3, #1
 800f816:	603b      	str	r3, [r7, #0]
 800f818:	2005      	movs	r0, #5
 800f81a:	b007      	add	sp, #28
 800f81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f820:	3501      	adds	r5, #1
 800f822:	2d08      	cmp	r5, #8
 800f824:	f10b 0b01 	add.w	fp, fp, #1
 800f828:	dd06      	ble.n	800f838 <__hexnan+0x100>
 800f82a:	4544      	cmp	r4, r8
 800f82c:	d9c1      	bls.n	800f7b2 <__hexnan+0x7a>
 800f82e:	2300      	movs	r3, #0
 800f830:	2501      	movs	r5, #1
 800f832:	f844 3c04 	str.w	r3, [r4, #-4]
 800f836:	3c04      	subs	r4, #4
 800f838:	6822      	ldr	r2, [r4, #0]
 800f83a:	f000 000f 	and.w	r0, r0, #15
 800f83e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f842:	6020      	str	r0, [r4, #0]
 800f844:	e7b5      	b.n	800f7b2 <__hexnan+0x7a>
 800f846:	2508      	movs	r5, #8
 800f848:	e7b3      	b.n	800f7b2 <__hexnan+0x7a>
 800f84a:	9b01      	ldr	r3, [sp, #4]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d0dd      	beq.n	800f80c <__hexnan+0xd4>
 800f850:	f04f 32ff 	mov.w	r2, #4294967295
 800f854:	f1c3 0320 	rsb	r3, r3, #32
 800f858:	40da      	lsrs	r2, r3
 800f85a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f85e:	4013      	ands	r3, r2
 800f860:	f846 3c04 	str.w	r3, [r6, #-4]
 800f864:	e7d2      	b.n	800f80c <__hexnan+0xd4>
 800f866:	3f04      	subs	r7, #4
 800f868:	e7d0      	b.n	800f80c <__hexnan+0xd4>
 800f86a:	2004      	movs	r0, #4
 800f86c:	e7d5      	b.n	800f81a <__hexnan+0xe2>

0800f86e <__ascii_mbtowc>:
 800f86e:	b082      	sub	sp, #8
 800f870:	b901      	cbnz	r1, 800f874 <__ascii_mbtowc+0x6>
 800f872:	a901      	add	r1, sp, #4
 800f874:	b142      	cbz	r2, 800f888 <__ascii_mbtowc+0x1a>
 800f876:	b14b      	cbz	r3, 800f88c <__ascii_mbtowc+0x1e>
 800f878:	7813      	ldrb	r3, [r2, #0]
 800f87a:	600b      	str	r3, [r1, #0]
 800f87c:	7812      	ldrb	r2, [r2, #0]
 800f87e:	1e10      	subs	r0, r2, #0
 800f880:	bf18      	it	ne
 800f882:	2001      	movne	r0, #1
 800f884:	b002      	add	sp, #8
 800f886:	4770      	bx	lr
 800f888:	4610      	mov	r0, r2
 800f88a:	e7fb      	b.n	800f884 <__ascii_mbtowc+0x16>
 800f88c:	f06f 0001 	mvn.w	r0, #1
 800f890:	e7f8      	b.n	800f884 <__ascii_mbtowc+0x16>

0800f892 <_realloc_r>:
 800f892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f896:	4607      	mov	r7, r0
 800f898:	4614      	mov	r4, r2
 800f89a:	460d      	mov	r5, r1
 800f89c:	b921      	cbnz	r1, 800f8a8 <_realloc_r+0x16>
 800f89e:	4611      	mov	r1, r2
 800f8a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a4:	f7fd bcca 	b.w	800d23c <_malloc_r>
 800f8a8:	b92a      	cbnz	r2, 800f8b6 <_realloc_r+0x24>
 800f8aa:	f7fd fc55 	bl	800d158 <_free_r>
 800f8ae:	4625      	mov	r5, r4
 800f8b0:	4628      	mov	r0, r5
 800f8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8b6:	f000 f840 	bl	800f93a <_malloc_usable_size_r>
 800f8ba:	4284      	cmp	r4, r0
 800f8bc:	4606      	mov	r6, r0
 800f8be:	d802      	bhi.n	800f8c6 <_realloc_r+0x34>
 800f8c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f8c4:	d8f4      	bhi.n	800f8b0 <_realloc_r+0x1e>
 800f8c6:	4621      	mov	r1, r4
 800f8c8:	4638      	mov	r0, r7
 800f8ca:	f7fd fcb7 	bl	800d23c <_malloc_r>
 800f8ce:	4680      	mov	r8, r0
 800f8d0:	b908      	cbnz	r0, 800f8d6 <_realloc_r+0x44>
 800f8d2:	4645      	mov	r5, r8
 800f8d4:	e7ec      	b.n	800f8b0 <_realloc_r+0x1e>
 800f8d6:	42b4      	cmp	r4, r6
 800f8d8:	4622      	mov	r2, r4
 800f8da:	4629      	mov	r1, r5
 800f8dc:	bf28      	it	cs
 800f8de:	4632      	movcs	r2, r6
 800f8e0:	f7fc fdc9 	bl	800c476 <memcpy>
 800f8e4:	4629      	mov	r1, r5
 800f8e6:	4638      	mov	r0, r7
 800f8e8:	f7fd fc36 	bl	800d158 <_free_r>
 800f8ec:	e7f1      	b.n	800f8d2 <_realloc_r+0x40>

0800f8ee <__ascii_wctomb>:
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	4608      	mov	r0, r1
 800f8f2:	b141      	cbz	r1, 800f906 <__ascii_wctomb+0x18>
 800f8f4:	2aff      	cmp	r2, #255	@ 0xff
 800f8f6:	d904      	bls.n	800f902 <__ascii_wctomb+0x14>
 800f8f8:	228a      	movs	r2, #138	@ 0x8a
 800f8fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f8fe:	601a      	str	r2, [r3, #0]
 800f900:	4770      	bx	lr
 800f902:	2001      	movs	r0, #1
 800f904:	700a      	strb	r2, [r1, #0]
 800f906:	4770      	bx	lr

0800f908 <fiprintf>:
 800f908:	b40e      	push	{r1, r2, r3}
 800f90a:	b503      	push	{r0, r1, lr}
 800f90c:	4601      	mov	r1, r0
 800f90e:	ab03      	add	r3, sp, #12
 800f910:	4805      	ldr	r0, [pc, #20]	@ (800f928 <fiprintf+0x20>)
 800f912:	f853 2b04 	ldr.w	r2, [r3], #4
 800f916:	6800      	ldr	r0, [r0, #0]
 800f918:	9301      	str	r3, [sp, #4]
 800f91a:	f7ff f9b7 	bl	800ec8c <_vfiprintf_r>
 800f91e:	b002      	add	sp, #8
 800f920:	f85d eb04 	ldr.w	lr, [sp], #4
 800f924:	b003      	add	sp, #12
 800f926:	4770      	bx	lr
 800f928:	200005dc 	.word	0x200005dc

0800f92c <abort>:
 800f92c:	2006      	movs	r0, #6
 800f92e:	b508      	push	{r3, lr}
 800f930:	f000 f834 	bl	800f99c <raise>
 800f934:	2001      	movs	r0, #1
 800f936:	f7f7 fabb 	bl	8006eb0 <_exit>

0800f93a <_malloc_usable_size_r>:
 800f93a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f93e:	1f18      	subs	r0, r3, #4
 800f940:	2b00      	cmp	r3, #0
 800f942:	bfbc      	itt	lt
 800f944:	580b      	ldrlt	r3, [r1, r0]
 800f946:	18c0      	addlt	r0, r0, r3
 800f948:	4770      	bx	lr

0800f94a <_raise_r>:
 800f94a:	291f      	cmp	r1, #31
 800f94c:	b538      	push	{r3, r4, r5, lr}
 800f94e:	4605      	mov	r5, r0
 800f950:	460c      	mov	r4, r1
 800f952:	d904      	bls.n	800f95e <_raise_r+0x14>
 800f954:	2316      	movs	r3, #22
 800f956:	6003      	str	r3, [r0, #0]
 800f958:	f04f 30ff 	mov.w	r0, #4294967295
 800f95c:	bd38      	pop	{r3, r4, r5, pc}
 800f95e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f960:	b112      	cbz	r2, 800f968 <_raise_r+0x1e>
 800f962:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f966:	b94b      	cbnz	r3, 800f97c <_raise_r+0x32>
 800f968:	4628      	mov	r0, r5
 800f96a:	f000 f831 	bl	800f9d0 <_getpid_r>
 800f96e:	4622      	mov	r2, r4
 800f970:	4601      	mov	r1, r0
 800f972:	4628      	mov	r0, r5
 800f974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f978:	f000 b818 	b.w	800f9ac <_kill_r>
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	d00a      	beq.n	800f996 <_raise_r+0x4c>
 800f980:	1c59      	adds	r1, r3, #1
 800f982:	d103      	bne.n	800f98c <_raise_r+0x42>
 800f984:	2316      	movs	r3, #22
 800f986:	6003      	str	r3, [r0, #0]
 800f988:	2001      	movs	r0, #1
 800f98a:	e7e7      	b.n	800f95c <_raise_r+0x12>
 800f98c:	2100      	movs	r1, #0
 800f98e:	4620      	mov	r0, r4
 800f990:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f994:	4798      	blx	r3
 800f996:	2000      	movs	r0, #0
 800f998:	e7e0      	b.n	800f95c <_raise_r+0x12>
	...

0800f99c <raise>:
 800f99c:	4b02      	ldr	r3, [pc, #8]	@ (800f9a8 <raise+0xc>)
 800f99e:	4601      	mov	r1, r0
 800f9a0:	6818      	ldr	r0, [r3, #0]
 800f9a2:	f7ff bfd2 	b.w	800f94a <_raise_r>
 800f9a6:	bf00      	nop
 800f9a8:	200005dc 	.word	0x200005dc

0800f9ac <_kill_r>:
 800f9ac:	b538      	push	{r3, r4, r5, lr}
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	4d06      	ldr	r5, [pc, #24]	@ (800f9cc <_kill_r+0x20>)
 800f9b2:	4604      	mov	r4, r0
 800f9b4:	4608      	mov	r0, r1
 800f9b6:	4611      	mov	r1, r2
 800f9b8:	602b      	str	r3, [r5, #0]
 800f9ba:	f7f7 fa71 	bl	8006ea0 <_kill>
 800f9be:	1c43      	adds	r3, r0, #1
 800f9c0:	d102      	bne.n	800f9c8 <_kill_r+0x1c>
 800f9c2:	682b      	ldr	r3, [r5, #0]
 800f9c4:	b103      	cbz	r3, 800f9c8 <_kill_r+0x1c>
 800f9c6:	6023      	str	r3, [r4, #0]
 800f9c8:	bd38      	pop	{r3, r4, r5, pc}
 800f9ca:	bf00      	nop
 800f9cc:	20005ac0 	.word	0x20005ac0

0800f9d0 <_getpid_r>:
 800f9d0:	f7f7 ba64 	b.w	8006e9c <_getpid>

0800f9d4 <_init>:
 800f9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9d6:	bf00      	nop
 800f9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9da:	bc08      	pop	{r3}
 800f9dc:	469e      	mov	lr, r3
 800f9de:	4770      	bx	lr

0800f9e0 <_fini>:
 800f9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9e2:	bf00      	nop
 800f9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9e6:	bc08      	pop	{r3}
 800f9e8:	469e      	mov	lr, r3
 800f9ea:	4770      	bx	lr
